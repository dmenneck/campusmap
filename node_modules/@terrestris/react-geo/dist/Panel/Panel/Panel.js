"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = exports.Panel = void 0;

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _reactRnd = require("react-rnd");

var _uniqueId = _interopRequireDefault(require("lodash/uniqueId"));

var _isNumber = _interopRequireDefault(require("lodash/isNumber"));

var _isFunction = _interopRequireDefault(require("lodash/isFunction"));

var _Titlebar = _interopRequireDefault(require("../Titlebar/Titlebar.js"));

var _SimpleButton = _interopRequireDefault(require("../../Button/SimpleButton/SimpleButton.js"));

var _constants = require("../../constants");

require("./Panel.less");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

/**
 * The Panel.
 *
 * @class The Panel
 * @extends React.Component
 */
var Panel =
/*#__PURE__*/
function (_React$Component) {
  _inherits(Panel, _React$Component);

  /**
   * The className added to this component.
   * @type {String}
   * @private
   */

  /**
   * Printed representation of the pressed escape keyboard key.
   * s. https://developer.mozilla.org/de/docs/Web/API/KeyboardEvent/key/Key_Values
   * @type {String}
   * @private
   */

  /**
   * The properties.
   * @type {Object}
   */
  function Panel(props) {
    var _this;

    _classCallCheck(this, Panel);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(Panel).call(this, props));

    _defineProperty(_assertThisInitialized(_this), "className", "".concat(_constants.CSS_PREFIX, "panel"));

    _defineProperty(_assertThisInitialized(_this), "_escapeKeyboardEventKey", 'Esc');

    _defineProperty(_assertThisInitialized(_this), "onKeyDown", function (evt) {
      if (evt && evt.key.startsWith(_this._escapeKeyboardEventKey) && _this.props.onEscape) {
        _this.rnd.getSelfElement().focus();

        _this.props.onEscape();
      }
    });

    var id = props.id || (0, _uniqueId["default"])('panel-');
    _this.state = {
      id: id,
      collapsed: _this.props.collapsible ? _this.props.collapsed : false,
      titleBarHeight: _this.props.title ? props.titleBarHeight : 0,
      height: props.height,
      width: props.width,
      resizing: false
    };
    return _this;
  }
  /**
   * componentDidMount life cycle method.
   * Registers `keydown` listener if `onEscape` function was provided via props.
   */


  _createClass(Panel, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      if (this.props.onEscape) {
        document.addEventListener('keydown', this.onKeyDown, false);
      }
    }
    /**
     * componentWillUnmount life cycle method.
     * Unregisters `keydown` listener if `onEscape` function was provided via props.
     */

  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      if (this.props.onEscape) {
        document.removeEventListener('keydown', this.onKeyDown, false);
      }
    }
    /**
     * Calculates the height of the Panel and returns a number.
     *
     * @return {number}
     */

  }, {
    key: "calculateHeight",
    value: function calculateHeight() {
      return this.state.collapsed ? this.state.titleBarHeight : this.state.height;
    }
    /**
     * Calculates the height of the Panel body and returns a valid css height
     * expression.
     *
     * @return {string}
     */

  }, {
    key: "calculateBodyHeight",
    value: function calculateBodyHeight() {
      if (this.state.collapsed) {
        return '0px';
      } else {
        return (0, _isNumber["default"])(this.state.height) ? this.state.height - this.state.titleBarHeight + 'px' : this.state.height;
      }
    }
    /**
     * Toggles the collapse state of the panel.
     */

  }, {
    key: "toggleCollapse",
    value: function toggleCollapse() {
      var _this2 = this;

      this.setState({
        collapsed: !this.state.collapsed
      }, function () {
        _this2.rnd.updateSize({
          height: _this2.calculateHeight(),
          width: _this2.state.width
        });
      });
    }
    /**
     * Function called while resizing.
     *
     * @param {MouseEvent|TouchEvent} evt The MouseEvent event.
     * @param {String} direction A string discribing where the element was grabed.
     * @param {HTMLElement} el The element which gets resized.
     */

  }, {
    key: "onResize",
    value: function onResize(evt, direction, el) {
      var onResize = this.props.onResize;

      if ((0, _isFunction["default"])(onResize)) {
        onResize(arguments);
      }

      this.setState({
        height: el.clientHeight,
        width: el.clientWidth
      });
    }
    /**
     * Function called when resizing is started.
     */

  }, {
    key: "onResizeStart",
    value: function onResizeStart() {
      var onResizeStart = this.props.onResizeStart;

      if ((0, _isFunction["default"])(onResizeStart)) {
        onResizeStart(arguments);
      }

      this.setState({
        resizing: true
      });
    }
    /**
     * Function called when resizing is stopped.
     */

  }, {
    key: "onResizeStop",
    value: function onResizeStop() {
      var onResizeStop = this.props.onResizeStop;

      if ((0, _isFunction["default"])(onResizeStop)) {
        onResizeStop(arguments);
      }

      this.setState({
        resizing: false
      });
    }
    /**
     * Called on keyboard `keydown` event. Will be only triggered if pressed key
     * is `Escape` key and `onEscape` function is provided via props.
     * @param {React.KeyboardEvent<HTMLDivElement>} evt `keydown` event.
     */

  }, {
    key: "render",

    /**
     * The render function.
     */
    value: function render() {
      var _this3 = this;

      var _this$props = this.props,
          id = _this$props.id,
          className = _this$props.className,
          children = _this$props.children,
          title = _this$props.title,
          resizeOpts = _this$props.resizeOpts,
          onResize = _this$props.onResize,
          onResizeStart = _this$props.onResizeStart,
          onResizeStop = _this$props.onResizeStop,
          onEscape = _this$props.onEscape,
          draggable = _this$props.draggable,
          collapsible = _this$props.collapsible,
          height = _this$props.height,
          width = _this$props.width,
          titleBarHeight = _this$props.titleBarHeight,
          collapseTooltip = _this$props.collapseTooltip,
          tools = _this$props.tools,
          rndOpts = _objectWithoutProperties(_this$props, ["id", "className", "children", "title", "resizeOpts", "onResize", "onResizeStart", "onResizeStop", "onEscape", "draggable", "collapsible", "height", "width", "titleBarHeight", "collapseTooltip", "tools"]);

      var toolsClone = tools.map(function (t) {
        return _react["default"].cloneElement(t);
      });
      var finalClassName = className ? "".concat(className, " ").concat(this.className) : this.className;
      var rndClassName = "".concat(finalClassName, " ").concat(this.state.id);
      var enableResizing = resizeOpts === true ? undefined : resizeOpts;

      if (collapsible) {
        toolsClone.unshift(_react["default"].createElement(_SimpleButton["default"], {
          icon: "compress",
          key: "collapse-tool",
          onClick: this.toggleCollapse.bind(this),
          tooltip: collapseTooltip,
          size: "small"
        }));
      }

      var titleBarClassName = draggable ? 'drag-handle ant-modal-header' : 'ant-modal-header';
      var titleBar = title ? _react["default"].createElement(_Titlebar["default"], {
        className: titleBarClassName,
        tools: toolsClone,
        style: {
          height: this.state.titleBarHeight,
          cursor: draggable ? 'move' : 'default'
        }
      }, title) : null;
      var defWidth = this.state.width;
      var defHeight = this.calculateHeight();
      var x = rndOpts.x,
          y = rndOpts.y;
      var defX = x && (0, _isNumber["default"])(x) ? x : window.innerWidth / 2 - defWidth / 2;
      var defY = y && (0, _isNumber["default"])(y) ? y : window.innerHeight / 2 - defHeight / 2;
      return _react["default"].createElement(_reactRnd.Rnd, _extends({
        className: rndClassName,
        ref: function ref(rnd) {
          return _this3.rnd = rnd;
        },
        "default": {
          x: defX,
          y: defY,
          width: defWidth,
          height: defHeight
        },
        dragHandleClassName: "drag-handle",
        disableDragging: !draggable,
        enableResizing: enableResizing,
        resizeHandleClasses: {
          bottom: 'resize-handle resize-handle-bottom',
          bottomLeft: 'resize-handle resize-handle-bottom-left',
          bottomRight: 'resize-handle resize-handle-bottom-right',
          left: 'resize-handle resize-handle-left',
          right: 'resize-handle resize-handle-right',
          top: 'resize-handle resize-handle-top',
          topLeft: 'resize-handle resize-handle-top-left',
          topRight: 'resize-handle resize-handle-top-right'
        },
        onResize: this.onResize.bind(this),
        onResizeStart: this.onResizeStart.bind(this),
        onResizeStop: this.onResizeStop.bind(this)
      }, rndOpts), titleBar, _react["default"].createElement("div", {
        className: "body",
        tabIndex: "0",
        style: {
          cursor: 'default',
          overflow: 'hidden',
          height: this.calculateBodyHeight(),
          transition: this.state.resizing ? '' : 'height 0.25s'
        }
      }, children));
    }
  }]);

  return Panel;
}(_react["default"].Component);

exports.Panel = Panel;

_defineProperty(Panel, "propTypes", {
  id: _propTypes["default"].string,

  /**
   * An optional CSS class which should be added.
   * @type {String}
   */
  className: _propTypes["default"].string,

  /**
   * The children to show in the Window.
   * @type {node}
   */
  children: _propTypes["default"].node,

  /**
   * The title text to be shown in the window Header.
   * @type {string}
   */
  title: _propTypes["default"].string,

  /**
   * The enableResizing property is used to set the resizable permission of a
   * resizable component.
   * The permission of top, right, bottom, left, topRight, bottomRight,
   * bottomLeft, topLeft direction resizing. If omitted, all resizer are
   * enabled. If you want to permit only right direction resizing, set {
   *   top:false,
   *   right:true,
   *   bottom:false,
   *   left:false,
   *   topRight:false,
   *   bottomRight:false,
   *   bottomLeft:false,
   *   topLeft:false
   * }.
   * @type {object}
   */
  resizeOpts: _propTypes["default"].oneOfType([_propTypes["default"].shape({
    top: _propTypes["default"].bool,
    right: _propTypes["default"].bool,
    bottom: _propTypes["default"].bool,
    left: _propTypes["default"].bool,
    topRight: _propTypes["default"].bool,
    bottomRight: _propTypes["default"].bool,
    bottomLeft: _propTypes["default"].bool,
    topLeft: _propTypes["default"].bool
  }), _propTypes["default"].bool]),

  /**
   * Function called when onResize is triggered by react-rnd
   * @type {Function}
   */
  onResize: _propTypes["default"].func,

  /**
   * Function called when onResizeStart is triggered by react-rnd
   * @type {Function}
   */
  onResizeStart: _propTypes["default"].func,

  /**
   * Function called when onResizeStop is triggered by react-rnd
   * @type {Function}
   */
  onResizeStop: _propTypes["default"].func,

  /**
   * Callback function on `keydown` keyboard event if `escape` key was pressed.
   * @type {Function}
   */
  onEscape: _propTypes["default"].func,

  /**
   * Whether to allow dragging or not. Default is false.
   * @type {boolean}
   */
  draggable: _propTypes["default"].bool,

  /**
   * Whether to allow collapsing or not. Default is false.
   * @type {boolean}
   */
  collapsible: _propTypes["default"].bool,

  /**
   * Whether to show panel collapsed initially or not. Default is false.
   * @type {boolean}
   */
  collapsed: _propTypes["default"].bool,

  /**
   * The height of the panel.
   * @type {number|string}
   */
  height: _propTypes["default"].oneOfType([_propTypes["default"].number, _propTypes["default"].oneOf(['inherit', 'initial', 'auto'])]),

  /**
   * The width of the panel.
   * @type {number|string}
   */
  width: _propTypes["default"].oneOfType([_propTypes["default"].number, _propTypes["default"].oneOf(['inherit', 'initial', 'auto'])]),

  /**
   * The height of the TitleBar.
   * @type {number}
   */
  titleBarHeight: _propTypes["default"].number,

  /**
   * The tooltip of the collapse button.
   * @type {String}
   */
  collapseTooltip: _propTypes["default"].string,

  /**
   *
   */
  tools: _propTypes["default"].arrayOf(_propTypes["default"].node)
  /**
   * The default properties.
   * @type {Object}
   */

});

_defineProperty(Panel, "defaultProps", {
  draggable: false,
  collapsible: false,
  collapsed: false,
  resizeOpts: false,
  titleBarHeight: 37.5,
  tools: [],
  height: 'auto',
  width: 'auto',
  collapseTooltip: 'Collapse'
  /**
   * Create the SimpleButton.
   *
   * @constructs SimpleButton
   */

});

var _default = Panel;
exports["default"] = _default;