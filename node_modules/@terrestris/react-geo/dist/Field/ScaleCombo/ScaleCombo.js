"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

require("antd/es/select/style");

var _select = _interopRequireDefault(require("antd/es/select"));

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _Map = _interopRequireDefault(require("ol/Map"));

var _isInteger = _interopRequireDefault(require("lodash/isInteger"));

var _isEmpty = _interopRequireDefault(require("lodash/isEmpty"));

var _isEqual = _interopRequireDefault(require("lodash/isEqual"));

var _isFunction = _interopRequireDefault(require("lodash/isFunction"));

var _reverse = _interopRequireDefault(require("lodash/reverse"));

var _clone = _interopRequireDefault(require("lodash/clone"));

var _Logger = _interopRequireDefault(require("@terrestris/base-util/dist/Logger"));

var _MapUtil = _interopRequireDefault(require("@terrestris/ol-util/dist/MapUtil/MapUtil"));

var _constants = require("../../constants");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var Option = _select["default"].Option;

/**
 * Class representing a scale combo to choose map scale via a dropdown menu.
 *
 * @class The ScaleCombo
 * @extends React.Component
 */
var ScaleCombo =
/*#__PURE__*/
function (_React$Component) {
  _inherits(ScaleCombo, _React$Component);

  _createClass(ScaleCombo, null, [{
    key: "getDerivedStateFromProps",

    /**
     * The className added to this component.
     * @type {String}
     * @private
     */
    value: function getDerivedStateFromProps(nextProps, prevState) {
      if ((0, _isInteger["default"])(nextProps.zoomLevel) && !(0, _isEqual["default"])(nextProps.zoomLevel, prevState.zoomLevel)) {
        return {
          zoomLevel: nextProps.zoomLevel
        };
      }

      if ((0, _isFunction["default"])(nextProps.onZoomLevelSelect) && !(0, _isEqual["default"])(nextProps.onZoomLevelSelect, prevState.onZoomLevelSelect)) {
        return {
          onZoomLevelSelect: nextProps.onZoomLevelSelect
        };
      }

      return null;
    }
    /**
     * Create a scale combo.
     * @constructs ScaleCombo
     */

  }]);

  function ScaleCombo(props) {
    var _this;

    _classCallCheck(this, ScaleCombo);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(ScaleCombo).call(this, props));
    /**
     * The default onZoomLevelSelect function sets the resolution of the passed
     * map according to the selected Scale.
     *
     * @param {Number} selectedScale The selectedScale.
     */

    _defineProperty(_assertThisInitialized(_this), "className", "".concat(_constants.CSS_PREFIX, "scalecombo"));

    _defineProperty(_assertThisInitialized(_this), "zoomListener", function (evt) {
      var zoom = evt.target.getView().getZoom();
      var roundZoom = Math.round(zoom);

      if (!roundZoom) {
        roundZoom = 0;
      }

      _this.setState({
        zoomLevel: roundZoom
      });
    });

    _defineProperty(_assertThisInitialized(_this), "pushScale", function (scales, resolution, mv) {
      var scale = _MapUtil["default"].getScaleForResolution(resolution, mv.getProjection().getUnits());

      var roundScale = _MapUtil["default"].roundScale(scale);

      if (scales.includes(roundScale)) {
        return;
      }

      scales.push(roundScale);
    });

    _defineProperty(_assertThisInitialized(_this), "getOptionsFromMap", function () {
      var _this$props = _this.props,
          map = _this$props.map,
          resolutionsFilter = _this$props.resolutionsFilter;

      if (!(0, _isEmpty["default"])(_this.state.scales)) {
        _Logger["default"].debug('Array with scales found. Returning');

        return;
      }

      if (!map) {
        _Logger["default"].warn('Map component not found. Could not initialize options array.');

        return;
      }

      var scales = [];
      var mv = map.getView(); // use existing resolutions array if exists

      var resolutions = mv.getResolutions();

      if ((0, _isEmpty["default"])(resolutions)) {
        for (var currentZoomLevel = mv.getMaxZoom(); currentZoomLevel >= mv.getMinZoom(); currentZoomLevel--) {
          var resolution = mv.getResolutionForZoom(currentZoomLevel);

          if (resolutionsFilter(resolution)) {
            _this.pushScale(scales, resolution, mv);
          }
        }
      } else {
        var reversedResolutions = (0, _reverse["default"])((0, _clone["default"])(resolutions));
        reversedResolutions.filter(resolutionsFilter).forEach(function (resolution) {
          _this.pushScale(scales, resolution, mv);
        });
      }

      return scales;
    });

    _defineProperty(_assertThisInitialized(_this), "determineOptionKeyForZoomLevel", function (zoom) {
      if (!(0, _isInteger["default"])(zoom) || _this.state.scales.length - 1 - zoom < 0) {
        return undefined;
      }

      return _this.state.scales[_this.state.scales.length - 1 - zoom].toString();
    });

    var defaultOnZoomLevelSelect = function defaultOnZoomLevelSelect(selectedScale) {
      var mapView = props.map.getView();

      var calculatedResolution = _MapUtil["default"].getResolutionForScale(selectedScale, mapView.getProjection().getUnits());

      mapView.setResolution(calculatedResolution);
    };

    _this.state = {
      zoomLevel: props.zoomLevel || props.map.getView().getZoom(),
      onZoomLevelSelect: props.onZoomLevelSelect || defaultOnZoomLevelSelect,
      scales: props.scales
    };

    if (props.syncWithMap) {
      props.map.on('moveend', _this.zoomListener);
    }

    if ((0, _isEmpty["default"])(_this.state.scales) && _this.props.map) {
      _this.state.scales = _this.getOptionsFromMap();
    }

    return _this;
  }
  /**
   * Invoked immediately after updating occurs. This method is not called for
   * the initial render.
   *
   * @param {Object} prevProps The previous props.
   */


  _createClass(ScaleCombo, [{
    key: "componentDidUpdate",
    value: function componentDidUpdate(prevProps) {
      var _this$props2 = this.props,
          map = _this$props2.map,
          syncWithMap = _this$props2.syncWithMap;

      if (!(0, _isEqual["default"])(syncWithMap, prevProps.syncWithMap)) {
        if (syncWithMap) {
          map.on('moveend', this.zoomListener);
        } else {
          map.un('moveend', this.zoomListener);
        }
      }
    }
    /**
     * Set the zoomLevel of the to the ScaleCombo.
     *
     * @param  {Object} evt The 'moveend' event
     * @private
     */

  }, {
    key: "render",

    /**
     * The render function.
     */
    value: function render() {
      var _this$props3 = this.props,
          style = _this$props3.style,
          className = _this$props3.className;
      var _this$state = this.state,
          onZoomLevelSelect = _this$state.onZoomLevelSelect,
          scales = _this$state.scales,
          zoomLevel = _this$state.zoomLevel;
      var finalClassName = className ? "".concat(className, " ").concat(this.className) : this.className;
      var options = scales.map(function (roundScale) {
        return _react["default"].createElement(Option, {
          key: roundScale,
          value: roundScale.toString()
        }, "1:".concat(roundScale.toLocaleString()));
      });
      return _react["default"].createElement(_select["default"], {
        showSearch: true,
        onChange: onZoomLevelSelect,
        filterOption: function filterOption(input, option) {
          return option.key.startsWith(input);
        },
        value: this.determineOptionKeyForZoomLevel(zoomLevel),
        size: "small",
        style: style,
        className: finalClassName
      }, options);
    }
  }]);

  return ScaleCombo;
}(_react["default"].Component);

_defineProperty(ScaleCombo, "propTypes", {
  /**
   * An optional CSS class which should be added.
   * @type {String}
   */
  className: _propTypes["default"].string,

  /**
   * The zoomLevel.
   * @type {Number}
   */
  zoomLevel: _propTypes["default"].number,

  /**
   * The onZoomLevelSelect function. Pass a function if you want something
   * different than the resolution of the passed map.
   *
   * @type {Function}
   */
  onZoomLevelSelect: _propTypes["default"].func,

  /**
   * The resolutions.
   * @type {Array}
   */
  resolutions: _propTypes["default"].arrayOf(_propTypes["default"].number),

  /**
   * The scales.
   * @type {Array}
   */
  scales: _propTypes["default"].arrayOf(_propTypes["default"].shape),

  /**
   * A filter function to filter resolutions no options should be created
   * @type {Function}
   */
  resolutionsFilter: _propTypes["default"].func,

  /**
   * The style object
   * @type {Object}
   */
  style: _propTypes["default"].object,

  /**
   * The map
   * @type {Ol.Map}
   */
  map: _propTypes["default"].instanceOf(_Map["default"]).isRequired,

  /**
   * Set to false to not listen to the map moveend event.
   *
   * @type {Boolean}
   */
  syncWithMap: _propTypes["default"].bool
  /**
   * The default props
   */

});

_defineProperty(ScaleCombo, "defaultProps", {
  resolutionsFilter: function resolutionsFilter() {
    return true;
  },
  style: {
    width: 100
  },
  scales: [],
  syncWithMap: true
  /**
   * Invoked after the component is instantiated as well as when it
   * receives new props. It should return an object to update state, or null
   * to indicate that the new props do not require any state updates.
   *
   * @param {Object} nextProps The next properties.
   * @param {Object} prevState The previous state.
   */

});

var _default = ScaleCombo;
exports["default"] = _default;