"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

require("antd/es/slider/style");

var _slider = _interopRequireDefault(require("antd/es/slider"));

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _Base = _interopRequireDefault(require("ol/layer/Base"));

var _constants = require("../../constants");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

/**
 * Slider that changes opacity on a set of layers.
 *
 * @class The MultiLayerSlider
 * @extends React.Component
 */
var MultiLayerSlider =
/*#__PURE__*/
function (_React$Component) {
  _inherits(MultiLayerSlider, _React$Component);

  /**
   * The className added to this component.
   * @type {String}
   * @private
   */
  function MultiLayerSlider(props) {
    var _this;

    _classCallCheck(this, MultiLayerSlider);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(MultiLayerSlider).call(this, props));

    _defineProperty(_assertThisInitialized(_this), "className", "".concat(_constants.CSS_PREFIX, "multilayerslider"));

    var layers = _this.props.layers;
    layers.forEach(function (l) {
      return l.setOpacity(0);
    });
    layers[0].setOpacity(1);
    return _this;
  }
  /**
   * Formats the tip for the slider.
   * @param  {Number} value the slider value
   * @return {String}      the formatted tip value
   */


  _createClass(MultiLayerSlider, [{
    key: "formatTip",
    value: function formatTip(value) {
      var layerIdx = this.getLayerIndexForSliderValue(value);
      var layers = this.props.layers;
      var tip;

      if (layers[layerIdx]) {
        var opacity = Math.round(layers[layerIdx].get('opacity') * 100);
        var layer = layers[layerIdx];
        var layername = layer.get('name') || layer.get('title');
        tip = "".concat(layername, " ").concat(opacity, "%");
      }

      return tip;
    }
    /**
     * Called when the value of the slider changed.
     * @param  {Number} value the new value
     */

  }, {
    key: "valueUpdated",
    value: function valueUpdated(value) {
      var layerIdx = this.getLayerIndexForSliderValue(value);
      var opacity = this.getOpacityForValue(value);
      var layers = this.props.layers; // set all opacities to 0 first

      layers.forEach(function (l) {
        return l.setOpacity(0);
      });

      if (layers[layerIdx]) {
        layers[layerIdx].setOpacity(1 - opacity);
      }

      if (layers[layerIdx - 1] && opacity > 0.5) {
        layers[layerIdx - 1].setOpacity(opacity - 0.5);
      }

      if (layers[layerIdx + 1]) {
        layers[layerIdx + 1].setOpacity(opacity);
      }
    }
    /**
     * Gets the opacity for a given slider value
     * @param  {Number} value The current slider value
     * @return {Number} The opacity
     */

  }, {
    key: "getOpacityForValue",
    value: function getOpacityForValue(value) {
      var length = this.props.layers.length - 1;
      var ticksPerLayer = Math.round(100 / length);
      var idx = parseInt(value / ticksPerLayer, 10);
      var opacity = value / ticksPerLayer - (idx > length ? length : idx);
      return opacity > 1 ? 1 : opacity;
    }
    /**
     * Gets the matching index of the layer array for a given slider value
     * @param  {Number} value the current slider value
     * @return {Number} The layer array index
     */

  }, {
    key: "getLayerIndexForSliderValue",
    value: function getLayerIndexForSliderValue(value) {
      var length = this.props.layers.length - 1;
      var ticksPerLayer = Math.round(100 / length);
      var idx = parseInt(value / ticksPerLayer, 10);
      return idx > length ? length : idx;
    }
    /**
     * Creates the marks used with the slider based on the layers names.
     * @return {Object} The marks object
     */

  }, {
    key: "getMarks",
    value: function getMarks() {
      var marks = {};
      var layers = this.props.layers;
      var length = layers.length - 1;
      layers.forEach(function (l, i) {
        var layername = l.get('name') || l.get('title') || 'Layer ' + i + 1;
        var idx = Math.round(100 / length * i);
        marks[idx] = layername;
      });
      return marks;
    }
    /**
     * The render function.
     */

  }, {
    key: "render",
    value: function render() {
      var _this$props = this.props,
          layers = _this$props.layers,
          defaultValue = _this$props.defaultValue,
          className = _this$props.className,
          passThroughProps = _objectWithoutProperties(_this$props, ["layers", "defaultValue", "className"]);

      var finalClassName = className ? "".concat(className, " ").concat(this.className) : this.className;
      return _react["default"].createElement(_slider["default"], _extends({
        className: finalClassName,
        marks: this.getMarks(),
        defaultValue: defaultValue,
        min: 0,
        max: 100,
        tipFormatter: this.formatTip.bind(this),
        onChange: this.valueUpdated.bind(this)
      }, passThroughProps));
    }
  }]);

  return MultiLayerSlider;
}(_react["default"].Component);

_defineProperty(MultiLayerSlider, "propTypes", {
  /**
   * An optional CSS class which should be added.
   * @type {String}
   */
  className: _propTypes["default"].string,

  /**
   * The layers that should be handled. Default is: `[]`.
   *
   * @type {Array}
   */
  layers: _propTypes["default"].arrayOf(_propTypes["default"].instanceOf(_Base["default"])).isRequired,

  /**
   * The default value(s). Default is `0`
   * @type {Array<String> | String}
   */
  defaultValue: _propTypes["default"].any
});

_defineProperty(MultiLayerSlider, "defaultProps", {
  layers: [],
  defaultValue: 0
  /**
   * The constructor.
   *
   * @constructs MultiLayerSlider
   * @param {Object} props The properties.
   */

});

var _default = MultiLayerSlider;
exports["default"] = _default;