"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

require("antd/es/slider/style");

var _slider = _interopRequireDefault(require("antd/es/slider"));

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _moment = _interopRequireDefault(require("moment"));

var _isArray = _interopRequireDefault(require("lodash/isArray"));

var _isObject = _interopRequireDefault(require("lodash/isObject"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

/**
 * Customized slider that uses ISO 8601 time strings as input.
 *
 * @class The TimeSlider
 * @extends React.Component
 */
var TimeSlider =
/*#__PURE__*/
function (_React$Component) {
  _inherits(TimeSlider, _React$Component);

  function TimeSlider(props) {
    var _this;

    _classCallCheck(this, TimeSlider);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(TimeSlider).call(this, props));
    _this.state = _this.convertTimestamps();
    return _this;
  }
  /**
   * Converts the various input strings to unix timestamps.
   * @return {Object} the converted values
   */


  _createClass(TimeSlider, [{
    key: "convertTimestamps",
    value: function convertTimestamps() {
      return {
        min: (0, _moment["default"])(this.props.min).unix(),
        max: (0, _moment["default"])(this.props.max).unix(),
        defaultValue: this.convert(this.props.defaultValue)
      };
    }
    /**
     * Convert a value to unix timestamps.
     * @param  {Array | String} val the input value(s)
     * @return {Array | Number}     the converted value(s)
     */

  }, {
    key: "convert",
    value: function convert(val) {
      if (val === undefined) {
        return val;
      }

      return (0, _isArray["default"])(val) ? val.map(function (iso) {
        return (0, _moment["default"])(iso).unix();
      }) : (0, _moment["default"])(val).unix();
    }
    /**
     * Convert the keys of mark values to unix timestamps.
     *
     * @param {Object} marks The marks prop.
     * @return {Object} The marks prop with converted keys.
     */

  }, {
    key: "convertMarks",
    value: function convertMarks(marks) {
      var _this2 = this;

      var convertedMarks;

      if ((0, _isObject["default"])(marks)) {
        convertedMarks = {};
        Object.keys(marks).forEach(function (key) {
          var convertedKey = _this2.convert(key);

          convertedMarks[convertedKey] = marks[key];
        });
      }

      return convertedMarks;
    }
    /**
     * Formats a timestamp for user display.
     * @param  {Number} unix unix timestamps
     * @return {String}      the formatted timestamps
     */

  }, {
    key: "formatTimestamp",
    value: function formatTimestamp(unix) {
      return (0, _moment["default"])(unix * 1000).format(this.props.formatString);
    }
    /**
     * Called when the value(s) are changed. Converts the value(s) back to ISO
     * timestrings.
     * @param  {Array | Number} value the new value
     */

  }, {
    key: "valueUpdated",
    value: function valueUpdated(value) {
      this.props.onChange((0, _isArray["default"])(value) ? [(0, _moment["default"])(value[0] * 1000).toISOString(), (0, _moment["default"])(value[1] * 1000).toISOString()] : (0, _moment["default"])(value * 1000).toISOString());
    }
    /**
     * The render function.
     */

  }, {
    key: "render",
    value: function render() {
      var _this$props = this.props,
          className = _this$props.className,
          defaultValue = _this$props.defaultValue,
          formatString = _this$props.formatString,
          min = _this$props.min,
          max = _this$props.max,
          value = _this$props.value,
          marks = _this$props.marks,
          onChange = _this$props.onChange,
          useRange = _this$props.useRange,
          passThroughProps = _objectWithoutProperties(_this$props, ["className", "defaultValue", "formatString", "min", "max", "value", "marks", "onChange", "useRange"]);

      var finalClassName = className ? "".concat(className, " ").concat(this.className) : this.className;
      var convertedMarks = this.convertMarks(marks);
      return _react["default"].createElement(_slider["default"], _extends({
        className: finalClassName,
        defaultValue: this.convert(defaultValue),
        range: useRange,
        min: (0, _moment["default"])(min).unix(),
        max: (0, _moment["default"])(max).unix(),
        tipFormatter: this.formatTimestamp.bind(this),
        onChange: this.valueUpdated.bind(this),
        value: this.convert(value),
        marks: convertedMarks
      }, passThroughProps));
    }
  }]);

  return TimeSlider;
}(_react["default"].Component);

_defineProperty(TimeSlider, "propTypes", {
  /**
   * An optional CSS class which should be added.
   * @type {String}
   */
  className: _propTypes["default"].string,

  /**
   * Whether to allow range selection.
   * @type {Boolean}
   */
  useRange: _propTypes["default"].bool,

  /**
   * The default value(s).
   * @type {Array<String> | String}
   */
  defaultValue: _propTypes["default"].any,

  /**
   * The minimum value.
   * @type {String}
   */
  min: _propTypes["default"].string,

  /**
   * The maximum value.
   * @type {String}
   */
  max: _propTypes["default"].string,

  /**
   * Tick mark of Slider, type of key must be TimeStamp ISOString, and must in
   * closed interval min, maxï¼Œeach mark can declare its own style.
   */
  marks: _propTypes["default"].object,

  /**
   * Called when the value changes.
   * @type {Function}
   */
  onChange: _propTypes["default"].func,

  /**
   * The current value(s).
   * @type {Array<String> | String}
   */
  value: _propTypes["default"].any,

  /**
   * The moment.js compliant format string for the slider tooltip.
   * @type {String}
   */
  formatString: _propTypes["default"].string
});

_defineProperty(TimeSlider, "defaultProps", {
  useRange: false,
  defaultValue: (0, _moment["default"])().toISOString(),
  min: (0, _moment["default"])().subtract(1, 'hour').toISOString(),
  max: (0, _moment["default"])().toISOString(),
  onChange: function onChange() {
    return undefined;
  },
  value: (0, _moment["default"])().toISOString(),
  formatString: 'DD.MM. HH:mm'
  /**
   * The constructor.
   *
   * @constructs TimeSlider
   * @param {Object} props The properties.
   */

});

var _default = TimeSlider;
exports["default"] = _default;