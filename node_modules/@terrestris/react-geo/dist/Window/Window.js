"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = exports.Window = void 0;

var _react = _interopRequireDefault(require("react"));

var _reactDom = _interopRequireDefault(require("react-dom"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _uniqueId = _interopRequireDefault(require("lodash/uniqueId"));

var _Panel = _interopRequireDefault(require("../Panel/Panel/Panel.js"));

var _Logger = _interopRequireDefault(require("@terrestris/base-util/dist/Logger"));

var _constants = require("../constants");

require("./Window.less");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

/**
 * Window component that creates a React portal that renders children into a DOM
 * node that exists outside the DOM hierarchy of the parent component. By default,
 * Window Component is draggable.
 *
 * @class Window
 * @extends React.Component
 */
var Window =
/*#__PURE__*/
function (_React$Component) {
  _inherits(Window, _React$Component);

  /**
   * The className added to this component.
   * @type {String}
   * @private
   */

  /**
   * The properties.
   * @type {Object}
   */
  function Window(props) {
    var _this;

    _classCallCheck(this, Window);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(Window).call(this, props));

    _defineProperty(_assertThisInitialized(_this), "className", "".concat(_constants.CSS_PREFIX, "window-portal"));

    var id = props.id || (0, _uniqueId["default"])('window-');
    var parentId = _this.props.parentId;
    _this._parent = document.getElementById(parentId);

    if (!_this._parent) {
      _Logger["default"].warn('No parent element was found! Please ensure that parentId ' + 'parameter was set correctly (default value is `app`)');
    }

    var div = document.createElement('div');
    div.id = id;
    _this._elementDiv = div;
    _this.state = {
      id: id,
      resizing: false
    };
    return _this;
  }
  /**
   * The portal element is inserted in the DOM tree after
   * the Windows's children are mounted, meaning that children
   * will be mounted on a detached DOM node. If a child
   * component requires to be attached to the DOM tree
   * immediately when mounted, for example to measure a
   * DOM node, or uses 'autoFocus' in a descendant, add
   * state to Window and only render the children when Window
   * is inserted in the DOM tree.
   */


  _createClass(Window, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      if (this._parent) {
        this._parent.appendChild(this._elementDiv);
      }
    }
    /**
     * componentWillUnmount - remove child from parent element
     */

  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      if (this._parent) {
        this._parent.removeChild(this._elementDiv);
      }
    }
    /**
     * The render function.
     */

  }, {
    key: "render",
    value: function render() {
      var _this$props = this.props,
          className = _this$props.className,
          children = _this$props.children,
          parentId = _this$props.parentId,
          passThroughProps = _objectWithoutProperties(_this$props, ["className", "children", "parentId"]);

      var finalClassName = className ? "".concat(className, " ").concat(this.className) : this.className;
      this._elementDiv.className = finalClassName;
      return _reactDom["default"].createPortal(_react["default"].createElement(_Panel["default"], passThroughProps, children), this._elementDiv);
    }
  }]);

  return Window;
}(_react["default"].Component);

exports.Window = Window;

_defineProperty(Window, "propTypes", {
  /**
   * id of the component
   * will be filled automatically if not provided
   * @type {String}
   */
  id: _propTypes["default"].string,

  /**
   * The id of the parent component
   * default: app
   *
   * @type {String}
   */
  parentId: _propTypes["default"].string.isRequired,

  /**
   * An optional CSS class which should be added.
   * @type {String}
   */
  className: _propTypes["default"].string,

  /**
   * The children to show in the Window.
   * @type {node}
   */
  children: _propTypes["default"].node,

  /**
   * The title text to be shown in the window header.
   * @type {string}
   */
  title: _propTypes["default"].string
});

_defineProperty(Window, "defaultProps", {
  parentId: 'app',
  title: 'Window',
  resizeOpts: true,
  collapsible: true,
  draggable: true
  /**
   * Create a Window.
   * @constructs Window
   */

});

var _default = Window;
exports["default"] = _default;