"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

require("antd/es/dropdown/style");

var _dropdown = _interopRequireDefault(require("antd/es/dropdown"));

require("antd/es/avatar/style");

var _avatar = _interopRequireDefault(require("antd/es/avatar"));

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

require("./UserChip.less");

var _constants = require("../constants");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

/**
 * Class representing the user chip containing an image of the user and his/her
 * name
 *
 * @class The UserChip
 * @extends React.Component
 */
var UserChip =
/*#__PURE__*/
function (_React$Component) {
  _inherits(UserChip, _React$Component);

  /**
   * The className added to this component.
   * @type {String}
   * @private
   */
  function UserChip(props) {
    var _this;

    _classCallCheck(this, UserChip);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(UserChip).call(this, props));

    _defineProperty(_assertThisInitialized(_this), "className", "".concat(_constants.CSS_PREFIX, "userchip"));

    return _this;
  }
  /**
   * Determine initials for a given user name. The username will be splitted by
   * a whitespace and the first character of each part (capital letter) is added
   * to the initials.
   * e.g. 'John Doe' leads to 'JD'
   *
   * @return {String} initials if the user name.
   *
   * @method getInitials
   */


  _createClass(UserChip, [{
    key: "getInitials",
    value: function getInitials() {
      var splittedName = this.props.userName.split(' ');
      var initals = [];
      splittedName.forEach(function (part) {
        initals.push(part[0].toUpperCase());
      });
      return initals.join('');
    }
    /**
     * getUserMenu - Description
     *
     * @return {type} Description
     */

  }, {
    key: "getUserMenu",
    value: function getUserMenu() {
      var className = this.props.className ? "".concat(this.props.className, " ").concat(this.className) : this.className;
      return _react["default"].createElement("div", {
        className: className,
        style: this.props.style
      }, _react["default"].createElement(_avatar["default"], {
        src: this.props.imageSrc,
        size: "large",
        className: "userimage"
      }, this.props.imageSrc ? '' : this.getInitials()), _react["default"].createElement("span", {
        className: "username"
      }, this.props.userName));
    }
    /**
     * The render function
     */

  }, {
    key: "render",
    value: function render() {
      var _this2 = this;

      if (this.props.userMenu && _react["default"].isValidElement(this.props.userMenu)) {
        return _react["default"].createElement(_dropdown["default"], {
          overlay: this.props.userMenu,
          trigger: ['click'],
          getPopupContainer: function getPopupContainer() {
            return document.getElementsByClassName(_this2.className)[0];
          }
        }, this.getUserMenu());
      }

      return this.getUserMenu();
    }
  }]);

  return UserChip;
}(_react["default"].Component);

_defineProperty(UserChip, "propTypes", {
  /**
   * An optional CSS class which should be added.
   * @type {String}
   */
  className: _propTypes["default"].string,

  /**
   * The user aname.
   * @type {String}
   */
  userName: _propTypes["default"].string,

  /**
   * The image src.
   * @type {String}
   */
  imageSrc: _propTypes["default"].string,

  /**
   * The react element representing the user menu
   * @type {Element}
   */
  userMenu: _propTypes["default"].element,

  /**
   * The style object
   * @type {Object}
   */
  style: _propTypes["default"].object
  /**
   * The default properties.
   * @type {Object}
   */

});

_defineProperty(UserChip, "defaultProps", {
  userName: 'John Doe'
  /**
   * Create a UserChip.
   * @constructs UserChip
   */

});

var _default = UserChip;
exports["default"] = _default;