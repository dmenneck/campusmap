"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

require("antd/es/tooltip/style");

var _tooltip = _interopRequireDefault(require("antd/es/tooltip"));

require("antd/es/button/style");

var _button = _interopRequireDefault(require("antd/es/button"));

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _Icon = _interopRequireDefault(require("react-fa/lib/Icon"));

require("./SimpleButton.less");

var _constants = require("../../constants");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

/**
 * The SimpleButton.
 *
 * @class The SimpleButton
 * @extends React.Component
 */
var SimpleButton =
/*#__PURE__*/
function (_React$Component) {
  _inherits(SimpleButton, _React$Component);

  /**
   * The className added to this component.
   * @type {String}
   * @private
   */

  /**
   * The properties.
   * @type {Object}
   */

  /**
   * The default properties.
   * @type {Object}
   */
  function SimpleButton(props) {
    var _this;

    _classCallCheck(this, SimpleButton);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(SimpleButton).call(this, props));

    _defineProperty(_assertThisInitialized(_this), "className", "".concat(_constants.CSS_PREFIX, "simplebutton"));

    return _this;
  }
  /**
   * The render function.
   */


  _createClass(SimpleButton, [{
    key: "render",
    value: function render() {
      var _this$props = this.props,
          className = _this$props.className,
          icon = _this$props.icon,
          fontIcon = _this$props.fontIcon,
          tooltip = _this$props.tooltip,
          tooltipPlacement = _this$props.tooltipPlacement,
          tooltipProps = _this$props.tooltipProps,
          antBtnProps = _objectWithoutProperties(_this$props, ["className", "icon", "fontIcon", "tooltip", "tooltipPlacement", "tooltipProps"]);

      var finalClassName = className ? "".concat(className, " ").concat(this.className) : this.className;
      return _react["default"].createElement(_tooltip["default"], _extends({
        title: tooltip,
        placement: tooltipPlacement
      }, tooltipProps), _react["default"].createElement(_button["default"], _extends({
        className: finalClassName
      }, antBtnProps), icon || fontIcon ? _react["default"].createElement(_Icon["default"], {
        name: icon ? icon : '',
        className: fontIcon
      }) : null, antBtnProps.children));
    }
  }]);

  return SimpleButton;
}(_react["default"].Component);

_defineProperty(SimpleButton, "propTypes", {
  className: _propTypes["default"].string,

  /**
   * The font awesome icon name.
   * @type {String}
   */
  icon: _propTypes["default"].string,

  /**
   * The classname of an icon of an iconFont. Use either this or icon.
   * @type {String}
   */
  fontIcon: _propTypes["default"].string,

  /**
   * The tooltip to be shown on hover.
   * @type {String}
   */
  tooltip: _propTypes["default"].string,

  /**
   * The position of the tooltip.
   * @type {String}
   */
  tooltipPlacement: _propTypes["default"].oneOf(['top', 'left', 'right', 'bottom', 'topLeft', 'topRight', 'bottomLeft', 'bottomRight', 'leftTop', 'leftBottom', 'rightTop', 'rightBottom']),

  /**
   * Additional [antd tooltip](https://ant.design/components/tooltip/)
   * properties to pass to the tooltip component. Note: The props `title`
   * and `placement` will override the props `tooltip` and `tooltipPlacement`
   * of this component!
   * @type {Object}
   */
  tooltipProps: _propTypes["default"].object
});

_defineProperty(SimpleButton, "defaultProps", {
  type: 'primary',
  tooltipProps: {
    mouseEnterDelay: 1.5
  }
  /**
   * Create the SimpleButton.
   *
   * @constructs SimpleButton
   */

});

var _default = SimpleButton;
exports["default"] = _default;