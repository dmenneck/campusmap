"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

require("antd/es/table/style");

var _table = _interopRequireDefault(require("antd/es/table"));

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _Feature = _interopRequireDefault(require("ol/Feature"));

var _get = _interopRequireDefault(require("lodash/get"));

var _constants = require("../../constants");

require("./PropertyGrid.less");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

/**
 * Class representing a feature grid showing the attribute values of a simple feature.
 *
 * @class PropertyGrid
 * @extends React.Component
 */
var PropertyGrid =
/*#__PURE__*/
function (_React$Component) {
  _inherits(PropertyGrid, _React$Component);

  /**
   * The CSS-className added to this component.
   * @type {String}
   * @private
   */

  /**
   * The prop types.
   * @type {Object}
   */
  function PropertyGrid(props) {
    var _this;

    _classCallCheck(this, PropertyGrid);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(PropertyGrid).call(this, props));

    _defineProperty(_assertThisInitialized(_this), "className", "".concat(_constants.CSS_PREFIX, "propertygrid"));

    var feature = props.feature,
        attributeFilter = props.attributeFilter,
        attributeNames = props.attributeNames,
        attributeNameColumnWidthInPercent = props.attributeNameColumnWidthInPercent;

    var _this$generatePropert = _this.generatePropertyGrid(feature, attributeFilter, attributeNames, attributeNameColumnWidthInPercent),
        dataSource = _this$generatePropert.dataSource,
        columns = _this$generatePropert.columns;

    _this.state = {
      dataSource: dataSource,
      columns: columns
    };
    return _this;
  }
  /**
  * generatePropertyGrid function
  * Initialize data store and column definitions of table
  *
  * @param {OlFeature} feature feature to display
  * @param {Array} attributeFilter Array of string values to filter the grid rows
  * @param {Object} attributeNames Object containing mapping of attribute names names in feature to custom ones
  * @param {Number} attributeNameColumnWidthInPercent Column width (in percent)
  */


  _createClass(PropertyGrid, [{
    key: "generatePropertyGrid",
    value: function generatePropertyGrid(feature, attributeFilter, attributeNames, attributeNameColumnWidthInPercent) {
      if (!attributeFilter) {
        attributeFilter = feature.getKeys().filter(function (attrName) {
          return attrName !== 'geometry';
        });
      }

      var dataSource = attributeFilter.map(function (attr) {
        var rowObj = {
          attributeName: attributeNames && (0, _get["default"])(attributeNames, attr) ? (0, _get["default"])(attributeNames, attr) : attr,
          attributeValue: feature.get(attr),
          key: "ATTR_".concat(attr, "_fid_").concat(feature.ol_uid)
        };
        return rowObj;
      });
      var columns = [{
        title: this.props.attributeNameColumnTitle,
        dataIndex: 'attributeName',
        key: 'attributeName',
        width: "".concat(attributeNameColumnWidthInPercent, "%")
      }, {
        title: this.props.attributeValueColumnTitle,
        dataIndex: 'attributeValue',
        key: 'attributeValue',
        width: "".concat(100 - attributeNameColumnWidthInPercent, "%")
      }];
      return {
        dataSource: dataSource,
        columns: columns
      };
    }
    /**
     * The render function.
     *
     * @return {Element} The element.
     */

  }, {
    key: "render",
    value: function render() {
      var _this$props = this.props,
          className = _this$props.className,
          feature = _this$props.feature,
          passThroughProps = _objectWithoutProperties(_this$props, ["className", "feature"]);

      var _this$state = this.state,
          columns = _this$state.columns,
          dataSource = _this$state.dataSource;
      var finalClassName = className ? "".concat(className, " ").concat(this.className) : this.className;
      return _react["default"].createElement(_table["default"], _extends({
        className: finalClassName,
        rowKey: function rowKey(record) {
          return record.key;
        },
        dataSource: dataSource,
        columns: columns,
        pagination: false,
        useFixedHeader: true
      }, passThroughProps));
    }
  }]);

  return PropertyGrid;
}(_react["default"].Component);

_defineProperty(PropertyGrid, "propTypes", {
  /**
   * An optional CSS class which should be added.
   * @type {String}
   */
  className: _propTypes["default"].string,

  /**
   * Optional title of the attribute name column
   * @type {String}
   */
  attributeNameColumnTitle: _propTypes["default"].string,

  /**
   * Optional value in percent representing the width of the attribute name column
   * The width of attribute value column wil be calculated depending in this
   * @type {String}
   */
  attributeNameColumnWidthInPercent: _propTypes["default"].number,

  /**
   * Optional title of the attribute value column
   * @type {String}
   */
  attributeValueColumnTitle: _propTypes["default"].string,

  /**
   * Optional array of attribute names to filter
   * @type {Array}
   */
  attributeFilter: _propTypes["default"].arrayOf(_propTypes["default"].string),

  /**
   * Optional object containing a mapping of attribute names in OL feature to custom ones
   *
   * @type {Object}
   */
  attributeNames: _propTypes["default"].object,

  /**
   * Feature for which the properties should be shown
   * @type {OlFeature}
   */
  feature: _propTypes["default"].instanceOf(_Feature["default"]).isRequired
});

_defineProperty(PropertyGrid, "defaultProps", {
  attributeNameColumnTitle: 'Attribute name',
  attributeValueColumnTitle: 'Attribute value',
  attributeNameColumnWidthInPercent: 50
  /**
   * The constructor.
   *
   * @param {Object} props The initial props.
   */

});

var _default = PropertyGrid;
exports["default"] = _default;