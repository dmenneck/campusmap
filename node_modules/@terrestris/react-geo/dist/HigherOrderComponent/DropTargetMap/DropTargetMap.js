"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.onDropAware = onDropAware;
exports["default"] = void 0;

var _propTypes = _interopRequireDefault(require("prop-types"));

var _react = _interopRequireDefault(require("react"));

var _FileUtil = _interopRequireDefault(require("@terrestris/ol-util/dist/FileUtil/FileUtil"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

/**
 * HOC that adds layers to the map if GeoJSON files or shapefile zip files are
 * dropped on it.
 * @param  {React.Component} WrappedComponent the map component
 * @return {React.Component} a time layer aware component
 */
function onDropAware(WrappedComponent) {
  var _class, _temp;

  return _temp = _class =
  /*#__PURE__*/
  function (_React$Component) {
    _inherits(DropTargetMap, _React$Component);

    function DropTargetMap() {
      var _getPrototypeOf2;

      var _this;

      _classCallCheck(this, DropTargetMap);

      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(DropTargetMap)).call.apply(_getPrototypeOf2, [this].concat(args)));

      _defineProperty(_assertThisInitialized(_this), "render", function () {
        return _react["default"].createElement(WrappedComponent, _extends({
          onDrop: _this.onDrop.bind(_assertThisInitialized(_this)),
          onDragOver: _this.onDragOver
        }, _this.props));
      });

      return _this;
    }

    _createClass(DropTargetMap, [{
      key: "onDrop",
      value: function onDrop(event) {
        var map = this.props.map;
        event.preventDefault();
        var files = event.dataTransfer.files;

        if (files.length > 0) {
          for (var i = 0; i < files.length; ++i) {
            var file = files[i];

            if (file.name.match(/\.zip$/g)) {
              _FileUtil["default"].addShpLayerFromFile(file, map);
            } else {
              _FileUtil["default"].addGeojsonLayerFromFile(file, map);
            }
          }
        }
      }
      /**
       * Prevents default in order to prevent browser navigation/opening the file.
       * @param  {Object} event the dragover event
       */

    }, {
      key: "onDragOver",
      value: function onDragOver(event) {
        event.preventDefault();
      }
      /**
       * Injects the onDrop and onDragOver properties.
       * @return {React.Component} the wrapped component
       */

    }]);

    return DropTargetMap;
  }(_react["default"].Component), _defineProperty(_class, "propTypes", {
    /**
     * The openlayers map injected by mappify.
     * @type {ol.Map}
     */
    map: _propTypes["default"].object
    /**
     * Calls an appropriate addLayer method depending on the fileending.
     * Currently expects shapefiles for '*.zip' and geojson for all other
     * endings.
     * @param  {Object} event the drop event
     */

  }), _temp;
}

var _default = onDropAware;
exports["default"] = _default;