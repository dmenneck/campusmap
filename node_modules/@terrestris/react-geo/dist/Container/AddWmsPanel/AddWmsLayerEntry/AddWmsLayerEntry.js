"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = exports.AddWmsLayerEntry = void 0;

require("antd/es/checkbox/style");

var _checkbox = _interopRequireDefault(require("antd/es/checkbox"));

require("antd/es/tooltip/style");

var _tooltip = _interopRequireDefault(require("antd/es/tooltip"));

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _Tile = _interopRequireDefault(require("ol/layer/Tile"));

var _Image = _interopRequireDefault(require("ol/layer/Image"));

var _reactFa = require("react-fa");

require("./AddWmsLayerEntry.less");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

/**
 * Class representing a layer parsed from capabilities document.
 * This componment is used in AddWmsPanel
 *
 * @class AddWmsLayerEntry
 * @extends React.Component
 */
var AddWmsLayerEntry =
/*#__PURE__*/
function (_React$Component) {
  _inherits(AddWmsLayerEntry, _React$Component);

  /**
   * The prop types.
   * @type {Object}
   */
  function AddWmsLayerEntry(props) {
    var _this;

    _classCallCheck(this, AddWmsLayerEntry);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(AddWmsLayerEntry).call(this, props));
    _this.state = {
      copyright: props.wmsLayer.getSource().getAttributions(),
      queryable: props.wmsLayer.get('queryable')
    };
    return _this;
  }
  /**
   * The defaultProps.
   * @type {Object}
   */


  _createClass(AddWmsLayerEntry, [{
    key: "render",
    value: function render() {
      var _this$props = this.props,
          wmsLayer = _this$props.wmsLayer,
          layerTextTemplateFn = _this$props.layerTextTemplateFn,
          layerQueryableText = _this$props.layerQueryableText;
      var _this$state = this.state,
          copyright = _this$state.copyright,
          queryable = _this$state.queryable;
      var title = wmsLayer.get('title');
      var layerTextSpan = layerTextTemplateFn(wmsLayer);
      return _react["default"].createElement(_checkbox["default"], {
        value: title,
        className: "add-wms-layer-checkbox-line"
      }, _react["default"].createElement("div", {
        className: "add-wms-layer-entry"
      }, layerTextSpan, copyright ? _react["default"].createElement(_reactFa.Icon, {
        className: "add-wms-add-info-icon",
        name: "copyright"
      }) : null, queryable ? _react["default"].createElement(_tooltip["default"], {
        title: layerQueryableText
      }, _react["default"].createElement(_reactFa.Icon, {
        className: "add-wms-add-info-icon",
        name: "info"
      })) : null));
    }
  }]);

  return AddWmsLayerEntry;
}(_react["default"].Component);

exports.AddWmsLayerEntry = AddWmsLayerEntry;

_defineProperty(AddWmsLayerEntry, "propTypes", {
  /**
   * Object containing layer information
   * @type {Object}
   */
  wmsLayer: _propTypes["default"].oneOfType([_propTypes["default"].instanceOf(_Tile["default"]), _propTypes["default"].instanceOf(_Image["default"])]).isRequired,

  /**
   * Function returning a span with the textual representation of this layer
   * Default: Title of the layer and its abstract (if available)
   * @type {Function}
   */
  layerTextTemplateFn: _propTypes["default"].func,

  /**
   * Optional text to be shown in Tooltip for a layer that can be queried
   * @type {Object}
   */
  layerQueryableText: _propTypes["default"].string
  /**
   * Create the AddWmsLayerEntry.
   *
   * @constructs AddWmsLayerEntry
   */

});

_defineProperty(AddWmsLayerEntry, "defaultProps", {
  layerQueryableText: 'Layer is queryable',
  layerTextTemplateFn: function layerTextTemplateFn(wmsLayer) {
    var title = wmsLayer.get('title');

    var _abstract = wmsLayer.get('abstract');

    var abstractTextSpan = _abstract ? _react["default"].createElement("span", null, "".concat(title, " - ").concat(_abstract, ":")) : _react["default"].createElement("span", null, "".concat(title));
    return abstractTextSpan;
  }
  /**
   * The render function
   */

});

var _default = AddWmsLayerEntry;
exports["default"] = _default;