"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = exports.AddWmsPanel = void 0;

require("antd/es/checkbox/style");

var _checkbox = _interopRequireDefault(require("antd/es/checkbox"));

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _Tile = _interopRequireDefault(require("ol/layer/Tile"));

var _Image = _interopRequireDefault(require("ol/layer/Image"));

var _Map = _interopRequireDefault(require("ol/Map"));

var _isFunction = _interopRequireDefault(require("lodash/isFunction"));

var _Panel = _interopRequireDefault(require("../../Panel/Panel/Panel.js"));

var _Titlebar = _interopRequireDefault(require("../../Panel/Titlebar/Titlebar.js"));

var _SimpleButton = _interopRequireDefault(require("../../Button/SimpleButton/SimpleButton.js"));

var _Logger = _interopRequireDefault(require("@terrestris/base-util/dist/Logger"));

var _AddWmsLayerEntry = _interopRequireDefault(require("./AddWmsLayerEntry/AddWmsLayerEntry.js"));

require("./AddWmsPanel.less");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

/**
 * Panel containing a (checkable) list of AddWmsLayerEntry instances.
 * This class can be used e.g with a result obtained by ol WMS capabilities
 * parser, in particular objects in `Capability.Layer.Layer`
 *
 * @class The AddWmsPanel
 * @extends React.Component
 */
var AddWmsPanel =
/*#__PURE__*/
function (_React$Component) {
  _inherits(AddWmsPanel, _React$Component);

  /**
   * The prop types.
   * @type {Object}
   */
  function AddWmsPanel(props) {
    var _this;

    _classCallCheck(this, AddWmsPanel);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(AddWmsPanel).call(this, props));

    _defineProperty(_assertThisInitialized(_this), "onSelectedLayersChange", function (selectedWmsLayers) {
      var onSelectionChange = _this.props.onSelectionChange;

      if ((0, _isFunction["default"])(onSelectionChange)) {
        onSelectionChange(selectedWmsLayers);
      }

      _this.setState({
        selectedWmsLayers: selectedWmsLayers
      });
    });

    _defineProperty(_assertThisInitialized(_this), "onAddSelectedLayers", function () {
      var selectedWmsLayers = _this.state.selectedWmsLayers;
      var _this$props = _this.props,
          onLayerAddToMap = _this$props.onLayerAddToMap,
          map = _this$props.map;

      var filteredLayers = _this.props.wmsLayers.filter(function (layer) {
        return selectedWmsLayers.includes(layer.get('title'));
      });

      if (onLayerAddToMap) {
        onLayerAddToMap(filteredLayers);
      } else if (map) {
        filteredLayers.forEach(function (layer) {
          // Add layer to map if it is not added yet
          if (!map.getLayers().getArray().includes(layer)) {
            map.addLayer(layer);
          }
        });
      } else {
        _Logger["default"].warn('Neither map nor onLayerAddToMap given in props. Will do nothing.');
      }
    });

    _defineProperty(_assertThisInitialized(_this), "onAddAllLayers", function () {
      var _this$props2 = _this.props,
          onLayerAddToMap = _this$props2.onLayerAddToMap,
          wmsLayers = _this$props2.wmsLayers,
          map = _this$props2.map;

      if (onLayerAddToMap) {
        onLayerAddToMap(wmsLayers);
      } else if (map) {
        wmsLayers.forEach(function (layer) {
          // Add layer to map if it is not added yet
          if (!map.getLayers().getArray().includes(layer)) {
            map.addLayer(layer);
          }
        });
      } else {
        _Logger["default"].warn('Neither map nor onLayerAddToMap given in props. Will do nothing.');
      }
    });

    _this.state = {
      selectedWmsLayers: []
    };
    return _this;
  }
  /**
   * The defaultProps.
   * @type {Object}
   */


  _createClass(AddWmsPanel, [{
    key: "render",

    /**
     * The render function.
     */
    value: function render() {
      var _this$props3 = this.props,
          wmsLayers = _this$props3.wmsLayers,
          onCancel = _this$props3.onCancel,
          titleText = _this$props3.titleText,
          cancelText = _this$props3.cancelText,
          addAllLayersText = _this$props3.addAllLayersText,
          addSelectedLayersText = _this$props3.addSelectedLayersText,
          passThroughOpts = _objectWithoutProperties(_this$props3, ["wmsLayers", "onCancel", "titleText", "cancelText", "addAllLayersText", "addSelectedLayersText"]);

      var selectedWmsLayers = this.state.selectedWmsLayers;
      return wmsLayers && wmsLayers.length > 0 ? _react["default"].createElement(_Panel["default"], _extends({
        title: titleText,
        bounds: "#main",
        className: "add-wms-panel"
      }, passThroughOpts), _react["default"].createElement(_checkbox["default"].Group, {
        onChange: this.onSelectedLayersChange
      }, wmsLayers.map(function (layer, idx) {
        return _react["default"].createElement(_AddWmsLayerEntry["default"], {
          wmsLayer: layer,
          key: idx
        });
      })), _react["default"].createElement(_Titlebar["default"], {
        tools: [_react["default"].createElement(_SimpleButton["default"], {
          size: "small",
          key: "useSelectedBtn",
          disabled: selectedWmsLayers.length === 0,
          onClick: this.onAddSelectedLayers
        }, addSelectedLayersText), _react["default"].createElement(_SimpleButton["default"], {
          size: "small",
          key: "useAllBtn",
          onClick: this.onAddAllLayers
        }, addAllLayersText), onCancel ? _react["default"].createElement(_SimpleButton["default"], {
          size: "small",
          key: "cancelBtn",
          onClick: onCancel
        }, cancelText) : null]
      })) : null;
    }
  }]);

  return AddWmsPanel;
}(_react["default"].Component);

exports.AddWmsPanel = AddWmsPanel;

_defineProperty(AddWmsPanel, "propTypes", {
  /**
   * Array containing layers (e.g. `Capability.Layer.Layer` of ol capabilities
   * parser)
   * @type {Array} -- required
   */
  wmsLayers: _propTypes["default"].arrayOf(_propTypes["default"].oneOfType([_propTypes["default"].instanceOf(_Tile["default"]), _propTypes["default"].instanceOf(_Image["default"])])).isRequired,

  /**
   * Optional instance of OlMap which is used if onLayerAddToMap is not provided
   * @type {OlMap}
   */
  map: _propTypes["default"].instanceOf(_Map["default"]),

  /**
   * Optional function being called when onAddSelectedLayers or onAddAllLayers
   * is triggered
   * @type {Function}
   */
  onLayerAddToMap: _propTypes["default"].func,

  /**
   * Optional function that is called if cancel button is clicked
   * @type {Function}
   */
  onCancel: _propTypes["default"].func,

  /**
   * Optional function that is called if selection has changed.
   * @type {Function}
   */
  onSelectionChange: _propTypes["default"].func,

  /**
   * Optional text to be shown in button to add all layers
   * @type {String}
   */
  addAllLayersText: _propTypes["default"].string,

  /**
   * Optional text to be shown in button to add selected layers
   * @type {String}
   */
  addSelectedLayersText: _propTypes["default"].string,

  /**
   * Optional text to be shown in cancel button
   * @type {String}
   */
  cancelText: _propTypes["default"].string,

  /**
   * Optional text to be shown in panel title
   * @type {String}
   */
  titleText: _propTypes["default"].string
  /**
   * Create an AddWmsPanel.
   * @constructs AddWmsPanel
   */

});

_defineProperty(AddWmsPanel, "defaultProps", {
  addAllLayersText: 'Add all layers',
  addSelectedLayersText: 'Add selected layers',
  cancelText: 'Cancel',
  titleText: 'Add WMS layer'
  /**
   * onSelectedLayersChange - set state for selectedWmsLayers
   *
   * @param {Array} selectedWmsLayers titles of selected WMS layers to set
   * in state
   */

});

var _default = AddWmsPanel;
exports["default"] = _default;