"use strict";

var _GeoJSON = _interopRequireDefault(require("ol/format/GeoJSON"));

var _Feature = _interopRequireDefault(require("ol/Feature"));

var _Geometry = _interopRequireDefault(require("ol/geom/Geometry"));

var _Polygon = _interopRequireDefault(require("ol/geom/Polygon"));

var _MultiPolygon = _interopRequireDefault(require("ol/geom/MultiPolygon"));

var _Point = _interopRequireDefault(require("ol/geom/Point"));

var _MultiPoint = _interopRequireDefault(require("ol/geom/MultiPoint"));

var _LineString = _interopRequireDefault(require("ol/geom/LineString"));

var _MultiLineString = _interopRequireDefault(require("ol/geom/MultiLineString"));

var _index = require("../index");

var _TestCoords = require("../../assets/TestCoords");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

/*eslint-env jest*/
describe('GeometryUtil', function () {
  var poly;
  var format;
  beforeEach(function () {
    format = new _GeoJSON["default"]();
    poly = new _Feature["default"]({
      geometry: new _Polygon["default"](_TestCoords.boxCoords)
    });
  });
  describe('Basics', function () {
    it('is defined', function () {
      expect(_index.GeometryUtil).toBeDefined();
    });
  });
  describe('Static methods', function () {
    describe('#splitByLine', function () {
      describe('with ol.Feature as params', function () {
        /**
         *          +
         *          |
         *   +-------------+
         *   |      |      |
         *   |      |      |
         *   |      |      |
         *   |      |      |
         *   |      |      |
         *   |      |      |
         *   +-------------+
         *          |
         *          +
         */
        it('splits the given convex polygon geometry with a straight line', function () {
          var line = new _Feature["default"]({
            geometry: new _LineString["default"](_TestCoords.lineStringCoords)
          });

          var got = _index.GeometryUtil.splitByLine(poly, line, 'EPSG:4326');

          var exp = [new _Feature["default"]({
            geometry: new _Polygon["default"](_TestCoords.splitBoxCoords1)
          }), new _Feature["default"]({
            geometry: new _Polygon["default"](_TestCoords.splitBoxCoords2)
          })];
          expect(format.writeFeatures(got)).toEqual(format.writeFeatures(exp));
        });
        /**
         *          +
         *          |
         *   +-------------+
         *   |      |      |
         *   |      |      |
         *   |      |      |
         *   |      +---------+
         *   |             |
         *   |             |
         *   +-------------+
         */

        it('splits the given convex polygon geometry with a more complex line', function () {
          var line = new _Feature["default"]({
            geometry: new _LineString["default"](_TestCoords.lineStringLFormedCoords)
          });

          var got = _index.GeometryUtil.splitByLine(poly, line, 'EPSG:4326');

          var exp = [new _Feature["default"]({
            geometry: new _Polygon["default"](_TestCoords.splitBoxLFormedCoords1)
          }), new _Feature["default"]({
            geometry: new _Polygon["default"](_TestCoords.splitBoxLFormedCoords2)
          })];
          expect(format.writeFeatures(got)).toEqual(format.writeFeatures(exp));
        });
        /**
         *       +----+         +----+
         *       |    |         |    |
         *       |    |         |    |
         * +--------------------------------+
         *       |    |         |    |
         *       |    +---------+    |
         *       |                   |
         *       |                   |
         *       |                   |
         *       |                   |
         *       +-------------------+
         *
         */

        it('splits the given concave polygon geometry with a straight line', function () {
          poly = new _Feature["default"]({
            geometry: new _Polygon["default"](_TestCoords.uFormedPolygonCoords)
          });
          var line = new _Feature["default"]({
            geometry: new _LineString["default"](_TestCoords.lineStringCoords2)
          });

          var got = _index.GeometryUtil.splitByLine(poly, line, 'EPSG:4326');

          var exp = [new _Feature["default"]({
            geometry: new _Polygon["default"](_TestCoords.splitUFormerdCoords1)
          }), new _Feature["default"]({
            geometry: new _Polygon["default"](_TestCoords.splitUFormerdCoords2)
          }), new _Feature["default"]({
            geometry: new _Polygon["default"](_TestCoords.splitUFormerdCoords3)
          })];
          expect(format.writeFeatures(got)).toEqual(format.writeFeatures(exp));
        });
        /**
         *          +-------------------+
         *          |                   |
         *    +     |    +---------+    |
         *    |\    |    |         |    |
         *    | \   |    |         |    |
         * +----------------------------------+
         *    |  \  |    |         |    |
         *    |   \ |    +---------+    |
         *    |    \|                   |
         *    |     +                   |
         *    |                         |
         *    +------------------------ +
         *
         */

        it('splits a complex polygon geometry (including hole) with a straight line', function () {
          poly = new _Feature["default"]({
            geometry: new _Polygon["default"](_TestCoords.holeCoords2)
          });
          var line = new _Feature["default"]({
            geometry: new _LineString["default"](_TestCoords.holeCoords2CutLine)
          });

          var got = _index.GeometryUtil.splitByLine(poly, line, 'EPSG:4326');

          var exp = [new _Feature["default"]({
            geometry: new _Polygon["default"](_TestCoords.holeCoords2ExpPoly1)
          }), new _Feature["default"]({
            geometry: new _Polygon["default"](_TestCoords.holeCoords2ExpPoly2)
          }), new _Feature["default"]({
            geometry: new _Polygon["default"](_TestCoords.holeCoords2ExpPoly3)
          })];
          expect(got.length).toBe(3);
          got.forEach(function (polygon, i) {
            polygon.getGeometry().getCoordinates()[0].sort().forEach(function (coord) {
              coord.forEach(function () {
                expect(exp[i].getGeometry().getCoordinates()[0].sort()).toContainEqual(coord);
              });
            });
          });
        });
      });
      describe('with ol.geom.Geometry as params', function () {
        /**
         *          +
         *          |
         *   +-------------+
         *   |      |      |
         *   |      |      |
         *   |      |      |
         *   |      |      |
         *   |      |      |
         *   |      |      |
         *   +-------------+
         *          |
         *          +
         */
        it('splits the given convex polygon geometry with a straight line', function () {
          poly = new _Polygon["default"](_TestCoords.boxCoords);
          var line = new _LineString["default"](_TestCoords.lineStringCoords);

          var got = _index.GeometryUtil.splitByLine(poly, line, 'EPSG:4326');

          var exp = [new _Polygon["default"](_TestCoords.splitBoxCoords1), new _Polygon["default"](_TestCoords.splitBoxCoords2)];
          got.forEach(function (polygon, i) {
            expect(polygon.getCoordinates()).toEqual(exp[i].getCoordinates());
          });
        });
        /**
         *          +
         *          |
         *   +-------------+
         *   |      |      |
         *   |      |      |
         *   |      |      |
         *   |      +---------+
         *   |             |
         *   |             |
         *   +-------------+
         */

        it('splits the given convex polygon geometry with a more complex line', function () {
          poly = new _Polygon["default"](_TestCoords.boxCoords);
          var line = new _LineString["default"](_TestCoords.lineStringLFormedCoords);

          var got = _index.GeometryUtil.splitByLine(poly, line, 'EPSG:4326');

          var exp = [new _Polygon["default"](_TestCoords.splitBoxLFormedCoords1), new _Polygon["default"](_TestCoords.splitBoxLFormedCoords2)];
          got.forEach(function (polygon, i) {
            expect(polygon.getCoordinates()).toEqual(exp[i].getCoordinates());
          });
        });
        /**
         *       +----+         +----+
         *       |    |         |    |
         *       |    |         |    |
         * +--------------------------------+
         *       |    |         |    |
         *       |    +---------+    |
         *       |                   |
         *       |                   |
         *       |                   |
         *       |                   |
         *       +-------------------+
         *
         */

        it('splits the given concave polygon geometry with a straight line', function () {
          poly = new _Polygon["default"](_TestCoords.uFormedPolygonCoords);
          var line = new _LineString["default"](_TestCoords.lineStringCoords2);

          var got = _index.GeometryUtil.splitByLine(poly, line, 'EPSG:4326');

          var exp = [new _Polygon["default"](_TestCoords.splitUFormerdCoords1), new _Polygon["default"](_TestCoords.splitUFormerdCoords2), new _Polygon["default"](_TestCoords.splitUFormerdCoords3)];
          got.forEach(function (polygon, i) {
            expect(polygon.getCoordinates()).toEqual(exp[i].getCoordinates());
          });
        });
      });
    });
    describe('#addBuffer', function () {
      describe('with ol.Feature as params', function () {
        it('adds a buffer to an ol.geom.Point', function () {
          var testPoint = new _Feature["default"]({
            geometry: new _Point["default"](_TestCoords.pointCoords)
          });

          var bufferedPoint = _index.GeometryUtil.addBuffer(testPoint, 200, 'EPSG:4326');

          expect(bufferedPoint instanceof _Feature["default"]).toBe(true);
          expect(bufferedPoint.getGeometry().getCoordinates()).toEqual(_TestCoords.bufferedPointCoords);
        });
        it('adds a buffer to an ol.geom.Polygon', function () {
          var testPolygon = new _Feature["default"]({
            geometry: new _Polygon["default"](_TestCoords.boxCoords)
          });

          var bufferedPolygon = _index.GeometryUtil.addBuffer(testPolygon, 200, 'EPSG:4326');

          expect(bufferedPolygon instanceof _Feature["default"]).toBe(true);
          expect(bufferedPolygon.getGeometry().getCoordinates()).toEqual(_TestCoords.bufferedBoxCoords);
        });
        it('adds a buffer to an ol.geom.Linestring', function () {
          var testLineString = new _Feature["default"]({
            geometry: new _LineString["default"](_TestCoords.lineStringCoords)
          });

          var bufferedLineString = _index.GeometryUtil.addBuffer(testLineString, 200, 'EPSG:4326');

          expect(bufferedLineString instanceof _Feature["default"]).toBe(true);
          expect(bufferedLineString.getGeometry().getCoordinates()).toEqual(_TestCoords.bufferedLineStringCoords);
        });
        it('adds a buffer to an ol.geom.Polygon containing a hole', function () {
          var testPolygon = new _Feature["default"]({
            geometry: new _Polygon["default"](_TestCoords.holeCoords)
          });

          var bufferedPolygon = _index.GeometryUtil.addBuffer(testPolygon, 200, 'EPSG:4326');

          expect(bufferedPolygon instanceof _Feature["default"]).toBe(true);
          expect(bufferedPolygon.getGeometry().getCoordinates()).toEqual(_TestCoords.bufferedHoleCoords);
        });
      });
      describe('with ol.geom.Geomtry as params', function () {
        it('adds a buffer to an ol.geom.Point', function () {
          var testPoint = new _Point["default"](_TestCoords.pointCoords);

          var bufferedPoint = _index.GeometryUtil.addBuffer(testPoint, 200, 'EPSG:4326');

          expect(bufferedPoint instanceof _Polygon["default"]).toBe(true);
          expect(bufferedPoint.getCoordinates()).toEqual(_TestCoords.bufferedPointCoords);
        });
        it('adds a buffer to an ol.geom.Polygon', function () {
          var testPolygon = new _Polygon["default"](_TestCoords.boxCoords);

          var bufferedPolygon = _index.GeometryUtil.addBuffer(testPolygon, 200, 'EPSG:4326');

          expect(bufferedPolygon instanceof _Polygon["default"]).toBe(true);
          expect(bufferedPolygon.getCoordinates()).toEqual(_TestCoords.bufferedBoxCoords);
        });
        it('adds a buffer to an ol.geom.Linestring', function () {
          var testLineString = new _LineString["default"](_TestCoords.lineStringCoords);

          var bufferedLineString = _index.GeometryUtil.addBuffer(testLineString, 200, 'EPSG:4326');

          expect(bufferedLineString instanceof _Polygon["default"]).toBe(true);
          expect(bufferedLineString.getCoordinates()).toEqual(_TestCoords.bufferedLineStringCoords);
        });
      });
    });
    describe('#separateGeometries', function () {
      it('can split a single ol.geom.MultiPoint into an array of ol.geom.Points', function () {
        var testPoint1 = new _Point["default"](_TestCoords.pointCoords);
        var testPoint2 = new _Point["default"](_TestCoords.pointCoords2);

        var mergedPoint = _index.GeometryUtil.mergeGeometries([testPoint1, testPoint2]);

        var separatedPoints = _index.GeometryUtil.separateGeometries(mergedPoint);

        expect(Array.isArray(separatedPoints)).toBe(true);
        expect(separatedPoints[0].getCoordinates()).toEqual(_TestCoords.pointCoords);
        expect(separatedPoints[1].getCoordinates()).toEqual(_TestCoords.pointCoords2);
      });
      it('can split a single ol.geom.MultiPolygoin into an array of ol.geom.Polygon', function () {
        var testPolygon1 = new _Polygon["default"](_TestCoords.boxCoords);
        var testPolygon2 = new _Polygon["default"](_TestCoords.boxCoords3);

        var mergedPolygon = _index.GeometryUtil.mergeGeometries([testPolygon1, testPolygon2]);

        var separatedPolygons = _index.GeometryUtil.separateGeometries(mergedPolygon);

        expect(Array.isArray(separatedPolygons)).toBe(true);
        expect(separatedPolygons[0].getCoordinates()).toEqual(_TestCoords.boxCoords);
        expect(separatedPolygons[1].getCoordinates()).toEqual(_TestCoords.boxCoords3);
      });
      it('can split a single ol.geom.MultiLineString into an array of ol.geom.LineString', function () {
        var testLineString1 = new _LineString["default"](_TestCoords.lineStringCoords);
        var testLineString2 = new _LineString["default"](_TestCoords.lineStringCoords2);

        var mergedLineString = _index.GeometryUtil.mergeGeometries([testLineString1, testLineString2]);

        var separatedLineStrings = _index.GeometryUtil.separateGeometries(mergedLineString);

        expect(Array.isArray(separatedLineStrings)).toBe(true);
        expect(separatedLineStrings[0].getCoordinates()).toEqual(_TestCoords.lineStringCoords);
        expect(separatedLineStrings[1].getCoordinates()).toEqual(_TestCoords.lineStringCoords2);
      });
      it('can split multiple mixed MultiGeometries into an array of ol.geom.Geomtries', function () {
        var testPoint1 = new _Point["default"](_TestCoords.pointCoords);
        var testPoint2 = new _Point["default"](_TestCoords.pointCoords2);

        var mergedPoint = _index.GeometryUtil.mergeGeometries([testPoint1, testPoint2]);

        var testPolygon1 = new _Polygon["default"](_TestCoords.boxCoords);
        var testPolygon2 = new _Polygon["default"](_TestCoords.boxCoords3);

        var mergedPolygon = _index.GeometryUtil.mergeGeometries([testPolygon1, testPolygon2]);

        var testLineString1 = new _LineString["default"](_TestCoords.lineStringCoords);
        var testLineString2 = new _LineString["default"](_TestCoords.lineStringCoords2);

        var mergedLineString = _index.GeometryUtil.mergeGeometries([testLineString1, testLineString2]);

        var mixedMultiGeoemtries = [mergedPoint, mergedPolygon, mergedLineString];

        var separatedGeometries = _index.GeometryUtil.separateGeometries(mixedMultiGeoemtries);

        expect(Array.isArray(separatedGeometries)).toBe(true);
        expect(separatedGeometries[0].getCoordinates()).toEqual(_TestCoords.pointCoords);
        expect(separatedGeometries[1].getCoordinates()).toEqual(_TestCoords.pointCoords2);
        expect(separatedGeometries[2].getCoordinates()).toEqual(_TestCoords.boxCoords);
        expect(separatedGeometries[3].getCoordinates()).toEqual(_TestCoords.boxCoords3);
        expect(separatedGeometries[4].getCoordinates()).toEqual(_TestCoords.lineStringCoords);
        expect(separatedGeometries[5].getCoordinates()).toEqual(_TestCoords.lineStringCoords2);
      });
      it('can split multiple mixed MultiGeometries and SingelGeometries into an array of ol.geom.Geomtries', function () {
        var testPoint1 = new _Point["default"](_TestCoords.pointCoords);
        var testPoint2 = new _Point["default"](_TestCoords.pointCoords2);

        var mergedPoint = _index.GeometryUtil.mergeGeometries([testPoint1, testPoint2]);

        var testPolygon1 = new _Polygon["default"](_TestCoords.boxCoords);
        var testPolygon2 = new _Polygon["default"](_TestCoords.boxCoords3);
        var mixedMultiGeoemtries = [mergedPoint, testPolygon1, testPolygon2];

        var separatedGeometries = _index.GeometryUtil.separateGeometries(mixedMultiGeoemtries);

        expect(Array.isArray(separatedGeometries)).toBe(true);
        expect(separatedGeometries[0].getCoordinates()).toEqual(_TestCoords.pointCoords);
        expect(separatedGeometries[1].getCoordinates()).toEqual(_TestCoords.pointCoords2);
        expect(separatedGeometries[2].getCoordinates()).toEqual(_TestCoords.boxCoords);
      });
    });
    describe('#mergeGeometries', function () {
      it('merges multiple instances of ol.geom.Point into ol.geom.MultiPoint', function () {
        var testPoint1 = new _Point["default"](_TestCoords.pointCoords);
        var testPoint2 = new _Point["default"](_TestCoords.pointCoords2);

        var mergedPoint = _index.GeometryUtil.mergeGeometries([testPoint1, testPoint2]);

        expect(mergedPoint instanceof _MultiPoint["default"]).toBe(true);
        expect(mergedPoint.getCoordinates()).toEqual(_TestCoords.mergedPointCoordinates);
      });
      it('merges multiple instances of ol.geom.Polygon into ol.geom.MultiPolygon', function () {
        var testPolygon1 = new _Polygon["default"](_TestCoords.boxCoords);
        var testPolygon2 = new _Polygon["default"](_TestCoords.boxCoords3);

        var mergedPolygon = _index.GeometryUtil.mergeGeometries([testPolygon1, testPolygon2]);

        expect(mergedPolygon instanceof _MultiPolygon["default"]).toBe(true);
        expect(mergedPolygon.getCoordinates()).toEqual(_TestCoords.mergedBoxCoords);
      });
      it('merges multiple instances of ol.geom.LineString into ol.geom.MultiLineString', function () {
        var testLineString1 = new _LineString["default"](_TestCoords.lineStringCoords);
        var testLineString2 = new _LineString["default"](_TestCoords.lineStringCoords2);

        var mergedLineString = _index.GeometryUtil.mergeGeometries([testLineString1, testLineString2]);

        expect(mergedLineString instanceof _MultiLineString["default"]).toBe(true);
        expect(mergedLineString.getCoordinates()).toEqual(_TestCoords.mergedLineStringCoordinates);
      });
      it('merges multiple instances of ol.geom.MultiPoint into ol.geom.MultiPoint', function () {
        var testMultiPoint1 = new _MultiPoint["default"]([_TestCoords.pointCoords, _TestCoords.pointCoords2]);
        var testMultiPoint2 = new _MultiPoint["default"]([_TestCoords.pointCoords3, _TestCoords.pointCoords4]);

        var mergedMultiPoint = _index.GeometryUtil.mergeGeometries([testMultiPoint1, testMultiPoint2]);

        expect(mergedMultiPoint instanceof _MultiPoint["default"]).toBe(true);
        expect(mergedMultiPoint.getCoordinates()).toEqual(_TestCoords.mergedPointCoordinates2);
      });
      it('merges multiple instances of ol.geom.MultiPolygon into ol.geom.MultiPolygon', function () {
        var testMultiPolygon1 = new _MultiPolygon["default"]([_TestCoords.boxCoords, _TestCoords.boxCoords2]);
        var testMultiPolygon2 = new _MultiPolygon["default"]([_TestCoords.boxCoords3, _TestCoords.boxCoords4]);

        var mergedMultiPolygon = _index.GeometryUtil.mergeGeometries([testMultiPolygon1, testMultiPolygon2]);

        expect(mergedMultiPolygon instanceof _MultiPolygon["default"]).toBe(true);
        expect(mergedMultiPolygon.getCoordinates()).toEqual(_TestCoords.expectedMultiPolygon);
      });
      it('merges multiple instances of ol.geom.MultiLineString into ol.geom.MultiLineString', function () {
        var testMultiLineString1 = new _MultiLineString["default"]([_TestCoords.lineStringCoords]);
        var testMultiLineString2 = new _MultiLineString["default"]([_TestCoords.lineStringCoords2]);

        var mergedMultiLineString = _index.GeometryUtil.mergeGeometries([testMultiLineString1, testMultiLineString2]);

        expect(mergedMultiLineString instanceof _MultiLineString["default"]).toBe(true);
        expect(mergedMultiLineString.getCoordinates()).toEqual(_TestCoords.mergedLineStringCoordinates);
      });
    });
    describe('#union', function () {
      describe('with ol.Feature as params', function () {
        it('unions multiple instances of ol.geom.Polygon into one ol.geom.MultiPolygon', function () {
          var poly1 = new _Feature["default"]({
            geometry: new _Polygon["default"](_TestCoords.boxCoords)
          });
          var poly2 = new _Feature["default"]({
            geometry: new _Polygon["default"](_TestCoords.boxCoords2)
          });

          var unionedFeature = _index.GeometryUtil.union([poly1, poly2], 'EPSG:4326');

          expect(unionedFeature instanceof _Feature["default"]).toBe(true);
          expect(unionedFeature.getGeometry().getCoordinates()).toEqual(_TestCoords.unionedBoxCoordinates);
        });
        it('unions multiple instances of ol.geom.MultiPolygon into one ol.geom.MultiPolygon', function () {
          var multiPoly1 = new _Feature["default"]({
            geometry: new _MultiPolygon["default"]([_TestCoords.boxCoords])
          });
          var multiPoly2 = new _Feature["default"]({
            geometry: new _MultiPolygon["default"]([_TestCoords.boxCoords2])
          });

          var unionedFeature = _index.GeometryUtil.union([multiPoly1, multiPoly2], 'EPSG:4326');

          expect(unionedFeature instanceof _Feature["default"]).toBe(true);
          expect(unionedFeature.getGeometry().getCoordinates()).toEqual(_TestCoords.unionedBoxCoordinates);
        });
      });
      describe('with ol.geom.Geometry as params', function () {
        it('unions multiple instances of ol.geom.Polygon into one ol.geom.MultiPolygon', function () {
          var poly1 = new _Polygon["default"](_TestCoords.boxCoords);
          var poly2 = new _Polygon["default"](_TestCoords.boxCoords2);

          var unionedGeometry = _index.GeometryUtil.union([poly1, poly2], 'EPSG:4326');

          expect(unionedGeometry instanceof _Geometry["default"]).toBe(true);
          expect(unionedGeometry.getCoordinates()).toEqual(_TestCoords.unionedBoxCoordinates);
        });
      });
    });
    describe('#difference', function () {
      describe('with ol.Feature as params', function () {
        it('returns the difference of two instances of ol.geom.Polygon', function () {
          var poly1 = new _Feature["default"]({
            geometry: new _Polygon["default"](_TestCoords.boxCoords)
          });
          var poly2 = new _Feature["default"]({
            geometry: new _Polygon["default"](_TestCoords.boxCoords2)
          });

          var differenceFeature = _index.GeometryUtil.difference(poly1, poly2, 'EPSG:4326');

          expect(differenceFeature instanceof _Feature["default"]).toBe(true);
          expect(differenceFeature.getGeometry().getCoordinates()).toEqual(_TestCoords.differenceBoxCoords);
        });
        it('returns poly1 if no difference is found', function () {
          var poly1 = new _Feature["default"]({
            geometry: new _Polygon["default"](_TestCoords.boxCoords)
          });
          var poly2 = new _Feature["default"]({
            geometry: new _Polygon["default"](_TestCoords.boxCoords4)
          });

          var differenceFeature = _index.GeometryUtil.difference(poly1, poly2, 'EPSG:4326');

          expect(differenceFeature instanceof _Feature["default"]).toBe(true);
          expect(differenceFeature.getGeometry().getCoordinates()).toEqual(poly1.getGeometry().getCoordinates());
        });
      });
      describe('with ol.geom.Geometry as params', function () {
        it('returns the difference of two instances of ol.geom.Polygon', function () {
          var poly1 = new _Polygon["default"](_TestCoords.boxCoords);
          var poly2 = new _Polygon["default"](_TestCoords.boxCoords2);

          var differenceGeometry = _index.GeometryUtil.difference(poly1, poly2, 'EPSG:4326');

          expect(differenceGeometry instanceof _Geometry["default"]).toBe(true);
          expect(differenceGeometry.getCoordinates()).toEqual(_TestCoords.differenceBoxCoords);
        });
        it('returns poly1 if no difference is found', function () {
          var poly1 = new _Polygon["default"](_TestCoords.boxCoords);
          var poly2 = new _Polygon["default"](_TestCoords.boxCoords4);

          var differenceGeometry = _index.GeometryUtil.difference(poly1, poly2, 'EPSG:4326');

          expect(differenceGeometry instanceof _Geometry["default"]).toBe(true);
          expect(differenceGeometry.getCoordinates()).toEqual(poly1.getCoordinates());
        });
      });
    });
    describe('#intersection', function () {
      describe('with ol.Feature as params', function () {
        it('returns the intersection of two instances of ol.geom.Polygon', function () {
          var poly1 = new _Feature["default"]({
            geometry: new _Polygon["default"](_TestCoords.boxCoords)
          });
          var poly2 = new _Feature["default"]({
            geometry: new _Polygon["default"](_TestCoords.boxCoords3)
          });

          var intersectionFeature = _index.GeometryUtil.intersection(poly1, poly2, 'EPSG:4326');

          expect(intersectionFeature instanceof _Feature["default"]).toBe(true);
          expect(intersectionFeature.getGeometry().getCoordinates()).toEqual(_TestCoords.intersectionCoords);
        });
        it('returns null if no intersection is found', function () {
          var poly1 = new _Feature["default"]({
            geometry: new _Polygon["default"](_TestCoords.boxCoords)
          });
          var poly2 = new _Feature["default"]({
            geometry: new _Polygon["default"](_TestCoords.boxCoords4)
          });

          var intersectionFeature = _index.GeometryUtil.intersection(poly1, poly2, 'EPSG:4326');

          expect(intersectionFeature).toBe(null);
        });
      });
      describe('with ol.geom.Geometry as params', function () {
        it('returns the intersection of two instances of ol.geom.Polygon', function () {
          var poly1 = new _Polygon["default"](_TestCoords.boxCoords);
          var poly2 = new _Polygon["default"](_TestCoords.boxCoords3);

          var intersectionGeometry = _index.GeometryUtil.intersection(poly1, poly2, 'EPSG:4326');

          expect(intersectionGeometry instanceof _Geometry["default"]).toBe(true);
          expect(intersectionGeometry.getCoordinates()).toEqual(_TestCoords.intersectionCoords);
        });
        it('returns null if no intersection is found', function () {
          var poly1 = new _Polygon["default"](_TestCoords.boxCoords);
          var poly2 = new _Polygon["default"](_TestCoords.boxCoords4);

          var intersectionGeometry = _index.GeometryUtil.intersection(poly1, poly2, 'EPSG:4326');

          expect(intersectionGeometry).toBe(null);
        });
      });
    });
  });
});