"use strict";

var _LineString = _interopRequireDefault(require("ol/geom/LineString"));

var _Polygon = _interopRequireDefault(require("ol/geom/Polygon"));

var _index = require("../index");

var _TestUtil = _interopRequireDefault(require("../TestUtil"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

/*eslint-env jest*/
describe('MeasureUtil', function () {
  var map;
  describe('Basics', function () {
    it('is defined', function () {
      expect(_index.MeasureUtil).toBeDefined();
    });
  });
  describe('Static methods', function () {
    describe('#getLength', function () {
      it('is defined', function () {
        expect(_index.MeasureUtil.getLength).toBeDefined();
      });
      it('get the length of a line as expected', function () {
        var start = [0, 0];
        var end = [0, 100];
        var end2 = [0, 100550];
        var shortLine = new _LineString["default"]([start, end]);
        var longLine = new _LineString["default"]([start, end2]);
        map = _TestUtil["default"].createMap();

        var expectedShortLength = _index.MeasureUtil.getLength(shortLine, map);

        var expectedLongLength = _index.MeasureUtil.getLength(longLine, map);

        expect(expectedShortLength).toBeCloseTo(99.88824008937313, 4);
        expect(expectedLongLength).toBeCloseTo(100433.46540039503, 4);

        _TestUtil["default"].removeMap(map);
      });
    });
    describe('#formatLength', function () {
      it('is defined', function () {
        expect(_index.MeasureUtil.formatLength).toBeDefined();
      });
      it('formats the length of a line as expected', function () {
        var start = [0, 0];
        var end = [0, 100];
        var end2 = [0, 100550];
        var shortLine = new _LineString["default"]([start, end]);
        var longLine = new _LineString["default"]([start, end2]);
        map = _TestUtil["default"].createMap();

        var expectedShortLength = _index.MeasureUtil.formatLength(shortLine, map, 2);

        var expectedLongLength = _index.MeasureUtil.formatLength(longLine, map, 2);

        expect(expectedShortLength).toBe('99.89 m');
        expect(expectedLongLength).toBe('100.43 km');

        _TestUtil["default"].removeMap(map);
      });
    });
    describe('#getArea', function () {
      it('is defined', function () {
        expect(_index.MeasureUtil.getArea).toBeDefined();
      });
      it('get the area of a polygon as expected', function () {
        var smallPolyCoords = [[0, 0], [0, 10], [10, 10], [10, 0], [0, 0]];
        var bigPolyCoords = smallPolyCoords.map(function (coord) {
          return [coord[0] * 100, coord[1] * 100];
        });
        var smallPoly = new _Polygon["default"]([smallPolyCoords]);
        var bigPoly = new _Polygon["default"]([bigPolyCoords]);
        map = _TestUtil["default"].createMap();

        var expectedSmallArea = _index.MeasureUtil.getArea(smallPoly, map);

        var expectedBigArea = _index.MeasureUtil.getArea(bigPoly, map);

        expect(expectedSmallArea).toBe(99.7766050826797);
        expect(expectedBigArea).toBe(997766.042705488);

        _TestUtil["default"].removeMap(map);
      });
    });
    describe('#formatArea', function () {
      it('is defined', function () {
        expect(_index.MeasureUtil.formatArea).toBeDefined();
      });
      it('formats the area of a polygon as expected', function () {
        var smallPolyCoords = [[0, 0], [0, 10], [10, 10], [10, 0], [0, 0]];
        var bigPolyCoords = smallPolyCoords.map(function (coord) {
          return [coord[0] * 100, coord[1] * 100];
        });
        var smallPoly = new _Polygon["default"]([smallPolyCoords]);
        var bigPoly = new _Polygon["default"]([bigPolyCoords]);
        map = _TestUtil["default"].createMap();

        var expectedSmallArea = _index.MeasureUtil.formatArea(smallPoly, map, 2);

        var expectedBigArea = _index.MeasureUtil.formatArea(bigPoly, map, 2);

        expect(expectedSmallArea).toBe('99.78 m<sup>2</sup>');
        expect(expectedBigArea).toBe('1 km<sup>2</sup>');

        _TestUtil["default"].removeMap(map);
      });
    });
    describe('#angle', function () {
      it('is defined', function () {
        expect(_index.MeasureUtil.formatArea).toBeDefined();
      });
      it('calculates the angle in deegrees', function () {
        var start = [0, 0];
        var ends = [[1, 0], // east, 3 o'clock
        [1, -1], // south-east, between 4 and 5 o'clock
        [0, -1], // south, 6 o'clock
        [-1, -1], // south-west, between 7 and 8 o'clock
        [-1, 0], // west, 9 o'clock
        [-1, 1], // north-west, between 10 and 11 o'clock
        [0, 1], // north, 12 o'clock
        [1, 1] // north-east, between 1 and 2 o'clock
        ];
        var expectedAngles = [180, 135, 90, 45, 0, -45, -90, -135];
        expect(ends.length).toBe(expectedAngles.length);
        ends.forEach(function (end, index) {
          var got = _index.MeasureUtil.angle(start, end);

          expect(got).toBe(expectedAngles[index]);
        });
      });
    });
    describe('#angle360', function () {
      it('is defined', function () {
        expect(_index.MeasureUtil.formatArea).toBeDefined();
      });
      it('calculates the angle in deegrees ranged from 0° and 360°', function () {
        var start = [0, 0];
        var ends = [[1, 0], // east, 3 o'clock
        [1, -1], // south-east, between 4 and 5 o'clock
        [0, -1], // south, 6 o'clock
        [-1, -1], // south-west, between 7 and 8 o'clock
        [-1, 0], // west, 9 o'clock
        [-1, 1], // north-west, between 10 and 11 o'clock
        [0, 1], // north, 12 o'clock
        [1, 1] // north-east, between 1 and 2 o'clock
        ];
        var expectedAngles = [180, 135, 90, 45, 0, 315, 270, 225];
        expect(ends.length).toBe(expectedAngles.length);
        ends.forEach(function (end, index) {
          var got = _index.MeasureUtil.angle360(start, end);

          expect(got).toBe(expectedAngles[index]);
        });
      });
    });
    describe('#makeClockwise', function () {
      it('is defined', function () {
        expect(_index.MeasureUtil.formatArea).toBeDefined();
      });
      it('returns a clockwised version of an angle', function () {
        expect(_index.MeasureUtil.makeClockwise(0)).toBe(360);
        expect(_index.MeasureUtil.makeClockwise(45)).toBe(315);
        expect(_index.MeasureUtil.makeClockwise(90)).toBe(270);
        expect(_index.MeasureUtil.makeClockwise(135)).toBe(225);
        expect(_index.MeasureUtil.makeClockwise(180)).toBe(180);
        expect(_index.MeasureUtil.makeClockwise(225)).toBe(135);
        expect(_index.MeasureUtil.makeClockwise(270)).toBe(90);
        expect(_index.MeasureUtil.makeClockwise(315)).toBe(45);
        expect(_index.MeasureUtil.makeClockwise(360)).toBe(0);
      });
    });
    describe('#makeZeroDegreesAtNorth', function () {
      it('is defined', function () {
        expect(_index.MeasureUtil.formatArea).toBeDefined();
      });
      it('shifts a calculates the angle so 0° is in the north', function () {
        var start = [0, 0];
        var ends = [[1, 0], // east, 3 o'clock
        [1, -1], // south-east, between 4 and 5 o'clock
        [0, -1], // south, 6 o'clock
        [-1, -1], // south-west, between 7 and 8 o'clock
        [-1, 0], // west, 9 o'clock
        [-1, 1], // north-west, between 10 and 11 o'clock
        [0, 1], // north, 12 o'clock
        [1, 1] // north-east, between 1 and 2 o'clock
        ];
        var expectedAngles = [270, 225, 180, 135, 90, 45, 360, // also 0
        315];
        expect(ends.length).toBe(expectedAngles.length);
        ends.forEach(function (end, index) {
          var angle = _index.MeasureUtil.angle360(start, end);

          var got = _index.MeasureUtil.makeZeroDegreesAtNorth(angle);

          expect(got).toBe(expectedAngles[index]);
        });
      });
    });
    describe('#formatAngle', function () {
      it('is defined', function () {
        expect(_index.MeasureUtil.formatAngle).toBeDefined();
      });
      it('formats the angle of a multiline as expected', function () {
        var start = [0, 0];
        var ends = [[1, 0], // east, 3 o'clock
        [1, -1], // south-east, between 4 and 5 o'clock
        [0, -1], // south, 6 o'clock
        [-1, -1], // south-west, between 7 and 8 o'clock
        [-1, 0], // west, 9 o'clock
        [-1, 1], // north-west, between 10 and 11 o'clock
        [0, 1], // north, 12 o'clock
        [1, 1] // north-east, between 1 and 2 o'clock
        ];
        var lines = ends.map(function (end) {
          return new _LineString["default"]([start, end]);
        });
        var expectedAngles = ['90.00°', '135.00°', '180.00°', '225.00°', '270.00°', '315.00°', '0.00°', // also 0°
        '45.00°'];
        expect(ends.length).toBe(expectedAngles.length);
        expect(lines.length).toBe(expectedAngles.length);
        lines.forEach(function (line, index) {
          var angle = _index.MeasureUtil.formatAngle(line);

          expect(angle).toBe(expectedAngles[index]);
        });
      });
    });
  });
});