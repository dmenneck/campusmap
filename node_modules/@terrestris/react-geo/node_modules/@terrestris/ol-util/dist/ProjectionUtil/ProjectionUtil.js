"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = exports.ProjectionUtil = exports.defaultProj4CrsMappings = exports.defaultProj4CrsDefinitions = void 0;

var _proj = _interopRequireDefault(require("proj4"));

var _proj2 = require("ol/proj/proj4");

var _isEmpty = _interopRequireDefault(require("lodash/isEmpty"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function _iterableToArrayLimit(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

/**
 * Default proj4 CRS definitions.
 */
var defaultProj4CrsDefinitions = {
  'EPSG:25832': '+proj=utm +zone=32 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs',
  'EPSG:31466': '+proj=tmerc +lat_0=0 +lon_0=6 +k=1 +x_0=2500000 +y_0=0 +ellps=bessel +towgs84=598.1,73.7,418.2,0.202,0.045,-2.455,6.7 +units=m +no_defs',
  'EPSG:31467': '+proj=tmerc +lat_0=0 +lon_0=9 +k=1 +x_0=3500000 +y_0=0 +ellps=bessel +towgs84=598.1,73.7,418.2,0.202,0.045,-2.455,6.7 +units=m +no_defs'
};
/**
 * Default mappings for CRS identifiers (e.g. "urn:ogc:def:crs:EPSG::25832").
 */

exports.defaultProj4CrsDefinitions = defaultProj4CrsDefinitions;
var defaultProj4CrsMappings = {
  'urn:ogc:def:crs:EPSG::3857': 'EPSG:3857',
  'urn:ogc:def:crs:EPSG::25832': 'EPSG:25832',
  'urn:ogc:def:crs:EPSG::31466': 'EPSG:31466',
  'urn:ogc:def:crs:EPSG::31467': 'EPSG:31467'
};
/**
 * Helper class for projection handling. Makes use of
 * [Proj4js](http://proj4js.org/).
 *
 * @class ProjectionUtil
 */

exports.defaultProj4CrsMappings = defaultProj4CrsMappings;

var ProjectionUtil =
/*#__PURE__*/
function () {
  function ProjectionUtil() {
    _classCallCheck(this, ProjectionUtil);
  }

  _createClass(ProjectionUtil, null, [{
    key: "initProj4Definitions",

    /**
     * Registers custom CRS definitions to the application.
     *
     * @param {Object} customCrsDefs The custom `proj4` definition strings
     *   which should be registered additionally to default avaliable CRS (s.
     *   `defaultProj4CrsDefinitions` above) as well.
     *   Further CRS definitions in proj4 format can be checked under
     *   http://epsg.io (e.g. http://epsg.io/3426.proj4).
     * @param {boolean} registerDefaults Whether the default CRS should be
     *   registered or not. Default is true.
     */
    value: function initProj4Definitions(customCrsDefs) {
      var registerDefaults = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
      var proj4CrsDefinitions = {};

      if (registerDefaults) {
        proj4CrsDefinitions = defaultProj4CrsDefinitions;
      }

      if (!(0, _isEmpty["default"])(customCrsDefs)) {
        Object.keys(customCrsDefs).forEach(function (crsKey) {
          if (!(crsKey in proj4CrsDefinitions)) {
            proj4CrsDefinitions[crsKey] = customCrsDefs[crsKey];
          }
        });
      }

      if (!(0, _isEmpty["default"])(proj4CrsDefinitions)) {
        for (var _i = 0, _Object$entries = Object.entries(proj4CrsDefinitions); _i < _Object$entries.length; _i++) {
          var _Object$entries$_i = _slicedToArray(_Object$entries[_i], 2),
              projCode = _Object$entries$_i[0],
              projDefinition = _Object$entries$_i[1];

          _proj["default"].defs(projCode, projDefinition);
        }

        (0, _proj2.register)(_proj["default"]);
      }
    }
    /**
     * Registers custom CRS mappings to allow automatic CRS detection. Sometimes
     * FeatureCollections returned by the GeoServer may be associated with
     * CRS identifiers (e.g. "urn:ogc:def:crs:EPSG::25832") that aren't
     * supported by `proj4` and `OpenLayers` per default. Add appropriate
     * mappings to allow automatic CRS detection by `OpenLayers` here.
     *
     * @param {Object} customCrsMappings The custom CRS mappings which will be
     *   added additionally to the by default avaliable (s. `defaultProj4CrsMappings`
     *   above).
     * @param {boolean} useDefaultMappings Whether the default CRS should be mapped
     *   as well or not. Default is true.
     */

  }, {
    key: "initProj4DefinitionMappings",
    value: function initProj4DefinitionMappings(customCrsMappings) {
      var useDefaultMappings = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
      var proj4CrsMappings = {};

      if (useDefaultMappings) {
        proj4CrsMappings = defaultProj4CrsMappings;
      }

      if (!(0, _isEmpty["default"])(customCrsMappings)) {
        Object.keys(customCrsMappings).forEach(function (crsKey) {
          if (!(crsKey in proj4CrsMappings)) {
            proj4CrsMappings[crsKey] = customCrsMappings[crsKey];
          }
        });
      }

      if (!(0, _isEmpty["default"])(proj4CrsMappings)) {
        for (var _i2 = 0, _Object$entries2 = Object.entries(proj4CrsMappings); _i2 < _Object$entries2.length; _i2++) {
          var _Object$entries2$_i = _slicedToArray(_Object$entries2[_i2], 2),
              aliasProjCode = _Object$entries2$_i[0],
              projCode = _Object$entries2$_i[1];

          _proj["default"].defs(aliasProjCode, _proj["default"].defs(projCode));
        }
      }
    }
    /**
     * Converts geographic coordinates given in DDD format like `DD.DDDD째` to
     * the degree, minutes, decimal seconds (DMS) format like
     * `DDD째 MM' SS.SSS"`.
     *
     * @param {number} value Value to be converted.
     *
     * @return {string} Converted value.
     */

  }, {
    key: "toDms",
    value: function toDms(value) {
      var deg = parseInt(value, 10);
      var min = parseInt((value - deg) * 60, 10);
      var sec = (value - deg - min / 60) * 3600;
      return "".concat(deg, "\xB0 ").concat(ProjectionUtil.zerofill(min), "' ").concat(ProjectionUtil.zerofill(sec.toFixed(2)), "''");
    }
    /**
     * Converts geographic coordinates given in DDD format like `DD.DDDD째` to
     * the degree, decimal minutes (DMM) format like `DDD째 MM.MMMM`.
     *
     * @param {number} value Value to be converted.
     *
     * @return {string} Converted value.
     */

  }, {
    key: "toDmm",
    value: function toDmm(value) {
      var deg = parseInt(value, 10);
      var min = (value - deg) * 60;
      return "".concat(deg, "\xB0 ").concat(ProjectionUtil.zerofill(min.toFixed(4)), "'");
    }
    /**
     * Adds leading zero to all values less than 10 and returns this new
     * zerofilled value as String. Values which are greater than 10 are not
     * affected.
     *
     * @param {number} value Value to be zerofilled.
     *
     * @return {string} converted value with leading zero if necessary.
     */

  }, {
    key: "zerofill",
    value: function zerofill(value) {
      return value < 10 ? "0".concat(value) : value;
    }
  }]);

  return ProjectionUtil;
}();

exports.ProjectionUtil = ProjectionUtil;
var _default = ProjectionUtil;
exports["default"] = _default;