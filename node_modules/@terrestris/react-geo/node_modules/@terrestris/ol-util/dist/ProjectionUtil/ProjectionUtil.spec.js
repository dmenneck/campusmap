"use strict";

var _proj = _interopRequireDefault(require("proj4"));

var OlProj4 = _interopRequireWildcard(require("ol/proj/proj4"));

var _ProjectionUtil = require("./ProjectionUtil.js");

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj["default"] = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

/*eslint-env jest*/
describe('ProjectionUtil', function () {
  var custom = {
    'EPSG:31468': '+proj=tmerc +lat_0=0 +lon_0=12 ' + '+k=1 +x_0=4500000 +y_0=0 +ellps=bessel ' + '+towgs84=598.1,73.7,418.2,0.202,0.045,-2.455,6.7 +units=m ' + '+no_defs'
  };
  var alreadyThere = {
    'EPSG:31467': '+proj=tmerc +lat_0=0 +lon_0=9 ' + '+k=1 +x_0=3500000 +y_0=0 +ellps=bessel ' + '+towgs84=598.1,73.7,418.2,0.202,0.045,-2.455,6.7 +units=m ' + '+no_defs'
  };
  describe('Basic test', function () {
    it('is defined', function () {
      expect(_ProjectionUtil.ProjectionUtil).not.toBeUndefined();
    });
  });
  describe('Static methods', function () {
    describe('#initProj4Definitions', function () {
      it('is defined', function () {
        expect(_ProjectionUtil.ProjectionUtil.initProj4Definitions).not.toBeUndefined();
      });
      it('it registers the given CRS definitions in proj4 and ol', function () {
        OlProj4.register = jest.fn();
        var proj4Spy = jest.spyOn(_proj["default"], 'defs');
        var length = Object.keys(_ProjectionUtil.defaultProj4CrsDefinitions).length;

        _ProjectionUtil.ProjectionUtil.initProj4Definitions();

        expect(proj4Spy).toHaveBeenCalledTimes(length);
        expect(OlProj4.register).toHaveBeenCalled();
        proj4Spy.mockRestore();
      });
      it('additionally registers a custom projection', function () {
        OlProj4.register = jest.fn();
        var proj4Spy = jest.spyOn(_proj["default"], 'defs');
        var length = Object.keys(_ProjectionUtil.defaultProj4CrsDefinitions).length; // eslint-disable-next-line require-jsdoc

        var hasCustomProj = function hasCustomProj() {
          (0, _proj["default"])('EPSG:31468');
        };

        expect(hasCustomProj).toThrow();

        _ProjectionUtil.ProjectionUtil.initProj4Definitions(custom);

        expect(proj4Spy).toHaveBeenCalledTimes(length + 1);
        expect(OlProj4.register).toHaveBeenCalled();
        expect(hasCustomProj).not.toThrow();
        proj4Spy.mockRestore();
      });
      it('does not register a custom projection which is already registered', function () {
        OlProj4.register = jest.fn();
        var proj4Spy = jest.spyOn(_proj["default"], 'defs');
        var length = Object.keys(_ProjectionUtil.defaultProj4CrsDefinitions).length;

        _ProjectionUtil.ProjectionUtil.initProj4Definitions(alreadyThere);

        expect(proj4Spy).toHaveBeenCalledTimes(length);
        expect(OlProj4.register).toHaveBeenCalled();
        proj4Spy.mockRestore();
      });
      it('only registers a custom projection, if told so', function () {
        OlProj4.register = jest.fn();
        var proj4Spy = jest.spyOn(_proj["default"], 'defs');

        _ProjectionUtil.ProjectionUtil.initProj4Definitions(custom, false);

        expect(proj4Spy).toHaveBeenCalledTimes(1);
        expect(OlProj4.register).toHaveBeenCalled();
        proj4Spy.mockRestore();
      });
      it('does not fail when neither custom projections nor defaults', function () {
        OlProj4.register = jest.fn();
        var proj4Spy = jest.spyOn(_proj["default"], 'defs');

        _ProjectionUtil.ProjectionUtil.initProj4Definitions({}, false);

        expect(proj4Spy).toHaveBeenCalledTimes(0);
        expect(OlProj4.register).not.toHaveBeenCalled();
        proj4Spy.mockRestore();
      });
    });
    describe('#initProj4DefinitionMappings', function () {
      it('is defined', function () {
        expect(_ProjectionUtil.ProjectionUtil.initProj4DefinitionMappings).not.toBeUndefined();
      });
      it('registers the given CRS mappings in proj4', function () {
        var proj4Spy = jest.spyOn(_proj["default"], 'defs');
        var length = Object.keys(_ProjectionUtil.defaultProj4CrsMappings).length;

        _ProjectionUtil.ProjectionUtil.initProj4DefinitionMappings(_ProjectionUtil.defaultProj4CrsMappings);

        expect(proj4Spy).toHaveBeenCalledTimes(length * 2);
        proj4Spy.mockRestore();
      });
      it('additionally registers given CRS mappings in proj4', function () {
        var proj4Spy = jest.spyOn(_proj["default"], 'defs');
        var length = Object.keys(_ProjectionUtil.defaultProj4CrsMappings).length; // first register custom:

        _ProjectionUtil.ProjectionUtil.initProj4DefinitionMappings({
          'foo': 'EPSG:31467'
        });

        expect(proj4Spy).toHaveBeenCalledTimes((length + 1) * 2);
        proj4Spy.mockRestore();
      });
      it('registers only given CRS mappings in proj4, if told so', function () {
        var proj4Spy = jest.spyOn(_proj["default"], 'defs');

        _ProjectionUtil.ProjectionUtil.initProj4DefinitionMappings({
          'foo': 'EPSG:31467'
        }, false);

        expect(proj4Spy).toHaveBeenCalledTimes(2);
        proj4Spy.mockRestore();
      });
      it('does not fail when neither custom mappings nor defaults', function () {
        var proj4Spy = jest.spyOn(_proj["default"], 'defs');

        _ProjectionUtil.ProjectionUtil.initProj4DefinitionMappings({}, false);

        expect(proj4Spy).toHaveBeenCalledTimes(0);
        proj4Spy.mockRestore();
      });
    });
    describe('#toDms', function () {
      it('is defined', function () {
        expect(_ProjectionUtil.ProjectionUtil.toDms).not.toBeUndefined();
      });
      it('converts geographic coordinates to degree, minutes, decimal seconds (DMS) format', function () {
        var degreeVal = 19.0909090909;
        var convertedVal = '19° 05\' 27.27\'\'';
        expect(_ProjectionUtil.ProjectionUtil.toDms(degreeVal)).toBe(convertedVal);
      });
    });
    describe('#toDmm', function () {
      it('is defined', function () {
        expect(_ProjectionUtil.ProjectionUtil.toDmm).not.toBeUndefined();
      });
      it('converts geographic coordinates to degree, decimal minutes (DMM) format', function () {
        var degreeVal = 19.0909090909;
        var convertedVal = '19° 05.4545\'';
        expect(_ProjectionUtil.ProjectionUtil.toDmm(degreeVal)).toBe(convertedVal);
      });
    });
    describe('#zerofill', function () {
      it('is defined', function () {
        expect(_ProjectionUtil.ProjectionUtil.zerofill).not.toBeUndefined();
      });
      it('adds leading zero to values less than 10', function () {
        var smallValue = 9.123;
        var bigValue = 15.456;
        var expectedSmallValue = '09.123';
        expect(_ProjectionUtil.ProjectionUtil.zerofill(smallValue)).toBe(expectedSmallValue);
        expect(_ProjectionUtil.ProjectionUtil.zerofill(bigValue)).toBe(bigValue);
      });
    });
  });
});