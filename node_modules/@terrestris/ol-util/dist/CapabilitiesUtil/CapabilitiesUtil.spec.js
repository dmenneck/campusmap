"use strict";

var _Image = _interopRequireDefault(require("ol/layer/Image"));

var _ImageWMS = _interopRequireDefault(require("ol/source/ImageWMS"));

var _index = require("../index");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

/*eslint-env jest*/
var layerTitle = 'OpenStreetMap WMS - by terrestris';
var layerName = 'OSM-WMS';
var _abstract = 'OpenStreetMap WMS, bereitgestellt durch terrestris GmbH und Co. KG. Beschleunigt mit MapProxy (http://mapproxy.org/)';
var gfiOnlineResource = 'http://ows.terrestris.de/osm/service?';
var getMapUrl = gfiOnlineResource;
var gfiFormats = ['text/plain', 'text/html', 'application/vnd.ogc.gml'];
var glgOnlineResource = 'http://ows.terrestris.de/osm/service?styles=&layer=OSM-WMS&service=WMS&format=image%2Fpng&sld_version=1.1.0&request=GetLegendGraphic&version=1.1.1';
var queryable = true;
var attributions = '(c) OpenStreetMap contributors (http://www.openstreetmap.org/copyright) (c) OpenStreetMap Data (http://openstreetmapdata.com)';
var capVersion = '1.3.0';
var capabilitiesObj = {
  version: capVersion,
  Service: {
    Name: 'OGC:WMS',
    Title: 'OpenStreetMap WMS',
    AccessConstraints: attributions
  },
  Capability: {
    Request: {
      GetCapabilities: {
        Format: ['application/vnd.ogc.wms_xml'],
        DCPType: [{
          HTTP: {
            Get: {
              OnlineResource: 'http://ows.terrestris.de/osm/service?'
            }
          }
        }]
      },
      GetMap: {
        Format: ['image/jpeg', 'image/png'],
        DCPType: [{
          HTTP: {
            Get: {
              OnlineResource: getMapUrl
            }
          }
        }]
      },
      GetFeatureInfo: {
        Format: gfiFormats,
        DCPType: [{
          HTTP: {
            Get: {
              OnlineResource: gfiOnlineResource
            }
          }
        }]
      }
    },
    Exception: ['application/vnd.ogc.se_xml', 'application/vnd.ogc.se_inimage', 'application/vnd.ogc.se_blank'],
    Layer: {
      Layer: [{
        Name: layerName,
        Title: layerTitle,
        Abstract: _abstract,
        BoundingBox: [{
          crs: null,
          extent: [-20037508.3428, -25819498.5135, 20037508.3428, 25819498.5135],
          res: [null, null]
        }, {
          crs: null,
          extent: [-180, -88, 180, 88],
          res: [null, null]
        }, {
          crs: null,
          extent: [-20037508.3428, -25819498.5135, 20037508.3428, 25819498.5135],
          res: [null, null]
        }],
        Style: [{
          Name: 'default',
          Title: 'default',
          LegendURL: [{
            Format: 'image/png',
            OnlineResource: glgOnlineResource,
            size: [155, 344]
          }]
        }],
        queryable: queryable,
        opaque: false,
        noSubsets: false
      }]
    }
  }
};
describe('CapabilitiesUtil', function () {
  it('is defined', function () {
    expect(_index.CapabilitiesUtil).not.toBeUndefined();
  });
  describe('Static methods', function () {
    describe('parseWmsCapabilities', function () {
      it('isDefined', function () {
        expect(_index.CapabilitiesUtil.parseWmsCapabilities).not.toBeUndefined();
      });
      it('creates a promise:', function () {
        var url = 'https://TO.BE/DEFINED';

        var resObj = _index.CapabilitiesUtil.parseWmsCapabilities(url);

        expect(resObj).toBeInstanceOf(Promise);
      });
    });
    describe('getLayersFromWmsCapabilities', function () {
      it('isDefined', function () {
        expect(_index.CapabilitiesUtil.getLayersFromWmsCapabilities).not.toBeUndefined();
      });
      it('creates layer objects from parsed WMS capabilities', function () {
        var parsedLayers = _index.CapabilitiesUtil.getLayersFromWmsCapabilities(capabilitiesObj);

        expect(parsedLayers).toHaveLength(1);
        var layer = parsedLayers[0];
        expect(layer).toBeInstanceOf(_Image["default"]);
        expect(layer.getSource()).toBeInstanceOf(_ImageWMS["default"]);
      });
      it('sets layer attributes accordingly', function () {
        var parsedLayers = _index.CapabilitiesUtil.getLayersFromWmsCapabilities(capabilitiesObj);

        var layer = parsedLayers[0];
        var layerSource = layer.getSource();
        expect(layer.get('title')).toBe(layerTitle);
        expect(layer.get('name')).toBe(layerName);
        expect(layer.get('abstract')).toBe(_abstract);
        expect(layer.get('getFeatureInfoUrl')).toBe(gfiOnlineResource);
        expect(layer.get('getFeatureInfoFormats')).toEqual(gfiFormats);
        expect(layer.get('legendUrl')).toEqual(glgOnlineResource);
        expect(layer.get('queryable')).toBe(queryable);
        expect(layerSource.getUrl()).toBe(getMapUrl);
        expect(layerSource.getAttributions().call()).toEqual([attributions]);
        expect(layerSource.getParams()['LAYERS']).toBe(layerName);
        expect(layerSource.getParams()['VERSION']).toBe(capVersion);
      });
      it('applies proxy function if provided', function () {
        var proxyFn = jest.fn();

        _index.CapabilitiesUtil.getLayersFromWmsCapabilities(capabilitiesObj, 'name', proxyFn);

        expect.assertions(1);
        expect(proxyFn).toBeCalledTimes(3);
      });
    });
  });
});