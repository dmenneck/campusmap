"use strict";

var _federalStatesGer = _interopRequireDefault(require("../../assets/federal-states-ger.json"));

var _TestUtil = _interopRequireDefault(require("../TestUtil"));

var _index = require("../index");

var _shpWrite = _interopRequireDefault(require("shp-write"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

/*eslint-env jest*/
var geoJson2 = {
  type: 'FeatureCollection',
  features: [{
    type: 'Feature',
    geometry: {
      type: 'Point',
      coordinates: [47, -11]
    },
    properties: {
      song: 'If you have ghosts'
    }
  }]
};
describe('FileUtil', function () {
  var geoJsonFile = new File([JSON.stringify(_federalStatesGer["default"])], 'geo.json', {
    type: 'application/json',
    lastModified: new Date()
  });

  var shpBuffer = _shpWrite["default"].zip(geoJson2);

  var shpFile = new File([new Blob([shpBuffer])], 'geo.zip', {
    type: 'application/zip',
    lastModified: new Date()
  });
  var map;
  it('is defined', function () {
    expect(_index.FileUtil).not.toBeUndefined();
  });
  describe('Static methods', function () {
    beforeEach(function () {
      map = _TestUtil["default"].createMap();
    }); // TODO investigate why removing of map leads to test failing
    // afterEach(() => {
    //   TestUtil.removeMap(map);
    // });

    describe('#addGeojsonLayer', function () {
      it('adds a layer from a geojson string', function () {
        expect.assertions(2);
        return new Promise(function (resolve) {
          var layers = map.getLayers();
          layers.on('add', function (event) {
            var layer = event.element;
            expect(layers.getLength()).toBe(2);
            expect(layer.getSource().getFeatures().length).toBe(16);
            resolve();
          });

          _index.FileUtil.addGeojsonLayer(_federalStatesGer["default"], map);
        });
      });
    });
    describe('#addGeojsonLayerFromFile', function () {
      it('reads the geojson file and adds a layer to the map', function () {
        expect.assertions(2);
        return new Promise(function (resolve) {
          var layers = map.getLayers();
          layers.on('add', function (event) {
            var layer = event.element;
            expect(layers.getLength()).toBe(2);
            expect(layer.getSource().getFeatures().length).toBe(16);
            resolve();
          });

          _index.FileUtil.addGeojsonLayerFromFile(geoJsonFile, map);
        });
      });
    });
    describe('#addShpLayerFromFile', function () {
      it('reads the shp file and adds a layer to the map', function () {
        expect.assertions(6);
        return new Promise(function (resolve) {
          var layers = map.getLayers();
          layers.on('add', function (event) {
            var layer = event.element;
            expect(layers.getLength()).toBe(2);
            var features = layer.getSource().getFeatures();
            expect(features.length).toBe(1);
            var feat = features[0];
            var coords = feat.getGeometry().getCoordinates();
            var properties = feat.getProperties();
            expect(coords[0]).toBe(47);
            expect(coords[1]).toBe(-11);
            expect('song' in properties).toBe(true);
            expect(properties.song).toBe('If you have ghosts');
            resolve();
          });

          _index.FileUtil.addShpLayerFromFile(shpFile, map);
        });
      });
    });
  });
});