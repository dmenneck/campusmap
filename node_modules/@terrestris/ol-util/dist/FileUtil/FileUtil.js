"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = exports.FileUtil = void 0;

var _GeoJSON = _interopRequireDefault(require("ol/format/GeoJSON"));

var _Vector = _interopRequireDefault(require("ol/layer/Vector"));

var _Vector2 = _interopRequireDefault(require("ol/source/Vector"));

var _shpjs = _interopRequireDefault(require("shpjs"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

/**
 * Helper class for adding layers from various file formats.
 *
 * @class
 */
var FileUtil =
/*#__PURE__*/
function () {
  function FileUtil() {
    _classCallCheck(this, FileUtil);
  }

  _createClass(FileUtil, null, [{
    key: "addGeojsonLayerFromFile",

    /**
     * Adds a new vector layer from a geojson file.
     * @param {File} file the file to read the geojson from
     * @param {ol.Map} map the map to add the layer to
     */
    value: function addGeojsonLayerFromFile(file, map) {
      var reader = new FileReader();
      reader.readAsText(file);
      reader.addEventListener('loadend', function () {
        var content = reader.result;
        FileUtil.addGeojsonLayer(content, map);
      });
    }
    /**
     * Adds a new vector layer from a shape file (zip).
     * @param {File} file the file to read the geojson from
     * @param {ol.Map} map the map to add the layer to
     */

  }, {
    key: "addShpLayerFromFile",
    value: function addShpLayerFromFile(file, map) {
      var reader = new FileReader();
      reader.readAsArrayBuffer(file);
      reader.addEventListener('loadend', function () {
        var blob = reader.result;
        (0, _shpjs["default"])(blob).then(function (json) {
          FileUtil.addGeojsonLayer(json, map);
        });
      });
    }
    /**
     * Adds a new vector layer from a geojson string.
     * @param {string} json the geojson string
     * @param {ol.Map} map the map to add the layer to
     */

  }, {
    key: "addGeojsonLayer",
    value: function addGeojsonLayer(json, map) {
      var format = new _GeoJSON["default"]();
      var features = format.readFeatures(json);
      var layer = new _Vector["default"]({
        source: new _Vector2["default"]({
          features: features
        })
      });
      map.addLayer(layer);
    }
  }]);

  return FileUtil;
}();

exports.FileUtil = FileUtil;
var _default = FileUtil;
exports["default"] = _default;