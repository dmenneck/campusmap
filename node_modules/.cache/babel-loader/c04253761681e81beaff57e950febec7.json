{"ast":null,"code":"/**\n * ag-grid-community - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components\n * @version v21.2.2\n * @link http://www.ag-grid.com/\n * @license MIT\n */\n\"use strict\";\n\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nvar __metadata = this && this.__metadata || function (k, v) {\n  if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar gridOptionsWrapper_1 = require(\"../gridOptionsWrapper\");\n\nvar expressionService_1 = require(\"./expressionService\");\n\nvar columnController_1 = require(\"../columnController/columnController\");\n\nvar context_1 = require(\"../context/context\");\n\nvar events_1 = require(\"../events\");\n\nvar eventService_1 = require(\"../eventService\");\n\nvar valueCache_1 = require(\"./valueCache\");\n\nvar utils_1 = require(\"../utils\");\n\nvar ValueService =\n/** @class */\nfunction () {\n  function ValueService() {\n    this.initialised = false;\n  }\n\n  ValueService.prototype.init = function () {\n    this.cellExpressions = this.gridOptionsWrapper.isEnableCellExpressions();\n    this.initialised = true;\n  };\n\n  ValueService.prototype.getValue = function (column, rowNode, forFilter, ignoreAggData) {\n    // console.log(`turnActive = ${this.turnActive}`);\n    if (forFilter === void 0) {\n      forFilter = false;\n    }\n\n    if (ignoreAggData === void 0) {\n      ignoreAggData = false;\n    } // hack - the grid is getting refreshed before this bean gets initialised, race condition.\n    // really should have a way so they get initialised in the right order???\n\n\n    if (!this.initialised) {\n      this.init();\n    }\n\n    if (!rowNode) {\n      return;\n    } // pull these out to make code below easier to read\n\n\n    var colDef = column.getColDef();\n    var field = colDef.field;\n    var colId = column.getId();\n    var data = rowNode.data;\n    var result; // if there is a value getter, this gets precedence over a field\n\n    var groupDataExists = rowNode.groupData && rowNode.groupData[colId] !== undefined;\n    var aggDataExists = !ignoreAggData && rowNode.aggData && rowNode.aggData[colId] !== undefined;\n\n    if (forFilter && colDef.filterValueGetter) {\n      result = this.executeFilterValueGetter(colDef.filterValueGetter, data, column, rowNode);\n    } else if (this.gridOptionsWrapper.isTreeData() && aggDataExists) {\n      result = rowNode.aggData[colId];\n    } else if (this.gridOptionsWrapper.isTreeData() && colDef.valueGetter) {\n      result = this.executeValueGetter(colDef.valueGetter, data, column, rowNode);\n    } else if (this.gridOptionsWrapper.isTreeData() && field && data) {\n      result = utils_1._.getValueUsingField(data, field, column.isFieldContainsDots());\n    } else if (groupDataExists) {\n      result = rowNode.groupData[colId];\n    } else if (aggDataExists) {\n      result = rowNode.aggData[colId];\n    } else if (colDef.valueGetter) {\n      result = this.executeValueGetter(colDef.valueGetter, data, column, rowNode);\n    } else if (field && data) {\n      result = utils_1._.getValueUsingField(data, field, column.isFieldContainsDots());\n    } // the result could be an expression itself, if we are allowing cell values to be expressions\n\n\n    if (this.cellExpressions && typeof result === 'string' && result.indexOf('=') === 0) {\n      var cellValueGetter = result.substring(1);\n      result = this.executeValueGetter(cellValueGetter, data, column, rowNode);\n    }\n\n    return result;\n  };\n\n  ValueService.prototype.setValue = function (rowNode, colKey, newValue) {\n    var column = this.columnController.getPrimaryColumn(colKey);\n\n    if (!rowNode || !column) {\n      return;\n    } // this will only happen if user is trying to paste into a group row, which doesn't make sense\n    // the user should not be trying to paste into group rows\n\n\n    var data = rowNode.data;\n\n    if (utils_1._.missing(data)) {\n      rowNode.data = {};\n    } // for backwards compatibility we are also retrieving the newValueHandler as well as the valueSetter\n\n\n    var _a = column.getColDef(),\n        field = _a.field,\n        newValueHandler = _a.newValueHandler,\n        valueSetter = _a.valueSetter; // need either a field or a newValueHandler for this to work\n\n\n    if (utils_1._.missing(field) && utils_1._.missing(newValueHandler) && utils_1._.missing(valueSetter)) {\n      // we don't tell user about newValueHandler, as that is deprecated\n      console.warn(\"ag-Grid: you need either field or valueSetter set on colDef for editing to work\");\n      return;\n    }\n\n    var params = {\n      node: rowNode,\n      data: rowNode.data,\n      oldValue: this.getValue(column, rowNode),\n      newValue: newValue,\n      colDef: column.getColDef(),\n      column: column,\n      api: this.gridOptionsWrapper.getApi(),\n      columnApi: this.gridOptionsWrapper.getColumnApi(),\n      context: this.gridOptionsWrapper.getContext()\n    };\n    params.newValue = newValue;\n    var valueWasDifferent;\n\n    if (newValueHandler && utils_1._.exists(newValueHandler)) {\n      valueWasDifferent = newValueHandler(params);\n    } else if (utils_1._.exists(valueSetter)) {\n      valueWasDifferent = this.expressionService.evaluate(valueSetter, params);\n    } else {\n      valueWasDifferent = this.setValueUsingField(data, field, newValue, column.isFieldContainsDots());\n    } // in case user forgot to return something (possible if they are not using TypeScript\n    // and just forgot, or using an old newValueHandler we didn't always expect a return\n    // value here), we default the return value to true, so we always refresh.\n\n\n    if (valueWasDifferent === undefined) {\n      valueWasDifferent = true;\n    } // if no change to the value, then no need to do the updating, or notifying via events.\n    // otherwise the user could be tabbing around the grid, and cellValueChange would get called\n    // all the time.\n\n\n    if (!valueWasDifferent) {\n      return;\n    } // reset quick filter on this row\n\n\n    rowNode.resetQuickFilterAggregateText();\n    this.valueCache.onDataChanged();\n    params.newValue = this.getValue(column, rowNode);\n    var onCellValueChanged = column.getColDef().onCellValueChanged;\n\n    if (typeof onCellValueChanged === 'function') {\n      // to make callback async, do in a timeout\n      setTimeout(function () {\n        return onCellValueChanged(params);\n      }, 0);\n    }\n\n    var event = {\n      type: events_1.Events.EVENT_CELL_VALUE_CHANGED,\n      event: null,\n      rowIndex: rowNode.rowIndex,\n      rowPinned: rowNode.rowPinned,\n      column: params.column,\n      api: params.api,\n      colDef: params.colDef,\n      columnApi: params.columnApi,\n      context: params.context,\n      data: rowNode.data,\n      node: rowNode,\n      oldValue: params.oldValue,\n      newValue: params.newValue,\n      value: params.newValue\n    };\n    this.eventService.dispatchEvent(event);\n  };\n\n  ValueService.prototype.setValueUsingField = function (data, field, newValue, isFieldContainsDots) {\n    if (!field) {\n      return false;\n    } // if no '.', then it's not a deep value\n\n\n    var valuesAreSame = false;\n\n    if (!isFieldContainsDots) {\n      data[field] = newValue;\n    } else {\n      // otherwise it is a deep value, so need to dig for it\n      var fieldPieces = field.split('.');\n      var currentObject = data;\n\n      while (fieldPieces.length > 0 && currentObject) {\n        var fieldPiece = fieldPieces.shift();\n\n        if (fieldPieces.length === 0) {\n          currentObject[fieldPiece] = newValue;\n        } else {\n          currentObject = currentObject[fieldPiece];\n        }\n      }\n    }\n\n    return !valuesAreSame;\n  };\n\n  ValueService.prototype.executeFilterValueGetter = function (valueGetter, data, column, rowNode) {\n    var params = {\n      data: data,\n      node: rowNode,\n      column: column,\n      colDef: column.getColDef(),\n      api: this.gridOptionsWrapper.getApi(),\n      columnApi: this.gridOptionsWrapper.getColumnApi(),\n      context: this.gridOptionsWrapper.getContext(),\n      getValue: this.getValueCallback.bind(this, rowNode)\n    };\n    return this.expressionService.evaluate(valueGetter, params);\n  };\n\n  ValueService.prototype.executeValueGetter = function (valueGetter, data, column, rowNode) {\n    var colId = column.getId(); // if inside the same turn, just return back the value we got last time\n\n    var valueFromCache = this.valueCache.getValue(rowNode, colId);\n\n    if (valueFromCache !== undefined) {\n      return valueFromCache;\n    }\n\n    var params = {\n      data: data,\n      node: rowNode,\n      column: column,\n      colDef: column.getColDef(),\n      api: this.gridOptionsWrapper.getApi(),\n      columnApi: this.gridOptionsWrapper.getColumnApi(),\n      context: this.gridOptionsWrapper.getContext(),\n      getValue: this.getValueCallback.bind(this, rowNode)\n    };\n    var result = this.expressionService.evaluate(valueGetter, params); // if a turn is active, store the value in case the grid asks for it again\n\n    this.valueCache.setValue(rowNode, colId, result);\n    return result;\n  };\n\n  ValueService.prototype.getValueCallback = function (node, field) {\n    var otherColumn = this.columnController.getPrimaryColumn(field);\n\n    if (otherColumn) {\n      return this.getValue(otherColumn, node);\n    }\n\n    return null;\n  }; // used by row grouping and pivot, to get key for a row. col can be a pivot col or a row grouping col\n\n\n  ValueService.prototype.getKeyForNode = function (col, rowNode) {\n    var value = this.getValue(col, rowNode);\n    var keyCreator = col.getColDef().keyCreator;\n    var result = keyCreator ? keyCreator({\n      value: value\n    }) : value; // if already a string, or missing, just return it\n\n    if (typeof result === 'string' || result == null) {\n      return result;\n    }\n\n    result = String(result);\n\n    if (result === '[object Object]') {\n      utils_1._.doOnce(function () {\n        console.warn('ag-Grid: a column you are grouping or pivoting by has objects as values. If you want to group by complex objects then either a) use a colDef.keyCreator (se ag-Grid docs) or b) to toString() on the object to return a key');\n      }, 'getKeyForNode - warn about [object,object]');\n    }\n\n    return result;\n  };\n\n  __decorate([context_1.Autowired('gridOptionsWrapper'), __metadata(\"design:type\", gridOptionsWrapper_1.GridOptionsWrapper)], ValueService.prototype, \"gridOptionsWrapper\", void 0);\n\n  __decorate([context_1.Autowired('expressionService'), __metadata(\"design:type\", expressionService_1.ExpressionService)], ValueService.prototype, \"expressionService\", void 0);\n\n  __decorate([context_1.Autowired('columnController'), __metadata(\"design:type\", columnController_1.ColumnController)], ValueService.prototype, \"columnController\", void 0);\n\n  __decorate([context_1.Autowired('eventService'), __metadata(\"design:type\", eventService_1.EventService)], ValueService.prototype, \"eventService\", void 0);\n\n  __decorate([context_1.Autowired('valueCache'), __metadata(\"design:type\", valueCache_1.ValueCache)], ValueService.prototype, \"valueCache\", void 0);\n\n  __decorate([context_1.PostConstruct, __metadata(\"design:type\", Function), __metadata(\"design:paramtypes\", []), __metadata(\"design:returntype\", void 0)], ValueService.prototype, \"init\", null);\n\n  ValueService = __decorate([context_1.Bean('valueService')], ValueService);\n  return ValueService;\n}();\n\nexports.ValueService = ValueService;","map":{"version":3,"sources":["/Users/dirkmennecke77/Desktop/Lageplan/node_modules/ag-grid-community/dist/lib/valueService/valueService.js"],"names":["__decorate","decorators","target","key","desc","c","arguments","length","r","Object","getOwnPropertyDescriptor","d","Reflect","decorate","i","defineProperty","__metadata","k","v","metadata","exports","value","gridOptionsWrapper_1","require","expressionService_1","columnController_1","context_1","events_1","eventService_1","valueCache_1","utils_1","ValueService","initialised","prototype","init","cellExpressions","gridOptionsWrapper","isEnableCellExpressions","getValue","column","rowNode","forFilter","ignoreAggData","colDef","getColDef","field","colId","getId","data","result","groupDataExists","groupData","undefined","aggDataExists","aggData","filterValueGetter","executeFilterValueGetter","isTreeData","valueGetter","executeValueGetter","_","getValueUsingField","isFieldContainsDots","indexOf","cellValueGetter","substring","setValue","colKey","newValue","columnController","getPrimaryColumn","missing","_a","newValueHandler","valueSetter","console","warn","params","node","oldValue","api","getApi","columnApi","getColumnApi","context","getContext","valueWasDifferent","exists","expressionService","evaluate","setValueUsingField","resetQuickFilterAggregateText","valueCache","onDataChanged","onCellValueChanged","setTimeout","event","type","Events","EVENT_CELL_VALUE_CHANGED","rowIndex","rowPinned","eventService","dispatchEvent","valuesAreSame","fieldPieces","split","currentObject","fieldPiece","shift","getValueCallback","bind","valueFromCache","otherColumn","getKeyForNode","col","keyCreator","String","doOnce","Autowired","GridOptionsWrapper","ExpressionService","ColumnController","EventService","ValueCache","PostConstruct","Function","Bean"],"mappings":"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","sourcesContent":["/**\n * ag-grid-community - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components\n * @version v21.2.2\n * @link http://www.ag-grid.com/\n * @license MIT\n */\n\"use strict\";\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __metadata = (this && this.__metadata) || function (k, v) {\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar gridOptionsWrapper_1 = require(\"../gridOptionsWrapper\");\nvar expressionService_1 = require(\"./expressionService\");\nvar columnController_1 = require(\"../columnController/columnController\");\nvar context_1 = require(\"../context/context\");\nvar events_1 = require(\"../events\");\nvar eventService_1 = require(\"../eventService\");\nvar valueCache_1 = require(\"./valueCache\");\nvar utils_1 = require(\"../utils\");\nvar ValueService = /** @class */ (function () {\n    function ValueService() {\n        this.initialised = false;\n    }\n    ValueService.prototype.init = function () {\n        this.cellExpressions = this.gridOptionsWrapper.isEnableCellExpressions();\n        this.initialised = true;\n    };\n    ValueService.prototype.getValue = function (column, rowNode, forFilter, ignoreAggData) {\n        // console.log(`turnActive = ${this.turnActive}`);\n        if (forFilter === void 0) { forFilter = false; }\n        if (ignoreAggData === void 0) { ignoreAggData = false; }\n        // hack - the grid is getting refreshed before this bean gets initialised, race condition.\n        // really should have a way so they get initialised in the right order???\n        if (!this.initialised) {\n            this.init();\n        }\n        if (!rowNode) {\n            return;\n        }\n        // pull these out to make code below easier to read\n        var colDef = column.getColDef();\n        var field = colDef.field;\n        var colId = column.getId();\n        var data = rowNode.data;\n        var result;\n        // if there is a value getter, this gets precedence over a field\n        var groupDataExists = rowNode.groupData && rowNode.groupData[colId] !== undefined;\n        var aggDataExists = !ignoreAggData && rowNode.aggData && rowNode.aggData[colId] !== undefined;\n        if (forFilter && colDef.filterValueGetter) {\n            result = this.executeFilterValueGetter(colDef.filterValueGetter, data, column, rowNode);\n        }\n        else if (this.gridOptionsWrapper.isTreeData() && aggDataExists) {\n            result = rowNode.aggData[colId];\n        }\n        else if (this.gridOptionsWrapper.isTreeData() && colDef.valueGetter) {\n            result = this.executeValueGetter(colDef.valueGetter, data, column, rowNode);\n        }\n        else if (this.gridOptionsWrapper.isTreeData() && (field && data)) {\n            result = utils_1._.getValueUsingField(data, field, column.isFieldContainsDots());\n        }\n        else if (groupDataExists) {\n            result = rowNode.groupData[colId];\n        }\n        else if (aggDataExists) {\n            result = rowNode.aggData[colId];\n        }\n        else if (colDef.valueGetter) {\n            result = this.executeValueGetter(colDef.valueGetter, data, column, rowNode);\n        }\n        else if (field && data) {\n            result = utils_1._.getValueUsingField(data, field, column.isFieldContainsDots());\n        }\n        // the result could be an expression itself, if we are allowing cell values to be expressions\n        if (this.cellExpressions && (typeof result === 'string') && result.indexOf('=') === 0) {\n            var cellValueGetter = result.substring(1);\n            result = this.executeValueGetter(cellValueGetter, data, column, rowNode);\n        }\n        return result;\n    };\n    ValueService.prototype.setValue = function (rowNode, colKey, newValue) {\n        var column = this.columnController.getPrimaryColumn(colKey);\n        if (!rowNode || !column) {\n            return;\n        }\n        // this will only happen if user is trying to paste into a group row, which doesn't make sense\n        // the user should not be trying to paste into group rows\n        var data = rowNode.data;\n        if (utils_1._.missing(data)) {\n            rowNode.data = {};\n        }\n        // for backwards compatibility we are also retrieving the newValueHandler as well as the valueSetter\n        var _a = column.getColDef(), field = _a.field, newValueHandler = _a.newValueHandler, valueSetter = _a.valueSetter;\n        // need either a field or a newValueHandler for this to work\n        if (utils_1._.missing(field) && utils_1._.missing(newValueHandler) && utils_1._.missing(valueSetter)) {\n            // we don't tell user about newValueHandler, as that is deprecated\n            console.warn(\"ag-Grid: you need either field or valueSetter set on colDef for editing to work\");\n            return;\n        }\n        var params = {\n            node: rowNode,\n            data: rowNode.data,\n            oldValue: this.getValue(column, rowNode),\n            newValue: newValue,\n            colDef: column.getColDef(),\n            column: column,\n            api: this.gridOptionsWrapper.getApi(),\n            columnApi: this.gridOptionsWrapper.getColumnApi(),\n            context: this.gridOptionsWrapper.getContext()\n        };\n        params.newValue = newValue;\n        var valueWasDifferent;\n        if (newValueHandler && utils_1._.exists(newValueHandler)) {\n            valueWasDifferent = newValueHandler(params);\n        }\n        else if (utils_1._.exists(valueSetter)) {\n            valueWasDifferent = this.expressionService.evaluate(valueSetter, params);\n        }\n        else {\n            valueWasDifferent = this.setValueUsingField(data, field, newValue, column.isFieldContainsDots());\n        }\n        // in case user forgot to return something (possible if they are not using TypeScript\n        // and just forgot, or using an old newValueHandler we didn't always expect a return\n        // value here), we default the return value to true, so we always refresh.\n        if (valueWasDifferent === undefined) {\n            valueWasDifferent = true;\n        }\n        // if no change to the value, then no need to do the updating, or notifying via events.\n        // otherwise the user could be tabbing around the grid, and cellValueChange would get called\n        // all the time.\n        if (!valueWasDifferent) {\n            return;\n        }\n        // reset quick filter on this row\n        rowNode.resetQuickFilterAggregateText();\n        this.valueCache.onDataChanged();\n        params.newValue = this.getValue(column, rowNode);\n        var onCellValueChanged = column.getColDef().onCellValueChanged;\n        if (typeof onCellValueChanged === 'function') {\n            // to make callback async, do in a timeout\n            setTimeout(function () { return onCellValueChanged(params); }, 0);\n        }\n        var event = {\n            type: events_1.Events.EVENT_CELL_VALUE_CHANGED,\n            event: null,\n            rowIndex: rowNode.rowIndex,\n            rowPinned: rowNode.rowPinned,\n            column: params.column,\n            api: params.api,\n            colDef: params.colDef,\n            columnApi: params.columnApi,\n            context: params.context,\n            data: rowNode.data,\n            node: rowNode,\n            oldValue: params.oldValue,\n            newValue: params.newValue,\n            value: params.newValue\n        };\n        this.eventService.dispatchEvent(event);\n    };\n    ValueService.prototype.setValueUsingField = function (data, field, newValue, isFieldContainsDots) {\n        if (!field) {\n            return false;\n        }\n        // if no '.', then it's not a deep value\n        var valuesAreSame = false;\n        if (!isFieldContainsDots) {\n            data[field] = newValue;\n        }\n        else {\n            // otherwise it is a deep value, so need to dig for it\n            var fieldPieces = field.split('.');\n            var currentObject = data;\n            while (fieldPieces.length > 0 && currentObject) {\n                var fieldPiece = fieldPieces.shift();\n                if (fieldPieces.length === 0) {\n                    currentObject[fieldPiece] = newValue;\n                }\n                else {\n                    currentObject = currentObject[fieldPiece];\n                }\n            }\n        }\n        return !valuesAreSame;\n    };\n    ValueService.prototype.executeFilterValueGetter = function (valueGetter, data, column, rowNode) {\n        var params = {\n            data: data,\n            node: rowNode,\n            column: column,\n            colDef: column.getColDef(),\n            api: this.gridOptionsWrapper.getApi(),\n            columnApi: this.gridOptionsWrapper.getColumnApi(),\n            context: this.gridOptionsWrapper.getContext(),\n            getValue: this.getValueCallback.bind(this, rowNode)\n        };\n        return this.expressionService.evaluate(valueGetter, params);\n    };\n    ValueService.prototype.executeValueGetter = function (valueGetter, data, column, rowNode) {\n        var colId = column.getId();\n        // if inside the same turn, just return back the value we got last time\n        var valueFromCache = this.valueCache.getValue(rowNode, colId);\n        if (valueFromCache !== undefined) {\n            return valueFromCache;\n        }\n        var params = {\n            data: data,\n            node: rowNode,\n            column: column,\n            colDef: column.getColDef(),\n            api: this.gridOptionsWrapper.getApi(),\n            columnApi: this.gridOptionsWrapper.getColumnApi(),\n            context: this.gridOptionsWrapper.getContext(),\n            getValue: this.getValueCallback.bind(this, rowNode)\n        };\n        var result = this.expressionService.evaluate(valueGetter, params);\n        // if a turn is active, store the value in case the grid asks for it again\n        this.valueCache.setValue(rowNode, colId, result);\n        return result;\n    };\n    ValueService.prototype.getValueCallback = function (node, field) {\n        var otherColumn = this.columnController.getPrimaryColumn(field);\n        if (otherColumn) {\n            return this.getValue(otherColumn, node);\n        }\n        return null;\n    };\n    // used by row grouping and pivot, to get key for a row. col can be a pivot col or a row grouping col\n    ValueService.prototype.getKeyForNode = function (col, rowNode) {\n        var value = this.getValue(col, rowNode);\n        var keyCreator = col.getColDef().keyCreator;\n        var result = keyCreator ? keyCreator({ value: value }) : value;\n        // if already a string, or missing, just return it\n        if (typeof result === 'string' || result == null) {\n            return result;\n        }\n        result = String(result);\n        if (result === '[object Object]') {\n            utils_1._.doOnce(function () {\n                console.warn('ag-Grid: a column you are grouping or pivoting by has objects as values. If you want to group by complex objects then either a) use a colDef.keyCreator (se ag-Grid docs) or b) to toString() on the object to return a key');\n            }, 'getKeyForNode - warn about [object,object]');\n        }\n        return result;\n    };\n    __decorate([\n        context_1.Autowired('gridOptionsWrapper'),\n        __metadata(\"design:type\", gridOptionsWrapper_1.GridOptionsWrapper)\n    ], ValueService.prototype, \"gridOptionsWrapper\", void 0);\n    __decorate([\n        context_1.Autowired('expressionService'),\n        __metadata(\"design:type\", expressionService_1.ExpressionService)\n    ], ValueService.prototype, \"expressionService\", void 0);\n    __decorate([\n        context_1.Autowired('columnController'),\n        __metadata(\"design:type\", columnController_1.ColumnController)\n    ], ValueService.prototype, \"columnController\", void 0);\n    __decorate([\n        context_1.Autowired('eventService'),\n        __metadata(\"design:type\", eventService_1.EventService)\n    ], ValueService.prototype, \"eventService\", void 0);\n    __decorate([\n        context_1.Autowired('valueCache'),\n        __metadata(\"design:type\", valueCache_1.ValueCache)\n    ], ValueService.prototype, \"valueCache\", void 0);\n    __decorate([\n        context_1.PostConstruct,\n        __metadata(\"design:type\", Function),\n        __metadata(\"design:paramtypes\", []),\n        __metadata(\"design:returntype\", void 0)\n    ], ValueService.prototype, \"init\", null);\n    ValueService = __decorate([\n        context_1.Bean('valueService')\n    ], ValueService);\n    return ValueService;\n}());\nexports.ValueService = ValueService;\n"]},"metadata":{},"sourceType":"script"}