{"ast":null,"code":"/**\n * @module ol/format/filter/ComparisonBinary\n */\nimport Comparison from './Comparison.js';\n/**\n * @classdesc\n * Abstract class; normally only used for creating subclasses and not instantiated in apps.\n * Base class for WFS GetFeature property binary comparison filters.\n *\n * @abstract\n */\n\nvar ComparisonBinary =\n/*@__PURE__*/\nfunction (Comparison) {\n  function ComparisonBinary(tagName, propertyName, expression, opt_matchCase) {\n    Comparison.call(this, tagName, propertyName);\n    /**\n     * @type {!(string|number)}\n     */\n\n    this.expression = expression;\n    /**\n     * @type {boolean|undefined}\n     */\n\n    this.matchCase = opt_matchCase;\n  }\n\n  if (Comparison) ComparisonBinary.__proto__ = Comparison;\n  ComparisonBinary.prototype = Object.create(Comparison && Comparison.prototype);\n  ComparisonBinary.prototype.constructor = ComparisonBinary;\n  return ComparisonBinary;\n}(Comparison);\n\nexport default ComparisonBinary;","map":{"version":3,"sources":["../../../../src/ol/format/filter/ComparisonBinary.js"],"names":["super"],"mappings":"AAAA;;;AAGA,OAAO,UAAP,MAAuB,iBAAvB;;;;;;;;;AASA,IAAM,gBAAgB;AAAmB;AAAA,UAAA,UAAA,EAAA;AAQvC,WAAA,gBAAA,CAAY,OAAZ,EAAqB,YAArB,EAAmC,UAAnC,EAA+C,aAA/C,EAA8D;AAE5DA,IAAAA,UAAAA,CAAAA,IAAAA,CAAK,IAALA,EAAM,OAANA,EAAe,YAAfA;;;;;AAKA,SAAK,UAAL,GAAkB,UAAlB;;;;;AAKA,SAAK,SAAL,GAAiB,aAAjB;;;;;AACD,EAAA,gBAAA,CAAA,SAAA,CAAA,WAAA,GAAA,gBAAA;;CArBsC,CAAV,UAAU,CAAzC;;AAyBA,eAAe,gBAAf","sourcesContent":["/**\n * @module ol/format/filter/ComparisonBinary\n */\nimport Comparison from './Comparison.js';\n\n/**\n * @classdesc\n * Abstract class; normally only used for creating subclasses and not instantiated in apps.\n * Base class for WFS GetFeature property binary comparison filters.\n *\n * @abstract\n */\nclass ComparisonBinary extends Comparison {\n\n  /**\n   * @param {!string} tagName The XML tag name for this filter.\n   * @param {!string} propertyName Name of the context property to compare.\n   * @param {!(string|number)} expression The value to compare.\n   * @param {boolean=} opt_matchCase Case-sensitive?\n   */\n  constructor(tagName, propertyName, expression, opt_matchCase) {\n\n    super(tagName, propertyName);\n\n    /**\n     * @type {!(string|number)}\n     */\n    this.expression = expression;\n\n    /**\n     * @type {boolean|undefined}\n     */\n    this.matchCase = opt_matchCase;\n  }\n\n}\n\nexport default ComparisonBinary;\n"]},"metadata":{},"sourceType":"module"}