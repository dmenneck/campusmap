{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n/**\n * @module ol/format/filter/Or\n */\n\n\nimport LogicalNary from './LogicalNary.js';\n/**\n * @classdesc\n * Represents a logical `<Or>` operator between two ore more filter conditions.\n * @api\n */\n\nvar Or =\n/** @class */\nfunction (_super) {\n  __extends(Or, _super);\n  /**\n   * @param {...import(\"./Filter.js\").default} conditions Conditions.\n   */\n\n\n  function Or(conditions) {\n    return _super.call(this, 'Or', Array.prototype.slice.call(arguments)) || this;\n  }\n\n  return Or;\n}(LogicalNary);\n\nexport default Or;","map":null,"metadata":{},"sourceType":"module"}