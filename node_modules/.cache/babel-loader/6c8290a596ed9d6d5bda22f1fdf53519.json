{"ast":null,"code":"/**\n * @module ol/format/filter/EqualTo\n */\nimport ComparisonBinary from './ComparisonBinary.js';\n/**\n * @classdesc\n * Represents a `<PropertyIsEqualTo>` comparison operator.\n * @api\n */\n\nvar EqualTo =\n/*@__PURE__*/\nfunction (ComparisonBinary) {\n  function EqualTo(propertyName, expression, opt_matchCase) {\n    ComparisonBinary.call(this, 'PropertyIsEqualTo', propertyName, expression, opt_matchCase);\n  }\n\n  if (ComparisonBinary) EqualTo.__proto__ = ComparisonBinary;\n  EqualTo.prototype = Object.create(ComparisonBinary && ComparisonBinary.prototype);\n  EqualTo.prototype.constructor = EqualTo;\n  return EqualTo;\n}(ComparisonBinary);\n\nexport default EqualTo;","map":{"version":3,"sources":["../../../../src/ol/format/filter/EqualTo.js"],"names":["super"],"mappings":"AAAA;;;AAGA,OAAO,gBAAP,MAA6B,uBAA7B;;;;;;;AAOA,IAAM,OAAO;AAAyB;AAAA,UAAA,gBAAA,EAAA;AAOpC,WAAA,OAAA,CAAY,YAAZ,EAA0B,UAA1B,EAAsC,aAAtC,EAAqD;AACnDA,IAAAA,gBAAAA,CAAAA,IAAAA,CAAK,IAALA,EAAM,mBAANA,EAA2B,YAA3BA,EAAyC,UAAzCA,EAAqD,aAArDA;;;;;AACD,EAAA,OAAA,CAAA,SAAA,CAAA,WAAA,GAAA,OAAA;;CATmC,CAAhB,gBAAgB,CAAtC;;AAaA,eAAe,OAAf","sourcesContent":["/**\n * @module ol/format/filter/EqualTo\n */\nimport ComparisonBinary from './ComparisonBinary.js';\n\n/**\n * @classdesc\n * Represents a `<PropertyIsEqualTo>` comparison operator.\n * @api\n */\nclass EqualTo extends ComparisonBinary {\n\n  /**\n   * @param {!string} propertyName Name of the context property to compare.\n   * @param {!(string|number)} expression The value to compare.\n   * @param {boolean=} opt_matchCase Case-sensitive?\n   */\n  constructor(propertyName, expression, opt_matchCase) {\n    super('PropertyIsEqualTo', propertyName, expression, opt_matchCase);\n  }\n\n}\n\nexport default EqualTo;\n"]},"metadata":{},"sourceType":"module"}