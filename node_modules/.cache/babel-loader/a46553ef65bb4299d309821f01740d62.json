{"ast":null,"code":"/**\n * @module ol/interaction/DragAndDrop\n */\n// FIXME should handle all geo-referenced data, not just vector data\nimport { TRUE } from '../functions.js';\nimport { listen, unlistenByKey } from '../events.js';\nimport Event from '../events/Event.js';\nimport EventType from '../events/EventType.js';\nimport Interaction from './Interaction.js';\nimport { get as getProjection } from '../proj.js';\n/**\n * @typedef {Object} Options\n * @property {Array<typeof import(\"../format/Feature.js\").default>} [formatConstructors] Format constructors.\n * @property {import(\"../source/Vector.js\").default} [source] Optional vector source where features will be added.  If a source is provided\n * all existing features will be removed and new features will be added when\n * they are dropped on the target.  If you want to add features to a vector\n * source without removing the existing features (append only), instead of\n * providing the source option listen for the \"addfeatures\" event.\n * @property {import(\"../proj.js\").ProjectionLike} [projection] Target projection. By default, the map's view's projection is used.\n * @property {HTMLElement} [target] The element that is used as the drop target, default is the viewport element.\n */\n\n/**\n * @enum {string}\n */\n\nvar DragAndDropEventType = {\n  /**\n   * Triggered when features are added\n   * @event DragAndDropEvent#addfeatures\n   * @api\n   */\n  ADD_FEATURES: 'addfeatures'\n};\n/**\n * @classdesc\n * Events emitted by {@link module:ol/interaction/DragAndDrop~DragAndDrop} instances are instances\n * of this type.\n */\n\nvar DragAndDropEvent =\n/*@__PURE__*/\nfunction (Event) {\n  function DragAndDropEvent(type, file, opt_features, opt_projection) {\n    Event.call(this, type);\n    /**\n     * The features parsed from dropped data.\n     * @type {Array<import(\"../Feature.js\").FeatureLike>|undefined}\n     * @api\n     */\n\n    this.features = opt_features;\n    /**\n     * The dropped file.\n     * @type {File}\n     * @api\n     */\n\n    this.file = file;\n    /**\n     * The feature projection.\n     * @type {import(\"../proj/Projection.js\").default|undefined}\n     * @api\n     */\n\n    this.projection = opt_projection;\n  }\n\n  if (Event) DragAndDropEvent.__proto__ = Event;\n  DragAndDropEvent.prototype = Object.create(Event && Event.prototype);\n  DragAndDropEvent.prototype.constructor = DragAndDropEvent;\n  return DragAndDropEvent;\n}(Event);\n/**\n * @classdesc\n * Handles input of vector data by drag and drop.\n * @api\n *\n * @fires DragAndDropEvent\n */\n\n\nvar DragAndDrop =\n/*@__PURE__*/\nfunction (Interaction) {\n  function DragAndDrop(opt_options) {\n    var options = opt_options ? opt_options : {};\n    Interaction.call(this, {\n      handleEvent: TRUE\n    });\n    /**\n     * @private\n     * @type {Array<typeof import(\"../format/Feature.js\").default>}\n     */\n\n    this.formatConstructors_ = options.formatConstructors ? options.formatConstructors : [];\n    /**\n     * @private\n     * @type {import(\"../proj/Projection.js\").default}\n     */\n\n    this.projection_ = options.projection ? getProjection(options.projection) : null;\n    /**\n     * @private\n     * @type {Array<import(\"../events.js\").EventsKey>}\n     */\n\n    this.dropListenKeys_ = null;\n    /**\n     * @private\n     * @type {import(\"../source/Vector.js\").default}\n     */\n\n    this.source_ = options.source || null;\n    /**\n     * @private\n     * @type {HTMLElement}\n     */\n\n    this.target = options.target ? options.target : null;\n  }\n\n  if (Interaction) DragAndDrop.__proto__ = Interaction;\n  DragAndDrop.prototype = Object.create(Interaction && Interaction.prototype);\n  DragAndDrop.prototype.constructor = DragAndDrop;\n  /**\n   * @param {File} file File.\n   * @param {Event} event Load event.\n   * @private\n   */\n\n  DragAndDrop.prototype.handleResult_ = function handleResult_(file, event) {\n    var result = event.target.result;\n    var map = this.getMap();\n    var projection = this.projection_;\n\n    if (!projection) {\n      var view = map.getView();\n      projection = view.getProjection();\n    }\n\n    var formatConstructors = this.formatConstructors_;\n    var features = [];\n\n    for (var i = 0, ii = formatConstructors.length; i < ii; ++i) {\n      var format = new formatConstructors[i]();\n      features = this.tryReadFeatures_(format, result, {\n        featureProjection: projection\n      });\n\n      if (features && features.length > 0) {\n        break;\n      }\n    }\n\n    if (this.source_) {\n      this.source_.clear();\n      this.source_.addFeatures(features);\n    }\n\n    this.dispatchEvent(new DragAndDropEvent(DragAndDropEventType.ADD_FEATURES, file, features, projection));\n  };\n  /**\n   * @private\n   */\n\n\n  DragAndDrop.prototype.registerListeners_ = function registerListeners_() {\n    var map = this.getMap();\n\n    if (map) {\n      var dropArea = this.target ? this.target : map.getViewport();\n      this.dropListenKeys_ = [listen(dropArea, EventType.DROP, handleDrop, this), listen(dropArea, EventType.DRAGENTER, handleStop, this), listen(dropArea, EventType.DRAGOVER, handleStop, this), listen(dropArea, EventType.DROP, handleStop, this)];\n    }\n  };\n  /**\n   * @inheritDoc\n   */\n\n\n  DragAndDrop.prototype.setActive = function setActive(active) {\n    Interaction.prototype.setActive.call(this, active);\n\n    if (active) {\n      this.registerListeners_();\n    } else {\n      this.unregisterListeners_();\n    }\n  };\n  /**\n   * @inheritDoc\n   */\n\n\n  DragAndDrop.prototype.setMap = function setMap(map) {\n    this.unregisterListeners_();\n    Interaction.prototype.setMap.call(this, map);\n\n    if (this.getActive()) {\n      this.registerListeners_();\n    }\n  };\n  /**\n   * @param {import(\"../format/Feature.js\").default} format Format.\n   * @param {string} text Text.\n   * @param {import(\"../format/Feature.js\").ReadOptions} options Read options.\n   * @private\n   * @return {Array<import(\"../Feature.js\").FeatureLike>} Features.\n   */\n\n\n  DragAndDrop.prototype.tryReadFeatures_ = function tryReadFeatures_(format, text, options) {\n    try {\n      return format.readFeatures(text, options);\n    } catch (e) {\n      return null;\n    }\n  };\n  /**\n   * @private\n   */\n\n\n  DragAndDrop.prototype.unregisterListeners_ = function unregisterListeners_() {\n    if (this.dropListenKeys_) {\n      this.dropListenKeys_.forEach(unlistenByKey);\n      this.dropListenKeys_ = null;\n    }\n  };\n\n  return DragAndDrop;\n}(Interaction);\n/**\n * @param {DragEvent} event Event.\n * @this {DragAndDrop}\n */\n\n\nfunction handleDrop(event) {\n  var files = event.dataTransfer.files;\n\n  for (var i = 0, ii = files.length; i < ii; ++i) {\n    var file = files.item(i);\n    var reader = new FileReader();\n    reader.addEventListener(EventType.LOAD, this.handleResult_.bind(this, file));\n    reader.readAsText(file);\n  }\n}\n/**\n * @param {DragEvent} event Event.\n */\n\n\nfunction handleStop(event) {\n  event.stopPropagation();\n  event.preventDefault();\n  event.dataTransfer.dropEffect = 'copy';\n}\n\nexport default DragAndDrop;","map":{"version":3,"sources":["../../../src/ol/interaction/DragAndDrop.js"],"names":["const","super","let"],"mappings":"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","sourcesContent":["/**\n * @module ol/interaction/DragAndDrop\n */\n// FIXME should handle all geo-referenced data, not just vector data\n\nimport {TRUE} from '../functions.js';\nimport {listen, unlistenByKey} from '../events.js';\nimport Event from '../events/Event.js';\nimport EventType from '../events/EventType.js';\nimport Interaction from './Interaction.js';\nimport {get as getProjection} from '../proj.js';\n\n\n/**\n * @typedef {Object} Options\n * @property {Array<typeof import(\"../format/Feature.js\").default>} [formatConstructors] Format constructors.\n * @property {import(\"../source/Vector.js\").default} [source] Optional vector source where features will be added.  If a source is provided\n * all existing features will be removed and new features will be added when\n * they are dropped on the target.  If you want to add features to a vector\n * source without removing the existing features (append only), instead of\n * providing the source option listen for the \"addfeatures\" event.\n * @property {import(\"../proj.js\").ProjectionLike} [projection] Target projection. By default, the map's view's projection is used.\n * @property {HTMLElement} [target] The element that is used as the drop target, default is the viewport element.\n */\n\n\n/**\n * @enum {string}\n */\nconst DragAndDropEventType = {\n  /**\n   * Triggered when features are added\n   * @event DragAndDropEvent#addfeatures\n   * @api\n   */\n  ADD_FEATURES: 'addfeatures'\n};\n\n\n/**\n * @classdesc\n * Events emitted by {@link module:ol/interaction/DragAndDrop~DragAndDrop} instances are instances\n * of this type.\n */\nclass DragAndDropEvent extends Event {\n\n  /**\n   * @param {DragAndDropEventType} type Type.\n   * @param {File} file File.\n   * @param {Array<import(\"../Feature.js\").default>=} opt_features Features.\n   * @param {import(\"../proj/Projection.js\").default=} opt_projection Projection.\n   */\n  constructor(type, file, opt_features, opt_projection) {\n\n    super(type);\n\n    /**\n     * The features parsed from dropped data.\n     * @type {Array<import(\"../Feature.js\").FeatureLike>|undefined}\n     * @api\n     */\n    this.features = opt_features;\n\n    /**\n     * The dropped file.\n     * @type {File}\n     * @api\n     */\n    this.file = file;\n\n    /**\n     * The feature projection.\n     * @type {import(\"../proj/Projection.js\").default|undefined}\n     * @api\n     */\n    this.projection = opt_projection;\n\n  }\n\n}\n\n\n/**\n * @classdesc\n * Handles input of vector data by drag and drop.\n * @api\n *\n * @fires DragAndDropEvent\n */\nclass DragAndDrop extends Interaction {\n  /**\n   * @param {Options=} opt_options Options.\n   */\n  constructor(opt_options) {\n\n    const options = opt_options ? opt_options : {};\n\n    super({\n      handleEvent: TRUE\n    });\n\n    /**\n     * @private\n     * @type {Array<typeof import(\"../format/Feature.js\").default>}\n     */\n    this.formatConstructors_ = options.formatConstructors ?\n      options.formatConstructors : [];\n\n    /**\n     * @private\n     * @type {import(\"../proj/Projection.js\").default}\n     */\n    this.projection_ = options.projection ?\n      getProjection(options.projection) : null;\n\n    /**\n     * @private\n     * @type {Array<import(\"../events.js\").EventsKey>}\n     */\n    this.dropListenKeys_ = null;\n\n    /**\n     * @private\n     * @type {import(\"../source/Vector.js\").default}\n     */\n    this.source_ = options.source || null;\n\n    /**\n     * @private\n     * @type {HTMLElement}\n     */\n    this.target = options.target ? options.target : null;\n\n  }\n\n  /**\n   * @param {File} file File.\n   * @param {Event} event Load event.\n   * @private\n   */\n  handleResult_(file, event) {\n    const result = event.target.result;\n    const map = this.getMap();\n    let projection = this.projection_;\n    if (!projection) {\n      const view = map.getView();\n      projection = view.getProjection();\n    }\n\n    const formatConstructors = this.formatConstructors_;\n    let features = [];\n    for (let i = 0, ii = formatConstructors.length; i < ii; ++i) {\n      const format = new formatConstructors[i]();\n      features = this.tryReadFeatures_(format, result, {\n        featureProjection: projection\n      });\n      if (features && features.length > 0) {\n        break;\n      }\n    }\n    if (this.source_) {\n      this.source_.clear();\n      this.source_.addFeatures(features);\n    }\n    this.dispatchEvent(\n      new DragAndDropEvent(\n        DragAndDropEventType.ADD_FEATURES, file,\n        features, projection));\n  }\n\n  /**\n   * @private\n   */\n  registerListeners_() {\n    const map = this.getMap();\n    if (map) {\n      const dropArea = this.target ? this.target : map.getViewport();\n      this.dropListenKeys_ = [\n        listen(dropArea, EventType.DROP, handleDrop, this),\n        listen(dropArea, EventType.DRAGENTER, handleStop, this),\n        listen(dropArea, EventType.DRAGOVER, handleStop, this),\n        listen(dropArea, EventType.DROP, handleStop, this)\n      ];\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  setActive(active) {\n    super.setActive(active);\n    if (active) {\n      this.registerListeners_();\n    } else {\n      this.unregisterListeners_();\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  setMap(map) {\n    this.unregisterListeners_();\n    super.setMap(map);\n    if (this.getActive()) {\n      this.registerListeners_();\n    }\n  }\n\n  /**\n   * @param {import(\"../format/Feature.js\").default} format Format.\n   * @param {string} text Text.\n   * @param {import(\"../format/Feature.js\").ReadOptions} options Read options.\n   * @private\n   * @return {Array<import(\"../Feature.js\").FeatureLike>} Features.\n   */\n  tryReadFeatures_(format, text, options) {\n    try {\n      return format.readFeatures(text, options);\n    } catch (e) {\n      return null;\n    }\n  }\n\n  /**\n   * @private\n   */\n  unregisterListeners_() {\n    if (this.dropListenKeys_) {\n      this.dropListenKeys_.forEach(unlistenByKey);\n      this.dropListenKeys_ = null;\n    }\n  }\n}\n\n\n/**\n * @param {DragEvent} event Event.\n * @this {DragAndDrop}\n */\nfunction handleDrop(event) {\n  const files = event.dataTransfer.files;\n  for (let i = 0, ii = files.length; i < ii; ++i) {\n    const file = files.item(i);\n    const reader = new FileReader();\n    reader.addEventListener(EventType.LOAD, this.handleResult_.bind(this, file));\n    reader.readAsText(file);\n  }\n}\n\n\n/**\n * @param {DragEvent} event Event.\n */\nfunction handleStop(event) {\n  event.stopPropagation();\n  event.preventDefault();\n  event.dataTransfer.dropEffect = 'copy';\n}\n\n\nexport default DragAndDrop;\n"]},"metadata":{},"sourceType":"module"}