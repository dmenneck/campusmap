{"ast":null,"code":"/**\n * @module ol/VectorTile\n */\nimport { getUid } from './util.js';\nimport Tile from './Tile.js';\nimport TileState from './TileState.js';\n/**\n * @const\n * @type {import(\"./extent.js\").Extent}\n */\n\nvar DEFAULT_EXTENT = [0, 0, 4096, 4096];\n\nvar VectorTile =\n/*@__PURE__*/\nfunction (Tile) {\n  function VectorTile(tileCoord, state, src, format, tileLoadFunction, opt_options) {\n    Tile.call(this, tileCoord, state, opt_options);\n    /**\n     * @type {number}\n     */\n\n    this.consumers = 0;\n    /**\n     * @private\n     * @type {import(\"./extent.js\").Extent}\n     */\n\n    this.extent_ = null;\n    /**\n     * @private\n     * @type {import(\"./format/Feature.js\").default}\n     */\n\n    this.format_ = format;\n    /**\n     * @private\n     * @type {Array<import(\"./Feature.js\").default>}\n     */\n\n    this.features_ = null;\n    /**\n     * @private\n     * @type {import(\"./featureloader.js\").FeatureLoader}\n     */\n\n    this.loader_;\n    /**\n     * Data projection\n     * @private\n     * @type {import(\"./proj/Projection.js\").default}\n     */\n\n    this.projection_ = null;\n    /**\n     * @private\n     * @type {Object<string, import(\"./render/ReplayGroup.js\").default>}\n     */\n\n    this.replayGroups_ = {};\n    /**\n     * @private\n     * @type {import(\"./Tile.js\").LoadFunction}\n     */\n\n    this.tileLoadFunction_ = tileLoadFunction;\n    /**\n     * @private\n     * @type {string}\n     */\n\n    this.url_ = src;\n  }\n\n  if (Tile) VectorTile.__proto__ = Tile;\n  VectorTile.prototype = Object.create(Tile && Tile.prototype);\n  VectorTile.prototype.constructor = VectorTile;\n  /**\n   * @inheritDoc\n   */\n\n  VectorTile.prototype.disposeInternal = function disposeInternal() {\n    this.features_ = null;\n    this.replayGroups_ = {};\n    this.state = TileState.ABORT;\n    this.changed();\n    Tile.prototype.disposeInternal.call(this);\n  };\n  /**\n   * Gets the extent of the vector tile.\n   * @return {import(\"./extent.js\").Extent} The extent.\n   * @api\n   */\n\n\n  VectorTile.prototype.getExtent = function getExtent() {\n    return this.extent_ || DEFAULT_EXTENT;\n  };\n  /**\n   * Get the feature format assigned for reading this tile's features.\n   * @return {import(\"./format/Feature.js\").default} Feature format.\n   * @api\n   */\n\n\n  VectorTile.prototype.getFormat = function getFormat() {\n    return this.format_;\n  };\n  /**\n   * Get the features for this tile. Geometries will be in the projection returned\n   * by {@link module:ol/VectorTile~VectorTile#getProjection}.\n   * @return {Array<import(\"./Feature.js\").FeatureLike>} Features.\n   * @api\n   */\n\n\n  VectorTile.prototype.getFeatures = function getFeatures() {\n    return this.features_;\n  };\n  /**\n   * @inheritDoc\n   */\n\n\n  VectorTile.prototype.getKey = function getKey() {\n    return this.url_;\n  };\n  /**\n   * Get the feature projection of features returned by\n   * {@link module:ol/VectorTile~VectorTile#getFeatures}.\n   * @return {import(\"./proj/Projection.js\").default} Feature projection.\n   * @api\n   */\n\n\n  VectorTile.prototype.getProjection = function getProjection() {\n    return this.projection_;\n  };\n  /**\n   * @param {import(\"./layer/Layer.js\").default} layer Layer.\n   * @param {string} key Key.\n   * @return {import(\"./render/ReplayGroup.js\").default} Replay group.\n   */\n\n\n  VectorTile.prototype.getReplayGroup = function getReplayGroup(layer, key) {\n    return this.replayGroups_[getUid(layer) + ',' + key];\n  };\n  /**\n   * @inheritDoc\n   */\n\n\n  VectorTile.prototype.load = function load() {\n    if (this.state == TileState.IDLE) {\n      this.setState(TileState.LOADING);\n      this.tileLoadFunction_(this, this.url_);\n      this.loader_(null, NaN, null);\n    }\n  };\n  /**\n   * Handler for successful tile load.\n   * @param {Array<import(\"./Feature.js\").default>} features The loaded features.\n   * @param {import(\"./proj/Projection.js\").default} dataProjection Data projection.\n   * @param {import(\"./extent.js\").Extent} extent Extent.\n   */\n\n\n  VectorTile.prototype.onLoad = function onLoad(features, dataProjection, extent) {\n    this.setProjection(dataProjection);\n    this.setFeatures(features);\n    this.setExtent(extent);\n  };\n  /**\n   * Handler for tile load errors.\n   */\n\n\n  VectorTile.prototype.onError = function onError() {\n    this.setState(TileState.ERROR);\n  };\n  /**\n   * Function for use in an {@link module:ol/source/VectorTile~VectorTile}'s\n   * `tileLoadFunction`. Sets the extent of the vector tile. This is only required\n   * for tiles in projections with `tile-pixels` as units. The extent should be\n   * set to `[0, 0, tilePixelSize, tilePixelSize]`, where `tilePixelSize` is\n   * calculated by multiplying the tile size with the tile pixel ratio. For\n   * sources using {@link module:ol/format/MVT~MVT} as feature format, the\n   * {@link module:ol/format/MVT~MVT#getLastExtent} method will return the correct\n   * extent. The default is `[0, 0, 4096, 4096]`.\n   * @param {import(\"./extent.js\").Extent} extent The extent.\n   * @api\n   */\n\n\n  VectorTile.prototype.setExtent = function setExtent(extent) {\n    this.extent_ = extent;\n  };\n  /**\n   * Function for use in an {@link module:ol/source/VectorTile~VectorTile}'s `tileLoadFunction`.\n   * Sets the features for the tile.\n   * @param {Array<import(\"./Feature.js\").default>} features Features.\n   * @api\n   */\n\n\n  VectorTile.prototype.setFeatures = function setFeatures(features) {\n    this.features_ = features;\n    this.setState(TileState.LOADED);\n  };\n  /**\n   * Function for use in an {@link module:ol/source/VectorTile~VectorTile}'s `tileLoadFunction`.\n   * Sets the projection of the features that were added with\n   * {@link module:ol/VectorTile~VectorTile#setFeatures}.\n   * @param {import(\"./proj/Projection.js\").default} projection Feature projection.\n   * @api\n   */\n\n\n  VectorTile.prototype.setProjection = function setProjection(projection) {\n    this.projection_ = projection;\n  };\n  /**\n   * @param {import(\"./layer/Layer.js\").default} layer Layer.\n   * @param {string} key Key.\n   * @param {import(\"./render/ReplayGroup.js\").default} replayGroup Replay group.\n   */\n\n\n  VectorTile.prototype.setReplayGroup = function setReplayGroup(layer, key, replayGroup) {\n    this.replayGroups_[getUid(layer) + ',' + key] = replayGroup;\n  };\n  /**\n   * Set the feature loader for reading this tile's features.\n   * @param {import(\"./featureloader.js\").FeatureLoader} loader Feature loader.\n   * @api\n   */\n\n\n  VectorTile.prototype.setLoader = function setLoader(loader) {\n    this.loader_ = loader;\n  };\n\n  return VectorTile;\n}(Tile);\n\nexport default VectorTile;","map":{"version":3,"sources":["../../src/ol/VectorTile.js"],"names":["const","super"],"mappings":"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","sourcesContent":["/**\n * @module ol/VectorTile\n */\nimport {getUid} from './util.js';\nimport Tile from './Tile.js';\nimport TileState from './TileState.js';\n\n/**\n * @const\n * @type {import(\"./extent.js\").Extent}\n */\nconst DEFAULT_EXTENT = [0, 0, 4096, 4096];\n\n\nclass VectorTile extends Tile {\n\n  /**\n   * @param {import(\"./tilecoord.js\").TileCoord} tileCoord Tile coordinate.\n   * @param {TileState} state State.\n   * @param {string} src Data source url.\n   * @param {import(\"./format/Feature.js\").default} format Feature format.\n   * @param {import(\"./Tile.js\").LoadFunction} tileLoadFunction Tile load function.\n   * @param {import(\"./Tile.js\").Options=} opt_options Tile options.\n   */\n  constructor(tileCoord, state, src, format, tileLoadFunction, opt_options) {\n\n    super(tileCoord, state, opt_options);\n\n    /**\n     * @type {number}\n     */\n    this.consumers = 0;\n\n    /**\n     * @private\n     * @type {import(\"./extent.js\").Extent}\n     */\n    this.extent_ = null;\n\n    /**\n     * @private\n     * @type {import(\"./format/Feature.js\").default}\n     */\n    this.format_ = format;\n\n    /**\n     * @private\n     * @type {Array<import(\"./Feature.js\").default>}\n     */\n    this.features_ = null;\n\n    /**\n     * @private\n     * @type {import(\"./featureloader.js\").FeatureLoader}\n     */\n    this.loader_;\n\n    /**\n     * Data projection\n     * @private\n     * @type {import(\"./proj/Projection.js\").default}\n     */\n    this.projection_ = null;\n\n    /**\n     * @private\n     * @type {Object<string, import(\"./render/ReplayGroup.js\").default>}\n     */\n    this.replayGroups_ = {};\n\n    /**\n     * @private\n     * @type {import(\"./Tile.js\").LoadFunction}\n     */\n    this.tileLoadFunction_ = tileLoadFunction;\n\n    /**\n     * @private\n     * @type {string}\n     */\n    this.url_ = src;\n\n  }\n\n  /**\n   * @inheritDoc\n   */\n  disposeInternal() {\n    this.features_ = null;\n    this.replayGroups_ = {};\n    this.state = TileState.ABORT;\n    this.changed();\n    super.disposeInternal();\n  }\n\n  /**\n   * Gets the extent of the vector tile.\n   * @return {import(\"./extent.js\").Extent} The extent.\n   * @api\n   */\n  getExtent() {\n    return this.extent_ || DEFAULT_EXTENT;\n  }\n\n  /**\n   * Get the feature format assigned for reading this tile's features.\n   * @return {import(\"./format/Feature.js\").default} Feature format.\n   * @api\n   */\n  getFormat() {\n    return this.format_;\n  }\n\n  /**\n   * Get the features for this tile. Geometries will be in the projection returned\n   * by {@link module:ol/VectorTile~VectorTile#getProjection}.\n   * @return {Array<import(\"./Feature.js\").FeatureLike>} Features.\n   * @api\n   */\n  getFeatures() {\n    return this.features_;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  getKey() {\n    return this.url_;\n  }\n\n  /**\n   * Get the feature projection of features returned by\n   * {@link module:ol/VectorTile~VectorTile#getFeatures}.\n   * @return {import(\"./proj/Projection.js\").default} Feature projection.\n   * @api\n   */\n  getProjection() {\n    return this.projection_;\n  }\n\n  /**\n   * @param {import(\"./layer/Layer.js\").default} layer Layer.\n   * @param {string} key Key.\n   * @return {import(\"./render/ReplayGroup.js\").default} Replay group.\n   */\n  getReplayGroup(layer, key) {\n    return this.replayGroups_[getUid(layer) + ',' + key];\n  }\n\n  /**\n   * @inheritDoc\n   */\n  load() {\n    if (this.state == TileState.IDLE) {\n      this.setState(TileState.LOADING);\n      this.tileLoadFunction_(this, this.url_);\n      this.loader_(null, NaN, null);\n    }\n  }\n\n  /**\n   * Handler for successful tile load.\n   * @param {Array<import(\"./Feature.js\").default>} features The loaded features.\n   * @param {import(\"./proj/Projection.js\").default} dataProjection Data projection.\n   * @param {import(\"./extent.js\").Extent} extent Extent.\n   */\n  onLoad(features, dataProjection, extent) {\n    this.setProjection(dataProjection);\n    this.setFeatures(features);\n    this.setExtent(extent);\n  }\n\n  /**\n   * Handler for tile load errors.\n   */\n  onError() {\n    this.setState(TileState.ERROR);\n  }\n\n  /**\n   * Function for use in an {@link module:ol/source/VectorTile~VectorTile}'s\n   * `tileLoadFunction`. Sets the extent of the vector tile. This is only required\n   * for tiles in projections with `tile-pixels` as units. The extent should be\n   * set to `[0, 0, tilePixelSize, tilePixelSize]`, where `tilePixelSize` is\n   * calculated by multiplying the tile size with the tile pixel ratio. For\n   * sources using {@link module:ol/format/MVT~MVT} as feature format, the\n   * {@link module:ol/format/MVT~MVT#getLastExtent} method will return the correct\n   * extent. The default is `[0, 0, 4096, 4096]`.\n   * @param {import(\"./extent.js\").Extent} extent The extent.\n   * @api\n   */\n  setExtent(extent) {\n    this.extent_ = extent;\n  }\n\n  /**\n   * Function for use in an {@link module:ol/source/VectorTile~VectorTile}'s `tileLoadFunction`.\n   * Sets the features for the tile.\n   * @param {Array<import(\"./Feature.js\").default>} features Features.\n   * @api\n   */\n  setFeatures(features) {\n    this.features_ = features;\n    this.setState(TileState.LOADED);\n  }\n\n  /**\n   * Function for use in an {@link module:ol/source/VectorTile~VectorTile}'s `tileLoadFunction`.\n   * Sets the projection of the features that were added with\n   * {@link module:ol/VectorTile~VectorTile#setFeatures}.\n   * @param {import(\"./proj/Projection.js\").default} projection Feature projection.\n   * @api\n   */\n  setProjection(projection) {\n    this.projection_ = projection;\n  }\n\n  /**\n   * @param {import(\"./layer/Layer.js\").default} layer Layer.\n   * @param {string} key Key.\n   * @param {import(\"./render/ReplayGroup.js\").default} replayGroup Replay group.\n   */\n  setReplayGroup(layer, key, replayGroup) {\n    this.replayGroups_[getUid(layer) + ',' + key] = replayGroup;\n  }\n\n  /**\n   * Set the feature loader for reading this tile's features.\n   * @param {import(\"./featureloader.js\").FeatureLoader} loader Feature loader.\n   * @api\n   */\n  setLoader(loader) {\n    this.loader_ = loader;\n  }\n}\n\nexport default VectorTile;\n"]},"metadata":{},"sourceType":"module"}