{"ast":null,"code":"/**\n * @module ol/interaction/Interaction\n */\nimport BaseObject from '../Object.js';\nimport { easeOut, linear } from '../easing.js';\nimport InteractionProperty from './Property.js';\nimport { clamp } from '../math.js';\n/**\n * Object literal with config options for interactions.\n * @typedef {Object} InteractionOptions\n * @property {function(import(\"../MapBrowserEvent.js\").default):boolean} handleEvent\n * Method called by the map to notify the interaction that a browser event was\n * dispatched to the map. If the function returns a falsy value, propagation of\n * the event to other interactions in the map's interactions chain will be\n * prevented (this includes functions with no explicit return).\n */\n\n/**\n * @classdesc\n * Abstract base class; normally only used for creating subclasses and not\n * instantiated in apps.\n * User actions that change the state of the map. Some are similar to controls,\n * but are not associated with a DOM element.\n * For example, {@link module:ol/interaction/KeyboardZoom~KeyboardZoom} is\n * functionally the same as {@link module:ol/control/Zoom~Zoom}, but triggered\n * by a keyboard event not a button element event.\n * Although interactions do not have a DOM element, some of them do render\n * vectors and so are visible on the screen.\n * @api\n */\n\nvar Interaction =\n/*@__PURE__*/\nfunction (BaseObject) {\n  function Interaction(options) {\n    BaseObject.call(this);\n\n    if (options.handleEvent) {\n      this.handleEvent = options.handleEvent;\n    }\n    /**\n     * @private\n     * @type {import(\"../PluggableMap.js\").default}\n     */\n\n\n    this.map_ = null;\n    this.setActive(true);\n  }\n\n  if (BaseObject) Interaction.__proto__ = BaseObject;\n  Interaction.prototype = Object.create(BaseObject && BaseObject.prototype);\n  Interaction.prototype.constructor = Interaction;\n  /**\n   * Return whether the interaction is currently active.\n   * @return {boolean} `true` if the interaction is active, `false` otherwise.\n   * @observable\n   * @api\n   */\n\n  Interaction.prototype.getActive = function getActive() {\n    return (\n      /** @type {boolean} */\n      this.get(InteractionProperty.ACTIVE)\n    );\n  };\n  /**\n   * Get the map associated with this interaction.\n   * @return {import(\"../PluggableMap.js\").default} Map.\n   * @api\n   */\n\n\n  Interaction.prototype.getMap = function getMap() {\n    return this.map_;\n  };\n  /**\n   * Handles the {@link module:ol/MapBrowserEvent map browser event}.\n   * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Map browser event.\n   * @return {boolean} `false` to stop event propagation.\n   * @api\n   */\n\n\n  Interaction.prototype.handleEvent = function handleEvent(mapBrowserEvent) {\n    return true;\n  };\n  /**\n   * Activate or deactivate the interaction.\n   * @param {boolean} active Active.\n   * @observable\n   * @api\n   */\n\n\n  Interaction.prototype.setActive = function setActive(active) {\n    this.set(InteractionProperty.ACTIVE, active);\n  };\n  /**\n   * Remove the interaction from its current map and attach it to the new map.\n   * Subclasses may set up event handlers to get notified about changes to\n   * the map here.\n   * @param {import(\"../PluggableMap.js\").default} map Map.\n   */\n\n\n  Interaction.prototype.setMap = function setMap(map) {\n    this.map_ = map;\n  };\n\n  return Interaction;\n}(BaseObject);\n/**\n * @param {import(\"../View.js\").default} view View.\n * @param {import(\"../coordinate.js\").Coordinate} delta Delta.\n * @param {number=} opt_duration Duration.\n */\n\n\nexport function pan(view, delta, opt_duration) {\n  var currentCenter = view.getCenter();\n\n  if (currentCenter) {\n    var center = view.constrainCenter([currentCenter[0] + delta[0], currentCenter[1] + delta[1]]);\n\n    if (opt_duration) {\n      view.animate({\n        duration: opt_duration,\n        easing: linear,\n        center: center\n      });\n    } else {\n      view.setCenter(center);\n    }\n  }\n}\n/**\n * @param {import(\"../View.js\").default} view View.\n * @param {number|undefined} rotation Rotation.\n * @param {import(\"../coordinate.js\").Coordinate=} opt_anchor Anchor coordinate.\n * @param {number=} opt_duration Duration.\n */\n\nexport function rotate(view, rotation, opt_anchor, opt_duration) {\n  rotation = view.constrainRotation(rotation, 0);\n  rotateWithoutConstraints(view, rotation, opt_anchor, opt_duration);\n}\n/**\n * @param {import(\"../View.js\").default} view View.\n * @param {number|undefined} rotation Rotation.\n * @param {import(\"../coordinate.js\").Coordinate=} opt_anchor Anchor coordinate.\n * @param {number=} opt_duration Duration.\n */\n\nexport function rotateWithoutConstraints(view, rotation, opt_anchor, opt_duration) {\n  if (rotation !== undefined) {\n    var currentRotation = view.getRotation();\n    var currentCenter = view.getCenter();\n\n    if (currentRotation !== undefined && currentCenter && opt_duration > 0) {\n      view.animate({\n        rotation: rotation,\n        anchor: opt_anchor,\n        duration: opt_duration,\n        easing: easeOut\n      });\n    } else {\n      view.rotate(rotation, opt_anchor);\n    }\n  }\n}\n/**\n * @param {import(\"../View.js\").default} view View.\n * @param {number|undefined} resolution Resolution to go to.\n * @param {import(\"../coordinate.js\").Coordinate=} opt_anchor Anchor coordinate.\n * @param {number=} opt_duration Duration.\n * @param {number=} opt_direction Zooming direction; > 0 indicates\n *     zooming out, in which case the constraints system will select\n *     the largest nearest resolution; < 0 indicates zooming in, in\n *     which case the constraints system will select the smallest\n *     nearest resolution; == 0 indicates that the zooming direction\n *     is unknown/not relevant, in which case the constraints system\n *     will select the nearest resolution. If not defined 0 is\n *     assumed.\n */\n\nexport function zoom(view, resolution, opt_anchor, opt_duration, opt_direction) {\n  resolution = view.constrainResolution(resolution, 0, opt_direction);\n  zoomWithoutConstraints(view, resolution, opt_anchor, opt_duration);\n}\n/**\n * @param {import(\"../View.js\").default} view View.\n * @param {number} delta Delta from previous zoom level.\n * @param {import(\"../coordinate.js\").Coordinate=} opt_anchor Anchor coordinate.\n * @param {number=} opt_duration Duration.\n */\n\nexport function zoomByDelta(view, delta, opt_anchor, opt_duration) {\n  var currentResolution = view.getResolution();\n  var resolution = view.constrainResolution(currentResolution, delta, 0);\n\n  if (resolution !== undefined) {\n    var resolutions = view.getResolutions();\n    resolution = clamp(resolution, view.getMinResolution() || resolutions[resolutions.length - 1], view.getMaxResolution() || resolutions[0]);\n  } // If we have a constraint on center, we need to change the anchor so that the\n  // new center is within the extent. We first calculate the new center, apply\n  // the constraint to it, and then calculate back the anchor\n\n\n  if (opt_anchor && resolution !== undefined && resolution !== currentResolution) {\n    var currentCenter = view.getCenter();\n    var center = view.calculateCenterZoom(resolution, opt_anchor);\n    center = view.constrainCenter(center);\n    opt_anchor = [(resolution * currentCenter[0] - currentResolution * center[0]) / (resolution - currentResolution), (resolution * currentCenter[1] - currentResolution * center[1]) / (resolution - currentResolution)];\n  }\n\n  zoomWithoutConstraints(view, resolution, opt_anchor, opt_duration);\n}\n/**\n * @param {import(\"../View.js\").default} view View.\n * @param {number|undefined} resolution Resolution to go to.\n * @param {import(\"../coordinate.js\").Coordinate=} opt_anchor Anchor coordinate.\n * @param {number=} opt_duration Duration.\n */\n\nexport function zoomWithoutConstraints(view, resolution, opt_anchor, opt_duration) {\n  if (resolution) {\n    var currentResolution = view.getResolution();\n    var currentCenter = view.getCenter();\n\n    if (currentResolution !== undefined && currentCenter && resolution !== currentResolution && opt_duration) {\n      view.animate({\n        resolution: resolution,\n        anchor: opt_anchor,\n        duration: opt_duration,\n        easing: easeOut\n      });\n    } else {\n      if (opt_anchor) {\n        var center = view.calculateCenterZoom(resolution, opt_anchor);\n        view.setCenter(center);\n      }\n\n      view.setResolution(resolution);\n    }\n  }\n}\nexport default Interaction;","map":{"version":3,"sources":["../../../src/ol/interaction/Interaction.js"],"names":["super","const","let"],"mappings":"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","sourcesContent":["/**\n * @module ol/interaction/Interaction\n */\nimport BaseObject from '../Object.js';\nimport {easeOut, linear} from '../easing.js';\nimport InteractionProperty from './Property.js';\nimport {clamp} from '../math.js';\n\n\n/**\n * Object literal with config options for interactions.\n * @typedef {Object} InteractionOptions\n * @property {function(import(\"../MapBrowserEvent.js\").default):boolean} handleEvent\n * Method called by the map to notify the interaction that a browser event was\n * dispatched to the map. If the function returns a falsy value, propagation of\n * the event to other interactions in the map's interactions chain will be\n * prevented (this includes functions with no explicit return).\n */\n\n\n/**\n * @classdesc\n * Abstract base class; normally only used for creating subclasses and not\n * instantiated in apps.\n * User actions that change the state of the map. Some are similar to controls,\n * but are not associated with a DOM element.\n * For example, {@link module:ol/interaction/KeyboardZoom~KeyboardZoom} is\n * functionally the same as {@link module:ol/control/Zoom~Zoom}, but triggered\n * by a keyboard event not a button element event.\n * Although interactions do not have a DOM element, some of them do render\n * vectors and so are visible on the screen.\n * @api\n */\nclass Interaction extends BaseObject {\n  /**\n   * @param {InteractionOptions} options Options.\n   */\n  constructor(options) {\n    super();\n\n    if (options.handleEvent) {\n      this.handleEvent = options.handleEvent;\n    }\n\n    /**\n     * @private\n     * @type {import(\"../PluggableMap.js\").default}\n     */\n    this.map_ = null;\n\n    this.setActive(true);\n  }\n\n  /**\n   * Return whether the interaction is currently active.\n   * @return {boolean} `true` if the interaction is active, `false` otherwise.\n   * @observable\n   * @api\n   */\n  getActive() {\n    return /** @type {boolean} */ (this.get(InteractionProperty.ACTIVE));\n  }\n\n  /**\n   * Get the map associated with this interaction.\n   * @return {import(\"../PluggableMap.js\").default} Map.\n   * @api\n   */\n  getMap() {\n    return this.map_;\n  }\n\n  /**\n   * Handles the {@link module:ol/MapBrowserEvent map browser event}.\n   * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Map browser event.\n   * @return {boolean} `false` to stop event propagation.\n   * @api\n   */\n  handleEvent(mapBrowserEvent) {\n    return true;\n  }\n\n  /**\n   * Activate or deactivate the interaction.\n   * @param {boolean} active Active.\n   * @observable\n   * @api\n   */\n  setActive(active) {\n    this.set(InteractionProperty.ACTIVE, active);\n  }\n\n  /**\n   * Remove the interaction from its current map and attach it to the new map.\n   * Subclasses may set up event handlers to get notified about changes to\n   * the map here.\n   * @param {import(\"../PluggableMap.js\").default} map Map.\n   */\n  setMap(map) {\n    this.map_ = map;\n  }\n}\n\n\n/**\n * @param {import(\"../View.js\").default} view View.\n * @param {import(\"../coordinate.js\").Coordinate} delta Delta.\n * @param {number=} opt_duration Duration.\n */\nexport function pan(view, delta, opt_duration) {\n  const currentCenter = view.getCenter();\n  if (currentCenter) {\n    const center = view.constrainCenter(\n      [currentCenter[0] + delta[0], currentCenter[1] + delta[1]]);\n    if (opt_duration) {\n      view.animate({\n        duration: opt_duration,\n        easing: linear,\n        center: center\n      });\n    } else {\n      view.setCenter(center);\n    }\n  }\n}\n\n\n/**\n * @param {import(\"../View.js\").default} view View.\n * @param {number|undefined} rotation Rotation.\n * @param {import(\"../coordinate.js\").Coordinate=} opt_anchor Anchor coordinate.\n * @param {number=} opt_duration Duration.\n */\nexport function rotate(view, rotation, opt_anchor, opt_duration) {\n  rotation = view.constrainRotation(rotation, 0);\n  rotateWithoutConstraints(view, rotation, opt_anchor, opt_duration);\n}\n\n\n/**\n * @param {import(\"../View.js\").default} view View.\n * @param {number|undefined} rotation Rotation.\n * @param {import(\"../coordinate.js\").Coordinate=} opt_anchor Anchor coordinate.\n * @param {number=} opt_duration Duration.\n */\nexport function rotateWithoutConstraints(view, rotation, opt_anchor, opt_duration) {\n  if (rotation !== undefined) {\n    const currentRotation = view.getRotation();\n    const currentCenter = view.getCenter();\n    if (currentRotation !== undefined && currentCenter && opt_duration > 0) {\n      view.animate({\n        rotation: rotation,\n        anchor: opt_anchor,\n        duration: opt_duration,\n        easing: easeOut\n      });\n    } else {\n      view.rotate(rotation, opt_anchor);\n    }\n  }\n}\n\n\n/**\n * @param {import(\"../View.js\").default} view View.\n * @param {number|undefined} resolution Resolution to go to.\n * @param {import(\"../coordinate.js\").Coordinate=} opt_anchor Anchor coordinate.\n * @param {number=} opt_duration Duration.\n * @param {number=} opt_direction Zooming direction; > 0 indicates\n *     zooming out, in which case the constraints system will select\n *     the largest nearest resolution; < 0 indicates zooming in, in\n *     which case the constraints system will select the smallest\n *     nearest resolution; == 0 indicates that the zooming direction\n *     is unknown/not relevant, in which case the constraints system\n *     will select the nearest resolution. If not defined 0 is\n *     assumed.\n */\nexport function zoom(view, resolution, opt_anchor, opt_duration, opt_direction) {\n  resolution = view.constrainResolution(resolution, 0, opt_direction);\n  zoomWithoutConstraints(view, resolution, opt_anchor, opt_duration);\n}\n\n\n/**\n * @param {import(\"../View.js\").default} view View.\n * @param {number} delta Delta from previous zoom level.\n * @param {import(\"../coordinate.js\").Coordinate=} opt_anchor Anchor coordinate.\n * @param {number=} opt_duration Duration.\n */\nexport function zoomByDelta(view, delta, opt_anchor, opt_duration) {\n  const currentResolution = view.getResolution();\n  let resolution = view.constrainResolution(currentResolution, delta, 0);\n\n  if (resolution !== undefined) {\n    const resolutions = view.getResolutions();\n    resolution = clamp(\n      resolution,\n      view.getMinResolution() || resolutions[resolutions.length - 1],\n      view.getMaxResolution() || resolutions[0]);\n  }\n\n  // If we have a constraint on center, we need to change the anchor so that the\n  // new center is within the extent. We first calculate the new center, apply\n  // the constraint to it, and then calculate back the anchor\n  if (opt_anchor && resolution !== undefined && resolution !== currentResolution) {\n    const currentCenter = view.getCenter();\n    let center = view.calculateCenterZoom(resolution, opt_anchor);\n    center = view.constrainCenter(center);\n\n    opt_anchor = [\n      (resolution * currentCenter[0] - currentResolution * center[0]) /\n          (resolution - currentResolution),\n      (resolution * currentCenter[1] - currentResolution * center[1]) /\n          (resolution - currentResolution)\n    ];\n  }\n\n  zoomWithoutConstraints(view, resolution, opt_anchor, opt_duration);\n}\n\n\n/**\n * @param {import(\"../View.js\").default} view View.\n * @param {number|undefined} resolution Resolution to go to.\n * @param {import(\"../coordinate.js\").Coordinate=} opt_anchor Anchor coordinate.\n * @param {number=} opt_duration Duration.\n */\nexport function zoomWithoutConstraints(view, resolution, opt_anchor, opt_duration) {\n  if (resolution) {\n    const currentResolution = view.getResolution();\n    const currentCenter = view.getCenter();\n    if (currentResolution !== undefined && currentCenter &&\n        resolution !== currentResolution && opt_duration) {\n      view.animate({\n        resolution: resolution,\n        anchor: opt_anchor,\n        duration: opt_duration,\n        easing: easeOut\n      });\n    } else {\n      if (opt_anchor) {\n        const center = view.calculateCenterZoom(resolution, opt_anchor);\n        view.setCenter(center);\n      }\n      view.setResolution(resolution);\n    }\n  }\n}\n\nexport default Interaction;\n"]},"metadata":{},"sourceType":"module"}