{"ast":null,"code":"/**\n * ag-grid-community - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components\n * @version v21.2.2\n * @link http://www.ag-grid.com/\n * @license MIT\n */\n\"use strict\";\n\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nvar __metadata = this && this.__metadata || function (k, v) {\n  if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar context_1 = require(\"./context/context\");\n\nvar constants_1 = require(\"./constants\");\n\nvar columnController_1 = require(\"./columnController/columnController\");\n\nvar gridOptionsWrapper_1 = require(\"./gridOptionsWrapper\");\n\nvar pinnedRowModel_1 = require(\"./rowModels/pinnedRowModel\");\n\nvar utils_1 = require(\"./utils\");\n\nvar CellNavigationService =\n/** @class */\nfunction () {\n  function CellNavigationService() {} // returns null if no cell to focus on, ie at the end of the grid\n\n\n  CellNavigationService.prototype.getNextCellToFocus = function (key, lastCellToFocus) {\n    // starting with the provided cell, we keep moving until we find a cell we can\n    // focus on.\n    var pointer = lastCellToFocus;\n    var finished = false; // finished will be true when either:\n    // a) cell found that we can focus on\n    // b) run out of cells (ie the method returns null)\n\n    while (!finished) {\n      switch (key) {\n        case constants_1.Constants.KEY_UP:\n          pointer = this.getCellAbove(pointer);\n          break;\n\n        case constants_1.Constants.KEY_DOWN:\n          pointer = this.getCellBelow(pointer);\n          break;\n\n        case constants_1.Constants.KEY_RIGHT:\n          if (this.gridOptionsWrapper.isEnableRtl()) {\n            pointer = this.getCellToLeft(pointer);\n          } else {\n            pointer = this.getCellToRight(pointer);\n          }\n\n          break;\n\n        case constants_1.Constants.KEY_LEFT:\n          if (this.gridOptionsWrapper.isEnableRtl()) {\n            pointer = this.getCellToRight(pointer);\n          } else {\n            pointer = this.getCellToLeft(pointer);\n          }\n\n          break;\n\n        default:\n          pointer = null;\n          console.warn('ag-Grid: unknown key for navigation ' + key);\n          break;\n      }\n\n      if (pointer) {\n        finished = this.isCellGoodToFocusOn(pointer);\n      } else {\n        finished = true;\n      }\n    }\n\n    return pointer;\n  };\n\n  CellNavigationService.prototype.isCellGoodToFocusOn = function (gridCell) {\n    var column = gridCell.column;\n    var rowNode;\n\n    switch (gridCell.rowPinned) {\n      case constants_1.Constants.PINNED_TOP:\n        rowNode = this.pinnedRowModel.getPinnedTopRow(gridCell.rowIndex);\n        break;\n\n      case constants_1.Constants.PINNED_BOTTOM:\n        rowNode = this.pinnedRowModel.getPinnedBottomRow(gridCell.rowIndex);\n        break;\n\n      default:\n        rowNode = this.rowModel.getRow(gridCell.rowIndex);\n        break;\n    }\n\n    var suppressNavigable = column.isSuppressNavigable(rowNode);\n    return !suppressNavigable;\n  };\n\n  CellNavigationService.prototype.getCellToLeft = function (lastCell) {\n    if (!lastCell) {\n      return null;\n    }\n\n    var colToLeft = this.columnController.getDisplayedColBefore(lastCell.column);\n\n    if (!colToLeft) {\n      return null;\n    }\n\n    return {\n      rowIndex: lastCell.rowIndex,\n      column: colToLeft,\n      rowPinned: lastCell.rowPinned\n    };\n  };\n\n  CellNavigationService.prototype.getCellToRight = function (lastCell) {\n    if (!lastCell) {\n      return null;\n    }\n\n    var colToRight = this.columnController.getDisplayedColAfter(lastCell.column); // if already on right, do nothing\n\n    if (!colToRight) {\n      return null;\n    }\n\n    return {\n      rowIndex: lastCell.rowIndex,\n      column: colToRight,\n      rowPinned: lastCell.rowPinned\n    };\n  };\n\n  CellNavigationService.prototype.getRowBelow = function (rowPosition) {\n    // if already on top row, do nothing\n    var index = rowPosition.rowIndex;\n    var pinned = rowPosition.rowPinned;\n\n    if (this.isLastRowInContainer(rowPosition)) {\n      switch (pinned) {\n        case constants_1.Constants.PINNED_BOTTOM:\n          // never any rows after pinned bottom\n          return null;\n\n        case constants_1.Constants.PINNED_TOP:\n          // if on last row of pinned top, then next row is main body (if rows exist),\n          // otherwise it's the pinned bottom\n          if (this.rowModel.isRowsToRender()) {\n            return {\n              rowIndex: 0,\n              rowPinned: null\n            };\n          } else if (this.pinnedRowModel.isRowsToRender(constants_1.Constants.PINNED_BOTTOM)) {\n            return {\n              rowIndex: 0,\n              rowPinned: constants_1.Constants.PINNED_BOTTOM\n            };\n          }\n\n          return null;\n\n        default:\n          // if in the main body, then try pinned bottom, otherwise return nothing\n          if (this.pinnedRowModel.isRowsToRender(constants_1.Constants.PINNED_BOTTOM)) {\n            return {\n              rowIndex: 0,\n              rowPinned: constants_1.Constants.PINNED_BOTTOM\n            };\n          }\n\n          return null;\n      }\n    }\n\n    return {\n      rowIndex: index + 1,\n      rowPinned: pinned\n    };\n  };\n\n  CellNavigationService.prototype.getCellBelow = function (lastCell) {\n    if (!lastCell) {\n      return null;\n    }\n\n    var rowBelow = this.getRowBelow(lastCell);\n\n    if (rowBelow) {\n      return {\n        rowIndex: rowBelow.rowIndex,\n        column: lastCell.column,\n        rowPinned: rowBelow.rowPinned\n      };\n    }\n\n    return null;\n  };\n\n  CellNavigationService.prototype.isLastRowInContainer = function (rowPosition) {\n    var pinned = rowPosition.rowPinned;\n    var index = rowPosition.rowIndex;\n\n    if (pinned === constants_1.Constants.PINNED_TOP) {\n      var lastTopIndex = this.pinnedRowModel.getPinnedTopRowData().length - 1;\n      return lastTopIndex <= index;\n    } else if (pinned === constants_1.Constants.PINNED_BOTTOM) {\n      var lastBottomIndex = this.pinnedRowModel.getPinnedBottomRowData().length - 1;\n      return lastBottomIndex <= index;\n    }\n\n    var lastBodyIndex = this.rowModel.getRowCount() - 1;\n    return lastBodyIndex <= index;\n  };\n\n  CellNavigationService.prototype.getRowAbove = function (rowPosition) {\n    // if already on top row, do nothing\n    var index = rowPosition.rowIndex;\n    var pinned = rowPosition.rowPinned; // if already on top row, do nothing\n\n    if (index === 0) {\n      if (pinned === constants_1.Constants.PINNED_TOP) {\n        return null;\n      } else if (!pinned) {\n        if (this.pinnedRowModel.isRowsToRender(constants_1.Constants.PINNED_TOP)) {\n          return this.getLastFloatingTopRow();\n        }\n\n        return null;\n      } else {\n        // last floating bottom\n        if (this.rowModel.isRowsToRender()) {\n          return this.getLastBodyCell();\n        } else if (this.pinnedRowModel.isRowsToRender(constants_1.Constants.PINNED_TOP)) {\n          return this.getLastFloatingTopRow();\n        }\n\n        return null;\n      }\n    }\n\n    return {\n      rowIndex: index - 1,\n      rowPinned: pinned\n    };\n  };\n\n  CellNavigationService.prototype.getCellAbove = function (lastCell) {\n    if (!lastCell) {\n      return null;\n    }\n\n    var rowAbove = this.getRowAbove({\n      rowIndex: lastCell.rowIndex,\n      rowPinned: lastCell.rowPinned\n    });\n\n    if (rowAbove) {\n      return {\n        rowIndex: rowAbove.rowIndex,\n        column: lastCell.column,\n        rowPinned: rowAbove.rowPinned\n      };\n    }\n\n    return null;\n  };\n\n  CellNavigationService.prototype.getLastBodyCell = function () {\n    var lastBodyRow = this.rowModel.getRowCount() - 1;\n    return {\n      rowIndex: lastBodyRow,\n      rowPinned: null\n    };\n  };\n\n  CellNavigationService.prototype.getLastFloatingTopRow = function () {\n    var lastFloatingRow = this.pinnedRowModel.getPinnedTopRowData().length - 1;\n    return {\n      rowIndex: lastFloatingRow,\n      rowPinned: constants_1.Constants.PINNED_TOP\n    };\n  };\n\n  CellNavigationService.prototype.getNextTabbedCell = function (gridCell, backwards) {\n    if (backwards) {\n      return this.getNextTabbedCellBackwards(gridCell);\n    }\n\n    return this.getNextTabbedCellForwards(gridCell);\n  };\n\n  CellNavigationService.prototype.getNextTabbedCellForwards = function (gridCell) {\n    var displayedColumns = this.columnController.getAllDisplayedColumns();\n    var newRowIndex = gridCell.rowIndex;\n    var newFloating = gridCell.rowPinned; // move along to the next cell\n\n    var newColumn = this.columnController.getDisplayedColAfter(gridCell.column); // check if end of the row, and if so, go forward a row\n\n    if (!newColumn) {\n      newColumn = displayedColumns[0];\n      var rowBelow = this.getRowBelow(gridCell);\n\n      if (utils_1._.missing(rowBelow)) {\n        return null;\n      }\n\n      newRowIndex = rowBelow ? rowBelow.rowIndex : null;\n      newFloating = rowBelow ? rowBelow.rowPinned : null;\n    }\n\n    return {\n      rowIndex: newRowIndex,\n      column: newColumn,\n      rowPinned: newFloating\n    };\n  };\n\n  CellNavigationService.prototype.getNextTabbedCellBackwards = function (gridCell) {\n    var displayedColumns = this.columnController.getAllDisplayedColumns();\n    var newRowIndex = gridCell.rowIndex;\n    var newFloating = gridCell.rowPinned; // move along to the next cell\n\n    var newColumn = this.columnController.getDisplayedColBefore(gridCell.column); // check if end of the row, and if so, go forward a row\n\n    if (!newColumn) {\n      newColumn = utils_1._.last(displayedColumns);\n      var rowAbove = this.getRowAbove({\n        rowIndex: gridCell.rowIndex,\n        rowPinned: gridCell.rowPinned\n      });\n\n      if (utils_1._.missing(rowAbove)) {\n        return null;\n      }\n\n      newRowIndex = rowAbove ? rowAbove.rowIndex : null;\n      newFloating = rowAbove ? rowAbove.rowPinned : null;\n    }\n\n    return {\n      rowIndex: newRowIndex,\n      column: newColumn,\n      rowPinned: newFloating\n    };\n  };\n\n  __decorate([context_1.Autowired('columnController'), __metadata(\"design:type\", columnController_1.ColumnController)], CellNavigationService.prototype, \"columnController\", void 0);\n\n  __decorate([context_1.Autowired('rowModel'), __metadata(\"design:type\", Object)], CellNavigationService.prototype, \"rowModel\", void 0);\n\n  __decorate([context_1.Autowired('pinnedRowModel'), __metadata(\"design:type\", pinnedRowModel_1.PinnedRowModel)], CellNavigationService.prototype, \"pinnedRowModel\", void 0);\n\n  __decorate([context_1.Autowired('gridOptionsWrapper'), __metadata(\"design:type\", gridOptionsWrapper_1.GridOptionsWrapper)], CellNavigationService.prototype, \"gridOptionsWrapper\", void 0);\n\n  CellNavigationService = __decorate([context_1.Bean('cellNavigationService')], CellNavigationService);\n  return CellNavigationService;\n}();\n\nexports.CellNavigationService = CellNavigationService;","map":{"version":3,"sources":["/Users/dirkmennecke77/Desktop/Lageplan/node_modules/ag-grid-community/dist/lib/cellNavigationService.js"],"names":["__decorate","decorators","target","key","desc","c","arguments","length","r","Object","getOwnPropertyDescriptor","d","Reflect","decorate","i","defineProperty","__metadata","k","v","metadata","exports","value","context_1","require","constants_1","columnController_1","gridOptionsWrapper_1","pinnedRowModel_1","utils_1","CellNavigationService","prototype","getNextCellToFocus","lastCellToFocus","pointer","finished","Constants","KEY_UP","getCellAbove","KEY_DOWN","getCellBelow","KEY_RIGHT","gridOptionsWrapper","isEnableRtl","getCellToLeft","getCellToRight","KEY_LEFT","console","warn","isCellGoodToFocusOn","gridCell","column","rowNode","rowPinned","PINNED_TOP","pinnedRowModel","getPinnedTopRow","rowIndex","PINNED_BOTTOM","getPinnedBottomRow","rowModel","getRow","suppressNavigable","isSuppressNavigable","lastCell","colToLeft","columnController","getDisplayedColBefore","colToRight","getDisplayedColAfter","getRowBelow","rowPosition","index","pinned","isLastRowInContainer","isRowsToRender","rowBelow","lastTopIndex","getPinnedTopRowData","lastBottomIndex","getPinnedBottomRowData","lastBodyIndex","getRowCount","getRowAbove","getLastFloatingTopRow","getLastBodyCell","rowAbove","lastBodyRow","lastFloatingRow","getNextTabbedCell","backwards","getNextTabbedCellBackwards","getNextTabbedCellForwards","displayedColumns","getAllDisplayedColumns","newRowIndex","newFloating","newColumn","_","missing","last","Autowired","ColumnController","PinnedRowModel","GridOptionsWrapper","Bean"],"mappings":"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","sourcesContent":["/**\n * ag-grid-community - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components\n * @version v21.2.2\n * @link http://www.ag-grid.com/\n * @license MIT\n */\n\"use strict\";\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __metadata = (this && this.__metadata) || function (k, v) {\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar context_1 = require(\"./context/context\");\nvar constants_1 = require(\"./constants\");\nvar columnController_1 = require(\"./columnController/columnController\");\nvar gridOptionsWrapper_1 = require(\"./gridOptionsWrapper\");\nvar pinnedRowModel_1 = require(\"./rowModels/pinnedRowModel\");\nvar utils_1 = require(\"./utils\");\nvar CellNavigationService = /** @class */ (function () {\n    function CellNavigationService() {\n    }\n    // returns null if no cell to focus on, ie at the end of the grid\n    CellNavigationService.prototype.getNextCellToFocus = function (key, lastCellToFocus) {\n        // starting with the provided cell, we keep moving until we find a cell we can\n        // focus on.\n        var pointer = lastCellToFocus;\n        var finished = false;\n        // finished will be true when either:\n        // a) cell found that we can focus on\n        // b) run out of cells (ie the method returns null)\n        while (!finished) {\n            switch (key) {\n                case constants_1.Constants.KEY_UP:\n                    pointer = this.getCellAbove(pointer);\n                    break;\n                case constants_1.Constants.KEY_DOWN:\n                    pointer = this.getCellBelow(pointer);\n                    break;\n                case constants_1.Constants.KEY_RIGHT:\n                    if (this.gridOptionsWrapper.isEnableRtl()) {\n                        pointer = this.getCellToLeft(pointer);\n                    }\n                    else {\n                        pointer = this.getCellToRight(pointer);\n                    }\n                    break;\n                case constants_1.Constants.KEY_LEFT:\n                    if (this.gridOptionsWrapper.isEnableRtl()) {\n                        pointer = this.getCellToRight(pointer);\n                    }\n                    else {\n                        pointer = this.getCellToLeft(pointer);\n                    }\n                    break;\n                default:\n                    pointer = null;\n                    console.warn('ag-Grid: unknown key for navigation ' + key);\n                    break;\n            }\n            if (pointer) {\n                finished = this.isCellGoodToFocusOn(pointer);\n            }\n            else {\n                finished = true;\n            }\n        }\n        return pointer;\n    };\n    CellNavigationService.prototype.isCellGoodToFocusOn = function (gridCell) {\n        var column = gridCell.column;\n        var rowNode;\n        switch (gridCell.rowPinned) {\n            case constants_1.Constants.PINNED_TOP:\n                rowNode = this.pinnedRowModel.getPinnedTopRow(gridCell.rowIndex);\n                break;\n            case constants_1.Constants.PINNED_BOTTOM:\n                rowNode = this.pinnedRowModel.getPinnedBottomRow(gridCell.rowIndex);\n                break;\n            default:\n                rowNode = this.rowModel.getRow(gridCell.rowIndex);\n                break;\n        }\n        var suppressNavigable = column.isSuppressNavigable(rowNode);\n        return !suppressNavigable;\n    };\n    CellNavigationService.prototype.getCellToLeft = function (lastCell) {\n        if (!lastCell) {\n            return null;\n        }\n        var colToLeft = this.columnController.getDisplayedColBefore(lastCell.column);\n        if (!colToLeft) {\n            return null;\n        }\n        return {\n            rowIndex: lastCell.rowIndex,\n            column: colToLeft,\n            rowPinned: lastCell.rowPinned\n        };\n    };\n    CellNavigationService.prototype.getCellToRight = function (lastCell) {\n        if (!lastCell) {\n            return null;\n        }\n        var colToRight = this.columnController.getDisplayedColAfter(lastCell.column);\n        // if already on right, do nothing\n        if (!colToRight) {\n            return null;\n        }\n        return {\n            rowIndex: lastCell.rowIndex,\n            column: colToRight,\n            rowPinned: lastCell.rowPinned\n        };\n    };\n    CellNavigationService.prototype.getRowBelow = function (rowPosition) {\n        // if already on top row, do nothing\n        var index = rowPosition.rowIndex;\n        var pinned = rowPosition.rowPinned;\n        if (this.isLastRowInContainer(rowPosition)) {\n            switch (pinned) {\n                case constants_1.Constants.PINNED_BOTTOM:\n                    // never any rows after pinned bottom\n                    return null;\n                case constants_1.Constants.PINNED_TOP:\n                    // if on last row of pinned top, then next row is main body (if rows exist),\n                    // otherwise it's the pinned bottom\n                    if (this.rowModel.isRowsToRender()) {\n                        return { rowIndex: 0, rowPinned: null };\n                    }\n                    else if (this.pinnedRowModel.isRowsToRender(constants_1.Constants.PINNED_BOTTOM)) {\n                        return { rowIndex: 0, rowPinned: constants_1.Constants.PINNED_BOTTOM };\n                    }\n                    return null;\n                default:\n                    // if in the main body, then try pinned bottom, otherwise return nothing\n                    if (this.pinnedRowModel.isRowsToRender(constants_1.Constants.PINNED_BOTTOM)) {\n                        return { rowIndex: 0, rowPinned: constants_1.Constants.PINNED_BOTTOM };\n                    }\n                    return null;\n            }\n        }\n        return { rowIndex: index + 1, rowPinned: pinned };\n    };\n    CellNavigationService.prototype.getCellBelow = function (lastCell) {\n        if (!lastCell) {\n            return null;\n        }\n        var rowBelow = this.getRowBelow(lastCell);\n        if (rowBelow) {\n            return {\n                rowIndex: rowBelow.rowIndex,\n                column: lastCell.column,\n                rowPinned: rowBelow.rowPinned\n            };\n        }\n        return null;\n    };\n    CellNavigationService.prototype.isLastRowInContainer = function (rowPosition) {\n        var pinned = rowPosition.rowPinned;\n        var index = rowPosition.rowIndex;\n        if (pinned === constants_1.Constants.PINNED_TOP) {\n            var lastTopIndex = this.pinnedRowModel.getPinnedTopRowData().length - 1;\n            return lastTopIndex <= index;\n        }\n        else if (pinned === constants_1.Constants.PINNED_BOTTOM) {\n            var lastBottomIndex = this.pinnedRowModel.getPinnedBottomRowData().length - 1;\n            return lastBottomIndex <= index;\n        }\n        var lastBodyIndex = this.rowModel.getRowCount() - 1;\n        return lastBodyIndex <= index;\n    };\n    CellNavigationService.prototype.getRowAbove = function (rowPosition) {\n        // if already on top row, do nothing\n        var index = rowPosition.rowIndex;\n        var pinned = rowPosition.rowPinned;\n        // if already on top row, do nothing\n        if (index === 0) {\n            if (pinned === constants_1.Constants.PINNED_TOP) {\n                return null;\n            }\n            else if (!pinned) {\n                if (this.pinnedRowModel.isRowsToRender(constants_1.Constants.PINNED_TOP)) {\n                    return this.getLastFloatingTopRow();\n                }\n                return null;\n            }\n            else {\n                // last floating bottom\n                if (this.rowModel.isRowsToRender()) {\n                    return this.getLastBodyCell();\n                }\n                else if (this.pinnedRowModel.isRowsToRender(constants_1.Constants.PINNED_TOP)) {\n                    return this.getLastFloatingTopRow();\n                }\n                return null;\n            }\n        }\n        return { rowIndex: index - 1, rowPinned: pinned };\n    };\n    CellNavigationService.prototype.getCellAbove = function (lastCell) {\n        if (!lastCell) {\n            return null;\n        }\n        var rowAbove = this.getRowAbove({ rowIndex: lastCell.rowIndex, rowPinned: lastCell.rowPinned });\n        if (rowAbove) {\n            return {\n                rowIndex: rowAbove.rowIndex,\n                column: lastCell.column,\n                rowPinned: rowAbove.rowPinned\n            };\n        }\n        return null;\n    };\n    CellNavigationService.prototype.getLastBodyCell = function () {\n        var lastBodyRow = this.rowModel.getRowCount() - 1;\n        return { rowIndex: lastBodyRow, rowPinned: null };\n    };\n    CellNavigationService.prototype.getLastFloatingTopRow = function () {\n        var lastFloatingRow = this.pinnedRowModel.getPinnedTopRowData().length - 1;\n        return { rowIndex: lastFloatingRow, rowPinned: constants_1.Constants.PINNED_TOP };\n    };\n    CellNavigationService.prototype.getNextTabbedCell = function (gridCell, backwards) {\n        if (backwards) {\n            return this.getNextTabbedCellBackwards(gridCell);\n        }\n        return this.getNextTabbedCellForwards(gridCell);\n    };\n    CellNavigationService.prototype.getNextTabbedCellForwards = function (gridCell) {\n        var displayedColumns = this.columnController.getAllDisplayedColumns();\n        var newRowIndex = gridCell.rowIndex;\n        var newFloating = gridCell.rowPinned;\n        // move along to the next cell\n        var newColumn = this.columnController.getDisplayedColAfter(gridCell.column);\n        // check if end of the row, and if so, go forward a row\n        if (!newColumn) {\n            newColumn = displayedColumns[0];\n            var rowBelow = this.getRowBelow(gridCell);\n            if (utils_1._.missing(rowBelow)) {\n                return null;\n            }\n            newRowIndex = rowBelow ? rowBelow.rowIndex : null;\n            newFloating = rowBelow ? rowBelow.rowPinned : null;\n        }\n        return { rowIndex: newRowIndex, column: newColumn, rowPinned: newFloating };\n    };\n    CellNavigationService.prototype.getNextTabbedCellBackwards = function (gridCell) {\n        var displayedColumns = this.columnController.getAllDisplayedColumns();\n        var newRowIndex = gridCell.rowIndex;\n        var newFloating = gridCell.rowPinned;\n        // move along to the next cell\n        var newColumn = this.columnController.getDisplayedColBefore(gridCell.column);\n        // check if end of the row, and if so, go forward a row\n        if (!newColumn) {\n            newColumn = utils_1._.last(displayedColumns);\n            var rowAbove = this.getRowAbove({ rowIndex: gridCell.rowIndex, rowPinned: gridCell.rowPinned });\n            if (utils_1._.missing(rowAbove)) {\n                return null;\n            }\n            newRowIndex = rowAbove ? rowAbove.rowIndex : null;\n            newFloating = rowAbove ? rowAbove.rowPinned : null;\n        }\n        return { rowIndex: newRowIndex, column: newColumn, rowPinned: newFloating };\n    };\n    __decorate([\n        context_1.Autowired('columnController'),\n        __metadata(\"design:type\", columnController_1.ColumnController)\n    ], CellNavigationService.prototype, \"columnController\", void 0);\n    __decorate([\n        context_1.Autowired('rowModel'),\n        __metadata(\"design:type\", Object)\n    ], CellNavigationService.prototype, \"rowModel\", void 0);\n    __decorate([\n        context_1.Autowired('pinnedRowModel'),\n        __metadata(\"design:type\", pinnedRowModel_1.PinnedRowModel)\n    ], CellNavigationService.prototype, \"pinnedRowModel\", void 0);\n    __decorate([\n        context_1.Autowired('gridOptionsWrapper'),\n        __metadata(\"design:type\", gridOptionsWrapper_1.GridOptionsWrapper)\n    ], CellNavigationService.prototype, \"gridOptionsWrapper\", void 0);\n    CellNavigationService = __decorate([\n        context_1.Bean('cellNavigationService')\n    ], CellNavigationService);\n    return CellNavigationService;\n}());\nexports.CellNavigationService = CellNavigationService;\n"]},"metadata":{},"sourceType":"script"}