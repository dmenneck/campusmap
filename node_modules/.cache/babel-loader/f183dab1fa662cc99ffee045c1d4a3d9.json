{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n/**\n * @module ol/format/filter/LogicalNary\n */\n\n\nimport { assert } from '../../asserts.js';\nimport Filter from './Filter.js';\n/**\n * @classdesc\n * Abstract class; normally only used for creating subclasses and not instantiated in apps.\n * Base class for WFS GetFeature n-ary logical filters.\n *\n * @abstract\n */\n\nvar LogicalNary =\n/** @class */\nfunction (_super) {\n  __extends(LogicalNary, _super);\n  /**\n   * @param {!string} tagName The XML tag name for this filter.\n   * @param {Array<import(\"./Filter.js\").default>} conditions Conditions.\n   */\n\n\n  function LogicalNary(tagName, conditions) {\n    var _this = _super.call(this, tagName) || this;\n    /**\n     * @type {Array<import(\"./Filter.js\").default>}\n     */\n\n\n    _this.conditions = conditions;\n    assert(_this.conditions.length >= 2, 57); // At least 2 conditions are required.\n\n    return _this;\n  }\n\n  return LogicalNary;\n}(Filter);\n\nexport default LogicalNary;","map":null,"metadata":{},"sourceType":"module"}