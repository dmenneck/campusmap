{"ast":null,"code":"/**\n * @module ol/renderer/canvas/ImageLayer\n */\nimport { ENABLE_RASTER_REPROJECTION } from '../../reproj/common.js';\nimport ImageCanvas from '../../ImageCanvas.js';\nimport LayerType from '../../LayerType.js';\nimport ViewHint from '../../ViewHint.js';\nimport { equals } from '../../array.js';\nimport { getHeight, getIntersection, getWidth, isEmpty } from '../../extent.js';\nimport VectorRenderType from '../../layer/VectorRenderType.js';\nimport { assign } from '../../obj.js';\nimport { layerRendererConstructors } from './Map.js';\nimport IntermediateCanvasRenderer from './IntermediateCanvas.js';\nimport { create as createTransform, compose as composeTransform } from '../../transform.js';\n/**\n * @classdesc\n * Canvas renderer for image layers.\n * @api\n */\n\nvar CanvasImageLayerRenderer =\n/*@__PURE__*/\nfunction (IntermediateCanvasRenderer) {\n  function CanvasImageLayerRenderer(imageLayer) {\n    IntermediateCanvasRenderer.call(this, imageLayer);\n    /**\n     * @private\n     * @type {?import(\"../../ImageBase.js\").default}\n     */\n\n    this.image_ = null;\n    /**\n     * @private\n     * @type {import(\"../../transform.js\").Transform}\n     */\n\n    this.imageTransform_ = createTransform();\n    /**\n     * @type {!Array<string>}\n     */\n\n    this.skippedFeatures_ = [];\n    /**\n     * @private\n     * @type {import(\"./VectorLayer.js\").default}\n     */\n\n    this.vectorRenderer_ = null;\n\n    if (imageLayer.getType() === LayerType.VECTOR) {\n      for (var i = 0, ii = layerRendererConstructors.length; i < ii; ++i) {\n        var ctor = layerRendererConstructors[i];\n\n        if (ctor !== CanvasImageLayerRenderer && ctor['handles'](imageLayer)) {\n          this.vectorRenderer_ =\n          /** @type {import(\"./VectorLayer.js\").default} */\n          new ctor(imageLayer);\n          break;\n        }\n      }\n    }\n  }\n\n  if (IntermediateCanvasRenderer) CanvasImageLayerRenderer.__proto__ = IntermediateCanvasRenderer;\n  CanvasImageLayerRenderer.prototype = Object.create(IntermediateCanvasRenderer && IntermediateCanvasRenderer.prototype);\n  CanvasImageLayerRenderer.prototype.constructor = CanvasImageLayerRenderer;\n  /**\n   * @inheritDoc\n   */\n\n  CanvasImageLayerRenderer.prototype.disposeInternal = function disposeInternal() {\n    if (this.vectorRenderer_) {\n      this.vectorRenderer_.dispose();\n    }\n\n    IntermediateCanvasRenderer.prototype.disposeInternal.call(this);\n  };\n  /**\n   * @inheritDoc\n   */\n\n\n  CanvasImageLayerRenderer.prototype.getImage = function getImage() {\n    return !this.image_ ? null : this.image_.getImage();\n  };\n  /**\n   * @inheritDoc\n   */\n\n\n  CanvasImageLayerRenderer.prototype.getImageTransform = function getImageTransform() {\n    return this.imageTransform_;\n  };\n  /**\n   * @inheritDoc\n   */\n\n\n  CanvasImageLayerRenderer.prototype.prepareFrame = function prepareFrame(frameState, layerState) {\n    var pixelRatio = frameState.pixelRatio;\n    var size = frameState.size;\n    var viewState = frameState.viewState;\n    var viewCenter = viewState.center;\n    var viewResolution = viewState.resolution;\n    var image;\n    var imageLayer =\n    /** @type {import(\"../../layer/Image.js\").default} */\n    this.getLayer();\n    var imageSource =\n    /** @type {import(\"../../source/Image.js\").default} */\n    imageLayer.getSource();\n    var hints = frameState.viewHints;\n    var vectorRenderer = this.vectorRenderer_;\n    var renderedExtent = frameState.extent;\n\n    if (!vectorRenderer && layerState.extent !== undefined) {\n      renderedExtent = getIntersection(renderedExtent, layerState.extent);\n    }\n\n    if (!hints[ViewHint.ANIMATING] && !hints[ViewHint.INTERACTING] && !isEmpty(renderedExtent)) {\n      var projection = viewState.projection;\n\n      if (!ENABLE_RASTER_REPROJECTION) {\n        var sourceProjection = imageSource.getProjection();\n\n        if (sourceProjection) {\n          projection = sourceProjection;\n        }\n      }\n\n      var skippedFeatures = this.skippedFeatures_;\n\n      if (vectorRenderer) {\n        var context = vectorRenderer.context;\n        var imageFrameState =\n        /** @type {import(\"../../PluggableMap.js\").FrameState} */\n        assign({}, frameState, {\n          size: [getWidth(renderedExtent) / viewResolution, getHeight(renderedExtent) / viewResolution],\n          viewState:\n          /** @type {import(\"../../View.js\").State} */\n          assign({}, frameState.viewState, {\n            rotation: 0\n          })\n        });\n        var newSkippedFeatures = Object.keys(imageFrameState.skippedFeatureUids).sort();\n        image = new ImageCanvas(renderedExtent, viewResolution, pixelRatio, context.canvas, function (callback) {\n          if (vectorRenderer.prepareFrame(imageFrameState, layerState) && (vectorRenderer.replayGroupChanged || !equals(skippedFeatures, newSkippedFeatures))) {\n            context.canvas.width = imageFrameState.size[0] * pixelRatio;\n            context.canvas.height = imageFrameState.size[1] * pixelRatio;\n            vectorRenderer.compose(context, imageFrameState, layerState);\n            skippedFeatures = newSkippedFeatures;\n            callback();\n          }\n        });\n      } else {\n        image = imageSource.getImage(renderedExtent, viewResolution, pixelRatio, projection);\n      }\n\n      if (image && this.loadImage(image)) {\n        this.image_ = image;\n        this.skippedFeatures_ = skippedFeatures;\n      }\n    }\n\n    if (this.image_) {\n      image = this.image_;\n      var imageExtent = image.getExtent();\n      var imageResolution = image.getResolution();\n      var imagePixelRatio = image.getPixelRatio();\n      var scale = pixelRatio * imageResolution / (viewResolution * imagePixelRatio);\n      var transform = composeTransform(this.imageTransform_, pixelRatio * size[0] / 2, pixelRatio * size[1] / 2, scale, scale, 0, imagePixelRatio * (imageExtent[0] - viewCenter[0]) / imageResolution, imagePixelRatio * (viewCenter[1] - imageExtent[3]) / imageResolution);\n      composeTransform(this.coordinateToCanvasPixelTransform, pixelRatio * size[0] / 2 - transform[4], pixelRatio * size[1] / 2 - transform[5], pixelRatio / viewResolution, -pixelRatio / viewResolution, 0, -viewCenter[0], -viewCenter[1]);\n      this.renderedResolution = imageResolution * pixelRatio / imagePixelRatio;\n    }\n\n    return !!this.image_;\n  };\n  /**\n   * @inheritDoc\n   */\n\n\n  CanvasImageLayerRenderer.prototype.forEachFeatureAtCoordinate = function forEachFeatureAtCoordinate(coordinate, frameState, hitTolerance, callback) {\n    if (this.vectorRenderer_) {\n      return this.vectorRenderer_.forEachFeatureAtCoordinate(coordinate, frameState, hitTolerance, callback);\n    } else {\n      return IntermediateCanvasRenderer.prototype.forEachFeatureAtCoordinate.call(this, coordinate, frameState, hitTolerance, callback);\n    }\n  };\n\n  return CanvasImageLayerRenderer;\n}(IntermediateCanvasRenderer);\n/**\n * Determine if this renderer handles the provided layer.\n * @param {import(\"../../layer/Layer.js\").default} layer The candidate layer.\n * @return {boolean} The renderer can render the layer.\n */\n\n\nCanvasImageLayerRenderer['handles'] = function (layer) {\n  return layer.getType() === LayerType.IMAGE || layer.getType() === LayerType.VECTOR &&\n  /** @type {import(\"../../layer/Vector.js\").default} */\n  layer.getRenderMode() === VectorRenderType.IMAGE;\n};\n/**\n * Create a layer renderer.\n * @param {import(\"../Map.js\").default} mapRenderer The map renderer.\n * @param {import(\"../../layer/Layer.js\").default} layer The layer to be rendererd.\n * @return {CanvasImageLayerRenderer} The layer renderer.\n */\n\n\nCanvasImageLayerRenderer['create'] = function (mapRenderer, layer) {\n  return new CanvasImageLayerRenderer(\n  /** @type {import(\"../../layer/Image.js\").default} */\n  layer);\n};\n\nexport default CanvasImageLayerRenderer;","map":{"version":3,"sources":["../../../../src/ol/renderer/canvas/ImageLayer.js"],"names":["super","let","const"],"mappings":"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","sourcesContent":["/**\n * @module ol/renderer/canvas/ImageLayer\n */\nimport {ENABLE_RASTER_REPROJECTION} from '../../reproj/common.js';\nimport ImageCanvas from '../../ImageCanvas.js';\nimport LayerType from '../../LayerType.js';\nimport ViewHint from '../../ViewHint.js';\nimport {equals} from '../../array.js';\nimport {getHeight, getIntersection, getWidth, isEmpty} from '../../extent.js';\nimport VectorRenderType from '../../layer/VectorRenderType.js';\nimport {assign} from '../../obj.js';\nimport {layerRendererConstructors} from './Map.js';\nimport IntermediateCanvasRenderer from './IntermediateCanvas.js';\nimport {create as createTransform, compose as composeTransform} from '../../transform.js';\n\n/**\n * @classdesc\n * Canvas renderer for image layers.\n * @api\n */\nclass CanvasImageLayerRenderer extends IntermediateCanvasRenderer {\n\n  /**\n   * @param {import(\"../../layer/Image.js\").default|import(\"../../layer/Vector.js\").default} imageLayer Image or vector layer.\n   */\n  constructor(imageLayer) {\n\n    super(imageLayer);\n\n    /**\n     * @private\n     * @type {?import(\"../../ImageBase.js\").default}\n     */\n    this.image_ = null;\n\n    /**\n     * @private\n     * @type {import(\"../../transform.js\").Transform}\n     */\n    this.imageTransform_ = createTransform();\n\n    /**\n     * @type {!Array<string>}\n     */\n    this.skippedFeatures_ = [];\n\n    /**\n     * @private\n     * @type {import(\"./VectorLayer.js\").default}\n     */\n    this.vectorRenderer_ = null;\n\n    if (imageLayer.getType() === LayerType.VECTOR) {\n      for (let i = 0, ii = layerRendererConstructors.length; i < ii; ++i) {\n        const ctor = layerRendererConstructors[i];\n        if (ctor !== CanvasImageLayerRenderer && ctor['handles'](imageLayer)) {\n          this.vectorRenderer_ = /** @type {import(\"./VectorLayer.js\").default} */ (new ctor(imageLayer));\n          break;\n        }\n      }\n    }\n\n  }\n\n  /**\n   * @inheritDoc\n   */\n  disposeInternal() {\n    if (this.vectorRenderer_) {\n      this.vectorRenderer_.dispose();\n    }\n    super.disposeInternal();\n  }\n\n  /**\n   * @inheritDoc\n   */\n  getImage() {\n    return !this.image_ ? null : this.image_.getImage();\n  }\n\n  /**\n   * @inheritDoc\n   */\n  getImageTransform() {\n    return this.imageTransform_;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  prepareFrame(frameState, layerState) {\n\n    const pixelRatio = frameState.pixelRatio;\n    const size = frameState.size;\n    const viewState = frameState.viewState;\n    const viewCenter = viewState.center;\n    const viewResolution = viewState.resolution;\n\n    let image;\n    const imageLayer = /** @type {import(\"../../layer/Image.js\").default} */ (this.getLayer());\n    const imageSource = /** @type {import(\"../../source/Image.js\").default} */ (imageLayer.getSource());\n\n    const hints = frameState.viewHints;\n\n    const vectorRenderer = this.vectorRenderer_;\n    let renderedExtent = frameState.extent;\n    if (!vectorRenderer && layerState.extent !== undefined) {\n      renderedExtent = getIntersection(renderedExtent, layerState.extent);\n    }\n\n    if (!hints[ViewHint.ANIMATING] && !hints[ViewHint.INTERACTING] &&\n        !isEmpty(renderedExtent)) {\n      let projection = viewState.projection;\n      if (!ENABLE_RASTER_REPROJECTION) {\n        const sourceProjection = imageSource.getProjection();\n        if (sourceProjection) {\n          projection = sourceProjection;\n        }\n      }\n      let skippedFeatures = this.skippedFeatures_;\n      if (vectorRenderer) {\n        const context = vectorRenderer.context;\n        const imageFrameState = /** @type {import(\"../../PluggableMap.js\").FrameState} */ (assign({}, frameState, {\n          size: [\n            getWidth(renderedExtent) / viewResolution,\n            getHeight(renderedExtent) / viewResolution\n          ],\n          viewState: /** @type {import(\"../../View.js\").State} */ (assign({}, frameState.viewState, {\n            rotation: 0\n          }))\n        }));\n        const newSkippedFeatures = Object.keys(imageFrameState.skippedFeatureUids).sort();\n        image = new ImageCanvas(renderedExtent, viewResolution, pixelRatio, context.canvas, function(callback) {\n          if (vectorRenderer.prepareFrame(imageFrameState, layerState) &&\n              (vectorRenderer.replayGroupChanged ||\n              !equals(skippedFeatures, newSkippedFeatures))) {\n            context.canvas.width = imageFrameState.size[0] * pixelRatio;\n            context.canvas.height = imageFrameState.size[1] * pixelRatio;\n            vectorRenderer.compose(context, imageFrameState, layerState);\n            skippedFeatures = newSkippedFeatures;\n            callback();\n          }\n        });\n      } else {\n        image = imageSource.getImage(\n          renderedExtent, viewResolution, pixelRatio, projection);\n      }\n      if (image && this.loadImage(image)) {\n        this.image_ = image;\n        this.skippedFeatures_ = skippedFeatures;\n      }\n    }\n\n    if (this.image_) {\n      image = this.image_;\n      const imageExtent = image.getExtent();\n      const imageResolution = image.getResolution();\n      const imagePixelRatio = image.getPixelRatio();\n      const scale = pixelRatio * imageResolution /\n          (viewResolution * imagePixelRatio);\n      const transform = composeTransform(this.imageTransform_,\n        pixelRatio * size[0] / 2, pixelRatio * size[1] / 2,\n        scale, scale,\n        0,\n        imagePixelRatio * (imageExtent[0] - viewCenter[0]) / imageResolution,\n        imagePixelRatio * (viewCenter[1] - imageExtent[3]) / imageResolution);\n      composeTransform(this.coordinateToCanvasPixelTransform,\n        pixelRatio * size[0] / 2 - transform[4], pixelRatio * size[1] / 2 - transform[5],\n        pixelRatio / viewResolution, -pixelRatio / viewResolution,\n        0,\n        -viewCenter[0], -viewCenter[1]);\n\n      this.renderedResolution = imageResolution * pixelRatio / imagePixelRatio;\n    }\n\n    return !!this.image_;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  forEachFeatureAtCoordinate(coordinate, frameState, hitTolerance, callback) {\n    if (this.vectorRenderer_) {\n      return this.vectorRenderer_.forEachFeatureAtCoordinate(coordinate, frameState, hitTolerance, callback);\n    } else {\n      return super.forEachFeatureAtCoordinate(coordinate, frameState, hitTolerance, callback);\n    }\n  }\n}\n\n\n/**\n * Determine if this renderer handles the provided layer.\n * @param {import(\"../../layer/Layer.js\").default} layer The candidate layer.\n * @return {boolean} The renderer can render the layer.\n */\nCanvasImageLayerRenderer['handles'] = function(layer) {\n  return layer.getType() === LayerType.IMAGE ||\n    layer.getType() === LayerType.VECTOR &&\n    /** @type {import(\"../../layer/Vector.js\").default} */ (layer).getRenderMode() === VectorRenderType.IMAGE;\n};\n\n\n/**\n * Create a layer renderer.\n * @param {import(\"../Map.js\").default} mapRenderer The map renderer.\n * @param {import(\"../../layer/Layer.js\").default} layer The layer to be rendererd.\n * @return {CanvasImageLayerRenderer} The layer renderer.\n */\nCanvasImageLayerRenderer['create'] = function(mapRenderer, layer) {\n  return new CanvasImageLayerRenderer(/** @type {import(\"../../layer/Image.js\").default} */ (layer));\n};\n\n\nexport default CanvasImageLayerRenderer;\n"]},"metadata":{},"sourceType":"module"}