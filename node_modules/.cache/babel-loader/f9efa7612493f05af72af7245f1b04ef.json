{"ast":null,"code":"/**\n * @module ol/MapBrowserEvent\n */\nimport { inherits } from './util.js';\nimport MapEvent from './MapEvent.js';\n/**\n * @classdesc\n * Events emitted as map browser events are instances of this type.\n * See {@link module:ol/Map~Map} for which events trigger a map browser event.\n *\n * @constructor\n * @extends {module:ol/MapEvent}\n * @param {string} type Event type.\n * @param {module:ol/PluggableMap} map Map.\n * @param {Event} browserEvent Browser event.\n * @param {boolean=} opt_dragging Is the map currently being dragged?\n * @param {?module:ol/PluggableMap~FrameState=} opt_frameState Frame state.\n */\n\nconst MapBrowserEvent = function (type, map, browserEvent, opt_dragging, opt_frameState) {\n  MapEvent.call(this, type, map, opt_frameState);\n  /**\n   * The original browser event.\n   * @const\n   * @type {Event}\n   * @api\n   */\n\n  this.originalEvent = browserEvent;\n  /**\n   * The map pixel relative to the viewport corresponding to the original browser event.\n   * @type {module:ol~Pixel}\n   * @api\n   */\n\n  this.pixel = map.getEventPixel(browserEvent);\n  /**\n   * The coordinate in view projection corresponding to the original browser event.\n   * @type {module:ol/coordinate~Coordinate}\n   * @api\n   */\n\n  this.coordinate = map.getCoordinateFromPixel(this.pixel);\n  /**\n   * Indicates if the map is currently being dragged. Only set for\n   * `POINTERDRAG` and `POINTERMOVE` events. Default is `false`.\n   *\n   * @type {boolean}\n   * @api\n   */\n\n  this.dragging = opt_dragging !== undefined ? opt_dragging : false;\n};\n\ninherits(MapBrowserEvent, MapEvent);\n/**\n * Prevents the default browser action.\n * @see https://developer.mozilla.org/en-US/docs/Web/API/event.preventDefault\n * @override\n * @api\n */\n\nMapBrowserEvent.prototype.preventDefault = function () {\n  MapEvent.prototype.preventDefault.call(this);\n  this.originalEvent.preventDefault();\n};\n/**\n * Prevents further propagation of the current event.\n * @see https://developer.mozilla.org/en-US/docs/Web/API/event.stopPropagation\n * @override\n * @api\n */\n\n\nMapBrowserEvent.prototype.stopPropagation = function () {\n  MapEvent.prototype.stopPropagation.call(this);\n  this.originalEvent.stopPropagation();\n};\n\nexport default MapBrowserEvent;","map":null,"metadata":{},"sourceType":"module"}