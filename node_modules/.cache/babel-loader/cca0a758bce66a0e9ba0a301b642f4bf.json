{"ast":null,"code":"/**\n * @module ol/source/Vector\n */\nimport { getUid } from '../util.js';\nimport Collection from '../Collection.js';\nimport CollectionEventType from '../CollectionEventType.js';\nimport ObjectEventType from '../ObjectEventType.js';\nimport { extend } from '../array.js';\nimport { assert } from '../asserts.js';\nimport { listen, unlistenByKey } from '../events.js';\nimport Event from '../events/Event.js';\nimport EventType from '../events/EventType.js';\nimport { containsExtent, equals } from '../extent.js';\nimport { xhr } from '../featureloader.js';\nimport { TRUE, VOID } from '../functions.js';\nimport { all as allStrategy } from '../loadingstrategy.js';\nimport { isEmpty, getValues } from '../obj.js';\nimport Source from './Source.js';\nimport SourceState from './State.js';\nimport VectorEventType from './VectorEventType.js';\nimport RBush from '../structs/RBush.js';\n/**\n * A function that takes an {@link module:ol/extent~Extent} and a resolution as arguments, and\n * returns an array of {@link module:ol/extent~Extent} with the extents to load. Usually this\n * is one of the standard {@link module:ol/loadingstrategy} strategies.\n *\n * @typedef {function(import(\"../extent.js\").Extent, number): Array<import(\"../extent.js\").Extent>} LoadingStrategy\n * @api\n */\n\n/**\n * @classdesc\n * Events emitted by {@link module:ol/source/Vector} instances are instances of this\n * type.\n */\n\nexport var VectorSourceEvent =\n/*@__PURE__*/\nfunction (Event) {\n  function VectorSourceEvent(type, opt_feature) {\n    Event.call(this, type);\n    /**\n     * The feature being added or removed.\n     * @type {import(\"../Feature.js\").default|undefined}\n     * @api\n     */\n\n    this.feature = opt_feature;\n  }\n\n  if (Event) VectorSourceEvent.__proto__ = Event;\n  VectorSourceEvent.prototype = Object.create(Event && Event.prototype);\n  VectorSourceEvent.prototype.constructor = VectorSourceEvent;\n  return VectorSourceEvent;\n}(Event);\n/**\n * @typedef {Object} Options\n * @property {import(\"./Source.js\").AttributionLike} [attributions] Attributions.\n * @property {Array<import(\"../Feature.js\").default>|Collection<import(\"../Feature.js\").default>} [features]\n * Features. If provided as {@link module:ol/Collection}, the features in the source\n * and the collection will stay in sync.\n * @property {import(\"../format/Feature.js\").default} [format] The feature format used by the XHR\n * feature loader when `url` is set. Required if `url` is set, otherwise ignored.\n * @property {import(\"../featureloader.js\").FeatureLoader} [loader]\n * The loader function used to load features, from a remote source for example.\n * If this is not set and `url` is set, the source will create and use an XHR\n * feature loader.\n *\n * Example:\n *\n * ```js\n * import {Vector} from 'ol/source';\n * import {GeoJSON} from 'ol/format';\n * import {bbox} from 'ol/loadingstrategy';\n *\n * var vectorSource = new Vector({\n *   format: new GeoJSON(),\n *   loader: function(extent, resolution, projection) {\n *      var proj = projection.getCode();\n *      var url = 'https://ahocevar.com/geoserver/wfs?service=WFS&' +\n *          'version=1.1.0&request=GetFeature&typename=osm:water_areas&' +\n *          'outputFormat=application/json&srsname=' + proj + '&' +\n *          'bbox=' + extent.join(',') + ',' + proj;\n *      var xhr = new XMLHttpRequest();\n *      xhr.open('GET', url);\n *      var onError = function() {\n *        vectorSource.removeLoadedExtent(extent);\n *      }\n *      xhr.onerror = onError;\n *      xhr.onload = function() {\n *        if (xhr.status == 200) {\n *          vectorSource.addFeatures(\n *              vectorSource.getFormat().readFeatures(xhr.responseText));\n *        } else {\n *          onError();\n *        }\n *      }\n *      xhr.send();\n *    },\n *    strategy: bbox\n *  });\n * ```\n * @property {boolean} [overlaps=true] This source may have overlapping geometries.\n * Setting this to `false` (e.g. for sources with polygons that represent administrative\n * boundaries or TopoJSON sources) allows the renderer to optimise fill and\n * stroke operations.\n * @property {LoadingStrategy} [strategy] The loading strategy to use.\n * By default an {@link module:ol/loadingstrategy~all}\n * strategy is used, a one-off strategy which loads all features at once.\n * @property {string|import(\"../featureloader.js\").FeatureUrlFunction} [url]\n * Setting this option instructs the source to load features using an XHR loader\n * (see {@link module:ol/featureloader~xhr}). Use a `string` and an\n * {@link module:ol/loadingstrategy~all} for a one-off download of all features from\n * the given URL. Use a {@link module:ol/featureloader~FeatureUrlFunction} to generate the url with\n * other loading strategies.\n * Requires `format` to be set as well.\n * When default XHR feature loader is provided, the features will\n * be transformed from the data projection to the view projection\n * during parsing. If your remote data source does not advertise its projection\n * properly, this transformation will be incorrect. For some formats, the\n * default projection (usually EPSG:4326) can be overridden by setting the\n * dataProjection constructor option on the format.\n * Note that if a source contains non-feature data, such as a GeoJSON geometry\n * or a KML NetworkLink, these will be ignored. Use a custom loader to load these.\n * @property {boolean} [useSpatialIndex=true]\n * By default, an RTree is used as spatial index. When features are removed and\n * added frequently, and the total number of features is low, setting this to\n * `false` may improve performance.\n *\n * Note that\n * {@link module:ol/source/Vector~VectorSource#getFeaturesInExtent},\n * {@link module:ol/source/Vector~VectorSource#getClosestFeatureToCoordinate} and\n * {@link module:ol/source/Vector~VectorSource#getExtent} cannot be used when `useSpatialIndex` is\n * set to `false`, and {@link module:ol/source/Vector~VectorSource#forEachFeatureInExtent} will loop\n * through all features.\n *\n * When set to `false`, the features will be maintained in an\n * {@link module:ol/Collection}, which can be retrieved through\n * {@link module:ol/source/Vector~VectorSource#getFeaturesCollection}.\n * @property {boolean} [wrapX=true] Wrap the world horizontally. For vector editing across the\n * -180° and 180° meridians to work properly, this should be set to `false`. The\n * resulting geometry coordinates will then exceed the world bounds.\n */\n\n/**\n * @classdesc\n * Provides a source of features for vector layers. Vector features provided\n * by this source are suitable for editing. See {@link module:ol/source/VectorTile~VectorTile} for\n * vector data that is optimized for rendering.\n *\n * @fires ol/source/Vector.VectorSourceEvent\n * @api\n */\n\nvar VectorSource =\n/*@__PURE__*/\nfunction (Source) {\n  function VectorSource(opt_options) {\n    var options = opt_options || {};\n    Source.call(this, {\n      attributions: options.attributions,\n      projection: undefined,\n      state: SourceState.READY,\n      wrapX: options.wrapX !== undefined ? options.wrapX : true\n    });\n    /**\n     * @private\n     * @type {import(\"../featureloader.js\").FeatureLoader}\n     */\n\n    this.loader_ = VOID;\n    /**\n     * @private\n     * @type {import(\"../format/Feature.js\").default|undefined}\n     */\n\n    this.format_ = options.format;\n    /**\n     * @private\n     * @type {boolean}\n     */\n\n    this.overlaps_ = options.overlaps == undefined ? true : options.overlaps;\n    /**\n     * @private\n     * @type {string|import(\"../featureloader.js\").FeatureUrlFunction|undefined}\n     */\n\n    this.url_ = options.url;\n\n    if (options.loader !== undefined) {\n      this.loader_ = options.loader;\n    } else if (this.url_ !== undefined) {\n      assert(this.format_, 7); // `format` must be set when `url` is set\n      // create a XHR feature loader for \"url\" and \"format\"\n\n      this.loader_ = xhr(this.url_,\n      /** @type {import(\"../format/Feature.js\").default} */\n      this.format_);\n    }\n    /**\n     * @private\n     * @type {LoadingStrategy}\n     */\n\n\n    this.strategy_ = options.strategy !== undefined ? options.strategy : allStrategy;\n    var useSpatialIndex = options.useSpatialIndex !== undefined ? options.useSpatialIndex : true;\n    /**\n     * @private\n     * @type {RBush<import(\"../Feature.js\").default>}\n     */\n\n    this.featuresRtree_ = useSpatialIndex ? new RBush() : null;\n    /**\n     * @private\n     * @type {RBush<{extent: import(\"../extent.js\").Extent}>}\n     */\n\n    this.loadedExtentsRtree_ = new RBush();\n    /**\n     * @private\n     * @type {!Object<string, import(\"../Feature.js\").default>}\n     */\n\n    this.nullGeometryFeatures_ = {};\n    /**\n     * A lookup of features by id (the return from feature.getId()).\n     * @private\n     * @type {!Object<string, import(\"../Feature.js\").default>}\n     */\n\n    this.idIndex_ = {};\n    /**\n     * A lookup of features without id (keyed by getUid(feature)).\n     * @private\n     * @type {!Object<string, import(\"../Feature.js\").default>}\n     */\n\n    this.undefIdIndex_ = {};\n    /**\n     * @private\n     * @type {Object<string, Array<import(\"../events.js\").EventsKey>>}\n     */\n\n    this.featureChangeKeys_ = {};\n    /**\n     * @private\n     * @type {Collection<import(\"../Feature.js\").default>}\n     */\n\n    this.featuresCollection_ = null;\n    var collection, features;\n\n    if (Array.isArray(options.features)) {\n      features = options.features;\n    } else if (options.features) {\n      collection = options.features;\n      features = collection.getArray();\n    }\n\n    if (!useSpatialIndex && collection === undefined) {\n      collection = new Collection(features);\n    }\n\n    if (features !== undefined) {\n      this.addFeaturesInternal(features);\n    }\n\n    if (collection !== undefined) {\n      this.bindFeaturesCollection_(collection);\n    }\n  }\n\n  if (Source) VectorSource.__proto__ = Source;\n  VectorSource.prototype = Object.create(Source && Source.prototype);\n  VectorSource.prototype.constructor = VectorSource;\n  /**\n   * Add a single feature to the source.  If you want to add a batch of features\n   * at once, call {@link module:ol/source/Vector~VectorSource#addFeatures #addFeatures()}\n   * instead. A feature will not be added to the source if feature with\n   * the same id is already there. The reason for this behavior is to avoid\n   * feature duplication when using bbox or tile loading strategies.\n   * @param {import(\"../Feature.js\").default} feature Feature to add.\n   * @api\n   */\n\n  VectorSource.prototype.addFeature = function addFeature(feature) {\n    this.addFeatureInternal(feature);\n    this.changed();\n  };\n  /**\n   * Add a feature without firing a `change` event.\n   * @param {import(\"../Feature.js\").default} feature Feature.\n   * @protected\n   */\n\n\n  VectorSource.prototype.addFeatureInternal = function addFeatureInternal(feature) {\n    var featureKey = getUid(feature);\n\n    if (!this.addToIndex_(featureKey, feature)) {\n      return;\n    }\n\n    this.setupChangeEvents_(featureKey, feature);\n    var geometry = feature.getGeometry();\n\n    if (geometry) {\n      var extent = geometry.getExtent();\n\n      if (this.featuresRtree_) {\n        this.featuresRtree_.insert(extent, feature);\n      }\n    } else {\n      this.nullGeometryFeatures_[featureKey] = feature;\n    }\n\n    this.dispatchEvent(new VectorSourceEvent(VectorEventType.ADDFEATURE, feature));\n  };\n  /**\n   * @param {string} featureKey Unique identifier for the feature.\n   * @param {import(\"../Feature.js\").default} feature The feature.\n   * @private\n   */\n\n\n  VectorSource.prototype.setupChangeEvents_ = function setupChangeEvents_(featureKey, feature) {\n    this.featureChangeKeys_[featureKey] = [listen(feature, EventType.CHANGE, this.handleFeatureChange_, this), listen(feature, ObjectEventType.PROPERTYCHANGE, this.handleFeatureChange_, this)];\n  };\n  /**\n   * @param {string} featureKey Unique identifier for the feature.\n   * @param {import(\"../Feature.js\").default} feature The feature.\n   * @return {boolean} The feature is \"valid\", in the sense that it is also a\n   *     candidate for insertion into the Rtree.\n   * @private\n   */\n\n\n  VectorSource.prototype.addToIndex_ = function addToIndex_(featureKey, feature) {\n    var valid = true;\n    var id = feature.getId();\n\n    if (id !== undefined) {\n      if (!(id.toString() in this.idIndex_)) {\n        this.idIndex_[id.toString()] = feature;\n      } else {\n        valid = false;\n      }\n    } else {\n      assert(!(featureKey in this.undefIdIndex_), 30); // The passed `feature` was already added to the source\n\n      this.undefIdIndex_[featureKey] = feature;\n    }\n\n    return valid;\n  };\n  /**\n   * Add a batch of features to the source.\n   * @param {Array<import(\"../Feature.js\").default>} features Features to add.\n   * @api\n   */\n\n\n  VectorSource.prototype.addFeatures = function addFeatures(features) {\n    this.addFeaturesInternal(features);\n    this.changed();\n  };\n  /**\n   * Add features without firing a `change` event.\n   * @param {Array<import(\"../Feature.js\").default>} features Features.\n   * @protected\n   */\n\n\n  VectorSource.prototype.addFeaturesInternal = function addFeaturesInternal(features) {\n    var extents = [];\n    var newFeatures = [];\n    var geometryFeatures = [];\n\n    for (var i = 0, length = features.length; i < length; i++) {\n      var feature = features[i];\n      var featureKey = getUid(feature);\n\n      if (this.addToIndex_(featureKey, feature)) {\n        newFeatures.push(feature);\n      }\n    }\n\n    for (var i$1 = 0, length$1 = newFeatures.length; i$1 < length$1; i$1++) {\n      var feature$1 = newFeatures[i$1];\n      var featureKey$1 = getUid(feature$1);\n      this.setupChangeEvents_(featureKey$1, feature$1);\n      var geometry = feature$1.getGeometry();\n\n      if (geometry) {\n        var extent = geometry.getExtent();\n        extents.push(extent);\n        geometryFeatures.push(feature$1);\n      } else {\n        this.nullGeometryFeatures_[featureKey$1] = feature$1;\n      }\n    }\n\n    if (this.featuresRtree_) {\n      this.featuresRtree_.load(extents, geometryFeatures);\n    }\n\n    for (var i$2 = 0, length$2 = newFeatures.length; i$2 < length$2; i$2++) {\n      this.dispatchEvent(new VectorSourceEvent(VectorEventType.ADDFEATURE, newFeatures[i$2]));\n    }\n  };\n  /**\n   * @param {!Collection<import(\"../Feature.js\").default>} collection Collection.\n   * @private\n   */\n\n\n  VectorSource.prototype.bindFeaturesCollection_ = function bindFeaturesCollection_(collection) {\n    var modifyingCollection = false;\n    listen(this, VectorEventType.ADDFEATURE,\n    /**\n     * @param {VectorSourceEvent} evt The vector source event\n     */\n    function (evt) {\n      if (!modifyingCollection) {\n        modifyingCollection = true;\n        collection.push(evt.feature);\n        modifyingCollection = false;\n      }\n    });\n    listen(this, VectorEventType.REMOVEFEATURE,\n    /**\n     * @param {VectorSourceEvent} evt The vector source event\n     */\n    function (evt) {\n      if (!modifyingCollection) {\n        modifyingCollection = true;\n        collection.remove(evt.feature);\n        modifyingCollection = false;\n      }\n    });\n    listen(collection, CollectionEventType.ADD,\n    /**\n     * @param {import(\"../Collection.js\").CollectionEvent} evt The collection event\n     */\n    function (evt) {\n      if (!modifyingCollection) {\n        modifyingCollection = true;\n        this.addFeature(\n        /** @type {import(\"../Feature.js\").default} */\n        evt.element);\n        modifyingCollection = false;\n      }\n    }, this);\n    listen(collection, CollectionEventType.REMOVE,\n    /**\n     * @param {import(\"../Collection.js\").CollectionEvent} evt The collection event\n     */\n    function (evt) {\n      if (!modifyingCollection) {\n        modifyingCollection = true;\n        this.removeFeature(\n        /** @type {import(\"../Feature.js\").default} */\n        evt.element);\n        modifyingCollection = false;\n      }\n    }, this);\n    this.featuresCollection_ = collection;\n  };\n  /**\n   * Remove all features from the source.\n   * @param {boolean=} opt_fast Skip dispatching of {@link module:ol/source/Vector.VectorSourceEvent#removefeature} events.\n   * @api\n   */\n\n\n  VectorSource.prototype.clear = function clear(opt_fast) {\n    if (opt_fast) {\n      for (var featureId in this.featureChangeKeys_) {\n        var keys = this.featureChangeKeys_[featureId];\n        keys.forEach(unlistenByKey);\n      }\n\n      if (!this.featuresCollection_) {\n        this.featureChangeKeys_ = {};\n        this.idIndex_ = {};\n        this.undefIdIndex_ = {};\n      }\n    } else {\n      if (this.featuresRtree_) {\n        this.featuresRtree_.forEach(this.removeFeatureInternal, this);\n\n        for (var id in this.nullGeometryFeatures_) {\n          this.removeFeatureInternal(this.nullGeometryFeatures_[id]);\n        }\n      }\n    }\n\n    if (this.featuresCollection_) {\n      this.featuresCollection_.clear();\n    }\n\n    if (this.featuresRtree_) {\n      this.featuresRtree_.clear();\n    }\n\n    this.loadedExtentsRtree_.clear();\n    this.nullGeometryFeatures_ = {};\n    var clearEvent = new VectorSourceEvent(VectorEventType.CLEAR);\n    this.dispatchEvent(clearEvent);\n    this.changed();\n  };\n  /**\n   * Iterate through all features on the source, calling the provided callback\n   * with each one.  If the callback returns any \"truthy\" value, iteration will\n   * stop and the function will return the same value.\n   * Note: this function only iterate through the feature that have a defined geometry.\n   *\n   * @param {function(import(\"../Feature.js\").default): T} callback Called with each feature\n   *     on the source.  Return a truthy value to stop iteration.\n   * @return {T|undefined} The return value from the last call to the callback.\n   * @template T\n   * @api\n   */\n\n\n  VectorSource.prototype.forEachFeature = function forEachFeature(callback) {\n    if (this.featuresRtree_) {\n      return this.featuresRtree_.forEach(callback);\n    } else if (this.featuresCollection_) {\n      this.featuresCollection_.forEach(callback);\n    }\n  };\n  /**\n   * Iterate through all features whose geometries contain the provided\n   * coordinate, calling the callback with each feature.  If the callback returns\n   * a \"truthy\" value, iteration will stop and the function will return the same\n   * value.\n   *\n   * @param {import(\"../coordinate.js\").Coordinate} coordinate Coordinate.\n   * @param {function(import(\"../Feature.js\").default): T} callback Called with each feature\n   *     whose goemetry contains the provided coordinate.\n   * @return {T|undefined} The return value from the last call to the callback.\n   * @template T\n   */\n\n\n  VectorSource.prototype.forEachFeatureAtCoordinateDirect = function forEachFeatureAtCoordinateDirect(coordinate, callback) {\n    var extent = [coordinate[0], coordinate[1], coordinate[0], coordinate[1]];\n    return this.forEachFeatureInExtent(extent, function (feature) {\n      var geometry = feature.getGeometry();\n\n      if (geometry.intersectsCoordinate(coordinate)) {\n        return callback(feature);\n      } else {\n        return undefined;\n      }\n    });\n  };\n  /**\n   * Iterate through all features whose bounding box intersects the provided\n   * extent (note that the feature's geometry may not intersect the extent),\n   * calling the callback with each feature.  If the callback returns a \"truthy\"\n   * value, iteration will stop and the function will return the same value.\n   *\n   * If you are interested in features whose geometry intersects an extent, call\n   * the {@link module:ol/source/Vector~VectorSource#forEachFeatureIntersectingExtent #forEachFeatureIntersectingExtent()} method instead.\n   *\n   * When `useSpatialIndex` is set to false, this method will loop through all\n   * features, equivalent to {@link module:ol/source/Vector~VectorSource#forEachFeature #forEachFeature()}.\n   *\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @param {function(import(\"../Feature.js\").default): T} callback Called with each feature\n   *     whose bounding box intersects the provided extent.\n   * @return {T|undefined} The return value from the last call to the callback.\n   * @template T\n   * @api\n   */\n\n\n  VectorSource.prototype.forEachFeatureInExtent = function forEachFeatureInExtent(extent, callback) {\n    if (this.featuresRtree_) {\n      return this.featuresRtree_.forEachInExtent(extent, callback);\n    } else if (this.featuresCollection_) {\n      this.featuresCollection_.forEach(callback);\n    }\n  };\n  /**\n   * Iterate through all features whose geometry intersects the provided extent,\n   * calling the callback with each feature.  If the callback returns a \"truthy\"\n   * value, iteration will stop and the function will return the same value.\n   *\n   * If you only want to test for bounding box intersection, call the\n   * {@link module:ol/source/Vector~VectorSource#forEachFeatureInExtent #forEachFeatureInExtent()} method instead.\n   *\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @param {function(import(\"../Feature.js\").default): T} callback Called with each feature\n   *     whose geometry intersects the provided extent.\n   * @return {T|undefined} The return value from the last call to the callback.\n   * @template T\n   * @api\n   */\n\n\n  VectorSource.prototype.forEachFeatureIntersectingExtent = function forEachFeatureIntersectingExtent(extent, callback) {\n    return this.forEachFeatureInExtent(extent,\n    /**\n     * @param {import(\"../Feature.js\").default} feature Feature.\n     * @return {T|undefined} The return value from the last call to the callback.\n     */\n    function (feature) {\n      var geometry = feature.getGeometry();\n\n      if (geometry.intersectsExtent(extent)) {\n        var result = callback(feature);\n\n        if (result) {\n          return result;\n        }\n      }\n    });\n  };\n  /**\n   * Get the features collection associated with this source. Will be `null`\n   * unless the source was configured with `useSpatialIndex` set to `false`, or\n   * with an {@link module:ol/Collection} as `features`.\n   * @return {Collection<import(\"../Feature.js\").default>} The collection of features.\n   * @api\n   */\n\n\n  VectorSource.prototype.getFeaturesCollection = function getFeaturesCollection() {\n    return this.featuresCollection_;\n  };\n  /**\n   * Get all features on the source in random order.\n   * @return {Array<import(\"../Feature.js\").default>} Features.\n   * @api\n   */\n\n\n  VectorSource.prototype.getFeatures = function getFeatures() {\n    var features;\n\n    if (this.featuresCollection_) {\n      features = this.featuresCollection_.getArray();\n    } else if (this.featuresRtree_) {\n      features = this.featuresRtree_.getAll();\n\n      if (!isEmpty(this.nullGeometryFeatures_)) {\n        extend(features, getValues(this.nullGeometryFeatures_));\n      }\n    }\n\n    return (\n      /** @type {Array<import(\"../Feature.js\").default>} */\n      features\n    );\n  };\n  /**\n   * Get all features whose geometry intersects the provided coordinate.\n   * @param {import(\"../coordinate.js\").Coordinate} coordinate Coordinate.\n   * @return {Array<import(\"../Feature.js\").default>} Features.\n   * @api\n   */\n\n\n  VectorSource.prototype.getFeaturesAtCoordinate = function getFeaturesAtCoordinate(coordinate) {\n    var features = [];\n    this.forEachFeatureAtCoordinateDirect(coordinate, function (feature) {\n      features.push(feature);\n    });\n    return features;\n  };\n  /**\n   * Get all features in the provided extent.  Note that this returns an array of\n   * all features intersecting the given extent in random order (so it may include\n   * features whose geometries do not intersect the extent).\n   *\n   * This method is not available when the source is configured with\n   * `useSpatialIndex` set to `false`.\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @return {Array<import(\"../Feature.js\").default>} Features.\n   * @api\n   */\n\n\n  VectorSource.prototype.getFeaturesInExtent = function getFeaturesInExtent(extent) {\n    return this.featuresRtree_.getInExtent(extent);\n  };\n  /**\n   * Get the closest feature to the provided coordinate.\n   *\n   * This method is not available when the source is configured with\n   * `useSpatialIndex` set to `false`.\n   * @param {import(\"../coordinate.js\").Coordinate} coordinate Coordinate.\n   * @param {function(import(\"../Feature.js\").default):boolean=} opt_filter Feature filter function.\n   *     The filter function will receive one argument, the {@link module:ol/Feature feature}\n   *     and it should return a boolean value. By default, no filtering is made.\n   * @return {import(\"../Feature.js\").default} Closest feature.\n   * @api\n   */\n\n\n  VectorSource.prototype.getClosestFeatureToCoordinate = function getClosestFeatureToCoordinate(coordinate, opt_filter) {\n    // Find the closest feature using branch and bound.  We start searching an\n    // infinite extent, and find the distance from the first feature found.  This\n    // becomes the closest feature.  We then compute a smaller extent which any\n    // closer feature must intersect.  We continue searching with this smaller\n    // extent, trying to find a closer feature.  Every time we find a closer\n    // feature, we update the extent being searched so that any even closer\n    // feature must intersect it.  We continue until we run out of features.\n    var x = coordinate[0];\n    var y = coordinate[1];\n    var closestFeature = null;\n    var closestPoint = [NaN, NaN];\n    var minSquaredDistance = Infinity;\n    var extent = [-Infinity, -Infinity, Infinity, Infinity];\n    var filter = opt_filter ? opt_filter : TRUE;\n    this.featuresRtree_.forEachInExtent(extent,\n    /**\n     * @param {import(\"../Feature.js\").default} feature Feature.\n     */\n    function (feature) {\n      if (filter(feature)) {\n        var geometry = feature.getGeometry();\n        var previousMinSquaredDistance = minSquaredDistance;\n        minSquaredDistance = geometry.closestPointXY(x, y, closestPoint, minSquaredDistance);\n\n        if (minSquaredDistance < previousMinSquaredDistance) {\n          closestFeature = feature; // This is sneaky.  Reduce the extent that it is currently being\n          // searched while the R-Tree traversal using this same extent object\n          // is still in progress.  This is safe because the new extent is\n          // strictly contained by the old extent.\n\n          var minDistance = Math.sqrt(minSquaredDistance);\n          extent[0] = x - minDistance;\n          extent[1] = y - minDistance;\n          extent[2] = x + minDistance;\n          extent[3] = y + minDistance;\n        }\n      }\n    });\n    return closestFeature;\n  };\n  /**\n   * Get the extent of the features currently in the source.\n   *\n   * This method is not available when the source is configured with\n   * `useSpatialIndex` set to `false`.\n   * @param {import(\"../extent.js\").Extent=} opt_extent Destination extent. If provided, no new extent\n   *     will be created. Instead, that extent's coordinates will be overwritten.\n   * @return {import(\"../extent.js\").Extent} Extent.\n   * @api\n   */\n\n\n  VectorSource.prototype.getExtent = function getExtent(opt_extent) {\n    return this.featuresRtree_.getExtent(opt_extent);\n  };\n  /**\n   * Get a feature by its identifier (the value returned by feature.getId()).\n   * Note that the index treats string and numeric identifiers as the same.  So\n   * `source.getFeatureById(2)` will return a feature with id `'2'` or `2`.\n   *\n   * @param {string|number} id Feature identifier.\n   * @return {import(\"../Feature.js\").default} The feature (or `null` if not found).\n   * @api\n   */\n\n\n  VectorSource.prototype.getFeatureById = function getFeatureById(id) {\n    var feature = this.idIndex_[id.toString()];\n    return feature !== undefined ? feature : null;\n  };\n  /**\n   * Get the format associated with this source.\n   *\n   * @return {import(\"../format/Feature.js\").default|undefined} The feature format.\n   * @api\n   */\n\n\n  VectorSource.prototype.getFormat = function getFormat() {\n    return this.format_;\n  };\n  /**\n   * @return {boolean} The source can have overlapping geometries.\n   */\n\n\n  VectorSource.prototype.getOverlaps = function getOverlaps() {\n    return this.overlaps_;\n  };\n  /**\n   * Get the url associated with this source.\n   *\n   * @return {string|import(\"../featureloader.js\").FeatureUrlFunction|undefined} The url.\n   * @api\n   */\n\n\n  VectorSource.prototype.getUrl = function getUrl() {\n    return this.url_;\n  };\n  /**\n   * @param {Event} event Event.\n   * @private\n   */\n\n\n  VectorSource.prototype.handleFeatureChange_ = function handleFeatureChange_(event) {\n    var feature =\n    /** @type {import(\"../Feature.js\").default} */\n    event.target;\n    var featureKey = getUid(feature);\n    var geometry = feature.getGeometry();\n\n    if (!geometry) {\n      if (!(featureKey in this.nullGeometryFeatures_)) {\n        if (this.featuresRtree_) {\n          this.featuresRtree_.remove(feature);\n        }\n\n        this.nullGeometryFeatures_[featureKey] = feature;\n      }\n    } else {\n      var extent = geometry.getExtent();\n\n      if (featureKey in this.nullGeometryFeatures_) {\n        delete this.nullGeometryFeatures_[featureKey];\n\n        if (this.featuresRtree_) {\n          this.featuresRtree_.insert(extent, feature);\n        }\n      } else {\n        if (this.featuresRtree_) {\n          this.featuresRtree_.update(extent, feature);\n        }\n      }\n    }\n\n    var id = feature.getId();\n\n    if (id !== undefined) {\n      var sid = id.toString();\n\n      if (featureKey in this.undefIdIndex_) {\n        delete this.undefIdIndex_[featureKey];\n        this.idIndex_[sid] = feature;\n      } else {\n        if (this.idIndex_[sid] !== feature) {\n          this.removeFromIdIndex_(feature);\n          this.idIndex_[sid] = feature;\n        }\n      }\n    } else {\n      if (!(featureKey in this.undefIdIndex_)) {\n        this.removeFromIdIndex_(feature);\n        this.undefIdIndex_[featureKey] = feature;\n      }\n    }\n\n    this.changed();\n    this.dispatchEvent(new VectorSourceEvent(VectorEventType.CHANGEFEATURE, feature));\n  };\n  /**\n   * Returns true if the feature is contained within the source.\n   * @param {import(\"../Feature.js\").default} feature Feature.\n   * @return {boolean} Has feature.\n   * @api\n   */\n\n\n  VectorSource.prototype.hasFeature = function hasFeature(feature) {\n    var id = feature.getId();\n\n    if (id !== undefined) {\n      return id in this.idIndex_;\n    } else {\n      return getUid(feature) in this.undefIdIndex_;\n    }\n  };\n  /**\n   * @return {boolean} Is empty.\n   */\n\n\n  VectorSource.prototype.isEmpty = function isEmpty$1() {\n    return this.featuresRtree_.isEmpty() && isEmpty(this.nullGeometryFeatures_);\n  };\n  /**\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @param {number} resolution Resolution.\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   */\n\n\n  VectorSource.prototype.loadFeatures = function loadFeatures(extent, resolution, projection) {\n    var this$1 = this;\n    var loadedExtentsRtree = this.loadedExtentsRtree_;\n    var extentsToLoad = this.strategy_(extent, resolution);\n    this.loading = false;\n\n    var loop = function (i, ii) {\n      var extentToLoad = extentsToLoad[i];\n      var alreadyLoaded = loadedExtentsRtree.forEachInExtent(extentToLoad,\n      /**\n       * @param {{extent: import(\"../extent.js\").Extent}} object Object.\n       * @return {boolean} Contains.\n       */\n      function (object) {\n        return containsExtent(object.extent, extentToLoad);\n      });\n\n      if (!alreadyLoaded) {\n        this$1.loader_.call(this$1, extentToLoad, resolution, projection);\n        loadedExtentsRtree.insert(extentToLoad, {\n          extent: extentToLoad.slice()\n        });\n        this$1.loading = this$1.loader_ !== VOID;\n      }\n    };\n\n    for (var i = 0, ii = extentsToLoad.length; i < ii; ++i) loop(i, ii);\n  };\n  /**\n   * Remove an extent from the list of loaded extents.\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @api\n   */\n\n\n  VectorSource.prototype.removeLoadedExtent = function removeLoadedExtent(extent) {\n    var loadedExtentsRtree = this.loadedExtentsRtree_;\n    var obj;\n    loadedExtentsRtree.forEachInExtent(extent, function (object) {\n      if (equals(object.extent, extent)) {\n        obj = object;\n        return true;\n      }\n    });\n\n    if (obj) {\n      loadedExtentsRtree.remove(obj);\n    }\n  };\n  /**\n   * Remove a single feature from the source.  If you want to remove all features\n   * at once, use the {@link module:ol/source/Vector~VectorSource#clear #clear()} method\n   * instead.\n   * @param {import(\"../Feature.js\").default} feature Feature to remove.\n   * @api\n   */\n\n\n  VectorSource.prototype.removeFeature = function removeFeature(feature) {\n    var featureKey = getUid(feature);\n\n    if (featureKey in this.nullGeometryFeatures_) {\n      delete this.nullGeometryFeatures_[featureKey];\n    } else {\n      if (this.featuresRtree_) {\n        this.featuresRtree_.remove(feature);\n      }\n    }\n\n    this.removeFeatureInternal(feature);\n    this.changed();\n  };\n  /**\n   * Remove feature without firing a `change` event.\n   * @param {import(\"../Feature.js\").default} feature Feature.\n   * @protected\n   */\n\n\n  VectorSource.prototype.removeFeatureInternal = function removeFeatureInternal(feature) {\n    var featureKey = getUid(feature);\n    this.featureChangeKeys_[featureKey].forEach(unlistenByKey);\n    delete this.featureChangeKeys_[featureKey];\n    var id = feature.getId();\n\n    if (id !== undefined) {\n      delete this.idIndex_[id.toString()];\n    } else {\n      delete this.undefIdIndex_[featureKey];\n    }\n\n    this.dispatchEvent(new VectorSourceEvent(VectorEventType.REMOVEFEATURE, feature));\n  };\n  /**\n   * Remove a feature from the id index.  Called internally when the feature id\n   * may have changed.\n   * @param {import(\"../Feature.js\").default} feature The feature.\n   * @return {boolean} Removed the feature from the index.\n   * @private\n   */\n\n\n  VectorSource.prototype.removeFromIdIndex_ = function removeFromIdIndex_(feature) {\n    var removed = false;\n\n    for (var id in this.idIndex_) {\n      if (this.idIndex_[id] === feature) {\n        delete this.idIndex_[id];\n        removed = true;\n        break;\n      }\n    }\n\n    return removed;\n  };\n  /**\n   * Set the new loader of the source. The next loadFeatures call will use the\n   * new loader.\n   * @param {import(\"../featureloader.js\").FeatureLoader} loader The loader to set.\n   * @api\n   */\n\n\n  VectorSource.prototype.setLoader = function setLoader(loader) {\n    this.loader_ = loader;\n  };\n\n  return VectorSource;\n}(Source);\n\nexport default VectorSource;","map":{"version":3,"sources":["../../../src/ol/source/Vector.js"],"names":["super","const","let","i","length","feature","featureKey","ii","this"],"mappings":"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","sourcesContent":["/**\n * @module ol/source/Vector\n */\n\nimport {getUid} from '../util.js';\nimport Collection from '../Collection.js';\nimport CollectionEventType from '../CollectionEventType.js';\nimport ObjectEventType from '../ObjectEventType.js';\nimport {extend} from '../array.js';\nimport {assert} from '../asserts.js';\nimport {listen, unlistenByKey} from '../events.js';\nimport Event from '../events/Event.js';\nimport EventType from '../events/EventType.js';\nimport {containsExtent, equals} from '../extent.js';\nimport {xhr} from '../featureloader.js';\nimport {TRUE, VOID} from '../functions.js';\nimport {all as allStrategy} from '../loadingstrategy.js';\nimport {isEmpty, getValues} from '../obj.js';\nimport Source from './Source.js';\nimport SourceState from './State.js';\nimport VectorEventType from './VectorEventType.js';\nimport RBush from '../structs/RBush.js';\n\n/**\n * A function that takes an {@link module:ol/extent~Extent} and a resolution as arguments, and\n * returns an array of {@link module:ol/extent~Extent} with the extents to load. Usually this\n * is one of the standard {@link module:ol/loadingstrategy} strategies.\n *\n * @typedef {function(import(\"../extent.js\").Extent, number): Array<import(\"../extent.js\").Extent>} LoadingStrategy\n * @api\n */\n\n\n/**\n * @classdesc\n * Events emitted by {@link module:ol/source/Vector} instances are instances of this\n * type.\n */\nexport class VectorSourceEvent extends Event {\n\n  /**\n   * @param {string} type Type.\n   * @param {import(\"../Feature.js\").default=} opt_feature Feature.\n   */\n  constructor(type, opt_feature) {\n\n    super(type);\n\n    /**\n     * The feature being added or removed.\n     * @type {import(\"../Feature.js\").default|undefined}\n     * @api\n     */\n    this.feature = opt_feature;\n\n  }\n\n}\n\n\n/**\n * @typedef {Object} Options\n * @property {import(\"./Source.js\").AttributionLike} [attributions] Attributions.\n * @property {Array<import(\"../Feature.js\").default>|Collection<import(\"../Feature.js\").default>} [features]\n * Features. If provided as {@link module:ol/Collection}, the features in the source\n * and the collection will stay in sync.\n * @property {import(\"../format/Feature.js\").default} [format] The feature format used by the XHR\n * feature loader when `url` is set. Required if `url` is set, otherwise ignored.\n * @property {import(\"../featureloader.js\").FeatureLoader} [loader]\n * The loader function used to load features, from a remote source for example.\n * If this is not set and `url` is set, the source will create and use an XHR\n * feature loader.\n *\n * Example:\n *\n * ```js\n * import {Vector} from 'ol/source';\n * import {GeoJSON} from 'ol/format';\n * import {bbox} from 'ol/loadingstrategy';\n *\n * var vectorSource = new Vector({\n *   format: new GeoJSON(),\n *   loader: function(extent, resolution, projection) {\n *      var proj = projection.getCode();\n *      var url = 'https://ahocevar.com/geoserver/wfs?service=WFS&' +\n *          'version=1.1.0&request=GetFeature&typename=osm:water_areas&' +\n *          'outputFormat=application/json&srsname=' + proj + '&' +\n *          'bbox=' + extent.join(',') + ',' + proj;\n *      var xhr = new XMLHttpRequest();\n *      xhr.open('GET', url);\n *      var onError = function() {\n *        vectorSource.removeLoadedExtent(extent);\n *      }\n *      xhr.onerror = onError;\n *      xhr.onload = function() {\n *        if (xhr.status == 200) {\n *          vectorSource.addFeatures(\n *              vectorSource.getFormat().readFeatures(xhr.responseText));\n *        } else {\n *          onError();\n *        }\n *      }\n *      xhr.send();\n *    },\n *    strategy: bbox\n *  });\n * ```\n * @property {boolean} [overlaps=true] This source may have overlapping geometries.\n * Setting this to `false` (e.g. for sources with polygons that represent administrative\n * boundaries or TopoJSON sources) allows the renderer to optimise fill and\n * stroke operations.\n * @property {LoadingStrategy} [strategy] The loading strategy to use.\n * By default an {@link module:ol/loadingstrategy~all}\n * strategy is used, a one-off strategy which loads all features at once.\n * @property {string|import(\"../featureloader.js\").FeatureUrlFunction} [url]\n * Setting this option instructs the source to load features using an XHR loader\n * (see {@link module:ol/featureloader~xhr}). Use a `string` and an\n * {@link module:ol/loadingstrategy~all} for a one-off download of all features from\n * the given URL. Use a {@link module:ol/featureloader~FeatureUrlFunction} to generate the url with\n * other loading strategies.\n * Requires `format` to be set as well.\n * When default XHR feature loader is provided, the features will\n * be transformed from the data projection to the view projection\n * during parsing. If your remote data source does not advertise its projection\n * properly, this transformation will be incorrect. For some formats, the\n * default projection (usually EPSG:4326) can be overridden by setting the\n * dataProjection constructor option on the format.\n * Note that if a source contains non-feature data, such as a GeoJSON geometry\n * or a KML NetworkLink, these will be ignored. Use a custom loader to load these.\n * @property {boolean} [useSpatialIndex=true]\n * By default, an RTree is used as spatial index. When features are removed and\n * added frequently, and the total number of features is low, setting this to\n * `false` may improve performance.\n *\n * Note that\n * {@link module:ol/source/Vector~VectorSource#getFeaturesInExtent},\n * {@link module:ol/source/Vector~VectorSource#getClosestFeatureToCoordinate} and\n * {@link module:ol/source/Vector~VectorSource#getExtent} cannot be used when `useSpatialIndex` is\n * set to `false`, and {@link module:ol/source/Vector~VectorSource#forEachFeatureInExtent} will loop\n * through all features.\n *\n * When set to `false`, the features will be maintained in an\n * {@link module:ol/Collection}, which can be retrieved through\n * {@link module:ol/source/Vector~VectorSource#getFeaturesCollection}.\n * @property {boolean} [wrapX=true] Wrap the world horizontally. For vector editing across the\n * -180° and 180° meridians to work properly, this should be set to `false`. The\n * resulting geometry coordinates will then exceed the world bounds.\n */\n\n\n/**\n * @classdesc\n * Provides a source of features for vector layers. Vector features provided\n * by this source are suitable for editing. See {@link module:ol/source/VectorTile~VectorTile} for\n * vector data that is optimized for rendering.\n *\n * @fires ol/source/Vector.VectorSourceEvent\n * @api\n */\nclass VectorSource extends Source {\n  /**\n   * @param {Options=} opt_options Vector source options.\n   */\n  constructor(opt_options) {\n\n    const options = opt_options || {};\n\n    super({\n      attributions: options.attributions,\n      projection: undefined,\n      state: SourceState.READY,\n      wrapX: options.wrapX !== undefined ? options.wrapX : true\n    });\n\n    /**\n     * @private\n     * @type {import(\"../featureloader.js\").FeatureLoader}\n     */\n    this.loader_ = VOID;\n\n    /**\n     * @private\n     * @type {import(\"../format/Feature.js\").default|undefined}\n     */\n    this.format_ = options.format;\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.overlaps_ = options.overlaps == undefined ? true : options.overlaps;\n\n    /**\n     * @private\n     * @type {string|import(\"../featureloader.js\").FeatureUrlFunction|undefined}\n     */\n    this.url_ = options.url;\n\n    if (options.loader !== undefined) {\n      this.loader_ = options.loader;\n    } else if (this.url_ !== undefined) {\n      assert(this.format_, 7); // `format` must be set when `url` is set\n      // create a XHR feature loader for \"url\" and \"format\"\n      this.loader_ = xhr(this.url_, /** @type {import(\"../format/Feature.js\").default} */ (this.format_));\n    }\n\n    /**\n     * @private\n     * @type {LoadingStrategy}\n     */\n    this.strategy_ = options.strategy !== undefined ? options.strategy : allStrategy;\n\n    const useSpatialIndex =\n        options.useSpatialIndex !== undefined ? options.useSpatialIndex : true;\n\n    /**\n     * @private\n     * @type {RBush<import(\"../Feature.js\").default>}\n     */\n    this.featuresRtree_ = useSpatialIndex ? new RBush() : null;\n\n    /**\n     * @private\n     * @type {RBush<{extent: import(\"../extent.js\").Extent}>}\n     */\n    this.loadedExtentsRtree_ = new RBush();\n\n    /**\n     * @private\n     * @type {!Object<string, import(\"../Feature.js\").default>}\n     */\n    this.nullGeometryFeatures_ = {};\n\n    /**\n     * A lookup of features by id (the return from feature.getId()).\n     * @private\n     * @type {!Object<string, import(\"../Feature.js\").default>}\n     */\n    this.idIndex_ = {};\n\n    /**\n     * A lookup of features without id (keyed by getUid(feature)).\n     * @private\n     * @type {!Object<string, import(\"../Feature.js\").default>}\n     */\n    this.undefIdIndex_ = {};\n\n    /**\n     * @private\n     * @type {Object<string, Array<import(\"../events.js\").EventsKey>>}\n     */\n    this.featureChangeKeys_ = {};\n\n    /**\n     * @private\n     * @type {Collection<import(\"../Feature.js\").default>}\n     */\n    this.featuresCollection_ = null;\n\n    let collection, features;\n    if (Array.isArray(options.features)) {\n      features = options.features;\n    } else if (options.features) {\n      collection = options.features;\n      features = collection.getArray();\n    }\n    if (!useSpatialIndex && collection === undefined) {\n      collection = new Collection(features);\n    }\n    if (features !== undefined) {\n      this.addFeaturesInternal(features);\n    }\n    if (collection !== undefined) {\n      this.bindFeaturesCollection_(collection);\n    }\n\n  }\n\n  /**\n   * Add a single feature to the source.  If you want to add a batch of features\n   * at once, call {@link module:ol/source/Vector~VectorSource#addFeatures #addFeatures()}\n   * instead. A feature will not be added to the source if feature with\n   * the same id is already there. The reason for this behavior is to avoid\n   * feature duplication when using bbox or tile loading strategies.\n   * @param {import(\"../Feature.js\").default} feature Feature to add.\n   * @api\n   */\n  addFeature(feature) {\n    this.addFeatureInternal(feature);\n    this.changed();\n  }\n\n\n  /**\n   * Add a feature without firing a `change` event.\n   * @param {import(\"../Feature.js\").default} feature Feature.\n   * @protected\n   */\n  addFeatureInternal(feature) {\n    const featureKey = getUid(feature);\n\n    if (!this.addToIndex_(featureKey, feature)) {\n      return;\n    }\n\n    this.setupChangeEvents_(featureKey, feature);\n\n    const geometry = feature.getGeometry();\n    if (geometry) {\n      const extent = geometry.getExtent();\n      if (this.featuresRtree_) {\n        this.featuresRtree_.insert(extent, feature);\n      }\n    } else {\n      this.nullGeometryFeatures_[featureKey] = feature;\n    }\n\n    this.dispatchEvent(\n      new VectorSourceEvent(VectorEventType.ADDFEATURE, feature));\n  }\n\n\n  /**\n   * @param {string} featureKey Unique identifier for the feature.\n   * @param {import(\"../Feature.js\").default} feature The feature.\n   * @private\n   */\n  setupChangeEvents_(featureKey, feature) {\n    this.featureChangeKeys_[featureKey] = [\n      listen(feature, EventType.CHANGE,\n        this.handleFeatureChange_, this),\n      listen(feature, ObjectEventType.PROPERTYCHANGE,\n        this.handleFeatureChange_, this)\n    ];\n  }\n\n\n  /**\n   * @param {string} featureKey Unique identifier for the feature.\n   * @param {import(\"../Feature.js\").default} feature The feature.\n   * @return {boolean} The feature is \"valid\", in the sense that it is also a\n   *     candidate for insertion into the Rtree.\n   * @private\n   */\n  addToIndex_(featureKey, feature) {\n    let valid = true;\n    const id = feature.getId();\n    if (id !== undefined) {\n      if (!(id.toString() in this.idIndex_)) {\n        this.idIndex_[id.toString()] = feature;\n      } else {\n        valid = false;\n      }\n    } else {\n      assert(!(featureKey in this.undefIdIndex_),\n        30); // The passed `feature` was already added to the source\n      this.undefIdIndex_[featureKey] = feature;\n    }\n    return valid;\n  }\n\n\n  /**\n   * Add a batch of features to the source.\n   * @param {Array<import(\"../Feature.js\").default>} features Features to add.\n   * @api\n   */\n  addFeatures(features) {\n    this.addFeaturesInternal(features);\n    this.changed();\n  }\n\n\n  /**\n   * Add features without firing a `change` event.\n   * @param {Array<import(\"../Feature.js\").default>} features Features.\n   * @protected\n   */\n  addFeaturesInternal(features) {\n    const extents = [];\n    const newFeatures = [];\n    const geometryFeatures = [];\n\n    for (let i = 0, length = features.length; i < length; i++) {\n      const feature = features[i];\n      const featureKey = getUid(feature);\n      if (this.addToIndex_(featureKey, feature)) {\n        newFeatures.push(feature);\n      }\n    }\n\n    for (let i = 0, length = newFeatures.length; i < length; i++) {\n      const feature = newFeatures[i];\n      const featureKey = getUid(feature);\n      this.setupChangeEvents_(featureKey, feature);\n\n      const geometry = feature.getGeometry();\n      if (geometry) {\n        const extent = geometry.getExtent();\n        extents.push(extent);\n        geometryFeatures.push(feature);\n      } else {\n        this.nullGeometryFeatures_[featureKey] = feature;\n      }\n    }\n    if (this.featuresRtree_) {\n      this.featuresRtree_.load(extents, geometryFeatures);\n    }\n\n    for (let i = 0, length = newFeatures.length; i < length; i++) {\n      this.dispatchEvent(new VectorSourceEvent(VectorEventType.ADDFEATURE, newFeatures[i]));\n    }\n  }\n\n\n  /**\n   * @param {!Collection<import(\"../Feature.js\").default>} collection Collection.\n   * @private\n   */\n  bindFeaturesCollection_(collection) {\n    let modifyingCollection = false;\n    listen(this, VectorEventType.ADDFEATURE,\n      /**\n       * @param {VectorSourceEvent} evt The vector source event\n       */\n      function(evt) {\n        if (!modifyingCollection) {\n          modifyingCollection = true;\n          collection.push(evt.feature);\n          modifyingCollection = false;\n        }\n      });\n    listen(this, VectorEventType.REMOVEFEATURE,\n      /**\n       * @param {VectorSourceEvent} evt The vector source event\n       */\n      function(evt) {\n        if (!modifyingCollection) {\n          modifyingCollection = true;\n          collection.remove(evt.feature);\n          modifyingCollection = false;\n        }\n      });\n    listen(collection, CollectionEventType.ADD,\n      /**\n       * @param {import(\"../Collection.js\").CollectionEvent} evt The collection event\n       */\n      function(evt) {\n        if (!modifyingCollection) {\n          modifyingCollection = true;\n          this.addFeature(/** @type {import(\"../Feature.js\").default} */ (evt.element));\n          modifyingCollection = false;\n        }\n      }, this);\n    listen(collection, CollectionEventType.REMOVE,\n      /**\n       * @param {import(\"../Collection.js\").CollectionEvent} evt The collection event\n       */\n      function(evt) {\n        if (!modifyingCollection) {\n          modifyingCollection = true;\n          this.removeFeature(/** @type {import(\"../Feature.js\").default} */ (evt.element));\n          modifyingCollection = false;\n        }\n      }, this);\n    this.featuresCollection_ = collection;\n  }\n\n\n  /**\n   * Remove all features from the source.\n   * @param {boolean=} opt_fast Skip dispatching of {@link module:ol/source/Vector.VectorSourceEvent#removefeature} events.\n   * @api\n   */\n  clear(opt_fast) {\n    if (opt_fast) {\n      for (const featureId in this.featureChangeKeys_) {\n        const keys = this.featureChangeKeys_[featureId];\n        keys.forEach(unlistenByKey);\n      }\n      if (!this.featuresCollection_) {\n        this.featureChangeKeys_ = {};\n        this.idIndex_ = {};\n        this.undefIdIndex_ = {};\n      }\n    } else {\n      if (this.featuresRtree_) {\n        this.featuresRtree_.forEach(this.removeFeatureInternal, this);\n        for (const id in this.nullGeometryFeatures_) {\n          this.removeFeatureInternal(this.nullGeometryFeatures_[id]);\n        }\n      }\n    }\n    if (this.featuresCollection_) {\n      this.featuresCollection_.clear();\n    }\n\n    if (this.featuresRtree_) {\n      this.featuresRtree_.clear();\n    }\n    this.loadedExtentsRtree_.clear();\n    this.nullGeometryFeatures_ = {};\n\n    const clearEvent = new VectorSourceEvent(VectorEventType.CLEAR);\n    this.dispatchEvent(clearEvent);\n    this.changed();\n  }\n\n\n  /**\n   * Iterate through all features on the source, calling the provided callback\n   * with each one.  If the callback returns any \"truthy\" value, iteration will\n   * stop and the function will return the same value.\n   * Note: this function only iterate through the feature that have a defined geometry.\n   *\n   * @param {function(import(\"../Feature.js\").default): T} callback Called with each feature\n   *     on the source.  Return a truthy value to stop iteration.\n   * @return {T|undefined} The return value from the last call to the callback.\n   * @template T\n   * @api\n   */\n  forEachFeature(callback) {\n    if (this.featuresRtree_) {\n      return this.featuresRtree_.forEach(callback);\n    } else if (this.featuresCollection_) {\n      this.featuresCollection_.forEach(callback);\n    }\n  }\n\n\n  /**\n   * Iterate through all features whose geometries contain the provided\n   * coordinate, calling the callback with each feature.  If the callback returns\n   * a \"truthy\" value, iteration will stop and the function will return the same\n   * value.\n   *\n   * @param {import(\"../coordinate.js\").Coordinate} coordinate Coordinate.\n   * @param {function(import(\"../Feature.js\").default): T} callback Called with each feature\n   *     whose goemetry contains the provided coordinate.\n   * @return {T|undefined} The return value from the last call to the callback.\n   * @template T\n   */\n  forEachFeatureAtCoordinateDirect(coordinate, callback) {\n    const extent = [coordinate[0], coordinate[1], coordinate[0], coordinate[1]];\n    return this.forEachFeatureInExtent(extent, function(feature) {\n      const geometry = feature.getGeometry();\n      if (geometry.intersectsCoordinate(coordinate)) {\n        return callback(feature);\n      } else {\n        return undefined;\n      }\n    });\n  }\n\n\n  /**\n   * Iterate through all features whose bounding box intersects the provided\n   * extent (note that the feature's geometry may not intersect the extent),\n   * calling the callback with each feature.  If the callback returns a \"truthy\"\n   * value, iteration will stop and the function will return the same value.\n   *\n   * If you are interested in features whose geometry intersects an extent, call\n   * the {@link module:ol/source/Vector~VectorSource#forEachFeatureIntersectingExtent #forEachFeatureIntersectingExtent()} method instead.\n   *\n   * When `useSpatialIndex` is set to false, this method will loop through all\n   * features, equivalent to {@link module:ol/source/Vector~VectorSource#forEachFeature #forEachFeature()}.\n   *\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @param {function(import(\"../Feature.js\").default): T} callback Called with each feature\n   *     whose bounding box intersects the provided extent.\n   * @return {T|undefined} The return value from the last call to the callback.\n   * @template T\n   * @api\n   */\n  forEachFeatureInExtent(extent, callback) {\n    if (this.featuresRtree_) {\n      return this.featuresRtree_.forEachInExtent(extent, callback);\n    } else if (this.featuresCollection_) {\n      this.featuresCollection_.forEach(callback);\n    }\n  }\n\n\n  /**\n   * Iterate through all features whose geometry intersects the provided extent,\n   * calling the callback with each feature.  If the callback returns a \"truthy\"\n   * value, iteration will stop and the function will return the same value.\n   *\n   * If you only want to test for bounding box intersection, call the\n   * {@link module:ol/source/Vector~VectorSource#forEachFeatureInExtent #forEachFeatureInExtent()} method instead.\n   *\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @param {function(import(\"../Feature.js\").default): T} callback Called with each feature\n   *     whose geometry intersects the provided extent.\n   * @return {T|undefined} The return value from the last call to the callback.\n   * @template T\n   * @api\n   */\n  forEachFeatureIntersectingExtent(extent, callback) {\n    return this.forEachFeatureInExtent(extent,\n      /**\n       * @param {import(\"../Feature.js\").default} feature Feature.\n       * @return {T|undefined} The return value from the last call to the callback.\n       */\n      function(feature) {\n        const geometry = feature.getGeometry();\n        if (geometry.intersectsExtent(extent)) {\n          const result = callback(feature);\n          if (result) {\n            return result;\n          }\n        }\n      });\n  }\n\n\n  /**\n   * Get the features collection associated with this source. Will be `null`\n   * unless the source was configured with `useSpatialIndex` set to `false`, or\n   * with an {@link module:ol/Collection} as `features`.\n   * @return {Collection<import(\"../Feature.js\").default>} The collection of features.\n   * @api\n   */\n  getFeaturesCollection() {\n    return this.featuresCollection_;\n  }\n\n\n  /**\n   * Get all features on the source in random order.\n   * @return {Array<import(\"../Feature.js\").default>} Features.\n   * @api\n   */\n  getFeatures() {\n    let features;\n    if (this.featuresCollection_) {\n      features = this.featuresCollection_.getArray();\n    } else if (this.featuresRtree_) {\n      features = this.featuresRtree_.getAll();\n      if (!isEmpty(this.nullGeometryFeatures_)) {\n        extend(features, getValues(this.nullGeometryFeatures_));\n      }\n    }\n    return (\n      /** @type {Array<import(\"../Feature.js\").default>} */ (features)\n    );\n  }\n\n\n  /**\n   * Get all features whose geometry intersects the provided coordinate.\n   * @param {import(\"../coordinate.js\").Coordinate} coordinate Coordinate.\n   * @return {Array<import(\"../Feature.js\").default>} Features.\n   * @api\n   */\n  getFeaturesAtCoordinate(coordinate) {\n    const features = [];\n    this.forEachFeatureAtCoordinateDirect(coordinate, function(feature) {\n      features.push(feature);\n    });\n    return features;\n  }\n\n\n  /**\n   * Get all features in the provided extent.  Note that this returns an array of\n   * all features intersecting the given extent in random order (so it may include\n   * features whose geometries do not intersect the extent).\n   *\n   * This method is not available when the source is configured with\n   * `useSpatialIndex` set to `false`.\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @return {Array<import(\"../Feature.js\").default>} Features.\n   * @api\n   */\n  getFeaturesInExtent(extent) {\n    return this.featuresRtree_.getInExtent(extent);\n  }\n\n\n  /**\n   * Get the closest feature to the provided coordinate.\n   *\n   * This method is not available when the source is configured with\n   * `useSpatialIndex` set to `false`.\n   * @param {import(\"../coordinate.js\").Coordinate} coordinate Coordinate.\n   * @param {function(import(\"../Feature.js\").default):boolean=} opt_filter Feature filter function.\n   *     The filter function will receive one argument, the {@link module:ol/Feature feature}\n   *     and it should return a boolean value. By default, no filtering is made.\n   * @return {import(\"../Feature.js\").default} Closest feature.\n   * @api\n   */\n  getClosestFeatureToCoordinate(coordinate, opt_filter) {\n    // Find the closest feature using branch and bound.  We start searching an\n    // infinite extent, and find the distance from the first feature found.  This\n    // becomes the closest feature.  We then compute a smaller extent which any\n    // closer feature must intersect.  We continue searching with this smaller\n    // extent, trying to find a closer feature.  Every time we find a closer\n    // feature, we update the extent being searched so that any even closer\n    // feature must intersect it.  We continue until we run out of features.\n    const x = coordinate[0];\n    const y = coordinate[1];\n    let closestFeature = null;\n    const closestPoint = [NaN, NaN];\n    let minSquaredDistance = Infinity;\n    const extent = [-Infinity, -Infinity, Infinity, Infinity];\n    const filter = opt_filter ? opt_filter : TRUE;\n    this.featuresRtree_.forEachInExtent(extent,\n      /**\n       * @param {import(\"../Feature.js\").default} feature Feature.\n       */\n      function(feature) {\n        if (filter(feature)) {\n          const geometry = feature.getGeometry();\n          const previousMinSquaredDistance = minSquaredDistance;\n          minSquaredDistance = geometry.closestPointXY(\n            x, y, closestPoint, minSquaredDistance);\n          if (minSquaredDistance < previousMinSquaredDistance) {\n            closestFeature = feature;\n            // This is sneaky.  Reduce the extent that it is currently being\n            // searched while the R-Tree traversal using this same extent object\n            // is still in progress.  This is safe because the new extent is\n            // strictly contained by the old extent.\n            const minDistance = Math.sqrt(minSquaredDistance);\n            extent[0] = x - minDistance;\n            extent[1] = y - minDistance;\n            extent[2] = x + minDistance;\n            extent[3] = y + minDistance;\n          }\n        }\n      });\n    return closestFeature;\n  }\n\n\n  /**\n   * Get the extent of the features currently in the source.\n   *\n   * This method is not available when the source is configured with\n   * `useSpatialIndex` set to `false`.\n   * @param {import(\"../extent.js\").Extent=} opt_extent Destination extent. If provided, no new extent\n   *     will be created. Instead, that extent's coordinates will be overwritten.\n   * @return {import(\"../extent.js\").Extent} Extent.\n   * @api\n   */\n  getExtent(opt_extent) {\n    return this.featuresRtree_.getExtent(opt_extent);\n  }\n\n\n  /**\n   * Get a feature by its identifier (the value returned by feature.getId()).\n   * Note that the index treats string and numeric identifiers as the same.  So\n   * `source.getFeatureById(2)` will return a feature with id `'2'` or `2`.\n   *\n   * @param {string|number} id Feature identifier.\n   * @return {import(\"../Feature.js\").default} The feature (or `null` if not found).\n   * @api\n   */\n  getFeatureById(id) {\n    const feature = this.idIndex_[id.toString()];\n    return feature !== undefined ? feature : null;\n  }\n\n\n  /**\n   * Get the format associated with this source.\n   *\n   * @return {import(\"../format/Feature.js\").default|undefined} The feature format.\n   * @api\n   */\n  getFormat() {\n    return this.format_;\n  }\n\n\n  /**\n   * @return {boolean} The source can have overlapping geometries.\n   */\n  getOverlaps() {\n    return this.overlaps_;\n  }\n\n\n  /**\n   * Get the url associated with this source.\n   *\n   * @return {string|import(\"../featureloader.js\").FeatureUrlFunction|undefined} The url.\n   * @api\n   */\n  getUrl() {\n    return this.url_;\n  }\n\n\n  /**\n   * @param {Event} event Event.\n   * @private\n   */\n  handleFeatureChange_(event) {\n    const feature = /** @type {import(\"../Feature.js\").default} */ (event.target);\n    const featureKey = getUid(feature);\n    const geometry = feature.getGeometry();\n    if (!geometry) {\n      if (!(featureKey in this.nullGeometryFeatures_)) {\n        if (this.featuresRtree_) {\n          this.featuresRtree_.remove(feature);\n        }\n        this.nullGeometryFeatures_[featureKey] = feature;\n      }\n    } else {\n      const extent = geometry.getExtent();\n      if (featureKey in this.nullGeometryFeatures_) {\n        delete this.nullGeometryFeatures_[featureKey];\n        if (this.featuresRtree_) {\n          this.featuresRtree_.insert(extent, feature);\n        }\n      } else {\n        if (this.featuresRtree_) {\n          this.featuresRtree_.update(extent, feature);\n        }\n      }\n    }\n    const id = feature.getId();\n    if (id !== undefined) {\n      const sid = id.toString();\n      if (featureKey in this.undefIdIndex_) {\n        delete this.undefIdIndex_[featureKey];\n        this.idIndex_[sid] = feature;\n      } else {\n        if (this.idIndex_[sid] !== feature) {\n          this.removeFromIdIndex_(feature);\n          this.idIndex_[sid] = feature;\n        }\n      }\n    } else {\n      if (!(featureKey in this.undefIdIndex_)) {\n        this.removeFromIdIndex_(feature);\n        this.undefIdIndex_[featureKey] = feature;\n      }\n    }\n    this.changed();\n    this.dispatchEvent(new VectorSourceEvent(\n      VectorEventType.CHANGEFEATURE, feature));\n  }\n\n  /**\n   * Returns true if the feature is contained within the source.\n   * @param {import(\"../Feature.js\").default} feature Feature.\n   * @return {boolean} Has feature.\n   * @api\n   */\n  hasFeature(feature) {\n    const id = feature.getId();\n    if (id !== undefined) {\n      return id in this.idIndex_;\n    } else {\n      return getUid(feature) in this.undefIdIndex_;\n    }\n  }\n\n  /**\n   * @return {boolean} Is empty.\n   */\n  isEmpty() {\n    return this.featuresRtree_.isEmpty() && isEmpty(this.nullGeometryFeatures_);\n  }\n\n\n  /**\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @param {number} resolution Resolution.\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   */\n  loadFeatures(extent, resolution, projection) {\n    const loadedExtentsRtree = this.loadedExtentsRtree_;\n    const extentsToLoad = this.strategy_(extent, resolution);\n    this.loading = false;\n    for (let i = 0, ii = extentsToLoad.length; i < ii; ++i) {\n      const extentToLoad = extentsToLoad[i];\n      const alreadyLoaded = loadedExtentsRtree.forEachInExtent(extentToLoad,\n        /**\n         * @param {{extent: import(\"../extent.js\").Extent}} object Object.\n         * @return {boolean} Contains.\n         */\n        function(object) {\n          return containsExtent(object.extent, extentToLoad);\n        });\n      if (!alreadyLoaded) {\n        this.loader_.call(this, extentToLoad, resolution, projection);\n        loadedExtentsRtree.insert(extentToLoad, {extent: extentToLoad.slice()});\n        this.loading = this.loader_ !== VOID;\n      }\n    }\n  }\n\n\n  /**\n   * Remove an extent from the list of loaded extents.\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @api\n   */\n  removeLoadedExtent(extent) {\n    const loadedExtentsRtree = this.loadedExtentsRtree_;\n    let obj;\n    loadedExtentsRtree.forEachInExtent(extent, function(object) {\n      if (equals(object.extent, extent)) {\n        obj = object;\n        return true;\n      }\n    });\n    if (obj) {\n      loadedExtentsRtree.remove(obj);\n    }\n  }\n\n\n  /**\n   * Remove a single feature from the source.  If you want to remove all features\n   * at once, use the {@link module:ol/source/Vector~VectorSource#clear #clear()} method\n   * instead.\n   * @param {import(\"../Feature.js\").default} feature Feature to remove.\n   * @api\n   */\n  removeFeature(feature) {\n    const featureKey = getUid(feature);\n    if (featureKey in this.nullGeometryFeatures_) {\n      delete this.nullGeometryFeatures_[featureKey];\n    } else {\n      if (this.featuresRtree_) {\n        this.featuresRtree_.remove(feature);\n      }\n    }\n    this.removeFeatureInternal(feature);\n    this.changed();\n  }\n\n\n  /**\n   * Remove feature without firing a `change` event.\n   * @param {import(\"../Feature.js\").default} feature Feature.\n   * @protected\n   */\n  removeFeatureInternal(feature) {\n    const featureKey = getUid(feature);\n    this.featureChangeKeys_[featureKey].forEach(unlistenByKey);\n    delete this.featureChangeKeys_[featureKey];\n    const id = feature.getId();\n    if (id !== undefined) {\n      delete this.idIndex_[id.toString()];\n    } else {\n      delete this.undefIdIndex_[featureKey];\n    }\n    this.dispatchEvent(new VectorSourceEvent(\n      VectorEventType.REMOVEFEATURE, feature));\n  }\n\n\n  /**\n   * Remove a feature from the id index.  Called internally when the feature id\n   * may have changed.\n   * @param {import(\"../Feature.js\").default} feature The feature.\n   * @return {boolean} Removed the feature from the index.\n   * @private\n   */\n  removeFromIdIndex_(feature) {\n    let removed = false;\n    for (const id in this.idIndex_) {\n      if (this.idIndex_[id] === feature) {\n        delete this.idIndex_[id];\n        removed = true;\n        break;\n      }\n    }\n    return removed;\n  }\n\n\n  /**\n   * Set the new loader of the source. The next loadFeatures call will use the\n   * new loader.\n   * @param {import(\"../featureloader.js\").FeatureLoader} loader The loader to set.\n   * @api\n   */\n  setLoader(loader) {\n    this.loader_ = loader;\n  }\n\n}\n\n\nexport default VectorSource;\n"]},"metadata":{},"sourceType":"module"}