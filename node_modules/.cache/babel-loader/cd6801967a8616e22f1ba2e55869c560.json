{"ast":null,"code":"/**\n * @module ol/geom/GeometryCollection\n */\nimport { listen, unlisten } from '../events.js';\nimport EventType from '../events/EventType.js';\nimport { createOrUpdateEmpty, closestSquaredDistanceXY, extend, getCenter } from '../extent.js';\nimport Geometry from './Geometry.js';\nimport GeometryType from './GeometryType.js';\nimport { clear } from '../obj.js';\n/**\n * @classdesc\n * An array of {@link module:ol/geom/Geometry} objects.\n *\n * @api\n */\n\nvar GeometryCollection =\n/*@__PURE__*/\nfunction (Geometry) {\n  function GeometryCollection(opt_geometries) {\n    Geometry.call(this);\n    /**\n     * @private\n     * @type {Array<Geometry>}\n     */\n\n    this.geometries_ = opt_geometries ? opt_geometries : null;\n    this.listenGeometriesChange_();\n  }\n\n  if (Geometry) GeometryCollection.__proto__ = Geometry;\n  GeometryCollection.prototype = Object.create(Geometry && Geometry.prototype);\n  GeometryCollection.prototype.constructor = GeometryCollection;\n  /**\n   * @private\n   */\n\n  GeometryCollection.prototype.unlistenGeometriesChange_ = function unlistenGeometriesChange_() {\n    if (!this.geometries_) {\n      return;\n    }\n\n    for (var i = 0, ii = this.geometries_.length; i < ii; ++i) {\n      unlisten(this.geometries_[i], EventType.CHANGE, this.changed, this);\n    }\n  };\n  /**\n   * @private\n   */\n\n\n  GeometryCollection.prototype.listenGeometriesChange_ = function listenGeometriesChange_() {\n    if (!this.geometries_) {\n      return;\n    }\n\n    for (var i = 0, ii = this.geometries_.length; i < ii; ++i) {\n      listen(this.geometries_[i], EventType.CHANGE, this.changed, this);\n    }\n  };\n  /**\n   * Make a complete copy of the geometry.\n   * @return {!GeometryCollection} Clone.\n   * @override\n   * @api\n   */\n\n\n  GeometryCollection.prototype.clone = function clone() {\n    var geometryCollection = new GeometryCollection(null);\n    geometryCollection.setGeometries(this.geometries_);\n    return geometryCollection;\n  };\n  /**\n   * @inheritDoc\n   */\n\n\n  GeometryCollection.prototype.closestPointXY = function closestPointXY(x, y, closestPoint, minSquaredDistance) {\n    if (minSquaredDistance < closestSquaredDistanceXY(this.getExtent(), x, y)) {\n      return minSquaredDistance;\n    }\n\n    var geometries = this.geometries_;\n\n    for (var i = 0, ii = geometries.length; i < ii; ++i) {\n      minSquaredDistance = geometries[i].closestPointXY(x, y, closestPoint, minSquaredDistance);\n    }\n\n    return minSquaredDistance;\n  };\n  /**\n   * @inheritDoc\n   */\n\n\n  GeometryCollection.prototype.containsXY = function containsXY(x, y) {\n    var geometries = this.geometries_;\n\n    for (var i = 0, ii = geometries.length; i < ii; ++i) {\n      if (geometries[i].containsXY(x, y)) {\n        return true;\n      }\n    }\n\n    return false;\n  };\n  /**\n   * @inheritDoc\n   */\n\n\n  GeometryCollection.prototype.computeExtent = function computeExtent(extent) {\n    createOrUpdateEmpty(extent);\n    var geometries = this.geometries_;\n\n    for (var i = 0, ii = geometries.length; i < ii; ++i) {\n      extend(extent, geometries[i].getExtent());\n    }\n\n    return extent;\n  };\n  /**\n   * Return the geometries that make up this geometry collection.\n   * @return {Array<Geometry>} Geometries.\n   * @api\n   */\n\n\n  GeometryCollection.prototype.getGeometries = function getGeometries() {\n    return cloneGeometries(this.geometries_);\n  };\n  /**\n   * @return {Array<Geometry>} Geometries.\n   */\n\n\n  GeometryCollection.prototype.getGeometriesArray = function getGeometriesArray() {\n    return this.geometries_;\n  };\n  /**\n   * @inheritDoc\n   */\n\n\n  GeometryCollection.prototype.getSimplifiedGeometry = function getSimplifiedGeometry(squaredTolerance) {\n    if (this.simplifiedGeometryRevision != this.getRevision()) {\n      clear(this.simplifiedGeometryCache);\n      this.simplifiedGeometryMaxMinSquaredTolerance = 0;\n      this.simplifiedGeometryRevision = this.getRevision();\n    }\n\n    if (squaredTolerance < 0 || this.simplifiedGeometryMaxMinSquaredTolerance !== 0 && squaredTolerance < this.simplifiedGeometryMaxMinSquaredTolerance) {\n      return this;\n    }\n\n    var key = squaredTolerance.toString();\n\n    if (this.simplifiedGeometryCache.hasOwnProperty(key)) {\n      return this.simplifiedGeometryCache[key];\n    } else {\n      var simplifiedGeometries = [];\n      var geometries = this.geometries_;\n      var simplified = false;\n\n      for (var i = 0, ii = geometries.length; i < ii; ++i) {\n        var geometry = geometries[i];\n        var simplifiedGeometry = geometry.getSimplifiedGeometry(squaredTolerance);\n        simplifiedGeometries.push(simplifiedGeometry);\n\n        if (simplifiedGeometry !== geometry) {\n          simplified = true;\n        }\n      }\n\n      if (simplified) {\n        var simplifiedGeometryCollection = new GeometryCollection(null);\n        simplifiedGeometryCollection.setGeometriesArray(simplifiedGeometries);\n        this.simplifiedGeometryCache[key] = simplifiedGeometryCollection;\n        return simplifiedGeometryCollection;\n      } else {\n        this.simplifiedGeometryMaxMinSquaredTolerance = squaredTolerance;\n        return this;\n      }\n    }\n  };\n  /**\n   * @inheritDoc\n   * @api\n   */\n\n\n  GeometryCollection.prototype.getType = function getType() {\n    return GeometryType.GEOMETRY_COLLECTION;\n  };\n  /**\n   * @inheritDoc\n   * @api\n   */\n\n\n  GeometryCollection.prototype.intersectsExtent = function intersectsExtent(extent) {\n    var geometries = this.geometries_;\n\n    for (var i = 0, ii = geometries.length; i < ii; ++i) {\n      if (geometries[i].intersectsExtent(extent)) {\n        return true;\n      }\n    }\n\n    return false;\n  };\n  /**\n   * @return {boolean} Is empty.\n   */\n\n\n  GeometryCollection.prototype.isEmpty = function isEmpty() {\n    return this.geometries_.length === 0;\n  };\n  /**\n   * @inheritDoc\n   * @api\n   */\n\n\n  GeometryCollection.prototype.rotate = function rotate(angle, anchor) {\n    var geometries = this.geometries_;\n\n    for (var i = 0, ii = geometries.length; i < ii; ++i) {\n      geometries[i].rotate(angle, anchor);\n    }\n\n    this.changed();\n  };\n  /**\n   * @inheritDoc\n   * @api\n   */\n\n\n  GeometryCollection.prototype.scale = function scale(sx, opt_sy, opt_anchor) {\n    var anchor = opt_anchor;\n\n    if (!anchor) {\n      anchor = getCenter(this.getExtent());\n    }\n\n    var geometries = this.geometries_;\n\n    for (var i = 0, ii = geometries.length; i < ii; ++i) {\n      geometries[i].scale(sx, opt_sy, anchor);\n    }\n\n    this.changed();\n  };\n  /**\n   * Set the geometries that make up this geometry collection.\n   * @param {Array<Geometry>} geometries Geometries.\n   * @api\n   */\n\n\n  GeometryCollection.prototype.setGeometries = function setGeometries(geometries) {\n    this.setGeometriesArray(cloneGeometries(geometries));\n  };\n  /**\n   * @param {Array<Geometry>} geometries Geometries.\n   */\n\n\n  GeometryCollection.prototype.setGeometriesArray = function setGeometriesArray(geometries) {\n    this.unlistenGeometriesChange_();\n    this.geometries_ = geometries;\n    this.listenGeometriesChange_();\n    this.changed();\n  };\n  /**\n   * @inheritDoc\n   * @api\n   */\n\n\n  GeometryCollection.prototype.applyTransform = function applyTransform(transformFn) {\n    var geometries = this.geometries_;\n\n    for (var i = 0, ii = geometries.length; i < ii; ++i) {\n      geometries[i].applyTransform(transformFn);\n    }\n\n    this.changed();\n  };\n  /**\n   * @inheritDoc\n   * @api\n   */\n\n\n  GeometryCollection.prototype.translate = function translate(deltaX, deltaY) {\n    var geometries = this.geometries_;\n\n    for (var i = 0, ii = geometries.length; i < ii; ++i) {\n      geometries[i].translate(deltaX, deltaY);\n    }\n\n    this.changed();\n  };\n  /**\n   * @inheritDoc\n   */\n\n\n  GeometryCollection.prototype.disposeInternal = function disposeInternal() {\n    this.unlistenGeometriesChange_();\n    Geometry.prototype.disposeInternal.call(this);\n  };\n\n  return GeometryCollection;\n}(Geometry);\n/**\n * @param {Array<Geometry>} geometries Geometries.\n * @return {Array<Geometry>} Cloned geometries.\n */\n\n\nfunction cloneGeometries(geometries) {\n  var clonedGeometries = [];\n\n  for (var i = 0, ii = geometries.length; i < ii; ++i) {\n    clonedGeometries.push(geometries[i].clone());\n  }\n\n  return clonedGeometries;\n}\n\nexport default GeometryCollection;","map":{"version":3,"sources":["../../../src/ol/geom/GeometryCollection.js"],"names":["super","let","const"],"mappings":"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","sourcesContent":["/**\n * @module ol/geom/GeometryCollection\n */\nimport {listen, unlisten} from '../events.js';\nimport EventType from '../events/EventType.js';\nimport {createOrUpdateEmpty, closestSquaredDistanceXY, extend, getCenter} from '../extent.js';\nimport Geometry from './Geometry.js';\nimport GeometryType from './GeometryType.js';\nimport {clear} from '../obj.js';\n\n/**\n * @classdesc\n * An array of {@link module:ol/geom/Geometry} objects.\n *\n * @api\n */\nclass GeometryCollection extends Geometry {\n\n  /**\n   * @param {Array<Geometry>=} opt_geometries Geometries.\n   */\n  constructor(opt_geometries) {\n\n    super();\n\n    /**\n     * @private\n     * @type {Array<Geometry>}\n     */\n    this.geometries_ = opt_geometries ? opt_geometries : null;\n\n    this.listenGeometriesChange_();\n  }\n\n  /**\n   * @private\n   */\n  unlistenGeometriesChange_() {\n    if (!this.geometries_) {\n      return;\n    }\n    for (let i = 0, ii = this.geometries_.length; i < ii; ++i) {\n      unlisten(\n        this.geometries_[i], EventType.CHANGE,\n        this.changed, this);\n    }\n  }\n\n  /**\n   * @private\n   */\n  listenGeometriesChange_() {\n    if (!this.geometries_) {\n      return;\n    }\n    for (let i = 0, ii = this.geometries_.length; i < ii; ++i) {\n      listen(\n        this.geometries_[i], EventType.CHANGE,\n        this.changed, this);\n    }\n  }\n\n  /**\n   * Make a complete copy of the geometry.\n   * @return {!GeometryCollection} Clone.\n   * @override\n   * @api\n   */\n  clone() {\n    const geometryCollection = new GeometryCollection(null);\n    geometryCollection.setGeometries(this.geometries_);\n    return geometryCollection;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  closestPointXY(x, y, closestPoint, minSquaredDistance) {\n    if (minSquaredDistance < closestSquaredDistanceXY(this.getExtent(), x, y)) {\n      return minSquaredDistance;\n    }\n    const geometries = this.geometries_;\n    for (let i = 0, ii = geometries.length; i < ii; ++i) {\n      minSquaredDistance = geometries[i].closestPointXY(\n        x, y, closestPoint, minSquaredDistance);\n    }\n    return minSquaredDistance;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  containsXY(x, y) {\n    const geometries = this.geometries_;\n    for (let i = 0, ii = geometries.length; i < ii; ++i) {\n      if (geometries[i].containsXY(x, y)) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  computeExtent(extent) {\n    createOrUpdateEmpty(extent);\n    const geometries = this.geometries_;\n    for (let i = 0, ii = geometries.length; i < ii; ++i) {\n      extend(extent, geometries[i].getExtent());\n    }\n    return extent;\n  }\n\n  /**\n   * Return the geometries that make up this geometry collection.\n   * @return {Array<Geometry>} Geometries.\n   * @api\n   */\n  getGeometries() {\n    return cloneGeometries(this.geometries_);\n  }\n\n  /**\n   * @return {Array<Geometry>} Geometries.\n   */\n  getGeometriesArray() {\n    return this.geometries_;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  getSimplifiedGeometry(squaredTolerance) {\n    if (this.simplifiedGeometryRevision != this.getRevision()) {\n      clear(this.simplifiedGeometryCache);\n      this.simplifiedGeometryMaxMinSquaredTolerance = 0;\n      this.simplifiedGeometryRevision = this.getRevision();\n    }\n    if (squaredTolerance < 0 ||\n        (this.simplifiedGeometryMaxMinSquaredTolerance !== 0 &&\n         squaredTolerance < this.simplifiedGeometryMaxMinSquaredTolerance)) {\n      return this;\n    }\n    const key = squaredTolerance.toString();\n    if (this.simplifiedGeometryCache.hasOwnProperty(key)) {\n      return this.simplifiedGeometryCache[key];\n    } else {\n      const simplifiedGeometries = [];\n      const geometries = this.geometries_;\n      let simplified = false;\n      for (let i = 0, ii = geometries.length; i < ii; ++i) {\n        const geometry = geometries[i];\n        const simplifiedGeometry = geometry.getSimplifiedGeometry(squaredTolerance);\n        simplifiedGeometries.push(simplifiedGeometry);\n        if (simplifiedGeometry !== geometry) {\n          simplified = true;\n        }\n      }\n      if (simplified) {\n        const simplifiedGeometryCollection = new GeometryCollection(null);\n        simplifiedGeometryCollection.setGeometriesArray(simplifiedGeometries);\n        this.simplifiedGeometryCache[key] = simplifiedGeometryCollection;\n        return simplifiedGeometryCollection;\n      } else {\n        this.simplifiedGeometryMaxMinSquaredTolerance = squaredTolerance;\n        return this;\n      }\n    }\n  }\n\n  /**\n   * @inheritDoc\n   * @api\n   */\n  getType() {\n    return GeometryType.GEOMETRY_COLLECTION;\n  }\n\n  /**\n   * @inheritDoc\n   * @api\n   */\n  intersectsExtent(extent) {\n    const geometries = this.geometries_;\n    for (let i = 0, ii = geometries.length; i < ii; ++i) {\n      if (geometries[i].intersectsExtent(extent)) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  /**\n   * @return {boolean} Is empty.\n   */\n  isEmpty() {\n    return this.geometries_.length === 0;\n  }\n\n  /**\n   * @inheritDoc\n   * @api\n   */\n  rotate(angle, anchor) {\n    const geometries = this.geometries_;\n    for (let i = 0, ii = geometries.length; i < ii; ++i) {\n      geometries[i].rotate(angle, anchor);\n    }\n    this.changed();\n  }\n\n  /**\n   * @inheritDoc\n   * @api\n   */\n  scale(sx, opt_sy, opt_anchor) {\n    let anchor = opt_anchor;\n    if (!anchor) {\n      anchor = getCenter(this.getExtent());\n    }\n    const geometries = this.geometries_;\n    for (let i = 0, ii = geometries.length; i < ii; ++i) {\n      geometries[i].scale(sx, opt_sy, anchor);\n    }\n    this.changed();\n  }\n\n  /**\n   * Set the geometries that make up this geometry collection.\n   * @param {Array<Geometry>} geometries Geometries.\n   * @api\n   */\n  setGeometries(geometries) {\n    this.setGeometriesArray(cloneGeometries(geometries));\n  }\n\n  /**\n   * @param {Array<Geometry>} geometries Geometries.\n   */\n  setGeometriesArray(geometries) {\n    this.unlistenGeometriesChange_();\n    this.geometries_ = geometries;\n    this.listenGeometriesChange_();\n    this.changed();\n  }\n\n  /**\n   * @inheritDoc\n   * @api\n   */\n  applyTransform(transformFn) {\n    const geometries = this.geometries_;\n    for (let i = 0, ii = geometries.length; i < ii; ++i) {\n      geometries[i].applyTransform(transformFn);\n    }\n    this.changed();\n  }\n\n  /**\n   * @inheritDoc\n   * @api\n   */\n  translate(deltaX, deltaY) {\n    const geometries = this.geometries_;\n    for (let i = 0, ii = geometries.length; i < ii; ++i) {\n      geometries[i].translate(deltaX, deltaY);\n    }\n    this.changed();\n  }\n\n  /**\n   * @inheritDoc\n   */\n  disposeInternal() {\n    this.unlistenGeometriesChange_();\n    super.disposeInternal();\n  }\n}\n\n\n/**\n * @param {Array<Geometry>} geometries Geometries.\n * @return {Array<Geometry>} Cloned geometries.\n */\nfunction cloneGeometries(geometries) {\n  const clonedGeometries = [];\n  for (let i = 0, ii = geometries.length; i < ii; ++i) {\n    clonedGeometries.push(geometries[i].clone());\n  }\n  return clonedGeometries;\n}\n\n\nexport default GeometryCollection;\n"]},"metadata":{},"sourceType":"module"}