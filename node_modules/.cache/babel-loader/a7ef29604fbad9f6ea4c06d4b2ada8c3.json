{"ast":null,"code":"/**\n * @module ol/format/XMLFeature\n */\nimport { abstract } from '../util.js';\nimport { extend } from '../array.js';\nimport FeatureFormat from '../format/Feature.js';\nimport FormatType from '../format/FormatType.js';\nimport { isDocument, parse } from '../xml.js';\n/**\n * @classdesc\n * Abstract base class; normally only used for creating subclasses and not\n * instantiated in apps.\n * Base class for XML feature formats.\n *\n * @abstract\n */\n\nvar XMLFeature =\n/*@__PURE__*/\nfunction (FeatureFormat) {\n  function XMLFeature() {\n    FeatureFormat.call(this);\n    /**\n     * @type {XMLSerializer}\n     * @private\n     */\n\n    this.xmlSerializer_ = new XMLSerializer();\n  }\n\n  if (FeatureFormat) XMLFeature.__proto__ = FeatureFormat;\n  XMLFeature.prototype = Object.create(FeatureFormat && FeatureFormat.prototype);\n  XMLFeature.prototype.constructor = XMLFeature;\n  /**\n   * @inheritDoc\n   */\n\n  XMLFeature.prototype.getType = function getType() {\n    return FormatType.XML;\n  };\n  /**\n   * Read a single feature.\n   *\n   * @param {Document|Node|Object|string} source Source.\n   * @param {import(\"./Feature.js\").ReadOptions=} opt_options Read options.\n   * @return {import(\"../Feature.js\").default} Feature.\n   * @api\n   */\n\n\n  XMLFeature.prototype.readFeature = function readFeature(source, opt_options) {\n    if (!source) {\n      return null;\n    } else if (typeof source === 'string') {\n      var doc = parse(source);\n      return this.readFeatureFromDocument(doc, opt_options);\n    } else if (isDocument(source)) {\n      return this.readFeatureFromDocument(\n      /** @type {Document} */\n      source, opt_options);\n    } else {\n      return this.readFeatureFromNode(\n      /** @type {Node} */\n      source, opt_options);\n    }\n  };\n  /**\n   * @param {Document} doc Document.\n   * @param {import(\"./Feature.js\").ReadOptions=} opt_options Options.\n   * @return {import(\"../Feature.js\").default} Feature.\n   */\n\n\n  XMLFeature.prototype.readFeatureFromDocument = function readFeatureFromDocument(doc, opt_options) {\n    var features = this.readFeaturesFromDocument(doc, opt_options);\n\n    if (features.length > 0) {\n      return features[0];\n    } else {\n      return null;\n    }\n  };\n  /**\n   * @param {Node} node Node.\n   * @param {import(\"./Feature.js\").ReadOptions=} opt_options Options.\n   * @return {import(\"../Feature.js\").default} Feature.\n   */\n\n\n  XMLFeature.prototype.readFeatureFromNode = function readFeatureFromNode(node, opt_options) {\n    return null; // not implemented\n  };\n  /**\n   * Read all features from a feature collection.\n   *\n   * @param {Document|Node|Object|string} source Source.\n   * @param {import(\"./Feature.js\").ReadOptions=} opt_options Options.\n   * @return {Array<import(\"../Feature.js\").default>} Features.\n   * @api\n   */\n\n\n  XMLFeature.prototype.readFeatures = function readFeatures(source, opt_options) {\n    if (!source) {\n      return [];\n    } else if (typeof source === 'string') {\n      var doc = parse(source);\n      return this.readFeaturesFromDocument(doc, opt_options);\n    } else if (isDocument(source)) {\n      return this.readFeaturesFromDocument(\n      /** @type {Document} */\n      source, opt_options);\n    } else {\n      return this.readFeaturesFromNode(\n      /** @type {Node} */\n      source, opt_options);\n    }\n  };\n  /**\n   * @param {Document} doc Document.\n   * @param {import(\"./Feature.js\").ReadOptions=} opt_options Options.\n   * @protected\n   * @return {Array<import(\"../Feature.js\").default>} Features.\n   */\n\n\n  XMLFeature.prototype.readFeaturesFromDocument = function readFeaturesFromDocument(doc, opt_options) {\n    /** @type {Array<import(\"../Feature.js\").default>} */\n    var features = [];\n\n    for (var n =\n    /** @type {Node} */\n    doc.firstChild; n; n = n.nextSibling) {\n      if (n.nodeType == Node.ELEMENT_NODE) {\n        extend(features, this.readFeaturesFromNode(n, opt_options));\n      }\n    }\n\n    return features;\n  };\n  /**\n   * @abstract\n   * @param {Node} node Node.\n   * @param {import(\"./Feature.js\").ReadOptions=} opt_options Options.\n   * @protected\n   * @return {Array<import(\"../Feature.js\").default>} Features.\n   */\n\n\n  XMLFeature.prototype.readFeaturesFromNode = function readFeaturesFromNode(node, opt_options) {\n    return abstract();\n  };\n  /**\n   * @inheritDoc\n   */\n\n\n  XMLFeature.prototype.readGeometry = function readGeometry(source, opt_options) {\n    if (!source) {\n      return null;\n    } else if (typeof source === 'string') {\n      var doc = parse(source);\n      return this.readGeometryFromDocument(doc, opt_options);\n    } else if (isDocument(source)) {\n      return this.readGeometryFromDocument(\n      /** @type {Document} */\n      source, opt_options);\n    } else {\n      return this.readGeometryFromNode(\n      /** @type {Node} */\n      source, opt_options);\n    }\n  };\n  /**\n   * @param {Document} doc Document.\n   * @param {import(\"./Feature.js\").ReadOptions=} opt_options Options.\n   * @protected\n   * @return {import(\"../geom/Geometry.js\").default} Geometry.\n   */\n\n\n  XMLFeature.prototype.readGeometryFromDocument = function readGeometryFromDocument(doc, opt_options) {\n    return null; // not implemented\n  };\n  /**\n   * @param {Node} node Node.\n   * @param {import(\"./Feature.js\").ReadOptions=} opt_options Options.\n   * @protected\n   * @return {import(\"../geom/Geometry.js\").default} Geometry.\n   */\n\n\n  XMLFeature.prototype.readGeometryFromNode = function readGeometryFromNode(node, opt_options) {\n    return null; // not implemented\n  };\n  /**\n   * Read the projection from the source.\n   *\n   * @param {Document|Node|Object|string} source Source.\n   * @return {import(\"../proj/Projection.js\").default} Projection.\n   * @api\n   */\n\n\n  XMLFeature.prototype.readProjection = function readProjection(source) {\n    if (!source) {\n      return null;\n    } else if (typeof source === 'string') {\n      var doc = parse(source);\n      return this.readProjectionFromDocument(doc);\n    } else if (isDocument(source)) {\n      return this.readProjectionFromDocument(\n      /** @type {Document} */\n      source);\n    } else {\n      return this.readProjectionFromNode(\n      /** @type {Node} */\n      source);\n    }\n  };\n  /**\n   * @param {Document} doc Document.\n   * @protected\n   * @return {import(\"../proj/Projection.js\").default} Projection.\n   */\n\n\n  XMLFeature.prototype.readProjectionFromDocument = function readProjectionFromDocument(doc) {\n    return this.dataProjection;\n  };\n  /**\n   * @param {Node} node Node.\n   * @protected\n   * @return {import(\"../proj/Projection.js\").default} Projection.\n   */\n\n\n  XMLFeature.prototype.readProjectionFromNode = function readProjectionFromNode(node) {\n    return this.dataProjection;\n  };\n  /**\n   * @inheritDoc\n   */\n\n\n  XMLFeature.prototype.writeFeature = function writeFeature(feature, opt_options) {\n    var node = this.writeFeatureNode(feature, opt_options);\n    return this.xmlSerializer_.serializeToString(node);\n  };\n  /**\n   * @param {import(\"../Feature.js\").default} feature Feature.\n   * @param {import(\"./Feature.js\").WriteOptions=} opt_options Options.\n   * @protected\n   * @return {Node} Node.\n   */\n\n\n  XMLFeature.prototype.writeFeatureNode = function writeFeatureNode(feature, opt_options) {\n    return null; // not implemented\n  };\n  /**\n   * Encode an array of features as string.\n   *\n   * @param {Array<import(\"../Feature.js\").default>} features Features.\n   * @param {import(\"./Feature.js\").WriteOptions=} opt_options Write options.\n   * @return {string} Result.\n   * @api\n   */\n\n\n  XMLFeature.prototype.writeFeatures = function writeFeatures(features, opt_options) {\n    var node = this.writeFeaturesNode(features, opt_options);\n    return this.xmlSerializer_.serializeToString(node);\n  };\n  /**\n   * @param {Array<import(\"../Feature.js\").default>} features Features.\n   * @param {import(\"./Feature.js\").WriteOptions=} opt_options Options.\n   * @return {Node} Node.\n   */\n\n\n  XMLFeature.prototype.writeFeaturesNode = function writeFeaturesNode(features, opt_options) {\n    return null; // not implemented\n  };\n  /**\n   * @inheritDoc\n   */\n\n\n  XMLFeature.prototype.writeGeometry = function writeGeometry(geometry, opt_options) {\n    var node = this.writeGeometryNode(geometry, opt_options);\n    return this.xmlSerializer_.serializeToString(node);\n  };\n  /**\n   * @param {import(\"../geom/Geometry.js\").default} geometry Geometry.\n   * @param {import(\"./Feature.js\").WriteOptions=} opt_options Options.\n   * @return {Node} Node.\n   */\n\n\n  XMLFeature.prototype.writeGeometryNode = function writeGeometryNode(geometry, opt_options) {\n    return null; // not implemented\n  };\n\n  return XMLFeature;\n}(FeatureFormat);\n\nexport default XMLFeature;","map":{"version":3,"sources":["../../../src/ol/format/XMLFeature.js"],"names":["super","const","let"],"mappings":"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","sourcesContent":["/**\n * @module ol/format/XMLFeature\n */\nimport {abstract} from '../util.js';\nimport {extend} from '../array.js';\nimport FeatureFormat from '../format/Feature.js';\nimport FormatType from '../format/FormatType.js';\nimport {isDocument, parse} from '../xml.js';\n\n/**\n * @classdesc\n * Abstract base class; normally only used for creating subclasses and not\n * instantiated in apps.\n * Base class for XML feature formats.\n *\n * @abstract\n */\nclass XMLFeature extends FeatureFormat {\n  constructor() {\n    super();\n\n    /**\n     * @type {XMLSerializer}\n     * @private\n     */\n    this.xmlSerializer_ = new XMLSerializer();\n  }\n\n  /**\n   * @inheritDoc\n   */\n  getType() {\n    return FormatType.XML;\n  }\n\n  /**\n   * Read a single feature.\n   *\n   * @param {Document|Node|Object|string} source Source.\n   * @param {import(\"./Feature.js\").ReadOptions=} opt_options Read options.\n   * @return {import(\"../Feature.js\").default} Feature.\n   * @api\n   */\n  readFeature(source, opt_options) {\n    if (!source) {\n      return null;\n    } else if (typeof source === 'string') {\n      const doc = parse(source);\n      return this.readFeatureFromDocument(doc, opt_options);\n    } else if (isDocument(source)) {\n      return this.readFeatureFromDocument(/** @type {Document} */ (source), opt_options);\n    } else {\n      return this.readFeatureFromNode(/** @type {Node} */ (source), opt_options);\n    }\n  }\n\n  /**\n   * @param {Document} doc Document.\n   * @param {import(\"./Feature.js\").ReadOptions=} opt_options Options.\n   * @return {import(\"../Feature.js\").default} Feature.\n   */\n  readFeatureFromDocument(doc, opt_options) {\n    const features = this.readFeaturesFromDocument(doc, opt_options);\n    if (features.length > 0) {\n      return features[0];\n    } else {\n      return null;\n    }\n  }\n\n  /**\n   * @param {Node} node Node.\n   * @param {import(\"./Feature.js\").ReadOptions=} opt_options Options.\n   * @return {import(\"../Feature.js\").default} Feature.\n   */\n  readFeatureFromNode(node, opt_options) {\n    return null; // not implemented\n  }\n\n  /**\n   * Read all features from a feature collection.\n   *\n   * @param {Document|Node|Object|string} source Source.\n   * @param {import(\"./Feature.js\").ReadOptions=} opt_options Options.\n   * @return {Array<import(\"../Feature.js\").default>} Features.\n   * @api\n   */\n  readFeatures(source, opt_options) {\n    if (!source) {\n      return [];\n    } else if (typeof source === 'string') {\n      const doc = parse(source);\n      return this.readFeaturesFromDocument(doc, opt_options);\n    } else if (isDocument(source)) {\n      return this.readFeaturesFromDocument(\n        /** @type {Document} */ (source), opt_options);\n    } else {\n      return this.readFeaturesFromNode(/** @type {Node} */ (source), opt_options);\n    }\n  }\n\n  /**\n   * @param {Document} doc Document.\n   * @param {import(\"./Feature.js\").ReadOptions=} opt_options Options.\n   * @protected\n   * @return {Array<import(\"../Feature.js\").default>} Features.\n   */\n  readFeaturesFromDocument(doc, opt_options) {\n    /** @type {Array<import(\"../Feature.js\").default>} */\n    const features = [];\n    for (let n = /** @type {Node} */ (doc.firstChild); n; n = n.nextSibling) {\n      if (n.nodeType == Node.ELEMENT_NODE) {\n        extend(features, this.readFeaturesFromNode(n, opt_options));\n      }\n    }\n    return features;\n  }\n\n  /**\n   * @abstract\n   * @param {Node} node Node.\n   * @param {import(\"./Feature.js\").ReadOptions=} opt_options Options.\n   * @protected\n   * @return {Array<import(\"../Feature.js\").default>} Features.\n   */\n  readFeaturesFromNode(node, opt_options) {\n    return abstract();\n  }\n\n  /**\n   * @inheritDoc\n   */\n  readGeometry(source, opt_options) {\n    if (!source) {\n      return null;\n    } else if (typeof source === 'string') {\n      const doc = parse(source);\n      return this.readGeometryFromDocument(doc, opt_options);\n    } else if (isDocument(source)) {\n      return this.readGeometryFromDocument(\n        /** @type {Document} */ (source), opt_options);\n    } else {\n      return this.readGeometryFromNode(/** @type {Node} */ (source), opt_options);\n    }\n  }\n\n  /**\n   * @param {Document} doc Document.\n   * @param {import(\"./Feature.js\").ReadOptions=} opt_options Options.\n   * @protected\n   * @return {import(\"../geom/Geometry.js\").default} Geometry.\n   */\n  readGeometryFromDocument(doc, opt_options) {\n    return null; // not implemented\n  }\n\n  /**\n   * @param {Node} node Node.\n   * @param {import(\"./Feature.js\").ReadOptions=} opt_options Options.\n   * @protected\n   * @return {import(\"../geom/Geometry.js\").default} Geometry.\n   */\n  readGeometryFromNode(node, opt_options) {\n    return null; // not implemented\n  }\n\n  /**\n   * Read the projection from the source.\n   *\n   * @param {Document|Node|Object|string} source Source.\n   * @return {import(\"../proj/Projection.js\").default} Projection.\n   * @api\n   */\n  readProjection(source) {\n    if (!source) {\n      return null;\n    } else if (typeof source === 'string') {\n      const doc = parse(source);\n      return this.readProjectionFromDocument(doc);\n    } else if (isDocument(source)) {\n      return this.readProjectionFromDocument(/** @type {Document} */ (source));\n    } else {\n      return this.readProjectionFromNode(/** @type {Node} */ (source));\n    }\n  }\n\n  /**\n   * @param {Document} doc Document.\n   * @protected\n   * @return {import(\"../proj/Projection.js\").default} Projection.\n   */\n  readProjectionFromDocument(doc) {\n    return this.dataProjection;\n  }\n\n  /**\n   * @param {Node} node Node.\n   * @protected\n   * @return {import(\"../proj/Projection.js\").default} Projection.\n   */\n  readProjectionFromNode(node) {\n    return this.dataProjection;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  writeFeature(feature, opt_options) {\n    const node = this.writeFeatureNode(feature, opt_options);\n    return this.xmlSerializer_.serializeToString(node);\n  }\n\n  /**\n   * @param {import(\"../Feature.js\").default} feature Feature.\n   * @param {import(\"./Feature.js\").WriteOptions=} opt_options Options.\n   * @protected\n   * @return {Node} Node.\n   */\n  writeFeatureNode(feature, opt_options) {\n    return null; // not implemented\n  }\n\n  /**\n   * Encode an array of features as string.\n   *\n   * @param {Array<import(\"../Feature.js\").default>} features Features.\n   * @param {import(\"./Feature.js\").WriteOptions=} opt_options Write options.\n   * @return {string} Result.\n   * @api\n   */\n  writeFeatures(features, opt_options) {\n    const node = this.writeFeaturesNode(features, opt_options);\n    return this.xmlSerializer_.serializeToString(node);\n  }\n\n  /**\n   * @param {Array<import(\"../Feature.js\").default>} features Features.\n   * @param {import(\"./Feature.js\").WriteOptions=} opt_options Options.\n   * @return {Node} Node.\n   */\n  writeFeaturesNode(features, opt_options) {\n    return null; // not implemented\n  }\n\n  /**\n   * @inheritDoc\n   */\n  writeGeometry(geometry, opt_options) {\n    const node = this.writeGeometryNode(geometry, opt_options);\n    return this.xmlSerializer_.serializeToString(node);\n  }\n\n  /**\n   * @param {import(\"../geom/Geometry.js\").default} geometry Geometry.\n   * @param {import(\"./Feature.js\").WriteOptions=} opt_options Options.\n   * @return {Node} Node.\n   */\n  writeGeometryNode(geometry, opt_options) {\n    return null; // not implemented\n  }\n}\n\n\nexport default XMLFeature;\n"]},"metadata":{},"sourceType":"module"}