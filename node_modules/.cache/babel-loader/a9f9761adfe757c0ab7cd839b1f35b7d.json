{"ast":null,"code":"/**\n * @module ol/render/canvas/Immediate\n */\n// FIXME test, especially polygons with holes and multipolygons\n// FIXME need to handle large thick features (where pixel size matters)\n// FIXME add offset and end to ol/geom/flat/transform~transform2D?\nimport { inherits } from '../../util.js';\nimport { equals } from '../../array.js';\nimport { asColorLike } from '../../colorlike.js';\nimport { intersects } from '../../extent.js';\nimport GeometryType from '../../geom/GeometryType.js';\nimport { transformGeom2D } from '../../geom/SimpleGeometry.js';\nimport { transform2D } from '../../geom/flat/transform.js';\nimport { CANVAS_LINE_DASH } from '../../has.js';\nimport VectorContext from '../VectorContext.js';\nimport { defaultTextAlign, defaultFillStyle, defaultLineCap, defaultLineDash, defaultLineDashOffset, defaultLineJoin, defaultLineWidth, defaultMiterLimit, defaultStrokeStyle, defaultTextBaseline, defaultFont } from '../canvas.js';\nimport { create as createTransform, compose as composeTransform } from '../../transform.js';\n/**\n * @classdesc\n * A concrete subclass of {@link module:ol/render/VectorContext} that implements\n * direct rendering of features and geometries to an HTML5 Canvas context.\n * Instances of this class are created internally by the library and\n * provided to application code as vectorContext member of the\n * {@link module:ol/render/Event~RenderEvent} object associated with postcompose, precompose and\n * render events emitted by layers and maps.\n *\n * @constructor\n * @extends {module:ol/render/VectorContext}\n * @param {CanvasRenderingContext2D} context Context.\n * @param {number} pixelRatio Pixel ratio.\n * @param {module:ol/extent~Extent} extent Extent.\n * @param {module:ol/transform~Transform} transform Transform.\n * @param {number} viewRotation View rotation.\n * @struct\n */\n\nconst CanvasImmediateRenderer = function (context, pixelRatio, extent, transform, viewRotation) {\n  VectorContext.call(this);\n  /**\n   * @private\n   * @type {CanvasRenderingContext2D}\n   */\n\n  this.context_ = context;\n  /**\n   * @private\n   * @type {number}\n   */\n\n  this.pixelRatio_ = pixelRatio;\n  /**\n   * @private\n   * @type {module:ol/extent~Extent}\n   */\n\n  this.extent_ = extent;\n  /**\n   * @private\n   * @type {module:ol/transform~Transform}\n   */\n\n  this.transform_ = transform;\n  /**\n   * @private\n   * @type {number}\n   */\n\n  this.viewRotation_ = viewRotation;\n  /**\n   * @private\n   * @type {?module:ol/render/canvas~FillState}\n   */\n\n  this.contextFillState_ = null;\n  /**\n   * @private\n   * @type {?module:ol/render/canvas~StrokeState}\n   */\n\n  this.contextStrokeState_ = null;\n  /**\n   * @private\n   * @type {?module:ol/render/canvas~TextState}\n   */\n\n  this.contextTextState_ = null;\n  /**\n   * @private\n   * @type {?module:ol/render/canvas~FillState}\n   */\n\n  this.fillState_ = null;\n  /**\n   * @private\n   * @type {?module:ol/render/canvas~StrokeState}\n   */\n\n  this.strokeState_ = null;\n  /**\n   * @private\n   * @type {HTMLCanvasElement|HTMLVideoElement|Image}\n   */\n\n  this.image_ = null;\n  /**\n   * @private\n   * @type {number}\n   */\n\n  this.imageAnchorX_ = 0;\n  /**\n   * @private\n   * @type {number}\n   */\n\n  this.imageAnchorY_ = 0;\n  /**\n   * @private\n   * @type {number}\n   */\n\n  this.imageHeight_ = 0;\n  /**\n   * @private\n   * @type {number}\n   */\n\n  this.imageOpacity_ = 0;\n  /**\n   * @private\n   * @type {number}\n   */\n\n  this.imageOriginX_ = 0;\n  /**\n   * @private\n   * @type {number}\n   */\n\n  this.imageOriginY_ = 0;\n  /**\n   * @private\n   * @type {boolean}\n   */\n\n  this.imageRotateWithView_ = false;\n  /**\n   * @private\n   * @type {number}\n   */\n\n  this.imageRotation_ = 0;\n  /**\n   * @private\n   * @type {number}\n   */\n\n  this.imageScale_ = 0;\n  /**\n   * @private\n   * @type {boolean}\n   */\n\n  this.imageSnapToPixel_ = false;\n  /**\n   * @private\n   * @type {number}\n   */\n\n  this.imageWidth_ = 0;\n  /**\n   * @private\n   * @type {string}\n   */\n\n  this.text_ = '';\n  /**\n   * @private\n   * @type {number}\n   */\n\n  this.textOffsetX_ = 0;\n  /**\n   * @private\n   * @type {number}\n   */\n\n  this.textOffsetY_ = 0;\n  /**\n   * @private\n   * @type {boolean}\n   */\n\n  this.textRotateWithView_ = false;\n  /**\n   * @private\n   * @type {number}\n   */\n\n  this.textRotation_ = 0;\n  /**\n   * @private\n   * @type {number}\n   */\n\n  this.textScale_ = 0;\n  /**\n   * @private\n   * @type {?module:ol/render/canvas~FillState}\n   */\n\n  this.textFillState_ = null;\n  /**\n   * @private\n   * @type {?module:ol/render/canvas~StrokeState}\n   */\n\n  this.textStrokeState_ = null;\n  /**\n   * @private\n   * @type {?module:ol/render/canvas~TextState}\n   */\n\n  this.textState_ = null;\n  /**\n   * @private\n   * @type {Array.<number>}\n   */\n\n  this.pixelCoordinates_ = [];\n  /**\n   * @private\n   * @type {module:ol/transform~Transform}\n   */\n\n  this.tmpLocalTransform_ = createTransform();\n};\n\ninherits(CanvasImmediateRenderer, VectorContext);\n/**\n * @param {Array.<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {number} end End.\n * @param {number} stride Stride.\n * @private\n */\n\nCanvasImmediateRenderer.prototype.drawImages_ = function (flatCoordinates, offset, end, stride) {\n  if (!this.image_) {\n    return;\n  }\n\n  const pixelCoordinates = transform2D(flatCoordinates, offset, end, 2, this.transform_, this.pixelCoordinates_);\n  const context = this.context_;\n  const localTransform = this.tmpLocalTransform_;\n  const alpha = context.globalAlpha;\n\n  if (this.imageOpacity_ != 1) {\n    context.globalAlpha = alpha * this.imageOpacity_;\n  }\n\n  let rotation = this.imageRotation_;\n\n  if (this.imageRotateWithView_) {\n    rotation += this.viewRotation_;\n  }\n\n  for (let i = 0, ii = pixelCoordinates.length; i < ii; i += 2) {\n    let x = pixelCoordinates[i] - this.imageAnchorX_;\n    let y = pixelCoordinates[i + 1] - this.imageAnchorY_;\n\n    if (this.imageSnapToPixel_) {\n      x = Math.round(x);\n      y = Math.round(y);\n    }\n\n    if (rotation !== 0 || this.imageScale_ != 1) {\n      const centerX = x + this.imageAnchorX_;\n      const centerY = y + this.imageAnchorY_;\n      composeTransform(localTransform, centerX, centerY, this.imageScale_, this.imageScale_, rotation, -centerX, -centerY);\n      context.setTransform.apply(context, localTransform);\n    }\n\n    context.drawImage(this.image_, this.imageOriginX_, this.imageOriginY_, this.imageWidth_, this.imageHeight_, x, y, this.imageWidth_, this.imageHeight_);\n  }\n\n  if (rotation !== 0 || this.imageScale_ != 1) {\n    context.setTransform(1, 0, 0, 1, 0, 0);\n  }\n\n  if (this.imageOpacity_ != 1) {\n    context.globalAlpha = alpha;\n  }\n};\n/**\n * @param {Array.<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {number} end End.\n * @param {number} stride Stride.\n * @private\n */\n\n\nCanvasImmediateRenderer.prototype.drawText_ = function (flatCoordinates, offset, end, stride) {\n  if (!this.textState_ || this.text_ === '') {\n    return;\n  }\n\n  if (this.textFillState_) {\n    this.setContextFillState_(this.textFillState_);\n  }\n\n  if (this.textStrokeState_) {\n    this.setContextStrokeState_(this.textStrokeState_);\n  }\n\n  this.setContextTextState_(this.textState_);\n  const pixelCoordinates = transform2D(flatCoordinates, offset, end, stride, this.transform_, this.pixelCoordinates_);\n  const context = this.context_;\n  let rotation = this.textRotation_;\n\n  if (this.textRotateWithView_) {\n    rotation += this.viewRotation_;\n  }\n\n  for (; offset < end; offset += stride) {\n    const x = pixelCoordinates[offset] + this.textOffsetX_;\n    const y = pixelCoordinates[offset + 1] + this.textOffsetY_;\n\n    if (rotation !== 0 || this.textScale_ != 1) {\n      const localTransform = composeTransform(this.tmpLocalTransform_, x, y, this.textScale_, this.textScale_, rotation, -x, -y);\n      context.setTransform.apply(context, localTransform);\n    }\n\n    if (this.textStrokeState_) {\n      context.strokeText(this.text_, x, y);\n    }\n\n    if (this.textFillState_) {\n      context.fillText(this.text_, x, y);\n    }\n  }\n\n  if (rotation !== 0 || this.textScale_ != 1) {\n    context.setTransform(1, 0, 0, 1, 0, 0);\n  }\n};\n/**\n * @param {Array.<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {number} end End.\n * @param {number} stride Stride.\n * @param {boolean} close Close.\n * @private\n * @return {number} end End.\n */\n\n\nCanvasImmediateRenderer.prototype.moveToLineTo_ = function (flatCoordinates, offset, end, stride, close) {\n  const context = this.context_;\n  const pixelCoordinates = transform2D(flatCoordinates, offset, end, stride, this.transform_, this.pixelCoordinates_);\n  context.moveTo(pixelCoordinates[0], pixelCoordinates[1]);\n  let length = pixelCoordinates.length;\n\n  if (close) {\n    length -= 2;\n  }\n\n  for (let i = 2; i < length; i += 2) {\n    context.lineTo(pixelCoordinates[i], pixelCoordinates[i + 1]);\n  }\n\n  if (close) {\n    context.closePath();\n  }\n\n  return end;\n};\n/**\n * @param {Array.<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {Array.<number>} ends Ends.\n * @param {number} stride Stride.\n * @private\n * @return {number} End.\n */\n\n\nCanvasImmediateRenderer.prototype.drawRings_ = function (flatCoordinates, offset, ends, stride) {\n  for (let i = 0, ii = ends.length; i < ii; ++i) {\n    offset = this.moveToLineTo_(flatCoordinates, offset, ends[i], stride, true);\n  }\n\n  return offset;\n};\n/**\n * Render a circle geometry into the canvas.  Rendering is immediate and uses\n * the current fill and stroke styles.\n *\n * @param {module:ol/geom/Circle} geometry Circle geometry.\n * @override\n * @api\n */\n\n\nCanvasImmediateRenderer.prototype.drawCircle = function (geometry) {\n  if (!intersects(this.extent_, geometry.getExtent())) {\n    return;\n  }\n\n  if (this.fillState_ || this.strokeState_) {\n    if (this.fillState_) {\n      this.setContextFillState_(this.fillState_);\n    }\n\n    if (this.strokeState_) {\n      this.setContextStrokeState_(this.strokeState_);\n    }\n\n    const pixelCoordinates = transformGeom2D(geometry, this.transform_, this.pixelCoordinates_);\n    const dx = pixelCoordinates[2] - pixelCoordinates[0];\n    const dy = pixelCoordinates[3] - pixelCoordinates[1];\n    const radius = Math.sqrt(dx * dx + dy * dy);\n    const context = this.context_;\n    context.beginPath();\n    context.arc(pixelCoordinates[0], pixelCoordinates[1], radius, 0, 2 * Math.PI);\n\n    if (this.fillState_) {\n      context.fill();\n    }\n\n    if (this.strokeState_) {\n      context.stroke();\n    }\n  }\n\n  if (this.text_ !== '') {\n    this.drawText_(geometry.getCenter(), 0, 2, 2);\n  }\n};\n/**\n * Set the rendering style.  Note that since this is an immediate rendering API,\n * any `zIndex` on the provided style will be ignored.\n *\n * @param {module:ol/style/Style} style The rendering style.\n * @override\n * @api\n */\n\n\nCanvasImmediateRenderer.prototype.setStyle = function (style) {\n  this.setFillStrokeStyle(style.getFill(), style.getStroke());\n  this.setImageStyle(style.getImage());\n  this.setTextStyle(style.getText());\n};\n/**\n * Render a geometry into the canvas.  Call\n * {@link module:ol/render/canvas/Immediate#setStyle} first to set the rendering style.\n *\n * @param {module:ol/geom/Geometry|module:ol/render/Feature} geometry The geometry to render.\n * @override\n * @api\n */\n\n\nCanvasImmediateRenderer.prototype.drawGeometry = function (geometry) {\n  const type = geometry.getType();\n\n  switch (type) {\n    case GeometryType.POINT:\n      this.drawPoint(\n      /** @type {module:ol/geom/Point} */\n      geometry);\n      break;\n\n    case GeometryType.LINE_STRING:\n      this.drawLineString(\n      /** @type {module:ol/geom/LineString} */\n      geometry);\n      break;\n\n    case GeometryType.POLYGON:\n      this.drawPolygon(\n      /** @type {module:ol/geom/Polygon} */\n      geometry);\n      break;\n\n    case GeometryType.MULTI_POINT:\n      this.drawMultiPoint(\n      /** @type {module:ol/geom/MultiPoint} */\n      geometry);\n      break;\n\n    case GeometryType.MULTI_LINE_STRING:\n      this.drawMultiLineString(\n      /** @type {module:ol/geom/MultiLineString} */\n      geometry);\n      break;\n\n    case GeometryType.MULTI_POLYGON:\n      this.drawMultiPolygon(\n      /** @type {module:ol/geom/MultiPolygon} */\n      geometry);\n      break;\n\n    case GeometryType.GEOMETRY_COLLECTION:\n      this.drawGeometryCollection(\n      /** @type {module:ol/geom/GeometryCollection} */\n      geometry);\n      break;\n\n    case GeometryType.CIRCLE:\n      this.drawCircle(\n      /** @type {module:ol/geom/Circle} */\n      geometry);\n      break;\n\n    default:\n  }\n};\n/**\n * Render a feature into the canvas.  Note that any `zIndex` on the provided\n * style will be ignored - features are rendered immediately in the order that\n * this method is called.  If you need `zIndex` support, you should be using an\n * {@link module:ol/layer/Vector~VectorLayer} instead.\n *\n * @param {module:ol/Feature} feature Feature.\n * @param {module:ol/style/Style} style Style.\n * @override\n * @api\n */\n\n\nCanvasImmediateRenderer.prototype.drawFeature = function (feature, style) {\n  const geometry = style.getGeometryFunction()(feature);\n\n  if (!geometry || !intersects(this.extent_, geometry.getExtent())) {\n    return;\n  }\n\n  this.setStyle(style);\n  this.drawGeometry(geometry);\n};\n/**\n * Render a GeometryCollection to the canvas.  Rendering is immediate and\n * uses the current styles appropriate for each geometry in the collection.\n *\n * @param {module:ol/geom/GeometryCollection} geometry Geometry collection.\n * @override\n */\n\n\nCanvasImmediateRenderer.prototype.drawGeometryCollection = function (geometry) {\n  const geometries = geometry.getGeometriesArray();\n\n  for (let i = 0, ii = geometries.length; i < ii; ++i) {\n    this.drawGeometry(geometries[i]);\n  }\n};\n/**\n * Render a Point geometry into the canvas.  Rendering is immediate and uses\n * the current style.\n *\n * @param {module:ol/geom/Point|module:ol/render/Feature} geometry Point geometry.\n * @override\n */\n\n\nCanvasImmediateRenderer.prototype.drawPoint = function (geometry) {\n  const flatCoordinates = geometry.getFlatCoordinates();\n  const stride = geometry.getStride();\n\n  if (this.image_) {\n    this.drawImages_(flatCoordinates, 0, flatCoordinates.length, stride);\n  }\n\n  if (this.text_ !== '') {\n    this.drawText_(flatCoordinates, 0, flatCoordinates.length, stride);\n  }\n};\n/**\n * Render a MultiPoint geometry  into the canvas.  Rendering is immediate and\n * uses the current style.\n *\n * @param {module:ol/geom/MultiPoint|module:ol/render/Feature} geometry MultiPoint geometry.\n * @override\n */\n\n\nCanvasImmediateRenderer.prototype.drawMultiPoint = function (geometry) {\n  const flatCoordinates = geometry.getFlatCoordinates();\n  const stride = geometry.getStride();\n\n  if (this.image_) {\n    this.drawImages_(flatCoordinates, 0, flatCoordinates.length, stride);\n  }\n\n  if (this.text_ !== '') {\n    this.drawText_(flatCoordinates, 0, flatCoordinates.length, stride);\n  }\n};\n/**\n * Render a LineString into the canvas.  Rendering is immediate and uses\n * the current style.\n *\n * @param {module:ol/geom/LineString|module:ol/render/Feature} geometry LineString geometry.\n * @override\n */\n\n\nCanvasImmediateRenderer.prototype.drawLineString = function (geometry) {\n  if (!intersects(this.extent_, geometry.getExtent())) {\n    return;\n  }\n\n  if (this.strokeState_) {\n    this.setContextStrokeState_(this.strokeState_);\n    const context = this.context_;\n    const flatCoordinates = geometry.getFlatCoordinates();\n    context.beginPath();\n    this.moveToLineTo_(flatCoordinates, 0, flatCoordinates.length, geometry.getStride(), false);\n    context.stroke();\n  }\n\n  if (this.text_ !== '') {\n    const flatMidpoint = geometry.getFlatMidpoint();\n    this.drawText_(flatMidpoint, 0, 2, 2);\n  }\n};\n/**\n * Render a MultiLineString geometry into the canvas.  Rendering is immediate\n * and uses the current style.\n *\n * @param {module:ol/geom/MultiLineString|module:ol/render/Feature} geometry MultiLineString geometry.\n * @override\n */\n\n\nCanvasImmediateRenderer.prototype.drawMultiLineString = function (geometry) {\n  const geometryExtent = geometry.getExtent();\n\n  if (!intersects(this.extent_, geometryExtent)) {\n    return;\n  }\n\n  if (this.strokeState_) {\n    this.setContextStrokeState_(this.strokeState_);\n    const context = this.context_;\n    const flatCoordinates = geometry.getFlatCoordinates();\n    let offset = 0;\n    const ends = geometry.getEnds();\n    const stride = geometry.getStride();\n    context.beginPath();\n\n    for (let i = 0, ii = ends.length; i < ii; ++i) {\n      offset = this.moveToLineTo_(flatCoordinates, offset, ends[i], stride, false);\n    }\n\n    context.stroke();\n  }\n\n  if (this.text_ !== '') {\n    const flatMidpoints = geometry.getFlatMidpoints();\n    this.drawText_(flatMidpoints, 0, flatMidpoints.length, 2);\n  }\n};\n/**\n * Render a Polygon geometry into the canvas.  Rendering is immediate and uses\n * the current style.\n *\n * @param {module:ol/geom/Polygon|module:ol/render/Feature} geometry Polygon geometry.\n * @override\n */\n\n\nCanvasImmediateRenderer.prototype.drawPolygon = function (geometry) {\n  if (!intersects(this.extent_, geometry.getExtent())) {\n    return;\n  }\n\n  if (this.strokeState_ || this.fillState_) {\n    if (this.fillState_) {\n      this.setContextFillState_(this.fillState_);\n    }\n\n    if (this.strokeState_) {\n      this.setContextStrokeState_(this.strokeState_);\n    }\n\n    const context = this.context_;\n    context.beginPath();\n    this.drawRings_(geometry.getOrientedFlatCoordinates(), 0, geometry.getEnds(), geometry.getStride());\n\n    if (this.fillState_) {\n      context.fill();\n    }\n\n    if (this.strokeState_) {\n      context.stroke();\n    }\n  }\n\n  if (this.text_ !== '') {\n    const flatInteriorPoint = geometry.getFlatInteriorPoint();\n    this.drawText_(flatInteriorPoint, 0, 2, 2);\n  }\n};\n/**\n * Render MultiPolygon geometry into the canvas.  Rendering is immediate and\n * uses the current style.\n * @param {module:ol/geom/MultiPolygon} geometry MultiPolygon geometry.\n * @override\n */\n\n\nCanvasImmediateRenderer.prototype.drawMultiPolygon = function (geometry) {\n  if (!intersects(this.extent_, geometry.getExtent())) {\n    return;\n  }\n\n  if (this.strokeState_ || this.fillState_) {\n    if (this.fillState_) {\n      this.setContextFillState_(this.fillState_);\n    }\n\n    if (this.strokeState_) {\n      this.setContextStrokeState_(this.strokeState_);\n    }\n\n    const context = this.context_;\n    const flatCoordinates = geometry.getOrientedFlatCoordinates();\n    let offset = 0;\n    const endss = geometry.getEndss();\n    const stride = geometry.getStride();\n    context.beginPath();\n\n    for (let i = 0, ii = endss.length; i < ii; ++i) {\n      const ends = endss[i];\n      offset = this.drawRings_(flatCoordinates, offset, ends, stride);\n    }\n\n    if (this.fillState_) {\n      context.fill();\n    }\n\n    if (this.strokeState_) {\n      context.stroke();\n    }\n  }\n\n  if (this.text_ !== '') {\n    const flatInteriorPoints = geometry.getFlatInteriorPoints();\n    this.drawText_(flatInteriorPoints, 0, flatInteriorPoints.length, 2);\n  }\n};\n/**\n * @param {module:ol/render/canvas~FillState} fillState Fill state.\n * @private\n */\n\n\nCanvasImmediateRenderer.prototype.setContextFillState_ = function (fillState) {\n  const context = this.context_;\n  const contextFillState = this.contextFillState_;\n\n  if (!contextFillState) {\n    context.fillStyle = fillState.fillStyle;\n    this.contextFillState_ = {\n      fillStyle: fillState.fillStyle\n    };\n  } else {\n    if (contextFillState.fillStyle != fillState.fillStyle) {\n      contextFillState.fillStyle = context.fillStyle = fillState.fillStyle;\n    }\n  }\n};\n/**\n * @param {module:ol/render/canvas~StrokeState} strokeState Stroke state.\n * @private\n */\n\n\nCanvasImmediateRenderer.prototype.setContextStrokeState_ = function (strokeState) {\n  const context = this.context_;\n  const contextStrokeState = this.contextStrokeState_;\n\n  if (!contextStrokeState) {\n    context.lineCap = strokeState.lineCap;\n\n    if (CANVAS_LINE_DASH) {\n      context.setLineDash(strokeState.lineDash);\n      context.lineDashOffset = strokeState.lineDashOffset;\n    }\n\n    context.lineJoin = strokeState.lineJoin;\n    context.lineWidth = strokeState.lineWidth;\n    context.miterLimit = strokeState.miterLimit;\n    context.strokeStyle = strokeState.strokeStyle;\n    this.contextStrokeState_ = {\n      lineCap: strokeState.lineCap,\n      lineDash: strokeState.lineDash,\n      lineDashOffset: strokeState.lineDashOffset,\n      lineJoin: strokeState.lineJoin,\n      lineWidth: strokeState.lineWidth,\n      miterLimit: strokeState.miterLimit,\n      strokeStyle: strokeState.strokeStyle\n    };\n  } else {\n    if (contextStrokeState.lineCap != strokeState.lineCap) {\n      contextStrokeState.lineCap = context.lineCap = strokeState.lineCap;\n    }\n\n    if (CANVAS_LINE_DASH) {\n      if (!equals(contextStrokeState.lineDash, strokeState.lineDash)) {\n        context.setLineDash(contextStrokeState.lineDash = strokeState.lineDash);\n      }\n\n      if (contextStrokeState.lineDashOffset != strokeState.lineDashOffset) {\n        contextStrokeState.lineDashOffset = context.lineDashOffset = strokeState.lineDashOffset;\n      }\n    }\n\n    if (contextStrokeState.lineJoin != strokeState.lineJoin) {\n      contextStrokeState.lineJoin = context.lineJoin = strokeState.lineJoin;\n    }\n\n    if (contextStrokeState.lineWidth != strokeState.lineWidth) {\n      contextStrokeState.lineWidth = context.lineWidth = strokeState.lineWidth;\n    }\n\n    if (contextStrokeState.miterLimit != strokeState.miterLimit) {\n      contextStrokeState.miterLimit = context.miterLimit = strokeState.miterLimit;\n    }\n\n    if (contextStrokeState.strokeStyle != strokeState.strokeStyle) {\n      contextStrokeState.strokeStyle = context.strokeStyle = strokeState.strokeStyle;\n    }\n  }\n};\n/**\n * @param {module:ol/render/canvas~TextState} textState Text state.\n * @private\n */\n\n\nCanvasImmediateRenderer.prototype.setContextTextState_ = function (textState) {\n  const context = this.context_;\n  const contextTextState = this.contextTextState_;\n  const textAlign = textState.textAlign ? textState.textAlign : defaultTextAlign;\n\n  if (!contextTextState) {\n    context.font = textState.font;\n    context.textAlign = textAlign;\n    context.textBaseline = textState.textBaseline;\n    this.contextTextState_ = {\n      font: textState.font,\n      textAlign: textAlign,\n      textBaseline: textState.textBaseline\n    };\n  } else {\n    if (contextTextState.font != textState.font) {\n      contextTextState.font = context.font = textState.font;\n    }\n\n    if (contextTextState.textAlign != textAlign) {\n      contextTextState.textAlign = context.textAlign = textAlign;\n    }\n\n    if (contextTextState.textBaseline != textState.textBaseline) {\n      contextTextState.textBaseline = context.textBaseline = textState.textBaseline;\n    }\n  }\n};\n/**\n * Set the fill and stroke style for subsequent draw operations.  To clear\n * either fill or stroke styles, pass null for the appropriate parameter.\n *\n * @param {module:ol/style/Fill} fillStyle Fill style.\n * @param {module:ol/style/Stroke} strokeStyle Stroke style.\n * @override\n */\n\n\nCanvasImmediateRenderer.prototype.setFillStrokeStyle = function (fillStyle, strokeStyle) {\n  if (!fillStyle) {\n    this.fillState_ = null;\n  } else {\n    const fillStyleColor = fillStyle.getColor();\n    this.fillState_ = {\n      fillStyle: asColorLike(fillStyleColor ? fillStyleColor : defaultFillStyle)\n    };\n  }\n\n  if (!strokeStyle) {\n    this.strokeState_ = null;\n  } else {\n    const strokeStyleColor = strokeStyle.getColor();\n    const strokeStyleLineCap = strokeStyle.getLineCap();\n    const strokeStyleLineDash = strokeStyle.getLineDash();\n    const strokeStyleLineDashOffset = strokeStyle.getLineDashOffset();\n    const strokeStyleLineJoin = strokeStyle.getLineJoin();\n    const strokeStyleWidth = strokeStyle.getWidth();\n    const strokeStyleMiterLimit = strokeStyle.getMiterLimit();\n    this.strokeState_ = {\n      lineCap: strokeStyleLineCap !== undefined ? strokeStyleLineCap : defaultLineCap,\n      lineDash: strokeStyleLineDash ? strokeStyleLineDash : defaultLineDash,\n      lineDashOffset: strokeStyleLineDashOffset ? strokeStyleLineDashOffset : defaultLineDashOffset,\n      lineJoin: strokeStyleLineJoin !== undefined ? strokeStyleLineJoin : defaultLineJoin,\n      lineWidth: this.pixelRatio_ * (strokeStyleWidth !== undefined ? strokeStyleWidth : defaultLineWidth),\n      miterLimit: strokeStyleMiterLimit !== undefined ? strokeStyleMiterLimit : defaultMiterLimit,\n      strokeStyle: asColorLike(strokeStyleColor ? strokeStyleColor : defaultStrokeStyle)\n    };\n  }\n};\n/**\n * Set the image style for subsequent draw operations.  Pass null to remove\n * the image style.\n *\n * @param {module:ol/style/Image} imageStyle Image style.\n * @override\n */\n\n\nCanvasImmediateRenderer.prototype.setImageStyle = function (imageStyle) {\n  if (!imageStyle) {\n    this.image_ = null;\n  } else {\n    const imageAnchor = imageStyle.getAnchor(); // FIXME pixel ratio\n\n    const imageImage = imageStyle.getImage(1);\n    const imageOrigin = imageStyle.getOrigin();\n    const imageSize = imageStyle.getSize();\n    this.imageAnchorX_ = imageAnchor[0];\n    this.imageAnchorY_ = imageAnchor[1];\n    this.imageHeight_ = imageSize[1];\n    this.image_ = imageImage;\n    this.imageOpacity_ = imageStyle.getOpacity();\n    this.imageOriginX_ = imageOrigin[0];\n    this.imageOriginY_ = imageOrigin[1];\n    this.imageRotateWithView_ = imageStyle.getRotateWithView();\n    this.imageRotation_ = imageStyle.getRotation();\n    this.imageScale_ = imageStyle.getScale() * this.pixelRatio_;\n    this.imageSnapToPixel_ = imageStyle.getSnapToPixel();\n    this.imageWidth_ = imageSize[0];\n  }\n};\n/**\n * Set the text style for subsequent draw operations.  Pass null to\n * remove the text style.\n *\n * @param {module:ol/style/Text} textStyle Text style.\n * @override\n */\n\n\nCanvasImmediateRenderer.prototype.setTextStyle = function (textStyle) {\n  if (!textStyle) {\n    this.text_ = '';\n  } else {\n    const textFillStyle = textStyle.getFill();\n\n    if (!textFillStyle) {\n      this.textFillState_ = null;\n    } else {\n      const textFillStyleColor = textFillStyle.getColor();\n      this.textFillState_ = {\n        fillStyle: asColorLike(textFillStyleColor ? textFillStyleColor : defaultFillStyle)\n      };\n    }\n\n    const textStrokeStyle = textStyle.getStroke();\n\n    if (!textStrokeStyle) {\n      this.textStrokeState_ = null;\n    } else {\n      const textStrokeStyleColor = textStrokeStyle.getColor();\n      const textStrokeStyleLineCap = textStrokeStyle.getLineCap();\n      const textStrokeStyleLineDash = textStrokeStyle.getLineDash();\n      const textStrokeStyleLineDashOffset = textStrokeStyle.getLineDashOffset();\n      const textStrokeStyleLineJoin = textStrokeStyle.getLineJoin();\n      const textStrokeStyleWidth = textStrokeStyle.getWidth();\n      const textStrokeStyleMiterLimit = textStrokeStyle.getMiterLimit();\n      this.textStrokeState_ = {\n        lineCap: textStrokeStyleLineCap !== undefined ? textStrokeStyleLineCap : defaultLineCap,\n        lineDash: textStrokeStyleLineDash ? textStrokeStyleLineDash : defaultLineDash,\n        lineDashOffset: textStrokeStyleLineDashOffset ? textStrokeStyleLineDashOffset : defaultLineDashOffset,\n        lineJoin: textStrokeStyleLineJoin !== undefined ? textStrokeStyleLineJoin : defaultLineJoin,\n        lineWidth: textStrokeStyleWidth !== undefined ? textStrokeStyleWidth : defaultLineWidth,\n        miterLimit: textStrokeStyleMiterLimit !== undefined ? textStrokeStyleMiterLimit : defaultMiterLimit,\n        strokeStyle: asColorLike(textStrokeStyleColor ? textStrokeStyleColor : defaultStrokeStyle)\n      };\n    }\n\n    const textFont = textStyle.getFont();\n    const textOffsetX = textStyle.getOffsetX();\n    const textOffsetY = textStyle.getOffsetY();\n    const textRotateWithView = textStyle.getRotateWithView();\n    const textRotation = textStyle.getRotation();\n    const textScale = textStyle.getScale();\n    const textText = textStyle.getText();\n    const textTextAlign = textStyle.getTextAlign();\n    const textTextBaseline = textStyle.getTextBaseline();\n    this.textState_ = {\n      font: textFont !== undefined ? textFont : defaultFont,\n      textAlign: textTextAlign !== undefined ? textTextAlign : defaultTextAlign,\n      textBaseline: textTextBaseline !== undefined ? textTextBaseline : defaultTextBaseline\n    };\n    this.text_ = textText !== undefined ? textText : '';\n    this.textOffsetX_ = textOffsetX !== undefined ? this.pixelRatio_ * textOffsetX : 0;\n    this.textOffsetY_ = textOffsetY !== undefined ? this.pixelRatio_ * textOffsetY : 0;\n    this.textRotateWithView_ = textRotateWithView !== undefined ? textRotateWithView : false;\n    this.textRotation_ = textRotation !== undefined ? textRotation : 0;\n    this.textScale_ = this.pixelRatio_ * (textScale !== undefined ? textScale : 1);\n  }\n};\n\nexport default CanvasImmediateRenderer;","map":null,"metadata":{},"sourceType":"module"}