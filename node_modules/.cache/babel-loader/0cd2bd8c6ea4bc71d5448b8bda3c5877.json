{"ast":null,"code":"/**\n * @module ol/pointer/PointerEvent\n */\n// Based on https://github.com/Polymer/PointerEvents\n// Copyright (c) 2013 The Polymer Authors. All rights reserved.\n//\n// Redistribution and use in source and binary forms, with or without\n// modification, are permitted provided that the following conditions are\n// met:\n//\n// * Redistributions of source code must retain the above copyright\n// notice, this list of conditions and the following disclaimer.\n// * Redistributions in binary form must reproduce the above\n// copyright notice, this list of conditions and the following disclaimer\n// in the documentation and/or other materials provided with the\n// distribution.\n// * Neither the name of Google Inc. nor the names of its\n// contributors may be used to endorse or promote products derived from\n// this software without specific prior written permission.\n//\n// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n// \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\nimport _Event from '../events/Event.js';\n/**\n * Is the `buttons` property supported?\n * @type {boolean}\n */\n\nvar HAS_BUTTONS = false;\n\nvar PointerEvent =\n/*@__PURE__*/\nfunction (_Event) {\n  function PointerEvent(type, originalEvent, opt_eventDict) {\n    _Event.call(this, type);\n    /**\n     * @const\n     * @type {Event}\n     */\n\n\n    this.originalEvent = originalEvent;\n    var eventDict = opt_eventDict ? opt_eventDict : {};\n    /**\n     * @type {number}\n     */\n\n    this.buttons = getButtons(eventDict);\n    /**\n     * @type {number}\n     */\n\n    this.pressure = getPressure(eventDict, this.buttons); // MouseEvent related properties\n\n    /**\n     * @type {boolean}\n     */\n\n    this.bubbles = 'bubbles' in eventDict ? eventDict['bubbles'] : false;\n    /**\n     * @type {boolean}\n     */\n\n    this.cancelable = 'cancelable' in eventDict ? eventDict['cancelable'] : false;\n    /**\n     * @type {Object}\n     */\n\n    this.view = 'view' in eventDict ? eventDict['view'] : null;\n    /**\n     * @type {number}\n     */\n\n    this.detail = 'detail' in eventDict ? eventDict['detail'] : null;\n    /**\n     * @type {number}\n     */\n\n    this.screenX = 'screenX' in eventDict ? eventDict['screenX'] : 0;\n    /**\n     * @type {number}\n     */\n\n    this.screenY = 'screenY' in eventDict ? eventDict['screenY'] : 0;\n    /**\n     * @type {number}\n     */\n\n    this.clientX = 'clientX' in eventDict ? eventDict['clientX'] : 0;\n    /**\n     * @type {number}\n     */\n\n    this.clientY = 'clientY' in eventDict ? eventDict['clientY'] : 0;\n    /**\n     * @type {boolean}\n     */\n\n    this.ctrlKey = 'ctrlKey' in eventDict ? eventDict['ctrlKey'] : false;\n    /**\n     * @type {boolean}\n     */\n\n    this.altKey = 'altKey' in eventDict ? eventDict['altKey'] : false;\n    /**\n     * @type {boolean}\n     */\n\n    this.shiftKey = 'shiftKey' in eventDict ? eventDict['shiftKey'] : false;\n    /**\n     * @type {boolean}\n     */\n\n    this.metaKey = 'metaKey' in eventDict ? eventDict['metaKey'] : false;\n    /**\n     * @type {number}\n     */\n\n    this.button = 'button' in eventDict ? eventDict['button'] : 0;\n    /**\n     * @type {Node}\n     */\n\n    this.relatedTarget = 'relatedTarget' in eventDict ? eventDict['relatedTarget'] : null; // PointerEvent related properties\n\n    /**\n     * @const\n     * @type {number}\n     */\n\n    this.pointerId = 'pointerId' in eventDict ? eventDict['pointerId'] : 0;\n    /**\n     * @type {number}\n     */\n\n    this.width = 'width' in eventDict ? eventDict['width'] : 0;\n    /**\n     * @type {number}\n     */\n\n    this.height = 'height' in eventDict ? eventDict['height'] : 0;\n    /**\n     * @type {number}\n     */\n\n    this.tiltX = 'tiltX' in eventDict ? eventDict['tiltX'] : 0;\n    /**\n     * @type {number}\n     */\n\n    this.tiltY = 'tiltY' in eventDict ? eventDict['tiltY'] : 0;\n    /**\n     * @type {string}\n     */\n\n    this.pointerType = 'pointerType' in eventDict ? eventDict['pointerType'] : '';\n    /**\n     * @type {number}\n     */\n\n    this.hwTimestamp = 'hwTimestamp' in eventDict ? eventDict['hwTimestamp'] : 0;\n    /**\n     * @type {boolean}\n     */\n\n    this.isPrimary = 'isPrimary' in eventDict ? eventDict['isPrimary'] : false; // keep the semantics of preventDefault\n\n    if (originalEvent.preventDefault) {\n      this.preventDefault = function () {\n        originalEvent.preventDefault();\n      };\n    }\n  }\n\n  if (_Event) PointerEvent.__proto__ = _Event;\n  PointerEvent.prototype = Object.create(_Event && _Event.prototype);\n  PointerEvent.prototype.constructor = PointerEvent;\n  return PointerEvent;\n}(_Event);\n/**\n * @param {Object<string, ?>} eventDict The event dictionary.\n * @return {number} Button indicator.\n */\n\n\nfunction getButtons(eventDict) {\n  // According to the w3c spec,\n  // http://www.w3.org/TR/DOM-Level-3-Events/#events-MouseEvent-button\n  // MouseEvent.button == 0 can mean either no mouse button depressed, or the\n  // left mouse button depressed.\n  //\n  // As of now, the only way to distinguish between the two states of\n  // MouseEvent.button is by using the deprecated MouseEvent.which property, as\n  // this maps mouse buttons to positive integers > 0, and uses 0 to mean that\n  // no mouse button is held.\n  //\n  // MouseEvent.which is derived from MouseEvent.button at MouseEvent creation,\n  // but initMouseEvent does not expose an argument with which to set\n  // MouseEvent.which. Calling initMouseEvent with a buttonArg of 0 will set\n  // MouseEvent.button == 0 and MouseEvent.which == 1, breaking the expectations\n  // of app developers.\n  //\n  // The only way to propagate the correct state of MouseEvent.which and\n  // MouseEvent.button to a new MouseEvent.button == 0 and MouseEvent.which == 0\n  // is to call initMouseEvent with a buttonArg value of -1.\n  //\n  // This is fixed with DOM Level 4's use of buttons\n  var buttons;\n\n  if (eventDict.buttons || HAS_BUTTONS) {\n    buttons = eventDict.buttons;\n  } else {\n    switch (eventDict.which) {\n      case 1:\n        buttons = 1;\n        break;\n\n      case 2:\n        buttons = 4;\n        break;\n\n      case 3:\n        buttons = 2;\n        break;\n\n      default:\n        buttons = 0;\n    }\n  }\n\n  return buttons;\n}\n/**\n * @param {Object<string, ?>} eventDict The event dictionary.\n * @param {number} buttons Button indicator.\n * @return {number} The pressure.\n */\n\n\nfunction getPressure(eventDict, buttons) {\n  // Spec requires that pointers without pressure specified use 0.5 for down\n  // state and 0 for up state.\n  var pressure = 0;\n\n  if (eventDict.pressure) {\n    pressure = eventDict.pressure;\n  } else {\n    pressure = buttons ? 0.5 : 0;\n  }\n\n  return pressure;\n}\n/**\n * Checks if the `buttons` property is supported.\n */\n\n\n(function () {\n  try {\n    var ev = new MouseEvent('click', {\n      buttons: 1\n    });\n    HAS_BUTTONS = ev.buttons === 1;\n  } catch (e) {// pass\n  }\n})();\n\nexport default PointerEvent;","map":{"version":3,"sources":["../../../src/ol/pointer/PointerEvent.js"],"names":["let","super","const"],"mappings":"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","sourcesContent":["/**\n * @module ol/pointer/PointerEvent\n */\n\n// Based on https://github.com/Polymer/PointerEvents\n\n// Copyright (c) 2013 The Polymer Authors. All rights reserved.\n//\n// Redistribution and use in source and binary forms, with or without\n// modification, are permitted provided that the following conditions are\n// met:\n//\n// * Redistributions of source code must retain the above copyright\n// notice, this list of conditions and the following disclaimer.\n// * Redistributions in binary form must reproduce the above\n// copyright notice, this list of conditions and the following disclaimer\n// in the documentation and/or other materials provided with the\n// distribution.\n// * Neither the name of Google Inc. nor the names of its\n// contributors may be used to endorse or promote products derived from\n// this software without specific prior written permission.\n//\n// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n// \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\nimport _Event from '../events/Event.js';\n\n\n/**\n * Is the `buttons` property supported?\n * @type {boolean}\n */\nlet HAS_BUTTONS = false;\n\n\nclass PointerEvent extends _Event {\n\n  /**\n   * A class for pointer events.\n   *\n   * This class is used as an abstraction for mouse events,\n   * touch events and even native pointer events.\n   *\n   * @param {string} type The type of the event to create.\n   * @param {Event} originalEvent The event.\n   * @param {Object<string, ?>=} opt_eventDict An optional dictionary of\n   *    initial event properties.\n   */\n  constructor(type, originalEvent, opt_eventDict) {\n    super(type);\n\n    /**\n     * @const\n     * @type {Event}\n     */\n    this.originalEvent = originalEvent;\n\n    const eventDict = opt_eventDict ? opt_eventDict : {};\n\n    /**\n     * @type {number}\n     */\n    this.buttons = getButtons(eventDict);\n\n    /**\n     * @type {number}\n     */\n    this.pressure = getPressure(eventDict, this.buttons);\n\n    // MouseEvent related properties\n\n    /**\n     * @type {boolean}\n     */\n    this.bubbles = 'bubbles' in eventDict ? eventDict['bubbles'] : false;\n\n    /**\n     * @type {boolean}\n     */\n    this.cancelable = 'cancelable' in eventDict ? eventDict['cancelable'] : false;\n\n    /**\n     * @type {Object}\n     */\n    this.view = 'view' in eventDict ? eventDict['view'] : null;\n\n    /**\n     * @type {number}\n     */\n    this.detail = 'detail' in eventDict ? eventDict['detail'] : null;\n\n    /**\n     * @type {number}\n     */\n    this.screenX = 'screenX' in eventDict ? eventDict['screenX'] : 0;\n\n    /**\n     * @type {number}\n     */\n    this.screenY = 'screenY' in eventDict ? eventDict['screenY'] : 0;\n\n    /**\n     * @type {number}\n     */\n    this.clientX = 'clientX' in eventDict ? eventDict['clientX'] : 0;\n\n    /**\n     * @type {number}\n     */\n    this.clientY = 'clientY' in eventDict ? eventDict['clientY'] : 0;\n\n    /**\n     * @type {boolean}\n     */\n    this.ctrlKey = 'ctrlKey' in eventDict ? eventDict['ctrlKey'] : false;\n\n    /**\n     * @type {boolean}\n     */\n    this.altKey = 'altKey' in eventDict ? eventDict['altKey'] : false;\n\n    /**\n     * @type {boolean}\n     */\n    this.shiftKey = 'shiftKey' in eventDict ? eventDict['shiftKey'] : false;\n\n    /**\n     * @type {boolean}\n     */\n    this.metaKey = 'metaKey' in eventDict ? eventDict['metaKey'] : false;\n\n    /**\n     * @type {number}\n     */\n    this.button = 'button' in eventDict ? eventDict['button'] : 0;\n\n    /**\n     * @type {Node}\n     */\n    this.relatedTarget = 'relatedTarget' in eventDict ?\n      eventDict['relatedTarget'] : null;\n\n    // PointerEvent related properties\n\n    /**\n     * @const\n     * @type {number}\n     */\n    this.pointerId = 'pointerId' in eventDict ? eventDict['pointerId'] : 0;\n\n    /**\n     * @type {number}\n     */\n    this.width = 'width' in eventDict ? eventDict['width'] : 0;\n\n    /**\n     * @type {number}\n     */\n    this.height = 'height' in eventDict ? eventDict['height'] : 0;\n\n    /**\n     * @type {number}\n     */\n    this.tiltX = 'tiltX' in eventDict ? eventDict['tiltX'] : 0;\n\n    /**\n     * @type {number}\n     */\n    this.tiltY = 'tiltY' in eventDict ? eventDict['tiltY'] : 0;\n\n    /**\n     * @type {string}\n     */\n    this.pointerType = 'pointerType' in eventDict ? eventDict['pointerType'] : '';\n\n    /**\n     * @type {number}\n     */\n    this.hwTimestamp = 'hwTimestamp' in eventDict ? eventDict['hwTimestamp'] : 0;\n\n    /**\n     * @type {boolean}\n     */\n    this.isPrimary = 'isPrimary' in eventDict ? eventDict['isPrimary'] : false;\n\n    // keep the semantics of preventDefault\n    if (originalEvent.preventDefault) {\n      this.preventDefault = function() {\n        originalEvent.preventDefault();\n      };\n    }\n  }\n\n}\n\n\n/**\n * @param {Object<string, ?>} eventDict The event dictionary.\n * @return {number} Button indicator.\n */\nfunction getButtons(eventDict) {\n  // According to the w3c spec,\n  // http://www.w3.org/TR/DOM-Level-3-Events/#events-MouseEvent-button\n  // MouseEvent.button == 0 can mean either no mouse button depressed, or the\n  // left mouse button depressed.\n  //\n  // As of now, the only way to distinguish between the two states of\n  // MouseEvent.button is by using the deprecated MouseEvent.which property, as\n  // this maps mouse buttons to positive integers > 0, and uses 0 to mean that\n  // no mouse button is held.\n  //\n  // MouseEvent.which is derived from MouseEvent.button at MouseEvent creation,\n  // but initMouseEvent does not expose an argument with which to set\n  // MouseEvent.which. Calling initMouseEvent with a buttonArg of 0 will set\n  // MouseEvent.button == 0 and MouseEvent.which == 1, breaking the expectations\n  // of app developers.\n  //\n  // The only way to propagate the correct state of MouseEvent.which and\n  // MouseEvent.button to a new MouseEvent.button == 0 and MouseEvent.which == 0\n  // is to call initMouseEvent with a buttonArg value of -1.\n  //\n  // This is fixed with DOM Level 4's use of buttons\n  let buttons;\n  if (eventDict.buttons || HAS_BUTTONS) {\n    buttons = eventDict.buttons;\n  } else {\n    switch (eventDict.which) {\n      case 1: buttons = 1; break;\n      case 2: buttons = 4; break;\n      case 3: buttons = 2; break;\n      default: buttons = 0;\n    }\n  }\n  return buttons;\n}\n\n\n/**\n * @param {Object<string, ?>} eventDict The event dictionary.\n * @param {number} buttons Button indicator.\n * @return {number} The pressure.\n */\nfunction getPressure(eventDict, buttons) {\n  // Spec requires that pointers without pressure specified use 0.5 for down\n  // state and 0 for up state.\n  let pressure = 0;\n  if (eventDict.pressure) {\n    pressure = eventDict.pressure;\n  } else {\n    pressure = buttons ? 0.5 : 0;\n  }\n  return pressure;\n}\n\n\n/**\n * Checks if the `buttons` property is supported.\n */\n(function() {\n  try {\n    const ev = new MouseEvent('click', {buttons: 1});\n    HAS_BUTTONS = ev.buttons === 1;\n  } catch (e) {\n    // pass\n  }\n})();\n\nexport default PointerEvent;\n"]},"metadata":{},"sourceType":"module"}