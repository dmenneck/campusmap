{"ast":null,"code":"/**\n * @module ol/geom/Circle\n */\nimport { createOrUpdate, forEachCorner, intersects } from '../extent.js';\nimport GeometryType from './GeometryType.js';\nimport SimpleGeometry from './SimpleGeometry.js';\nimport { deflateCoordinate } from './flat/deflate.js';\n/**\n * @classdesc\n * Circle geometry.\n *\n * @api\n */\n\nvar Circle =\n/*@__PURE__*/\nfunction (SimpleGeometry) {\n  function Circle(center, opt_radius, opt_layout) {\n    SimpleGeometry.call(this);\n\n    if (opt_layout !== undefined && opt_radius === undefined) {\n      this.setFlatCoordinates(opt_layout, center);\n    } else {\n      var radius = opt_radius ? opt_radius : 0;\n      this.setCenterAndRadius(center, radius, opt_layout);\n    }\n  }\n\n  if (SimpleGeometry) Circle.__proto__ = SimpleGeometry;\n  Circle.prototype = Object.create(SimpleGeometry && SimpleGeometry.prototype);\n  Circle.prototype.constructor = Circle;\n  /**\n   * Make a complete copy of the geometry.\n   * @return {!Circle} Clone.\n   * @override\n   * @api\n   */\n\n  Circle.prototype.clone = function clone() {\n    return new Circle(this.flatCoordinates.slice(), undefined, this.layout);\n  };\n  /**\n   * @inheritDoc\n   */\n\n\n  Circle.prototype.closestPointXY = function closestPointXY(x, y, closestPoint, minSquaredDistance) {\n    var flatCoordinates = this.flatCoordinates;\n    var dx = x - flatCoordinates[0];\n    var dy = y - flatCoordinates[1];\n    var squaredDistance = dx * dx + dy * dy;\n\n    if (squaredDistance < minSquaredDistance) {\n      if (squaredDistance === 0) {\n        for (var i = 0; i < this.stride; ++i) {\n          closestPoint[i] = flatCoordinates[i];\n        }\n      } else {\n        var delta = this.getRadius() / Math.sqrt(squaredDistance);\n        closestPoint[0] = flatCoordinates[0] + delta * dx;\n        closestPoint[1] = flatCoordinates[1] + delta * dy;\n\n        for (var i$1 = 2; i$1 < this.stride; ++i$1) {\n          closestPoint[i$1] = flatCoordinates[i$1];\n        }\n      }\n\n      closestPoint.length = this.stride;\n      return squaredDistance;\n    } else {\n      return minSquaredDistance;\n    }\n  };\n  /**\n   * @inheritDoc\n   */\n\n\n  Circle.prototype.containsXY = function containsXY(x, y) {\n    var flatCoordinates = this.flatCoordinates;\n    var dx = x - flatCoordinates[0];\n    var dy = y - flatCoordinates[1];\n    return dx * dx + dy * dy <= this.getRadiusSquared_();\n  };\n  /**\n   * Return the center of the circle as {@link module:ol/coordinate~Coordinate coordinate}.\n   * @return {import(\"../coordinate.js\").Coordinate} Center.\n   * @api\n   */\n\n\n  Circle.prototype.getCenter = function getCenter() {\n    return this.flatCoordinates.slice(0, this.stride);\n  };\n  /**\n   * @inheritDoc\n   */\n\n\n  Circle.prototype.computeExtent = function computeExtent(extent) {\n    var flatCoordinates = this.flatCoordinates;\n    var radius = flatCoordinates[this.stride] - flatCoordinates[0];\n    return createOrUpdate(flatCoordinates[0] - radius, flatCoordinates[1] - radius, flatCoordinates[0] + radius, flatCoordinates[1] + radius, extent);\n  };\n  /**\n   * Return the radius of the circle.\n   * @return {number} Radius.\n   * @api\n   */\n\n\n  Circle.prototype.getRadius = function getRadius() {\n    return Math.sqrt(this.getRadiusSquared_());\n  };\n  /**\n   * @private\n   * @return {number} Radius squared.\n   */\n\n\n  Circle.prototype.getRadiusSquared_ = function getRadiusSquared_() {\n    var dx = this.flatCoordinates[this.stride] - this.flatCoordinates[0];\n    var dy = this.flatCoordinates[this.stride + 1] - this.flatCoordinates[1];\n    return dx * dx + dy * dy;\n  };\n  /**\n   * @inheritDoc\n   * @api\n   */\n\n\n  Circle.prototype.getType = function getType() {\n    return GeometryType.CIRCLE;\n  };\n  /**\n   * @inheritDoc\n   * @api\n   */\n\n\n  Circle.prototype.intersectsExtent = function intersectsExtent(extent) {\n    var circleExtent = this.getExtent();\n\n    if (intersects(extent, circleExtent)) {\n      var center = this.getCenter();\n\n      if (extent[0] <= center[0] && extent[2] >= center[0]) {\n        return true;\n      }\n\n      if (extent[1] <= center[1] && extent[3] >= center[1]) {\n        return true;\n      }\n\n      return forEachCorner(extent, this.intersectsCoordinate, this);\n    }\n\n    return false;\n  };\n  /**\n   * Set the center of the circle as {@link module:ol/coordinate~Coordinate coordinate}.\n   * @param {import(\"../coordinate.js\").Coordinate} center Center.\n   * @api\n   */\n\n\n  Circle.prototype.setCenter = function setCenter(center) {\n    var stride = this.stride;\n    var radius = this.flatCoordinates[stride] - this.flatCoordinates[0];\n    var flatCoordinates = center.slice();\n    flatCoordinates[stride] = flatCoordinates[0] + radius;\n\n    for (var i = 1; i < stride; ++i) {\n      flatCoordinates[stride + i] = center[i];\n    }\n\n    this.setFlatCoordinates(this.layout, flatCoordinates);\n    this.changed();\n  };\n  /**\n   * Set the center (as {@link module:ol/coordinate~Coordinate coordinate}) and the radius (as\n   * number) of the circle.\n   * @param {!import(\"../coordinate.js\").Coordinate} center Center.\n   * @param {number} radius Radius.\n   * @param {import(\"./GeometryLayout.js\").default=} opt_layout Layout.\n   * @api\n   */\n\n\n  Circle.prototype.setCenterAndRadius = function setCenterAndRadius(center, radius, opt_layout) {\n    this.setLayout(opt_layout, center, 0);\n\n    if (!this.flatCoordinates) {\n      this.flatCoordinates = [];\n    }\n    /** @type {Array<number>} */\n\n\n    var flatCoordinates = this.flatCoordinates;\n    var offset = deflateCoordinate(flatCoordinates, 0, center, this.stride);\n    flatCoordinates[offset++] = flatCoordinates[0] + radius;\n\n    for (var i = 1, ii = this.stride; i < ii; ++i) {\n      flatCoordinates[offset++] = flatCoordinates[i];\n    }\n\n    flatCoordinates.length = offset;\n    this.changed();\n  };\n  /**\n   * @inheritDoc\n   */\n\n\n  Circle.prototype.getCoordinates = function getCoordinates() {\n    return null;\n  };\n  /**\n   * @inheritDoc\n   */\n\n\n  Circle.prototype.setCoordinates = function setCoordinates(coordinates, opt_layout) {};\n  /**\n   * Set the radius of the circle. The radius is in the units of the projection.\n   * @param {number} radius Radius.\n   * @api\n   */\n\n\n  Circle.prototype.setRadius = function setRadius(radius) {\n    this.flatCoordinates[this.stride] = this.flatCoordinates[0] + radius;\n    this.changed();\n  };\n\n  return Circle;\n}(SimpleGeometry);\n/**\n * Transform each coordinate of the circle from one coordinate reference system\n * to another. The geometry is modified in place.\n * If you do not want the geometry modified in place, first clone() it and\n * then use this function on the clone.\n *\n * Internally a circle is currently represented by two points: the center of\n * the circle `[cx, cy]`, and the point to the right of the circle\n * `[cx + r, cy]`. This `transform` function just transforms these two points.\n * So the resulting geometry is also a circle, and that circle does not\n * correspond to the shape that would be obtained by transforming every point\n * of the original circle.\n *\n * @param {import(\"../proj.js\").ProjectionLike} source The current projection.  Can be a\n *     string identifier or a {@link module:ol/proj/Projection~Projection} object.\n * @param {import(\"../proj.js\").ProjectionLike} destination The desired projection.  Can be a\n *     string identifier or a {@link module:ol/proj/Projection~Projection} object.\n * @return {Circle} This geometry.  Note that original geometry is\n *     modified in place.\n * @function\n * @api\n */\n\n\nCircle.prototype.transform;\nexport default Circle;","map":{"version":3,"sources":["../../../src/ol/geom/Circle.js"],"names":["super","const","let","i"],"mappings":"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","sourcesContent":["/**\n * @module ol/geom/Circle\n */\nimport {createOrUpdate, forEachCorner, intersects} from '../extent.js';\nimport GeometryType from './GeometryType.js';\nimport SimpleGeometry from './SimpleGeometry.js';\nimport {deflateCoordinate} from './flat/deflate.js';\n\n/**\n * @classdesc\n * Circle geometry.\n *\n * @api\n */\nclass Circle extends SimpleGeometry {\n\n  /**\n   * @param {!import(\"../coordinate.js\").Coordinate} center Center.\n   *     For internal use, flat coordinates in combination with `opt_layout` and no\n   *     `opt_radius` are also accepted.\n   * @param {number=} opt_radius Radius.\n   * @param {import(\"./GeometryLayout.js\").default=} opt_layout Layout.\n   */\n  constructor(center, opt_radius, opt_layout) {\n    super();\n    if (opt_layout !== undefined && opt_radius === undefined) {\n      this.setFlatCoordinates(opt_layout, center);\n    } else {\n      const radius = opt_radius ? opt_radius : 0;\n      this.setCenterAndRadius(center, radius, opt_layout);\n    }\n  }\n\n  /**\n   * Make a complete copy of the geometry.\n   * @return {!Circle} Clone.\n   * @override\n   * @api\n   */\n  clone() {\n    return new Circle(this.flatCoordinates.slice(), undefined, this.layout);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  closestPointXY(x, y, closestPoint, minSquaredDistance) {\n    const flatCoordinates = this.flatCoordinates;\n    const dx = x - flatCoordinates[0];\n    const dy = y - flatCoordinates[1];\n    const squaredDistance = dx * dx + dy * dy;\n    if (squaredDistance < minSquaredDistance) {\n      if (squaredDistance === 0) {\n        for (let i = 0; i < this.stride; ++i) {\n          closestPoint[i] = flatCoordinates[i];\n        }\n      } else {\n        const delta = this.getRadius() / Math.sqrt(squaredDistance);\n        closestPoint[0] = flatCoordinates[0] + delta * dx;\n        closestPoint[1] = flatCoordinates[1] + delta * dy;\n        for (let i = 2; i < this.stride; ++i) {\n          closestPoint[i] = flatCoordinates[i];\n        }\n      }\n      closestPoint.length = this.stride;\n      return squaredDistance;\n    } else {\n      return minSquaredDistance;\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  containsXY(x, y) {\n    const flatCoordinates = this.flatCoordinates;\n    const dx = x - flatCoordinates[0];\n    const dy = y - flatCoordinates[1];\n    return dx * dx + dy * dy <= this.getRadiusSquared_();\n  }\n\n  /**\n   * Return the center of the circle as {@link module:ol/coordinate~Coordinate coordinate}.\n   * @return {import(\"../coordinate.js\").Coordinate} Center.\n   * @api\n   */\n  getCenter() {\n    return this.flatCoordinates.slice(0, this.stride);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  computeExtent(extent) {\n    const flatCoordinates = this.flatCoordinates;\n    const radius = flatCoordinates[this.stride] - flatCoordinates[0];\n    return createOrUpdate(\n      flatCoordinates[0] - radius, flatCoordinates[1] - radius,\n      flatCoordinates[0] + radius, flatCoordinates[1] + radius,\n      extent);\n  }\n\n  /**\n   * Return the radius of the circle.\n   * @return {number} Radius.\n   * @api\n   */\n  getRadius() {\n    return Math.sqrt(this.getRadiusSquared_());\n  }\n\n  /**\n   * @private\n   * @return {number} Radius squared.\n   */\n  getRadiusSquared_() {\n    const dx = this.flatCoordinates[this.stride] - this.flatCoordinates[0];\n    const dy = this.flatCoordinates[this.stride + 1] - this.flatCoordinates[1];\n    return dx * dx + dy * dy;\n  }\n\n  /**\n   * @inheritDoc\n   * @api\n   */\n  getType() {\n    return GeometryType.CIRCLE;\n  }\n\n  /**\n   * @inheritDoc\n   * @api\n   */\n  intersectsExtent(extent) {\n    const circleExtent = this.getExtent();\n    if (intersects(extent, circleExtent)) {\n      const center = this.getCenter();\n\n      if (extent[0] <= center[0] && extent[2] >= center[0]) {\n        return true;\n      }\n      if (extent[1] <= center[1] && extent[3] >= center[1]) {\n        return true;\n      }\n\n      return forEachCorner(extent, this.intersectsCoordinate, this);\n    }\n    return false;\n\n  }\n\n  /**\n   * Set the center of the circle as {@link module:ol/coordinate~Coordinate coordinate}.\n   * @param {import(\"../coordinate.js\").Coordinate} center Center.\n   * @api\n   */\n  setCenter(center) {\n    const stride = this.stride;\n    const radius = this.flatCoordinates[stride] - this.flatCoordinates[0];\n    const flatCoordinates = center.slice();\n    flatCoordinates[stride] = flatCoordinates[0] + radius;\n    for (let i = 1; i < stride; ++i) {\n      flatCoordinates[stride + i] = center[i];\n    }\n    this.setFlatCoordinates(this.layout, flatCoordinates);\n    this.changed();\n  }\n\n  /**\n   * Set the center (as {@link module:ol/coordinate~Coordinate coordinate}) and the radius (as\n   * number) of the circle.\n   * @param {!import(\"../coordinate.js\").Coordinate} center Center.\n   * @param {number} radius Radius.\n   * @param {import(\"./GeometryLayout.js\").default=} opt_layout Layout.\n   * @api\n   */\n  setCenterAndRadius(center, radius, opt_layout) {\n    this.setLayout(opt_layout, center, 0);\n    if (!this.flatCoordinates) {\n      this.flatCoordinates = [];\n    }\n    /** @type {Array<number>} */\n    const flatCoordinates = this.flatCoordinates;\n    let offset = deflateCoordinate(\n      flatCoordinates, 0, center, this.stride);\n    flatCoordinates[offset++] = flatCoordinates[0] + radius;\n    for (let i = 1, ii = this.stride; i < ii; ++i) {\n      flatCoordinates[offset++] = flatCoordinates[i];\n    }\n    flatCoordinates.length = offset;\n    this.changed();\n  }\n\n  /**\n   * @inheritDoc\n   */\n  getCoordinates() {\n    return null;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  setCoordinates(coordinates, opt_layout) {}\n\n  /**\n   * Set the radius of the circle. The radius is in the units of the projection.\n   * @param {number} radius Radius.\n   * @api\n   */\n  setRadius(radius) {\n    this.flatCoordinates[this.stride] = this.flatCoordinates[0] + radius;\n    this.changed();\n  }\n}\n\n\n/**\n * Transform each coordinate of the circle from one coordinate reference system\n * to another. The geometry is modified in place.\n * If you do not want the geometry modified in place, first clone() it and\n * then use this function on the clone.\n *\n * Internally a circle is currently represented by two points: the center of\n * the circle `[cx, cy]`, and the point to the right of the circle\n * `[cx + r, cy]`. This `transform` function just transforms these two points.\n * So the resulting geometry is also a circle, and that circle does not\n * correspond to the shape that would be obtained by transforming every point\n * of the original circle.\n *\n * @param {import(\"../proj.js\").ProjectionLike} source The current projection.  Can be a\n *     string identifier or a {@link module:ol/proj/Projection~Projection} object.\n * @param {import(\"../proj.js\").ProjectionLike} destination The desired projection.  Can be a\n *     string identifier or a {@link module:ol/proj/Projection~Projection} object.\n * @return {Circle} This geometry.  Note that original geometry is\n *     modified in place.\n * @function\n * @api\n */\nCircle.prototype.transform;\nexport default Circle;\n"]},"metadata":{},"sourceType":"module"}