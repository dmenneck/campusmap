{"ast":null,"code":"/**\n * @module ol/Collection\n */\nimport AssertionError from './AssertionError.js';\nimport CollectionEventType from './CollectionEventType.js';\nimport BaseObject from './Object.js';\nimport Event from './events/Event.js';\n/**\n * @enum {string}\n * @private\n */\n\nvar Property = {\n  LENGTH: 'length'\n};\n/**\n * @classdesc\n * Events emitted by {@link module:ol/Collection~Collection} instances are instances of this\n * type.\n */\n\nexport var CollectionEvent =\n/*@__PURE__*/\nfunction (Event) {\n  function CollectionEvent(type, opt_element) {\n    Event.call(this, type);\n    /**\n     * The element that is added to or removed from the collection.\n     * @type {*}\n     * @api\n     */\n\n    this.element = opt_element;\n  }\n\n  if (Event) CollectionEvent.__proto__ = Event;\n  CollectionEvent.prototype = Object.create(Event && Event.prototype);\n  CollectionEvent.prototype.constructor = CollectionEvent;\n  return CollectionEvent;\n}(Event);\n/**\n * @typedef {Object} Options\n * @property {boolean} [unique=false] Disallow the same item from being added to\n * the collection twice.\n */\n\n/**\n * @classdesc\n * An expanded version of standard JS Array, adding convenience methods for\n * manipulation. Add and remove changes to the Collection trigger a Collection\n * event. Note that this does not cover changes to the objects _within_ the\n * Collection; they trigger events on the appropriate object, not on the\n * Collection as a whole.\n *\n * @fires CollectionEvent\n *\n * @template T\n * @api\n */\n\nvar Collection =\n/*@__PURE__*/\nfunction (BaseObject) {\n  function Collection(opt_array, opt_options) {\n    BaseObject.call(this);\n    var options = opt_options || {};\n    /**\n     * @private\n     * @type {boolean}\n     */\n\n    this.unique_ = !!options.unique;\n    /**\n     * @private\n     * @type {!Array<T>}\n     */\n\n    this.array_ = opt_array ? opt_array : [];\n\n    if (this.unique_) {\n      for (var i = 0, ii = this.array_.length; i < ii; ++i) {\n        this.assertUnique_(this.array_[i], i);\n      }\n    }\n\n    this.updateLength_();\n  }\n\n  if (BaseObject) Collection.__proto__ = BaseObject;\n  Collection.prototype = Object.create(BaseObject && BaseObject.prototype);\n  Collection.prototype.constructor = Collection;\n  /**\n   * Remove all elements from the collection.\n   * @api\n   */\n\n  Collection.prototype.clear = function clear() {\n    while (this.getLength() > 0) {\n      this.pop();\n    }\n  };\n  /**\n   * Add elements to the collection.  This pushes each item in the provided array\n   * to the end of the collection.\n   * @param {!Array<T>} arr Array.\n   * @return {Collection<T>} This collection.\n   * @api\n   */\n\n\n  Collection.prototype.extend = function extend(arr) {\n    for (var i = 0, ii = arr.length; i < ii; ++i) {\n      this.push(arr[i]);\n    }\n\n    return this;\n  };\n  /**\n   * Iterate over each element, calling the provided callback.\n   * @param {function(T, number, Array<T>): *} f The function to call\n   *     for every element. This function takes 3 arguments (the element, the\n   *     index and the array). The return value is ignored.\n   * @api\n   */\n\n\n  Collection.prototype.forEach = function forEach(f) {\n    var array = this.array_;\n\n    for (var i = 0, ii = array.length; i < ii; ++i) {\n      f(array[i], i, array);\n    }\n  };\n  /**\n   * Get a reference to the underlying Array object. Warning: if the array\n   * is mutated, no events will be dispatched by the collection, and the\n   * collection's \"length\" property won't be in sync with the actual length\n   * of the array.\n   * @return {!Array<T>} Array.\n   * @api\n   */\n\n\n  Collection.prototype.getArray = function getArray() {\n    return this.array_;\n  };\n  /**\n   * Get the element at the provided index.\n   * @param {number} index Index.\n   * @return {T} Element.\n   * @api\n   */\n\n\n  Collection.prototype.item = function item(index) {\n    return this.array_[index];\n  };\n  /**\n   * Get the length of this collection.\n   * @return {number} The length of the array.\n   * @observable\n   * @api\n   */\n\n\n  Collection.prototype.getLength = function getLength() {\n    return this.get(Property.LENGTH);\n  };\n  /**\n   * Insert an element at the provided index.\n   * @param {number} index Index.\n   * @param {T} elem Element.\n   * @api\n   */\n\n\n  Collection.prototype.insertAt = function insertAt(index, elem) {\n    if (this.unique_) {\n      this.assertUnique_(elem);\n    }\n\n    this.array_.splice(index, 0, elem);\n    this.updateLength_();\n    this.dispatchEvent(new CollectionEvent(CollectionEventType.ADD, elem));\n  };\n  /**\n   * Remove the last element of the collection and return it.\n   * Return `undefined` if the collection is empty.\n   * @return {T|undefined} Element.\n   * @api\n   */\n\n\n  Collection.prototype.pop = function pop() {\n    return this.removeAt(this.getLength() - 1);\n  };\n  /**\n   * Insert the provided element at the end of the collection.\n   * @param {T} elem Element.\n   * @return {number} New length of the collection.\n   * @api\n   */\n\n\n  Collection.prototype.push = function push(elem) {\n    if (this.unique_) {\n      this.assertUnique_(elem);\n    }\n\n    var n = this.getLength();\n    this.insertAt(n, elem);\n    return this.getLength();\n  };\n  /**\n   * Remove the first occurrence of an element from the collection.\n   * @param {T} elem Element.\n   * @return {T|undefined} The removed element or undefined if none found.\n   * @api\n   */\n\n\n  Collection.prototype.remove = function remove(elem) {\n    var arr = this.array_;\n\n    for (var i = 0, ii = arr.length; i < ii; ++i) {\n      if (arr[i] === elem) {\n        return this.removeAt(i);\n      }\n    }\n\n    return undefined;\n  };\n  /**\n   * Remove the element at the provided index and return it.\n   * Return `undefined` if the collection does not contain this index.\n   * @param {number} index Index.\n   * @return {T|undefined} Value.\n   * @api\n   */\n\n\n  Collection.prototype.removeAt = function removeAt(index) {\n    var prev = this.array_[index];\n    this.array_.splice(index, 1);\n    this.updateLength_();\n    this.dispatchEvent(new CollectionEvent(CollectionEventType.REMOVE, prev));\n    return prev;\n  };\n  /**\n   * Set the element at the provided index.\n   * @param {number} index Index.\n   * @param {T} elem Element.\n   * @api\n   */\n\n\n  Collection.prototype.setAt = function setAt(index, elem) {\n    var n = this.getLength();\n\n    if (index < n) {\n      if (this.unique_) {\n        this.assertUnique_(elem, index);\n      }\n\n      var prev = this.array_[index];\n      this.array_[index] = elem;\n      this.dispatchEvent(new CollectionEvent(CollectionEventType.REMOVE, prev));\n      this.dispatchEvent(new CollectionEvent(CollectionEventType.ADD, elem));\n    } else {\n      for (var j = n; j < index; ++j) {\n        this.insertAt(j, undefined);\n      }\n\n      this.insertAt(index, elem);\n    }\n  };\n  /**\n   * @private\n   */\n\n\n  Collection.prototype.updateLength_ = function updateLength_() {\n    this.set(Property.LENGTH, this.array_.length);\n  };\n  /**\n   * @private\n   * @param {T} elem Element.\n   * @param {number=} opt_except Optional index to ignore.\n   */\n\n\n  Collection.prototype.assertUnique_ = function assertUnique_(elem, opt_except) {\n    for (var i = 0, ii = this.array_.length; i < ii; ++i) {\n      if (this.array_[i] === elem && i !== opt_except) {\n        throw new AssertionError(58);\n      }\n    }\n  };\n\n  return Collection;\n}(BaseObject);\n\nexport default Collection;","map":{"version":3,"sources":["../../src/ol/Collection.js"],"names":["const","super","let"],"mappings":"AAAA;;;AAGA,OAAO,cAAP,MAA2B,qBAA3B;AACA,OAAO,mBAAP,MAAgC,0BAAhC;AACA,OAAO,UAAP,MAAuB,aAAvB;AACA,OAAO,KAAP,MAAkB,mBAAlB;;;;;;AAOAA,IAAM,QAAQ,GAAG;AACf,EAAA,MAAM,EAAE;AADO,CAAjBA;;;;;;;AAUA,OAAO,IAAM,eAAe;AAAc;AAAA,UAAA,KAAA,EAAA;AAMxC,WAAA,eAAA,CAAY,IAAZ,EAAkB,WAAlB,EAA+B;AAC7BC,IAAAA,KAAAA,CAAAA,IAAAA,CAAK,IAALA,EAAM,IAANA;;;;;;;AAOA,SAAK,OAAL,GAAe,WAAf;;;;;AAED,EAAA,eAAA,CAAA,SAAA,CAAA,WAAA,GAAA,eAAA;;CAhBuC,CAAL,KAAK,CAAnC;;;;;;;;;;;;;;;;;;;;;AAwCP,IAAM,UAAU;AAAmB;AAAA,UAAA,UAAA,EAAA;AAMjC,WAAA,UAAA,CAAY,SAAZ,EAAuB,WAAvB,EAAoC;AAElCA,IAAAA,UAAAA,CAAAA,IAAAA,CAAK,IAALA;AAEAD,QAAM,OAAO,GAAG,WAAW,IAAI,EAA/BA;;;;;;AAMA,SAAK,OAAL,GAAe,CAAC,CAAC,OAAO,CAAC,MAAzB;;;;;;AAMA,SAAK,MAAL,GAAc,SAAS,GAAG,SAAH,GAAe,EAAtC;;AAEA,QAAI,KAAK,OAAT,EAAkB;AAChB,WAAKE,IAAI,CAAC,GAAG,CAARA,EAAW,EAAE,GAAG,KAAK,MAAL,CAAY,MAAjC,EAAyC,CAAC,GAAG,EAA7C,EAAiD,EAAE,CAAnD,EAAsD;AACpD,aAAK,aAAL,CAAmB,KAAK,MAAL,CAAY,CAAZ,CAAnB,EAAmC,CAAnC;AACD;AACF;;AAED,SAAK,aAAL;;;;;qCAED,U;;;;;;uBAMD,K,GAAA,SAAA,KAAA,GAAQ;AACN,WAAO,KAAK,SAAL,KAAmB,CAA1B,EAA6B;AAC3B,WAAK,GAAL;AACD;AACF,G;;;;;;;;;;uBASD,M,GAAA,SAAA,MAAA,CAAO,GAAP,EAAY;AACV,SAAKA,IAAI,CAAC,GAAG,CAARA,EAAW,EAAE,GAAG,GAAG,CAAC,MAAzB,EAAiC,CAAC,GAAG,EAArC,EAAyC,EAAE,CAA3C,EAA8C;AAC5C,WAAK,IAAL,CAAU,GAAG,CAAC,CAAD,CAAb;AACD;;AACD,WAAO,IAAP;AACD,G;;;;;;;;;;uBASD,O,GAAA,SAAA,OAAA,CAAQ,CAAR,EAAW;AACTF,QAAM,KAAK,GAAG,KAAK,MAAnBA;;AACA,SAAKE,IAAI,CAAC,GAAG,CAARA,EAAW,EAAE,GAAG,KAAK,CAAC,MAA3B,EAAmC,CAAC,GAAG,EAAvC,EAA2C,EAAE,CAA7C,EAAgD;AAC9C,MAAA,CAAC,CAAC,KAAK,CAAC,CAAD,CAAN,EAAW,CAAX,EAAc,KAAd,CAAD;AACD;AACF,G;;;;;;;;;;;uBAUD,Q,GAAA,SAAA,QAAA,GAAW;AACT,WAAO,KAAK,MAAZ;AACD,G;;;;;;;;;uBAQD,I,GAAA,SAAA,IAAA,CAAK,KAAL,EAAY;AACV,WAAO,KAAK,MAAL,CAAY,KAAZ,CAAP;AACD,G;;;;;;;;;uBAQD,S,GAAA,SAAA,SAAA,GAAY;AACV,WAAO,KAAK,GAAL,CAAS,QAAQ,CAAC,MAAlB,CAAP;AACD,G;;;;;;;;;uBAQD,Q,GAAA,SAAA,QAAA,CAAS,KAAT,EAAgB,IAAhB,EAAsB;AACpB,QAAI,KAAK,OAAT,EAAkB;AAChB,WAAK,aAAL,CAAmB,IAAnB;AACD;;AACD,SAAK,MAAL,CAAY,MAAZ,CAAmB,KAAnB,EAA0B,CAA1B,EAA6B,IAA7B;AACA,SAAK,aAAL;AACA,SAAK,aAAL,CACE,IAAI,eAAJ,CAAoB,mBAAmB,CAAC,GAAxC,EAA6C,IAA7C,CADF;AAED,G;;;;;;;;;uBAQD,G,GAAA,SAAA,GAAA,GAAM;AACJ,WAAO,KAAK,QAAL,CAAc,KAAK,SAAL,KAAmB,CAAjC,CAAP;AACD,G;;;;;;;;;uBAQD,I,GAAA,SAAA,IAAA,CAAK,IAAL,EAAW;AACT,QAAI,KAAK,OAAT,EAAkB;AAChB,WAAK,aAAL,CAAmB,IAAnB;AACD;;AACDF,QAAM,CAAC,GAAG,KAAK,SAAL,EAAVA;AACA,SAAK,QAAL,CAAc,CAAd,EAAiB,IAAjB;AACA,WAAO,KAAK,SAAL,EAAP;AACD,G;;;;;;;;;uBAQD,M,GAAA,SAAA,MAAA,CAAO,IAAP,EAAa;AACXA,QAAM,GAAG,GAAG,KAAK,MAAjBA;;AACA,SAAKE,IAAI,CAAC,GAAG,CAARA,EAAW,EAAE,GAAG,GAAG,CAAC,MAAzB,EAAiC,CAAC,GAAG,EAArC,EAAyC,EAAE,CAA3C,EAA8C;AAC5C,UAAI,GAAG,CAAC,CAAD,CAAH,KAAW,IAAf,EAAqB;AACnB,eAAO,KAAK,QAAL,CAAc,CAAd,CAAP;AACD;AACF;;AACD,WAAO,SAAP;AACD,G;;;;;;;;;;uBASD,Q,GAAA,SAAA,QAAA,CAAS,KAAT,EAAgB;AACdF,QAAM,IAAI,GAAG,KAAK,MAAL,CAAY,KAAZ,CAAbA;AACA,SAAK,MAAL,CAAY,MAAZ,CAAmB,KAAnB,EAA0B,CAA1B;AACA,SAAK,aAAL;AACA,SAAK,aAAL,CAAmB,IAAI,eAAJ,CAAoB,mBAAmB,CAAC,MAAxC,EAAgD,IAAhD,CAAnB;AACA,WAAO,IAAP;AACD,G;;;;;;;;;uBAQD,K,GAAA,SAAA,KAAA,CAAM,KAAN,EAAa,IAAb,EAAmB;AACjBA,QAAM,CAAC,GAAG,KAAK,SAAL,EAAVA;;AACA,QAAI,KAAK,GAAG,CAAZ,EAAe;AACb,UAAI,KAAK,OAAT,EAAkB;AAChB,aAAK,aAAL,CAAmB,IAAnB,EAAyB,KAAzB;AACD;;AACDA,UAAM,IAAI,GAAG,KAAK,MAAL,CAAY,KAAZ,CAAbA;AACA,WAAK,MAAL,CAAY,KAAZ,IAAqB,IAArB;AACA,WAAK,aAAL,CACE,IAAI,eAAJ,CAAoB,mBAAmB,CAAC,MAAxC,EAAgD,IAAhD,CADF;AAEA,WAAK,aAAL,CACE,IAAI,eAAJ,CAAoB,mBAAmB,CAAC,GAAxC,EAA6C,IAA7C,CADF;AAED,KAVD,MAUO;AACL,WAAKE,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,KAApB,EAA2B,EAAE,CAA7B,EAAgC;AAC9B,aAAK,QAAL,CAAc,CAAd,EAAiB,SAAjB;AACD;;AACD,WAAK,QAAL,CAAc,KAAd,EAAqB,IAArB;AACD;AACF,G;;;;;;uBAKD,a,GAAA,SAAA,aAAA,GAAgB;AACd,SAAK,GAAL,CAAS,QAAQ,CAAC,MAAlB,EAA0B,KAAK,MAAL,CAAY,MAAtC;AACD,G;;;;;;;;uBAOD,a,GAAA,SAAA,aAAA,CAAc,IAAd,EAAoB,UAApB,EAAgC;AAC9B,SAAKA,IAAI,CAAC,GAAG,CAARA,EAAW,EAAE,GAAG,KAAK,MAAL,CAAY,MAAjC,EAAyC,CAAC,GAAG,EAA7C,EAAiD,EAAE,CAAnD,EAAsD;AACpD,UAAI,KAAK,MAAL,CAAY,CAAZ,MAAmB,IAAnB,IAA2B,CAAC,KAAK,UAArC,EAAiD;AAC/C,cAAM,IAAI,cAAJ,CAAmB,EAAnB,CAAN;AACD;AACF;AACF,G;;;CA5NgC,CAAV,UAAU,CAAnC;;AAgOA,eAAe,UAAf","sourcesContent":["/**\n * @module ol/Collection\n */\nimport AssertionError from './AssertionError.js';\nimport CollectionEventType from './CollectionEventType.js';\nimport BaseObject from './Object.js';\nimport Event from './events/Event.js';\n\n\n/**\n * @enum {string}\n * @private\n */\nconst Property = {\n  LENGTH: 'length'\n};\n\n\n/**\n * @classdesc\n * Events emitted by {@link module:ol/Collection~Collection} instances are instances of this\n * type.\n */\nexport class CollectionEvent extends Event {\n\n  /**\n   * @param {CollectionEventType} type Type.\n   * @param {*=} opt_element Element.\n   */\n  constructor(type, opt_element) {\n    super(type);\n\n    /**\n     * The element that is added to or removed from the collection.\n     * @type {*}\n     * @api\n     */\n    this.element = opt_element;\n\n  }\n\n}\n\n\n/**\n * @typedef {Object} Options\n * @property {boolean} [unique=false] Disallow the same item from being added to\n * the collection twice.\n */\n\n/**\n * @classdesc\n * An expanded version of standard JS Array, adding convenience methods for\n * manipulation. Add and remove changes to the Collection trigger a Collection\n * event. Note that this does not cover changes to the objects _within_ the\n * Collection; they trigger events on the appropriate object, not on the\n * Collection as a whole.\n *\n * @fires CollectionEvent\n *\n * @template T\n * @api\n */\nclass Collection extends BaseObject {\n\n  /**\n   * @param {Array<T>=} opt_array Array.\n   * @param {Options=} opt_options Collection options.\n   */\n  constructor(opt_array, opt_options) {\n\n    super();\n\n    const options = opt_options || {};\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.unique_ = !!options.unique;\n\n    /**\n     * @private\n     * @type {!Array<T>}\n     */\n    this.array_ = opt_array ? opt_array : [];\n\n    if (this.unique_) {\n      for (let i = 0, ii = this.array_.length; i < ii; ++i) {\n        this.assertUnique_(this.array_[i], i);\n      }\n    }\n\n    this.updateLength_();\n\n  }\n\n  /**\n   * Remove all elements from the collection.\n   * @api\n   */\n  clear() {\n    while (this.getLength() > 0) {\n      this.pop();\n    }\n  }\n\n  /**\n   * Add elements to the collection.  This pushes each item in the provided array\n   * to the end of the collection.\n   * @param {!Array<T>} arr Array.\n   * @return {Collection<T>} This collection.\n   * @api\n   */\n  extend(arr) {\n    for (let i = 0, ii = arr.length; i < ii; ++i) {\n      this.push(arr[i]);\n    }\n    return this;\n  }\n\n  /**\n   * Iterate over each element, calling the provided callback.\n   * @param {function(T, number, Array<T>): *} f The function to call\n   *     for every element. This function takes 3 arguments (the element, the\n   *     index and the array). The return value is ignored.\n   * @api\n   */\n  forEach(f) {\n    const array = this.array_;\n    for (let i = 0, ii = array.length; i < ii; ++i) {\n      f(array[i], i, array);\n    }\n  }\n\n  /**\n   * Get a reference to the underlying Array object. Warning: if the array\n   * is mutated, no events will be dispatched by the collection, and the\n   * collection's \"length\" property won't be in sync with the actual length\n   * of the array.\n   * @return {!Array<T>} Array.\n   * @api\n   */\n  getArray() {\n    return this.array_;\n  }\n\n  /**\n   * Get the element at the provided index.\n   * @param {number} index Index.\n   * @return {T} Element.\n   * @api\n   */\n  item(index) {\n    return this.array_[index];\n  }\n\n  /**\n   * Get the length of this collection.\n   * @return {number} The length of the array.\n   * @observable\n   * @api\n   */\n  getLength() {\n    return this.get(Property.LENGTH);\n  }\n\n  /**\n   * Insert an element at the provided index.\n   * @param {number} index Index.\n   * @param {T} elem Element.\n   * @api\n   */\n  insertAt(index, elem) {\n    if (this.unique_) {\n      this.assertUnique_(elem);\n    }\n    this.array_.splice(index, 0, elem);\n    this.updateLength_();\n    this.dispatchEvent(\n      new CollectionEvent(CollectionEventType.ADD, elem));\n  }\n\n  /**\n   * Remove the last element of the collection and return it.\n   * Return `undefined` if the collection is empty.\n   * @return {T|undefined} Element.\n   * @api\n   */\n  pop() {\n    return this.removeAt(this.getLength() - 1);\n  }\n\n  /**\n   * Insert the provided element at the end of the collection.\n   * @param {T} elem Element.\n   * @return {number} New length of the collection.\n   * @api\n   */\n  push(elem) {\n    if (this.unique_) {\n      this.assertUnique_(elem);\n    }\n    const n = this.getLength();\n    this.insertAt(n, elem);\n    return this.getLength();\n  }\n\n  /**\n   * Remove the first occurrence of an element from the collection.\n   * @param {T} elem Element.\n   * @return {T|undefined} The removed element or undefined if none found.\n   * @api\n   */\n  remove(elem) {\n    const arr = this.array_;\n    for (let i = 0, ii = arr.length; i < ii; ++i) {\n      if (arr[i] === elem) {\n        return this.removeAt(i);\n      }\n    }\n    return undefined;\n  }\n\n  /**\n   * Remove the element at the provided index and return it.\n   * Return `undefined` if the collection does not contain this index.\n   * @param {number} index Index.\n   * @return {T|undefined} Value.\n   * @api\n   */\n  removeAt(index) {\n    const prev = this.array_[index];\n    this.array_.splice(index, 1);\n    this.updateLength_();\n    this.dispatchEvent(new CollectionEvent(CollectionEventType.REMOVE, prev));\n    return prev;\n  }\n\n  /**\n   * Set the element at the provided index.\n   * @param {number} index Index.\n   * @param {T} elem Element.\n   * @api\n   */\n  setAt(index, elem) {\n    const n = this.getLength();\n    if (index < n) {\n      if (this.unique_) {\n        this.assertUnique_(elem, index);\n      }\n      const prev = this.array_[index];\n      this.array_[index] = elem;\n      this.dispatchEvent(\n        new CollectionEvent(CollectionEventType.REMOVE, prev));\n      this.dispatchEvent(\n        new CollectionEvent(CollectionEventType.ADD, elem));\n    } else {\n      for (let j = n; j < index; ++j) {\n        this.insertAt(j, undefined);\n      }\n      this.insertAt(index, elem);\n    }\n  }\n\n  /**\n   * @private\n   */\n  updateLength_() {\n    this.set(Property.LENGTH, this.array_.length);\n  }\n\n  /**\n   * @private\n   * @param {T} elem Element.\n   * @param {number=} opt_except Optional index to ignore.\n   */\n  assertUnique_(elem, opt_except) {\n    for (let i = 0, ii = this.array_.length; i < ii; ++i) {\n      if (this.array_[i] === elem && i !== opt_except) {\n        throw new AssertionError(58);\n      }\n    }\n  }\n}\n\n\nexport default Collection;\n"]},"metadata":{},"sourceType":"module"}