{"ast":null,"code":"/**\n * @module ol/render/Feature\n */\nimport { extend } from '../array.js';\nimport { createOrUpdateFromCoordinate, createOrUpdateFromFlatCoordinates, getCenter, getHeight } from '../extent.js';\nimport GeometryType from '../geom/GeometryType.js';\nimport { linearRingss as linearRingssCenter } from '../geom/flat/center.js';\nimport { getInteriorPointOfArray, getInteriorPointsOfMultiArray } from '../geom/flat/interiorpoint.js';\nimport { interpolatePoint } from '../geom/flat/interpolate.js';\nimport { get as getProjection } from '../proj.js';\nimport { transform2D } from '../geom/flat/transform.js';\nimport { create as createTransform, compose as composeTransform } from '../transform.js';\n/**\n * @type {import(\"../transform.js\").Transform}\n */\n\nvar tmpTransform = createTransform();\n/**\n * Lightweight, read-only, {@link module:ol/Feature~Feature} and {@link module:ol/geom/Geometry~Geometry} like\n * structure, optimized for vector tile rendering and styling. Geometry access\n * through the API is limited to getting the type and extent of the geometry.\n *\n * @param {GeometryType} type Geometry type.\n * @param {Array<number>} flatCoordinates Flat coordinates. These always need\n *     to be right-handed for polygons.\n * @param {Array<number>|Array<Array<number>>} ends Ends or Endss.\n * @param {Object<string, *>} properties Properties.\n * @param {number|string|undefined} id Feature id.\n */\n\nvar RenderFeature = function RenderFeature(type, flatCoordinates, ends, properties, id) {\n  /**\n  * @private\n  * @type {import(\"../extent.js\").Extent|undefined}\n  */\n  this.extent_;\n  /**\n  * @private\n  * @type {number|string|undefined}\n  */\n\n  this.id_ = id;\n  /**\n  * @private\n  * @type {GeometryType}\n  */\n\n  this.type_ = type;\n  /**\n  * @private\n  * @type {Array<number>}\n  */\n\n  this.flatCoordinates_ = flatCoordinates;\n  /**\n  * @private\n  * @type {Array<number>}\n  */\n\n  this.flatInteriorPoints_ = null;\n  /**\n  * @private\n  * @type {Array<number>}\n  */\n\n  this.flatMidpoints_ = null;\n  /**\n  * @private\n  * @type {Array<number>|Array<Array<number>>}\n  */\n\n  this.ends_ = ends;\n  /**\n  * @private\n  * @type {Object<string, *>}\n  */\n\n  this.properties_ = properties;\n};\n/**\n* Get a feature property by its key.\n* @param {string} key Key\n* @return {*} Value for the requested key.\n* @api\n*/\n\n\nRenderFeature.prototype.get = function get(key) {\n  return this.properties_[key];\n};\n/**\n* Get the extent of this feature's geometry.\n* @return {import(\"../extent.js\").Extent} Extent.\n* @api\n*/\n\n\nRenderFeature.prototype.getExtent = function getExtent() {\n  if (!this.extent_) {\n    this.extent_ = this.type_ === GeometryType.POINT ? createOrUpdateFromCoordinate(this.flatCoordinates_) : createOrUpdateFromFlatCoordinates(this.flatCoordinates_, 0, this.flatCoordinates_.length, 2);\n  }\n\n  return this.extent_;\n};\n/**\n* @return {Array<number>} Flat interior points.\n*/\n\n\nRenderFeature.prototype.getFlatInteriorPoint = function getFlatInteriorPoint() {\n  if (!this.flatInteriorPoints_) {\n    var flatCenter = getCenter(this.getExtent());\n    this.flatInteriorPoints_ = getInteriorPointOfArray(this.flatCoordinates_, 0,\n    /** @type {Array<number>} */\n    this.ends_, 2, flatCenter, 0);\n  }\n\n  return this.flatInteriorPoints_;\n};\n/**\n* @return {Array<number>} Flat interior points.\n*/\n\n\nRenderFeature.prototype.getFlatInteriorPoints = function getFlatInteriorPoints() {\n  if (!this.flatInteriorPoints_) {\n    var flatCenters = linearRingssCenter(this.flatCoordinates_, 0,\n    /** @type {Array<Array<number>>} */\n    this.ends_, 2);\n    this.flatInteriorPoints_ = getInteriorPointsOfMultiArray(this.flatCoordinates_, 0,\n    /** @type {Array<Array<number>>} */\n    this.ends_, 2, flatCenters);\n  }\n\n  return this.flatInteriorPoints_;\n};\n/**\n* @return {Array<number>} Flat midpoint.\n*/\n\n\nRenderFeature.prototype.getFlatMidpoint = function getFlatMidpoint() {\n  if (!this.flatMidpoints_) {\n    this.flatMidpoints_ = interpolatePoint(this.flatCoordinates_, 0, this.flatCoordinates_.length, 2, 0.5);\n  }\n\n  return this.flatMidpoints_;\n};\n/**\n* @return {Array<number>} Flat midpoints.\n*/\n\n\nRenderFeature.prototype.getFlatMidpoints = function getFlatMidpoints() {\n  if (!this.flatMidpoints_) {\n    this.flatMidpoints_ = [];\n    var flatCoordinates = this.flatCoordinates_;\n    var offset = 0;\n    var ends =\n    /** @type {Array<number>} */\n    this.ends_;\n\n    for (var i = 0, ii = ends.length; i < ii; ++i) {\n      var end = ends[i];\n      var midpoint = interpolatePoint(flatCoordinates, offset, end, 2, 0.5);\n      extend(this.flatMidpoints_, midpoint);\n      offset = end;\n    }\n  }\n\n  return this.flatMidpoints_;\n};\n/**\n* Get the feature identifier.This is a stable identifier for the feature and\n* is set when reading data from a remote source.\n* @return {number|string|undefined} Id.\n* @api\n*/\n\n\nRenderFeature.prototype.getId = function getId() {\n  return this.id_;\n};\n/**\n* @return {Array<number>} Flat coordinates.\n*/\n\n\nRenderFeature.prototype.getOrientedFlatCoordinates = function getOrientedFlatCoordinates() {\n  return this.flatCoordinates_;\n};\n/**\n* For API compatibility with {@link module:ol/Feature~Feature}, this method is useful when\n* determining the geometry type in style function (see {@link #getType}).\n* @return {RenderFeature} Feature.\n* @api\n*/\n\n\nRenderFeature.prototype.getGeometry = function getGeometry() {\n  return this;\n};\n/**\n * @param {number} squaredTolerance Squared tolerance.\n * @return {RenderFeature} Simplified geometry.\n */\n\n\nRenderFeature.prototype.getSimplifiedGeometry = function getSimplifiedGeometry(squaredTolerance) {\n  return this;\n};\n/**\n* Get the feature properties.\n* @return {Object<string, *>} Feature properties.\n* @api\n*/\n\n\nRenderFeature.prototype.getProperties = function getProperties() {\n  return this.properties_;\n};\n/**\n* @return {number} Stride.\n*/\n\n\nRenderFeature.prototype.getStride = function getStride() {\n  return 2;\n};\n/**\n * @return {undefined}\n */\n\n\nRenderFeature.prototype.getStyleFunction = function getStyleFunction() {\n  return undefined;\n};\n/**\n* Get the type of this feature's geometry.\n* @return {GeometryType} Geometry type.\n* @api\n*/\n\n\nRenderFeature.prototype.getType = function getType() {\n  return this.type_;\n};\n/**\n* Transform geometry coordinates from tile pixel space to projected.\n* The SRS of the source and destination are expected to be the same.\n*\n* @param {import(\"../proj.js\").ProjectionLike} source The current projection\n* @param {import(\"../proj.js\").ProjectionLike} destination The desired projection.\n*/\n\n\nRenderFeature.prototype.transform = function transform(source, destination) {\n  source = getProjection(source);\n  var pixelExtent = source.getExtent();\n  var projectedExtent = source.getWorldExtent();\n  var scale = getHeight(projectedExtent) / getHeight(pixelExtent);\n  composeTransform(tmpTransform, projectedExtent[0], projectedExtent[3], scale, -scale, 0, 0, 0);\n  transform2D(this.flatCoordinates_, 0, this.flatCoordinates_.length, 2, tmpTransform, this.flatCoordinates_);\n};\n/**\n * @return {Array<number>|Array<Array<number>>} Ends or endss.\n */\n\n\nRenderFeature.prototype.getEnds = RenderFeature.prototype.getEndss = function () {\n  return this.ends_;\n};\n/**\n * @return {Array<number>} Flat coordinates.\n */\n\n\nRenderFeature.prototype.getFlatCoordinates = RenderFeature.prototype.getOrientedFlatCoordinates;\nexport default RenderFeature;","map":{"version":3,"sources":["../../../src/ol/render/Feature.js"],"names":["const","let"],"mappings":"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","sourcesContent":["/**\n * @module ol/render/Feature\n */\nimport {extend} from '../array.js';\nimport {createOrUpdateFromCoordinate, createOrUpdateFromFlatCoordinates, getCenter, getHeight} from '../extent.js';\nimport GeometryType from '../geom/GeometryType.js';\nimport {linearRingss as linearRingssCenter} from '../geom/flat/center.js';\nimport {getInteriorPointOfArray, getInteriorPointsOfMultiArray} from '../geom/flat/interiorpoint.js';\nimport {interpolatePoint} from '../geom/flat/interpolate.js';\nimport {get as getProjection} from '../proj.js';\nimport {transform2D} from '../geom/flat/transform.js';\nimport {create as createTransform, compose as composeTransform} from '../transform.js';\n\n\n/**\n * @type {import(\"../transform.js\").Transform}\n */\nconst tmpTransform = createTransform();\n\n\n/**\n * Lightweight, read-only, {@link module:ol/Feature~Feature} and {@link module:ol/geom/Geometry~Geometry} like\n * structure, optimized for vector tile rendering and styling. Geometry access\n * through the API is limited to getting the type and extent of the geometry.\n *\n * @param {GeometryType} type Geometry type.\n * @param {Array<number>} flatCoordinates Flat coordinates. These always need\n *     to be right-handed for polygons.\n * @param {Array<number>|Array<Array<number>>} ends Ends or Endss.\n * @param {Object<string, *>} properties Properties.\n * @param {number|string|undefined} id Feature id.\n */\nclass RenderFeature {\n  constructor(type, flatCoordinates, ends, properties, id) {\n    /**\n    * @private\n    * @type {import(\"../extent.js\").Extent|undefined}\n    */\n    this.extent_;\n\n    /**\n    * @private\n    * @type {number|string|undefined}\n    */\n    this.id_ = id;\n\n    /**\n    * @private\n    * @type {GeometryType}\n    */\n    this.type_ = type;\n\n    /**\n    * @private\n    * @type {Array<number>}\n    */\n    this.flatCoordinates_ = flatCoordinates;\n\n    /**\n    * @private\n    * @type {Array<number>}\n    */\n    this.flatInteriorPoints_ = null;\n\n    /**\n    * @private\n    * @type {Array<number>}\n    */\n    this.flatMidpoints_ = null;\n\n    /**\n    * @private\n    * @type {Array<number>|Array<Array<number>>}\n    */\n    this.ends_ = ends;\n\n    /**\n    * @private\n    * @type {Object<string, *>}\n    */\n    this.properties_ = properties;\n\n  }\n\n  /**\n  * Get a feature property by its key.\n  * @param {string} key Key\n  * @return {*} Value for the requested key.\n  * @api\n  */\n  get(key) {\n    return this.properties_[key];\n  }\n\n  /**\n  * Get the extent of this feature's geometry.\n  * @return {import(\"../extent.js\").Extent} Extent.\n  * @api\n  */\n  getExtent() {\n    if (!this.extent_) {\n      this.extent_ = this.type_ === GeometryType.POINT ?\n        createOrUpdateFromCoordinate(this.flatCoordinates_) :\n        createOrUpdateFromFlatCoordinates(\n          this.flatCoordinates_, 0, this.flatCoordinates_.length, 2);\n\n    }\n    return this.extent_;\n  }\n\n  /**\n  * @return {Array<number>} Flat interior points.\n  */\n  getFlatInteriorPoint() {\n    if (!this.flatInteriorPoints_) {\n      const flatCenter = getCenter(this.getExtent());\n      this.flatInteriorPoints_ = getInteriorPointOfArray(\n        this.flatCoordinates_, 0, /** @type {Array<number>} */ (this.ends_), 2, flatCenter, 0);\n    }\n    return this.flatInteriorPoints_;\n  }\n\n  /**\n  * @return {Array<number>} Flat interior points.\n  */\n  getFlatInteriorPoints() {\n    if (!this.flatInteriorPoints_) {\n      const flatCenters = linearRingssCenter(\n        this.flatCoordinates_, 0, /** @type {Array<Array<number>>} */ (this.ends_), 2);\n      this.flatInteriorPoints_ = getInteriorPointsOfMultiArray(\n        this.flatCoordinates_, 0, /** @type {Array<Array<number>>} */ (this.ends_), 2, flatCenters);\n    }\n    return this.flatInteriorPoints_;\n  }\n\n  /**\n  * @return {Array<number>} Flat midpoint.\n  */\n  getFlatMidpoint() {\n    if (!this.flatMidpoints_) {\n      this.flatMidpoints_ = interpolatePoint(\n        this.flatCoordinates_, 0, this.flatCoordinates_.length, 2, 0.5);\n    }\n    return this.flatMidpoints_;\n  }\n\n  /**\n  * @return {Array<number>} Flat midpoints.\n  */\n  getFlatMidpoints() {\n    if (!this.flatMidpoints_) {\n      this.flatMidpoints_ = [];\n      const flatCoordinates = this.flatCoordinates_;\n      let offset = 0;\n      const ends = /** @type {Array<number>} */ (this.ends_);\n      for (let i = 0, ii = ends.length; i < ii; ++i) {\n        const end = ends[i];\n        const midpoint = interpolatePoint(\n          flatCoordinates, offset, end, 2, 0.5);\n        extend(this.flatMidpoints_, midpoint);\n        offset = end;\n      }\n    }\n    return this.flatMidpoints_;\n  }\n\n  /**\n  * Get the feature identifier.  This is a stable identifier for the feature and\n  * is set when reading data from a remote source.\n  * @return {number|string|undefined} Id.\n  * @api\n  */\n  getId() {\n    return this.id_;\n  }\n\n  /**\n  * @return {Array<number>} Flat coordinates.\n  */\n  getOrientedFlatCoordinates() {\n    return this.flatCoordinates_;\n  }\n\n  /**\n  * For API compatibility with {@link module:ol/Feature~Feature}, this method is useful when\n  * determining the geometry type in style function (see {@link #getType}).\n  * @return {RenderFeature} Feature.\n  * @api\n  */\n  getGeometry() {\n    return this;\n  }\n\n  /**\n   * @param {number} squaredTolerance Squared tolerance.\n   * @return {RenderFeature} Simplified geometry.\n   */\n  getSimplifiedGeometry(squaredTolerance) {\n    return this;\n  }\n\n  /**\n  * Get the feature properties.\n  * @return {Object<string, *>} Feature properties.\n  * @api\n  */\n  getProperties() {\n    return this.properties_;\n  }\n\n  /**\n  * @return {number} Stride.\n  */\n  getStride() {\n    return 2;\n  }\n\n  /**\n   * @return {undefined}\n   */\n  getStyleFunction() {\n    return undefined;\n  }\n\n  /**\n  * Get the type of this feature's geometry.\n  * @return {GeometryType} Geometry type.\n  * @api\n  */\n  getType() {\n    return this.type_;\n  }\n\n  /**\n  * Transform geometry coordinates from tile pixel space to projected.\n  * The SRS of the source and destination are expected to be the same.\n  *\n  * @param {import(\"../proj.js\").ProjectionLike} source The current projection\n  * @param {import(\"../proj.js\").ProjectionLike} destination The desired projection.\n  */\n  transform(source, destination) {\n    source = getProjection(source);\n    const pixelExtent = source.getExtent();\n    const projectedExtent = source.getWorldExtent();\n    const scale = getHeight(projectedExtent) / getHeight(pixelExtent);\n    composeTransform(tmpTransform,\n      projectedExtent[0], projectedExtent[3],\n      scale, -scale, 0,\n      0, 0);\n    transform2D(this.flatCoordinates_, 0, this.flatCoordinates_.length, 2,\n      tmpTransform, this.flatCoordinates_);\n  }\n}\n\n\n/**\n * @return {Array<number>|Array<Array<number>>} Ends or endss.\n */\nRenderFeature.prototype.getEnds =\nRenderFeature.prototype.getEndss = function() {\n  return this.ends_;\n};\n\n\n/**\n * @return {Array<number>} Flat coordinates.\n */\nRenderFeature.prototype.getFlatCoordinates =\n    RenderFeature.prototype.getOrientedFlatCoordinates;\n\n\nexport default RenderFeature;\n"]},"metadata":{},"sourceType":"module"}