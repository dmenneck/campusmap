{"ast":null,"code":"/**\n * @module ol/Observable\n */\nimport { listen, unlistenByKey, unlisten, listenOnce } from './events.js';\nimport EventTarget from './events/Target.js';\nimport EventType from './events/EventType.js';\n/**\n * @classdesc\n * Abstract base class; normally only used for creating subclasses and not\n * instantiated in apps.\n * An event target providing convenient methods for listener registration\n * and unregistration. A generic `change` event is always available through\n * {@link module:ol/Observable~Observable#changed}.\n *\n * @fires import(\"./events/Event.js\").Event\n * @api\n */\n\nvar Observable =\n/*@__PURE__*/\nfunction (EventTarget) {\n  function Observable() {\n    EventTarget.call(this);\n    /**\n     * @private\n     * @type {number}\n     */\n\n    this.revision_ = 0;\n  }\n\n  if (EventTarget) Observable.__proto__ = EventTarget;\n  Observable.prototype = Object.create(EventTarget && EventTarget.prototype);\n  Observable.prototype.constructor = Observable;\n  /**\n   * Increases the revision counter and dispatches a 'change' event.\n   * @api\n   */\n\n  Observable.prototype.changed = function changed() {\n    ++this.revision_;\n    this.dispatchEvent(EventType.CHANGE);\n  };\n  /**\n   * Get the version number for this object.  Each time the object is modified,\n   * its version number will be incremented.\n   * @return {number} Revision.\n   * @api\n   */\n\n\n  Observable.prototype.getRevision = function getRevision() {\n    return this.revision_;\n  };\n  /**\n   * Listen for a certain type of event.\n   * @param {string|Array<string>} type The event type or array of event types.\n   * @param {function(?): ?} listener The listener function.\n   * @return {import(\"./events.js\").EventsKey|Array<import(\"./events.js\").EventsKey>} Unique key for the listener. If\n   *     called with an array of event types as the first argument, the return\n   *     will be an array of keys.\n   * @api\n   */\n\n\n  Observable.prototype.on = function on(type, listener) {\n    if (Array.isArray(type)) {\n      var len = type.length;\n      var keys = new Array(len);\n\n      for (var i = 0; i < len; ++i) {\n        keys[i] = listen(this, type[i], listener);\n      }\n\n      return keys;\n    } else {\n      return listen(this,\n      /** @type {string} */\n      type, listener);\n    }\n  };\n  /**\n   * Listen once for a certain type of event.\n   * @param {string|Array<string>} type The event type or array of event types.\n   * @param {function(?): ?} listener The listener function.\n   * @return {import(\"./events.js\").EventsKey|Array<import(\"./events.js\").EventsKey>} Unique key for the listener. If\n   *     called with an array of event types as the first argument, the return\n   *     will be an array of keys.\n   * @api\n   */\n\n\n  Observable.prototype.once = function once(type, listener) {\n    if (Array.isArray(type)) {\n      var len = type.length;\n      var keys = new Array(len);\n\n      for (var i = 0; i < len; ++i) {\n        keys[i] = listenOnce(this, type[i], listener);\n      }\n\n      return keys;\n    } else {\n      return listenOnce(this,\n      /** @type {string} */\n      type, listener);\n    }\n  };\n  /**\n   * Unlisten for a certain type of event.\n   * @param {string|Array<string>} type The event type or array of event types.\n   * @param {function(?): ?} listener The listener function.\n   * @api\n   */\n\n\n  Observable.prototype.un = function un(type, listener) {\n    if (Array.isArray(type)) {\n      for (var i = 0, ii = type.length; i < ii; ++i) {\n        unlisten(this, type[i], listener);\n      }\n\n      return;\n    } else {\n      unlisten(this,\n      /** @type {string} */\n      type, listener);\n    }\n  };\n\n  return Observable;\n}(EventTarget);\n/**\n * Removes an event listener using the key returned by `on()` or `once()`.\n * @param {import(\"./events.js\").EventsKey|Array<import(\"./events.js\").EventsKey>} key The key returned by `on()`\n *     or `once()` (or an array of keys).\n * @api\n */\n\n\nexport function unByKey(key) {\n  if (Array.isArray(key)) {\n    for (var i = 0, ii = key.length; i < ii; ++i) {\n      unlistenByKey(key[i]);\n    }\n  } else {\n    unlistenByKey(\n    /** @type {import(\"./events.js\").EventsKey} */\n    key);\n  }\n}\nexport default Observable;","map":{"version":3,"sources":["../../src/ol/Observable.js"],"names":["super","const","let"],"mappings":"AAAA;;;AAGA,SAAQ,MAAR,EAAgB,aAAhB,EAA+B,QAA/B,EAAyC,UAAzC,QAA0D,aAA1D;AACA,OAAO,WAAP,MAAwB,oBAAxB;AACA,OAAO,SAAP,MAAsB,uBAAtB;;;;;;;;;;;;;AAaA,IAAM,UAAU;AAAoB;AAAA,UAAA,WAAA,EAAA;AAClC,WAAA,UAAA,GAAc;AAEZA,IAAAA,WAAAA,CAAAA,IAAAA,CAAK,IAALA;;;;;;AAMA,SAAK,SAAL,GAAiB,CAAjB;;;;;qCAED,U;;;;;;uBAMD,O,GAAA,SAAA,OAAA,GAAU;AACR,MAAE,KAAK,SAAP;AACA,SAAK,aAAL,CAAmB,SAAS,CAAC,MAA7B;AACD,G;;;;;;;;;uBAQD,W,GAAA,SAAA,WAAA,GAAc;AACZ,WAAO,KAAK,SAAZ;AACD,G;;;;;;;;;;;;uBAWD,E,GAAA,SAAA,EAAA,CAAG,IAAH,EAAS,QAAT,EAAmB;AACjB,QAAI,KAAK,CAAC,OAAN,CAAc,IAAd,CAAJ,EAAyB;AACvBC,UAAM,GAAG,GAAG,IAAI,CAAC,MAAjBA;AACAA,UAAM,IAAI,GAAG,IAAI,KAAJ,CAAU,GAAV,CAAbA;;AACA,WAAKC,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,GAApB,EAAyB,EAAE,CAA3B,EAA8B;AAC5B,QAAA,IAAI,CAAC,CAAD,CAAJ,GAAU,MAAM,CAAC,IAAD,EAAO,IAAI,CAAC,CAAD,CAAX,EAAgB,QAAhB,CAAhB;AACD;;AACD,aAAO,IAAP;AACD,KAPD,MAOO;AACL,aAAO,MAAM,CAAC,IAAD;AAAK;AAAyB,MAAA,IAA9B,EAAqC,QAArC,CAAb;AACD;AACF,G;;;;;;;;;;;;uBAWD,I,GAAA,SAAA,IAAA,CAAK,IAAL,EAAW,QAAX,EAAqB;AACnB,QAAI,KAAK,CAAC,OAAN,CAAc,IAAd,CAAJ,EAAyB;AACvBD,UAAM,GAAG,GAAG,IAAI,CAAC,MAAjBA;AACAA,UAAM,IAAI,GAAG,IAAI,KAAJ,CAAU,GAAV,CAAbA;;AACA,WAAKC,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,GAApB,EAAyB,EAAE,CAA3B,EAA8B;AAC5B,QAAA,IAAI,CAAC,CAAD,CAAJ,GAAU,UAAU,CAAC,IAAD,EAAO,IAAI,CAAC,CAAD,CAAX,EAAgB,QAAhB,CAApB;AACD;;AACD,aAAO,IAAP;AACD,KAPD,MAOO;AACL,aAAO,UAAU,CAAC,IAAD;AAAK;AAAyB,MAAA,IAA9B,EAAqC,QAArC,CAAjB;AACD;AACF,G;;;;;;;;;uBAQD,E,GAAA,SAAA,EAAA,CAAG,IAAH,EAAS,QAAT,EAAmB;AACjB,QAAI,KAAK,CAAC,OAAN,CAAc,IAAd,CAAJ,EAAyB;AACvB,WAAKA,IAAI,CAAC,GAAG,CAARA,EAAW,EAAE,GAAG,IAAI,CAAC,MAA1B,EAAkC,CAAC,GAAG,EAAtC,EAA0C,EAAE,CAA5C,EAA+C;AAC7C,QAAA,QAAQ,CAAC,IAAD,EAAO,IAAI,CAAC,CAAD,CAAX,EAAgB,QAAhB,CAAR;AACD;;AACD;AACD,KALD,MAKO;AACL,MAAA,QAAQ,CAAC,IAAD;AAAK;AAAyB,MAAA,IAA9B,EAAqC,QAArC,CAAR;AACD;AACF,G;;;CA3FiC,CAAX,WAAW,CAApC;;;;;;;;;AAqGA,OAAO,SAAS,OAAT,CAAiB,GAAjB,EAAsB;AAC3B,MAAI,KAAK,CAAC,OAAN,CAAc,GAAd,CAAJ,EAAwB;AACtB,SAAKA,IAAI,CAAC,GAAG,CAARA,EAAW,EAAE,GAAG,GAAG,CAAC,MAAzB,EAAiC,CAAC,GAAG,EAArC,EAAyC,EAAE,CAA3C,EAA8C;AAC5C,MAAA,aAAa,CAAC,GAAG,CAAC,CAAD,CAAJ,CAAb;AACD;AACF,GAJD,MAIO;AACL,IAAA,aAAa;AAAA;AAAiD,IAAA,GAAjD,CAAb;AACD;AACF;AAGD,eAAe,UAAf","sourcesContent":["/**\n * @module ol/Observable\n */\nimport {listen, unlistenByKey, unlisten, listenOnce} from './events.js';\nimport EventTarget from './events/Target.js';\nimport EventType from './events/EventType.js';\n\n/**\n * @classdesc\n * Abstract base class; normally only used for creating subclasses and not\n * instantiated in apps.\n * An event target providing convenient methods for listener registration\n * and unregistration. A generic `change` event is always available through\n * {@link module:ol/Observable~Observable#changed}.\n *\n * @fires import(\"./events/Event.js\").Event\n * @api\n */\nclass Observable extends EventTarget {\n  constructor() {\n\n    super();\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.revision_ = 0;\n\n  }\n\n  /**\n   * Increases the revision counter and dispatches a 'change' event.\n   * @api\n   */\n  changed() {\n    ++this.revision_;\n    this.dispatchEvent(EventType.CHANGE);\n  }\n\n  /**\n   * Get the version number for this object.  Each time the object is modified,\n   * its version number will be incremented.\n   * @return {number} Revision.\n   * @api\n   */\n  getRevision() {\n    return this.revision_;\n  }\n\n  /**\n   * Listen for a certain type of event.\n   * @param {string|Array<string>} type The event type or array of event types.\n   * @param {function(?): ?} listener The listener function.\n   * @return {import(\"./events.js\").EventsKey|Array<import(\"./events.js\").EventsKey>} Unique key for the listener. If\n   *     called with an array of event types as the first argument, the return\n   *     will be an array of keys.\n   * @api\n   */\n  on(type, listener) {\n    if (Array.isArray(type)) {\n      const len = type.length;\n      const keys = new Array(len);\n      for (let i = 0; i < len; ++i) {\n        keys[i] = listen(this, type[i], listener);\n      }\n      return keys;\n    } else {\n      return listen(this, /** @type {string} */ (type), listener);\n    }\n  }\n\n  /**\n   * Listen once for a certain type of event.\n   * @param {string|Array<string>} type The event type or array of event types.\n   * @param {function(?): ?} listener The listener function.\n   * @return {import(\"./events.js\").EventsKey|Array<import(\"./events.js\").EventsKey>} Unique key for the listener. If\n   *     called with an array of event types as the first argument, the return\n   *     will be an array of keys.\n   * @api\n   */\n  once(type, listener) {\n    if (Array.isArray(type)) {\n      const len = type.length;\n      const keys = new Array(len);\n      for (let i = 0; i < len; ++i) {\n        keys[i] = listenOnce(this, type[i], listener);\n      }\n      return keys;\n    } else {\n      return listenOnce(this, /** @type {string} */ (type), listener);\n    }\n  }\n\n  /**\n   * Unlisten for a certain type of event.\n   * @param {string|Array<string>} type The event type or array of event types.\n   * @param {function(?): ?} listener The listener function.\n   * @api\n   */\n  un(type, listener) {\n    if (Array.isArray(type)) {\n      for (let i = 0, ii = type.length; i < ii; ++i) {\n        unlisten(this, type[i], listener);\n      }\n      return;\n    } else {\n      unlisten(this, /** @type {string} */ (type), listener);\n    }\n  }\n}\n\n\n/**\n * Removes an event listener using the key returned by `on()` or `once()`.\n * @param {import(\"./events.js\").EventsKey|Array<import(\"./events.js\").EventsKey>} key The key returned by `on()`\n *     or `once()` (or an array of keys).\n * @api\n */\nexport function unByKey(key) {\n  if (Array.isArray(key)) {\n    for (let i = 0, ii = key.length; i < ii; ++i) {\n      unlistenByKey(key[i]);\n    }\n  } else {\n    unlistenByKey(/** @type {import(\"./events.js\").EventsKey} */ (key));\n  }\n}\n\n\nexport default Observable;\n"]},"metadata":{},"sourceType":"module"}