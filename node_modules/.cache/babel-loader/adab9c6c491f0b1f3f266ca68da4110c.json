{"ast":null,"code":"/**\n * @module ol/layer/Layer\n */\nimport { listen, unlistenByKey } from '../events.js';\nimport EventType from '../events/EventType.js';\nimport { getUid, inherits } from '../util.js';\nimport { getChangeEventType } from '../Object.js';\nimport BaseLayer from '../layer/Base.js';\nimport LayerProperty from '../layer/Property.js';\nimport { assign } from '../obj.js';\nimport RenderEventType from '../render/EventType.js';\nimport SourceState from '../source/State.js';\n/**\n * @typedef {Object} Options\n * @property {number} [opacity=1] Opacity (0, 1).\n * @property {boolean} [visible=true] Visibility.\n * @property {module:ol/extent~Extent} [extent] The bounding extent for layer rendering.  The layer will not be\n * rendered outside of this extent.\n * @property {number} [zIndex=0] The z-index for layer rendering.  At rendering time, the layers\n * will be ordered, first by Z-index and then by position.\n * @property {number} [minResolution] The minimum resolution (inclusive) at which this layer will be\n * visible.\n * @property {number} [maxResolution] The maximum resolution (exclusive) below which this layer will\n * be visible.\n * @property {module:ol/source/Source} [source] Source for this layer.  If not provided to the constructor,\n * the source can be set by calling {@link module:ol/layer/Layer#setSource layer.setSource(source)} after\n * construction.\n */\n\n/**\n * @typedef {Object} State\n * @property {module:ol/layer/Layer} layer\n * @property {number} opacity\n * @property {module:ol/source/Source~State} sourceState\n * @property {boolean} visible\n * @property {boolean} managed\n * @property {module:ol/extent~Extent} [extent]\n * @property {number} zIndex\n * @property {number} maxResolution\n * @property {number} minResolution\n */\n\n/**\n * @classdesc\n * Abstract base class; normally only used for creating subclasses and not\n * instantiated in apps.\n * A visual representation of raster or vector map data.\n * Layers group together those properties that pertain to how the data is to be\n * displayed, irrespective of the source of that data.\n *\n * Layers are usually added to a map with {@link module:ol/Map#addLayer}. Components\n * like {@link module:ol/interaction/Select~Select} use unmanaged layers\n * internally. These unmanaged layers are associated with the map using\n * {@link module:ol/layer/Layer~Layer#setMap} instead.\n *\n * A generic `change` event is fired when the state of the source changes.\n *\n * @constructor\n * @abstract\n * @extends {module:ol/layer/Base}\n * @fires module:ol/render/Event~RenderEvent\n * @param {module:ol/layer/Layer~Options} options Layer options.\n * @api\n */\n\nconst Layer = function (options) {\n  const baseOptions = assign({}, options);\n  delete baseOptions.source;\n  BaseLayer.call(this,\n  /** @type {module:ol/layer/Base~Options} */\n  baseOptions);\n  /**\n   * @private\n   * @type {?module:ol/events~EventsKey}\n   */\n\n  this.mapPrecomposeKey_ = null;\n  /**\n   * @private\n   * @type {?module:ol/events~EventsKey}\n   */\n\n  this.mapRenderKey_ = null;\n  /**\n   * @private\n   * @type {?module:ol/events~EventsKey}\n   */\n\n  this.sourceChangeKey_ = null;\n\n  if (options.map) {\n    this.setMap(options.map);\n  }\n\n  listen(this, getChangeEventType(LayerProperty.SOURCE), this.handleSourcePropertyChange_, this);\n  const source = options.source ? options.source : null;\n  this.setSource(source);\n};\n\ninherits(Layer, BaseLayer);\n/**\n * Return `true` if the layer is visible, and if the passed resolution is\n * between the layer's minResolution and maxResolution. The comparison is\n * inclusive for `minResolution` and exclusive for `maxResolution`.\n * @param {module:ol/layer/Layer~State} layerState Layer state.\n * @param {number} resolution Resolution.\n * @return {boolean} The layer is visible at the given resolution.\n */\n\nexport function visibleAtResolution(layerState, resolution) {\n  return layerState.visible && resolution >= layerState.minResolution && resolution < layerState.maxResolution;\n}\n/**\n * @inheritDoc\n */\n\nLayer.prototype.getLayersArray = function (opt_array) {\n  const array = opt_array ? opt_array : [];\n  array.push(this);\n  return array;\n};\n/**\n * @inheritDoc\n */\n\n\nLayer.prototype.getLayerStatesArray = function (opt_states) {\n  const states = opt_states ? opt_states : [];\n  states.push(this.getLayerState());\n  return states;\n};\n/**\n * Get the layer source.\n * @return {module:ol/source/Source} The layer source (or `null` if not yet set).\n * @observable\n * @api\n */\n\n\nLayer.prototype.getSource = function () {\n  const source = this.get(LayerProperty.SOURCE);\n  return (\n    /** @type {module:ol/source/Source} */\n    source || null\n  );\n};\n/**\n  * @inheritDoc\n  */\n\n\nLayer.prototype.getSourceState = function () {\n  const source = this.getSource();\n  return !source ? SourceState.UNDEFINED : source.getState();\n};\n/**\n * @private\n */\n\n\nLayer.prototype.handleSourceChange_ = function () {\n  this.changed();\n};\n/**\n * @private\n */\n\n\nLayer.prototype.handleSourcePropertyChange_ = function () {\n  if (this.sourceChangeKey_) {\n    unlistenByKey(this.sourceChangeKey_);\n    this.sourceChangeKey_ = null;\n  }\n\n  const source = this.getSource();\n\n  if (source) {\n    this.sourceChangeKey_ = listen(source, EventType.CHANGE, this.handleSourceChange_, this);\n  }\n\n  this.changed();\n};\n/**\n * Sets the layer to be rendered on top of other layers on a map. The map will\n * not manage this layer in its layers collection, and the callback in\n * {@link module:ol/Map#forEachLayerAtPixel} will receive `null` as layer. This\n * is useful for temporary layers. To remove an unmanaged layer from the map,\n * use `#setMap(null)`.\n *\n * To add the layer to a map and have it managed by the map, use\n * {@link module:ol/Map#addLayer} instead.\n * @param {module:ol/PluggableMap} map Map.\n * @api\n */\n\n\nLayer.prototype.setMap = function (map) {\n  if (this.mapPrecomposeKey_) {\n    unlistenByKey(this.mapPrecomposeKey_);\n    this.mapPrecomposeKey_ = null;\n  }\n\n  if (!map) {\n    this.changed();\n  }\n\n  if (this.mapRenderKey_) {\n    unlistenByKey(this.mapRenderKey_);\n    this.mapRenderKey_ = null;\n  }\n\n  if (map) {\n    this.mapPrecomposeKey_ = listen(map, RenderEventType.PRECOMPOSE, function (evt) {\n      const layerState = this.getLayerState();\n      layerState.managed = false;\n      layerState.zIndex = Infinity;\n      evt.frameState.layerStatesArray.push(layerState);\n      evt.frameState.layerStates[getUid(this)] = layerState;\n    }, this);\n    this.mapRenderKey_ = listen(this, EventType.CHANGE, map.render, map);\n    this.changed();\n  }\n};\n/**\n * Set the layer source.\n * @param {module:ol/source/Source} source The layer source.\n * @observable\n * @api\n */\n\n\nLayer.prototype.setSource = function (source) {\n  this.set(LayerProperty.SOURCE, source);\n};\n\nexport default Layer;","map":null,"metadata":{},"sourceType":"module"}