{"ast":null,"code":"/**\n * @module ol/geom/Geometry\n */\nimport { inherits } from '../util.js';\nimport BaseObject from '../Object.js';\nimport { createEmpty, getHeight, returnOrUpdate } from '../extent.js';\nimport { FALSE } from '../functions.js';\nimport { transform2D } from '../geom/flat/transform.js';\nimport { get as getProjection, getTransform } from '../proj.js';\nimport Units from '../proj/Units.js';\nimport { create as createTransform, compose as composeTransform } from '../transform.js';\n/**\n * @classdesc\n * Abstract base class; normally only used for creating subclasses and not\n * instantiated in apps.\n * Base class for vector geometries.\n *\n * To get notified of changes to the geometry, register a listener for the\n * generic `change` event on your geometry instance.\n *\n * @constructor\n * @abstract\n * @extends {module:ol/Object}\n * @api\n */\n\nconst Geometry = function () {\n  BaseObject.call(this);\n  /**\n   * @private\n   * @type {module:ol/extent~Extent}\n   */\n\n  this.extent_ = createEmpty();\n  /**\n   * @private\n   * @type {number}\n   */\n\n  this.extentRevision_ = -1;\n  /**\n   * @protected\n   * @type {Object.<string, module:ol/geom/Geometry>}\n   */\n\n  this.simplifiedGeometryCache = {};\n  /**\n   * @protected\n   * @type {number}\n   */\n\n  this.simplifiedGeometryMaxMinSquaredTolerance = 0;\n  /**\n   * @protected\n   * @type {number}\n   */\n\n  this.simplifiedGeometryRevision = 0;\n};\n\ninherits(Geometry, BaseObject);\n/**\n * @type {module:ol/transform~Transform}\n */\n\nconst tmpTransform = createTransform();\n/**\n * Make a complete copy of the geometry.\n * @abstract\n * @return {!module:ol/geom/Geometry} Clone.\n */\n\nGeometry.prototype.clone = function () {};\n/**\n * @abstract\n * @param {number} x X.\n * @param {number} y Y.\n * @param {module:ol/coordinate~Coordinate} closestPoint Closest point.\n * @param {number} minSquaredDistance Minimum squared distance.\n * @return {number} Minimum squared distance.\n */\n\n\nGeometry.prototype.closestPointXY = function (x, y, closestPoint, minSquaredDistance) {};\n/**\n * Return the closest point of the geometry to the passed point as\n * {@link module:ol/coordinate~Coordinate coordinate}.\n * @param {module:ol/coordinate~Coordinate} point Point.\n * @param {module:ol/coordinate~Coordinate=} opt_closestPoint Closest point.\n * @return {module:ol/coordinate~Coordinate} Closest point.\n * @api\n */\n\n\nGeometry.prototype.getClosestPoint = function (point, opt_closestPoint) {\n  const closestPoint = opt_closestPoint ? opt_closestPoint : [NaN, NaN];\n  this.closestPointXY(point[0], point[1], closestPoint, Infinity);\n  return closestPoint;\n};\n/**\n * Returns true if this geometry includes the specified coordinate. If the\n * coordinate is on the boundary of the geometry, returns false.\n * @param {module:ol/coordinate~Coordinate} coordinate Coordinate.\n * @return {boolean} Contains coordinate.\n * @api\n */\n\n\nGeometry.prototype.intersectsCoordinate = function (coordinate) {\n  return this.containsXY(coordinate[0], coordinate[1]);\n};\n/**\n * @abstract\n * @param {module:ol/extent~Extent} extent Extent.\n * @protected\n * @return {module:ol/extent~Extent} extent Extent.\n */\n\n\nGeometry.prototype.computeExtent = function (extent) {};\n/**\n * @param {number} x X.\n * @param {number} y Y.\n * @return {boolean} Contains (x, y).\n */\n\n\nGeometry.prototype.containsXY = FALSE;\n/**\n * Get the extent of the geometry.\n * @param {module:ol/extent~Extent=} opt_extent Extent.\n * @return {module:ol/extent~Extent} extent Extent.\n * @api\n */\n\nGeometry.prototype.getExtent = function (opt_extent) {\n  if (this.extentRevision_ != this.getRevision()) {\n    this.extent_ = this.computeExtent(this.extent_);\n    this.extentRevision_ = this.getRevision();\n  }\n\n  return returnOrUpdate(this.extent_, opt_extent);\n};\n/**\n * Rotate the geometry around a given coordinate. This modifies the geometry\n * coordinates in place.\n * @abstract\n * @param {number} angle Rotation angle in radians.\n * @param {module:ol/coordinate~Coordinate} anchor The rotation center.\n * @api\n */\n\n\nGeometry.prototype.rotate = function (angle, anchor) {};\n/**\n * Scale the geometry (with an optional origin).  This modifies the geometry\n * coordinates in place.\n * @abstract\n * @param {number} sx The scaling factor in the x-direction.\n * @param {number=} opt_sy The scaling factor in the y-direction (defaults to\n *     sx).\n * @param {module:ol/coordinate~Coordinate=} opt_anchor The scale origin (defaults to the center\n *     of the geometry extent).\n * @api\n */\n\n\nGeometry.prototype.scale = function (sx, opt_sy, opt_anchor) {};\n/**\n * Create a simplified version of this geometry.  For linestrings, this uses\n * the the {@link\n * https://en.wikipedia.org/wiki/Ramer-Douglas-Peucker_algorithm\n * Douglas Peucker} algorithm.  For polygons, a quantization-based\n * simplification is used to preserve topology.\n * @function\n * @param {number} tolerance The tolerance distance for simplification.\n * @return {module:ol/geom/Geometry} A new, simplified version of the original\n *     geometry.\n * @api\n */\n\n\nGeometry.prototype.simplify = function (tolerance) {\n  return this.getSimplifiedGeometry(tolerance * tolerance);\n};\n/**\n * Create a simplified version of this geometry using the Douglas Peucker\n * algorithm.\n * @see https://en.wikipedia.org/wiki/Ramer-Douglas-Peucker_algorithm\n * @abstract\n * @param {number} squaredTolerance Squared tolerance.\n * @return {module:ol/geom/Geometry} Simplified geometry.\n */\n\n\nGeometry.prototype.getSimplifiedGeometry = function (squaredTolerance) {};\n/**\n * Get the type of this geometry.\n * @abstract\n * @return {module:ol/geom/GeometryType} Geometry type.\n */\n\n\nGeometry.prototype.getType = function () {};\n/**\n * Apply a transform function to each coordinate of the geometry.\n * The geometry is modified in place.\n * If you do not want the geometry modified in place, first `clone()` it and\n * then use this function on the clone.\n * @abstract\n * @param {module:ol/proj~TransformFunction} transformFn Transform.\n */\n\n\nGeometry.prototype.applyTransform = function (transformFn) {};\n/**\n * Test if the geometry and the passed extent intersect.\n * @abstract\n * @param {module:ol/extent~Extent} extent Extent.\n * @return {boolean} `true` if the geometry and the extent intersect.\n */\n\n\nGeometry.prototype.intersectsExtent = function (extent) {};\n/**\n * Translate the geometry.  This modifies the geometry coordinates in place.  If\n * instead you want a new geometry, first `clone()` this geometry.\n * @abstract\n * @param {number} deltaX Delta X.\n * @param {number} deltaY Delta Y.\n */\n\n\nGeometry.prototype.translate = function (deltaX, deltaY) {};\n/**\n * Transform each coordinate of the geometry from one coordinate reference\n * system to another. The geometry is modified in place.\n * For example, a line will be transformed to a line and a circle to a circle.\n * If you do not want the geometry modified in place, first `clone()` it and\n * then use this function on the clone.\n *\n * @param {module:ol/proj~ProjectionLike} source The current projection.  Can be a\n *     string identifier or a {@link module:ol/proj/Projection~Projection} object.\n * @param {module:ol/proj~ProjectionLike} destination The desired projection.  Can be a\n *     string identifier or a {@link module:ol/proj/Projection~Projection} object.\n * @return {module:ol/geom/Geometry} This geometry.  Note that original geometry is\n *     modified in place.\n * @api\n */\n\n\nGeometry.prototype.transform = function (source, destination) {\n  source = getProjection(source);\n  const transformFn = source.getUnits() == Units.TILE_PIXELS ? function (inCoordinates, outCoordinates, stride) {\n    const pixelExtent = source.getExtent();\n    const projectedExtent = source.getWorldExtent();\n    const scale = getHeight(projectedExtent) / getHeight(pixelExtent);\n    composeTransform(tmpTransform, projectedExtent[0], projectedExtent[3], scale, -scale, 0, 0, 0);\n    transform2D(inCoordinates, 0, inCoordinates.length, stride, tmpTransform, outCoordinates);\n    return getTransform(source, destination)(inCoordinates, outCoordinates, stride);\n  } : getTransform(source, destination);\n  this.applyTransform(transformFn);\n  return this;\n};\n\nexport default Geometry;","map":null,"metadata":{},"sourceType":"module"}