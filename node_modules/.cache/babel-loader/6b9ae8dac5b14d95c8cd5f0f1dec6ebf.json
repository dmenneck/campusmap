{"ast":null,"code":"/**\n * @module ol/geom/MultiLineString\n */\nimport { inherits } from '../util.js';\nimport { extend } from '../array.js';\nimport { closestSquaredDistanceXY } from '../extent.js';\nimport GeometryLayout from '../geom/GeometryLayout.js';\nimport GeometryType from '../geom/GeometryType.js';\nimport LineString from '../geom/LineString.js';\nimport SimpleGeometry from '../geom/SimpleGeometry.js';\nimport { assignClosestArrayPoint, arrayMaxSquaredDelta } from '../geom/flat/closest.js';\nimport { deflateCoordinatesArray } from '../geom/flat/deflate.js';\nimport { inflateCoordinatesArray } from '../geom/flat/inflate.js';\nimport { interpolatePoint, lineStringsCoordinateAtM } from '../geom/flat/interpolate.js';\nimport { intersectsLineStringArray } from '../geom/flat/intersectsextent.js';\nimport { douglasPeuckerArray } from '../geom/flat/simplify.js';\n/**\n * @classdesc\n * Multi-linestring geometry.\n *\n * @constructor\n * @extends {module:ol/geom/SimpleGeometry}\n * @param {Array.<Array.<module:ol/coordinate~Coordinate>>} coordinates Coordinates.\n * @param {module:ol/geom/GeometryLayout=} opt_layout Layout.\n * @api\n */\n\nconst MultiLineString = function (coordinates, opt_layout) {\n  SimpleGeometry.call(this);\n  /**\n   * @type {Array.<number>}\n   * @private\n   */\n\n  this.ends_ = [];\n  /**\n   * @private\n   * @type {number}\n   */\n\n  this.maxDelta_ = -1;\n  /**\n   * @private\n   * @type {number}\n   */\n\n  this.maxDeltaRevision_ = -1;\n  this.setCoordinates(coordinates, opt_layout);\n};\n\ninherits(MultiLineString, SimpleGeometry);\n/**\n * Append the passed linestring to the multilinestring.\n * @param {module:ol/geom/LineString} lineString LineString.\n * @api\n */\n\nMultiLineString.prototype.appendLineString = function (lineString) {\n  if (!this.flatCoordinates) {\n    this.flatCoordinates = lineString.getFlatCoordinates().slice();\n  } else {\n    extend(this.flatCoordinates, lineString.getFlatCoordinates().slice());\n  }\n\n  this.ends_.push(this.flatCoordinates.length);\n  this.changed();\n};\n/**\n * Make a complete copy of the geometry.\n * @return {!module:ol/geom/MultiLineString} Clone.\n * @override\n * @api\n */\n\n\nMultiLineString.prototype.clone = function () {\n  const multiLineString = new MultiLineString(null);\n  multiLineString.setFlatCoordinates(this.layout, this.flatCoordinates.slice(), this.ends_.slice());\n  return multiLineString;\n};\n/**\n * @inheritDoc\n */\n\n\nMultiLineString.prototype.closestPointXY = function (x, y, closestPoint, minSquaredDistance) {\n  if (minSquaredDistance < closestSquaredDistanceXY(this.getExtent(), x, y)) {\n    return minSquaredDistance;\n  }\n\n  if (this.maxDeltaRevision_ != this.getRevision()) {\n    this.maxDelta_ = Math.sqrt(arrayMaxSquaredDelta(this.flatCoordinates, 0, this.ends_, this.stride, 0));\n    this.maxDeltaRevision_ = this.getRevision();\n  }\n\n  return assignClosestArrayPoint(this.flatCoordinates, 0, this.ends_, this.stride, this.maxDelta_, false, x, y, closestPoint, minSquaredDistance);\n};\n/**\n * Returns the coordinate at `m` using linear interpolation, or `null` if no\n * such coordinate exists.\n *\n * `opt_extrapolate` controls extrapolation beyond the range of Ms in the\n * MultiLineString. If `opt_extrapolate` is `true` then Ms less than the first\n * M will return the first coordinate and Ms greater than the last M will\n * return the last coordinate.\n *\n * `opt_interpolate` controls interpolation between consecutive LineStrings\n * within the MultiLineString. If `opt_interpolate` is `true` the coordinates\n * will be linearly interpolated between the last coordinate of one LineString\n * and the first coordinate of the next LineString.  If `opt_interpolate` is\n * `false` then the function will return `null` for Ms falling between\n * LineStrings.\n *\n * @param {number} m M.\n * @param {boolean=} opt_extrapolate Extrapolate. Default is `false`.\n * @param {boolean=} opt_interpolate Interpolate. Default is `false`.\n * @return {module:ol/coordinate~Coordinate} Coordinate.\n * @api\n */\n\n\nMultiLineString.prototype.getCoordinateAtM = function (m, opt_extrapolate, opt_interpolate) {\n  if (this.layout != GeometryLayout.XYM && this.layout != GeometryLayout.XYZM || this.flatCoordinates.length === 0) {\n    return null;\n  }\n\n  const extrapolate = opt_extrapolate !== undefined ? opt_extrapolate : false;\n  const interpolate = opt_interpolate !== undefined ? opt_interpolate : false;\n  return lineStringsCoordinateAtM(this.flatCoordinates, 0, this.ends_, this.stride, m, extrapolate, interpolate);\n};\n/**\n * Return the coordinates of the multilinestring.\n * @return {Array.<Array.<module:ol/coordinate~Coordinate>>} Coordinates.\n * @override\n * @api\n */\n\n\nMultiLineString.prototype.getCoordinates = function () {\n  return inflateCoordinatesArray(this.flatCoordinates, 0, this.ends_, this.stride);\n};\n/**\n * @return {Array.<number>} Ends.\n */\n\n\nMultiLineString.prototype.getEnds = function () {\n  return this.ends_;\n};\n/**\n * Return the linestring at the specified index.\n * @param {number} index Index.\n * @return {module:ol/geom/LineString} LineString.\n * @api\n */\n\n\nMultiLineString.prototype.getLineString = function (index) {\n  if (index < 0 || this.ends_.length <= index) {\n    return null;\n  }\n\n  const lineString = new LineString(null);\n  lineString.setFlatCoordinates(this.layout, this.flatCoordinates.slice(index === 0 ? 0 : this.ends_[index - 1], this.ends_[index]));\n  return lineString;\n};\n/**\n * Return the linestrings of this multilinestring.\n * @return {Array.<module:ol/geom/LineString>} LineStrings.\n * @api\n */\n\n\nMultiLineString.prototype.getLineStrings = function () {\n  const flatCoordinates = this.flatCoordinates;\n  const ends = this.ends_;\n  const layout = this.layout;\n  /** @type {Array.<module:ol/geom/LineString>} */\n\n  const lineStrings = [];\n  let offset = 0;\n\n  for (let i = 0, ii = ends.length; i < ii; ++i) {\n    const end = ends[i];\n    const lineString = new LineString(null);\n    lineString.setFlatCoordinates(layout, flatCoordinates.slice(offset, end));\n    lineStrings.push(lineString);\n    offset = end;\n  }\n\n  return lineStrings;\n};\n/**\n * @return {Array.<number>} Flat midpoints.\n */\n\n\nMultiLineString.prototype.getFlatMidpoints = function () {\n  const midpoints = [];\n  const flatCoordinates = this.flatCoordinates;\n  let offset = 0;\n  const ends = this.ends_;\n  const stride = this.stride;\n\n  for (let i = 0, ii = ends.length; i < ii; ++i) {\n    const end = ends[i];\n    const midpoint = interpolatePoint(flatCoordinates, offset, end, stride, 0.5);\n    extend(midpoints, midpoint);\n    offset = end;\n  }\n\n  return midpoints;\n};\n/**\n * @inheritDoc\n */\n\n\nMultiLineString.prototype.getSimplifiedGeometryInternal = function (squaredTolerance) {\n  const simplifiedFlatCoordinates = [];\n  const simplifiedEnds = [];\n  simplifiedFlatCoordinates.length = douglasPeuckerArray(this.flatCoordinates, 0, this.ends_, this.stride, squaredTolerance, simplifiedFlatCoordinates, 0, simplifiedEnds);\n  const simplifiedMultiLineString = new MultiLineString(null);\n  simplifiedMultiLineString.setFlatCoordinates(GeometryLayout.XY, simplifiedFlatCoordinates, simplifiedEnds);\n  return simplifiedMultiLineString;\n};\n/**\n * @inheritDoc\n * @api\n */\n\n\nMultiLineString.prototype.getType = function () {\n  return GeometryType.MULTI_LINE_STRING;\n};\n/**\n * @inheritDoc\n * @api\n */\n\n\nMultiLineString.prototype.intersectsExtent = function (extent) {\n  return intersectsLineStringArray(this.flatCoordinates, 0, this.ends_, this.stride, extent);\n};\n/**\n * Set the coordinates of the multilinestring.\n * @param {Array.<Array.<module:ol/coordinate~Coordinate>>} coordinates Coordinates.\n * @param {module:ol/geom/GeometryLayout=} opt_layout Layout.\n * @override\n * @api\n */\n\n\nMultiLineString.prototype.setCoordinates = function (coordinates, opt_layout) {\n  if (!coordinates) {\n    this.setFlatCoordinates(GeometryLayout.XY, null, this.ends_);\n  } else {\n    this.setLayout(opt_layout, coordinates, 2);\n\n    if (!this.flatCoordinates) {\n      this.flatCoordinates = [];\n    }\n\n    const ends = deflateCoordinatesArray(this.flatCoordinates, 0, coordinates, this.stride, this.ends_);\n    this.flatCoordinates.length = ends.length === 0 ? 0 : ends[ends.length - 1];\n    this.changed();\n  }\n};\n/**\n * @param {module:ol/geom/GeometryLayout} layout Layout.\n * @param {Array.<number>} flatCoordinates Flat coordinates.\n * @param {Array.<number>} ends Ends.\n */\n\n\nMultiLineString.prototype.setFlatCoordinates = function (layout, flatCoordinates, ends) {\n  this.setFlatCoordinatesInternal(layout, flatCoordinates);\n  this.ends_ = ends;\n  this.changed();\n};\n/**\n * @param {Array.<module:ol/geom/LineString>} lineStrings LineStrings.\n */\n\n\nMultiLineString.prototype.setLineStrings = function (lineStrings) {\n  let layout = this.getLayout();\n  const flatCoordinates = [];\n  const ends = [];\n\n  for (let i = 0, ii = lineStrings.length; i < ii; ++i) {\n    const lineString = lineStrings[i];\n\n    if (i === 0) {\n      layout = lineString.getLayout();\n    }\n\n    extend(flatCoordinates, lineString.getFlatCoordinates());\n    ends.push(flatCoordinates.length);\n  }\n\n  this.setFlatCoordinates(layout, flatCoordinates, ends);\n};\n\nexport default MultiLineString;","map":null,"metadata":{},"sourceType":"module"}