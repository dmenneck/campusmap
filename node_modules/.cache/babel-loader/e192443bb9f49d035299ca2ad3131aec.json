{"ast":null,"code":"/**\n * ag-grid-community - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components\n * @version v21.2.2\n * @link http://www.ag-grid.com/\n * @license MIT\n */\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar componentUtil_1 = require(\"./componentUtil\");\n\nvar grid_1 = require(\"../grid\");\n\nvar registered = false;\n\nfunction initialiseAgGridWithWebComponents() {\n  console.warn('ag-grid: initialiseAgGridWithWebComponents is deprecated. Please use the ag-grid-webcomponent dependency instead. '); // only register to WebComponents once\n\n  if (registered) {\n    return;\n  }\n\n  registered = true;\n\n  if (typeof document === 'undefined' || !document.registerElement) {\n    console.error('ag-Grid: unable to find document.registerElement() function, unable to initialise ag-Grid as a Web Component');\n  } // i don't think this type of extension is possible in TypeScript, so back to\n  // plain Javascript to create this object\n\n\n  var AgileGridProto = Object.create(HTMLElement.prototype); // wrap each property with a get and set method, so we can track when changes are done\n\n  componentUtil_1.ComponentUtil.ALL_PROPERTIES.forEach(function (key) {\n    Object.defineProperty(AgileGridProto, key, {\n      set: function (v) {\n        this.__agGridSetProperty(key, v);\n      },\n      get: function () {\n        return this.__agGridGetProperty(key);\n      },\n      enumerable: true,\n      configurable: true\n    });\n  });\n  var agGridProtoNoType = AgileGridProto;\n\n  agGridProtoNoType.__agGridSetProperty = function (key, value) {\n    if (!this.__attributes) {\n      this.__attributes = {};\n    }\n\n    this.__attributes[key] = value; // keeping this consistent with the ng2 onChange, so I can reuse the handling code\n\n    var changeObject = {};\n    changeObject[key] = {\n      currentValue: value\n    };\n    this.onChange(changeObject);\n  };\n\n  agGridProtoNoType.onChange = function (changes) {\n    if (this._initialised) {\n      componentUtil_1.ComponentUtil.processOnChange(changes, this._gridOptions, this.api, this.columnApi);\n    }\n  };\n\n  agGridProtoNoType.__agGridGetProperty = function (key) {\n    if (!this.__attributes) {\n      this.__attributes = {};\n    }\n\n    return this.__attributes[key];\n  };\n\n  agGridProtoNoType.setGridOptions = function (options) {\n    var globalEventListener = this.globalEventListener.bind(this);\n    this._gridOptions = componentUtil_1.ComponentUtil.copyAttributesToGridOptions(options, this);\n    var gridParams = {\n      globalEventListener: globalEventListener\n    };\n    this._agGrid = new grid_1.Grid(this, this._gridOptions, gridParams);\n    this.api = options.api;\n    this.columnApi = options.columnApi;\n    this._initialised = true;\n  }; // copies all the attributes into this object\n\n\n  agGridProtoNoType.createdCallback = function () {\n    for (var i = 0; i < this.attributes.length; i++) {\n      var attribute = this.attributes[i];\n      this.setPropertyFromAttribute(attribute);\n    }\n  };\n\n  agGridProtoNoType.setPropertyFromAttribute = function (attribute) {\n    var name = toCamelCase(attribute.nodeName);\n    var value = attribute.nodeValue;\n\n    if (componentUtil_1.ComponentUtil.ALL_PROPERTIES.indexOf(name) >= 0) {\n      this[name] = value;\n    }\n  };\n\n  agGridProtoNoType.attachedCallback = function (params) {};\n\n  agGridProtoNoType.detachedCallback = function (params) {};\n\n  agGridProtoNoType.attributeChangedCallback = function (attributeName) {\n    var attribute = this.attributes[attributeName];\n    this.setPropertyFromAttribute(attribute);\n  };\n\n  agGridProtoNoType.globalEventListener = function (eventType, event) {\n    var eventLowerCase = eventType.toLowerCase();\n    var browserEvent = new Event(eventLowerCase);\n    var browserEventNoType = browserEvent;\n    browserEventNoType.agGridDetails = event;\n    this.dispatchEvent(browserEvent);\n    var callbackMethod = 'on' + eventLowerCase;\n\n    if (typeof this[callbackMethod] === 'function') {\n      this[callbackMethod](browserEvent);\n    }\n  }; // finally, register\n\n\n  document.registerElement('ag-grid', {\n    prototype: AgileGridProto\n  });\n}\n\nexports.initialiseAgGridWithWebComponents = initialiseAgGridWithWebComponents;\n\nfunction toCamelCase(myString) {\n  if (typeof myString === 'string') {\n    var result = myString.replace(/-([a-z])/g, function (g) {\n      return g[1].toUpperCase();\n    });\n    return result;\n  } else {\n    return myString;\n  }\n}","map":{"version":3,"sources":["/Users/dirkmennecke77/Desktop/Lageplan/node_modules/ag-grid-community/dist/lib/components/agGridWebComponent.js"],"names":["Object","defineProperty","exports","value","componentUtil_1","require","grid_1","registered","initialiseAgGridWithWebComponents","console","warn","document","registerElement","error","AgileGridProto","create","HTMLElement","prototype","ComponentUtil","ALL_PROPERTIES","forEach","key","set","v","__agGridSetProperty","get","__agGridGetProperty","enumerable","configurable","agGridProtoNoType","__attributes","changeObject","currentValue","onChange","changes","_initialised","processOnChange","_gridOptions","api","columnApi","setGridOptions","options","globalEventListener","bind","copyAttributesToGridOptions","gridParams","_agGrid","Grid","createdCallback","i","attributes","length","attribute","setPropertyFromAttribute","name","toCamelCase","nodeName","nodeValue","indexOf","attachedCallback","params","detachedCallback","attributeChangedCallback","attributeName","eventType","event","eventLowerCase","toLowerCase","browserEvent","Event","browserEventNoType","agGridDetails","dispatchEvent","callbackMethod","myString","result","replace","g","toUpperCase"],"mappings":"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","sourcesContent":["/**\n * ag-grid-community - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components\n * @version v21.2.2\n * @link http://www.ag-grid.com/\n * @license MIT\n */\n\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar componentUtil_1 = require(\"./componentUtil\");\nvar grid_1 = require(\"../grid\");\nvar registered = false;\nfunction initialiseAgGridWithWebComponents() {\n    console.warn('ag-grid: initialiseAgGridWithWebComponents is deprecated. Please use the ag-grid-webcomponent dependency instead. ');\n    // only register to WebComponents once\n    if (registered) {\n        return;\n    }\n    registered = true;\n    if (typeof document === 'undefined' || !document.registerElement) {\n        console.error('ag-Grid: unable to find document.registerElement() function, unable to initialise ag-Grid as a Web Component');\n    }\n    // i don't think this type of extension is possible in TypeScript, so back to\n    // plain Javascript to create this object\n    var AgileGridProto = Object.create(HTMLElement.prototype);\n    // wrap each property with a get and set method, so we can track when changes are done\n    componentUtil_1.ComponentUtil.ALL_PROPERTIES.forEach(function (key) {\n        Object.defineProperty(AgileGridProto, key, {\n            set: function (v) {\n                this.__agGridSetProperty(key, v);\n            },\n            get: function () {\n                return this.__agGridGetProperty(key);\n            },\n            enumerable: true,\n            configurable: true\n        });\n    });\n    var agGridProtoNoType = AgileGridProto;\n    agGridProtoNoType.__agGridSetProperty = function (key, value) {\n        if (!this.__attributes) {\n            this.__attributes = {};\n        }\n        this.__attributes[key] = value;\n        // keeping this consistent with the ng2 onChange, so I can reuse the handling code\n        var changeObject = {};\n        changeObject[key] = { currentValue: value };\n        this.onChange(changeObject);\n    };\n    agGridProtoNoType.onChange = function (changes) {\n        if (this._initialised) {\n            componentUtil_1.ComponentUtil.processOnChange(changes, this._gridOptions, this.api, this.columnApi);\n        }\n    };\n    agGridProtoNoType.__agGridGetProperty = function (key) {\n        if (!this.__attributes) {\n            this.__attributes = {};\n        }\n        return this.__attributes[key];\n    };\n    agGridProtoNoType.setGridOptions = function (options) {\n        var globalEventListener = this.globalEventListener.bind(this);\n        this._gridOptions = componentUtil_1.ComponentUtil.copyAttributesToGridOptions(options, this);\n        var gridParams = {\n            globalEventListener: globalEventListener\n        };\n        this._agGrid = new grid_1.Grid(this, this._gridOptions, gridParams);\n        this.api = options.api;\n        this.columnApi = options.columnApi;\n        this._initialised = true;\n    };\n    // copies all the attributes into this object\n    agGridProtoNoType.createdCallback = function () {\n        for (var i = 0; i < this.attributes.length; i++) {\n            var attribute = this.attributes[i];\n            this.setPropertyFromAttribute(attribute);\n        }\n    };\n    agGridProtoNoType.setPropertyFromAttribute = function (attribute) {\n        var name = toCamelCase(attribute.nodeName);\n        var value = attribute.nodeValue;\n        if (componentUtil_1.ComponentUtil.ALL_PROPERTIES.indexOf(name) >= 0) {\n            this[name] = value;\n        }\n    };\n    agGridProtoNoType.attachedCallback = function (params) { };\n    agGridProtoNoType.detachedCallback = function (params) { };\n    agGridProtoNoType.attributeChangedCallback = function (attributeName) {\n        var attribute = this.attributes[attributeName];\n        this.setPropertyFromAttribute(attribute);\n    };\n    agGridProtoNoType.globalEventListener = function (eventType, event) {\n        var eventLowerCase = eventType.toLowerCase();\n        var browserEvent = new Event(eventLowerCase);\n        var browserEventNoType = browserEvent;\n        browserEventNoType.agGridDetails = event;\n        this.dispatchEvent(browserEvent);\n        var callbackMethod = 'on' + eventLowerCase;\n        if (typeof this[callbackMethod] === 'function') {\n            this[callbackMethod](browserEvent);\n        }\n    };\n    // finally, register\n    document.registerElement('ag-grid', { prototype: AgileGridProto });\n}\nexports.initialiseAgGridWithWebComponents = initialiseAgGridWithWebComponents;\nfunction toCamelCase(myString) {\n    if (typeof myString === 'string') {\n        var result = myString.replace(/-([a-z])/g, function (g) {\n            return g[1].toUpperCase();\n        });\n        return result;\n    }\n    else {\n        return myString;\n    }\n}\n"]},"metadata":{},"sourceType":"script"}