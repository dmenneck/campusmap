{"ast":null,"code":"/**\n * ag-grid-community - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components\n * @version v21.2.2\n * @link http://www.ag-grid.com/\n * @license MIT\n */\n\"use strict\";\n\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nvar __metadata = this && this.__metadata || function (k, v) {\n  if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar context_1 = require(\"../context/context\");\n\nvar gridOptionsWrapper_1 = require(\"../gridOptionsWrapper\");\n\nvar expressionService_1 = require(\"../valueService/expressionService\");\n\nvar ValueFormatterService =\n/** @class */\nfunction () {\n  function ValueFormatterService() {}\n\n  ValueFormatterService.prototype.formatValue = function (column, rowNode, $scope, value) {\n    var formatter;\n    var colDef = column.getColDef(); // if floating, give preference to the floating formatter\n\n    if (rowNode && rowNode.rowPinned) {\n      formatter = colDef.pinnedRowValueFormatter ? colDef.pinnedRowValueFormatter : colDef.valueFormatter;\n    } else {\n      formatter = colDef.valueFormatter;\n    }\n\n    var result = null;\n\n    if (formatter) {\n      var params = {\n        value: value,\n        node: rowNode,\n        data: rowNode ? rowNode.data : null,\n        colDef: column.getColDef(),\n        column: column,\n        api: this.gridOptionsWrapper.getApi(),\n        columnApi: this.gridOptionsWrapper.getColumnApi(),\n        context: this.gridOptionsWrapper.getContext()\n      }; // originally we put the angular 1 scope here, but we don't want the scope\n      // in the params interface, as other frameworks will see the interface, and\n      // angular 1 is not cool any more. so we hack the scope in here (we cannot\n      // include it above, as it's not in the interface, so would cause a compile error).\n      // in the future, when we stop supporting angular 1, we can take this out.\n\n      params.$scope = $scope;\n      result = this.expressionService.evaluate(formatter, params);\n    } else if (colDef.refData) {\n      return colDef.refData[value] || '';\n    } // if we don't do this, then arrays get displayed as 1,2,3, but we want 1, 2, 3 (ie with spaces)\n\n\n    if ((result === null || result === undefined) && Array.isArray(value)) {\n      result = value.join(', ');\n    }\n\n    return result;\n  };\n\n  __decorate([context_1.Autowired('gridOptionsWrapper'), __metadata(\"design:type\", gridOptionsWrapper_1.GridOptionsWrapper)], ValueFormatterService.prototype, \"gridOptionsWrapper\", void 0);\n\n  __decorate([context_1.Autowired('expressionService'), __metadata(\"design:type\", expressionService_1.ExpressionService)], ValueFormatterService.prototype, \"expressionService\", void 0);\n\n  ValueFormatterService = __decorate([context_1.Bean('valueFormatterService')], ValueFormatterService);\n  return ValueFormatterService;\n}();\n\nexports.ValueFormatterService = ValueFormatterService;","map":{"version":3,"sources":["/Users/dirkmennecke77/Desktop/Lageplan/node_modules/ag-grid-community/dist/lib/rendering/valueFormatterService.js"],"names":["__decorate","decorators","target","key","desc","c","arguments","length","r","Object","getOwnPropertyDescriptor","d","Reflect","decorate","i","defineProperty","__metadata","k","v","metadata","exports","value","context_1","require","gridOptionsWrapper_1","expressionService_1","ValueFormatterService","prototype","formatValue","column","rowNode","$scope","formatter","colDef","getColDef","rowPinned","pinnedRowValueFormatter","valueFormatter","result","params","node","data","api","gridOptionsWrapper","getApi","columnApi","getColumnApi","context","getContext","expressionService","evaluate","refData","undefined","Array","isArray","join","Autowired","GridOptionsWrapper","ExpressionService","Bean"],"mappings":"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","sourcesContent":["/**\n * ag-grid-community - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components\n * @version v21.2.2\n * @link http://www.ag-grid.com/\n * @license MIT\n */\n\"use strict\";\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __metadata = (this && this.__metadata) || function (k, v) {\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar context_1 = require(\"../context/context\");\nvar gridOptionsWrapper_1 = require(\"../gridOptionsWrapper\");\nvar expressionService_1 = require(\"../valueService/expressionService\");\nvar ValueFormatterService = /** @class */ (function () {\n    function ValueFormatterService() {\n    }\n    ValueFormatterService.prototype.formatValue = function (column, rowNode, $scope, value) {\n        var formatter;\n        var colDef = column.getColDef();\n        // if floating, give preference to the floating formatter\n        if (rowNode && rowNode.rowPinned) {\n            formatter = colDef.pinnedRowValueFormatter ? colDef.pinnedRowValueFormatter : colDef.valueFormatter;\n        }\n        else {\n            formatter = colDef.valueFormatter;\n        }\n        var result = null;\n        if (formatter) {\n            var params = {\n                value: value,\n                node: rowNode,\n                data: rowNode ? rowNode.data : null,\n                colDef: column.getColDef(),\n                column: column,\n                api: this.gridOptionsWrapper.getApi(),\n                columnApi: this.gridOptionsWrapper.getColumnApi(),\n                context: this.gridOptionsWrapper.getContext()\n            };\n            // originally we put the angular 1 scope here, but we don't want the scope\n            // in the params interface, as other frameworks will see the interface, and\n            // angular 1 is not cool any more. so we hack the scope in here (we cannot\n            // include it above, as it's not in the interface, so would cause a compile error).\n            // in the future, when we stop supporting angular 1, we can take this out.\n            params.$scope = $scope;\n            result = this.expressionService.evaluate(formatter, params);\n        }\n        else if (colDef.refData) {\n            return colDef.refData[value] || '';\n        }\n        // if we don't do this, then arrays get displayed as 1,2,3, but we want 1, 2, 3 (ie with spaces)\n        if ((result === null || result === undefined) && Array.isArray(value)) {\n            result = value.join(', ');\n        }\n        return result;\n    };\n    __decorate([\n        context_1.Autowired('gridOptionsWrapper'),\n        __metadata(\"design:type\", gridOptionsWrapper_1.GridOptionsWrapper)\n    ], ValueFormatterService.prototype, \"gridOptionsWrapper\", void 0);\n    __decorate([\n        context_1.Autowired('expressionService'),\n        __metadata(\"design:type\", expressionService_1.ExpressionService)\n    ], ValueFormatterService.prototype, \"expressionService\", void 0);\n    ValueFormatterService = __decorate([\n        context_1.Bean('valueFormatterService')\n    ], ValueFormatterService);\n    return ValueFormatterService;\n}());\nexports.ValueFormatterService = ValueFormatterService;\n"]},"metadata":{},"sourceType":"script"}