{"ast":null,"code":"/**\n * @module ol/css\n */\n\n/**\n * The CSS class for hidden feature.\n *\n * @const\n * @type {string}\n */\nexport var CLASS_HIDDEN = 'ol-hidden';\n/**\n * The CSS class that we'll give the DOM elements to have them selectable.\n *\n * @const\n * @type {string}\n */\n\nexport var CLASS_SELECTABLE = 'ol-selectable';\n/**\n * The CSS class that we'll give the DOM elements to have them unselectable.\n *\n * @const\n * @type {string}\n */\n\nexport var CLASS_UNSELECTABLE = 'ol-unselectable';\n/**\n * The CSS class for unsupported feature.\n *\n * @const\n * @type {string}\n */\n\nexport var CLASS_UNSUPPORTED = 'ol-unsupported';\n/**\n * The CSS class for controls.\n *\n * @const\n * @type {string}\n */\n\nexport var CLASS_CONTROL = 'ol-control';\n/**\n * The CSS class that we'll give the DOM elements that are collapsed, i.e.\n * to those elements which usually can be expanded.\n *\n * @const\n * @type {string}\n */\n\nexport var CLASS_COLLAPSED = 'ol-collapsed';\n/**\n * Get the list of font families from a font spec.  Note that this doesn't work\n * for font families that have commas in them.\n * @param {string} The CSS font property.\n * @return {Object<string>} The font families (or null if the input spec is invalid).\n */\n\nexport var getFontFamilies = function () {\n  var style;\n  var cache = {};\n  return function (font) {\n    if (!style) {\n      style = document.createElement('div').style;\n    }\n\n    if (!(font in cache)) {\n      style.font = font;\n      var family = style.fontFamily;\n      style.font = '';\n\n      if (!family) {\n        return null;\n      }\n\n      cache[font] = family.split(/,\\s?/);\n    }\n\n    return cache[font];\n  };\n}();","map":{"version":3,"sources":["../../src/ol/css.js"],"names":["const","let"],"mappings":"AAAA;;;;;;;;;;AAWA,OAAOA,IAAM,YAAY,GAAG,WAArBA;;;;;;;;AASP,OAAOA,IAAM,gBAAgB,GAAG,eAAzBA;;;;;;;;AASP,OAAOA,IAAM,kBAAkB,GAAG,iBAA3BA;;;;;;;;AASP,OAAOA,IAAM,iBAAiB,GAAG,gBAA1BA;;;;;;;;AASP,OAAOA,IAAM,aAAa,GAAG,YAAtBA;;;;;;;;;AAUP,OAAOA,IAAM,eAAe,GAAG,cAAxBA;;;;;;;;AASP,OAAOA,IAAM,eAAe,GAAI,YAAW;AACzCC,MAAI,KAAJA;AACAD,MAAM,KAAK,GAAG,EAAdA;AACA,SAAO,UAAS,IAAT,EAAe;AACpB,QAAI,CAAC,KAAL,EAAY;AACV,MAAA,KAAK,GAAG,QAAQ,CAAC,aAAT,CAAuB,KAAvB,EAA8B,KAAtC;AACD;;AACD,QAAI,EAAE,IAAI,IAAI,KAAV,CAAJ,EAAsB;AACpB,MAAA,KAAK,CAAC,IAAN,GAAa,IAAb;AACAA,UAAM,MAAM,GAAG,KAAK,CAAC,UAArBA;AACA,MAAA,KAAK,CAAC,IAAN,GAAa,EAAb;;AACA,UAAI,CAAC,MAAL,EAAa;AACX,eAAO,IAAP;AACD;;AACD,MAAA,KAAK,CAAC,IAAD,CAAL,GAAc,MAAM,CAAC,KAAP,CAAa,MAAb,CAAd;AACD;;AACD,WAAO,KAAK,CAAC,IAAD,CAAZ;AACD,GAdD;AAeD,CAlB8B,EAAxBA","sourcesContent":["/**\n * @module ol/css\n */\n\n\n/**\n * The CSS class for hidden feature.\n *\n * @const\n * @type {string}\n */\nexport const CLASS_HIDDEN = 'ol-hidden';\n\n\n/**\n * The CSS class that we'll give the DOM elements to have them selectable.\n *\n * @const\n * @type {string}\n */\nexport const CLASS_SELECTABLE = 'ol-selectable';\n\n\n/**\n * The CSS class that we'll give the DOM elements to have them unselectable.\n *\n * @const\n * @type {string}\n */\nexport const CLASS_UNSELECTABLE = 'ol-unselectable';\n\n\n/**\n * The CSS class for unsupported feature.\n *\n * @const\n * @type {string}\n */\nexport const CLASS_UNSUPPORTED = 'ol-unsupported';\n\n\n/**\n * The CSS class for controls.\n *\n * @const\n * @type {string}\n */\nexport const CLASS_CONTROL = 'ol-control';\n\n\n/**\n * The CSS class that we'll give the DOM elements that are collapsed, i.e.\n * to those elements which usually can be expanded.\n *\n * @const\n * @type {string}\n */\nexport const CLASS_COLLAPSED = 'ol-collapsed';\n\n\n/**\n * Get the list of font families from a font spec.  Note that this doesn't work\n * for font families that have commas in them.\n * @param {string} The CSS font property.\n * @return {Object<string>} The font families (or null if the input spec is invalid).\n */\nexport const getFontFamilies = (function() {\n  let style;\n  const cache = {};\n  return function(font) {\n    if (!style) {\n      style = document.createElement('div').style;\n    }\n    if (!(font in cache)) {\n      style.font = font;\n      const family = style.fontFamily;\n      style.font = '';\n      if (!family) {\n        return null;\n      }\n      cache[font] = family.split(/,\\s?/);\n    }\n    return cache[font];\n  };\n})();\n"]},"metadata":{},"sourceType":"module"}