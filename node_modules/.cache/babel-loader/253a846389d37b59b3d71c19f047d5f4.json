{"ast":null,"code":"/**\n * @module ol/pointer/MsSource\n */\n// Based on https://github.com/Polymer/PointerEvents\n// Copyright (c) 2013 The Polymer Authors. All rights reserved.\n//\n// Redistribution and use in source and binary forms, with or without\n// modification, are permitted provided that the following conditions are\n// met:\n//\n// * Redistributions of source code must retain the above copyright\n// notice, this list of conditions and the following disclaimer.\n// * Redistributions in binary form must reproduce the above\n// copyright notice, this list of conditions and the following disclaimer\n// in the documentation and/or other materials provided with the\n// distribution.\n// * Neither the name of Google Inc. nor the names of its\n// contributors may be used to endorse or promote products derived from\n// this software without specific prior written permission.\n//\n// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n// \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\nimport EventSource from './EventSource.js';\n/**\n * @const\n * @type {Array<string>}\n */\n\nvar POINTER_TYPES = ['', 'unavailable', 'touch', 'pen', 'mouse'];\n/**\n * Handler for `msPointerDown`.\n *\n * @this {MsSource}\n * @param {MSPointerEvent} inEvent The in event.\n */\n\nfunction msPointerDown(inEvent) {\n  this.pointerMap[inEvent.pointerId.toString()] = inEvent;\n  var e = this.prepareEvent_(inEvent);\n  this.dispatcher.down(e, inEvent);\n}\n/**\n * Handler for `msPointerMove`.\n *\n * @this {MsSource}\n * @param {MSPointerEvent} inEvent The in event.\n */\n\n\nfunction msPointerMove(inEvent) {\n  var e = this.prepareEvent_(inEvent);\n  this.dispatcher.move(e, inEvent);\n}\n/**\n * Handler for `msPointerUp`.\n *\n * @this {MsSource}\n * @param {MSPointerEvent} inEvent The in event.\n */\n\n\nfunction msPointerUp(inEvent) {\n  var e = this.prepareEvent_(inEvent);\n  this.dispatcher.up(e, inEvent);\n  this.cleanup(inEvent.pointerId);\n}\n/**\n * Handler for `msPointerOut`.\n *\n * @this {MsSource}\n * @param {MSPointerEvent} inEvent The in event.\n */\n\n\nfunction msPointerOut(inEvent) {\n  var e = this.prepareEvent_(inEvent);\n  this.dispatcher.leaveOut(e, inEvent);\n}\n/**\n * Handler for `msPointerOver`.\n *\n * @this {MsSource}\n * @param {MSPointerEvent} inEvent The in event.\n */\n\n\nfunction msPointerOver(inEvent) {\n  var e = this.prepareEvent_(inEvent);\n  this.dispatcher.enterOver(e, inEvent);\n}\n/**\n * Handler for `msPointerCancel`.\n *\n * @this {MsSource}\n * @param {MSPointerEvent} inEvent The in event.\n */\n\n\nfunction msPointerCancel(inEvent) {\n  var e = this.prepareEvent_(inEvent);\n  this.dispatcher.cancel(e, inEvent);\n  this.cleanup(inEvent.pointerId);\n}\n/**\n * Handler for `msLostPointerCapture`.\n *\n * @this {MsSource}\n * @param {MSPointerEvent} inEvent The in event.\n */\n\n\nfunction msLostPointerCapture(inEvent) {\n  var e = this.dispatcher.makeEvent('lostpointercapture', inEvent, inEvent);\n  this.dispatcher.dispatchEvent(e);\n}\n/**\n * Handler for `msGotPointerCapture`.\n *\n * @this {MsSource}\n * @param {MSPointerEvent} inEvent The in event.\n */\n\n\nfunction msGotPointerCapture(inEvent) {\n  var e = this.dispatcher.makeEvent('gotpointercapture', inEvent, inEvent);\n  this.dispatcher.dispatchEvent(e);\n}\n\nvar MsSource =\n/*@__PURE__*/\nfunction (EventSource) {\n  function MsSource(dispatcher) {\n    var mapping = {\n      'MSPointerDown': msPointerDown,\n      'MSPointerMove': msPointerMove,\n      'MSPointerUp': msPointerUp,\n      'MSPointerOut': msPointerOut,\n      'MSPointerOver': msPointerOver,\n      'MSPointerCancel': msPointerCancel,\n      'MSGotPointerCapture': msGotPointerCapture,\n      'MSLostPointerCapture': msLostPointerCapture\n    };\n    EventSource.call(this, dispatcher, mapping);\n    /**\n     * @const\n     * @type {!Object<string, MSPointerEvent|Object>}\n     */\n\n    this.pointerMap = dispatcher.pointerMap;\n  }\n\n  if (EventSource) MsSource.__proto__ = EventSource;\n  MsSource.prototype = Object.create(EventSource && EventSource.prototype);\n  MsSource.prototype.constructor = MsSource;\n  /**\n   * Creates a copy of the original event that will be used\n   * for the fake pointer event.\n   *\n   * @private\n   * @param {MSPointerEvent} inEvent The in event.\n   * @return {Object} The copied event.\n   */\n\n  MsSource.prototype.prepareEvent_ = function prepareEvent_(inEvent) {\n    /** @type {MSPointerEvent|Object} */\n    var e = inEvent;\n\n    if (typeof inEvent.pointerType === 'number') {\n      e = this.dispatcher.cloneEvent(inEvent, inEvent);\n      e.pointerType = POINTER_TYPES[inEvent.pointerType];\n    }\n\n    return e;\n  };\n  /**\n   * Remove this pointer from the list of active pointers.\n   * @param {number} pointerId Pointer identifier.\n   */\n\n\n  MsSource.prototype.cleanup = function cleanup(pointerId) {\n    delete this.pointerMap[pointerId.toString()];\n  };\n\n  return MsSource;\n}(EventSource);\n\nexport default MsSource;","map":{"version":3,"sources":["../../../src/ol/pointer/MsSource.js"],"names":["const","super","let"],"mappings":"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","sourcesContent":["/**\n * @module ol/pointer/MsSource\n */\n// Based on https://github.com/Polymer/PointerEvents\n\n// Copyright (c) 2013 The Polymer Authors. All rights reserved.\n//\n// Redistribution and use in source and binary forms, with or without\n// modification, are permitted provided that the following conditions are\n// met:\n//\n// * Redistributions of source code must retain the above copyright\n// notice, this list of conditions and the following disclaimer.\n// * Redistributions in binary form must reproduce the above\n// copyright notice, this list of conditions and the following disclaimer\n// in the documentation and/or other materials provided with the\n// distribution.\n// * Neither the name of Google Inc. nor the names of its\n// contributors may be used to endorse or promote products derived from\n// this software without specific prior written permission.\n//\n// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n// \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\nimport EventSource from './EventSource.js';\n\n\n/**\n * @const\n * @type {Array<string>}\n */\nconst POINTER_TYPES = [\n  '',\n  'unavailable',\n  'touch',\n  'pen',\n  'mouse'\n];\n\n/**\n * Handler for `msPointerDown`.\n *\n * @this {MsSource}\n * @param {MSPointerEvent} inEvent The in event.\n */\nfunction msPointerDown(inEvent) {\n  this.pointerMap[inEvent.pointerId.toString()] = inEvent;\n  const e = this.prepareEvent_(inEvent);\n  this.dispatcher.down(e, inEvent);\n}\n\n/**\n * Handler for `msPointerMove`.\n *\n * @this {MsSource}\n * @param {MSPointerEvent} inEvent The in event.\n */\nfunction msPointerMove(inEvent) {\n  const e = this.prepareEvent_(inEvent);\n  this.dispatcher.move(e, inEvent);\n}\n\n/**\n * Handler for `msPointerUp`.\n *\n * @this {MsSource}\n * @param {MSPointerEvent} inEvent The in event.\n */\nfunction msPointerUp(inEvent) {\n  const e = this.prepareEvent_(inEvent);\n  this.dispatcher.up(e, inEvent);\n  this.cleanup(inEvent.pointerId);\n}\n\n/**\n * Handler for `msPointerOut`.\n *\n * @this {MsSource}\n * @param {MSPointerEvent} inEvent The in event.\n */\nfunction msPointerOut(inEvent) {\n  const e = this.prepareEvent_(inEvent);\n  this.dispatcher.leaveOut(e, inEvent);\n}\n\n/**\n * Handler for `msPointerOver`.\n *\n * @this {MsSource}\n * @param {MSPointerEvent} inEvent The in event.\n */\nfunction msPointerOver(inEvent) {\n  const e = this.prepareEvent_(inEvent);\n  this.dispatcher.enterOver(e, inEvent);\n}\n\n/**\n * Handler for `msPointerCancel`.\n *\n * @this {MsSource}\n * @param {MSPointerEvent} inEvent The in event.\n */\nfunction msPointerCancel(inEvent) {\n  const e = this.prepareEvent_(inEvent);\n  this.dispatcher.cancel(e, inEvent);\n  this.cleanup(inEvent.pointerId);\n}\n\n/**\n * Handler for `msLostPointerCapture`.\n *\n * @this {MsSource}\n * @param {MSPointerEvent} inEvent The in event.\n */\nfunction msLostPointerCapture(inEvent) {\n  const e = this.dispatcher.makeEvent('lostpointercapture', inEvent, inEvent);\n  this.dispatcher.dispatchEvent(e);\n}\n\n/**\n * Handler for `msGotPointerCapture`.\n *\n * @this {MsSource}\n * @param {MSPointerEvent} inEvent The in event.\n */\nfunction msGotPointerCapture(inEvent) {\n  const e = this.dispatcher.makeEvent('gotpointercapture', inEvent, inEvent);\n  this.dispatcher.dispatchEvent(e);\n}\n\nclass MsSource extends EventSource {\n\n  /**\n   * @param {import(\"./PointerEventHandler.js\").default} dispatcher Event handler.\n   */\n  constructor(dispatcher) {\n    const mapping = {\n      'MSPointerDown': msPointerDown,\n      'MSPointerMove': msPointerMove,\n      'MSPointerUp': msPointerUp,\n      'MSPointerOut': msPointerOut,\n      'MSPointerOver': msPointerOver,\n      'MSPointerCancel': msPointerCancel,\n      'MSGotPointerCapture': msGotPointerCapture,\n      'MSLostPointerCapture': msLostPointerCapture\n    };\n    super(dispatcher, mapping);\n\n    /**\n     * @const\n     * @type {!Object<string, MSPointerEvent|Object>}\n     */\n    this.pointerMap = dispatcher.pointerMap;\n  }\n\n  /**\n   * Creates a copy of the original event that will be used\n   * for the fake pointer event.\n   *\n   * @private\n   * @param {MSPointerEvent} inEvent The in event.\n   * @return {Object} The copied event.\n   */\n  prepareEvent_(inEvent) {\n    /** @type {MSPointerEvent|Object} */\n    let e = inEvent;\n    if (typeof inEvent.pointerType === 'number') {\n      e = this.dispatcher.cloneEvent(inEvent, inEvent);\n      e.pointerType = POINTER_TYPES[inEvent.pointerType];\n    }\n\n    return e;\n  }\n\n  /**\n   * Remove this pointer from the list of active pointers.\n   * @param {number} pointerId Pointer identifier.\n   */\n  cleanup(pointerId) {\n    delete this.pointerMap[pointerId.toString()];\n  }\n\n}\n\nexport default MsSource;\n"]},"metadata":{},"sourceType":"module"}