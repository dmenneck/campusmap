{"ast":null,"code":"/**\n * @module ol/source/UrlTile\n */\nimport { getUid, inherits } from '../util.js';\nimport TileState from '../TileState.js';\nimport { expandUrl, createFromTemplates, nullTileUrlFunction } from '../tileurlfunction.js';\nimport TileSource, { TileSourceEvent } from '../source/Tile.js';\nimport TileEventType from '../source/TileEventType.js';\nimport { getKeyZXY } from '../tilecoord.js';\n/**\n * @typedef {Object} Options\n * @property {module:ol/source/Source~AttributionLike} [attributions]\n * @property {number} [cacheSize]\n * @property {module:ol/extent~Extent} [extent]\n * @property {boolean} [opaque]\n * @property {module:ol/proj~ProjectionLike} [projection]\n * @property {module:ol/source/State} [state]\n * @property {module:ol/tilegrid/TileGrid} [tileGrid]\n * @property {module:ol/Tile~LoadFunction} tileLoadFunction\n * @property {number} [tilePixelRatio]\n * @property {module:ol/Tile~UrlFunction} [tileUrlFunction]\n * @property {string} [url]\n * @property {Array.<string>} [urls]\n * @property {boolean} [wrapX=true]\n * @property {number} [transition]\n */\n\n/**\n * @classdesc\n * Base class for sources providing tiles divided into a tile grid over http.\n *\n * @constructor\n * @abstract\n * @fires module:ol/source/TileEvent\n * @extends {module:ol/source/Tile}\n * @param {module:ol/source/UrlTile~Options=} options Image tile options.\n */\n\nconst UrlTile = function (options) {\n  TileSource.call(this, {\n    attributions: options.attributions,\n    cacheSize: options.cacheSize,\n    extent: options.extent,\n    opaque: options.opaque,\n    projection: options.projection,\n    state: options.state,\n    tileGrid: options.tileGrid,\n    tilePixelRatio: options.tilePixelRatio,\n    wrapX: options.wrapX,\n    transition: options.transition\n  });\n  /**\n   * @protected\n   * @type {module:ol/Tile~LoadFunction}\n   */\n\n  this.tileLoadFunction = options.tileLoadFunction;\n  /**\n   * @protected\n   * @type {module:ol/Tile~UrlFunction}\n   */\n\n  this.tileUrlFunction = this.fixedTileUrlFunction ? this.fixedTileUrlFunction.bind(this) : nullTileUrlFunction;\n  /**\n   * @protected\n   * @type {!Array.<string>|null}\n   */\n\n  this.urls = null;\n\n  if (options.urls) {\n    this.setUrls(options.urls);\n  } else if (options.url) {\n    this.setUrl(options.url);\n  }\n\n  if (options.tileUrlFunction) {\n    this.setTileUrlFunction(options.tileUrlFunction);\n  }\n  /**\n   * @private\n   * @type {!Object.<number, boolean>}\n   */\n\n\n  this.tileLoadingKeys_ = {};\n};\n\ninherits(UrlTile, TileSource);\n/**\n * @type {module:ol/Tile~UrlFunction|undefined}\n * @protected\n */\n\nUrlTile.prototype.fixedTileUrlFunction;\n/**\n * Return the tile load function of the source.\n * @return {module:ol/Tile~LoadFunction} TileLoadFunction\n * @api\n */\n\nUrlTile.prototype.getTileLoadFunction = function () {\n  return this.tileLoadFunction;\n};\n/**\n * Return the tile URL function of the source.\n * @return {module:ol/Tile~UrlFunction} TileUrlFunction\n * @api\n */\n\n\nUrlTile.prototype.getTileUrlFunction = function () {\n  return this.tileUrlFunction;\n};\n/**\n * Return the URLs used for this source.\n * When a tileUrlFunction is used instead of url or urls,\n * null will be returned.\n * @return {!Array.<string>|null} URLs.\n * @api\n */\n\n\nUrlTile.prototype.getUrls = function () {\n  return this.urls;\n};\n/**\n * Handle tile change events.\n * @param {module:ol/events/Event} event Event.\n * @protected\n */\n\n\nUrlTile.prototype.handleTileChange = function (event) {\n  const tile =\n  /** @type {module:ol/Tile} */\n  event.target;\n  const uid = getUid(tile);\n  const tileState = tile.getState();\n  let type;\n\n  if (tileState == TileState.LOADING) {\n    this.tileLoadingKeys_[uid] = true;\n    type = TileEventType.TILELOADSTART;\n  } else if (uid in this.tileLoadingKeys_) {\n    delete this.tileLoadingKeys_[uid];\n    type = tileState == TileState.ERROR ? TileEventType.TILELOADERROR : tileState == TileState.LOADED || tileState == TileState.ABORT ? TileEventType.TILELOADEND : undefined;\n  }\n\n  if (type != undefined) {\n    this.dispatchEvent(new TileSourceEvent(type, tile));\n  }\n};\n/**\n * Set the tile load function of the source.\n * @param {module:ol/Tile~LoadFunction} tileLoadFunction Tile load function.\n * @api\n */\n\n\nUrlTile.prototype.setTileLoadFunction = function (tileLoadFunction) {\n  this.tileCache.clear();\n  this.tileLoadFunction = tileLoadFunction;\n  this.changed();\n};\n/**\n * Set the tile URL function of the source.\n * @param {module:ol/Tile~UrlFunction} tileUrlFunction Tile URL function.\n * @param {string=} opt_key Optional new tile key for the source.\n * @api\n */\n\n\nUrlTile.prototype.setTileUrlFunction = function (tileUrlFunction, opt_key) {\n  this.tileUrlFunction = tileUrlFunction;\n  this.tileCache.pruneExceptNewestZ();\n\n  if (typeof opt_key !== 'undefined') {\n    this.setKey(opt_key);\n  } else {\n    this.changed();\n  }\n};\n/**\n * Set the URL to use for requests.\n * @param {string} url URL.\n * @api\n */\n\n\nUrlTile.prototype.setUrl = function (url) {\n  const urls = this.urls = expandUrl(url);\n  this.setTileUrlFunction(this.fixedTileUrlFunction ? this.fixedTileUrlFunction.bind(this) : createFromTemplates(urls, this.tileGrid), url);\n};\n/**\n * Set the URLs to use for requests.\n * @param {Array.<string>} urls URLs.\n * @api\n */\n\n\nUrlTile.prototype.setUrls = function (urls) {\n  this.urls = urls;\n  const key = urls.join('\\n');\n  this.setTileUrlFunction(this.fixedTileUrlFunction ? this.fixedTileUrlFunction.bind(this) : createFromTemplates(urls, this.tileGrid), key);\n};\n/**\n * @inheritDoc\n */\n\n\nUrlTile.prototype.useTile = function (z, x, y) {\n  const tileCoordKey = getKeyZXY(z, x, y);\n\n  if (this.tileCache.containsKey(tileCoordKey)) {\n    this.tileCache.get(tileCoordKey);\n  }\n};\n\nexport default UrlTile;","map":null,"metadata":{},"sourceType":"module"}