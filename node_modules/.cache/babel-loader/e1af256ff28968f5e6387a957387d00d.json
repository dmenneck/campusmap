{"ast":null,"code":"/**\n * ag-grid-community - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components\n * @version v21.2.2\n * @link http://www.ag-grid.com/\n * @license MIT\n */\n\"use strict\";\n\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nvar __metadata = this && this.__metadata || function (k, v) {\n  if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\n\nvar __param = this && this.__param || function (paramIndex, decorator) {\n  return function (target, key) {\n    decorator(target, key, paramIndex);\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar context_1 = require(\"./context/context\");\n\nvar context_2 = require(\"./context/context\");\n\nvar logger_1 = require(\"./logger\");\n\nvar eventService_1 = require(\"./eventService\");\n\nvar events_1 = require(\"./events\");\n\nvar context_3 = require(\"./context/context\");\n\nvar gridOptionsWrapper_1 = require(\"./gridOptionsWrapper\");\n\nvar context_4 = require(\"./context/context\");\n\nvar constants_1 = require(\"./constants\");\n\nvar columnApi_1 = require(\"./columnController/columnApi\");\n\nvar gridApi_1 = require(\"./gridApi\");\n\nvar utils_1 = require(\"./utils\");\n\nvar changedPath_1 = require(\"./rowModels/clientSide/changedPath\");\n\nvar SelectionController =\n/** @class */\nfunction () {\n  function SelectionController() {}\n\n  SelectionController.prototype.setBeans = function (loggerFactory) {\n    this.logger = loggerFactory.create('SelectionController');\n    this.reset();\n\n    if (this.gridOptionsWrapper.isRowModelDefault()) {\n      this.eventService.addEventListener(events_1.Events.EVENT_ROW_DATA_CHANGED, this.reset.bind(this));\n    } else {\n      this.logger.log('dont know what to do here');\n    }\n  };\n\n  SelectionController.prototype.init = function () {\n    this.groupSelectsChildren = this.gridOptionsWrapper.isGroupSelectsChildren();\n    this.eventService.addEventListener(events_1.Events.EVENT_ROW_SELECTED, this.onRowSelected.bind(this));\n  };\n\n  SelectionController.prototype.setLastSelectedNode = function (rowNode) {\n    this.lastSelectedNode = rowNode;\n  };\n\n  SelectionController.prototype.getLastSelectedNode = function () {\n    return this.lastSelectedNode;\n  };\n\n  SelectionController.prototype.getSelectedNodes = function () {\n    var selectedNodes = [];\n\n    utils_1._.iterateObject(this.selectedNodes, function (key, rowNode) {\n      if (rowNode) {\n        selectedNodes.push(rowNode);\n      }\n    });\n\n    return selectedNodes;\n  };\n\n  SelectionController.prototype.getSelectedRows = function () {\n    var selectedRows = [];\n\n    utils_1._.iterateObject(this.selectedNodes, function (key, rowNode) {\n      if (rowNode && rowNode.data) {\n        selectedRows.push(rowNode.data);\n      }\n    });\n\n    return selectedRows;\n  };\n\n  SelectionController.prototype.removeGroupsFromSelection = function () {\n    var _this = this;\n\n    utils_1._.iterateObject(this.selectedNodes, function (key, rowNode) {\n      if (rowNode && rowNode.group) {\n        _this.selectedNodes[rowNode.id] = undefined;\n      }\n    });\n  }; // should only be called if groupSelectsChildren=true\n\n\n  SelectionController.prototype.updateGroupsFromChildrenSelections = function (changedPath) {\n    // we only do this when group selection state depends on selected children\n    if (!this.gridOptionsWrapper.isGroupSelectsChildren()) {\n      return;\n    } // also only do it if CSRM (code should never allow this anyway)\n\n\n    if (this.rowModel.getType() !== constants_1.Constants.ROW_MODEL_TYPE_CLIENT_SIDE) {\n      return;\n    }\n\n    var clientSideRowModel = this.rowModel;\n    var rootNode = clientSideRowModel.getRootNode();\n\n    if (!changedPath) {\n      changedPath = new changedPath_1.ChangedPath(true, rootNode);\n      changedPath.setInactive();\n    }\n\n    changedPath.forEachChangedNodeDepthFirst(function (rowNode) {\n      if (rowNode !== rootNode) {\n        rowNode.calculateSelectedFromChildren();\n      }\n    }); // clientSideRowModel.getTopLevelNodes()!.forEach((rowNode: RowNode) => {\n    //     rowNode.depthFirstSearch((node) => {\n    //         if (node.group) {\n    //         }\n    //     });\n    // });\n  };\n\n  SelectionController.prototype.getNodeForIdIfSelected = function (id) {\n    return this.selectedNodes[id];\n  };\n\n  SelectionController.prototype.clearOtherNodes = function (rowNodeToKeepSelected) {\n    var _this = this;\n\n    var groupsToRefresh = {};\n    var updatedCount = 0;\n\n    utils_1._.iterateObject(this.selectedNodes, function (key, otherRowNode) {\n      if (otherRowNode && otherRowNode.id !== rowNodeToKeepSelected.id) {\n        var rowNode = _this.selectedNodes[otherRowNode.id];\n        updatedCount += rowNode.setSelectedParams({\n          newValue: false,\n          clearSelection: false,\n          suppressFinishActions: true\n        });\n\n        if (_this.groupSelectsChildren && otherRowNode.parent) {\n          groupsToRefresh[otherRowNode.parent.id] = otherRowNode.parent;\n        }\n      }\n    });\n\n    utils_1._.iterateObject(groupsToRefresh, function (key, group) {\n      group.calculateSelectedFromChildren();\n    });\n\n    return updatedCount;\n  };\n\n  SelectionController.prototype.onRowSelected = function (event) {\n    var rowNode = event.node; // we do not store the group rows when the groups select children\n\n    if (this.groupSelectsChildren && rowNode.group) {\n      return;\n    }\n\n    if (rowNode.isSelected()) {\n      this.selectedNodes[rowNode.id] = rowNode;\n    } else {\n      this.selectedNodes[rowNode.id] = undefined;\n    }\n  };\n\n  SelectionController.prototype.syncInRowNode = function (rowNode, oldNode) {\n    this.syncInOldRowNode(rowNode, oldNode);\n    this.syncInNewRowNode(rowNode);\n  }; // if the id has changed for the node, then this means the rowNode\n  // is getting used for a different data item, which breaks\n  // our selectedNodes, as the node now is mapped by the old id\n  // which is inconsistent. so to keep the old node as selected,\n  // we swap in the clone (with the old id and old data). this means\n  // the oldNode is effectively a daemon we keep a reference to,\n  // so if client calls api.getSelectedNodes(), it gets the daemon\n  // in the result. when the client un-selects, the reference to the\n  // daemon is removed. the daemon, because it's an oldNode, is not\n  // used by the grid for rendering, it's a copy of what the node used\n  // to be like before the id was changed.\n\n\n  SelectionController.prototype.syncInOldRowNode = function (rowNode, oldNode) {\n    var oldNodeHasDifferentId = utils_1._.exists(oldNode) && rowNode.id !== oldNode.id;\n\n    if (oldNodeHasDifferentId) {\n      var oldNodeSelected = utils_1._.exists(this.selectedNodes[oldNode.id]);\n\n      if (oldNodeSelected) {\n        this.selectedNodes[oldNode.id] = oldNode;\n      }\n    }\n  };\n\n  SelectionController.prototype.syncInNewRowNode = function (rowNode) {\n    if (utils_1._.exists(this.selectedNodes[rowNode.id])) {\n      rowNode.setSelectedInitialValue(true);\n      this.selectedNodes[rowNode.id] = rowNode;\n    } else {\n      rowNode.setSelectedInitialValue(false);\n    }\n  };\n\n  SelectionController.prototype.reset = function () {\n    this.logger.log('reset');\n    this.selectedNodes = {};\n    this.lastSelectedNode = null;\n  }; // returns a list of all nodes at 'best cost' - a feature to be used\n  // with groups / trees. if a group has all it's children selected,\n  // then the group appears in the result, but not the children.\n  // Designed for use with 'children' as the group selection type,\n  // where groups don't actually appear in the selection normally.\n\n\n  SelectionController.prototype.getBestCostNodeSelection = function () {\n    if (this.rowModel.getType() !== constants_1.Constants.ROW_MODEL_TYPE_CLIENT_SIDE) {\n      console.warn('getBestCostNodeSelection is only available when using normal row model');\n    }\n\n    var clientSideRowModel = this.rowModel;\n    var topLevelNodes = clientSideRowModel.getTopLevelNodes();\n\n    if (topLevelNodes === null) {\n      console.warn('selectAll not available doing rowModel=virtual');\n      return;\n    }\n\n    var result = []; // recursive function, to find the selected nodes\n\n    function traverse(nodes) {\n      for (var i = 0, l = nodes.length; i < l; i++) {\n        var node = nodes[i];\n\n        if (node.isSelected()) {\n          result.push(node);\n        } else {\n          // if not selected, then if it's a group, and the group\n          // has children, continue to search for selections\n          if (node.group && node.children) {\n            traverse(node.children);\n          }\n        }\n      }\n    }\n\n    traverse(topLevelNodes);\n    return result;\n  };\n\n  SelectionController.prototype.setRowModel = function (rowModel) {\n    this.rowModel = rowModel;\n  };\n\n  SelectionController.prototype.isEmpty = function () {\n    var count = 0;\n\n    utils_1._.iterateObject(this.selectedNodes, function (nodeId, rowNode) {\n      if (rowNode) {\n        count++;\n      }\n    });\n\n    return count === 0;\n  };\n\n  SelectionController.prototype.deselectAllRowNodes = function (justFiltered) {\n    if (justFiltered === void 0) {\n      justFiltered = false;\n    }\n\n    var callback = function (rowNode) {\n      return rowNode.selectThisNode(false);\n    };\n\n    var rowModelClientSide = this.rowModel.getType() === constants_1.Constants.ROW_MODEL_TYPE_CLIENT_SIDE;\n\n    if (justFiltered) {\n      if (!rowModelClientSide) {\n        console.error('ag-Grid: selecting just filtered only works with In Memory Row Model');\n        return;\n      }\n\n      var clientSideRowModel = this.rowModel;\n      clientSideRowModel.forEachNodeAfterFilter(callback);\n    } else {\n      utils_1._.iterateObject(this.selectedNodes, function (id, rowNode) {\n        // remember the reference can be to null, as we never 'delete' from the map\n        if (rowNode) {\n          callback(rowNode);\n        }\n      }); // this clears down the map (whereas above only sets the items in map to 'undefined')\n\n\n      this.reset();\n    } // the above does not clean up the parent rows if they are selected\n\n\n    if (rowModelClientSide && this.groupSelectsChildren) {\n      this.updateGroupsFromChildrenSelections();\n    }\n\n    var event = {\n      type: events_1.Events.EVENT_SELECTION_CHANGED,\n      api: this.gridApi,\n      columnApi: this.columnApi\n    };\n    this.eventService.dispatchEvent(event);\n  };\n\n  SelectionController.prototype.selectAllRowNodes = function (justFiltered) {\n    if (justFiltered === void 0) {\n      justFiltered = false;\n    }\n\n    if (this.rowModel.getType() !== constants_1.Constants.ROW_MODEL_TYPE_CLIENT_SIDE) {\n      throw new Error(\"selectAll only available with normal row model, ie not \" + this.rowModel.getType());\n    }\n\n    var clientSideRowModel = this.rowModel;\n\n    var callback = function (rowNode) {\n      return rowNode.selectThisNode(true);\n    };\n\n    if (justFiltered) {\n      clientSideRowModel.forEachNodeAfterFilter(callback);\n    } else {\n      clientSideRowModel.forEachNode(callback);\n    } // the above does not clean up the parent rows if they are selected\n\n\n    if (this.rowModel.getType() === constants_1.Constants.ROW_MODEL_TYPE_CLIENT_SIDE && this.groupSelectsChildren) {\n      this.updateGroupsFromChildrenSelections();\n    }\n\n    var event = {\n      type: events_1.Events.EVENT_SELECTION_CHANGED,\n      api: this.gridApi,\n      columnApi: this.columnApi\n    };\n    this.eventService.dispatchEvent(event);\n  };\n  /**\n   * @method\n   * @deprecated\n   */\n\n\n  SelectionController.prototype.selectNode = function (rowNode, tryMulti) {\n    if (rowNode) {\n      rowNode.setSelectedParams({\n        newValue: true,\n        clearSelection: !tryMulti\n      });\n    }\n  };\n  /**\n   * @method\n   * @deprecated\n   */\n\n\n  SelectionController.prototype.deselectIndex = function (rowIndex) {\n    var node = this.rowModel.getRow(rowIndex);\n    this.deselectNode(node);\n  };\n  /**\n   * @method\n   * @deprecated\n   */\n\n\n  SelectionController.prototype.deselectNode = function (rowNode) {\n    if (rowNode) {\n      rowNode.setSelectedParams({\n        newValue: false,\n        clearSelection: false\n      });\n    }\n  };\n  /**\n   * @method\n   * @deprecated\n   */\n\n\n  SelectionController.prototype.selectIndex = function (index, tryMulti) {\n    var node = this.rowModel.getRow(index);\n    this.selectNode(node, tryMulti);\n  };\n\n  __decorate([context_3.Autowired('eventService'), __metadata(\"design:type\", eventService_1.EventService)], SelectionController.prototype, \"eventService\", void 0);\n\n  __decorate([context_3.Autowired('rowModel'), __metadata(\"design:type\", Object)], SelectionController.prototype, \"rowModel\", void 0);\n\n  __decorate([context_3.Autowired('gridOptionsWrapper'), __metadata(\"design:type\", gridOptionsWrapper_1.GridOptionsWrapper)], SelectionController.prototype, \"gridOptionsWrapper\", void 0);\n\n  __decorate([context_3.Autowired('columnApi'), __metadata(\"design:type\", columnApi_1.ColumnApi)], SelectionController.prototype, \"columnApi\", void 0);\n\n  __decorate([context_3.Autowired('gridApi'), __metadata(\"design:type\", gridApi_1.GridApi)], SelectionController.prototype, \"gridApi\", void 0);\n\n  __decorate([__param(0, context_2.Qualifier('loggerFactory')), __metadata(\"design:type\", Function), __metadata(\"design:paramtypes\", [logger_1.LoggerFactory]), __metadata(\"design:returntype\", void 0)], SelectionController.prototype, \"setBeans\", null);\n\n  __decorate([context_4.PostConstruct, __metadata(\"design:type\", Function), __metadata(\"design:paramtypes\", []), __metadata(\"design:returntype\", void 0)], SelectionController.prototype, \"init\", null);\n\n  SelectionController = __decorate([context_1.Bean('selectionController')], SelectionController);\n  return SelectionController;\n}();\n\nexports.SelectionController = SelectionController;","map":{"version":3,"sources":["/Users/dirkmennecke77/Desktop/Lageplan/node_modules/ag-grid-community/dist/lib/selectionController.js"],"names":["__decorate","decorators","target","key","desc","c","arguments","length","r","Object","getOwnPropertyDescriptor","d","Reflect","decorate","i","defineProperty","__metadata","k","v","metadata","__param","paramIndex","decorator","exports","value","context_1","require","context_2","logger_1","eventService_1","events_1","context_3","gridOptionsWrapper_1","context_4","constants_1","columnApi_1","gridApi_1","utils_1","changedPath_1","SelectionController","prototype","setBeans","loggerFactory","logger","create","reset","gridOptionsWrapper","isRowModelDefault","eventService","addEventListener","Events","EVENT_ROW_DATA_CHANGED","bind","log","init","groupSelectsChildren","isGroupSelectsChildren","EVENT_ROW_SELECTED","onRowSelected","setLastSelectedNode","rowNode","lastSelectedNode","getLastSelectedNode","getSelectedNodes","selectedNodes","_","iterateObject","push","getSelectedRows","selectedRows","data","removeGroupsFromSelection","_this","group","id","undefined","updateGroupsFromChildrenSelections","changedPath","rowModel","getType","Constants","ROW_MODEL_TYPE_CLIENT_SIDE","clientSideRowModel","rootNode","getRootNode","ChangedPath","setInactive","forEachChangedNodeDepthFirst","calculateSelectedFromChildren","getNodeForIdIfSelected","clearOtherNodes","rowNodeToKeepSelected","groupsToRefresh","updatedCount","otherRowNode","setSelectedParams","newValue","clearSelection","suppressFinishActions","parent","event","node","isSelected","syncInRowNode","oldNode","syncInOldRowNode","syncInNewRowNode","oldNodeHasDifferentId","exists","oldNodeSelected","setSelectedInitialValue","getBestCostNodeSelection","console","warn","topLevelNodes","getTopLevelNodes","result","traverse","nodes","l","children","setRowModel","isEmpty","count","nodeId","deselectAllRowNodes","justFiltered","callback","selectThisNode","rowModelClientSide","error","forEachNodeAfterFilter","type","EVENT_SELECTION_CHANGED","api","gridApi","columnApi","dispatchEvent","selectAllRowNodes","Error","forEachNode","selectNode","tryMulti","deselectIndex","rowIndex","getRow","deselectNode","selectIndex","index","Autowired","EventService","GridOptionsWrapper","ColumnApi","GridApi","Qualifier","Function","LoggerFactory","PostConstruct","Bean"],"mappings":"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","sourcesContent":["/**\n * ag-grid-community - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components\n * @version v21.2.2\n * @link http://www.ag-grid.com/\n * @license MIT\n */\n\"use strict\";\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __metadata = (this && this.__metadata) || function (k, v) {\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\nvar __param = (this && this.__param) || function (paramIndex, decorator) {\n    return function (target, key) { decorator(target, key, paramIndex); }\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar context_1 = require(\"./context/context\");\nvar context_2 = require(\"./context/context\");\nvar logger_1 = require(\"./logger\");\nvar eventService_1 = require(\"./eventService\");\nvar events_1 = require(\"./events\");\nvar context_3 = require(\"./context/context\");\nvar gridOptionsWrapper_1 = require(\"./gridOptionsWrapper\");\nvar context_4 = require(\"./context/context\");\nvar constants_1 = require(\"./constants\");\nvar columnApi_1 = require(\"./columnController/columnApi\");\nvar gridApi_1 = require(\"./gridApi\");\nvar utils_1 = require(\"./utils\");\nvar changedPath_1 = require(\"./rowModels/clientSide/changedPath\");\nvar SelectionController = /** @class */ (function () {\n    function SelectionController() {\n    }\n    SelectionController.prototype.setBeans = function (loggerFactory) {\n        this.logger = loggerFactory.create('SelectionController');\n        this.reset();\n        if (this.gridOptionsWrapper.isRowModelDefault()) {\n            this.eventService.addEventListener(events_1.Events.EVENT_ROW_DATA_CHANGED, this.reset.bind(this));\n        }\n        else {\n            this.logger.log('dont know what to do here');\n        }\n    };\n    SelectionController.prototype.init = function () {\n        this.groupSelectsChildren = this.gridOptionsWrapper.isGroupSelectsChildren();\n        this.eventService.addEventListener(events_1.Events.EVENT_ROW_SELECTED, this.onRowSelected.bind(this));\n    };\n    SelectionController.prototype.setLastSelectedNode = function (rowNode) {\n        this.lastSelectedNode = rowNode;\n    };\n    SelectionController.prototype.getLastSelectedNode = function () {\n        return this.lastSelectedNode;\n    };\n    SelectionController.prototype.getSelectedNodes = function () {\n        var selectedNodes = [];\n        utils_1._.iterateObject(this.selectedNodes, function (key, rowNode) {\n            if (rowNode) {\n                selectedNodes.push(rowNode);\n            }\n        });\n        return selectedNodes;\n    };\n    SelectionController.prototype.getSelectedRows = function () {\n        var selectedRows = [];\n        utils_1._.iterateObject(this.selectedNodes, function (key, rowNode) {\n            if (rowNode && rowNode.data) {\n                selectedRows.push(rowNode.data);\n            }\n        });\n        return selectedRows;\n    };\n    SelectionController.prototype.removeGroupsFromSelection = function () {\n        var _this = this;\n        utils_1._.iterateObject(this.selectedNodes, function (key, rowNode) {\n            if (rowNode && rowNode.group) {\n                _this.selectedNodes[rowNode.id] = undefined;\n            }\n        });\n    };\n    // should only be called if groupSelectsChildren=true\n    SelectionController.prototype.updateGroupsFromChildrenSelections = function (changedPath) {\n        // we only do this when group selection state depends on selected children\n        if (!this.gridOptionsWrapper.isGroupSelectsChildren()) {\n            return;\n        }\n        // also only do it if CSRM (code should never allow this anyway)\n        if (this.rowModel.getType() !== constants_1.Constants.ROW_MODEL_TYPE_CLIENT_SIDE) {\n            return;\n        }\n        var clientSideRowModel = this.rowModel;\n        var rootNode = clientSideRowModel.getRootNode();\n        if (!changedPath) {\n            changedPath = new changedPath_1.ChangedPath(true, rootNode);\n            changedPath.setInactive();\n        }\n        changedPath.forEachChangedNodeDepthFirst(function (rowNode) {\n            if (rowNode !== rootNode) {\n                rowNode.calculateSelectedFromChildren();\n            }\n        });\n        // clientSideRowModel.getTopLevelNodes()!.forEach((rowNode: RowNode) => {\n        //     rowNode.depthFirstSearch((node) => {\n        //         if (node.group) {\n        //         }\n        //     });\n        // });\n    };\n    SelectionController.prototype.getNodeForIdIfSelected = function (id) {\n        return this.selectedNodes[id];\n    };\n    SelectionController.prototype.clearOtherNodes = function (rowNodeToKeepSelected) {\n        var _this = this;\n        var groupsToRefresh = {};\n        var updatedCount = 0;\n        utils_1._.iterateObject(this.selectedNodes, function (key, otherRowNode) {\n            if (otherRowNode && otherRowNode.id !== rowNodeToKeepSelected.id) {\n                var rowNode = _this.selectedNodes[otherRowNode.id];\n                updatedCount += rowNode.setSelectedParams({\n                    newValue: false,\n                    clearSelection: false,\n                    suppressFinishActions: true\n                });\n                if (_this.groupSelectsChildren && otherRowNode.parent) {\n                    groupsToRefresh[otherRowNode.parent.id] = otherRowNode.parent;\n                }\n            }\n        });\n        utils_1._.iterateObject(groupsToRefresh, function (key, group) {\n            group.calculateSelectedFromChildren();\n        });\n        return updatedCount;\n    };\n    SelectionController.prototype.onRowSelected = function (event) {\n        var rowNode = event.node;\n        // we do not store the group rows when the groups select children\n        if (this.groupSelectsChildren && rowNode.group) {\n            return;\n        }\n        if (rowNode.isSelected()) {\n            this.selectedNodes[rowNode.id] = rowNode;\n        }\n        else {\n            this.selectedNodes[rowNode.id] = undefined;\n        }\n    };\n    SelectionController.prototype.syncInRowNode = function (rowNode, oldNode) {\n        this.syncInOldRowNode(rowNode, oldNode);\n        this.syncInNewRowNode(rowNode);\n    };\n    // if the id has changed for the node, then this means the rowNode\n    // is getting used for a different data item, which breaks\n    // our selectedNodes, as the node now is mapped by the old id\n    // which is inconsistent. so to keep the old node as selected,\n    // we swap in the clone (with the old id and old data). this means\n    // the oldNode is effectively a daemon we keep a reference to,\n    // so if client calls api.getSelectedNodes(), it gets the daemon\n    // in the result. when the client un-selects, the reference to the\n    // daemon is removed. the daemon, because it's an oldNode, is not\n    // used by the grid for rendering, it's a copy of what the node used\n    // to be like before the id was changed.\n    SelectionController.prototype.syncInOldRowNode = function (rowNode, oldNode) {\n        var oldNodeHasDifferentId = utils_1._.exists(oldNode) && (rowNode.id !== oldNode.id);\n        if (oldNodeHasDifferentId) {\n            var oldNodeSelected = utils_1._.exists(this.selectedNodes[oldNode.id]);\n            if (oldNodeSelected) {\n                this.selectedNodes[oldNode.id] = oldNode;\n            }\n        }\n    };\n    SelectionController.prototype.syncInNewRowNode = function (rowNode) {\n        if (utils_1._.exists(this.selectedNodes[rowNode.id])) {\n            rowNode.setSelectedInitialValue(true);\n            this.selectedNodes[rowNode.id] = rowNode;\n        }\n        else {\n            rowNode.setSelectedInitialValue(false);\n        }\n    };\n    SelectionController.prototype.reset = function () {\n        this.logger.log('reset');\n        this.selectedNodes = {};\n        this.lastSelectedNode = null;\n    };\n    // returns a list of all nodes at 'best cost' - a feature to be used\n    // with groups / trees. if a group has all it's children selected,\n    // then the group appears in the result, but not the children.\n    // Designed for use with 'children' as the group selection type,\n    // where groups don't actually appear in the selection normally.\n    SelectionController.prototype.getBestCostNodeSelection = function () {\n        if (this.rowModel.getType() !== constants_1.Constants.ROW_MODEL_TYPE_CLIENT_SIDE) {\n            console.warn('getBestCostNodeSelection is only available when using normal row model');\n        }\n        var clientSideRowModel = this.rowModel;\n        var topLevelNodes = clientSideRowModel.getTopLevelNodes();\n        if (topLevelNodes === null) {\n            console.warn('selectAll not available doing rowModel=virtual');\n            return;\n        }\n        var result = [];\n        // recursive function, to find the selected nodes\n        function traverse(nodes) {\n            for (var i = 0, l = nodes.length; i < l; i++) {\n                var node = nodes[i];\n                if (node.isSelected()) {\n                    result.push(node);\n                }\n                else {\n                    // if not selected, then if it's a group, and the group\n                    // has children, continue to search for selections\n                    if (node.group && node.children) {\n                        traverse(node.children);\n                    }\n                }\n            }\n        }\n        traverse(topLevelNodes);\n        return result;\n    };\n    SelectionController.prototype.setRowModel = function (rowModel) {\n        this.rowModel = rowModel;\n    };\n    SelectionController.prototype.isEmpty = function () {\n        var count = 0;\n        utils_1._.iterateObject(this.selectedNodes, function (nodeId, rowNode) {\n            if (rowNode) {\n                count++;\n            }\n        });\n        return count === 0;\n    };\n    SelectionController.prototype.deselectAllRowNodes = function (justFiltered) {\n        if (justFiltered === void 0) { justFiltered = false; }\n        var callback = function (rowNode) { return rowNode.selectThisNode(false); };\n        var rowModelClientSide = this.rowModel.getType() === constants_1.Constants.ROW_MODEL_TYPE_CLIENT_SIDE;\n        if (justFiltered) {\n            if (!rowModelClientSide) {\n                console.error('ag-Grid: selecting just filtered only works with In Memory Row Model');\n                return;\n            }\n            var clientSideRowModel = this.rowModel;\n            clientSideRowModel.forEachNodeAfterFilter(callback);\n        }\n        else {\n            utils_1._.iterateObject(this.selectedNodes, function (id, rowNode) {\n                // remember the reference can be to null, as we never 'delete' from the map\n                if (rowNode) {\n                    callback(rowNode);\n                }\n            });\n            // this clears down the map (whereas above only sets the items in map to 'undefined')\n            this.reset();\n        }\n        // the above does not clean up the parent rows if they are selected\n        if (rowModelClientSide && this.groupSelectsChildren) {\n            this.updateGroupsFromChildrenSelections();\n        }\n        var event = {\n            type: events_1.Events.EVENT_SELECTION_CHANGED,\n            api: this.gridApi,\n            columnApi: this.columnApi\n        };\n        this.eventService.dispatchEvent(event);\n    };\n    SelectionController.prototype.selectAllRowNodes = function (justFiltered) {\n        if (justFiltered === void 0) { justFiltered = false; }\n        if (this.rowModel.getType() !== constants_1.Constants.ROW_MODEL_TYPE_CLIENT_SIDE) {\n            throw new Error(\"selectAll only available with normal row model, ie not \" + this.rowModel.getType());\n        }\n        var clientSideRowModel = this.rowModel;\n        var callback = function (rowNode) { return rowNode.selectThisNode(true); };\n        if (justFiltered) {\n            clientSideRowModel.forEachNodeAfterFilter(callback);\n        }\n        else {\n            clientSideRowModel.forEachNode(callback);\n        }\n        // the above does not clean up the parent rows if they are selected\n        if (this.rowModel.getType() === constants_1.Constants.ROW_MODEL_TYPE_CLIENT_SIDE && this.groupSelectsChildren) {\n            this.updateGroupsFromChildrenSelections();\n        }\n        var event = {\n            type: events_1.Events.EVENT_SELECTION_CHANGED,\n            api: this.gridApi,\n            columnApi: this.columnApi\n        };\n        this.eventService.dispatchEvent(event);\n    };\n    /**\n     * @method\n     * @deprecated\n     */\n    SelectionController.prototype.selectNode = function (rowNode, tryMulti) {\n        if (rowNode) {\n            rowNode.setSelectedParams({ newValue: true, clearSelection: !tryMulti });\n        }\n    };\n    /**\n     * @method\n     * @deprecated\n     */\n    SelectionController.prototype.deselectIndex = function (rowIndex) {\n        var node = this.rowModel.getRow(rowIndex);\n        this.deselectNode(node);\n    };\n    /**\n     * @method\n     * @deprecated\n     */\n    SelectionController.prototype.deselectNode = function (rowNode) {\n        if (rowNode) {\n            rowNode.setSelectedParams({ newValue: false, clearSelection: false });\n        }\n    };\n    /**\n     * @method\n     * @deprecated\n     */\n    SelectionController.prototype.selectIndex = function (index, tryMulti) {\n        var node = this.rowModel.getRow(index);\n        this.selectNode(node, tryMulti);\n    };\n    __decorate([\n        context_3.Autowired('eventService'),\n        __metadata(\"design:type\", eventService_1.EventService)\n    ], SelectionController.prototype, \"eventService\", void 0);\n    __decorate([\n        context_3.Autowired('rowModel'),\n        __metadata(\"design:type\", Object)\n    ], SelectionController.prototype, \"rowModel\", void 0);\n    __decorate([\n        context_3.Autowired('gridOptionsWrapper'),\n        __metadata(\"design:type\", gridOptionsWrapper_1.GridOptionsWrapper)\n    ], SelectionController.prototype, \"gridOptionsWrapper\", void 0);\n    __decorate([\n        context_3.Autowired('columnApi'),\n        __metadata(\"design:type\", columnApi_1.ColumnApi)\n    ], SelectionController.prototype, \"columnApi\", void 0);\n    __decorate([\n        context_3.Autowired('gridApi'),\n        __metadata(\"design:type\", gridApi_1.GridApi)\n    ], SelectionController.prototype, \"gridApi\", void 0);\n    __decorate([\n        __param(0, context_2.Qualifier('loggerFactory')),\n        __metadata(\"design:type\", Function),\n        __metadata(\"design:paramtypes\", [logger_1.LoggerFactory]),\n        __metadata(\"design:returntype\", void 0)\n    ], SelectionController.prototype, \"setBeans\", null);\n    __decorate([\n        context_4.PostConstruct,\n        __metadata(\"design:type\", Function),\n        __metadata(\"design:paramtypes\", []),\n        __metadata(\"design:returntype\", void 0)\n    ], SelectionController.prototype, \"init\", null);\n    SelectionController = __decorate([\n        context_1.Bean('selectionController')\n    ], SelectionController);\n    return SelectionController;\n}());\nexports.SelectionController = SelectionController;\n"]},"metadata":{},"sourceType":"script"}