{"ast":null,"code":"/**\n * @module ol/style/Fill\n */\nimport { getUid } from '../util.js';\nimport { asString } from '../color.js';\n/**\n * @typedef {Object} Options\n * @property {import(\"../color.js\").Color|import(\"../colorlike.js\").ColorLike} [color] A color, gradient or pattern.\n * See {@link module:ol/color~Color} and {@link module:ol/colorlike~ColorLike} for possible formats.\n * Default null; if null, the Canvas/renderer default black will be used.\n */\n\n/**\n * @classdesc\n * Set fill style for vector features.\n * @api\n */\n\nvar Fill = function Fill(opt_options) {\n  var options = opt_options || {};\n  /**\n   * @private\n   * @type {import(\"../color.js\").Color|import(\"../colorlike.js\").ColorLike}\n   */\n\n  this.color_ = options.color !== undefined ? options.color : null;\n  /**\n   * @private\n   * @type {string|undefined}\n   */\n\n  this.checksum_ = undefined;\n};\n/**\n * Clones the style. The color is not cloned if it is an {@link module:ol/colorlike~ColorLike}.\n * @return {Fill} The cloned style.\n * @api\n */\n\n\nFill.prototype.clone = function clone() {\n  var color = this.getColor();\n  return new Fill({\n    color: Array.isArray(color) ? color.slice() : color || undefined\n  });\n};\n/**\n * Get the fill color.\n * @return {import(\"../color.js\").Color|import(\"../colorlike.js\").ColorLike} Color.\n * @api\n */\n\n\nFill.prototype.getColor = function getColor() {\n  return this.color_;\n};\n/**\n * Set the color.\n *\n * @param {import(\"../color.js\").Color|import(\"../colorlike.js\").ColorLike} color Color.\n * @api\n */\n\n\nFill.prototype.setColor = function setColor(color) {\n  this.color_ = color;\n  this.checksum_ = undefined;\n};\n/**\n * @return {string} The checksum.\n */\n\n\nFill.prototype.getChecksum = function getChecksum() {\n  if (this.checksum_ === undefined) {\n    var color = this.color_;\n\n    if (color) {\n      if (Array.isArray(color) || typeof color == 'string') {\n        this.checksum_ = 'f' + asString(\n        /** @type {import(\"../color.js\").Color|string} */\n        color);\n      } else {\n        this.checksum_ = getUid(this.color_);\n      }\n    } else {\n      this.checksum_ = 'f-';\n    }\n  }\n\n  return this.checksum_;\n};\n\nexport default Fill;","map":{"version":3,"sources":["../../../src/ol/style/Fill.js"],"names":["const"],"mappings":"AAAA;;;AAGA,SAAQ,MAAR,QAAqB,YAArB;AACA,SAAQ,QAAR,QAAuB,aAAvB;;;;;;;;;;;;;;AAgBA,IAAM,IAAI,GAIR,SAAA,IAAA,CAAY,WAAZ,EAAyB;AAEvBA,MAAM,OAAO,GAAG,WAAW,IAAI,EAA/BA;AAEA;;;;;AAIA,OAAK,MAAL,GAAc,OAAO,CAAC,KAAR,KAAkB,SAAlB,GAA8B,OAAO,CAAC,KAAtC,GAA8C,IAA5D;AAEA;;;;;AAIA,OAAK,SAAL,GAAiB,SAAjB;AACF,CAnBF;AAqBE;;;;;;;AAKF,IAAA,CAAA,SAAA,CAAE,KAAF,GAAE,SAAA,KAAA,GAAQ;AACNA,MAAM,KAAK,GAAG,KAAK,QAAL,EAAdA;AACA,SAAO,IAAI,IAAJ,CAAS;AACd,IAAA,KAAK,EAAE,KAAK,CAAC,OAAN,CAAc,KAAd,IAAuB,KAAK,CAAC,KAAN,EAAvB,GAAuC,KAAK,IAAI;AADzC,GAAT,CAAP;AAGF,CALF;AAOE;;;;;;;AAKF,IAAA,CAAA,SAAA,CAAE,QAAF,GAAE,SAAA,QAAA,GAAW;AACT,SAAO,KAAK,MAAZ;AACF,CAFF;AAIE;;;;;;;;AAMF,IAAA,CAAA,SAAA,CAAE,QAAF,GAAE,SAAA,QAAA,CAAS,KAAT,EAAgB;AACd,OAAK,MAAL,GAAc,KAAd;AACA,OAAK,SAAL,GAAiB,SAAjB;AACF,CAHF;AAKE;;;;;AAGF,IAAA,CAAA,SAAA,CAAE,WAAF,GAAE,SAAA,WAAA,GAAc;AACZ,MAAI,KAAK,SAAL,KAAmB,SAAvB,EAAkC;AAChCA,QAAM,KAAK,GAAG,KAAK,MAAnBA;;AACA,QAAI,KAAJ,EAAW;AACT,UAAI,KAAK,CAAC,OAAN,CAAc,KAAd,KAAwB,OAAO,KAAP,IAAgB,QAA5C,EAAsD;AACpD,aAAK,SAAL,GAAiB,MAAM,QAAQ;AAAA;AAAoD,QAAA,KAApD,CAA/B;AACD,OAFD,MAEO;AACL,aAAK,SAAL,GAAiB,MAAM,CAAC,KAAK,MAAN,CAAvB;AACD;AACF,KAND,MAMO;AACL,WAAK,SAAL,GAAiB,IAAjB;AACD;AACF;;AAED,SAAO,KAAK,SAAZ;AACD,CAfH;;AAkBA,eAAe,IAAf","sourcesContent":["/**\n * @module ol/style/Fill\n */\nimport {getUid} from '../util.js';\nimport {asString} from '../color.js';\n\n\n/**\n * @typedef {Object} Options\n * @property {import(\"../color.js\").Color|import(\"../colorlike.js\").ColorLike} [color] A color, gradient or pattern.\n * See {@link module:ol/color~Color} and {@link module:ol/colorlike~ColorLike} for possible formats.\n * Default null; if null, the Canvas/renderer default black will be used.\n */\n\n\n/**\n * @classdesc\n * Set fill style for vector features.\n * @api\n */\nclass Fill {\n  /**\n   * @param {Options=} opt_options Options.\n   */\n  constructor(opt_options) {\n\n    const options = opt_options || {};\n\n    /**\n     * @private\n     * @type {import(\"../color.js\").Color|import(\"../colorlike.js\").ColorLike}\n     */\n    this.color_ = options.color !== undefined ? options.color : null;\n\n    /**\n     * @private\n     * @type {string|undefined}\n     */\n    this.checksum_ = undefined;\n  }\n\n  /**\n   * Clones the style. The color is not cloned if it is an {@link module:ol/colorlike~ColorLike}.\n   * @return {Fill} The cloned style.\n   * @api\n   */\n  clone() {\n    const color = this.getColor();\n    return new Fill({\n      color: Array.isArray(color) ? color.slice() : color || undefined\n    });\n  }\n\n  /**\n   * Get the fill color.\n   * @return {import(\"../color.js\").Color|import(\"../colorlike.js\").ColorLike} Color.\n   * @api\n   */\n  getColor() {\n    return this.color_;\n  }\n\n  /**\n   * Set the color.\n   *\n   * @param {import(\"../color.js\").Color|import(\"../colorlike.js\").ColorLike} color Color.\n   * @api\n   */\n  setColor(color) {\n    this.color_ = color;\n    this.checksum_ = undefined;\n  }\n\n  /**\n   * @return {string} The checksum.\n   */\n  getChecksum() {\n    if (this.checksum_ === undefined) {\n      const color = this.color_;\n      if (color) {\n        if (Array.isArray(color) || typeof color == 'string') {\n          this.checksum_ = 'f' + asString(/** @type {import(\"../color.js\").Color|string} */ (color));\n        } else {\n          this.checksum_ = getUid(this.color_);\n        }\n      } else {\n        this.checksum_ = 'f-';\n      }\n    }\n\n    return this.checksum_;\n  }\n}\n\nexport default Fill;\n"]},"metadata":{},"sourceType":"module"}