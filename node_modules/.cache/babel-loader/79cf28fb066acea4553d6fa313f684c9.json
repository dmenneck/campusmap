{"ast":null,"code":"/**\n * @module ol/reproj/Image\n */\nimport { ERROR_THRESHOLD } from './common.js';\nimport ImageBase from '../ImageBase.js';\nimport ImageState from '../ImageState.js';\nimport { listen, unlistenByKey } from '../events.js';\nimport EventType from '../events/EventType.js';\nimport { getCenter, getIntersection, getHeight, getWidth } from '../extent.js';\nimport { calculateSourceResolution, render as renderReprojected } from '../reproj.js';\nimport Triangulation from './Triangulation.js';\n/**\n * @typedef {function(import(\"../extent.js\").Extent, number, number) : import(\"../ImageBase.js\").default} FunctionType\n */\n\n/**\n * @classdesc\n * Class encapsulating single reprojected image.\n * See {@link module:ol/source/Image~ImageSource}.\n */\n\nvar ReprojImage =\n/*@__PURE__*/\nfunction (ImageBase) {\n  function ReprojImage(sourceProj, targetProj, targetExtent, targetResolution, pixelRatio, getImageFunction) {\n    var maxSourceExtent = sourceProj.getExtent();\n    var maxTargetExtent = targetProj.getExtent();\n    var limitedTargetExtent = maxTargetExtent ? getIntersection(targetExtent, maxTargetExtent) : targetExtent;\n    var targetCenter = getCenter(limitedTargetExtent);\n    var sourceResolution = calculateSourceResolution(sourceProj, targetProj, targetCenter, targetResolution);\n    var errorThresholdInPixels = ERROR_THRESHOLD;\n    var triangulation = new Triangulation(sourceProj, targetProj, limitedTargetExtent, maxSourceExtent, sourceResolution * errorThresholdInPixels);\n    var sourceExtent = triangulation.calculateSourceExtent();\n    var sourceImage = getImageFunction(sourceExtent, sourceResolution, pixelRatio);\n    var state = ImageState.LOADED;\n\n    if (sourceImage) {\n      state = ImageState.IDLE;\n    }\n\n    var sourcePixelRatio = sourceImage ? sourceImage.getPixelRatio() : 1;\n    ImageBase.call(this, targetExtent, targetResolution, sourcePixelRatio, state);\n    /**\n     * @private\n     * @type {import(\"../proj/Projection.js\").default}\n     */\n\n    this.targetProj_ = targetProj;\n    /**\n     * @private\n     * @type {import(\"../extent.js\").Extent}\n     */\n\n    this.maxSourceExtent_ = maxSourceExtent;\n    /**\n     * @private\n     * @type {!import(\"./Triangulation.js\").default}\n     */\n\n    this.triangulation_ = triangulation;\n    /**\n     * @private\n     * @type {number}\n     */\n\n    this.targetResolution_ = targetResolution;\n    /**\n     * @private\n     * @type {import(\"../extent.js\").Extent}\n     */\n\n    this.targetExtent_ = targetExtent;\n    /**\n     * @private\n     * @type {import(\"../ImageBase.js\").default}\n     */\n\n    this.sourceImage_ = sourceImage;\n    /**\n     * @private\n     * @type {number}\n     */\n\n    this.sourcePixelRatio_ = sourcePixelRatio;\n    /**\n     * @private\n     * @type {HTMLCanvasElement}\n     */\n\n    this.canvas_ = null;\n    /**\n     * @private\n     * @type {?import(\"../events.js\").EventsKey}\n     */\n\n    this.sourceListenerKey_ = null;\n  }\n\n  if (ImageBase) ReprojImage.__proto__ = ImageBase;\n  ReprojImage.prototype = Object.create(ImageBase && ImageBase.prototype);\n  ReprojImage.prototype.constructor = ReprojImage;\n  /**\n   * @inheritDoc\n   */\n\n  ReprojImage.prototype.disposeInternal = function disposeInternal() {\n    if (this.state == ImageState.LOADING) {\n      this.unlistenSource_();\n    }\n\n    ImageBase.prototype.disposeInternal.call(this);\n  };\n  /**\n   * @inheritDoc\n   */\n\n\n  ReprojImage.prototype.getImage = function getImage() {\n    return this.canvas_;\n  };\n  /**\n   * @return {import(\"../proj/Projection.js\").default} Projection.\n   */\n\n\n  ReprojImage.prototype.getProjection = function getProjection() {\n    return this.targetProj_;\n  };\n  /**\n   * @private\n   */\n\n\n  ReprojImage.prototype.reproject_ = function reproject_() {\n    var sourceState = this.sourceImage_.getState();\n\n    if (sourceState == ImageState.LOADED) {\n      var width = getWidth(this.targetExtent_) / this.targetResolution_;\n      var height = getHeight(this.targetExtent_) / this.targetResolution_;\n      this.canvas_ = renderReprojected(width, height, this.sourcePixelRatio_, this.sourceImage_.getResolution(), this.maxSourceExtent_, this.targetResolution_, this.targetExtent_, this.triangulation_, [{\n        extent: this.sourceImage_.getExtent(),\n        image: this.sourceImage_.getImage()\n      }], 0);\n    }\n\n    this.state = sourceState;\n    this.changed();\n  };\n  /**\n   * @inheritDoc\n   */\n\n\n  ReprojImage.prototype.load = function load() {\n    if (this.state == ImageState.IDLE) {\n      this.state = ImageState.LOADING;\n      this.changed();\n      var sourceState = this.sourceImage_.getState();\n\n      if (sourceState == ImageState.LOADED || sourceState == ImageState.ERROR) {\n        this.reproject_();\n      } else {\n        this.sourceListenerKey_ = listen(this.sourceImage_, EventType.CHANGE, function (e) {\n          var sourceState = this.sourceImage_.getState();\n\n          if (sourceState == ImageState.LOADED || sourceState == ImageState.ERROR) {\n            this.unlistenSource_();\n            this.reproject_();\n          }\n        }, this);\n        this.sourceImage_.load();\n      }\n    }\n  };\n  /**\n   * @private\n   */\n\n\n  ReprojImage.prototype.unlistenSource_ = function unlistenSource_() {\n    unlistenByKey(\n    /** @type {!import(\"../events.js\").EventsKey} */\n    this.sourceListenerKey_);\n    this.sourceListenerKey_ = null;\n  };\n\n  return ReprojImage;\n}(ImageBase);\n\nexport default ReprojImage;","map":{"version":3,"sources":["../../../src/ol/reproj/Image.js"],"names":["const","let","super"],"mappings":"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","sourcesContent":["/**\n * @module ol/reproj/Image\n */\nimport {ERROR_THRESHOLD} from './common.js';\n\nimport ImageBase from '../ImageBase.js';\nimport ImageState from '../ImageState.js';\nimport {listen, unlistenByKey} from '../events.js';\nimport EventType from '../events/EventType.js';\nimport {getCenter, getIntersection, getHeight, getWidth} from '../extent.js';\nimport {calculateSourceResolution, render as renderReprojected} from '../reproj.js';\nimport Triangulation from './Triangulation.js';\n\n\n/**\n * @typedef {function(import(\"../extent.js\").Extent, number, number) : import(\"../ImageBase.js\").default} FunctionType\n */\n\n\n/**\n * @classdesc\n * Class encapsulating single reprojected image.\n * See {@link module:ol/source/Image~ImageSource}.\n */\nclass ReprojImage extends ImageBase {\n  /**\n   * @param {import(\"../proj/Projection.js\").default} sourceProj Source projection (of the data).\n   * @param {import(\"../proj/Projection.js\").default} targetProj Target projection.\n   * @param {import(\"../extent.js\").Extent} targetExtent Target extent.\n   * @param {number} targetResolution Target resolution.\n   * @param {number} pixelRatio Pixel ratio.\n   * @param {FunctionType} getImageFunction\n   *     Function returning source images (extent, resolution, pixelRatio).\n   */\n  constructor(sourceProj, targetProj, targetExtent, targetResolution, pixelRatio, getImageFunction) {\n    const maxSourceExtent = sourceProj.getExtent();\n    const maxTargetExtent = targetProj.getExtent();\n\n    const limitedTargetExtent = maxTargetExtent ?\n      getIntersection(targetExtent, maxTargetExtent) : targetExtent;\n\n    const targetCenter = getCenter(limitedTargetExtent);\n    const sourceResolution = calculateSourceResolution(\n      sourceProj, targetProj, targetCenter, targetResolution);\n\n    const errorThresholdInPixels = ERROR_THRESHOLD;\n\n    const triangulation = new Triangulation(\n      sourceProj, targetProj, limitedTargetExtent, maxSourceExtent,\n      sourceResolution * errorThresholdInPixels);\n\n    const sourceExtent = triangulation.calculateSourceExtent();\n    const sourceImage = getImageFunction(sourceExtent, sourceResolution, pixelRatio);\n    let state = ImageState.LOADED;\n    if (sourceImage) {\n      state = ImageState.IDLE;\n    }\n    const sourcePixelRatio = sourceImage ? sourceImage.getPixelRatio() : 1;\n\n    super(targetExtent, targetResolution, sourcePixelRatio, state);\n\n    /**\n     * @private\n     * @type {import(\"../proj/Projection.js\").default}\n     */\n    this.targetProj_ = targetProj;\n\n    /**\n     * @private\n     * @type {import(\"../extent.js\").Extent}\n     */\n    this.maxSourceExtent_ = maxSourceExtent;\n\n    /**\n     * @private\n     * @type {!import(\"./Triangulation.js\").default}\n     */\n    this.triangulation_ = triangulation;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.targetResolution_ = targetResolution;\n\n    /**\n     * @private\n     * @type {import(\"../extent.js\").Extent}\n     */\n    this.targetExtent_ = targetExtent;\n\n    /**\n     * @private\n     * @type {import(\"../ImageBase.js\").default}\n     */\n    this.sourceImage_ = sourceImage;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.sourcePixelRatio_ = sourcePixelRatio;\n\n    /**\n     * @private\n     * @type {HTMLCanvasElement}\n     */\n    this.canvas_ = null;\n\n    /**\n     * @private\n     * @type {?import(\"../events.js\").EventsKey}\n     */\n    this.sourceListenerKey_ = null;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  disposeInternal() {\n    if (this.state == ImageState.LOADING) {\n      this.unlistenSource_();\n    }\n    super.disposeInternal();\n  }\n\n  /**\n   * @inheritDoc\n   */\n  getImage() {\n    return this.canvas_;\n  }\n\n  /**\n   * @return {import(\"../proj/Projection.js\").default} Projection.\n   */\n  getProjection() {\n    return this.targetProj_;\n  }\n\n  /**\n   * @private\n   */\n  reproject_() {\n    const sourceState = this.sourceImage_.getState();\n    if (sourceState == ImageState.LOADED) {\n      const width = getWidth(this.targetExtent_) / this.targetResolution_;\n      const height = getHeight(this.targetExtent_) / this.targetResolution_;\n\n      this.canvas_ = renderReprojected(width, height, this.sourcePixelRatio_,\n        this.sourceImage_.getResolution(), this.maxSourceExtent_,\n        this.targetResolution_, this.targetExtent_, this.triangulation_, [{\n          extent: this.sourceImage_.getExtent(),\n          image: this.sourceImage_.getImage()\n        }], 0);\n    }\n    this.state = sourceState;\n    this.changed();\n  }\n\n  /**\n   * @inheritDoc\n   */\n  load() {\n    if (this.state == ImageState.IDLE) {\n      this.state = ImageState.LOADING;\n      this.changed();\n\n      const sourceState = this.sourceImage_.getState();\n      if (sourceState == ImageState.LOADED || sourceState == ImageState.ERROR) {\n        this.reproject_();\n      } else {\n        this.sourceListenerKey_ = listen(this.sourceImage_,\n          EventType.CHANGE, function(e) {\n            const sourceState = this.sourceImage_.getState();\n            if (sourceState == ImageState.LOADED || sourceState == ImageState.ERROR) {\n              this.unlistenSource_();\n              this.reproject_();\n            }\n          }, this);\n        this.sourceImage_.load();\n      }\n    }\n  }\n\n  /**\n   * @private\n   */\n  unlistenSource_() {\n    unlistenByKey(/** @type {!import(\"../events.js\").EventsKey} */ (this.sourceListenerKey_));\n    this.sourceListenerKey_ = null;\n  }\n}\n\n\nexport default ReprojImage;\n"]},"metadata":{},"sourceType":"module"}