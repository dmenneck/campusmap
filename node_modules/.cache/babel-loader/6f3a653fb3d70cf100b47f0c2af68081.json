{"ast":null,"code":"/**\n * @module ol/source/Tile\n */\nimport { abstract } from '../util.js';\nimport TileCache from '../TileCache.js';\nimport TileState from '../TileState.js';\nimport Event from '../events/Event.js';\nimport { equivalent } from '../proj.js';\nimport { toSize, scale as scaleSize } from '../size.js';\nimport Source from './Source.js';\nimport { getKeyZXY, withinExtentAndZ } from '../tilecoord.js';\nimport { wrapX, getForProjection as getTileGridForProjection } from '../tilegrid.js';\n/**\n * @typedef {Object} Options\n * @property {import(\"./Source.js\").AttributionLike} [attributions]\n * @property {boolean} [attributionsCollapsible=true] Attributions are collapsible.\n * @property {number} [cacheSize]\n * @property {boolean} [opaque]\n * @property {number} [tilePixelRatio]\n * @property {import(\"../proj.js\").ProjectionLike} [projection]\n * @property {import(\"./State.js\").default} [state]\n * @property {import(\"../tilegrid/TileGrid.js\").default} [tileGrid]\n * @property {boolean} [wrapX=true]\n * @property {number} [transition]\n * @property {string} [key]\n */\n\n/**\n * @classdesc\n * Abstract base class; normally only used for creating subclasses and not\n * instantiated in apps.\n * Base class for sources providing images divided into a tile grid.\n * @abstract\n * @api\n */\n\nvar TileSource =\n/*@__PURE__*/\nfunction (Source) {\n  function TileSource(options) {\n    Source.call(this, {\n      attributions: options.attributions,\n      attributionsCollapsible: options.attributionsCollapsible,\n      projection: options.projection,\n      state: options.state,\n      wrapX: options.wrapX\n    });\n    /**\n     * @private\n     * @type {boolean}\n     */\n\n    this.opaque_ = options.opaque !== undefined ? options.opaque : false;\n    /**\n     * @private\n     * @type {number}\n     */\n\n    this.tilePixelRatio_ = options.tilePixelRatio !== undefined ? options.tilePixelRatio : 1;\n    /**\n     * @protected\n     * @type {import(\"../tilegrid/TileGrid.js\").default}\n     */\n\n    this.tileGrid = options.tileGrid !== undefined ? options.tileGrid : null;\n    /**\n     * @protected\n     * @type {import(\"../TileCache.js\").default}\n     */\n\n    this.tileCache = new TileCache(options.cacheSize);\n    /**\n     * @protected\n     * @type {import(\"../size.js\").Size}\n     */\n\n    this.tmpSize = [0, 0];\n    /**\n     * @private\n     * @type {string}\n     */\n\n    this.key_ = options.key || '';\n    /**\n     * @protected\n     * @type {import(\"../Tile.js\").Options}\n     */\n\n    this.tileOptions = {\n      transition: options.transition\n    };\n  }\n\n  if (Source) TileSource.__proto__ = Source;\n  TileSource.prototype = Object.create(Source && Source.prototype);\n  TileSource.prototype.constructor = TileSource;\n  /**\n   * @return {boolean} Can expire cache.\n   */\n\n  TileSource.prototype.canExpireCache = function canExpireCache() {\n    return this.tileCache.canExpireCache();\n  };\n  /**\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   * @param {!Object<string, import(\"../TileRange.js\").default>} usedTiles Used tiles.\n   */\n\n\n  TileSource.prototype.expireCache = function expireCache(projection, usedTiles) {\n    var tileCache = this.getTileCacheForProjection(projection);\n\n    if (tileCache) {\n      tileCache.expireCache(usedTiles);\n    }\n  };\n  /**\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   * @param {number} z Zoom level.\n   * @param {import(\"../TileRange.js\").default} tileRange Tile range.\n   * @param {function(import(\"../Tile.js\").default):(boolean|void)} callback Called with each\n   *     loaded tile.  If the callback returns `false`, the tile will not be\n   *     considered loaded.\n   * @return {boolean} The tile range is fully covered with loaded tiles.\n   */\n\n\n  TileSource.prototype.forEachLoadedTile = function forEachLoadedTile(projection, z, tileRange, callback) {\n    var tileCache = this.getTileCacheForProjection(projection);\n\n    if (!tileCache) {\n      return false;\n    }\n\n    var covered = true;\n    var tile, tileCoordKey, loaded;\n\n    for (var x = tileRange.minX; x <= tileRange.maxX; ++x) {\n      for (var y = tileRange.minY; y <= tileRange.maxY; ++y) {\n        tileCoordKey = getKeyZXY(z, x, y);\n        loaded = false;\n\n        if (tileCache.containsKey(tileCoordKey)) {\n          tile =\n          /** @type {!import(\"../Tile.js\").default} */\n          tileCache.get(tileCoordKey);\n          loaded = tile.getState() === TileState.LOADED;\n\n          if (loaded) {\n            loaded = callback(tile) !== false;\n          }\n        }\n\n        if (!loaded) {\n          covered = false;\n        }\n      }\n    }\n\n    return covered;\n  };\n  /**\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   * @return {number} Gutter.\n   */\n\n\n  TileSource.prototype.getGutterForProjection = function getGutterForProjection(projection) {\n    return 0;\n  };\n  /**\n   * Return the key to be used for all tiles in the source.\n   * @return {string} The key for all tiles.\n   * @protected\n   */\n\n\n  TileSource.prototype.getKey = function getKey() {\n    return this.key_;\n  };\n  /**\n   * Set the value to be used as the key for all tiles in the source.\n   * @param {string} key The key for tiles.\n   * @protected\n   */\n\n\n  TileSource.prototype.setKey = function setKey(key) {\n    if (this.key_ !== key) {\n      this.key_ = key;\n      this.changed();\n    }\n  };\n  /**\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   * @return {boolean} Opaque.\n   */\n\n\n  TileSource.prototype.getOpaque = function getOpaque(projection) {\n    return this.opaque_;\n  };\n  /**\n   * @inheritDoc\n   */\n\n\n  TileSource.prototype.getResolutions = function getResolutions() {\n    return this.tileGrid.getResolutions();\n  };\n  /**\n   * @abstract\n   * @param {number} z Tile coordinate z.\n   * @param {number} x Tile coordinate x.\n   * @param {number} y Tile coordinate y.\n   * @param {number} pixelRatio Pixel ratio.\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   * @return {!import(\"../Tile.js\").default} Tile.\n   */\n\n\n  TileSource.prototype.getTile = function getTile(z, x, y, pixelRatio, projection) {\n    return abstract();\n  };\n  /**\n   * Return the tile grid of the tile source.\n   * @return {import(\"../tilegrid/TileGrid.js\").default} Tile grid.\n   * @api\n   */\n\n\n  TileSource.prototype.getTileGrid = function getTileGrid() {\n    return this.tileGrid;\n  };\n  /**\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   * @return {!import(\"../tilegrid/TileGrid.js\").default} Tile grid.\n   */\n\n\n  TileSource.prototype.getTileGridForProjection = function getTileGridForProjection$1(projection) {\n    if (!this.tileGrid) {\n      return getTileGridForProjection(projection);\n    } else {\n      return this.tileGrid;\n    }\n  };\n  /**\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   * @return {import(\"../TileCache.js\").default} Tile cache.\n   * @protected\n   */\n\n\n  TileSource.prototype.getTileCacheForProjection = function getTileCacheForProjection(projection) {\n    var thisProj = this.getProjection();\n\n    if (thisProj && !equivalent(thisProj, projection)) {\n      return null;\n    } else {\n      return this.tileCache;\n    }\n  };\n  /**\n   * Get the tile pixel ratio for this source. Subclasses may override this\n   * method, which is meant to return a supported pixel ratio that matches the\n   * provided `pixelRatio` as close as possible.\n   * @param {number} pixelRatio Pixel ratio.\n   * @return {number} Tile pixel ratio.\n   */\n\n\n  TileSource.prototype.getTilePixelRatio = function getTilePixelRatio(pixelRatio) {\n    return this.tilePixelRatio_;\n  };\n  /**\n   * @param {number} z Z.\n   * @param {number} pixelRatio Pixel ratio.\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   * @return {import(\"../size.js\").Size} Tile size.\n   */\n\n\n  TileSource.prototype.getTilePixelSize = function getTilePixelSize(z, pixelRatio, projection) {\n    var tileGrid = this.getTileGridForProjection(projection);\n    var tilePixelRatio = this.getTilePixelRatio(pixelRatio);\n    var tileSize = toSize(tileGrid.getTileSize(z), this.tmpSize);\n\n    if (tilePixelRatio == 1) {\n      return tileSize;\n    } else {\n      return scaleSize(tileSize, tilePixelRatio, this.tmpSize);\n    }\n  };\n  /**\n   * Returns a tile coordinate wrapped around the x-axis. When the tile coordinate\n   * is outside the resolution and extent range of the tile grid, `null` will be\n   * returned.\n   * @param {import(\"../tilecoord.js\").TileCoord} tileCoord Tile coordinate.\n   * @param {import(\"../proj/Projection.js\").default=} opt_projection Projection.\n   * @return {import(\"../tilecoord.js\").TileCoord} Tile coordinate to be passed to the tileUrlFunction or\n   *     null if no tile URL should be created for the passed `tileCoord`.\n   */\n\n\n  TileSource.prototype.getTileCoordForTileUrlFunction = function getTileCoordForTileUrlFunction(tileCoord, opt_projection) {\n    var projection = opt_projection !== undefined ? opt_projection : this.getProjection();\n    var tileGrid = this.getTileGridForProjection(projection);\n\n    if (this.getWrapX() && projection.isGlobal()) {\n      tileCoord = wrapX(tileGrid, tileCoord, projection);\n    }\n\n    return withinExtentAndZ(tileCoord, tileGrid) ? tileCoord : null;\n  };\n  /**\n   * @inheritDoc\n   */\n\n\n  TileSource.prototype.refresh = function refresh() {\n    this.tileCache.clear();\n    this.changed();\n  };\n  /**\n   * Marks a tile coord as being used, without triggering a load.\n   * @abstract\n   * @param {number} z Tile coordinate z.\n   * @param {number} x Tile coordinate x.\n   * @param {number} y Tile coordinate y.\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   */\n\n\n  TileSource.prototype.useTile = function useTile(z, x, y, projection) {};\n\n  return TileSource;\n}(Source);\n/**\n * @classdesc\n * Events emitted by {@link module:ol/source/Tile~TileSource} instances are instances of this\n * type.\n */\n\n\nexport var TileSourceEvent =\n/*@__PURE__*/\nfunction (Event) {\n  function TileSourceEvent(type, tile) {\n    Event.call(this, type);\n    /**\n     * The tile related to the event.\n     * @type {import(\"../Tile.js\").default}\n     * @api\n     */\n\n    this.tile = tile;\n  }\n\n  if (Event) TileSourceEvent.__proto__ = Event;\n  TileSourceEvent.prototype = Object.create(Event && Event.prototype);\n  TileSourceEvent.prototype.constructor = TileSourceEvent;\n  return TileSourceEvent;\n}(Event);\nexport default TileSource;","map":{"version":3,"sources":["../../../src/ol/source/Tile.js"],"names":["super","const","let"],"mappings":"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","sourcesContent":["/**\n * @module ol/source/Tile\n */\nimport {abstract} from '../util.js';\nimport TileCache from '../TileCache.js';\nimport TileState from '../TileState.js';\nimport Event from '../events/Event.js';\nimport {equivalent} from '../proj.js';\nimport {toSize, scale as scaleSize} from '../size.js';\nimport Source from './Source.js';\nimport {getKeyZXY, withinExtentAndZ} from '../tilecoord.js';\nimport {wrapX, getForProjection as getTileGridForProjection} from '../tilegrid.js';\n\n/**\n * @typedef {Object} Options\n * @property {import(\"./Source.js\").AttributionLike} [attributions]\n * @property {boolean} [attributionsCollapsible=true] Attributions are collapsible.\n * @property {number} [cacheSize]\n * @property {boolean} [opaque]\n * @property {number} [tilePixelRatio]\n * @property {import(\"../proj.js\").ProjectionLike} [projection]\n * @property {import(\"./State.js\").default} [state]\n * @property {import(\"../tilegrid/TileGrid.js\").default} [tileGrid]\n * @property {boolean} [wrapX=true]\n * @property {number} [transition]\n * @property {string} [key]\n */\n\n\n/**\n * @classdesc\n * Abstract base class; normally only used for creating subclasses and not\n * instantiated in apps.\n * Base class for sources providing images divided into a tile grid.\n * @abstract\n * @api\n */\nclass TileSource extends Source {\n  /**\n   * @param {Options} options SourceTile source options.\n   */\n  constructor(options) {\n\n    super({\n      attributions: options.attributions,\n      attributionsCollapsible: options.attributionsCollapsible,\n      projection: options.projection,\n      state: options.state,\n      wrapX: options.wrapX\n    });\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.opaque_ = options.opaque !== undefined ? options.opaque : false;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.tilePixelRatio_ = options.tilePixelRatio !== undefined ?\n      options.tilePixelRatio : 1;\n\n    /**\n     * @protected\n     * @type {import(\"../tilegrid/TileGrid.js\").default}\n     */\n    this.tileGrid = options.tileGrid !== undefined ? options.tileGrid : null;\n\n    /**\n     * @protected\n     * @type {import(\"../TileCache.js\").default}\n     */\n    this.tileCache = new TileCache(options.cacheSize);\n\n    /**\n     * @protected\n     * @type {import(\"../size.js\").Size}\n     */\n    this.tmpSize = [0, 0];\n\n    /**\n     * @private\n     * @type {string}\n     */\n    this.key_ = options.key || '';\n\n    /**\n     * @protected\n     * @type {import(\"../Tile.js\").Options}\n     */\n    this.tileOptions = {transition: options.transition};\n\n  }\n\n  /**\n   * @return {boolean} Can expire cache.\n   */\n  canExpireCache() {\n    return this.tileCache.canExpireCache();\n  }\n\n  /**\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   * @param {!Object<string, import(\"../TileRange.js\").default>} usedTiles Used tiles.\n   */\n  expireCache(projection, usedTiles) {\n    const tileCache = this.getTileCacheForProjection(projection);\n    if (tileCache) {\n      tileCache.expireCache(usedTiles);\n    }\n  }\n\n  /**\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   * @param {number} z Zoom level.\n   * @param {import(\"../TileRange.js\").default} tileRange Tile range.\n   * @param {function(import(\"../Tile.js\").default):(boolean|void)} callback Called with each\n   *     loaded tile.  If the callback returns `false`, the tile will not be\n   *     considered loaded.\n   * @return {boolean} The tile range is fully covered with loaded tiles.\n   */\n  forEachLoadedTile(projection, z, tileRange, callback) {\n    const tileCache = this.getTileCacheForProjection(projection);\n    if (!tileCache) {\n      return false;\n    }\n\n    let covered = true;\n    let tile, tileCoordKey, loaded;\n    for (let x = tileRange.minX; x <= tileRange.maxX; ++x) {\n      for (let y = tileRange.minY; y <= tileRange.maxY; ++y) {\n        tileCoordKey = getKeyZXY(z, x, y);\n        loaded = false;\n        if (tileCache.containsKey(tileCoordKey)) {\n          tile = /** @type {!import(\"../Tile.js\").default} */ (tileCache.get(tileCoordKey));\n          loaded = tile.getState() === TileState.LOADED;\n          if (loaded) {\n            loaded = (callback(tile) !== false);\n          }\n        }\n        if (!loaded) {\n          covered = false;\n        }\n      }\n    }\n    return covered;\n  }\n\n  /**\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   * @return {number} Gutter.\n   */\n  getGutterForProjection(projection) {\n    return 0;\n  }\n\n  /**\n   * Return the key to be used for all tiles in the source.\n   * @return {string} The key for all tiles.\n   * @protected\n   */\n  getKey() {\n    return this.key_;\n  }\n\n  /**\n   * Set the value to be used as the key for all tiles in the source.\n   * @param {string} key The key for tiles.\n   * @protected\n   */\n  setKey(key) {\n    if (this.key_ !== key) {\n      this.key_ = key;\n      this.changed();\n    }\n  }\n\n  /**\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   * @return {boolean} Opaque.\n   */\n  getOpaque(projection) {\n    return this.opaque_;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  getResolutions() {\n    return this.tileGrid.getResolutions();\n  }\n\n  /**\n   * @abstract\n   * @param {number} z Tile coordinate z.\n   * @param {number} x Tile coordinate x.\n   * @param {number} y Tile coordinate y.\n   * @param {number} pixelRatio Pixel ratio.\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   * @return {!import(\"../Tile.js\").default} Tile.\n   */\n  getTile(z, x, y, pixelRatio, projection) {\n    return abstract();\n  }\n\n  /**\n   * Return the tile grid of the tile source.\n   * @return {import(\"../tilegrid/TileGrid.js\").default} Tile grid.\n   * @api\n   */\n  getTileGrid() {\n    return this.tileGrid;\n  }\n\n  /**\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   * @return {!import(\"../tilegrid/TileGrid.js\").default} Tile grid.\n   */\n  getTileGridForProjection(projection) {\n    if (!this.tileGrid) {\n      return getTileGridForProjection(projection);\n    } else {\n      return this.tileGrid;\n    }\n  }\n\n  /**\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   * @return {import(\"../TileCache.js\").default} Tile cache.\n   * @protected\n   */\n  getTileCacheForProjection(projection) {\n    const thisProj = this.getProjection();\n    if (thisProj && !equivalent(thisProj, projection)) {\n      return null;\n    } else {\n      return this.tileCache;\n    }\n  }\n\n  /**\n   * Get the tile pixel ratio for this source. Subclasses may override this\n   * method, which is meant to return a supported pixel ratio that matches the\n   * provided `pixelRatio` as close as possible.\n   * @param {number} pixelRatio Pixel ratio.\n   * @return {number} Tile pixel ratio.\n   */\n  getTilePixelRatio(pixelRatio) {\n    return this.tilePixelRatio_;\n  }\n\n  /**\n   * @param {number} z Z.\n   * @param {number} pixelRatio Pixel ratio.\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   * @return {import(\"../size.js\").Size} Tile size.\n   */\n  getTilePixelSize(z, pixelRatio, projection) {\n    const tileGrid = this.getTileGridForProjection(projection);\n    const tilePixelRatio = this.getTilePixelRatio(pixelRatio);\n    const tileSize = toSize(tileGrid.getTileSize(z), this.tmpSize);\n    if (tilePixelRatio == 1) {\n      return tileSize;\n    } else {\n      return scaleSize(tileSize, tilePixelRatio, this.tmpSize);\n    }\n  }\n\n  /**\n   * Returns a tile coordinate wrapped around the x-axis. When the tile coordinate\n   * is outside the resolution and extent range of the tile grid, `null` will be\n   * returned.\n   * @param {import(\"../tilecoord.js\").TileCoord} tileCoord Tile coordinate.\n   * @param {import(\"../proj/Projection.js\").default=} opt_projection Projection.\n   * @return {import(\"../tilecoord.js\").TileCoord} Tile coordinate to be passed to the tileUrlFunction or\n   *     null if no tile URL should be created for the passed `tileCoord`.\n   */\n  getTileCoordForTileUrlFunction(tileCoord, opt_projection) {\n    const projection = opt_projection !== undefined ?\n      opt_projection : this.getProjection();\n    const tileGrid = this.getTileGridForProjection(projection);\n    if (this.getWrapX() && projection.isGlobal()) {\n      tileCoord = wrapX(tileGrid, tileCoord, projection);\n    }\n    return withinExtentAndZ(tileCoord, tileGrid) ? tileCoord : null;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  refresh() {\n    this.tileCache.clear();\n    this.changed();\n  }\n\n  /**\n   * Marks a tile coord as being used, without triggering a load.\n   * @abstract\n   * @param {number} z Tile coordinate z.\n   * @param {number} x Tile coordinate x.\n   * @param {number} y Tile coordinate y.\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   */\n  useTile(z, x, y, projection) {}\n\n}\n\n\n/**\n * @classdesc\n * Events emitted by {@link module:ol/source/Tile~TileSource} instances are instances of this\n * type.\n */\nexport class TileSourceEvent extends Event {\n  /**\n   * @param {string} type Type.\n   * @param {import(\"../Tile.js\").default} tile The tile.\n   */\n  constructor(type, tile) {\n\n    super(type);\n\n    /**\n     * The tile related to the event.\n     * @type {import(\"../Tile.js\").default}\n     * @api\n     */\n    this.tile = tile;\n\n  }\n\n}\n\nexport default TileSource;\n"]},"metadata":{},"sourceType":"module"}