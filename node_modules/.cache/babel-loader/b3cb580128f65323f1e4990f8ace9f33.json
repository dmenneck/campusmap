{"ast":null,"code":"/**\n * @module ol/pointer/MouseSource\n */\n// Based on https://github.com/Polymer/PointerEvents\n// Copyright (c) 2013 The Polymer Authors. All rights reserved.\n//\n// Redistribution and use in source and binary forms, with or without\n// modification, are permitted provided that the following conditions are\n// met:\n//\n// * Redistributions of source code must retain the above copyright\n// notice, this list of conditions and the following disclaimer.\n// * Redistributions in binary form must reproduce the above\n// copyright notice, this list of conditions and the following disclaimer\n// in the documentation and/or other materials provided with the\n// distribution.\n// * Neither the name of Google Inc. nor the names of its\n// contributors may be used to endorse or promote products derived from\n// this software without specific prior written permission.\n//\n// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n// \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\nimport EventSource from './EventSource.js';\n/**\n * @type {number}\n */\n\nexport var POINTER_ID = 1;\n/**\n * @type {string}\n */\n\nexport var POINTER_TYPE = 'mouse';\n/**\n * Radius around touchend that swallows mouse events.\n *\n * @type {number}\n */\n\nvar DEDUP_DIST = 25;\n/**\n * Handler for `mousedown`.\n *\n * @this {MouseSource}\n * @param {MouseEvent} inEvent The in event.\n */\n\nfunction mousedown(inEvent) {\n  if (!this.isEventSimulatedFromTouch_(inEvent)) {\n    // TODO(dfreedman) workaround for some elements not sending mouseup\n    // http://crbug/149091\n    if (POINTER_ID.toString() in this.pointerMap) {\n      this.cancel(inEvent);\n    }\n\n    var e = prepareEvent(inEvent, this.dispatcher);\n    this.pointerMap[POINTER_ID.toString()] = inEvent;\n    this.dispatcher.down(e, inEvent);\n  }\n}\n/**\n * Handler for `mousemove`.\n *\n * @this {MouseSource}\n * @param {MouseEvent} inEvent The in event.\n */\n\n\nfunction mousemove(inEvent) {\n  if (!this.isEventSimulatedFromTouch_(inEvent)) {\n    var e = prepareEvent(inEvent, this.dispatcher);\n    this.dispatcher.move(e, inEvent);\n  }\n}\n/**\n * Handler for `mouseup`.\n *\n * @this {MouseSource}\n * @param {MouseEvent} inEvent The in event.\n */\n\n\nfunction mouseup(inEvent) {\n  if (!this.isEventSimulatedFromTouch_(inEvent)) {\n    var p = this.pointerMap[POINTER_ID.toString()];\n\n    if (p && p.button === inEvent.button) {\n      var e = prepareEvent(inEvent, this.dispatcher);\n      this.dispatcher.up(e, inEvent);\n      this.cleanupMouse();\n    }\n  }\n}\n/**\n * Handler for `mouseover`.\n *\n * @this {MouseSource}\n * @param {MouseEvent} inEvent The in event.\n */\n\n\nfunction mouseover(inEvent) {\n  if (!this.isEventSimulatedFromTouch_(inEvent)) {\n    var e = prepareEvent(inEvent, this.dispatcher);\n    this.dispatcher.enterOver(e, inEvent);\n  }\n}\n/**\n * Handler for `mouseout`.\n *\n * @this {MouseSource}\n * @param {MouseEvent} inEvent The in event.\n */\n\n\nfunction mouseout(inEvent) {\n  if (!this.isEventSimulatedFromTouch_(inEvent)) {\n    var e = prepareEvent(inEvent, this.dispatcher);\n    this.dispatcher.leaveOut(e, inEvent);\n  }\n}\n\nvar MouseSource =\n/*@__PURE__*/\nfunction (EventSource) {\n  function MouseSource(dispatcher) {\n    var mapping = {\n      'mousedown': mousedown,\n      'mousemove': mousemove,\n      'mouseup': mouseup,\n      'mouseover': mouseover,\n      'mouseout': mouseout\n    };\n    EventSource.call(this, dispatcher, mapping);\n    /**\n     * @const\n     * @type {!Object<string, Event|Object>}\n     */\n\n    this.pointerMap = dispatcher.pointerMap;\n    /**\n     * @const\n     * @type {Array<import(\"../pixel.js\").Pixel>}\n     */\n\n    this.lastTouches = [];\n  }\n\n  if (EventSource) MouseSource.__proto__ = EventSource;\n  MouseSource.prototype = Object.create(EventSource && EventSource.prototype);\n  MouseSource.prototype.constructor = MouseSource;\n  /**\n   * Detect if a mouse event was simulated from a touch by\n   * checking if previously there was a touch event at the\n   * same position.\n   *\n   * FIXME - Known problem with the native Android browser on\n   * Samsung GT-I9100 (Android 4.1.2):\n   * In case the page is scrolled, this function does not work\n   * correctly when a canvas is used (WebGL or canvas renderer).\n   * Mouse listeners on canvas elements (for this browser), create\n   * two mouse events: One 'good' and one 'bad' one (on other browsers or\n   * when a div is used, there is only one event). For the 'bad' one,\n   * clientX/clientY and also pageX/pageY are wrong when the page\n   * is scrolled. Because of that, this function can not detect if\n   * the events were simulated from a touch event. As result, a\n   * pointer event at a wrong position is dispatched, which confuses\n   * the map interactions.\n   * It is unclear, how one can get the correct position for the event\n   * or detect that the positions are invalid.\n   *\n   * @private\n   * @param {MouseEvent} inEvent The in event.\n   * @return {boolean} True, if the event was generated by a touch.\n   */\n\n  MouseSource.prototype.isEventSimulatedFromTouch_ = function isEventSimulatedFromTouch_(inEvent) {\n    var lts = this.lastTouches;\n    var x = inEvent.clientX;\n    var y = inEvent.clientY;\n\n    for (var i = 0, l = lts.length, t = void 0; i < l && (t = lts[i]); i++) {\n      // simulated mouse events will be swallowed near a primary touchend\n      var dx = Math.abs(x - t[0]);\n      var dy = Math.abs(y - t[1]);\n\n      if (dx <= DEDUP_DIST && dy <= DEDUP_DIST) {\n        return true;\n      }\n    }\n\n    return false;\n  };\n  /**\n   * Dispatches a `pointercancel` event.\n   *\n   * @param {Event} inEvent The in event.\n   */\n\n\n  MouseSource.prototype.cancel = function cancel(inEvent) {\n    var e = prepareEvent(inEvent, this.dispatcher);\n    this.dispatcher.cancel(e, inEvent);\n    this.cleanupMouse();\n  };\n  /**\n   * Remove the mouse from the list of active pointers.\n   */\n\n\n  MouseSource.prototype.cleanupMouse = function cleanupMouse() {\n    delete this.pointerMap[POINTER_ID.toString()];\n  };\n\n  return MouseSource;\n}(EventSource);\n/**\n * Creates a copy of the original event that will be used\n * for the fake pointer event.\n *\n * @param {Event} inEvent The in event.\n * @param {import(\"./PointerEventHandler.js\").default} dispatcher Event handler.\n * @return {Object} The copied event.\n */\n\n\nexport function prepareEvent(inEvent, dispatcher) {\n  var e = dispatcher.cloneEvent(inEvent, inEvent); // forward mouse preventDefault\n\n  var pd = e.preventDefault;\n\n  e.preventDefault = function () {\n    inEvent.preventDefault();\n    pd();\n  };\n\n  e.pointerId = POINTER_ID;\n  e.isPrimary = true;\n  e.pointerType = POINTER_TYPE;\n  return e;\n}\nexport default MouseSource;","map":{"version":3,"sources":["../../../src/ol/pointer/MouseSource.js"],"names":["const","super","let"],"mappings":"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","sourcesContent":["/**\n * @module ol/pointer/MouseSource\n */\n\n// Based on https://github.com/Polymer/PointerEvents\n\n// Copyright (c) 2013 The Polymer Authors. All rights reserved.\n//\n// Redistribution and use in source and binary forms, with or without\n// modification, are permitted provided that the following conditions are\n// met:\n//\n// * Redistributions of source code must retain the above copyright\n// notice, this list of conditions and the following disclaimer.\n// * Redistributions in binary form must reproduce the above\n// copyright notice, this list of conditions and the following disclaimer\n// in the documentation and/or other materials provided with the\n// distribution.\n// * Neither the name of Google Inc. nor the names of its\n// contributors may be used to endorse or promote products derived from\n// this software without specific prior written permission.\n//\n// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n// \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\nimport EventSource from './EventSource.js';\n\n\n/**\n * @type {number}\n */\nexport const POINTER_ID = 1;\n\n\n/**\n * @type {string}\n */\nexport const POINTER_TYPE = 'mouse';\n\n\n/**\n * Radius around touchend that swallows mouse events.\n *\n * @type {number}\n */\nconst DEDUP_DIST = 25;\n\n/**\n * Handler for `mousedown`.\n *\n * @this {MouseSource}\n * @param {MouseEvent} inEvent The in event.\n */\nfunction mousedown(inEvent) {\n  if (!this.isEventSimulatedFromTouch_(inEvent)) {\n    // TODO(dfreedman) workaround for some elements not sending mouseup\n    // http://crbug/149091\n    if (POINTER_ID.toString() in this.pointerMap) {\n      this.cancel(inEvent);\n    }\n    const e = prepareEvent(inEvent, this.dispatcher);\n    this.pointerMap[POINTER_ID.toString()] = inEvent;\n    this.dispatcher.down(e, inEvent);\n  }\n}\n\n/**\n * Handler for `mousemove`.\n *\n * @this {MouseSource}\n * @param {MouseEvent} inEvent The in event.\n */\nfunction mousemove(inEvent) {\n  if (!this.isEventSimulatedFromTouch_(inEvent)) {\n    const e = prepareEvent(inEvent, this.dispatcher);\n    this.dispatcher.move(e, inEvent);\n  }\n}\n\n/**\n * Handler for `mouseup`.\n *\n * @this {MouseSource}\n * @param {MouseEvent} inEvent The in event.\n */\nfunction mouseup(inEvent) {\n  if (!this.isEventSimulatedFromTouch_(inEvent)) {\n    const p = this.pointerMap[POINTER_ID.toString()];\n\n    if (p && p.button === inEvent.button) {\n      const e = prepareEvent(inEvent, this.dispatcher);\n      this.dispatcher.up(e, inEvent);\n      this.cleanupMouse();\n    }\n  }\n}\n\n/**\n * Handler for `mouseover`.\n *\n * @this {MouseSource}\n * @param {MouseEvent} inEvent The in event.\n */\nfunction mouseover(inEvent) {\n  if (!this.isEventSimulatedFromTouch_(inEvent)) {\n    const e = prepareEvent(inEvent, this.dispatcher);\n    this.dispatcher.enterOver(e, inEvent);\n  }\n}\n\n/**\n * Handler for `mouseout`.\n *\n * @this {MouseSource}\n * @param {MouseEvent} inEvent The in event.\n */\nfunction mouseout(inEvent) {\n  if (!this.isEventSimulatedFromTouch_(inEvent)) {\n    const e = prepareEvent(inEvent, this.dispatcher);\n    this.dispatcher.leaveOut(e, inEvent);\n  }\n}\n\n\nclass MouseSource extends EventSource {\n\n  /**\n   * @param {import(\"./PointerEventHandler.js\").default} dispatcher Event handler.\n   */\n  constructor(dispatcher) {\n    const mapping = {\n      'mousedown': mousedown,\n      'mousemove': mousemove,\n      'mouseup': mouseup,\n      'mouseover': mouseover,\n      'mouseout': mouseout\n    };\n    super(dispatcher, mapping);\n\n    /**\n     * @const\n     * @type {!Object<string, Event|Object>}\n     */\n    this.pointerMap = dispatcher.pointerMap;\n\n    /**\n     * @const\n     * @type {Array<import(\"../pixel.js\").Pixel>}\n     */\n    this.lastTouches = [];\n  }\n\n  /**\n   * Detect if a mouse event was simulated from a touch by\n   * checking if previously there was a touch event at the\n   * same position.\n   *\n   * FIXME - Known problem with the native Android browser on\n   * Samsung GT-I9100 (Android 4.1.2):\n   * In case the page is scrolled, this function does not work\n   * correctly when a canvas is used (WebGL or canvas renderer).\n   * Mouse listeners on canvas elements (for this browser), create\n   * two mouse events: One 'good' and one 'bad' one (on other browsers or\n   * when a div is used, there is only one event). For the 'bad' one,\n   * clientX/clientY and also pageX/pageY are wrong when the page\n   * is scrolled. Because of that, this function can not detect if\n   * the events were simulated from a touch event. As result, a\n   * pointer event at a wrong position is dispatched, which confuses\n   * the map interactions.\n   * It is unclear, how one can get the correct position for the event\n   * or detect that the positions are invalid.\n   *\n   * @private\n   * @param {MouseEvent} inEvent The in event.\n   * @return {boolean} True, if the event was generated by a touch.\n   */\n  isEventSimulatedFromTouch_(inEvent) {\n    const lts = this.lastTouches;\n    const x = inEvent.clientX;\n    const y = inEvent.clientY;\n    for (let i = 0, l = lts.length, t; i < l && (t = lts[i]); i++) {\n      // simulated mouse events will be swallowed near a primary touchend\n      const dx = Math.abs(x - t[0]);\n      const dy = Math.abs(y - t[1]);\n      if (dx <= DEDUP_DIST && dy <= DEDUP_DIST) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  /**\n   * Dispatches a `pointercancel` event.\n   *\n   * @param {Event} inEvent The in event.\n   */\n  cancel(inEvent) {\n    const e = prepareEvent(inEvent, this.dispatcher);\n    this.dispatcher.cancel(e, inEvent);\n    this.cleanupMouse();\n  }\n\n  /**\n   * Remove the mouse from the list of active pointers.\n   */\n  cleanupMouse() {\n    delete this.pointerMap[POINTER_ID.toString()];\n  }\n}\n\n\n/**\n * Creates a copy of the original event that will be used\n * for the fake pointer event.\n *\n * @param {Event} inEvent The in event.\n * @param {import(\"./PointerEventHandler.js\").default} dispatcher Event handler.\n * @return {Object} The copied event.\n */\nexport function prepareEvent(inEvent, dispatcher) {\n  const e = dispatcher.cloneEvent(inEvent, inEvent);\n\n  // forward mouse preventDefault\n  const pd = e.preventDefault;\n  e.preventDefault = function() {\n    inEvent.preventDefault();\n    pd();\n  };\n\n  e.pointerId = POINTER_ID;\n  e.isPrimary = true;\n  e.pointerType = POINTER_TYPE;\n\n  return e;\n}\n\n\nexport default MouseSource;\n"]},"metadata":{},"sourceType":"module"}