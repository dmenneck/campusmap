{"ast":null,"code":"/**\n * @module ol/style/IconImage\n */\nimport { inherits } from '../util.js';\nimport { createCanvasContext2D } from '../dom.js';\nimport { listenOnce, unlistenByKey } from '../events.js';\nimport EventTarget from '../events/EventTarget.js';\nimport EventType from '../events/EventType.js';\nimport ImageState from '../ImageState.js';\nimport { shared as iconImageCache } from '../style/IconImageCache.js';\n/**\n * @constructor\n * @param {Image|HTMLCanvasElement} image Image.\n * @param {string|undefined} src Src.\n * @param {module:ol/size~Size} size Size.\n * @param {?string} crossOrigin Cross origin.\n * @param {module:ol/ImageState} imageState Image state.\n * @param {module:ol/color~Color} color Color.\n * @extends {module:ol/events/EventTarget}\n */\n\nconst IconImage = function (image, src, size, crossOrigin, imageState, color) {\n  EventTarget.call(this);\n  /**\n   * @private\n   * @type {Image|HTMLCanvasElement}\n   */\n\n  this.hitDetectionImage_ = null;\n  /**\n   * @private\n   * @type {Image|HTMLCanvasElement}\n   */\n\n  this.image_ = !image ? new Image() : image;\n\n  if (crossOrigin !== null) {\n    this.image_.crossOrigin = crossOrigin;\n  }\n  /**\n   * @private\n   * @type {HTMLCanvasElement}\n   */\n\n\n  this.canvas_ = color ?\n  /** @type {HTMLCanvasElement} */\n  document.createElement('CANVAS') : null;\n  /**\n   * @private\n   * @type {module:ol/color~Color}\n   */\n\n  this.color_ = color;\n  /**\n   * @private\n   * @type {Array.<module:ol/events~EventsKey>}\n   */\n\n  this.imageListenerKeys_ = null;\n  /**\n   * @private\n   * @type {module:ol/ImageState}\n   */\n\n  this.imageState_ = imageState;\n  /**\n   * @private\n   * @type {module:ol/size~Size}\n   */\n\n  this.size_ = size;\n  /**\n   * @private\n   * @type {string|undefined}\n   */\n\n  this.src_ = src;\n  /**\n   * @private\n   * @type {boolean}\n   */\n\n  this.tainting_ = false;\n\n  if (this.imageState_ == ImageState.LOADED) {\n    this.determineTainting_();\n  }\n};\n\ninherits(IconImage, EventTarget);\n/**\n * @param {Image|HTMLCanvasElement} image Image.\n * @param {string} src Src.\n * @param {module:ol/size~Size} size Size.\n * @param {?string} crossOrigin Cross origin.\n * @param {module:ol/ImageState} imageState Image state.\n * @param {module:ol/color~Color} color Color.\n * @return {module:ol/style/IconImage} Icon image.\n */\n\nexport function get(image, src, size, crossOrigin, imageState, color) {\n  let iconImage = iconImageCache.get(src, crossOrigin, color);\n\n  if (!iconImage) {\n    iconImage = new IconImage(image, src, size, crossOrigin, imageState, color);\n    iconImageCache.set(src, crossOrigin, color, iconImage);\n  }\n\n  return iconImage;\n}\n/**\n * @private\n */\n\nIconImage.prototype.determineTainting_ = function () {\n  const context = createCanvasContext2D(1, 1);\n\n  try {\n    context.drawImage(this.image_, 0, 0);\n    context.getImageData(0, 0, 1, 1);\n  } catch (e) {\n    this.tainting_ = true;\n  }\n};\n/**\n * @private\n */\n\n\nIconImage.prototype.dispatchChangeEvent_ = function () {\n  this.dispatchEvent(EventType.CHANGE);\n};\n/**\n * @private\n */\n\n\nIconImage.prototype.handleImageError_ = function () {\n  this.imageState_ = ImageState.ERROR;\n  this.unlistenImage_();\n  this.dispatchChangeEvent_();\n};\n/**\n * @private\n */\n\n\nIconImage.prototype.handleImageLoad_ = function () {\n  this.imageState_ = ImageState.LOADED;\n\n  if (this.size_) {\n    this.image_.width = this.size_[0];\n    this.image_.height = this.size_[1];\n  }\n\n  this.size_ = [this.image_.width, this.image_.height];\n  this.unlistenImage_();\n  this.determineTainting_();\n  this.replaceColor_();\n  this.dispatchChangeEvent_();\n};\n/**\n * @param {number} pixelRatio Pixel ratio.\n * @return {Image|HTMLCanvasElement} Image or Canvas element.\n */\n\n\nIconImage.prototype.getImage = function (pixelRatio) {\n  return this.canvas_ ? this.canvas_ : this.image_;\n};\n/**\n * @return {module:ol/ImageState} Image state.\n */\n\n\nIconImage.prototype.getImageState = function () {\n  return this.imageState_;\n};\n/**\n * @param {number} pixelRatio Pixel ratio.\n * @return {Image|HTMLCanvasElement} Image element.\n */\n\n\nIconImage.prototype.getHitDetectionImage = function (pixelRatio) {\n  if (!this.hitDetectionImage_) {\n    if (this.tainting_) {\n      const width = this.size_[0];\n      const height = this.size_[1];\n      const context = createCanvasContext2D(width, height);\n      context.fillRect(0, 0, width, height);\n      this.hitDetectionImage_ = context.canvas;\n    } else {\n      this.hitDetectionImage_ = this.image_;\n    }\n  }\n\n  return this.hitDetectionImage_;\n};\n/**\n * @return {module:ol/size~Size} Image size.\n */\n\n\nIconImage.prototype.getSize = function () {\n  return this.size_;\n};\n/**\n * @return {string|undefined} Image src.\n */\n\n\nIconImage.prototype.getSrc = function () {\n  return this.src_;\n};\n/**\n * Load not yet loaded URI.\n */\n\n\nIconImage.prototype.load = function () {\n  if (this.imageState_ == ImageState.IDLE) {\n    this.imageState_ = ImageState.LOADING;\n    this.imageListenerKeys_ = [listenOnce(this.image_, EventType.ERROR, this.handleImageError_, this), listenOnce(this.image_, EventType.LOAD, this.handleImageLoad_, this)];\n\n    try {\n      this.image_.src = this.src_;\n    } catch (e) {\n      this.handleImageError_();\n    }\n  }\n};\n/**\n * @private\n */\n\n\nIconImage.prototype.replaceColor_ = function () {\n  if (this.tainting_ || this.color_ === null) {\n    return;\n  }\n\n  this.canvas_.width = this.image_.width;\n  this.canvas_.height = this.image_.height;\n  const ctx = this.canvas_.getContext('2d');\n  ctx.drawImage(this.image_, 0, 0);\n  const imgData = ctx.getImageData(0, 0, this.image_.width, this.image_.height);\n  const data = imgData.data;\n  const r = this.color_[0] / 255.0;\n  const g = this.color_[1] / 255.0;\n  const b = this.color_[2] / 255.0;\n\n  for (let i = 0, ii = data.length; i < ii; i += 4) {\n    data[i] *= r;\n    data[i + 1] *= g;\n    data[i + 2] *= b;\n  }\n\n  ctx.putImageData(imgData, 0, 0);\n};\n/**\n * Discards event handlers which listen for load completion or errors.\n *\n * @private\n */\n\n\nIconImage.prototype.unlistenImage_ = function () {\n  this.imageListenerKeys_.forEach(unlistenByKey);\n  this.imageListenerKeys_ = null;\n};\n\nexport default IconImage;","map":null,"metadata":{},"sourceType":"module"}