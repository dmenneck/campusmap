{"ast":null,"code":"/**\n * @module ol/pointer/TouchSource\n */\n// Based on https://github.com/Polymer/PointerEvents\n// Copyright (c) 2013 The Polymer Authors. All rights reserved.\n//\n// Redistribution and use in source and binary forms, with or without\n// modification, are permitted provided that the following conditions are\n// met:\n//\n// * Redistributions of source code must retain the above copyright\n// notice, this list of conditions and the following disclaimer.\n// * Redistributions in binary form must reproduce the above\n// copyright notice, this list of conditions and the following disclaimer\n// in the documentation and/or other materials provided with the\n// distribution.\n// * Neither the name of Google Inc. nor the names of its\n// contributors may be used to endorse or promote products derived from\n// this software without specific prior written permission.\n//\n// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n// \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\nimport { inherits } from '../util.js';\nimport { remove } from '../array.js';\nimport EventSource from '../pointer/EventSource.js';\nimport { POINTER_ID } from '../pointer/MouseSource.js';\n/**\n * @constructor\n * @param {module:ol/pointer/PointerEventHandler} dispatcher The event handler.\n * @param {module:ol/pointer/MouseSource} mouseSource Mouse source.\n * @extends {module:ol/pointer/EventSource}\n */\n\nconst TouchSource = function (dispatcher, mouseSource) {\n  const mapping = {\n    'touchstart': this.touchstart,\n    'touchmove': this.touchmove,\n    'touchend': this.touchend,\n    'touchcancel': this.touchcancel\n  };\n  EventSource.call(this, dispatcher, mapping);\n  /**\n   * @const\n   * @type {!Object.<string, Event|Object>}\n   */\n\n  this.pointerMap = dispatcher.pointerMap;\n  /**\n   * @const\n   * @type {module:ol/pointer/MouseSource}\n   */\n\n  this.mouseSource = mouseSource;\n  /**\n   * @private\n   * @type {number|undefined}\n   */\n\n  this.firstTouchId_ = undefined;\n  /**\n   * @private\n   * @type {number}\n   */\n\n  this.clickCount_ = 0;\n  /**\n   * @private\n   * @type {number|undefined}\n   */\n\n  this.resetId_ = undefined;\n  /**\n   * Mouse event timeout: This should be long enough to\n   * ignore compat mouse events made by touch.\n   * @private\n   * @type {number}\n   */\n\n  this.dedupTimeout_ = 2500;\n};\n\ninherits(TouchSource, EventSource);\n/**\n * @type {number}\n */\n\nconst CLICK_COUNT_TIMEOUT = 200;\n/**\n * @type {string}\n */\n\nconst POINTER_TYPE = 'touch';\n/**\n * @private\n * @param {Touch} inTouch The in touch.\n * @return {boolean} True, if this is the primary touch.\n */\n\nTouchSource.prototype.isPrimaryTouch_ = function (inTouch) {\n  return this.firstTouchId_ === inTouch.identifier;\n};\n/**\n * Set primary touch if there are no pointers, or the only pointer is the mouse.\n * @param {Touch} inTouch The in touch.\n * @private\n */\n\n\nTouchSource.prototype.setPrimaryTouch_ = function (inTouch) {\n  const count = Object.keys(this.pointerMap).length;\n\n  if (count === 0 || count === 1 && POINTER_ID.toString() in this.pointerMap) {\n    this.firstTouchId_ = inTouch.identifier;\n    this.cancelResetClickCount_();\n  }\n};\n/**\n * @private\n * @param {Object} inPointer The in pointer object.\n */\n\n\nTouchSource.prototype.removePrimaryPointer_ = function (inPointer) {\n  if (inPointer.isPrimary) {\n    this.firstTouchId_ = undefined;\n    this.resetClickCount_();\n  }\n};\n/**\n * @private\n */\n\n\nTouchSource.prototype.resetClickCount_ = function () {\n  this.resetId_ = setTimeout(this.resetClickCountHandler_.bind(this), CLICK_COUNT_TIMEOUT);\n};\n/**\n * @private\n */\n\n\nTouchSource.prototype.resetClickCountHandler_ = function () {\n  this.clickCount_ = 0;\n  this.resetId_ = undefined;\n};\n/**\n * @private\n */\n\n\nTouchSource.prototype.cancelResetClickCount_ = function () {\n  if (this.resetId_ !== undefined) {\n    clearTimeout(this.resetId_);\n  }\n};\n/**\n * @private\n * @param {Event} browserEvent Browser event\n * @param {Touch} inTouch Touch event\n * @return {Object} A pointer object.\n */\n\n\nTouchSource.prototype.touchToPointer_ = function (browserEvent, inTouch) {\n  const e = this.dispatcher.cloneEvent(browserEvent, inTouch); // Spec specifies that pointerId 1 is reserved for Mouse.\n  // Touch identifiers can start at 0.\n  // Add 2 to the touch identifier for compatibility.\n\n  e.pointerId = inTouch.identifier + 2; // TODO: check if this is necessary?\n  //e.target = findTarget(e);\n\n  e.bubbles = true;\n  e.cancelable = true;\n  e.detail = this.clickCount_;\n  e.button = 0;\n  e.buttons = 1;\n  e.width = inTouch.webkitRadiusX || inTouch.radiusX || 0;\n  e.height = inTouch.webkitRadiusY || inTouch.radiusY || 0;\n  e.pressure = inTouch.webkitForce || inTouch.force || 0.5;\n  e.isPrimary = this.isPrimaryTouch_(inTouch);\n  e.pointerType = POINTER_TYPE; // make sure that the properties that are different for\n  // each `Touch` object are not copied from the BrowserEvent object\n\n  e.clientX = inTouch.clientX;\n  e.clientY = inTouch.clientY;\n  e.screenX = inTouch.screenX;\n  e.screenY = inTouch.screenY;\n  return e;\n};\n/**\n * @private\n * @param {Event} inEvent Touch event\n * @param {function(Event, Object)} inFunction In function.\n */\n\n\nTouchSource.prototype.processTouches_ = function (inEvent, inFunction) {\n  const touches = Array.prototype.slice.call(inEvent.changedTouches);\n  const count = touches.length;\n\n  function preventDefault() {\n    inEvent.preventDefault();\n  }\n\n  for (let i = 0; i < count; ++i) {\n    const pointer = this.touchToPointer_(inEvent, touches[i]); // forward touch preventDefaults\n\n    pointer.preventDefault = preventDefault;\n    inFunction.call(this, inEvent, pointer);\n  }\n};\n/**\n * @private\n * @param {TouchList} touchList The touch list.\n * @param {number} searchId Search identifier.\n * @return {boolean} True, if the `Touch` with the given id is in the list.\n */\n\n\nTouchSource.prototype.findTouch_ = function (touchList, searchId) {\n  const l = touchList.length;\n\n  for (let i = 0; i < l; i++) {\n    const touch = touchList[i];\n\n    if (touch.identifier === searchId) {\n      return true;\n    }\n  }\n\n  return false;\n};\n/**\n * In some instances, a touchstart can happen without a touchend. This\n * leaves the pointermap in a broken state.\n * Therefore, on every touchstart, we remove the touches that did not fire a\n * touchend event.\n * To keep state globally consistent, we fire a pointercancel for\n * this \"abandoned\" touch\n *\n * @private\n * @param {Event} inEvent The in event.\n */\n\n\nTouchSource.prototype.vacuumTouches_ = function (inEvent) {\n  const touchList = inEvent.touches; // pointerMap.getCount() should be < touchList.length here,\n  // as the touchstart has not been processed yet.\n\n  const keys = Object.keys(this.pointerMap);\n  const count = keys.length;\n\n  if (count >= touchList.length) {\n    const d = [];\n\n    for (let i = 0; i < count; ++i) {\n      const key = keys[i];\n      const value = this.pointerMap[key]; // Never remove pointerId == 1, which is mouse.\n      // Touch identifiers are 2 smaller than their pointerId, which is the\n      // index in pointermap.\n\n      if (key != POINTER_ID && !this.findTouch_(touchList, key - 2)) {\n        d.push(value.out);\n      }\n    }\n\n    for (let i = 0; i < d.length; ++i) {\n      this.cancelOut_(inEvent, d[i]);\n    }\n  }\n};\n/**\n * Handler for `touchstart`, triggers `pointerover`,\n * `pointerenter` and `pointerdown` events.\n *\n * @param {Event} inEvent The in event.\n */\n\n\nTouchSource.prototype.touchstart = function (inEvent) {\n  this.vacuumTouches_(inEvent);\n  this.setPrimaryTouch_(inEvent.changedTouches[0]);\n  this.dedupSynthMouse_(inEvent);\n  this.clickCount_++;\n  this.processTouches_(inEvent, this.overDown_);\n};\n/**\n * @private\n * @param {Event} browserEvent The event.\n * @param {Object} inPointer The in pointer object.\n */\n\n\nTouchSource.prototype.overDown_ = function (browserEvent, inPointer) {\n  this.pointerMap[inPointer.pointerId] = {\n    target: inPointer.target,\n    out: inPointer,\n    outTarget: inPointer.target\n  };\n  this.dispatcher.over(inPointer, browserEvent);\n  this.dispatcher.enter(inPointer, browserEvent);\n  this.dispatcher.down(inPointer, browserEvent);\n};\n/**\n * Handler for `touchmove`.\n *\n * @param {Event} inEvent The in event.\n */\n\n\nTouchSource.prototype.touchmove = function (inEvent) {\n  inEvent.preventDefault();\n  this.processTouches_(inEvent, this.moveOverOut_);\n};\n/**\n * @private\n * @param {Event} browserEvent The event.\n * @param {Object} inPointer The in pointer.\n */\n\n\nTouchSource.prototype.moveOverOut_ = function (browserEvent, inPointer) {\n  const event = inPointer;\n  const pointer = this.pointerMap[event.pointerId]; // a finger drifted off the screen, ignore it\n\n  if (!pointer) {\n    return;\n  }\n\n  const outEvent = pointer.out;\n  const outTarget = pointer.outTarget;\n  this.dispatcher.move(event, browserEvent);\n\n  if (outEvent && outTarget !== event.target) {\n    outEvent.relatedTarget = event.target;\n    event.relatedTarget = outTarget; // recover from retargeting by shadow\n\n    outEvent.target = outTarget;\n\n    if (event.target) {\n      this.dispatcher.leaveOut(outEvent, browserEvent);\n      this.dispatcher.enterOver(event, browserEvent);\n    } else {\n      // clean up case when finger leaves the screen\n      event.target = outTarget;\n      event.relatedTarget = null;\n      this.cancelOut_(browserEvent, event);\n    }\n  }\n\n  pointer.out = event;\n  pointer.outTarget = event.target;\n};\n/**\n * Handler for `touchend`, triggers `pointerup`,\n * `pointerout` and `pointerleave` events.\n *\n * @param {Event} inEvent The event.\n */\n\n\nTouchSource.prototype.touchend = function (inEvent) {\n  this.dedupSynthMouse_(inEvent);\n  this.processTouches_(inEvent, this.upOut_);\n};\n/**\n * @private\n * @param {Event} browserEvent An event.\n * @param {Object} inPointer The inPointer object.\n */\n\n\nTouchSource.prototype.upOut_ = function (browserEvent, inPointer) {\n  this.dispatcher.up(inPointer, browserEvent);\n  this.dispatcher.out(inPointer, browserEvent);\n  this.dispatcher.leave(inPointer, browserEvent);\n  this.cleanUpPointer_(inPointer);\n};\n/**\n * Handler for `touchcancel`, triggers `pointercancel`,\n * `pointerout` and `pointerleave` events.\n *\n * @param {Event} inEvent The in event.\n */\n\n\nTouchSource.prototype.touchcancel = function (inEvent) {\n  this.processTouches_(inEvent, this.cancelOut_);\n};\n/**\n * @private\n * @param {Event} browserEvent The event.\n * @param {Object} inPointer The in pointer.\n */\n\n\nTouchSource.prototype.cancelOut_ = function (browserEvent, inPointer) {\n  this.dispatcher.cancel(inPointer, browserEvent);\n  this.dispatcher.out(inPointer, browserEvent);\n  this.dispatcher.leave(inPointer, browserEvent);\n  this.cleanUpPointer_(inPointer);\n};\n/**\n * @private\n * @param {Object} inPointer The inPointer object.\n */\n\n\nTouchSource.prototype.cleanUpPointer_ = function (inPointer) {\n  delete this.pointerMap[inPointer.pointerId];\n  this.removePrimaryPointer_(inPointer);\n};\n/**\n * Prevent synth mouse events from creating pointer events.\n *\n * @private\n * @param {Event} inEvent The in event.\n */\n\n\nTouchSource.prototype.dedupSynthMouse_ = function (inEvent) {\n  const lts = this.mouseSource.lastTouches;\n  const t = inEvent.changedTouches[0]; // only the primary finger will synth mouse events\n\n  if (this.isPrimaryTouch_(t)) {\n    // remember x/y of last touch\n    const lt = [t.clientX, t.clientY];\n    lts.push(lt);\n    setTimeout(function () {\n      // remove touch after timeout\n      remove(lts, lt);\n    }, this.dedupTimeout_);\n  }\n};\n\nexport default TouchSource;","map":null,"metadata":{},"sourceType":"module"}