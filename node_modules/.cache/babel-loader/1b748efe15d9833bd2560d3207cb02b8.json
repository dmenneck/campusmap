{"ast":null,"code":"/**\n * @module ol/loadingstrategy\n */\n\n/**\n * Strategy function for loading all features with a single request.\n * @param {import(\"./extent.js\").Extent} extent Extent.\n * @param {number} resolution Resolution.\n * @return {Array<import(\"./extent.js\").Extent>} Extents.\n * @api\n */\nexport function all(extent, resolution) {\n  return [[-Infinity, -Infinity, Infinity, Infinity]];\n}\n/**\n * Strategy function for loading features based on the view's extent and\n * resolution.\n * @param {import(\"./extent.js\").Extent} extent Extent.\n * @param {number} resolution Resolution.\n * @return {Array<import(\"./extent.js\").Extent>} Extents.\n * @api\n */\n\nexport function bbox(extent, resolution) {\n  return [extent];\n}\n/**\n * Creates a strategy function for loading features based on a tile grid.\n * @param {import(\"./tilegrid/TileGrid.js\").default} tileGrid Tile grid.\n * @return {function(import(\"./extent.js\").Extent, number): Array<import(\"./extent.js\").Extent>} Loading strategy.\n * @api\n */\n\nexport function tile(tileGrid) {\n  return (\n    /**\n     * @param {import(\"./extent.js\").Extent} extent Extent.\n     * @param {number} resolution Resolution.\n     * @return {Array<import(\"./extent.js\").Extent>} Extents.\n     */\n    function (extent, resolution) {\n      var z = tileGrid.getZForResolution(resolution);\n      var tileRange = tileGrid.getTileRangeForExtentAndZ(extent, z);\n      /** @type {Array<import(\"./extent.js\").Extent>} */\n\n      var extents = [];\n      /** @type {import(\"./tilecoord.js\").TileCoord} */\n\n      var tileCoord = [z, 0, 0];\n\n      for (tileCoord[1] = tileRange.minX; tileCoord[1] <= tileRange.maxX; ++tileCoord[1]) {\n        for (tileCoord[2] = tileRange.minY; tileCoord[2] <= tileRange.maxY; ++tileCoord[2]) {\n          extents.push(tileGrid.getTileCoordExtent(tileCoord));\n        }\n      }\n\n      return extents;\n    }\n  );\n}","map":{"version":3,"sources":["../../src/ol/loadingstrategy.js"],"names":["const"],"mappings":"AAAA;;;;;;;;;;;AAYA,OAAO,SAAS,GAAT,CAAa,MAAb,EAAqB,UAArB,EAAiC;AACtC,SAAO,CAAC,CAAC,CAAC,QAAF,EAAY,CAAC,QAAb,EAAuB,QAAvB,EAAiC,QAAjC,CAAD,CAAP;AACD;;;;;;;;;;AAWD,OAAO,SAAS,IAAT,CAAc,MAAd,EAAsB,UAAtB,EAAkC;AACvC,SAAO,CAAC,MAAD,CAAP;AACD;;;;;;;;AASD,OAAO,SAAS,IAAT,CAAc,QAAd,EAAwB;AAC7B;;;;;;AAME,cAAS,MAAT,EAAiB,UAAjB,EAA6B;AAC3BA,UAAM,CAAC,GAAG,QAAQ,CAAC,iBAAT,CAA2B,UAA3B,CAAVA;AACAA,UAAM,SAAS,GAAG,QAAQ,CAAC,yBAAT,CAAmC,MAAnC,EAA2C,CAA3C,CAAlBA;;;AAEAA,UAAM,OAAO,GAAG,EAAhBA;;;AAEAA,UAAM,SAAS,GAAG,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAAlBA;;AACA,WAAK,SAAS,CAAC,CAAD,CAAT,GAAe,SAAS,CAAC,IAA9B,EAAoC,SAAS,CAAC,CAAD,CAAT,IAAgB,SAAS,CAAC,IAA9D,EAAoE,EAAE,SAAS,CAAC,CAAD,CAA/E,EAAoF;AAClF,aAAK,SAAS,CAAC,CAAD,CAAT,GAAe,SAAS,CAAC,IAA9B,EAAoC,SAAS,CAAC,CAAD,CAAT,IAAgB,SAAS,CAAC,IAA9D,EAAoE,EAAE,SAAS,CAAC,CAAD,CAA/E,EAAoF;AAClF,UAAA,OAAO,CAAC,IAAR,CAAa,QAAQ,CAAC,kBAAT,CAA4B,SAA5B,CAAb;AACD;AACF;;AACD,aAAO,OAAP;AACD;AAnBH;AAqBD","sourcesContent":["/**\n * @module ol/loadingstrategy\n */\n\n\n/**\n * Strategy function for loading all features with a single request.\n * @param {import(\"./extent.js\").Extent} extent Extent.\n * @param {number} resolution Resolution.\n * @return {Array<import(\"./extent.js\").Extent>} Extents.\n * @api\n */\nexport function all(extent, resolution) {\n  return [[-Infinity, -Infinity, Infinity, Infinity]];\n}\n\n\n/**\n * Strategy function for loading features based on the view's extent and\n * resolution.\n * @param {import(\"./extent.js\").Extent} extent Extent.\n * @param {number} resolution Resolution.\n * @return {Array<import(\"./extent.js\").Extent>} Extents.\n * @api\n */\nexport function bbox(extent, resolution) {\n  return [extent];\n}\n\n\n/**\n * Creates a strategy function for loading features based on a tile grid.\n * @param {import(\"./tilegrid/TileGrid.js\").default} tileGrid Tile grid.\n * @return {function(import(\"./extent.js\").Extent, number): Array<import(\"./extent.js\").Extent>} Loading strategy.\n * @api\n */\nexport function tile(tileGrid) {\n  return (\n    /**\n     * @param {import(\"./extent.js\").Extent} extent Extent.\n     * @param {number} resolution Resolution.\n     * @return {Array<import(\"./extent.js\").Extent>} Extents.\n     */\n    function(extent, resolution) {\n      const z = tileGrid.getZForResolution(resolution);\n      const tileRange = tileGrid.getTileRangeForExtentAndZ(extent, z);\n      /** @type {Array<import(\"./extent.js\").Extent>} */\n      const extents = [];\n      /** @type {import(\"./tilecoord.js\").TileCoord} */\n      const tileCoord = [z, 0, 0];\n      for (tileCoord[1] = tileRange.minX; tileCoord[1] <= tileRange.maxX; ++tileCoord[1]) {\n        for (tileCoord[2] = tileRange.minY; tileCoord[2] <= tileRange.maxY; ++tileCoord[2]) {\n          extents.push(tileGrid.getTileCoordExtent(tileCoord));\n        }\n      }\n      return extents;\n    }\n  );\n}\n"]},"metadata":{},"sourceType":"module"}