{"ast":null,"code":"/**\n * ag-grid-community - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components\n * @version v21.2.2\n * @link http://www.ag-grid.com/\n * @license MIT\n */\n\"use strict\";\n\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nvar __metadata = this && this.__metadata || function (k, v) {\n  if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar context_1 = require(\"../context/context\");\n\nvar columnController_1 = require(\"../columnController/columnController\");\n\nvar constants_1 = require(\"../constants\");\n\nvar selectionController_1 = require(\"../selectionController\");\n\nvar gridOptionsWrapper_1 = require(\"../gridOptionsWrapper\");\n\nvar displayedGroupCreator_1 = require(\"../columnController/displayedGroupCreator\");\n\nvar columnFactory_1 = require(\"../columnController/columnFactory\");\n\nvar groupInstanceIdCreator_1 = require(\"../columnController/groupInstanceIdCreator\");\n\nvar columnGroup_1 = require(\"../entities/columnGroup\");\n\nvar pinnedRowModel_1 = require(\"../rowModels/pinnedRowModel\");\n\nvar utils_1 = require(\"../utils\");\n\nvar BaseGridSerializingSession =\n/** @class */\nfunction () {\n  function BaseGridSerializingSession(config) {\n    var columnController = config.columnController,\n        valueService = config.valueService,\n        gridOptionsWrapper = config.gridOptionsWrapper,\n        processCellCallback = config.processCellCallback,\n        processHeaderCallback = config.processHeaderCallback,\n        cellAndHeaderEscaper = config.cellAndHeaderEscaper;\n    this.columnController = columnController;\n    this.valueService = valueService;\n    this.gridOptionsWrapper = gridOptionsWrapper;\n    this.processCellCallback = processCellCallback;\n    this.processHeaderCallback = processHeaderCallback;\n    this.cellAndHeaderEscaper = cellAndHeaderEscaper;\n  }\n\n  BaseGridSerializingSession.prototype.extractHeaderValue = function (column) {\n    var nameForCol = this.getHeaderName(this.processHeaderCallback, column);\n\n    if (nameForCol === null || nameForCol === undefined) {\n      nameForCol = '';\n    }\n\n    return this.cellAndHeaderEscaper ? this.cellAndHeaderEscaper(nameForCol) : nameForCol;\n  };\n\n  BaseGridSerializingSession.prototype.extractRowCellValue = function (column, index, type, node) {\n    var isRowGrouping = this.columnController.getRowGroupColumns().length > 0;\n    var valueForCell;\n\n    if (node && node.group && isRowGrouping && index === 0) {\n      valueForCell = this.createValueForGroupNode(node);\n    } else {\n      valueForCell = this.valueService.getValue(column, node);\n    }\n\n    valueForCell = this.processCell(node, column, valueForCell, this.processCellCallback, type);\n\n    if (valueForCell === null || valueForCell === undefined) {\n      valueForCell = '';\n    }\n\n    return this.cellAndHeaderEscaper ? this.cellAndHeaderEscaper(valueForCell) : valueForCell;\n  };\n\n  BaseGridSerializingSession.prototype.getHeaderName = function (callback, column) {\n    if (callback) {\n      return callback({\n        column: column,\n        api: this.gridOptionsWrapper.getApi(),\n        columnApi: this.gridOptionsWrapper.getColumnApi(),\n        context: this.gridOptionsWrapper.getContext()\n      });\n    } else {\n      return this.columnController.getDisplayNameForColumn(column, 'csv', true);\n    }\n  };\n\n  BaseGridSerializingSession.prototype.createValueForGroupNode = function (node) {\n    var keys = [node.key];\n\n    while (node.parent) {\n      node = node.parent;\n      keys.push(node.key);\n    }\n\n    return keys.reverse().join(' -> ');\n  };\n\n  BaseGridSerializingSession.prototype.processCell = function (rowNode, column, value, processCellCallback, type) {\n    if (processCellCallback) {\n      return processCellCallback({\n        column: column,\n        node: rowNode,\n        value: value,\n        api: this.gridOptionsWrapper.getApi(),\n        columnApi: this.gridOptionsWrapper.getColumnApi(),\n        context: this.gridOptionsWrapper.getContext(),\n        type: type\n      });\n    } else {\n      return value;\n    }\n  };\n\n  return BaseGridSerializingSession;\n}();\n\nexports.BaseGridSerializingSession = BaseGridSerializingSession;\n\nvar GridSerializer =\n/** @class */\nfunction () {\n  function GridSerializer() {}\n\n  GridSerializer.prototype.serialize = function (gridSerializingSession, params) {\n    var dontSkipRows = function () {\n      return false;\n    };\n\n    var skipGroups = params && params.skipGroups;\n    var skipHeader = params && params.skipHeader;\n    var columnGroups = params && params.columnGroups;\n    var skipFooters = params && params.skipFooters;\n    var skipPinnedTop = params && params.skipPinnedTop;\n    var skipPinnedBottom = params && params.skipPinnedBottom;\n    var includeCustomHeader = params && params.customHeader;\n    var includeCustomFooter = params && params.customFooter;\n    var allColumns = params && params.allColumns;\n    var onlySelected = params && params.onlySelected;\n    var columnKeys = params && params.columnKeys;\n    var onlySelectedAllPages = params && params.onlySelectedAllPages;\n    var rowSkipper = params && params.shouldRowBeSkipped || dontSkipRows;\n    var api = this.gridOptionsWrapper.getApi();\n    var skipSingleChildrenGroup = this.gridOptionsWrapper.isGroupRemoveSingleChildren();\n    var skipLowestSingleChildrenGroup = this.gridOptionsWrapper.isGroupRemoveLowestSingleChildren();\n    var context = this.gridOptionsWrapper.getContext(); // when in pivot mode, we always render cols on screen, never 'all columns'\n\n    var isPivotMode = this.columnController.isPivotMode();\n    var rowModelNormal = this.rowModel.getType() === constants_1.Constants.ROW_MODEL_TYPE_CLIENT_SIDE;\n    var onlySelectedNonStandardModel = !rowModelNormal && onlySelected;\n    var columnsToExport = [];\n\n    if (utils_1._.existsAndNotEmpty(columnKeys)) {\n      columnsToExport = this.columnController.getGridColumns(columnKeys);\n    } else if (allColumns && !isPivotMode) {\n      // add auto group column for tree data\n      columnsToExport = this.gridOptionsWrapper.isTreeData() ? this.columnController.getGridColumns([constants_1.Constants.GROUP_AUTO_COLUMN_ID]) : [];\n      columnsToExport = columnsToExport.concat(this.columnController.getAllPrimaryColumns() || []);\n    } else {\n      columnsToExport = this.columnController.getAllDisplayedColumns();\n    }\n\n    if (includeCustomHeader) {\n      gridSerializingSession.addCustomHeader(includeCustomHeader);\n    }\n\n    gridSerializingSession.prepare(columnsToExport); // first pass, put in the header names of the cols\n\n    if (columnGroups) {\n      var groupInstanceIdCreator = new groupInstanceIdCreator_1.GroupInstanceIdCreator();\n      var displayedGroups = this.displayedGroupCreator.createDisplayedGroups(columnsToExport, this.columnController.getGridBalancedTree(), groupInstanceIdCreator, null);\n      this.recursivelyAddHeaderGroups(displayedGroups, gridSerializingSession);\n    }\n\n    if (!skipHeader) {\n      var gridRowIterator_1 = gridSerializingSession.onNewHeaderRow();\n      columnsToExport.forEach(function (column, index) {\n        gridRowIterator_1.onColumn(column, index, undefined);\n      });\n    }\n\n    this.pinnedRowModel.forEachPinnedTopRow(processRow);\n\n    if (isPivotMode) {\n      if (this.rowModel.forEachPivotNode) {\n        this.rowModel.forEachPivotNode(processRow);\n      } else {\n        //Must be enterprise, so we can just loop through all the nodes\n        this.rowModel.forEachNode(processRow);\n      }\n    } else {\n      // onlySelectedAllPages: user doing pagination and wants selected items from\n      // other pages, so cannot use the standard row model as it won't have rows from\n      // other pages.\n      // onlySelectedNonStandardModel: if user wants selected in non standard row model\n      // (eg viewport) then again rowmodel cannot be used, so need to use selected instead.\n      if (onlySelectedAllPages || onlySelectedNonStandardModel) {\n        var selectedNodes = this.selectionController.getSelectedNodes();\n        selectedNodes.forEach(function (node) {\n          processRow(node);\n        });\n      } else {\n        // here is everything else - including standard row model and selected. we don't use\n        // the selection model even when just using selected, so that the result is the order\n        // of the rows appearing on the screen.\n        if (rowModelNormal) {\n          this.rowModel.forEachNodeAfterFilterAndSort(processRow);\n        } else {\n          this.rowModel.forEachNode(processRow);\n        }\n      }\n    }\n\n    this.pinnedRowModel.forEachPinnedBottomRow(processRow);\n\n    if (includeCustomFooter) {\n      gridSerializingSession.addCustomFooter(includeCustomFooter);\n    }\n\n    function processRow(node) {\n      var shouldSkipLowestGroup = skipLowestSingleChildrenGroup && node.leafGroup;\n      var shouldSkipCurrentGroup = node.allChildrenCount === 1 && (skipSingleChildrenGroup || shouldSkipLowestGroup);\n\n      if (node.group && (skipGroups || shouldSkipCurrentGroup)) {\n        return;\n      }\n\n      if (skipFooters && node.footer) {\n        return;\n      }\n\n      if (onlySelected && !node.isSelected()) {\n        return;\n      }\n\n      if (skipPinnedTop && node.rowPinned === 'top') {\n        return;\n      }\n\n      if (skipPinnedBottom && node.rowPinned === 'bottom') {\n        return;\n      } // if we are in pivotMode, then the grid will show the root node only\n      // if it's not a leaf group\n\n\n      var nodeIsRootNode = node.level === -1;\n\n      if (nodeIsRootNode && !node.leafGroup) {\n        return;\n      }\n\n      var shouldRowBeSkipped = rowSkipper({\n        node: node,\n        api: api,\n        context: context\n      });\n\n      if (shouldRowBeSkipped) {\n        return;\n      }\n\n      var rowAccumulator = gridSerializingSession.onNewBodyRow();\n      columnsToExport.forEach(function (column, index) {\n        rowAccumulator.onColumn(column, index, node);\n      });\n    }\n\n    return gridSerializingSession.parse();\n  };\n\n  GridSerializer.prototype.recursivelyAddHeaderGroups = function (displayedGroups, gridSerializingSession) {\n    var directChildrenHeaderGroups = [];\n    displayedGroups.forEach(function (columnGroupChild) {\n      var columnGroup = columnGroupChild;\n\n      if (!columnGroup.getChildren) {\n        return;\n      }\n\n      columnGroup.getChildren().forEach(function (it) {\n        return directChildrenHeaderGroups.push(it);\n      });\n    });\n\n    if (displayedGroups.length > 0 && displayedGroups[0] instanceof columnGroup_1.ColumnGroup) {\n      this.doAddHeaderHeader(gridSerializingSession, displayedGroups);\n    }\n\n    if (directChildrenHeaderGroups && directChildrenHeaderGroups.length > 0) {\n      this.recursivelyAddHeaderGroups(directChildrenHeaderGroups, gridSerializingSession);\n    }\n  };\n\n  GridSerializer.prototype.doAddHeaderHeader = function (gridSerializingSession, displayedGroups) {\n    var _this = this;\n\n    var gridRowIterator = gridSerializingSession.onNewHeaderGroupingRow();\n    var columnIndex = 0;\n    displayedGroups.forEach(function (columnGroupChild) {\n      var columnGroup = columnGroupChild;\n\n      var columnName = _this.columnController.getDisplayNameForColumnGroup(columnGroup, 'header');\n\n      gridRowIterator.onColumn(columnName || '', columnIndex++, columnGroup.getLeafColumns().length - 1);\n    });\n  };\n\n  __decorate([context_1.Autowired('displayedGroupCreator'), __metadata(\"design:type\", displayedGroupCreator_1.DisplayedGroupCreator)], GridSerializer.prototype, \"displayedGroupCreator\", void 0);\n\n  __decorate([context_1.Autowired('columnController'), __metadata(\"design:type\", columnController_1.ColumnController)], GridSerializer.prototype, \"columnController\", void 0);\n\n  __decorate([context_1.Autowired('rowModel'), __metadata(\"design:type\", Object)], GridSerializer.prototype, \"rowModel\", void 0);\n\n  __decorate([context_1.Autowired('pinnedRowModel'), __metadata(\"design:type\", pinnedRowModel_1.PinnedRowModel)], GridSerializer.prototype, \"pinnedRowModel\", void 0);\n\n  __decorate([context_1.Autowired('selectionController'), __metadata(\"design:type\", selectionController_1.SelectionController)], GridSerializer.prototype, \"selectionController\", void 0);\n\n  __decorate([context_1.Autowired('columnFactory'), __metadata(\"design:type\", columnFactory_1.ColumnFactory)], GridSerializer.prototype, \"columnFactory\", void 0);\n\n  __decorate([context_1.Autowired('gridOptionsWrapper'), __metadata(\"design:type\", gridOptionsWrapper_1.GridOptionsWrapper)], GridSerializer.prototype, \"gridOptionsWrapper\", void 0);\n\n  GridSerializer = __decorate([context_1.Bean(\"gridSerializer\")], GridSerializer);\n  return GridSerializer;\n}();\n\nexports.GridSerializer = GridSerializer;\nvar RowType;\n\n(function (RowType) {\n  RowType[RowType[\"HEADER_GROUPING\"] = 0] = \"HEADER_GROUPING\";\n  RowType[RowType[\"HEADER\"] = 1] = \"HEADER\";\n  RowType[RowType[\"BODY\"] = 2] = \"BODY\";\n})(RowType = exports.RowType || (exports.RowType = {}));","map":{"version":3,"sources":["/Users/dirkmennecke77/Desktop/Lageplan/node_modules/ag-grid-community/dist/lib/exporter/gridSerializer.js"],"names":["__decorate","decorators","target","key","desc","c","arguments","length","r","Object","getOwnPropertyDescriptor","d","Reflect","decorate","i","defineProperty","__metadata","k","v","metadata","exports","value","context_1","require","columnController_1","constants_1","selectionController_1","gridOptionsWrapper_1","displayedGroupCreator_1","columnFactory_1","groupInstanceIdCreator_1","columnGroup_1","pinnedRowModel_1","utils_1","BaseGridSerializingSession","config","columnController","valueService","gridOptionsWrapper","processCellCallback","processHeaderCallback","cellAndHeaderEscaper","prototype","extractHeaderValue","column","nameForCol","getHeaderName","undefined","extractRowCellValue","index","type","node","isRowGrouping","getRowGroupColumns","valueForCell","group","createValueForGroupNode","getValue","processCell","callback","api","getApi","columnApi","getColumnApi","context","getContext","getDisplayNameForColumn","keys","parent","push","reverse","join","rowNode","GridSerializer","serialize","gridSerializingSession","params","dontSkipRows","skipGroups","skipHeader","columnGroups","skipFooters","skipPinnedTop","skipPinnedBottom","includeCustomHeader","customHeader","includeCustomFooter","customFooter","allColumns","onlySelected","columnKeys","onlySelectedAllPages","rowSkipper","shouldRowBeSkipped","skipSingleChildrenGroup","isGroupRemoveSingleChildren","skipLowestSingleChildrenGroup","isGroupRemoveLowestSingleChildren","isPivotMode","rowModelNormal","rowModel","getType","Constants","ROW_MODEL_TYPE_CLIENT_SIDE","onlySelectedNonStandardModel","columnsToExport","_","existsAndNotEmpty","getGridColumns","isTreeData","GROUP_AUTO_COLUMN_ID","concat","getAllPrimaryColumns","getAllDisplayedColumns","addCustomHeader","prepare","groupInstanceIdCreator","GroupInstanceIdCreator","displayedGroups","displayedGroupCreator","createDisplayedGroups","getGridBalancedTree","recursivelyAddHeaderGroups","gridRowIterator_1","onNewHeaderRow","forEach","onColumn","pinnedRowModel","forEachPinnedTopRow","processRow","forEachPivotNode","forEachNode","selectedNodes","selectionController","getSelectedNodes","forEachNodeAfterFilterAndSort","forEachPinnedBottomRow","addCustomFooter","shouldSkipLowestGroup","leafGroup","shouldSkipCurrentGroup","allChildrenCount","footer","isSelected","rowPinned","nodeIsRootNode","level","rowAccumulator","onNewBodyRow","parse","directChildrenHeaderGroups","columnGroupChild","columnGroup","getChildren","it","ColumnGroup","doAddHeaderHeader","_this","gridRowIterator","onNewHeaderGroupingRow","columnIndex","columnName","getDisplayNameForColumnGroup","getLeafColumns","Autowired","DisplayedGroupCreator","ColumnController","PinnedRowModel","SelectionController","ColumnFactory","GridOptionsWrapper","Bean","RowType"],"mappings":"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","sourcesContent":["/**\n * ag-grid-community - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components\n * @version v21.2.2\n * @link http://www.ag-grid.com/\n * @license MIT\n */\n\"use strict\";\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __metadata = (this && this.__metadata) || function (k, v) {\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar context_1 = require(\"../context/context\");\nvar columnController_1 = require(\"../columnController/columnController\");\nvar constants_1 = require(\"../constants\");\nvar selectionController_1 = require(\"../selectionController\");\nvar gridOptionsWrapper_1 = require(\"../gridOptionsWrapper\");\nvar displayedGroupCreator_1 = require(\"../columnController/displayedGroupCreator\");\nvar columnFactory_1 = require(\"../columnController/columnFactory\");\nvar groupInstanceIdCreator_1 = require(\"../columnController/groupInstanceIdCreator\");\nvar columnGroup_1 = require(\"../entities/columnGroup\");\nvar pinnedRowModel_1 = require(\"../rowModels/pinnedRowModel\");\nvar utils_1 = require(\"../utils\");\nvar BaseGridSerializingSession = /** @class */ (function () {\n    function BaseGridSerializingSession(config) {\n        var columnController = config.columnController, valueService = config.valueService, gridOptionsWrapper = config.gridOptionsWrapper, processCellCallback = config.processCellCallback, processHeaderCallback = config.processHeaderCallback, cellAndHeaderEscaper = config.cellAndHeaderEscaper;\n        this.columnController = columnController;\n        this.valueService = valueService;\n        this.gridOptionsWrapper = gridOptionsWrapper;\n        this.processCellCallback = processCellCallback;\n        this.processHeaderCallback = processHeaderCallback;\n        this.cellAndHeaderEscaper = cellAndHeaderEscaper;\n    }\n    BaseGridSerializingSession.prototype.extractHeaderValue = function (column) {\n        var nameForCol = this.getHeaderName(this.processHeaderCallback, column);\n        if (nameForCol === null || nameForCol === undefined) {\n            nameForCol = '';\n        }\n        return this.cellAndHeaderEscaper ? this.cellAndHeaderEscaper(nameForCol) : nameForCol;\n    };\n    BaseGridSerializingSession.prototype.extractRowCellValue = function (column, index, type, node) {\n        var isRowGrouping = this.columnController.getRowGroupColumns().length > 0;\n        var valueForCell;\n        if (node && node.group && isRowGrouping && index === 0) {\n            valueForCell = this.createValueForGroupNode(node);\n        }\n        else {\n            valueForCell = this.valueService.getValue(column, node);\n        }\n        valueForCell = this.processCell(node, column, valueForCell, this.processCellCallback, type);\n        if (valueForCell === null || valueForCell === undefined) {\n            valueForCell = '';\n        }\n        return this.cellAndHeaderEscaper ? this.cellAndHeaderEscaper(valueForCell) : valueForCell;\n    };\n    BaseGridSerializingSession.prototype.getHeaderName = function (callback, column) {\n        if (callback) {\n            return callback({\n                column: column,\n                api: this.gridOptionsWrapper.getApi(),\n                columnApi: this.gridOptionsWrapper.getColumnApi(),\n                context: this.gridOptionsWrapper.getContext()\n            });\n        }\n        else {\n            return this.columnController.getDisplayNameForColumn(column, 'csv', true);\n        }\n    };\n    BaseGridSerializingSession.prototype.createValueForGroupNode = function (node) {\n        var keys = [node.key];\n        while (node.parent) {\n            node = node.parent;\n            keys.push(node.key);\n        }\n        return keys.reverse().join(' -> ');\n    };\n    BaseGridSerializingSession.prototype.processCell = function (rowNode, column, value, processCellCallback, type) {\n        if (processCellCallback) {\n            return processCellCallback({\n                column: column,\n                node: rowNode,\n                value: value,\n                api: this.gridOptionsWrapper.getApi(),\n                columnApi: this.gridOptionsWrapper.getColumnApi(),\n                context: this.gridOptionsWrapper.getContext(),\n                type: type\n            });\n        }\n        else {\n            return value;\n        }\n    };\n    return BaseGridSerializingSession;\n}());\nexports.BaseGridSerializingSession = BaseGridSerializingSession;\nvar GridSerializer = /** @class */ (function () {\n    function GridSerializer() {\n    }\n    GridSerializer.prototype.serialize = function (gridSerializingSession, params) {\n        var dontSkipRows = function () { return false; };\n        var skipGroups = params && params.skipGroups;\n        var skipHeader = params && params.skipHeader;\n        var columnGroups = params && params.columnGroups;\n        var skipFooters = params && params.skipFooters;\n        var skipPinnedTop = params && params.skipPinnedTop;\n        var skipPinnedBottom = params && params.skipPinnedBottom;\n        var includeCustomHeader = params && params.customHeader;\n        var includeCustomFooter = params && params.customFooter;\n        var allColumns = params && params.allColumns;\n        var onlySelected = params && params.onlySelected;\n        var columnKeys = params && params.columnKeys;\n        var onlySelectedAllPages = params && params.onlySelectedAllPages;\n        var rowSkipper = (params && params.shouldRowBeSkipped) || dontSkipRows;\n        var api = this.gridOptionsWrapper.getApi();\n        var skipSingleChildrenGroup = this.gridOptionsWrapper.isGroupRemoveSingleChildren();\n        var skipLowestSingleChildrenGroup = this.gridOptionsWrapper.isGroupRemoveLowestSingleChildren();\n        var context = this.gridOptionsWrapper.getContext();\n        // when in pivot mode, we always render cols on screen, never 'all columns'\n        var isPivotMode = this.columnController.isPivotMode();\n        var rowModelNormal = this.rowModel.getType() === constants_1.Constants.ROW_MODEL_TYPE_CLIENT_SIDE;\n        var onlySelectedNonStandardModel = !rowModelNormal && onlySelected;\n        var columnsToExport = [];\n        if (utils_1._.existsAndNotEmpty(columnKeys)) {\n            columnsToExport = this.columnController.getGridColumns(columnKeys);\n        }\n        else if (allColumns && !isPivotMode) {\n            // add auto group column for tree data\n            columnsToExport = this.gridOptionsWrapper.isTreeData() ?\n                this.columnController.getGridColumns([constants_1.Constants.GROUP_AUTO_COLUMN_ID]) : [];\n            columnsToExport = columnsToExport.concat(this.columnController.getAllPrimaryColumns() || []);\n        }\n        else {\n            columnsToExport = this.columnController.getAllDisplayedColumns();\n        }\n        if (includeCustomHeader) {\n            gridSerializingSession.addCustomHeader(includeCustomHeader);\n        }\n        gridSerializingSession.prepare(columnsToExport);\n        // first pass, put in the header names of the cols\n        if (columnGroups) {\n            var groupInstanceIdCreator = new groupInstanceIdCreator_1.GroupInstanceIdCreator();\n            var displayedGroups = this.displayedGroupCreator.createDisplayedGroups(columnsToExport, this.columnController.getGridBalancedTree(), groupInstanceIdCreator, null);\n            this.recursivelyAddHeaderGroups(displayedGroups, gridSerializingSession);\n        }\n        if (!skipHeader) {\n            var gridRowIterator_1 = gridSerializingSession.onNewHeaderRow();\n            columnsToExport.forEach(function (column, index) {\n                gridRowIterator_1.onColumn(column, index, undefined);\n            });\n        }\n        this.pinnedRowModel.forEachPinnedTopRow(processRow);\n        if (isPivotMode) {\n            if (this.rowModel.forEachPivotNode) {\n                this.rowModel.forEachPivotNode(processRow);\n            }\n            else {\n                //Must be enterprise, so we can just loop through all the nodes\n                this.rowModel.forEachNode(processRow);\n            }\n        }\n        else {\n            // onlySelectedAllPages: user doing pagination and wants selected items from\n            // other pages, so cannot use the standard row model as it won't have rows from\n            // other pages.\n            // onlySelectedNonStandardModel: if user wants selected in non standard row model\n            // (eg viewport) then again rowmodel cannot be used, so need to use selected instead.\n            if (onlySelectedAllPages || onlySelectedNonStandardModel) {\n                var selectedNodes = this.selectionController.getSelectedNodes();\n                selectedNodes.forEach(function (node) {\n                    processRow(node);\n                });\n            }\n            else {\n                // here is everything else - including standard row model and selected. we don't use\n                // the selection model even when just using selected, so that the result is the order\n                // of the rows appearing on the screen.\n                if (rowModelNormal) {\n                    this.rowModel.forEachNodeAfterFilterAndSort(processRow);\n                }\n                else {\n                    this.rowModel.forEachNode(processRow);\n                }\n            }\n        }\n        this.pinnedRowModel.forEachPinnedBottomRow(processRow);\n        if (includeCustomFooter) {\n            gridSerializingSession.addCustomFooter(includeCustomFooter);\n        }\n        function processRow(node) {\n            var shouldSkipLowestGroup = skipLowestSingleChildrenGroup && node.leafGroup;\n            var shouldSkipCurrentGroup = node.allChildrenCount === 1 && (skipSingleChildrenGroup || shouldSkipLowestGroup);\n            if (node.group && (skipGroups || shouldSkipCurrentGroup)) {\n                return;\n            }\n            if (skipFooters && node.footer) {\n                return;\n            }\n            if (onlySelected && !node.isSelected()) {\n                return;\n            }\n            if (skipPinnedTop && node.rowPinned === 'top') {\n                return;\n            }\n            if (skipPinnedBottom && node.rowPinned === 'bottom') {\n                return;\n            }\n            // if we are in pivotMode, then the grid will show the root node only\n            // if it's not a leaf group\n            var nodeIsRootNode = node.level === -1;\n            if (nodeIsRootNode && !node.leafGroup) {\n                return;\n            }\n            var shouldRowBeSkipped = rowSkipper({\n                node: node,\n                api: api,\n                context: context\n            });\n            if (shouldRowBeSkipped) {\n                return;\n            }\n            var rowAccumulator = gridSerializingSession.onNewBodyRow();\n            columnsToExport.forEach(function (column, index) {\n                rowAccumulator.onColumn(column, index, node);\n            });\n        }\n        return gridSerializingSession.parse();\n    };\n    GridSerializer.prototype.recursivelyAddHeaderGroups = function (displayedGroups, gridSerializingSession) {\n        var directChildrenHeaderGroups = [];\n        displayedGroups.forEach(function (columnGroupChild) {\n            var columnGroup = columnGroupChild;\n            if (!columnGroup.getChildren) {\n                return;\n            }\n            columnGroup.getChildren().forEach(function (it) { return directChildrenHeaderGroups.push(it); });\n        });\n        if (displayedGroups.length > 0 && displayedGroups[0] instanceof columnGroup_1.ColumnGroup) {\n            this.doAddHeaderHeader(gridSerializingSession, displayedGroups);\n        }\n        if (directChildrenHeaderGroups && directChildrenHeaderGroups.length > 0) {\n            this.recursivelyAddHeaderGroups(directChildrenHeaderGroups, gridSerializingSession);\n        }\n    };\n    GridSerializer.prototype.doAddHeaderHeader = function (gridSerializingSession, displayedGroups) {\n        var _this = this;\n        var gridRowIterator = gridSerializingSession.onNewHeaderGroupingRow();\n        var columnIndex = 0;\n        displayedGroups.forEach(function (columnGroupChild) {\n            var columnGroup = columnGroupChild;\n            var columnName = _this.columnController.getDisplayNameForColumnGroup(columnGroup, 'header');\n            gridRowIterator.onColumn(columnName || '', columnIndex++, columnGroup.getLeafColumns().length - 1);\n        });\n    };\n    __decorate([\n        context_1.Autowired('displayedGroupCreator'),\n        __metadata(\"design:type\", displayedGroupCreator_1.DisplayedGroupCreator)\n    ], GridSerializer.prototype, \"displayedGroupCreator\", void 0);\n    __decorate([\n        context_1.Autowired('columnController'),\n        __metadata(\"design:type\", columnController_1.ColumnController)\n    ], GridSerializer.prototype, \"columnController\", void 0);\n    __decorate([\n        context_1.Autowired('rowModel'),\n        __metadata(\"design:type\", Object)\n    ], GridSerializer.prototype, \"rowModel\", void 0);\n    __decorate([\n        context_1.Autowired('pinnedRowModel'),\n        __metadata(\"design:type\", pinnedRowModel_1.PinnedRowModel)\n    ], GridSerializer.prototype, \"pinnedRowModel\", void 0);\n    __decorate([\n        context_1.Autowired('selectionController'),\n        __metadata(\"design:type\", selectionController_1.SelectionController)\n    ], GridSerializer.prototype, \"selectionController\", void 0);\n    __decorate([\n        context_1.Autowired('columnFactory'),\n        __metadata(\"design:type\", columnFactory_1.ColumnFactory)\n    ], GridSerializer.prototype, \"columnFactory\", void 0);\n    __decorate([\n        context_1.Autowired('gridOptionsWrapper'),\n        __metadata(\"design:type\", gridOptionsWrapper_1.GridOptionsWrapper)\n    ], GridSerializer.prototype, \"gridOptionsWrapper\", void 0);\n    GridSerializer = __decorate([\n        context_1.Bean(\"gridSerializer\")\n    ], GridSerializer);\n    return GridSerializer;\n}());\nexports.GridSerializer = GridSerializer;\nvar RowType;\n(function (RowType) {\n    RowType[RowType[\"HEADER_GROUPING\"] = 0] = \"HEADER_GROUPING\";\n    RowType[RowType[\"HEADER\"] = 1] = \"HEADER\";\n    RowType[RowType[\"BODY\"] = 2] = \"BODY\";\n})(RowType = exports.RowType || (exports.RowType = {}));\n"]},"metadata":{},"sourceType":"script"}