{"ast":null,"code":"/**\n * @module ol/source/ImageWMS\n */\nimport { DEFAULT_WMS_VERSION } from './common.js';\nimport ImageWrapper from '../Image.js';\nimport { assert } from '../asserts.js';\nimport { listen } from '../events.js';\nimport EventType from '../events/EventType.js';\nimport { containsExtent, getCenter, getForViewAndSize, getHeight, getWidth } from '../extent.js';\nimport { assign } from '../obj.js';\nimport { get as getProjection, transform } from '../proj.js';\nimport { calculateSourceResolution } from '../reproj.js';\nimport ImageSource, { defaultImageLoadFunction } from './Image.js';\nimport WMSServerType from './WMSServerType.js';\nimport { compareVersions } from '../string.js';\nimport { appendParams } from '../uri.js';\n/**\n * @const\n * @type {import(\"../size.js\").Size}\n */\n\nvar GETFEATUREINFO_IMAGE_SIZE = [101, 101];\n/**\n * @typedef {Object} Options\n * @property {import(\"./Source.js\").AttributionLike} [attributions] Attributions.\n * @property {null|string} [crossOrigin] The `crossOrigin` attribute for loaded images.  Note that\n * you must provide a `crossOrigin` value if you are using the WebGL renderer or if you want to\n * access pixel data with the Canvas renderer.  See\n * https://developer.mozilla.org/en-US/docs/Web/HTML/CORS_enabled_image for more detail.\n * @property {boolean} [hidpi=true] Use the `ol/Map#pixelRatio` value when requesting\n * the image from the remote server.\n * @property {import(\"./WMSServerType.js\").default|string} [serverType] The type of\n * the remote WMS server: `mapserver`, `geoserver` or `qgis`. Only needed if `hidpi` is `true`.\n * @property {import(\"../Image.js\").LoadFunction} [imageLoadFunction] Optional function to load an image given a URL.\n * @property {Object<string,*>} params WMS request parameters.\n * At least a `LAYERS` param is required. `STYLES` is\n * `''` by default. `VERSION` is `1.3.0` by default. `WIDTH`, `HEIGHT`, `BBOX`\n * and `CRS` (`SRS` for WMS version < 1.3.0) will be set dynamically.\n * @property {import(\"../proj.js\").ProjectionLike} projection Projection.\n * @property {number} [ratio=1.5] Ratio. `1` means image requests are the size of the map viewport, `2` means\n * twice the width and height of the map viewport, and so on. Must be `1` or\n * higher.\n * @property {Array<number>} [resolutions] Resolutions.\n * If specified, requests will be made for these resolutions only.\n * @property {string} url WMS service URL.\n */\n\n/**\n * @classdesc\n * Source for WMS servers providing single, untiled images.\n *\n * @fires ol/source/Image~ImageSourceEvent\n * @api\n */\n\nvar ImageWMS =\n/*@__PURE__*/\nfunction (ImageSource) {\n  function ImageWMS(opt_options) {\n    var options = opt_options ||\n    /** @type {Options} */\n    {};\n    ImageSource.call(this, {\n      attributions: options.attributions,\n      projection: options.projection,\n      resolutions: options.resolutions\n    });\n    /**\n     * @private\n     * @type {?string}\n     */\n\n    this.crossOrigin_ = options.crossOrigin !== undefined ? options.crossOrigin : null;\n    /**\n     * @private\n     * @type {string|undefined}\n     */\n\n    this.url_ = options.url;\n    /**\n     * @private\n     * @type {import(\"../Image.js\").LoadFunction}\n     */\n\n    this.imageLoadFunction_ = options.imageLoadFunction !== undefined ? options.imageLoadFunction : defaultImageLoadFunction;\n    /**\n     * @private\n     * @type {!Object}\n     */\n\n    this.params_ = options.params || {};\n    /**\n     * @private\n     * @type {boolean}\n     */\n\n    this.v13_ = true;\n    this.updateV13_();\n    /**\n     * @private\n     * @type {import(\"./WMSServerType.js\").default|undefined}\n     */\n\n    this.serverType_ =\n    /** @type {import(\"./WMSServerType.js\").default|undefined} */\n    options.serverType;\n    /**\n     * @private\n     * @type {boolean}\n     */\n\n    this.hidpi_ = options.hidpi !== undefined ? options.hidpi : true;\n    /**\n     * @private\n     * @type {import(\"../Image.js\").default}\n     */\n\n    this.image_ = null;\n    /**\n     * @private\n     * @type {import(\"../size.js\").Size}\n     */\n\n    this.imageSize_ = [0, 0];\n    /**\n     * @private\n     * @type {number}\n     */\n\n    this.renderedRevision_ = 0;\n    /**\n     * @private\n     * @type {number}\n     */\n\n    this.ratio_ = options.ratio !== undefined ? options.ratio : 1.5;\n  }\n\n  if (ImageSource) ImageWMS.__proto__ = ImageSource;\n  ImageWMS.prototype = Object.create(ImageSource && ImageSource.prototype);\n  ImageWMS.prototype.constructor = ImageWMS;\n  /**\n   * Return the GetFeatureInfo URL for the passed coordinate, resolution, and\n   * projection. Return `undefined` if the GetFeatureInfo URL cannot be\n   * constructed.\n   * @param {import(\"../coordinate.js\").Coordinate} coordinate Coordinate.\n   * @param {number} resolution Resolution.\n   * @param {import(\"../proj.js\").ProjectionLike} projection Projection.\n   * @param {!Object} params GetFeatureInfo params. `INFO_FORMAT` at least should\n   *     be provided. If `QUERY_LAYERS` is not provided then the layers specified\n   *     in the `LAYERS` parameter will be used. `VERSION` should not be\n   *     specified here.\n   * @return {string|undefined} GetFeatureInfo URL.\n   * @api\n   */\n\n  ImageWMS.prototype.getGetFeatureInfoUrl = function getGetFeatureInfoUrl(coordinate, resolution, projection, params) {\n    if (this.url_ === undefined) {\n      return undefined;\n    }\n\n    var projectionObj = getProjection(projection);\n    var sourceProjectionObj = this.getProjection();\n\n    if (sourceProjectionObj && sourceProjectionObj !== projectionObj) {\n      resolution = calculateSourceResolution(sourceProjectionObj, projectionObj, coordinate, resolution);\n      coordinate = transform(coordinate, projectionObj, sourceProjectionObj);\n    }\n\n    var extent = getForViewAndSize(coordinate, resolution, 0, GETFEATUREINFO_IMAGE_SIZE);\n    var baseParams = {\n      'SERVICE': 'WMS',\n      'VERSION': DEFAULT_WMS_VERSION,\n      'REQUEST': 'GetFeatureInfo',\n      'FORMAT': 'image/png',\n      'TRANSPARENT': true,\n      'QUERY_LAYERS': this.params_['LAYERS']\n    };\n    assign(baseParams, this.params_, params);\n    var x = Math.floor((coordinate[0] - extent[0]) / resolution);\n    var y = Math.floor((extent[3] - coordinate[1]) / resolution);\n    baseParams[this.v13_ ? 'I' : 'X'] = x;\n    baseParams[this.v13_ ? 'J' : 'Y'] = y;\n    return this.getRequestUrl_(extent, GETFEATUREINFO_IMAGE_SIZE, 1, sourceProjectionObj || projectionObj, baseParams);\n  };\n  /**\n   * Get the user-provided params, i.e. those passed to the constructor through\n   * the \"params\" option, and possibly updated using the updateParams method.\n   * @return {Object} Params.\n   * @api\n   */\n\n\n  ImageWMS.prototype.getParams = function getParams() {\n    return this.params_;\n  };\n  /**\n   * @inheritDoc\n   */\n\n\n  ImageWMS.prototype.getImageInternal = function getImageInternal(extent, resolution, pixelRatio, projection) {\n    if (this.url_ === undefined) {\n      return null;\n    }\n\n    resolution = this.findNearestResolution(resolution);\n\n    if (pixelRatio != 1 && (!this.hidpi_ || this.serverType_ === undefined)) {\n      pixelRatio = 1;\n    }\n\n    var imageResolution = resolution / pixelRatio;\n    var center = getCenter(extent);\n    var viewWidth = Math.ceil(getWidth(extent) / imageResolution);\n    var viewHeight = Math.ceil(getHeight(extent) / imageResolution);\n    var viewExtent = getForViewAndSize(center, imageResolution, 0, [viewWidth, viewHeight]);\n    var requestWidth = Math.ceil(this.ratio_ * getWidth(extent) / imageResolution);\n    var requestHeight = Math.ceil(this.ratio_ * getHeight(extent) / imageResolution);\n    var requestExtent = getForViewAndSize(center, imageResolution, 0, [requestWidth, requestHeight]);\n    var image = this.image_;\n\n    if (image && this.renderedRevision_ == this.getRevision() && image.getResolution() == resolution && image.getPixelRatio() == pixelRatio && containsExtent(image.getExtent(), viewExtent)) {\n      return image;\n    }\n\n    var params = {\n      'SERVICE': 'WMS',\n      'VERSION': DEFAULT_WMS_VERSION,\n      'REQUEST': 'GetMap',\n      'FORMAT': 'image/png',\n      'TRANSPARENT': true\n    };\n    assign(params, this.params_);\n    this.imageSize_[0] = Math.round(getWidth(requestExtent) / imageResolution);\n    this.imageSize_[1] = Math.round(getHeight(requestExtent) / imageResolution);\n    var url = this.getRequestUrl_(requestExtent, this.imageSize_, pixelRatio, projection, params);\n    this.image_ = new ImageWrapper(requestExtent, resolution, pixelRatio, url, this.crossOrigin_, this.imageLoadFunction_);\n    this.renderedRevision_ = this.getRevision();\n    listen(this.image_, EventType.CHANGE, this.handleImageChange, this);\n    return this.image_;\n  };\n  /**\n   * Return the image load function of the source.\n   * @return {import(\"../Image.js\").LoadFunction} The image load function.\n   * @api\n   */\n\n\n  ImageWMS.prototype.getImageLoadFunction = function getImageLoadFunction() {\n    return this.imageLoadFunction_;\n  };\n  /**\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @param {import(\"../size.js\").Size} size Size.\n   * @param {number} pixelRatio Pixel ratio.\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   * @param {Object} params Params.\n   * @return {string} Request URL.\n   * @private\n   */\n\n\n  ImageWMS.prototype.getRequestUrl_ = function getRequestUrl_(extent, size, pixelRatio, projection, params) {\n    assert(this.url_ !== undefined, 9); // `url` must be configured or set using `#setUrl()`\n\n    params[this.v13_ ? 'CRS' : 'SRS'] = projection.getCode();\n\n    if (!('STYLES' in this.params_)) {\n      params['STYLES'] = '';\n    }\n\n    if (pixelRatio != 1) {\n      switch (this.serverType_) {\n        case WMSServerType.GEOSERVER:\n          var dpi = 90 * pixelRatio + 0.5 | 0;\n\n          if ('FORMAT_OPTIONS' in params) {\n            params['FORMAT_OPTIONS'] += ';dpi:' + dpi;\n          } else {\n            params['FORMAT_OPTIONS'] = 'dpi:' + dpi;\n          }\n\n          break;\n\n        case WMSServerType.MAPSERVER:\n          params['MAP_RESOLUTION'] = 90 * pixelRatio;\n          break;\n\n        case WMSServerType.CARMENTA_SERVER:\n        case WMSServerType.QGIS:\n          params['DPI'] = 90 * pixelRatio;\n          break;\n\n        default:\n          assert(false, 8); // Unknown `serverType` configured\n\n          break;\n      }\n    }\n\n    params['WIDTH'] = size[0];\n    params['HEIGHT'] = size[1];\n    var axisOrientation = projection.getAxisOrientation();\n    var bbox;\n\n    if (this.v13_ && axisOrientation.substr(0, 2) == 'ne') {\n      bbox = [extent[1], extent[0], extent[3], extent[2]];\n    } else {\n      bbox = extent;\n    }\n\n    params['BBOX'] = bbox.join(',');\n    return appendParams(\n    /** @type {string} */\n    this.url_, params);\n  };\n  /**\n   * Return the URL used for this WMS source.\n   * @return {string|undefined} URL.\n   * @api\n   */\n\n\n  ImageWMS.prototype.getUrl = function getUrl() {\n    return this.url_;\n  };\n  /**\n   * Set the image load function of the source.\n   * @param {import(\"../Image.js\").LoadFunction} imageLoadFunction Image load function.\n   * @api\n   */\n\n\n  ImageWMS.prototype.setImageLoadFunction = function setImageLoadFunction(imageLoadFunction) {\n    this.image_ = null;\n    this.imageLoadFunction_ = imageLoadFunction;\n    this.changed();\n  };\n  /**\n   * Set the URL to use for requests.\n   * @param {string|undefined} url URL.\n   * @api\n   */\n\n\n  ImageWMS.prototype.setUrl = function setUrl(url) {\n    if (url != this.url_) {\n      this.url_ = url;\n      this.image_ = null;\n      this.changed();\n    }\n  };\n  /**\n   * Update the user-provided params.\n   * @param {Object} params Params.\n   * @api\n   */\n\n\n  ImageWMS.prototype.updateParams = function updateParams(params) {\n    assign(this.params_, params);\n    this.updateV13_();\n    this.image_ = null;\n    this.changed();\n  };\n  /**\n   * @private\n   */\n\n\n  ImageWMS.prototype.updateV13_ = function updateV13_() {\n    var version = this.params_['VERSION'] || DEFAULT_WMS_VERSION;\n    this.v13_ = compareVersions(version, '1.3') >= 0;\n  };\n\n  return ImageWMS;\n}(ImageSource);\n\nexport default ImageWMS;","map":{"version":3,"sources":["../../../src/ol/source/ImageWMS.js"],"names":["const","super","let"],"mappings":"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","sourcesContent":["/**\n * @module ol/source/ImageWMS\n */\n\nimport {DEFAULT_WMS_VERSION} from './common.js';\n\nimport ImageWrapper from '../Image.js';\nimport {assert} from '../asserts.js';\nimport {listen} from '../events.js';\nimport EventType from '../events/EventType.js';\nimport {containsExtent, getCenter, getForViewAndSize, getHeight, getWidth} from '../extent.js';\nimport {assign} from '../obj.js';\nimport {get as getProjection, transform} from '../proj.js';\nimport {calculateSourceResolution} from '../reproj.js';\nimport ImageSource, {defaultImageLoadFunction} from './Image.js';\nimport WMSServerType from './WMSServerType.js';\nimport {compareVersions} from '../string.js';\nimport {appendParams} from '../uri.js';\n\n\n/**\n * @const\n * @type {import(\"../size.js\").Size}\n */\nconst GETFEATUREINFO_IMAGE_SIZE = [101, 101];\n\n\n/**\n * @typedef {Object} Options\n * @property {import(\"./Source.js\").AttributionLike} [attributions] Attributions.\n * @property {null|string} [crossOrigin] The `crossOrigin` attribute for loaded images.  Note that\n * you must provide a `crossOrigin` value if you are using the WebGL renderer or if you want to\n * access pixel data with the Canvas renderer.  See\n * https://developer.mozilla.org/en-US/docs/Web/HTML/CORS_enabled_image for more detail.\n * @property {boolean} [hidpi=true] Use the `ol/Map#pixelRatio` value when requesting\n * the image from the remote server.\n * @property {import(\"./WMSServerType.js\").default|string} [serverType] The type of\n * the remote WMS server: `mapserver`, `geoserver` or `qgis`. Only needed if `hidpi` is `true`.\n * @property {import(\"../Image.js\").LoadFunction} [imageLoadFunction] Optional function to load an image given a URL.\n * @property {Object<string,*>} params WMS request parameters.\n * At least a `LAYERS` param is required. `STYLES` is\n * `''` by default. `VERSION` is `1.3.0` by default. `WIDTH`, `HEIGHT`, `BBOX`\n * and `CRS` (`SRS` for WMS version < 1.3.0) will be set dynamically.\n * @property {import(\"../proj.js\").ProjectionLike} projection Projection.\n * @property {number} [ratio=1.5] Ratio. `1` means image requests are the size of the map viewport, `2` means\n * twice the width and height of the map viewport, and so on. Must be `1` or\n * higher.\n * @property {Array<number>} [resolutions] Resolutions.\n * If specified, requests will be made for these resolutions only.\n * @property {string} url WMS service URL.\n */\n\n\n/**\n * @classdesc\n * Source for WMS servers providing single, untiled images.\n *\n * @fires ol/source/Image~ImageSourceEvent\n * @api\n */\nclass ImageWMS extends ImageSource {\n  /**\n   * @param {Options=} [opt_options] ImageWMS options.\n   */\n  constructor(opt_options) {\n\n    const options = opt_options || /** @type {Options} */ ({});\n\n    super({\n      attributions: options.attributions,\n      projection: options.projection,\n      resolutions: options.resolutions\n    });\n\n    /**\n     * @private\n     * @type {?string}\n     */\n    this.crossOrigin_ =\n        options.crossOrigin !== undefined ? options.crossOrigin : null;\n\n    /**\n     * @private\n     * @type {string|undefined}\n     */\n    this.url_ = options.url;\n\n    /**\n     * @private\n     * @type {import(\"../Image.js\").LoadFunction}\n     */\n    this.imageLoadFunction_ = options.imageLoadFunction !== undefined ?\n      options.imageLoadFunction : defaultImageLoadFunction;\n\n    /**\n     * @private\n     * @type {!Object}\n     */\n    this.params_ = options.params || {};\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.v13_ = true;\n    this.updateV13_();\n\n    /**\n     * @private\n     * @type {import(\"./WMSServerType.js\").default|undefined}\n     */\n    this.serverType_ = /** @type {import(\"./WMSServerType.js\").default|undefined} */ (options.serverType);\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.hidpi_ = options.hidpi !== undefined ? options.hidpi : true;\n\n    /**\n     * @private\n     * @type {import(\"../Image.js\").default}\n     */\n    this.image_ = null;\n\n    /**\n     * @private\n     * @type {import(\"../size.js\").Size}\n     */\n    this.imageSize_ = [0, 0];\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.renderedRevision_ = 0;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.ratio_ = options.ratio !== undefined ? options.ratio : 1.5;\n\n  }\n\n  /**\n   * Return the GetFeatureInfo URL for the passed coordinate, resolution, and\n   * projection. Return `undefined` if the GetFeatureInfo URL cannot be\n   * constructed.\n   * @param {import(\"../coordinate.js\").Coordinate} coordinate Coordinate.\n   * @param {number} resolution Resolution.\n   * @param {import(\"../proj.js\").ProjectionLike} projection Projection.\n   * @param {!Object} params GetFeatureInfo params. `INFO_FORMAT` at least should\n   *     be provided. If `QUERY_LAYERS` is not provided then the layers specified\n   *     in the `LAYERS` parameter will be used. `VERSION` should not be\n   *     specified here.\n   * @return {string|undefined} GetFeatureInfo URL.\n   * @api\n   */\n  getGetFeatureInfoUrl(coordinate, resolution, projection, params) {\n    if (this.url_ === undefined) {\n      return undefined;\n    }\n    const projectionObj = getProjection(projection);\n    const sourceProjectionObj = this.getProjection();\n\n    if (sourceProjectionObj && sourceProjectionObj !== projectionObj) {\n      resolution = calculateSourceResolution(sourceProjectionObj, projectionObj, coordinate, resolution);\n      coordinate = transform(coordinate, projectionObj, sourceProjectionObj);\n    }\n\n    const extent = getForViewAndSize(coordinate, resolution, 0,\n      GETFEATUREINFO_IMAGE_SIZE);\n\n    const baseParams = {\n      'SERVICE': 'WMS',\n      'VERSION': DEFAULT_WMS_VERSION,\n      'REQUEST': 'GetFeatureInfo',\n      'FORMAT': 'image/png',\n      'TRANSPARENT': true,\n      'QUERY_LAYERS': this.params_['LAYERS']\n    };\n    assign(baseParams, this.params_, params);\n\n    const x = Math.floor((coordinate[0] - extent[0]) / resolution);\n    const y = Math.floor((extent[3] - coordinate[1]) / resolution);\n    baseParams[this.v13_ ? 'I' : 'X'] = x;\n    baseParams[this.v13_ ? 'J' : 'Y'] = y;\n\n    return this.getRequestUrl_(\n      extent, GETFEATUREINFO_IMAGE_SIZE,\n      1, sourceProjectionObj || projectionObj, baseParams);\n  }\n\n  /**\n   * Get the user-provided params, i.e. those passed to the constructor through\n   * the \"params\" option, and possibly updated using the updateParams method.\n   * @return {Object} Params.\n   * @api\n   */\n  getParams() {\n    return this.params_;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  getImageInternal(extent, resolution, pixelRatio, projection) {\n\n    if (this.url_ === undefined) {\n      return null;\n    }\n\n    resolution = this.findNearestResolution(resolution);\n\n    if (pixelRatio != 1 && (!this.hidpi_ || this.serverType_ === undefined)) {\n      pixelRatio = 1;\n    }\n\n    const imageResolution = resolution / pixelRatio;\n\n    const center = getCenter(extent);\n    const viewWidth = Math.ceil(getWidth(extent) / imageResolution);\n    const viewHeight = Math.ceil(getHeight(extent) / imageResolution);\n    const viewExtent = getForViewAndSize(center, imageResolution, 0,\n      [viewWidth, viewHeight]);\n    const requestWidth = Math.ceil(this.ratio_ * getWidth(extent) / imageResolution);\n    const requestHeight = Math.ceil(this.ratio_ * getHeight(extent) / imageResolution);\n    const requestExtent = getForViewAndSize(center, imageResolution, 0,\n      [requestWidth, requestHeight]);\n\n    const image = this.image_;\n    if (image &&\n        this.renderedRevision_ == this.getRevision() &&\n        image.getResolution() == resolution &&\n        image.getPixelRatio() == pixelRatio &&\n        containsExtent(image.getExtent(), viewExtent)) {\n      return image;\n    }\n\n    const params = {\n      'SERVICE': 'WMS',\n      'VERSION': DEFAULT_WMS_VERSION,\n      'REQUEST': 'GetMap',\n      'FORMAT': 'image/png',\n      'TRANSPARENT': true\n    };\n    assign(params, this.params_);\n\n    this.imageSize_[0] = Math.round(getWidth(requestExtent) / imageResolution);\n    this.imageSize_[1] = Math.round(getHeight(requestExtent) / imageResolution);\n\n    const url = this.getRequestUrl_(requestExtent, this.imageSize_, pixelRatio,\n      projection, params);\n\n    this.image_ = new ImageWrapper(requestExtent, resolution, pixelRatio,\n      url, this.crossOrigin_, this.imageLoadFunction_);\n\n    this.renderedRevision_ = this.getRevision();\n\n    listen(this.image_, EventType.CHANGE,\n      this.handleImageChange, this);\n\n    return this.image_;\n\n  }\n\n  /**\n   * Return the image load function of the source.\n   * @return {import(\"../Image.js\").LoadFunction} The image load function.\n   * @api\n   */\n  getImageLoadFunction() {\n    return this.imageLoadFunction_;\n  }\n\n  /**\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @param {import(\"../size.js\").Size} size Size.\n   * @param {number} pixelRatio Pixel ratio.\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   * @param {Object} params Params.\n   * @return {string} Request URL.\n   * @private\n   */\n  getRequestUrl_(extent, size, pixelRatio, projection, params) {\n\n    assert(this.url_ !== undefined, 9); // `url` must be configured or set using `#setUrl()`\n\n    params[this.v13_ ? 'CRS' : 'SRS'] = projection.getCode();\n\n    if (!('STYLES' in this.params_)) {\n      params['STYLES'] = '';\n    }\n\n    if (pixelRatio != 1) {\n      switch (this.serverType_) {\n        case WMSServerType.GEOSERVER:\n          const dpi = (90 * pixelRatio + 0.5) | 0;\n          if ('FORMAT_OPTIONS' in params) {\n            params['FORMAT_OPTIONS'] += ';dpi:' + dpi;\n          } else {\n            params['FORMAT_OPTIONS'] = 'dpi:' + dpi;\n          }\n          break;\n        case WMSServerType.MAPSERVER:\n          params['MAP_RESOLUTION'] = 90 * pixelRatio;\n          break;\n        case WMSServerType.CARMENTA_SERVER:\n        case WMSServerType.QGIS:\n          params['DPI'] = 90 * pixelRatio;\n          break;\n        default:\n          assert(false, 8); // Unknown `serverType` configured\n          break;\n      }\n    }\n\n    params['WIDTH'] = size[0];\n    params['HEIGHT'] = size[1];\n\n    const axisOrientation = projection.getAxisOrientation();\n    let bbox;\n    if (this.v13_ && axisOrientation.substr(0, 2) == 'ne') {\n      bbox = [extent[1], extent[0], extent[3], extent[2]];\n    } else {\n      bbox = extent;\n    }\n    params['BBOX'] = bbox.join(',');\n\n    return appendParams(/** @type {string} */ (this.url_), params);\n  }\n\n  /**\n   * Return the URL used for this WMS source.\n   * @return {string|undefined} URL.\n   * @api\n   */\n  getUrl() {\n    return this.url_;\n  }\n\n  /**\n   * Set the image load function of the source.\n   * @param {import(\"../Image.js\").LoadFunction} imageLoadFunction Image load function.\n   * @api\n   */\n  setImageLoadFunction(imageLoadFunction) {\n    this.image_ = null;\n    this.imageLoadFunction_ = imageLoadFunction;\n    this.changed();\n  }\n\n  /**\n   * Set the URL to use for requests.\n   * @param {string|undefined} url URL.\n   * @api\n   */\n  setUrl(url) {\n    if (url != this.url_) {\n      this.url_ = url;\n      this.image_ = null;\n      this.changed();\n    }\n  }\n\n  /**\n   * Update the user-provided params.\n   * @param {Object} params Params.\n   * @api\n   */\n  updateParams(params) {\n    assign(this.params_, params);\n    this.updateV13_();\n    this.image_ = null;\n    this.changed();\n  }\n\n  /**\n   * @private\n   */\n  updateV13_() {\n    const version = this.params_['VERSION'] || DEFAULT_WMS_VERSION;\n    this.v13_ = compareVersions(version, '1.3') >= 0;\n  }\n}\n\n\nexport default ImageWMS;\n"]},"metadata":{},"sourceType":"module"}