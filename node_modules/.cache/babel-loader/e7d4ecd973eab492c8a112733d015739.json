{"ast":null,"code":"/**\n * @module ol/interaction/PinchZoom\n */\nimport ViewHint from '../ViewHint.js';\nimport { FALSE } from '../functions.js';\nimport { zoom, zoomWithoutConstraints } from './Interaction.js';\nimport PointerInteraction, { centroid as centroidFromPointers } from './Pointer.js';\n/**\n * @typedef {Object} Options\n * @property {number} [duration=400] Animation duration in milliseconds.\n * @property {boolean} [constrainResolution=false] Zoom to the closest integer\n * zoom level after the pinch gesture ends.\n */\n\n/**\n * @classdesc\n * Allows the user to zoom the map by pinching with two fingers\n * on a touch screen.\n * @api\n */\n\nvar PinchZoom =\n/*@__PURE__*/\nfunction (PointerInteraction) {\n  function PinchZoom(opt_options) {\n    var options = opt_options ? opt_options : {};\n    var pointerOptions =\n    /** @type {import(\"./Pointer.js\").Options} */\n    options;\n\n    if (!pointerOptions.stopDown) {\n      pointerOptions.stopDown = FALSE;\n    }\n\n    PointerInteraction.call(this, pointerOptions);\n    /**\n     * @private\n     * @type {boolean}\n     */\n\n    this.constrainResolution_ = options.constrainResolution || false;\n    /**\n     * @private\n     * @type {import(\"../coordinate.js\").Coordinate}\n     */\n\n    this.anchor_ = null;\n    /**\n     * @private\n     * @type {number}\n     */\n\n    this.duration_ = options.duration !== undefined ? options.duration : 400;\n    /**\n     * @private\n     * @type {number|undefined}\n     */\n\n    this.lastDistance_ = undefined;\n    /**\n     * @private\n     * @type {number}\n     */\n\n    this.lastScaleDelta_ = 1;\n  }\n\n  if (PointerInteraction) PinchZoom.__proto__ = PointerInteraction;\n  PinchZoom.prototype = Object.create(PointerInteraction && PointerInteraction.prototype);\n  PinchZoom.prototype.constructor = PinchZoom;\n  /**\n   * @inheritDoc\n   */\n\n  PinchZoom.prototype.handleDragEvent = function handleDragEvent(mapBrowserEvent) {\n    var scaleDelta = 1.0;\n    var touch0 = this.targetPointers[0];\n    var touch1 = this.targetPointers[1];\n    var dx = touch0.clientX - touch1.clientX;\n    var dy = touch0.clientY - touch1.clientY; // distance between touches\n\n    var distance = Math.sqrt(dx * dx + dy * dy);\n\n    if (this.lastDistance_ !== undefined) {\n      scaleDelta = this.lastDistance_ / distance;\n    }\n\n    this.lastDistance_ = distance;\n    var map = mapBrowserEvent.map;\n    var view = map.getView();\n    var resolution = view.getResolution();\n    var maxResolution = view.getMaxResolution();\n    var minResolution = view.getMinResolution();\n    var newResolution = resolution * scaleDelta;\n\n    if (newResolution > maxResolution) {\n      scaleDelta = maxResolution / resolution;\n      newResolution = maxResolution;\n    } else if (newResolution < minResolution) {\n      scaleDelta = minResolution / resolution;\n      newResolution = minResolution;\n    }\n\n    if (scaleDelta != 1.0) {\n      this.lastScaleDelta_ = scaleDelta;\n    } // scale anchor point.\n\n\n    var viewportPosition = map.getViewport().getBoundingClientRect();\n    var centroid = centroidFromPointers(this.targetPointers);\n    centroid[0] -= viewportPosition.left;\n    centroid[1] -= viewportPosition.top;\n    this.anchor_ = map.getCoordinateFromPixel(centroid); // scale, bypass the resolution constraint\n\n    map.render();\n    zoomWithoutConstraints(view, newResolution, this.anchor_);\n  };\n  /**\n   * @inheritDoc\n   */\n\n\n  PinchZoom.prototype.handleUpEvent = function handleUpEvent(mapBrowserEvent) {\n    if (this.targetPointers.length < 2) {\n      var map = mapBrowserEvent.map;\n      var view = map.getView();\n      view.setHint(ViewHint.INTERACTING, -1);\n      var resolution = view.getResolution();\n\n      if (this.constrainResolution_ || resolution < view.getMinResolution() || resolution > view.getMaxResolution()) {\n        // Zoom to final resolution, with an animation, and provide a\n        // direction not to zoom out/in if user was pinching in/out.\n        // Direction is > 0 if pinching out, and < 0 if pinching in.\n        var direction = this.lastScaleDelta_ - 1;\n        zoom(view, resolution, this.anchor_, this.duration_, direction);\n      }\n\n      return false;\n    } else {\n      return true;\n    }\n  };\n  /**\n   * @inheritDoc\n   */\n\n\n  PinchZoom.prototype.handleDownEvent = function handleDownEvent(mapBrowserEvent) {\n    if (this.targetPointers.length >= 2) {\n      var map = mapBrowserEvent.map;\n      this.anchor_ = null;\n      this.lastDistance_ = undefined;\n      this.lastScaleDelta_ = 1;\n\n      if (!this.handlingDownUpSequence) {\n        map.getView().setHint(ViewHint.INTERACTING, 1);\n      }\n\n      return true;\n    } else {\n      return false;\n    }\n  };\n\n  return PinchZoom;\n}(PointerInteraction);\n\nexport default PinchZoom;","map":{"version":3,"sources":["../../../src/ol/interaction/PinchZoom.js"],"names":["const","super","let"],"mappings":"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","sourcesContent":["/**\n * @module ol/interaction/PinchZoom\n */\nimport ViewHint from '../ViewHint.js';\nimport {FALSE} from '../functions.js';\nimport {zoom, zoomWithoutConstraints} from './Interaction.js';\nimport PointerInteraction, {centroid as centroidFromPointers} from './Pointer.js';\n\n\n/**\n * @typedef {Object} Options\n * @property {number} [duration=400] Animation duration in milliseconds.\n * @property {boolean} [constrainResolution=false] Zoom to the closest integer\n * zoom level after the pinch gesture ends.\n */\n\n\n/**\n * @classdesc\n * Allows the user to zoom the map by pinching with two fingers\n * on a touch screen.\n * @api\n */\nclass PinchZoom extends PointerInteraction {\n  /**\n   * @param {Options=} opt_options Options.\n   */\n  constructor(opt_options) {\n\n    const options = opt_options ? opt_options : {};\n\n    const pointerOptions = /** @type {import(\"./Pointer.js\").Options} */ (options);\n\n    if (!pointerOptions.stopDown) {\n      pointerOptions.stopDown = FALSE;\n    }\n\n    super(pointerOptions);\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.constrainResolution_ = options.constrainResolution || false;\n\n    /**\n     * @private\n     * @type {import(\"../coordinate.js\").Coordinate}\n     */\n    this.anchor_ = null;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.duration_ = options.duration !== undefined ? options.duration : 400;\n\n    /**\n     * @private\n     * @type {number|undefined}\n     */\n    this.lastDistance_ = undefined;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.lastScaleDelta_ = 1;\n\n  }\n\n  /**\n   * @inheritDoc\n   */\n  handleDragEvent(mapBrowserEvent) {\n    let scaleDelta = 1.0;\n\n    const touch0 = this.targetPointers[0];\n    const touch1 = this.targetPointers[1];\n    const dx = touch0.clientX - touch1.clientX;\n    const dy = touch0.clientY - touch1.clientY;\n\n    // distance between touches\n    const distance = Math.sqrt(dx * dx + dy * dy);\n\n    if (this.lastDistance_ !== undefined) {\n      scaleDelta = this.lastDistance_ / distance;\n    }\n    this.lastDistance_ = distance;\n\n\n    const map = mapBrowserEvent.map;\n    const view = map.getView();\n    const resolution = view.getResolution();\n    const maxResolution = view.getMaxResolution();\n    const minResolution = view.getMinResolution();\n    let newResolution = resolution * scaleDelta;\n    if (newResolution > maxResolution) {\n      scaleDelta = maxResolution / resolution;\n      newResolution = maxResolution;\n    } else if (newResolution < minResolution) {\n      scaleDelta = minResolution / resolution;\n      newResolution = minResolution;\n    }\n\n    if (scaleDelta != 1.0) {\n      this.lastScaleDelta_ = scaleDelta;\n    }\n\n    // scale anchor point.\n    const viewportPosition = map.getViewport().getBoundingClientRect();\n    const centroid = centroidFromPointers(this.targetPointers);\n    centroid[0] -= viewportPosition.left;\n    centroid[1] -= viewportPosition.top;\n    this.anchor_ = map.getCoordinateFromPixel(centroid);\n\n    // scale, bypass the resolution constraint\n    map.render();\n    zoomWithoutConstraints(view, newResolution, this.anchor_);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  handleUpEvent(mapBrowserEvent) {\n    if (this.targetPointers.length < 2) {\n      const map = mapBrowserEvent.map;\n      const view = map.getView();\n      view.setHint(ViewHint.INTERACTING, -1);\n      const resolution = view.getResolution();\n      if (this.constrainResolution_ ||\n          resolution < view.getMinResolution() ||\n          resolution > view.getMaxResolution()) {\n        // Zoom to final resolution, with an animation, and provide a\n        // direction not to zoom out/in if user was pinching in/out.\n        // Direction is > 0 if pinching out, and < 0 if pinching in.\n        const direction = this.lastScaleDelta_ - 1;\n        zoom(view, resolution, this.anchor_, this.duration_, direction);\n      }\n      return false;\n    } else {\n      return true;\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  handleDownEvent(mapBrowserEvent) {\n    if (this.targetPointers.length >= 2) {\n      const map = mapBrowserEvent.map;\n      this.anchor_ = null;\n      this.lastDistance_ = undefined;\n      this.lastScaleDelta_ = 1;\n      if (!this.handlingDownUpSequence) {\n        map.getView().setHint(ViewHint.INTERACTING, 1);\n      }\n      return true;\n    } else {\n      return false;\n    }\n  }\n}\n\nexport default PinchZoom;\n"]},"metadata":{},"sourceType":"module"}