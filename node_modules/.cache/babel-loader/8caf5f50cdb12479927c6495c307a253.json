{"ast":null,"code":"import refProperties from './util/ref_properties';\n\nfunction deref(layer, parent) {\n  const result = {};\n\n  for (const k in layer) {\n    if (k !== 'ref') {\n      result[k] = layer[k];\n    }\n  }\n\n  refProperties.forEach(k => {\n    if (k in parent) {\n      result[k] = parent[k];\n    }\n  });\n  return result;\n}\n\nexport default derefLayers;\n/**\n * Given an array of layers, some of which may contain `ref` properties\n * whose value is the `id` of another property, return a new array where\n * such layers have been augmented with the 'type', 'source', etc. properties\n * from the parent layer, and the `ref` property has been removed.\n *\n * The input is not modified. The output may contain references to portions\n * of the input.\n *\n * @private\n * @param {Array<Layer>} layers\n * @returns {Array<Layer>}\n */\n\nfunction derefLayers(layers) {\n  layers = layers.slice();\n  const map = Object.create(null);\n\n  for (let i = 0; i < layers.length; i++) {\n    map[layers[i].id] = layers[i];\n  }\n\n  for (let i = 0; i < layers.length; i++) {\n    if ('ref' in layers[i]) {\n      layers[i] = deref(layers[i], map[layers[i].ref]);\n    }\n  }\n\n  return layers;\n}","map":{"version":3,"sources":["/Users/dirkmennecke77/Desktop/Lageplan/node_modules/@mapbox/mapbox-gl-style-spec/deref.js"],"names":["refProperties","deref","layer","parent","result","k","forEach","derefLayers","layers","slice","map","Object","create","i","length","id","ref"],"mappings":"AACA,OAAOA,aAAP,MAA0B,uBAA1B;;AAEA,SAASC,KAAT,CAAeC,KAAf,EAAsBC,MAAtB,EAA8B;AAC1B,QAAMC,MAAM,GAAG,EAAf;;AAEA,OAAK,MAAMC,CAAX,IAAgBH,KAAhB,EAAuB;AACnB,QAAIG,CAAC,KAAK,KAAV,EAAiB;AACbD,MAAAA,MAAM,CAACC,CAAD,CAAN,GAAYH,KAAK,CAACG,CAAD,CAAjB;AACH;AACJ;;AAEDL,EAAAA,aAAa,CAACM,OAAd,CAAuBD,CAAD,IAAO;AACzB,QAAIA,CAAC,IAAIF,MAAT,EAAiB;AACbC,MAAAA,MAAM,CAACC,CAAD,CAAN,GAAYF,MAAM,CAACE,CAAD,CAAlB;AACH;AACJ,GAJD;AAMA,SAAOD,MAAP;AACH;;AAED,eAAeG,WAAf;AAEA;;;;;;;;;;;;;;AAaA,SAASA,WAAT,CAAqBC,MAArB,EAA6B;AACzBA,EAAAA,MAAM,GAAGA,MAAM,CAACC,KAAP,EAAT;AAEA,QAAMC,GAAG,GAAGC,MAAM,CAACC,MAAP,CAAc,IAAd,CAAZ;;AACA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGL,MAAM,CAACM,MAA3B,EAAmCD,CAAC,EAApC,EAAwC;AACpCH,IAAAA,GAAG,CAACF,MAAM,CAACK,CAAD,CAAN,CAAUE,EAAX,CAAH,GAAoBP,MAAM,CAACK,CAAD,CAA1B;AACH;;AAED,OAAK,IAAIA,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGL,MAAM,CAACM,MAA3B,EAAmCD,CAAC,EAApC,EAAwC;AACpC,QAAI,SAASL,MAAM,CAACK,CAAD,CAAnB,EAAwB;AACpBL,MAAAA,MAAM,CAACK,CAAD,CAAN,GAAYZ,KAAK,CAACO,MAAM,CAACK,CAAD,CAAP,EAAYH,GAAG,CAACF,MAAM,CAACK,CAAD,CAAN,CAAUG,GAAX,CAAf,CAAjB;AACH;AACJ;;AAED,SAAOR,MAAP;AACH","sourcesContent":["\nimport refProperties from './util/ref_properties';\n\nfunction deref(layer, parent) {\n    const result = {};\n\n    for (const k in layer) {\n        if (k !== 'ref') {\n            result[k] = layer[k];\n        }\n    }\n\n    refProperties.forEach((k) => {\n        if (k in parent) {\n            result[k] = parent[k];\n        }\n    });\n\n    return result;\n}\n\nexport default derefLayers;\n\n/**\n * Given an array of layers, some of which may contain `ref` properties\n * whose value is the `id` of another property, return a new array where\n * such layers have been augmented with the 'type', 'source', etc. properties\n * from the parent layer, and the `ref` property has been removed.\n *\n * The input is not modified. The output may contain references to portions\n * of the input.\n *\n * @private\n * @param {Array<Layer>} layers\n * @returns {Array<Layer>}\n */\nfunction derefLayers(layers) {\n    layers = layers.slice();\n\n    const map = Object.create(null);\n    for (let i = 0; i < layers.length; i++) {\n        map[layers[i].id] = layers[i];\n    }\n\n    for (let i = 0; i < layers.length; i++) {\n        if ('ref' in layers[i]) {\n            layers[i] = deref(layers[i], map[layers[i].ref]);\n        }\n    }\n\n    return layers;\n}\n"]},"metadata":{},"sourceType":"module"}