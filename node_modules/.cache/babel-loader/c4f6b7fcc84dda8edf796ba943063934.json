{"ast":null,"code":"/**\n * @module ol/MapBrowserEvent\n */\nimport MapEvent from './MapEvent.js';\n/**\n * @classdesc\n * Events emitted as map browser events are instances of this type.\n * See {@link module:ol/PluggableMap~PluggableMap} for which events trigger a map browser event.\n */\n\nvar MapBrowserEvent =\n/*@__PURE__*/\nfunction (MapEvent) {\n  function MapBrowserEvent(type, map, browserEvent, opt_dragging, opt_frameState) {\n    MapEvent.call(this, type, map, opt_frameState);\n    /**\n     * The original browser event.\n     * @const\n     * @type {Event}\n     * @api\n     */\n\n    this.originalEvent = browserEvent;\n    /**\n     * The map pixel relative to the viewport corresponding to the original browser event.\n     * @type {import(\"./pixel.js\").Pixel}\n     * @api\n     */\n\n    this.pixel = map.getEventPixel(browserEvent);\n    /**\n     * The coordinate in view projection corresponding to the original browser event.\n     * @type {import(\"./coordinate.js\").Coordinate}\n     * @api\n     */\n\n    this.coordinate = map.getCoordinateFromPixel(this.pixel);\n    /**\n     * Indicates if the map is currently being dragged. Only set for\n     * `POINTERDRAG` and `POINTERMOVE` events. Default is `false`.\n     *\n     * @type {boolean}\n     * @api\n     */\n\n    this.dragging = opt_dragging !== undefined ? opt_dragging : false;\n  }\n\n  if (MapEvent) MapBrowserEvent.__proto__ = MapEvent;\n  MapBrowserEvent.prototype = Object.create(MapEvent && MapEvent.prototype);\n  MapBrowserEvent.prototype.constructor = MapBrowserEvent;\n  /**\n   * Prevents the default browser action.\n   * See https://developer.mozilla.org/en-US/docs/Web/API/event.preventDefault.\n   * @override\n   * @api\n   */\n\n  MapBrowserEvent.prototype.preventDefault = function preventDefault() {\n    MapEvent.prototype.preventDefault.call(this);\n    this.originalEvent.preventDefault();\n  };\n  /**\n   * Prevents further propagation of the current event.\n   * See https://developer.mozilla.org/en-US/docs/Web/API/event.stopPropagation.\n   * @override\n   * @api\n   */\n\n\n  MapBrowserEvent.prototype.stopPropagation = function stopPropagation() {\n    MapEvent.prototype.stopPropagation.call(this);\n    this.originalEvent.stopPropagation();\n  };\n\n  return MapBrowserEvent;\n}(MapEvent);\n\nexport default MapBrowserEvent;","map":{"version":3,"sources":["../../src/ol/MapBrowserEvent.js"],"names":["super"],"mappings":"AAAA;;;AAGA,OAAO,QAAP,MAAqB,eAArB;;;;;;;AAOA,IAAM,eAAe;AAAiB;AAAA,UAAA,QAAA,EAAA;AASpC,WAAA,eAAA,CAAY,IAAZ,EAAkB,GAAlB,EAAuB,YAAvB,EAAqC,YAArC,EAAmD,cAAnD,EAAmE;AAEjEA,IAAAA,QAAAA,CAAAA,IAAAA,CAAK,IAALA,EAAM,IAANA,EAAY,GAAZA,EAAiB,cAAjBA;;;;;;;;AAQA,SAAK,aAAL,GAAqB,YAArB;;;;;;;AAOA,SAAK,KAAL,GAAa,GAAG,CAAC,aAAJ,CAAkB,YAAlB,CAAb;;;;;;;AAOA,SAAK,UAAL,GAAkB,GAAG,CAAC,sBAAJ,CAA2B,KAAK,KAAhC,CAAlB;;;;;;;;;AASA,SAAK,QAAL,GAAgB,YAAY,KAAK,SAAjB,GAA6B,YAA7B,GAA4C,KAA5D;;;;;0CAED,e;;;;;;;;4BAQD,c,GAAA,SAAA,cAAA,GAAiB;AACfA,IAAAA,QAAAA,CAAAA,SAAAA,CAAM,cAANA,CAAM,IAANA,CAAoB,IAApBA;AACA,SAAK,aAAL,CAAmB,cAAnB;AACD,G;;;;;;;;;4BAQD,e,GAAA,SAAA,eAAA,GAAkB;AAChBA,IAAAA,QAAAA,CAAAA,SAAAA,CAAM,eAANA,CAAM,IAANA,CAAqB,IAArBA;AACA,SAAK,aAAL,CAAmB,eAAnB;AACD,G;;;CAlEmC,CAAR,QAAQ,CAAtC;;AAsEA,eAAe,eAAf","sourcesContent":["/**\n * @module ol/MapBrowserEvent\n */\nimport MapEvent from './MapEvent.js';\n\n/**\n * @classdesc\n * Events emitted as map browser events are instances of this type.\n * See {@link module:ol/PluggableMap~PluggableMap} for which events trigger a map browser event.\n */\nclass MapBrowserEvent extends MapEvent {\n\n  /**\n   * @param {string} type Event type.\n   * @param {import(\"./PluggableMap.js\").default} map Map.\n   * @param {Event} browserEvent Browser event.\n   * @param {boolean=} opt_dragging Is the map currently being dragged?\n   * @param {?import(\"./PluggableMap.js\").FrameState=} opt_frameState Frame state.\n   */\n  constructor(type, map, browserEvent, opt_dragging, opt_frameState) {\n\n    super(type, map, opt_frameState);\n\n    /**\n     * The original browser event.\n     * @const\n     * @type {Event}\n     * @api\n     */\n    this.originalEvent = browserEvent;\n\n    /**\n     * The map pixel relative to the viewport corresponding to the original browser event.\n     * @type {import(\"./pixel.js\").Pixel}\n     * @api\n     */\n    this.pixel = map.getEventPixel(browserEvent);\n\n    /**\n     * The coordinate in view projection corresponding to the original browser event.\n     * @type {import(\"./coordinate.js\").Coordinate}\n     * @api\n     */\n    this.coordinate = map.getCoordinateFromPixel(this.pixel);\n\n    /**\n     * Indicates if the map is currently being dragged. Only set for\n     * `POINTERDRAG` and `POINTERMOVE` events. Default is `false`.\n     *\n     * @type {boolean}\n     * @api\n     */\n    this.dragging = opt_dragging !== undefined ? opt_dragging : false;\n\n  }\n\n  /**\n   * Prevents the default browser action.\n   * See https://developer.mozilla.org/en-US/docs/Web/API/event.preventDefault.\n   * @override\n   * @api\n   */\n  preventDefault() {\n    super.preventDefault();\n    this.originalEvent.preventDefault();\n  }\n\n  /**\n   * Prevents further propagation of the current event.\n   * See https://developer.mozilla.org/en-US/docs/Web/API/event.stopPropagation.\n   * @override\n   * @api\n   */\n  stopPropagation() {\n    super.stopPropagation();\n    this.originalEvent.stopPropagation();\n  }\n}\n\n\nexport default MapBrowserEvent;\n"]},"metadata":{},"sourceType":"module"}