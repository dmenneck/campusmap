{"ast":null,"code":"/**\n * @module ol/style/Text\n */\nimport Fill from '../style/Fill.js';\nimport TextPlacement from '../style/TextPlacement.js';\n/**\n * The default fill color to use if no fill was set at construction time; a\n * blackish `#333`.\n *\n * @const {string}\n */\n\nconst DEFAULT_FILL_COLOR = '#333';\n/**\n * @typedef {Object} Options\n * @property {string} [font] Font style as CSS 'font' value, see:\n * {@link https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/font}. Default is '10px sans-serif'\n * @property {number} [maxAngle] When `placement` is set to `'line'`, allow a maximum angle between adjacent characters.\n * The expected value is in radians, and the default is 45Â° (`Math.PI / 4`).\n * @property {number} [offsetX=0] Horizontal text offset in pixels. A positive will shift the text right.\n * @property {number} [offsetY=0] Vertical text offset in pixels. A positive will shift the text down.\n * @property {boolean} [overflow=false] For polygon labels or when `placement` is set to `'line'`, allow text to exceed\n * the width of the polygon at the label position or the length of the path that it follows.\n * @property {module:ol/style/TextPlacement|string} [placement] Text placement.\n * @property {number} [scale] Scale.\n * @property {boolean} [rotateWithView=false] Whether to rotate the text with the view.\n * @property {number} [rotation=0] Rotation in radians (positive rotation clockwise).\n * @property {string} [text] Text content.\n * @property {string} [textAlign] Text alignment. Possible values: 'left', 'right', 'center', 'end' or 'start'.\n * Default is 'center' for `placement: 'point'`. For `placement: 'line'`, the default is to let the renderer choose a\n * placement where `maxAngle` is not exceeded.\n * @property {string} [textBaseline='middle'] Text base line. Possible values: 'bottom', 'top', 'middle', 'alphabetic',\n * 'hanging', 'ideographic'.\n * @property {module:ol/style/Fill} [fill] Fill style. If none is provided, we'll use a dark fill-style (#333).\n * @property {module:ol/style/Stroke} [stroke] Stroke style.\n * @property {module:ol/style/Fill} [backgroundFill] Fill style for the text background when `placement` is\n * `'point'`. Default is no fill.\n * @property {module:ol/style/Stroke} [backgroundStroke] Stroke style for the text background  when `placement`\n * is `'point'`. Default is no stroke.\n * @property {Array.<number>} [padding=[0, 0, 0, 0]] Padding in pixels around the text for decluttering and background. The order of\n * values in the array is `[top, right, bottom, left]`.\n */\n\n/**\n * @classdesc\n * Set text style for vector features.\n *\n * @constructor\n * @param {module:ol/style/Text~Options=} opt_options Options.\n * @api\n */\n\nconst Text = function (opt_options) {\n  const options = opt_options || {};\n  /**\n   * @private\n   * @type {string|undefined}\n   */\n\n  this.font_ = options.font;\n  /**\n   * @private\n   * @type {number|undefined}\n   */\n\n  this.rotation_ = options.rotation;\n  /**\n   * @private\n   * @type {boolean|undefined}\n   */\n\n  this.rotateWithView_ = options.rotateWithView;\n  /**\n   * @private\n   * @type {number|undefined}\n   */\n\n  this.scale_ = options.scale;\n  /**\n   * @private\n   * @type {string|undefined}\n   */\n\n  this.text_ = options.text;\n  /**\n   * @private\n   * @type {string|undefined}\n   */\n\n  this.textAlign_ = options.textAlign;\n  /**\n   * @private\n   * @type {string|undefined}\n   */\n\n  this.textBaseline_ = options.textBaseline;\n  /**\n   * @private\n   * @type {module:ol/style/Fill}\n   */\n\n  this.fill_ = options.fill !== undefined ? options.fill : new Fill({\n    color: DEFAULT_FILL_COLOR\n  });\n  /**\n   * @private\n   * @type {number}\n   */\n\n  this.maxAngle_ = options.maxAngle !== undefined ? options.maxAngle : Math.PI / 4;\n  /**\n   * @private\n   * @type {module:ol/style/TextPlacement|string}\n   */\n\n  this.placement_ = options.placement !== undefined ? options.placement : TextPlacement.POINT;\n  /**\n   * @private\n   * @type {boolean}\n   */\n\n  this.overflow_ = !!options.overflow;\n  /**\n   * @private\n   * @type {module:ol/style/Stroke}\n   */\n\n  this.stroke_ = options.stroke !== undefined ? options.stroke : null;\n  /**\n   * @private\n   * @type {number}\n   */\n\n  this.offsetX_ = options.offsetX !== undefined ? options.offsetX : 0;\n  /**\n   * @private\n   * @type {number}\n   */\n\n  this.offsetY_ = options.offsetY !== undefined ? options.offsetY : 0;\n  /**\n   * @private\n   * @type {module:ol/style/Fill}\n   */\n\n  this.backgroundFill_ = options.backgroundFill ? options.backgroundFill : null;\n  /**\n   * @private\n   * @type {module:ol/style/Stroke}\n   */\n\n  this.backgroundStroke_ = options.backgroundStroke ? options.backgroundStroke : null;\n  /**\n   * @private\n   * @type {Array.<number>}\n   */\n\n  this.padding_ = options.padding === undefined ? null : options.padding;\n};\n/**\n * Clones the style.\n * @return {module:ol/style/Text} The cloned style.\n * @api\n */\n\n\nText.prototype.clone = function () {\n  return new Text({\n    font: this.getFont(),\n    placement: this.getPlacement(),\n    maxAngle: this.getMaxAngle(),\n    overflow: this.getOverflow(),\n    rotation: this.getRotation(),\n    rotateWithView: this.getRotateWithView(),\n    scale: this.getScale(),\n    text: this.getText(),\n    textAlign: this.getTextAlign(),\n    textBaseline: this.getTextBaseline(),\n    fill: this.getFill() ? this.getFill().clone() : undefined,\n    stroke: this.getStroke() ? this.getStroke().clone() : undefined,\n    offsetX: this.getOffsetX(),\n    offsetY: this.getOffsetY(),\n    backgroundFill: this.getBackgroundFill() ? this.getBackgroundFill().clone() : undefined,\n    backgroundStroke: this.getBackgroundStroke() ? this.getBackgroundStroke().clone() : undefined\n  });\n};\n/**\n * Get the `overflow` configuration.\n * @return {boolean} Let text overflow the length of the path they follow.\n * @api\n */\n\n\nText.prototype.getOverflow = function () {\n  return this.overflow_;\n};\n/**\n * Get the font name.\n * @return {string|undefined} Font.\n * @api\n */\n\n\nText.prototype.getFont = function () {\n  return this.font_;\n};\n/**\n * Get the maximum angle between adjacent characters.\n * @return {number} Angle in radians.\n * @api\n */\n\n\nText.prototype.getMaxAngle = function () {\n  return this.maxAngle_;\n};\n/**\n * Get the label placement.\n * @return {module:ol/style/TextPlacement|string} Text placement.\n * @api\n */\n\n\nText.prototype.getPlacement = function () {\n  return this.placement_;\n};\n/**\n * Get the x-offset for the text.\n * @return {number} Horizontal text offset.\n * @api\n */\n\n\nText.prototype.getOffsetX = function () {\n  return this.offsetX_;\n};\n/**\n * Get the y-offset for the text.\n * @return {number} Vertical text offset.\n * @api\n */\n\n\nText.prototype.getOffsetY = function () {\n  return this.offsetY_;\n};\n/**\n * Get the fill style for the text.\n * @return {module:ol/style/Fill} Fill style.\n * @api\n */\n\n\nText.prototype.getFill = function () {\n  return this.fill_;\n};\n/**\n * Determine whether the text rotates with the map.\n * @return {boolean|undefined} Rotate with map.\n * @api\n */\n\n\nText.prototype.getRotateWithView = function () {\n  return this.rotateWithView_;\n};\n/**\n * Get the text rotation.\n * @return {number|undefined} Rotation.\n * @api\n */\n\n\nText.prototype.getRotation = function () {\n  return this.rotation_;\n};\n/**\n * Get the text scale.\n * @return {number|undefined} Scale.\n * @api\n */\n\n\nText.prototype.getScale = function () {\n  return this.scale_;\n};\n/**\n * Get the stroke style for the text.\n * @return {module:ol/style/Stroke} Stroke style.\n * @api\n */\n\n\nText.prototype.getStroke = function () {\n  return this.stroke_;\n};\n/**\n * Get the text to be rendered.\n * @return {string|undefined} Text.\n * @api\n */\n\n\nText.prototype.getText = function () {\n  return this.text_;\n};\n/**\n * Get the text alignment.\n * @return {string|undefined} Text align.\n * @api\n */\n\n\nText.prototype.getTextAlign = function () {\n  return this.textAlign_;\n};\n/**\n * Get the text baseline.\n * @return {string|undefined} Text baseline.\n * @api\n */\n\n\nText.prototype.getTextBaseline = function () {\n  return this.textBaseline_;\n};\n/**\n * Get the background fill style for the text.\n * @return {module:ol/style/Fill} Fill style.\n * @api\n */\n\n\nText.prototype.getBackgroundFill = function () {\n  return this.backgroundFill_;\n};\n/**\n * Get the background stroke style for the text.\n * @return {module:ol/style/Stroke} Stroke style.\n * @api\n */\n\n\nText.prototype.getBackgroundStroke = function () {\n  return this.backgroundStroke_;\n};\n/**\n * Get the padding for the text.\n * @return {Array.<number>} Padding.\n * @api\n */\n\n\nText.prototype.getPadding = function () {\n  return this.padding_;\n};\n/**\n * Set the `overflow` property.\n *\n * @param {boolean} overflow Let text overflow the path that it follows.\n * @api\n */\n\n\nText.prototype.setOverflow = function (overflow) {\n  this.overflow_ = overflow;\n};\n/**\n * Set the font.\n *\n * @param {string|undefined} font Font.\n * @api\n */\n\n\nText.prototype.setFont = function (font) {\n  this.font_ = font;\n};\n/**\n * Set the maximum angle between adjacent characters.\n *\n * @param {number} maxAngle Angle in radians.\n * @api\n */\n\n\nText.prototype.setMaxAngle = function (maxAngle) {\n  this.maxAngle_ = maxAngle;\n};\n/**\n * Set the x offset.\n *\n * @param {number} offsetX Horizontal text offset.\n * @api\n */\n\n\nText.prototype.setOffsetX = function (offsetX) {\n  this.offsetX_ = offsetX;\n};\n/**\n * Set the y offset.\n *\n * @param {number} offsetY Vertical text offset.\n * @api\n */\n\n\nText.prototype.setOffsetY = function (offsetY) {\n  this.offsetY_ = offsetY;\n};\n/**\n * Set the text placement.\n *\n * @param {module:ol/style/TextPlacement|string} placement Placement.\n * @api\n */\n\n\nText.prototype.setPlacement = function (placement) {\n  this.placement_ = placement;\n};\n/**\n * Set the fill.\n *\n * @param {module:ol/style/Fill} fill Fill style.\n * @api\n */\n\n\nText.prototype.setFill = function (fill) {\n  this.fill_ = fill;\n};\n/**\n * Set the rotation.\n *\n * @param {number|undefined} rotation Rotation.\n * @api\n */\n\n\nText.prototype.setRotation = function (rotation) {\n  this.rotation_ = rotation;\n};\n/**\n * Set the scale.\n *\n * @param {number|undefined} scale Scale.\n * @api\n */\n\n\nText.prototype.setScale = function (scale) {\n  this.scale_ = scale;\n};\n/**\n * Set the stroke.\n *\n * @param {module:ol/style/Stroke} stroke Stroke style.\n * @api\n */\n\n\nText.prototype.setStroke = function (stroke) {\n  this.stroke_ = stroke;\n};\n/**\n * Set the text.\n *\n * @param {string|undefined} text Text.\n * @api\n */\n\n\nText.prototype.setText = function (text) {\n  this.text_ = text;\n};\n/**\n * Set the text alignment.\n *\n * @param {string|undefined} textAlign Text align.\n * @api\n */\n\n\nText.prototype.setTextAlign = function (textAlign) {\n  this.textAlign_ = textAlign;\n};\n/**\n * Set the text baseline.\n *\n * @param {string|undefined} textBaseline Text baseline.\n * @api\n */\n\n\nText.prototype.setTextBaseline = function (textBaseline) {\n  this.textBaseline_ = textBaseline;\n};\n/**\n * Set the background fill.\n *\n * @param {module:ol/style/Fill} fill Fill style.\n * @api\n */\n\n\nText.prototype.setBackgroundFill = function (fill) {\n  this.backgroundFill_ = fill;\n};\n/**\n * Set the background stroke.\n *\n * @param {module:ol/style/Stroke} stroke Stroke style.\n * @api\n */\n\n\nText.prototype.setBackgroundStroke = function (stroke) {\n  this.backgroundStroke_ = stroke;\n};\n/**\n * Set the padding (`[top, right, bottom, left]`).\n *\n * @param {!Array.<number>} padding Padding.\n * @api\n */\n\n\nText.prototype.setPadding = function (padding) {\n  this.padding_ = padding;\n};\n\nexport default Text;","map":null,"metadata":{},"sourceType":"module"}