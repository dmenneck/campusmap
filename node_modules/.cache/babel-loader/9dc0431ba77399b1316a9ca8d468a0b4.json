{"ast":null,"code":"/**\n * ag-grid-community - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components\n * @version v21.2.2\n * @link http://www.ag-grid.com/\n * @license MIT\n */\n\"use strict\";\n\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nvar __metadata = this && this.__metadata || function (k, v) {\n  if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\n\nvar __param = this && this.__param || function (paramIndex, decorator) {\n  return function (target, key) {\n    decorator(target, key, paramIndex);\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar gridOptionsWrapper_1 = require(\"./gridOptionsWrapper\");\n\nvar columnController_1 = require(\"./columnController/columnController\");\n\nvar eventService_1 = require(\"./eventService\");\n\nvar logger_1 = require(\"./logger\");\n\nvar events_1 = require(\"./events\");\n\nvar context_1 = require(\"./context/context\");\n\nvar context_2 = require(\"./context/context\");\n\nvar context_3 = require(\"./context/context\");\n\nvar context_4 = require(\"./context/context\");\n\nvar AlignedGridsService =\n/** @class */\nfunction () {\n  function AlignedGridsService() {\n    // flag to mark if we are consuming. to avoid cyclic events (ie other grid firing back to master\n    // while processing a master event) we mark this if consuming an event, and if we are, then\n    // we don't fire back any events.\n    this.consuming = false;\n  }\n\n  AlignedGridsService.prototype.setBeans = function (loggerFactory) {\n    this.logger = loggerFactory.create('AlignedGridsService');\n  };\n\n  AlignedGridsService.prototype.registerGridComp = function (gridPanel) {\n    this.gridPanel = gridPanel;\n  };\n\n  AlignedGridsService.prototype.init = function () {\n    this.eventService.addEventListener(events_1.Events.EVENT_COLUMN_MOVED, this.fireColumnEvent.bind(this));\n    this.eventService.addEventListener(events_1.Events.EVENT_COLUMN_VISIBLE, this.fireColumnEvent.bind(this));\n    this.eventService.addEventListener(events_1.Events.EVENT_COLUMN_PINNED, this.fireColumnEvent.bind(this));\n    this.eventService.addEventListener(events_1.Events.EVENT_COLUMN_GROUP_OPENED, this.fireColumnEvent.bind(this));\n    this.eventService.addEventListener(events_1.Events.EVENT_COLUMN_RESIZED, this.fireColumnEvent.bind(this));\n    this.eventService.addEventListener(events_1.Events.EVENT_BODY_SCROLL, this.fireScrollEvent.bind(this));\n  }; // common logic across all the fire methods\n\n\n  AlignedGridsService.prototype.fireEvent = function (callback) {\n    // if we are already consuming, then we are acting on an event from a master,\n    // so we don't cause a cyclic firing of events\n    if (this.consuming) {\n      return;\n    } // iterate through the aligned grids, and pass each aligned grid service to the callback\n\n\n    var otherGrids = this.gridOptionsWrapper.getAlignedGrids();\n\n    if (otherGrids) {\n      otherGrids.forEach(function (otherGridOptions) {\n        if (otherGridOptions.api) {\n          var alignedGridService = otherGridOptions.api.__getAlignedGridService();\n\n          callback(alignedGridService);\n        }\n      });\n    }\n  }; // common logic across all consume methods. very little common logic, however extracting\n  // guarantees consistency across the methods.\n\n\n  AlignedGridsService.prototype.onEvent = function (callback) {\n    this.consuming = true;\n    callback();\n    this.consuming = false;\n  };\n\n  AlignedGridsService.prototype.fireColumnEvent = function (event) {\n    this.fireEvent(function (alignedGridsService) {\n      alignedGridsService.onColumnEvent(event);\n    });\n  };\n\n  AlignedGridsService.prototype.fireScrollEvent = function (event) {\n    if (event.direction !== 'horizontal') {\n      return;\n    }\n\n    this.fireEvent(function (alignedGridsService) {\n      alignedGridsService.onScrollEvent(event);\n    });\n  };\n\n  AlignedGridsService.prototype.onScrollEvent = function (event) {\n    var _this = this;\n\n    this.onEvent(function () {\n      _this.gridPanel.setHorizontalScrollPosition(event.left);\n    });\n  };\n\n  AlignedGridsService.prototype.getMasterColumns = function (event) {\n    var result = [];\n\n    if (event.columns) {\n      event.columns.forEach(function (column) {\n        result.push(column);\n      });\n    } else if (event.column) {\n      result.push(event.column);\n    }\n\n    return result;\n  };\n\n  AlignedGridsService.prototype.getColumnIds = function (event) {\n    var result = [];\n\n    if (event.columns) {\n      event.columns.forEach(function (column) {\n        result.push(column.getColId());\n      });\n    } else if (event.column) {\n      result.push(event.column.getColId());\n    }\n\n    return result;\n  };\n\n  AlignedGridsService.prototype.onColumnEvent = function (event) {\n    var _this = this;\n\n    this.onEvent(function () {\n      switch (event.type) {\n        case events_1.Events.EVENT_COLUMN_MOVED:\n        case events_1.Events.EVENT_COLUMN_VISIBLE:\n        case events_1.Events.EVENT_COLUMN_PINNED:\n        case events_1.Events.EVENT_COLUMN_RESIZED:\n          var colEvent = event;\n\n          _this.processColumnEvent(colEvent);\n\n          break;\n\n        case events_1.Events.EVENT_COLUMN_GROUP_OPENED:\n          var groupOpenedEvent = event;\n\n          _this.processGroupOpenedEvent(groupOpenedEvent);\n\n          break;\n\n        case events_1.Events.EVENT_COLUMN_PIVOT_CHANGED:\n          // we cannot support pivoting with aligned grids as the columns will be out of sync as the\n          // grids will have columns created based on the row data of the grid.\n          console.warn('ag-Grid: pivoting is not supported with aligned grids. ' + 'You can only use one of these features at a time in a grid.');\n          break;\n      }\n    });\n  };\n\n  AlignedGridsService.prototype.processGroupOpenedEvent = function (groupOpenedEvent) {\n    // likewise for column group\n    var masterColumnGroup = groupOpenedEvent.columnGroup;\n    var otherColumnGroup;\n\n    if (masterColumnGroup) {\n      var groupId = masterColumnGroup.getGroupId();\n      otherColumnGroup = this.columnController.getOriginalColumnGroup(groupId);\n    }\n\n    if (masterColumnGroup && !otherColumnGroup) {\n      return;\n    }\n\n    this.logger.log('onColumnEvent-> processing ' + groupOpenedEvent + ' expanded = ' + masterColumnGroup.isExpanded());\n    this.columnController.setColumnGroupOpened(otherColumnGroup, masterColumnGroup.isExpanded(), \"alignedGridChanged\");\n  };\n\n  AlignedGridsService.prototype.processColumnEvent = function (colEvent) {\n    var _this = this; // the column in the event is from the master grid. need to\n    // look up the equivalent from this (other) grid\n\n\n    var masterColumn = colEvent.column;\n    var otherColumn;\n\n    if (masterColumn) {\n      otherColumn = this.columnController.getPrimaryColumn(masterColumn.getColId());\n    } // if event was with respect to a master column, that is not present in this\n    // grid, then we ignore the event\n\n\n    if (masterColumn && !otherColumn) {\n      return;\n    } // in time, all the methods below should use the column ids, it's a more generic way\n    // of handling columns, and also allows for single or multi column events\n\n\n    var columnIds = this.getColumnIds(colEvent);\n    var masterColumns = this.getMasterColumns(colEvent);\n\n    switch (colEvent.type) {\n      case events_1.Events.EVENT_COLUMN_MOVED:\n        var movedEvent = colEvent;\n        this.logger.log(\"onColumnEvent-> processing \" + colEvent.type + \" toIndex = \" + movedEvent.toIndex);\n        this.columnController.moveColumns(columnIds, movedEvent.toIndex, \"alignedGridChanged\");\n        break;\n\n      case events_1.Events.EVENT_COLUMN_VISIBLE:\n        var visibleEvent = colEvent;\n        this.logger.log(\"onColumnEvent-> processing \" + colEvent.type + \" visible = \" + visibleEvent.visible);\n        this.columnController.setColumnsVisible(columnIds, visibleEvent.visible, \"alignedGridChanged\");\n        break;\n\n      case events_1.Events.EVENT_COLUMN_PINNED:\n        var pinnedEvent = colEvent;\n        this.logger.log(\"onColumnEvent-> processing \" + colEvent.type + \" pinned = \" + pinnedEvent.pinned);\n        this.columnController.setColumnsPinned(columnIds, pinnedEvent.pinned, \"alignedGridChanged\");\n        break;\n\n      case events_1.Events.EVENT_COLUMN_RESIZED:\n        var resizedEvent_1 = colEvent;\n        masterColumns.forEach(function (column) {\n          _this.logger.log(\"onColumnEvent-> processing \" + colEvent.type + \" actualWidth = \" + column.getActualWidth());\n\n          _this.columnController.setColumnWidth(column.getColId(), column.getActualWidth(), false, resizedEvent_1.finished, \"alignedGridChanged\");\n        });\n        break;\n    }\n\n    var isVerticalScrollShowing = this.gridPanel.isVerticalScrollShowing();\n    var alignedGrids = this.gridOptionsWrapper.getAlignedGrids();\n    alignedGrids.forEach(function (grid) {\n      grid.api.setAlwaysShowVerticalScroll(isVerticalScrollShowing);\n    });\n  };\n\n  __decorate([context_3.Autowired('gridOptionsWrapper'), __metadata(\"design:type\", gridOptionsWrapper_1.GridOptionsWrapper)], AlignedGridsService.prototype, \"gridOptionsWrapper\", void 0);\n\n  __decorate([context_3.Autowired('columnController'), __metadata(\"design:type\", columnController_1.ColumnController)], AlignedGridsService.prototype, \"columnController\", void 0);\n\n  __decorate([context_3.Autowired('eventService'), __metadata(\"design:type\", eventService_1.EventService)], AlignedGridsService.prototype, \"eventService\", void 0);\n\n  __decorate([__param(0, context_2.Qualifier('loggerFactory')), __metadata(\"design:type\", Function), __metadata(\"design:paramtypes\", [logger_1.LoggerFactory]), __metadata(\"design:returntype\", void 0)], AlignedGridsService.prototype, \"setBeans\", null);\n\n  __decorate([context_4.PostConstruct, __metadata(\"design:type\", Function), __metadata(\"design:paramtypes\", []), __metadata(\"design:returntype\", void 0)], AlignedGridsService.prototype, \"init\", null);\n\n  AlignedGridsService = __decorate([context_1.Bean('alignedGridsService')], AlignedGridsService);\n  return AlignedGridsService;\n}();\n\nexports.AlignedGridsService = AlignedGridsService;","map":{"version":3,"sources":["/Users/dirkmennecke77/Desktop/Lageplan/node_modules/ag-grid-community/dist/lib/alignedGridsService.js"],"names":["__decorate","decorators","target","key","desc","c","arguments","length","r","Object","getOwnPropertyDescriptor","d","Reflect","decorate","i","defineProperty","__metadata","k","v","metadata","__param","paramIndex","decorator","exports","value","gridOptionsWrapper_1","require","columnController_1","eventService_1","logger_1","events_1","context_1","context_2","context_3","context_4","AlignedGridsService","consuming","prototype","setBeans","loggerFactory","logger","create","registerGridComp","gridPanel","init","eventService","addEventListener","Events","EVENT_COLUMN_MOVED","fireColumnEvent","bind","EVENT_COLUMN_VISIBLE","EVENT_COLUMN_PINNED","EVENT_COLUMN_GROUP_OPENED","EVENT_COLUMN_RESIZED","EVENT_BODY_SCROLL","fireScrollEvent","fireEvent","callback","otherGrids","gridOptionsWrapper","getAlignedGrids","forEach","otherGridOptions","api","alignedGridService","__getAlignedGridService","onEvent","event","alignedGridsService","onColumnEvent","direction","onScrollEvent","_this","setHorizontalScrollPosition","left","getMasterColumns","result","columns","column","push","getColumnIds","getColId","type","colEvent","processColumnEvent","groupOpenedEvent","processGroupOpenedEvent","EVENT_COLUMN_PIVOT_CHANGED","console","warn","masterColumnGroup","columnGroup","otherColumnGroup","groupId","getGroupId","columnController","getOriginalColumnGroup","log","isExpanded","setColumnGroupOpened","masterColumn","otherColumn","getPrimaryColumn","columnIds","masterColumns","movedEvent","toIndex","moveColumns","visibleEvent","visible","setColumnsVisible","pinnedEvent","pinned","setColumnsPinned","resizedEvent_1","getActualWidth","setColumnWidth","finished","isVerticalScrollShowing","alignedGrids","grid","setAlwaysShowVerticalScroll","Autowired","GridOptionsWrapper","ColumnController","EventService","Qualifier","Function","LoggerFactory","PostConstruct","Bean"],"mappings":"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","sourcesContent":["/**\n * ag-grid-community - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components\n * @version v21.2.2\n * @link http://www.ag-grid.com/\n * @license MIT\n */\n\"use strict\";\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __metadata = (this && this.__metadata) || function (k, v) {\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\nvar __param = (this && this.__param) || function (paramIndex, decorator) {\n    return function (target, key) { decorator(target, key, paramIndex); }\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar gridOptionsWrapper_1 = require(\"./gridOptionsWrapper\");\nvar columnController_1 = require(\"./columnController/columnController\");\nvar eventService_1 = require(\"./eventService\");\nvar logger_1 = require(\"./logger\");\nvar events_1 = require(\"./events\");\nvar context_1 = require(\"./context/context\");\nvar context_2 = require(\"./context/context\");\nvar context_3 = require(\"./context/context\");\nvar context_4 = require(\"./context/context\");\nvar AlignedGridsService = /** @class */ (function () {\n    function AlignedGridsService() {\n        // flag to mark if we are consuming. to avoid cyclic events (ie other grid firing back to master\n        // while processing a master event) we mark this if consuming an event, and if we are, then\n        // we don't fire back any events.\n        this.consuming = false;\n    }\n    AlignedGridsService.prototype.setBeans = function (loggerFactory) {\n        this.logger = loggerFactory.create('AlignedGridsService');\n    };\n    AlignedGridsService.prototype.registerGridComp = function (gridPanel) {\n        this.gridPanel = gridPanel;\n    };\n    AlignedGridsService.prototype.init = function () {\n        this.eventService.addEventListener(events_1.Events.EVENT_COLUMN_MOVED, this.fireColumnEvent.bind(this));\n        this.eventService.addEventListener(events_1.Events.EVENT_COLUMN_VISIBLE, this.fireColumnEvent.bind(this));\n        this.eventService.addEventListener(events_1.Events.EVENT_COLUMN_PINNED, this.fireColumnEvent.bind(this));\n        this.eventService.addEventListener(events_1.Events.EVENT_COLUMN_GROUP_OPENED, this.fireColumnEvent.bind(this));\n        this.eventService.addEventListener(events_1.Events.EVENT_COLUMN_RESIZED, this.fireColumnEvent.bind(this));\n        this.eventService.addEventListener(events_1.Events.EVENT_BODY_SCROLL, this.fireScrollEvent.bind(this));\n    };\n    // common logic across all the fire methods\n    AlignedGridsService.prototype.fireEvent = function (callback) {\n        // if we are already consuming, then we are acting on an event from a master,\n        // so we don't cause a cyclic firing of events\n        if (this.consuming) {\n            return;\n        }\n        // iterate through the aligned grids, and pass each aligned grid service to the callback\n        var otherGrids = this.gridOptionsWrapper.getAlignedGrids();\n        if (otherGrids) {\n            otherGrids.forEach(function (otherGridOptions) {\n                if (otherGridOptions.api) {\n                    var alignedGridService = otherGridOptions.api.__getAlignedGridService();\n                    callback(alignedGridService);\n                }\n            });\n        }\n    };\n    // common logic across all consume methods. very little common logic, however extracting\n    // guarantees consistency across the methods.\n    AlignedGridsService.prototype.onEvent = function (callback) {\n        this.consuming = true;\n        callback();\n        this.consuming = false;\n    };\n    AlignedGridsService.prototype.fireColumnEvent = function (event) {\n        this.fireEvent(function (alignedGridsService) {\n            alignedGridsService.onColumnEvent(event);\n        });\n    };\n    AlignedGridsService.prototype.fireScrollEvent = function (event) {\n        if (event.direction !== 'horizontal') {\n            return;\n        }\n        this.fireEvent(function (alignedGridsService) {\n            alignedGridsService.onScrollEvent(event);\n        });\n    };\n    AlignedGridsService.prototype.onScrollEvent = function (event) {\n        var _this = this;\n        this.onEvent(function () {\n            _this.gridPanel.setHorizontalScrollPosition(event.left);\n        });\n    };\n    AlignedGridsService.prototype.getMasterColumns = function (event) {\n        var result = [];\n        if (event.columns) {\n            event.columns.forEach(function (column) {\n                result.push(column);\n            });\n        }\n        else if (event.column) {\n            result.push(event.column);\n        }\n        return result;\n    };\n    AlignedGridsService.prototype.getColumnIds = function (event) {\n        var result = [];\n        if (event.columns) {\n            event.columns.forEach(function (column) {\n                result.push(column.getColId());\n            });\n        }\n        else if (event.column) {\n            result.push(event.column.getColId());\n        }\n        return result;\n    };\n    AlignedGridsService.prototype.onColumnEvent = function (event) {\n        var _this = this;\n        this.onEvent(function () {\n            switch (event.type) {\n                case events_1.Events.EVENT_COLUMN_MOVED:\n                case events_1.Events.EVENT_COLUMN_VISIBLE:\n                case events_1.Events.EVENT_COLUMN_PINNED:\n                case events_1.Events.EVENT_COLUMN_RESIZED:\n                    var colEvent = event;\n                    _this.processColumnEvent(colEvent);\n                    break;\n                case events_1.Events.EVENT_COLUMN_GROUP_OPENED:\n                    var groupOpenedEvent = event;\n                    _this.processGroupOpenedEvent(groupOpenedEvent);\n                    break;\n                case events_1.Events.EVENT_COLUMN_PIVOT_CHANGED:\n                    // we cannot support pivoting with aligned grids as the columns will be out of sync as the\n                    // grids will have columns created based on the row data of the grid.\n                    console.warn('ag-Grid: pivoting is not supported with aligned grids. ' +\n                        'You can only use one of these features at a time in a grid.');\n                    break;\n            }\n        });\n    };\n    AlignedGridsService.prototype.processGroupOpenedEvent = function (groupOpenedEvent) {\n        // likewise for column group\n        var masterColumnGroup = groupOpenedEvent.columnGroup;\n        var otherColumnGroup;\n        if (masterColumnGroup) {\n            var groupId = masterColumnGroup.getGroupId();\n            otherColumnGroup = this.columnController.getOriginalColumnGroup(groupId);\n        }\n        if (masterColumnGroup && !otherColumnGroup) {\n            return;\n        }\n        this.logger.log('onColumnEvent-> processing ' + groupOpenedEvent + ' expanded = ' + masterColumnGroup.isExpanded());\n        this.columnController.setColumnGroupOpened(otherColumnGroup, masterColumnGroup.isExpanded(), \"alignedGridChanged\");\n    };\n    AlignedGridsService.prototype.processColumnEvent = function (colEvent) {\n        var _this = this;\n        // the column in the event is from the master grid. need to\n        // look up the equivalent from this (other) grid\n        var masterColumn = colEvent.column;\n        var otherColumn;\n        if (masterColumn) {\n            otherColumn = this.columnController.getPrimaryColumn(masterColumn.getColId());\n        }\n        // if event was with respect to a master column, that is not present in this\n        // grid, then we ignore the event\n        if (masterColumn && !otherColumn) {\n            return;\n        }\n        // in time, all the methods below should use the column ids, it's a more generic way\n        // of handling columns, and also allows for single or multi column events\n        var columnIds = this.getColumnIds(colEvent);\n        var masterColumns = this.getMasterColumns(colEvent);\n        switch (colEvent.type) {\n            case events_1.Events.EVENT_COLUMN_MOVED:\n                var movedEvent = colEvent;\n                this.logger.log(\"onColumnEvent-> processing \" + colEvent.type + \" toIndex = \" + movedEvent.toIndex);\n                this.columnController.moveColumns(columnIds, movedEvent.toIndex, \"alignedGridChanged\");\n                break;\n            case events_1.Events.EVENT_COLUMN_VISIBLE:\n                var visibleEvent = colEvent;\n                this.logger.log(\"onColumnEvent-> processing \" + colEvent.type + \" visible = \" + visibleEvent.visible);\n                this.columnController.setColumnsVisible(columnIds, visibleEvent.visible, \"alignedGridChanged\");\n                break;\n            case events_1.Events.EVENT_COLUMN_PINNED:\n                var pinnedEvent = colEvent;\n                this.logger.log(\"onColumnEvent-> processing \" + colEvent.type + \" pinned = \" + pinnedEvent.pinned);\n                this.columnController.setColumnsPinned(columnIds, pinnedEvent.pinned, \"alignedGridChanged\");\n                break;\n            case events_1.Events.EVENT_COLUMN_RESIZED:\n                var resizedEvent_1 = colEvent;\n                masterColumns.forEach(function (column) {\n                    _this.logger.log(\"onColumnEvent-> processing \" + colEvent.type + \" actualWidth = \" + column.getActualWidth());\n                    _this.columnController.setColumnWidth(column.getColId(), column.getActualWidth(), false, resizedEvent_1.finished, \"alignedGridChanged\");\n                });\n                break;\n        }\n        var isVerticalScrollShowing = this.gridPanel.isVerticalScrollShowing();\n        var alignedGrids = this.gridOptionsWrapper.getAlignedGrids();\n        alignedGrids.forEach(function (grid) {\n            grid.api.setAlwaysShowVerticalScroll(isVerticalScrollShowing);\n        });\n    };\n    __decorate([\n        context_3.Autowired('gridOptionsWrapper'),\n        __metadata(\"design:type\", gridOptionsWrapper_1.GridOptionsWrapper)\n    ], AlignedGridsService.prototype, \"gridOptionsWrapper\", void 0);\n    __decorate([\n        context_3.Autowired('columnController'),\n        __metadata(\"design:type\", columnController_1.ColumnController)\n    ], AlignedGridsService.prototype, \"columnController\", void 0);\n    __decorate([\n        context_3.Autowired('eventService'),\n        __metadata(\"design:type\", eventService_1.EventService)\n    ], AlignedGridsService.prototype, \"eventService\", void 0);\n    __decorate([\n        __param(0, context_2.Qualifier('loggerFactory')),\n        __metadata(\"design:type\", Function),\n        __metadata(\"design:paramtypes\", [logger_1.LoggerFactory]),\n        __metadata(\"design:returntype\", void 0)\n    ], AlignedGridsService.prototype, \"setBeans\", null);\n    __decorate([\n        context_4.PostConstruct,\n        __metadata(\"design:type\", Function),\n        __metadata(\"design:paramtypes\", []),\n        __metadata(\"design:returntype\", void 0)\n    ], AlignedGridsService.prototype, \"init\", null);\n    AlignedGridsService = __decorate([\n        context_1.Bean('alignedGridsService')\n    ], AlignedGridsService);\n    return AlignedGridsService;\n}());\nexports.AlignedGridsService = AlignedGridsService;\n"]},"metadata":{},"sourceType":"script"}