{"ast":null,"code":"/**\n * ag-grid-community - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components\n * @version v21.2.2\n * @link http://www.ag-grid.com/\n * @license MIT\n */\n\"use strict\";\n\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nvar __metadata = this && this.__metadata || function (k, v) {\n  if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar column_1 = require(\"./entities/column\");\n\nvar context_1 = require(\"./context/context\");\n\nvar gridOptionsWrapper_1 = require(\"./gridOptionsWrapper\");\n\nvar columnApi_1 = require(\"./columnController/columnApi\");\n\nvar columnController_1 = require(\"./columnController/columnController\");\n\nvar eventService_1 = require(\"./eventService\");\n\nvar events_1 = require(\"./events\");\n\nvar gridApi_1 = require(\"./gridApi\");\n\nvar utils_1 = require(\"./utils\");\n\nvar SortController =\n/** @class */\nfunction () {\n  function SortController() {}\n\n  SortController_1 = SortController;\n\n  SortController.prototype.progressSort = function (column, multiSort, source) {\n    if (source === void 0) {\n      source = \"api\";\n    }\n\n    var nextDirection = this.getNextSortDirection(column);\n    this.setSortForColumn(column, nextDirection, multiSort, source);\n  };\n\n  SortController.prototype.setSortForColumn = function (column, sort, multiSort, source) {\n    if (source === void 0) {\n      source = \"api\";\n    } // auto correct - if sort not legal value, then set it to 'no sort' (which is null)\n\n\n    if (sort !== column_1.Column.SORT_ASC && sort !== column_1.Column.SORT_DESC) {\n      sort = null;\n    } // update sort on current col\n\n\n    column.setSort(sort, source); // sortedAt used for knowing order of cols when multi-col sort\n\n    if (column.getSort()) {\n      var sortedAt = Number(new Date().valueOf());\n      column.setSortedAt(sortedAt);\n    } else {\n      column.setSortedAt(null);\n    }\n\n    var doingMultiSort = multiSort && !this.gridOptionsWrapper.isSuppressMultiSort(); // clear sort on all columns except this one, and update the icons\n\n    if (!doingMultiSort) {\n      this.clearSortBarThisColumn(column, source);\n    }\n\n    this.dispatchSortChangedEvents();\n  }; // gets called by API, so if data changes, use can call this, which will end up\n  // working out the sort order again of the rows.\n\n\n  SortController.prototype.onSortChanged = function () {\n    this.dispatchSortChangedEvents();\n  };\n\n  SortController.prototype.dispatchSortChangedEvents = function () {\n    var event = {\n      type: events_1.Events.EVENT_SORT_CHANGED,\n      api: this.gridApi,\n      columnApi: this.columnApi\n    };\n    this.eventService.dispatchEvent(event);\n  };\n\n  SortController.prototype.clearSortBarThisColumn = function (columnToSkip, source) {\n    this.columnController.getPrimaryAndSecondaryAndAutoColumns().forEach(function (columnToClear) {\n      // Do not clear if either holding shift, or if column in question was clicked\n      if (!(columnToClear === columnToSkip)) {\n        // setting to 'undefined' as null means 'none' rather than cleared, otherwise issue will arise\n        // if sort order is: ['desc', null , 'asc'], as it will start at null rather than 'desc'.\n        columnToClear.setSort(undefined, source);\n      }\n    });\n  };\n\n  SortController.prototype.getNextSortDirection = function (column) {\n    var sortingOrder;\n\n    if (column.getColDef().sortingOrder) {\n      sortingOrder = column.getColDef().sortingOrder;\n    } else if (this.gridOptionsWrapper.getSortingOrder()) {\n      sortingOrder = this.gridOptionsWrapper.getSortingOrder();\n    } else {\n      sortingOrder = SortController_1.DEFAULT_SORTING_ORDER;\n    }\n\n    if (!Array.isArray(sortingOrder) || sortingOrder.length <= 0) {\n      console.warn(\"ag-grid: sortingOrder must be an array with at least one element, currently it's \" + sortingOrder);\n      return null;\n    }\n\n    var currentIndex = sortingOrder.indexOf(column.getSort());\n    var notInArray = currentIndex < 0;\n    var lastItemInArray = currentIndex == sortingOrder.length - 1;\n    var result;\n\n    if (notInArray || lastItemInArray) {\n      result = sortingOrder[0];\n    } else {\n      result = sortingOrder[currentIndex + 1];\n    } // verify the sort type exists, as the user could provide the sortingOrder, need to make sure it's valid\n\n\n    if (SortController_1.DEFAULT_SORTING_ORDER.indexOf(result) < 0) {\n      console.warn('ag-grid: invalid sort type ' + result);\n      return null;\n    }\n\n    return result;\n  }; // used by the public api, for saving the sort model\n\n\n  SortController.prototype.getSortModel = function () {\n    var columnsWithSorting = this.getColumnsWithSortingOrdered();\n    return utils_1._.map(columnsWithSorting, function (column) {\n      return {\n        colId: column.getColId(),\n        sort: column.getSort()\n      };\n    });\n  };\n\n  SortController.prototype.setSortModel = function (sortModel, source) {\n    var _this = this;\n\n    if (source === void 0) {\n      source = \"api\";\n    } // first up, clear any previous sort\n\n\n    var sortModelProvided = sortModel && sortModel.length > 0;\n    var allColumnsIncludingAuto = this.columnController.getPrimaryAndSecondaryAndAutoColumns();\n    allColumnsIncludingAuto.forEach(function (column) {\n      var sortForCol = null;\n      var sortedAt = -1;\n\n      if (sortModelProvided && column.getColDef().sortable) {\n        for (var j = 0; j < sortModel.length; j++) {\n          var sortModelEntry = sortModel[j];\n\n          if (typeof sortModelEntry.colId === 'string' && typeof column.getColId() === 'string' && _this.compareColIds(sortModelEntry, column)) {\n            sortForCol = sortModelEntry.sort;\n            sortedAt = j;\n          }\n        }\n      }\n\n      if (sortForCol) {\n        column.setSort(sortForCol, source);\n        column.setSortedAt(sortedAt);\n      } else {\n        column.setSort(null, source);\n        column.setSortedAt(null);\n      }\n    });\n    this.dispatchSortChangedEvents();\n  };\n\n  SortController.prototype.compareColIds = function (sortModelEntry, column) {\n    return sortModelEntry.colId === column.getColId();\n  };\n\n  SortController.prototype.getColumnsWithSortingOrdered = function () {\n    // pull out all the columns that have sorting set\n    var allColumnsIncludingAuto = this.columnController.getPrimaryAndSecondaryAndAutoColumns();\n\n    var columnsWithSorting = utils_1._.filter(allColumnsIncludingAuto, function (column) {\n      return !!column.getSort();\n    }); // put the columns in order of which one got sorted first\n\n\n    columnsWithSorting.sort(function (a, b) {\n      return a.sortedAt - b.sortedAt;\n    });\n    return columnsWithSorting;\n  }; // used by row controller, when doing the sorting\n\n\n  SortController.prototype.getSortForRowController = function () {\n    var columnsWithSorting = this.getColumnsWithSortingOrdered();\n    return utils_1._.map(columnsWithSorting, function (column) {\n      var ascending = column.getSort() === column_1.Column.SORT_ASC;\n      return {\n        inverter: ascending ? 1 : -1,\n        column: column\n      };\n    });\n  };\n\n  var SortController_1;\n  SortController.DEFAULT_SORTING_ORDER = [column_1.Column.SORT_ASC, column_1.Column.SORT_DESC, null];\n\n  __decorate([context_1.Autowired('gridOptionsWrapper'), __metadata(\"design:type\", gridOptionsWrapper_1.GridOptionsWrapper)], SortController.prototype, \"gridOptionsWrapper\", void 0);\n\n  __decorate([context_1.Autowired('columnController'), __metadata(\"design:type\", columnController_1.ColumnController)], SortController.prototype, \"columnController\", void 0);\n\n  __decorate([context_1.Autowired('eventService'), __metadata(\"design:type\", eventService_1.EventService)], SortController.prototype, \"eventService\", void 0);\n\n  __decorate([context_1.Autowired('columnApi'), __metadata(\"design:type\", columnApi_1.ColumnApi)], SortController.prototype, \"columnApi\", void 0);\n\n  __decorate([context_1.Autowired('gridApi'), __metadata(\"design:type\", gridApi_1.GridApi)], SortController.prototype, \"gridApi\", void 0);\n\n  SortController = SortController_1 = __decorate([context_1.Bean('sortController')], SortController);\n  return SortController;\n}();\n\nexports.SortController = SortController;","map":{"version":3,"sources":["/Users/dirkmennecke77/Desktop/Lageplan/node_modules/ag-grid-community/dist/lib/sortController.js"],"names":["__decorate","decorators","target","key","desc","c","arguments","length","r","Object","getOwnPropertyDescriptor","d","Reflect","decorate","i","defineProperty","__metadata","k","v","metadata","exports","value","column_1","require","context_1","gridOptionsWrapper_1","columnApi_1","columnController_1","eventService_1","events_1","gridApi_1","utils_1","SortController","SortController_1","prototype","progressSort","column","multiSort","source","nextDirection","getNextSortDirection","setSortForColumn","sort","Column","SORT_ASC","SORT_DESC","setSort","getSort","sortedAt","Number","Date","valueOf","setSortedAt","doingMultiSort","gridOptionsWrapper","isSuppressMultiSort","clearSortBarThisColumn","dispatchSortChangedEvents","onSortChanged","event","type","Events","EVENT_SORT_CHANGED","api","gridApi","columnApi","eventService","dispatchEvent","columnToSkip","columnController","getPrimaryAndSecondaryAndAutoColumns","forEach","columnToClear","undefined","sortingOrder","getColDef","getSortingOrder","DEFAULT_SORTING_ORDER","Array","isArray","console","warn","currentIndex","indexOf","notInArray","lastItemInArray","result","getSortModel","columnsWithSorting","getColumnsWithSortingOrdered","_","map","colId","getColId","setSortModel","sortModel","_this","sortModelProvided","allColumnsIncludingAuto","sortForCol","sortable","j","sortModelEntry","compareColIds","filter","a","b","getSortForRowController","ascending","inverter","Autowired","GridOptionsWrapper","ColumnController","EventService","ColumnApi","GridApi","Bean"],"mappings":"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","sourcesContent":["/**\n * ag-grid-community - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components\n * @version v21.2.2\n * @link http://www.ag-grid.com/\n * @license MIT\n */\n\"use strict\";\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __metadata = (this && this.__metadata) || function (k, v) {\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar column_1 = require(\"./entities/column\");\nvar context_1 = require(\"./context/context\");\nvar gridOptionsWrapper_1 = require(\"./gridOptionsWrapper\");\nvar columnApi_1 = require(\"./columnController/columnApi\");\nvar columnController_1 = require(\"./columnController/columnController\");\nvar eventService_1 = require(\"./eventService\");\nvar events_1 = require(\"./events\");\nvar gridApi_1 = require(\"./gridApi\");\nvar utils_1 = require(\"./utils\");\nvar SortController = /** @class */ (function () {\n    function SortController() {\n    }\n    SortController_1 = SortController;\n    SortController.prototype.progressSort = function (column, multiSort, source) {\n        if (source === void 0) { source = \"api\"; }\n        var nextDirection = this.getNextSortDirection(column);\n        this.setSortForColumn(column, nextDirection, multiSort, source);\n    };\n    SortController.prototype.setSortForColumn = function (column, sort, multiSort, source) {\n        if (source === void 0) { source = \"api\"; }\n        // auto correct - if sort not legal value, then set it to 'no sort' (which is null)\n        if (sort !== column_1.Column.SORT_ASC && sort !== column_1.Column.SORT_DESC) {\n            sort = null;\n        }\n        // update sort on current col\n        column.setSort(sort, source);\n        // sortedAt used for knowing order of cols when multi-col sort\n        if (column.getSort()) {\n            var sortedAt = Number(new Date().valueOf());\n            column.setSortedAt(sortedAt);\n        }\n        else {\n            column.setSortedAt(null);\n        }\n        var doingMultiSort = multiSort && !this.gridOptionsWrapper.isSuppressMultiSort();\n        // clear sort on all columns except this one, and update the icons\n        if (!doingMultiSort) {\n            this.clearSortBarThisColumn(column, source);\n        }\n        this.dispatchSortChangedEvents();\n    };\n    // gets called by API, so if data changes, use can call this, which will end up\n    // working out the sort order again of the rows.\n    SortController.prototype.onSortChanged = function () {\n        this.dispatchSortChangedEvents();\n    };\n    SortController.prototype.dispatchSortChangedEvents = function () {\n        var event = {\n            type: events_1.Events.EVENT_SORT_CHANGED,\n            api: this.gridApi,\n            columnApi: this.columnApi\n        };\n        this.eventService.dispatchEvent(event);\n    };\n    SortController.prototype.clearSortBarThisColumn = function (columnToSkip, source) {\n        this.columnController.getPrimaryAndSecondaryAndAutoColumns().forEach(function (columnToClear) {\n            // Do not clear if either holding shift, or if column in question was clicked\n            if (!(columnToClear === columnToSkip)) {\n                // setting to 'undefined' as null means 'none' rather than cleared, otherwise issue will arise\n                // if sort order is: ['desc', null , 'asc'], as it will start at null rather than 'desc'.\n                columnToClear.setSort(undefined, source);\n            }\n        });\n    };\n    SortController.prototype.getNextSortDirection = function (column) {\n        var sortingOrder;\n        if (column.getColDef().sortingOrder) {\n            sortingOrder = column.getColDef().sortingOrder;\n        }\n        else if (this.gridOptionsWrapper.getSortingOrder()) {\n            sortingOrder = this.gridOptionsWrapper.getSortingOrder();\n        }\n        else {\n            sortingOrder = SortController_1.DEFAULT_SORTING_ORDER;\n        }\n        if (!Array.isArray(sortingOrder) || sortingOrder.length <= 0) {\n            console.warn(\"ag-grid: sortingOrder must be an array with at least one element, currently it's \" + sortingOrder);\n            return null;\n        }\n        var currentIndex = sortingOrder.indexOf(column.getSort());\n        var notInArray = currentIndex < 0;\n        var lastItemInArray = currentIndex == sortingOrder.length - 1;\n        var result;\n        if (notInArray || lastItemInArray) {\n            result = sortingOrder[0];\n        }\n        else {\n            result = sortingOrder[currentIndex + 1];\n        }\n        // verify the sort type exists, as the user could provide the sortingOrder, need to make sure it's valid\n        if (SortController_1.DEFAULT_SORTING_ORDER.indexOf(result) < 0) {\n            console.warn('ag-grid: invalid sort type ' + result);\n            return null;\n        }\n        return result;\n    };\n    // used by the public api, for saving the sort model\n    SortController.prototype.getSortModel = function () {\n        var columnsWithSorting = this.getColumnsWithSortingOrdered();\n        return utils_1._.map(columnsWithSorting, function (column) {\n            return {\n                colId: column.getColId(),\n                sort: column.getSort()\n            };\n        });\n    };\n    SortController.prototype.setSortModel = function (sortModel, source) {\n        var _this = this;\n        if (source === void 0) { source = \"api\"; }\n        // first up, clear any previous sort\n        var sortModelProvided = sortModel && sortModel.length > 0;\n        var allColumnsIncludingAuto = this.columnController.getPrimaryAndSecondaryAndAutoColumns();\n        allColumnsIncludingAuto.forEach(function (column) {\n            var sortForCol = null;\n            var sortedAt = -1;\n            if (sortModelProvided && column.getColDef().sortable) {\n                for (var j = 0; j < sortModel.length; j++) {\n                    var sortModelEntry = sortModel[j];\n                    if (typeof sortModelEntry.colId === 'string'\n                        && typeof column.getColId() === 'string'\n                        && _this.compareColIds(sortModelEntry, column)) {\n                        sortForCol = sortModelEntry.sort;\n                        sortedAt = j;\n                    }\n                }\n            }\n            if (sortForCol) {\n                column.setSort(sortForCol, source);\n                column.setSortedAt(sortedAt);\n            }\n            else {\n                column.setSort(null, source);\n                column.setSortedAt(null);\n            }\n        });\n        this.dispatchSortChangedEvents();\n    };\n    SortController.prototype.compareColIds = function (sortModelEntry, column) {\n        return sortModelEntry.colId === column.getColId();\n    };\n    SortController.prototype.getColumnsWithSortingOrdered = function () {\n        // pull out all the columns that have sorting set\n        var allColumnsIncludingAuto = this.columnController.getPrimaryAndSecondaryAndAutoColumns();\n        var columnsWithSorting = utils_1._.filter(allColumnsIncludingAuto, function (column) { return !!column.getSort(); });\n        // put the columns in order of which one got sorted first\n        columnsWithSorting.sort(function (a, b) { return a.sortedAt - b.sortedAt; });\n        return columnsWithSorting;\n    };\n    // used by row controller, when doing the sorting\n    SortController.prototype.getSortForRowController = function () {\n        var columnsWithSorting = this.getColumnsWithSortingOrdered();\n        return utils_1._.map(columnsWithSorting, function (column) {\n            var ascending = column.getSort() === column_1.Column.SORT_ASC;\n            return {\n                inverter: ascending ? 1 : -1,\n                column: column\n            };\n        });\n    };\n    var SortController_1;\n    SortController.DEFAULT_SORTING_ORDER = [column_1.Column.SORT_ASC, column_1.Column.SORT_DESC, null];\n    __decorate([\n        context_1.Autowired('gridOptionsWrapper'),\n        __metadata(\"design:type\", gridOptionsWrapper_1.GridOptionsWrapper)\n    ], SortController.prototype, \"gridOptionsWrapper\", void 0);\n    __decorate([\n        context_1.Autowired('columnController'),\n        __metadata(\"design:type\", columnController_1.ColumnController)\n    ], SortController.prototype, \"columnController\", void 0);\n    __decorate([\n        context_1.Autowired('eventService'),\n        __metadata(\"design:type\", eventService_1.EventService)\n    ], SortController.prototype, \"eventService\", void 0);\n    __decorate([\n        context_1.Autowired('columnApi'),\n        __metadata(\"design:type\", columnApi_1.ColumnApi)\n    ], SortController.prototype, \"columnApi\", void 0);\n    __decorate([\n        context_1.Autowired('gridApi'),\n        __metadata(\"design:type\", gridApi_1.GridApi)\n    ], SortController.prototype, \"gridApi\", void 0);\n    SortController = SortController_1 = __decorate([\n        context_1.Bean('sortController')\n    ], SortController);\n    return SortController;\n}());\nexports.SortController = SortController;\n"]},"metadata":{},"sourceType":"script"}