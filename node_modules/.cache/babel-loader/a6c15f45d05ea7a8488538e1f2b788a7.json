{"ast":null,"code":"/**\n * @module ol/structs/LRUCache\n */\nimport { assert } from '../asserts.js';\nimport EventTarget from '../events/Target.js';\nimport EventType from '../events/EventType.js';\n/**\n * @typedef {Object} Entry\n * @property {string} key_\n * @property {Object} newer\n * @property {Object} older\n * @property {*} value_\n */\n\n/**\n * @classdesc\n * Implements a Least-Recently-Used cache where the keys do not conflict with\n * Object's properties (e.g. 'hasOwnProperty' is not allowed as a key). Expiring\n * items from the cache is the responsibility of the user.\n *\n * @fires import(\"../events/Event.js\").Event\n * @template T\n */\n\nvar LRUCache =\n/*@__PURE__*/\nfunction (EventTarget) {\n  function LRUCache(opt_highWaterMark) {\n    EventTarget.call(this);\n    /**\n     * @type {number}\n     */\n\n    this.highWaterMark = opt_highWaterMark !== undefined ? opt_highWaterMark : 2048;\n    /**\n     * @private\n     * @type {number}\n     */\n\n    this.count_ = 0;\n    /**\n     * @private\n     * @type {!Object<string, Entry>}\n     */\n\n    this.entries_ = {};\n    /**\n     * @private\n     * @type {?Entry}\n     */\n\n    this.oldest_ = null;\n    /**\n     * @private\n     * @type {?Entry}\n     */\n\n    this.newest_ = null;\n  }\n\n  if (EventTarget) LRUCache.__proto__ = EventTarget;\n  LRUCache.prototype = Object.create(EventTarget && EventTarget.prototype);\n  LRUCache.prototype.constructor = LRUCache;\n  /**\n   * @return {boolean} Can expire cache.\n   */\n\n  LRUCache.prototype.canExpireCache = function canExpireCache() {\n    return this.getCount() > this.highWaterMark;\n  };\n  /**\n   * FIXME empty description for jsdoc\n   */\n\n\n  LRUCache.prototype.clear = function clear() {\n    this.count_ = 0;\n    this.entries_ = {};\n    this.oldest_ = null;\n    this.newest_ = null;\n    this.dispatchEvent(EventType.CLEAR);\n  };\n  /**\n   * @param {string} key Key.\n   * @return {boolean} Contains key.\n   */\n\n\n  LRUCache.prototype.containsKey = function containsKey(key) {\n    return this.entries_.hasOwnProperty(key);\n  };\n  /**\n   * @param {function(this: S, T, string, LRUCache): ?} f The function\n   *     to call for every entry from the oldest to the newer. This function takes\n   *     3 arguments (the entry value, the entry key and the LRUCache object).\n   *     The return value is ignored.\n   * @param {S=} opt_this The object to use as `this` in `f`.\n   * @template S\n   */\n\n\n  LRUCache.prototype.forEach = function forEach(f, opt_this) {\n    var entry = this.oldest_;\n\n    while (entry) {\n      f.call(opt_this, entry.value_, entry.key_, this);\n      entry = entry.newer;\n    }\n  };\n  /**\n   * @param {string} key Key.\n   * @return {T} Value.\n   */\n\n\n  LRUCache.prototype.get = function get(key) {\n    var entry = this.entries_[key];\n    assert(entry !== undefined, 15); // Tried to get a value for a key that does not exist in the cache\n\n    if (entry === this.newest_) {\n      return entry.value_;\n    } else if (entry === this.oldest_) {\n      this.oldest_ =\n      /** @type {Entry} */\n      this.oldest_.newer;\n      this.oldest_.older = null;\n    } else {\n      entry.newer.older = entry.older;\n      entry.older.newer = entry.newer;\n    }\n\n    entry.newer = null;\n    entry.older = this.newest_;\n    this.newest_.newer = entry;\n    this.newest_ = entry;\n    return entry.value_;\n  };\n  /**\n   * Remove an entry from the cache.\n   * @param {string} key The entry key.\n   * @return {T} The removed entry.\n   */\n\n\n  LRUCache.prototype.remove = function remove(key) {\n    var entry = this.entries_[key];\n    assert(entry !== undefined, 15); // Tried to get a value for a key that does not exist in the cache\n\n    if (entry === this.newest_) {\n      this.newest_ =\n      /** @type {Entry} */\n      entry.older;\n\n      if (this.newest_) {\n        this.newest_.newer = null;\n      }\n    } else if (entry === this.oldest_) {\n      this.oldest_ =\n      /** @type {Entry} */\n      entry.newer;\n\n      if (this.oldest_) {\n        this.oldest_.older = null;\n      }\n    } else {\n      entry.newer.older = entry.older;\n      entry.older.newer = entry.newer;\n    }\n\n    delete this.entries_[key];\n    --this.count_;\n    return entry.value_;\n  };\n  /**\n   * @return {number} Count.\n   */\n\n\n  LRUCache.prototype.getCount = function getCount() {\n    return this.count_;\n  };\n  /**\n   * @return {Array<string>} Keys.\n   */\n\n\n  LRUCache.prototype.getKeys = function getKeys() {\n    var keys = new Array(this.count_);\n    var i = 0;\n    var entry;\n\n    for (entry = this.newest_; entry; entry = entry.older) {\n      keys[i++] = entry.key_;\n    }\n\n    return keys;\n  };\n  /**\n   * @return {Array<T>} Values.\n   */\n\n\n  LRUCache.prototype.getValues = function getValues() {\n    var values = new Array(this.count_);\n    var i = 0;\n    var entry;\n\n    for (entry = this.newest_; entry; entry = entry.older) {\n      values[i++] = entry.value_;\n    }\n\n    return values;\n  };\n  /**\n   * @return {T} Last value.\n   */\n\n\n  LRUCache.prototype.peekLast = function peekLast() {\n    return this.oldest_.value_;\n  };\n  /**\n   * @return {string} Last key.\n   */\n\n\n  LRUCache.prototype.peekLastKey = function peekLastKey() {\n    return this.oldest_.key_;\n  };\n  /**\n   * Get the key of the newest item in the cache.  Throws if the cache is empty.\n   * @return {string} The newest key.\n   */\n\n\n  LRUCache.prototype.peekFirstKey = function peekFirstKey() {\n    return this.newest_.key_;\n  };\n  /**\n   * @return {T} value Value.\n   */\n\n\n  LRUCache.prototype.pop = function pop() {\n    var entry = this.oldest_;\n    delete this.entries_[entry.key_];\n\n    if (entry.newer) {\n      entry.newer.older = null;\n    }\n\n    this.oldest_ =\n    /** @type {Entry} */\n    entry.newer;\n\n    if (!this.oldest_) {\n      this.newest_ = null;\n    }\n\n    --this.count_;\n    return entry.value_;\n  };\n  /**\n   * @param {string} key Key.\n   * @param {T} value Value.\n   */\n\n\n  LRUCache.prototype.replace = function replace(key, value) {\n    this.get(key); // update `newest_`\n\n    this.entries_[key].value_ = value;\n  };\n  /**\n   * @param {string} key Key.\n   * @param {T} value Value.\n   */\n\n\n  LRUCache.prototype.set = function set(key, value) {\n    assert(!(key in this.entries_), 16); // Tried to set a value for a key that is used already\n\n    var entry =\n    /** @type {Entry} */\n    {\n      key_: key,\n      newer: null,\n      older: this.newest_,\n      value_: value\n    };\n\n    if (!this.newest_) {\n      this.oldest_ = entry;\n    } else {\n      this.newest_.newer = entry;\n    }\n\n    this.newest_ = entry;\n    this.entries_[key] = entry;\n    ++this.count_;\n  };\n  /**\n   * Set a maximum number of entries for the cache.\n   * @param {number} size Cache size.\n   * @api\n   */\n\n\n  LRUCache.prototype.setSize = function setSize(size) {\n    this.highWaterMark = size;\n  };\n  /**\n   * Prune the cache.\n   */\n\n\n  LRUCache.prototype.prune = function prune() {\n    while (this.canExpireCache()) {\n      this.pop();\n    }\n  };\n\n  return LRUCache;\n}(EventTarget);\n\nexport default LRUCache;","map":{"version":3,"sources":["../../../src/ol/structs/LRUCache.js"],"names":["super","let","const"],"mappings":"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","sourcesContent":["/**\n * @module ol/structs/LRUCache\n */\n\nimport {assert} from '../asserts.js';\nimport EventTarget from '../events/Target.js';\nimport EventType from '../events/EventType.js';\n\n\n/**\n * @typedef {Object} Entry\n * @property {string} key_\n * @property {Object} newer\n * @property {Object} older\n * @property {*} value_\n */\n\n\n/**\n * @classdesc\n * Implements a Least-Recently-Used cache where the keys do not conflict with\n * Object's properties (e.g. 'hasOwnProperty' is not allowed as a key). Expiring\n * items from the cache is the responsibility of the user.\n *\n * @fires import(\"../events/Event.js\").Event\n * @template T\n */\nclass LRUCache extends EventTarget {\n\n  /**\n   * @param {number=} opt_highWaterMark High water mark.\n   */\n  constructor(opt_highWaterMark) {\n\n    super();\n\n    /**\n     * @type {number}\n     */\n    this.highWaterMark = opt_highWaterMark !== undefined ? opt_highWaterMark : 2048;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.count_ = 0;\n\n    /**\n     * @private\n     * @type {!Object<string, Entry>}\n     */\n    this.entries_ = {};\n\n    /**\n     * @private\n     * @type {?Entry}\n     */\n    this.oldest_ = null;\n\n    /**\n     * @private\n     * @type {?Entry}\n     */\n    this.newest_ = null;\n\n  }\n\n\n  /**\n   * @return {boolean} Can expire cache.\n   */\n  canExpireCache() {\n    return this.getCount() > this.highWaterMark;\n  }\n\n\n  /**\n   * FIXME empty description for jsdoc\n   */\n  clear() {\n    this.count_ = 0;\n    this.entries_ = {};\n    this.oldest_ = null;\n    this.newest_ = null;\n    this.dispatchEvent(EventType.CLEAR);\n  }\n\n\n  /**\n   * @param {string} key Key.\n   * @return {boolean} Contains key.\n   */\n  containsKey(key) {\n    return this.entries_.hasOwnProperty(key);\n  }\n\n\n  /**\n   * @param {function(this: S, T, string, LRUCache): ?} f The function\n   *     to call for every entry from the oldest to the newer. This function takes\n   *     3 arguments (the entry value, the entry key and the LRUCache object).\n   *     The return value is ignored.\n   * @param {S=} opt_this The object to use as `this` in `f`.\n   * @template S\n   */\n  forEach(f, opt_this) {\n    let entry = this.oldest_;\n    while (entry) {\n      f.call(opt_this, entry.value_, entry.key_, this);\n      entry = entry.newer;\n    }\n  }\n\n\n  /**\n   * @param {string} key Key.\n   * @return {T} Value.\n   */\n  get(key) {\n    const entry = this.entries_[key];\n    assert(entry !== undefined,\n      15); // Tried to get a value for a key that does not exist in the cache\n    if (entry === this.newest_) {\n      return entry.value_;\n    } else if (entry === this.oldest_) {\n      this.oldest_ = /** @type {Entry} */ (this.oldest_.newer);\n      this.oldest_.older = null;\n    } else {\n      entry.newer.older = entry.older;\n      entry.older.newer = entry.newer;\n    }\n    entry.newer = null;\n    entry.older = this.newest_;\n    this.newest_.newer = entry;\n    this.newest_ = entry;\n    return entry.value_;\n  }\n\n\n  /**\n   * Remove an entry from the cache.\n   * @param {string} key The entry key.\n   * @return {T} The removed entry.\n   */\n  remove(key) {\n    const entry = this.entries_[key];\n    assert(entry !== undefined, 15); // Tried to get a value for a key that does not exist in the cache\n    if (entry === this.newest_) {\n      this.newest_ = /** @type {Entry} */ (entry.older);\n      if (this.newest_) {\n        this.newest_.newer = null;\n      }\n    } else if (entry === this.oldest_) {\n      this.oldest_ = /** @type {Entry} */ (entry.newer);\n      if (this.oldest_) {\n        this.oldest_.older = null;\n      }\n    } else {\n      entry.newer.older = entry.older;\n      entry.older.newer = entry.newer;\n    }\n    delete this.entries_[key];\n    --this.count_;\n    return entry.value_;\n  }\n\n\n  /**\n   * @return {number} Count.\n   */\n  getCount() {\n    return this.count_;\n  }\n\n\n  /**\n   * @return {Array<string>} Keys.\n   */\n  getKeys() {\n    const keys = new Array(this.count_);\n    let i = 0;\n    let entry;\n    for (entry = this.newest_; entry; entry = entry.older) {\n      keys[i++] = entry.key_;\n    }\n    return keys;\n  }\n\n\n  /**\n   * @return {Array<T>} Values.\n   */\n  getValues() {\n    const values = new Array(this.count_);\n    let i = 0;\n    let entry;\n    for (entry = this.newest_; entry; entry = entry.older) {\n      values[i++] = entry.value_;\n    }\n    return values;\n  }\n\n\n  /**\n   * @return {T} Last value.\n   */\n  peekLast() {\n    return this.oldest_.value_;\n  }\n\n\n  /**\n   * @return {string} Last key.\n   */\n  peekLastKey() {\n    return this.oldest_.key_;\n  }\n\n\n  /**\n   * Get the key of the newest item in the cache.  Throws if the cache is empty.\n   * @return {string} The newest key.\n   */\n  peekFirstKey() {\n    return this.newest_.key_;\n  }\n\n\n  /**\n   * @return {T} value Value.\n   */\n  pop() {\n    const entry = this.oldest_;\n    delete this.entries_[entry.key_];\n    if (entry.newer) {\n      entry.newer.older = null;\n    }\n    this.oldest_ = /** @type {Entry} */ (entry.newer);\n    if (!this.oldest_) {\n      this.newest_ = null;\n    }\n    --this.count_;\n    return entry.value_;\n  }\n\n\n  /**\n   * @param {string} key Key.\n   * @param {T} value Value.\n   */\n  replace(key, value) {\n    this.get(key); // update `newest_`\n    this.entries_[key].value_ = value;\n  }\n\n\n  /**\n   * @param {string} key Key.\n   * @param {T} value Value.\n   */\n  set(key, value) {\n    assert(!(key in this.entries_),\n      16); // Tried to set a value for a key that is used already\n    const entry = /** @type {Entry} */ ({\n      key_: key,\n      newer: null,\n      older: this.newest_,\n      value_: value\n    });\n    if (!this.newest_) {\n      this.oldest_ = entry;\n    } else {\n      this.newest_.newer = entry;\n    }\n    this.newest_ = entry;\n    this.entries_[key] = entry;\n    ++this.count_;\n  }\n\n\n  /**\n   * Set a maximum number of entries for the cache.\n   * @param {number} size Cache size.\n   * @api\n   */\n  setSize(size) {\n    this.highWaterMark = size;\n  }\n\n\n  /**\n   * Prune the cache.\n   */\n  prune() {\n    while (this.canExpireCache()) {\n      this.pop();\n    }\n  }\n\n}\n\nexport default LRUCache;\n"]},"metadata":{},"sourceType":"module"}