{"ast":null,"code":"/**\n * @module ol/interaction/KeyboardZoom\n */\nimport EventType from '../events/EventType.js';\nimport { targetNotEditable } from '../events/condition.js';\nimport Interaction, { zoomByDelta } from './Interaction.js';\n/**\n * @typedef {Object} Options\n * @property {number} [duration=100] Animation duration in milliseconds.\n * @property {import(\"../events/condition.js\").Condition} [condition] A function that\n * takes an {@link module:ol/MapBrowserEvent~MapBrowserEvent} and returns a\n * boolean to indicate whether that event should be handled. Default is\n * {@link module:ol/events/condition~targetNotEditable}.\n * @property {number} [delta=1] The zoom level delta on each key press.\n */\n\n/**\n * @classdesc\n * Allows the user to zoom the map using keyboard + and -.\n * Note that, although this interaction is by default included in maps,\n * the keys can only be used when browser focus is on the element to which\n * the keyboard events are attached. By default, this is the map div,\n * though you can change this with the `keyboardEventTarget` in\n * {@link module:ol/Map~Map}. `document` never loses focus but, for any other\n * element, focus will have to be on, and returned to, this element if the keys\n * are to function.\n * See also {@link module:ol/interaction/KeyboardPan~KeyboardPan}.\n * @api\n */\n\nvar KeyboardZoom =\n/*@__PURE__*/\nfunction (Interaction) {\n  function KeyboardZoom(opt_options) {\n    Interaction.call(this, {\n      handleEvent: handleEvent\n    });\n    var options = opt_options ? opt_options : {};\n    /**\n     * @private\n     * @type {import(\"../events/condition.js\").Condition}\n     */\n\n    this.condition_ = options.condition ? options.condition : targetNotEditable;\n    /**\n     * @private\n     * @type {number}\n     */\n\n    this.delta_ = options.delta ? options.delta : 1;\n    /**\n     * @private\n     * @type {number}\n     */\n\n    this.duration_ = options.duration !== undefined ? options.duration : 100;\n  }\n\n  if (Interaction) KeyboardZoom.__proto__ = Interaction;\n  KeyboardZoom.prototype = Object.create(Interaction && Interaction.prototype);\n  KeyboardZoom.prototype.constructor = KeyboardZoom;\n  return KeyboardZoom;\n}(Interaction);\n/**\n * Handles the {@link module:ol/MapBrowserEvent map browser event} if it was a\n * `KeyEvent`, and decides whether to zoom in or out (depending on whether the\n * key pressed was '+' or '-').\n * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Map browser event.\n * @return {boolean} `false` to stop event propagation.\n * @this {KeyboardZoom}\n */\n\n\nfunction handleEvent(mapBrowserEvent) {\n  var stopEvent = false;\n\n  if (mapBrowserEvent.type == EventType.KEYDOWN || mapBrowserEvent.type == EventType.KEYPRESS) {\n    var keyEvent =\n    /** @type {KeyboardEvent} */\n    mapBrowserEvent.originalEvent;\n    var charCode = keyEvent.charCode;\n\n    if (this.condition_(mapBrowserEvent) && (charCode == '+'.charCodeAt(0) || charCode == '-'.charCodeAt(0))) {\n      var map = mapBrowserEvent.map;\n      var delta = charCode == '+'.charCodeAt(0) ? this.delta_ : -this.delta_;\n      var view = map.getView();\n      zoomByDelta(view, delta, undefined, this.duration_);\n      mapBrowserEvent.preventDefault();\n      stopEvent = true;\n    }\n  }\n\n  return !stopEvent;\n}\n\nexport default KeyboardZoom;","map":{"version":3,"sources":["../../../src/ol/interaction/KeyboardZoom.js"],"names":["super","const","let"],"mappings":"AAAA;;;AAGA,OAAO,SAAP,MAAsB,wBAAtB;AACA,SAAQ,iBAAR,QAAgC,wBAAhC;AACA,OAAO,WAAP,IAAqB,WAArB,QAAuC,kBAAvC;;;;;;;;;;;;;;;;;;;;;;;;;AA2BA,IAAM,YAAY;AAAoB;AAAA,UAAA,WAAA,EAAA;AAIpC,WAAA,YAAA,CAAY,WAAZ,EAAyB;AAEvBA,IAAAA,WAAAA,CAAAA,IAAAA,CAAK,IAALA,EAAM;AACJ,MAAA,WAAW,EAAE;AADT,KAANA;AAIAC,QAAM,OAAO,GAAG,WAAW,GAAG,WAAH,GAAiB,EAA5CA;;;;;;AAMA,SAAK,UAAL,GAAkB,OAAO,CAAC,SAAR,GAAoB,OAAO,CAAC,SAA5B,GAAwC,iBAA1D;;;;;;AAMA,SAAK,MAAL,GAAc,OAAO,CAAC,KAAR,GAAgB,OAAO,CAAC,KAAxB,GAAgC,CAA9C;;;;;;AAMA,SAAK,SAAL,GAAiB,OAAO,CAAC,QAAR,KAAqB,SAArB,GAAiC,OAAO,CAAC,QAAzC,GAAoD,GAArE;;;;;AAED,EAAA,YAAA,CAAA,SAAA,CAAA,WAAA,GAAA,YAAA;;CA9BmC,CAAX,WAAW,CAAtC;;;;;;;;;;;AA2CA,SAAS,WAAT,CAAqB,eAArB,EAAsC;AACpCC,MAAI,SAAS,GAAG,KAAhBA;;AACA,MAAI,eAAe,CAAC,IAAhB,IAAwB,SAAS,CAAC,OAAlC,IACA,eAAe,CAAC,IAAhB,IAAwB,SAAS,CAAC,QADtC,EACgD;AAC9CD,QAAM,QAAQ;AAAA;AAAiC,IAAA,eAAe,CAAC,aAA/DA;AACAA,QAAM,QAAQ,GAAG,QAAQ,CAAC,QAA1BA;;AACA,QAAI,KAAK,UAAL,CAAgB,eAAhB,MACC,QAAQ,IAAI,IAAI,UAAJ,CAAe,CAAf,CAAZ,IAAiC,QAAQ,IAAI,IAAI,UAAJ,CAAe,CAAf,CAD9C,CAAJ,EACsE;AACpEA,UAAM,GAAG,GAAG,eAAe,CAAC,GAA5BA;AACAA,UAAM,KAAK,GAAI,QAAQ,IAAI,IAAI,UAAJ,CAAe,CAAf,CAAb,GAAkC,KAAK,MAAvC,GAAgD,CAAC,KAAK,MAApEA;AACAA,UAAM,IAAI,GAAG,GAAG,CAAC,OAAJ,EAAbA;AACA,MAAA,WAAW,CAAC,IAAD,EAAO,KAAP,EAAc,SAAd,EAAyB,KAAK,SAA9B,CAAX;AACA,MAAA,eAAe,CAAC,cAAhB;AACA,MAAA,SAAS,GAAG,IAAZ;AACD;AACF;;AACD,SAAO,CAAC,SAAR;AACD;;AAED,eAAe,YAAf","sourcesContent":["/**\n * @module ol/interaction/KeyboardZoom\n */\nimport EventType from '../events/EventType.js';\nimport {targetNotEditable} from '../events/condition.js';\nimport Interaction, {zoomByDelta} from './Interaction.js';\n\n\n/**\n * @typedef {Object} Options\n * @property {number} [duration=100] Animation duration in milliseconds.\n * @property {import(\"../events/condition.js\").Condition} [condition] A function that\n * takes an {@link module:ol/MapBrowserEvent~MapBrowserEvent} and returns a\n * boolean to indicate whether that event should be handled. Default is\n * {@link module:ol/events/condition~targetNotEditable}.\n * @property {number} [delta=1] The zoom level delta on each key press.\n */\n\n\n/**\n * @classdesc\n * Allows the user to zoom the map using keyboard + and -.\n * Note that, although this interaction is by default included in maps,\n * the keys can only be used when browser focus is on the element to which\n * the keyboard events are attached. By default, this is the map div,\n * though you can change this with the `keyboardEventTarget` in\n * {@link module:ol/Map~Map}. `document` never loses focus but, for any other\n * element, focus will have to be on, and returned to, this element if the keys\n * are to function.\n * See also {@link module:ol/interaction/KeyboardPan~KeyboardPan}.\n * @api\n */\nclass KeyboardZoom extends Interaction {\n  /**\n   * @param {Options=} opt_options Options.\n   */\n  constructor(opt_options) {\n\n    super({\n      handleEvent: handleEvent\n    });\n\n    const options = opt_options ? opt_options : {};\n\n    /**\n     * @private\n     * @type {import(\"../events/condition.js\").Condition}\n     */\n    this.condition_ = options.condition ? options.condition : targetNotEditable;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.delta_ = options.delta ? options.delta : 1;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.duration_ = options.duration !== undefined ? options.duration : 100;\n\n  }\n\n}\n\n\n/**\n * Handles the {@link module:ol/MapBrowserEvent map browser event} if it was a\n * `KeyEvent`, and decides whether to zoom in or out (depending on whether the\n * key pressed was '+' or '-').\n * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Map browser event.\n * @return {boolean} `false` to stop event propagation.\n * @this {KeyboardZoom}\n */\nfunction handleEvent(mapBrowserEvent) {\n  let stopEvent = false;\n  if (mapBrowserEvent.type == EventType.KEYDOWN ||\n      mapBrowserEvent.type == EventType.KEYPRESS) {\n    const keyEvent = /** @type {KeyboardEvent} */ (mapBrowserEvent.originalEvent);\n    const charCode = keyEvent.charCode;\n    if (this.condition_(mapBrowserEvent) &&\n        (charCode == '+'.charCodeAt(0) || charCode == '-'.charCodeAt(0))) {\n      const map = mapBrowserEvent.map;\n      const delta = (charCode == '+'.charCodeAt(0)) ? this.delta_ : -this.delta_;\n      const view = map.getView();\n      zoomByDelta(view, delta, undefined, this.duration_);\n      mapBrowserEvent.preventDefault();\n      stopEvent = true;\n    }\n  }\n  return !stopEvent;\n}\n\nexport default KeyboardZoom;\n"]},"metadata":{},"sourceType":"module"}