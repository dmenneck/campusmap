{"ast":null,"code":"/**\n * @module ol/interaction/PinchRotate\n */\nimport { inherits } from '../util.js';\nimport ViewHint from '../ViewHint.js';\nimport { FALSE } from '../functions.js';\nimport { rotate, rotateWithoutConstraints } from '../interaction/Interaction.js';\nimport PointerInteraction, { centroid as centroidFromPointers } from '../interaction/Pointer.js';\nimport { disable } from '../rotationconstraint.js';\n/**\n * @typedef {Object} Options\n * @property {number} [duration=250] The duration of the animation in\n * milliseconds.\n * @property {number} [threshold=0.3] Minimal angle in radians to start a rotation.\n */\n\n/**\n * @classdesc\n * Allows the user to rotate the map by twisting with two fingers\n * on a touch screen.\n *\n * @constructor\n * @extends {module:ol/interaction/Pointer}\n * @param {module:ol/interaction/PinchRotate~Options=} opt_options Options.\n * @api\n */\n\nconst PinchRotate = function (opt_options) {\n  PointerInteraction.call(this, {\n    handleDownEvent: handleDownEvent,\n    handleDragEvent: handleDragEvent,\n    handleUpEvent: handleUpEvent\n  });\n  const options = opt_options || {};\n  /**\n   * @private\n   * @type {module:ol/coordinate~Coordinate}\n   */\n\n  this.anchor_ = null;\n  /**\n   * @private\n   * @type {number|undefined}\n   */\n\n  this.lastAngle_ = undefined;\n  /**\n   * @private\n   * @type {boolean}\n   */\n\n  this.rotating_ = false;\n  /**\n   * @private\n   * @type {number}\n   */\n\n  this.rotationDelta_ = 0.0;\n  /**\n   * @private\n   * @type {number}\n   */\n\n  this.threshold_ = options.threshold !== undefined ? options.threshold : 0.3;\n  /**\n   * @private\n   * @type {number}\n   */\n\n  this.duration_ = options.duration !== undefined ? options.duration : 250;\n};\n\ninherits(PinchRotate, PointerInteraction);\n/**\n * @param {module:ol/MapBrowserPointerEvent} mapBrowserEvent Event.\n * @this {module:ol/interaction/PinchRotate}\n */\n\nfunction handleDragEvent(mapBrowserEvent) {\n  let rotationDelta = 0.0;\n  const touch0 = this.targetPointers[0];\n  const touch1 = this.targetPointers[1]; // angle between touches\n\n  const angle = Math.atan2(touch1.clientY - touch0.clientY, touch1.clientX - touch0.clientX);\n\n  if (this.lastAngle_ !== undefined) {\n    const delta = angle - this.lastAngle_;\n    this.rotationDelta_ += delta;\n\n    if (!this.rotating_ && Math.abs(this.rotationDelta_) > this.threshold_) {\n      this.rotating_ = true;\n    }\n\n    rotationDelta = delta;\n  }\n\n  this.lastAngle_ = angle;\n  const map = mapBrowserEvent.map;\n  const view = map.getView();\n\n  if (view.getConstraints().rotation === disable) {\n    return;\n  } // rotate anchor point.\n  // FIXME: should be the intersection point between the lines:\n  //     touch0,touch1 and previousTouch0,previousTouch1\n\n\n  const viewportPosition = map.getViewport().getBoundingClientRect();\n  const centroid = centroidFromPointers(this.targetPointers);\n  centroid[0] -= viewportPosition.left;\n  centroid[1] -= viewportPosition.top;\n  this.anchor_ = map.getCoordinateFromPixel(centroid); // rotate\n\n  if (this.rotating_) {\n    const rotation = view.getRotation();\n    map.render();\n    rotateWithoutConstraints(view, rotation + rotationDelta, this.anchor_);\n  }\n}\n/**\n * @param {module:ol/MapBrowserPointerEvent} mapBrowserEvent Event.\n * @return {boolean} Stop drag sequence?\n * @this {module:ol/interaction/PinchRotate}\n */\n\n\nfunction handleUpEvent(mapBrowserEvent) {\n  if (this.targetPointers.length < 2) {\n    const map = mapBrowserEvent.map;\n    const view = map.getView();\n    view.setHint(ViewHint.INTERACTING, -1);\n\n    if (this.rotating_) {\n      const rotation = view.getRotation();\n      rotate(view, rotation, this.anchor_, this.duration_);\n    }\n\n    return false;\n  } else {\n    return true;\n  }\n}\n/**\n * @param {module:ol/MapBrowserPointerEvent} mapBrowserEvent Event.\n * @return {boolean} Start drag sequence?\n * @this {module:ol/interaction/PinchRotate}\n */\n\n\nfunction handleDownEvent(mapBrowserEvent) {\n  if (this.targetPointers.length >= 2) {\n    const map = mapBrowserEvent.map;\n    this.anchor_ = null;\n    this.lastAngle_ = undefined;\n    this.rotating_ = false;\n    this.rotationDelta_ = 0.0;\n\n    if (!this.handlingDownUpSequence) {\n      map.getView().setHint(ViewHint.INTERACTING, 1);\n    }\n\n    return true;\n  } else {\n    return false;\n  }\n}\n/**\n * @inheritDoc\n */\n\n\nPinchRotate.prototype.shouldStopEvent = FALSE;\nexport default PinchRotate;","map":null,"metadata":{},"sourceType":"module"}