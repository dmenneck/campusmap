{"ast":null,"code":"/**\n * @module ol/format/filter/IsLike\n */\nimport Comparison from './Comparison.js';\n/**\n * @classdesc\n * Represents a `<PropertyIsLike>` comparison operator.\n * @api\n */\n\nvar IsLike =\n/*@__PURE__*/\nfunction (Comparison) {\n  function IsLike(propertyName, pattern, opt_wildCard, opt_singleChar, opt_escapeChar, opt_matchCase) {\n    Comparison.call(this, 'PropertyIsLike', propertyName);\n    /**\n     * @type {!string}\n     */\n\n    this.pattern = pattern;\n    /**\n     * @type {!string}\n     */\n\n    this.wildCard = opt_wildCard !== undefined ? opt_wildCard : '*';\n    /**\n     * @type {!string}\n     */\n\n    this.singleChar = opt_singleChar !== undefined ? opt_singleChar : '.';\n    /**\n     * @type {!string}\n     */\n\n    this.escapeChar = opt_escapeChar !== undefined ? opt_escapeChar : '!';\n    /**\n     * @type {boolean|undefined}\n     */\n\n    this.matchCase = opt_matchCase;\n  }\n\n  if (Comparison) IsLike.__proto__ = Comparison;\n  IsLike.prototype = Object.create(Comparison && Comparison.prototype);\n  IsLike.prototype.constructor = IsLike;\n  return IsLike;\n}(Comparison);\n\nexport default IsLike;","map":{"version":3,"sources":["../../../../src/ol/format/filter/IsLike.js"],"names":["super"],"mappings":"AAAA;;;AAGA,OAAO,UAAP,MAAuB,iBAAvB;;;;;;;AAOA,IAAM,MAAM;AAAmB;AAAA,UAAA,UAAA,EAAA;AAc7B,WAAA,MAAA,CAAY,YAAZ,EAA0B,OAA1B,EAAmC,YAAnC,EAAiD,cAAjD,EAAiE,cAAjE,EAAiF,aAAjF,EAAgG;AAC9FA,IAAAA,UAAAA,CAAAA,IAAAA,CAAK,IAALA,EAAM,gBAANA,EAAwB,YAAxBA;;;;;AAKA,SAAK,OAAL,GAAe,OAAf;;;;;AAKA,SAAK,QAAL,GAAiB,YAAY,KAAK,SAAlB,GAA+B,YAA/B,GAA8C,GAA9D;;;;;AAKA,SAAK,UAAL,GAAmB,cAAc,KAAK,SAApB,GAAiC,cAAjC,GAAkD,GAApE;;;;;AAKA,SAAK,UAAL,GAAmB,cAAc,KAAK,SAApB,GAAiC,cAAjC,GAAkD,GAApE;;;;;AAKA,SAAK,SAAL,GAAiB,aAAjB;;;;;AAED,EAAA,MAAA,CAAA,SAAA,CAAA,WAAA,GAAA,MAAA;;CA1C4B,CAAV,UAAU,CAA/B;;AA6CA,eAAe,MAAf","sourcesContent":["/**\n * @module ol/format/filter/IsLike\n */\nimport Comparison from './Comparison.js';\n\n/**\n * @classdesc\n * Represents a `<PropertyIsLike>` comparison operator.\n * @api\n */\nclass IsLike extends Comparison {\n\n  /**\n   * [constructor description]\n   * @param {!string} propertyName Name of the context property to compare.\n   * @param {!string} pattern Text pattern.\n   * @param {string=} opt_wildCard Pattern character which matches any sequence of\n   *    zero or more string characters. Default is '*'.\n   * @param {string=} opt_singleChar pattern character which matches any single\n   *    string character. Default is '.'.\n   * @param {string=} opt_escapeChar Escape character which can be used to escape\n   *    the pattern characters. Default is '!'.\n   * @param {boolean=} opt_matchCase Case-sensitive?\n   */\n  constructor(propertyName, pattern, opt_wildCard, opt_singleChar, opt_escapeChar, opt_matchCase) {\n    super('PropertyIsLike', propertyName);\n\n    /**\n     * @type {!string}\n     */\n    this.pattern = pattern;\n\n    /**\n     * @type {!string}\n     */\n    this.wildCard = (opt_wildCard !== undefined) ? opt_wildCard : '*';\n\n    /**\n     * @type {!string}\n     */\n    this.singleChar = (opt_singleChar !== undefined) ? opt_singleChar : '.';\n\n    /**\n     * @type {!string}\n     */\n    this.escapeChar = (opt_escapeChar !== undefined) ? opt_escapeChar : '!';\n\n    /**\n     * @type {boolean|undefined}\n     */\n    this.matchCase = opt_matchCase;\n\n  }\n}\n\nexport default IsLike;\n"]},"metadata":{},"sourceType":"module"}