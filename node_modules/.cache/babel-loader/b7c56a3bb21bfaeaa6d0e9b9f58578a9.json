{"ast":null,"code":"/**\n * @module ol/geom/LineString\n */\nimport { extend } from '../array.js';\nimport { closestSquaredDistanceXY } from '../extent.js';\nimport GeometryLayout from './GeometryLayout.js';\nimport GeometryType from './GeometryType.js';\nimport SimpleGeometry from './SimpleGeometry.js';\nimport { assignClosestPoint, maxSquaredDelta } from './flat/closest.js';\nimport { deflateCoordinates } from './flat/deflate.js';\nimport { inflateCoordinates } from './flat/inflate.js';\nimport { interpolatePoint, lineStringCoordinateAtM } from './flat/interpolate.js';\nimport { intersectsLineString } from './flat/intersectsextent.js';\nimport { lineStringLength } from './flat/length.js';\nimport { forEach as forEachSegment } from './flat/segments.js';\nimport { douglasPeucker } from './flat/simplify.js';\n/**\n * @classdesc\n * Linestring geometry.\n *\n * @api\n */\n\nvar LineString =\n/*@__PURE__*/\nfunction (SimpleGeometry) {\n  function LineString(coordinates, opt_layout) {\n    SimpleGeometry.call(this);\n    /**\n     * @private\n     * @type {import(\"../coordinate.js\").Coordinate}\n     */\n\n    this.flatMidpoint_ = null;\n    /**\n     * @private\n     * @type {number}\n     */\n\n    this.flatMidpointRevision_ = -1;\n    /**\n     * @private\n     * @type {number}\n     */\n\n    this.maxDelta_ = -1;\n    /**\n     * @private\n     * @type {number}\n     */\n\n    this.maxDeltaRevision_ = -1;\n\n    if (opt_layout !== undefined && !Array.isArray(coordinates[0])) {\n      this.setFlatCoordinates(opt_layout,\n      /** @type {Array<number>} */\n      coordinates);\n    } else {\n      this.setCoordinates(\n      /** @type {Array<import(\"../coordinate.js\").Coordinate>} */\n      coordinates, opt_layout);\n    }\n  }\n\n  if (SimpleGeometry) LineString.__proto__ = SimpleGeometry;\n  LineString.prototype = Object.create(SimpleGeometry && SimpleGeometry.prototype);\n  LineString.prototype.constructor = LineString;\n  /**\n   * Append the passed coordinate to the coordinates of the linestring.\n   * @param {import(\"../coordinate.js\").Coordinate} coordinate Coordinate.\n   * @api\n   */\n\n  LineString.prototype.appendCoordinate = function appendCoordinate(coordinate) {\n    if (!this.flatCoordinates) {\n      this.flatCoordinates = coordinate.slice();\n    } else {\n      extend(this.flatCoordinates, coordinate);\n    }\n\n    this.changed();\n  };\n  /**\n   * Make a complete copy of the geometry.\n   * @return {!LineString} Clone.\n   * @override\n   * @api\n   */\n\n\n  LineString.prototype.clone = function clone() {\n    return new LineString(this.flatCoordinates.slice(), this.layout);\n  };\n  /**\n   * @inheritDoc\n   */\n\n\n  LineString.prototype.closestPointXY = function closestPointXY(x, y, closestPoint, minSquaredDistance) {\n    if (minSquaredDistance < closestSquaredDistanceXY(this.getExtent(), x, y)) {\n      return minSquaredDistance;\n    }\n\n    if (this.maxDeltaRevision_ != this.getRevision()) {\n      this.maxDelta_ = Math.sqrt(maxSquaredDelta(this.flatCoordinates, 0, this.flatCoordinates.length, this.stride, 0));\n      this.maxDeltaRevision_ = this.getRevision();\n    }\n\n    return assignClosestPoint(this.flatCoordinates, 0, this.flatCoordinates.length, this.stride, this.maxDelta_, false, x, y, closestPoint, minSquaredDistance);\n  };\n  /**\n   * Iterate over each segment, calling the provided callback.\n   * If the callback returns a truthy value the function returns that\n   * value immediately. Otherwise the function returns `false`.\n   *\n   * @param {function(this: S, import(\"../coordinate.js\").Coordinate, import(\"../coordinate.js\").Coordinate): T} callback Function\n   *     called for each segment.\n   * @return {T|boolean} Value.\n   * @template T,S\n   * @api\n   */\n\n\n  LineString.prototype.forEachSegment = function forEachSegment$1(callback) {\n    return forEachSegment(this.flatCoordinates, 0, this.flatCoordinates.length, this.stride, callback);\n  };\n  /**\n   * Returns the coordinate at `m` using linear interpolation, or `null` if no\n   * such coordinate exists.\n   *\n   * `opt_extrapolate` controls extrapolation beyond the range of Ms in the\n   * MultiLineString. If `opt_extrapolate` is `true` then Ms less than the first\n   * M will return the first coordinate and Ms greater than the last M will\n   * return the last coordinate.\n   *\n   * @param {number} m M.\n   * @param {boolean=} opt_extrapolate Extrapolate. Default is `false`.\n   * @return {import(\"../coordinate.js\").Coordinate} Coordinate.\n   * @api\n   */\n\n\n  LineString.prototype.getCoordinateAtM = function getCoordinateAtM(m, opt_extrapolate) {\n    if (this.layout != GeometryLayout.XYM && this.layout != GeometryLayout.XYZM) {\n      return null;\n    }\n\n    var extrapolate = opt_extrapolate !== undefined ? opt_extrapolate : false;\n    return lineStringCoordinateAtM(this.flatCoordinates, 0, this.flatCoordinates.length, this.stride, m, extrapolate);\n  };\n  /**\n   * Return the coordinates of the linestring.\n   * @return {Array<import(\"../coordinate.js\").Coordinate>} Coordinates.\n   * @override\n   * @api\n   */\n\n\n  LineString.prototype.getCoordinates = function getCoordinates() {\n    return inflateCoordinates(this.flatCoordinates, 0, this.flatCoordinates.length, this.stride);\n  };\n  /**\n   * Return the coordinate at the provided fraction along the linestring.\n   * The `fraction` is a number between 0 and 1, where 0 is the start of the\n   * linestring and 1 is the end.\n   * @param {number} fraction Fraction.\n   * @param {import(\"../coordinate.js\").Coordinate=} opt_dest Optional coordinate whose values will\n   *     be modified. If not provided, a new coordinate will be returned.\n   * @return {import(\"../coordinate.js\").Coordinate} Coordinate of the interpolated point.\n   * @api\n   */\n\n\n  LineString.prototype.getCoordinateAt = function getCoordinateAt(fraction, opt_dest) {\n    return interpolatePoint(this.flatCoordinates, 0, this.flatCoordinates.length, this.stride, fraction, opt_dest);\n  };\n  /**\n   * Return the length of the linestring on projected plane.\n   * @return {number} Length (on projected plane).\n   * @api\n   */\n\n\n  LineString.prototype.getLength = function getLength() {\n    return lineStringLength(this.flatCoordinates, 0, this.flatCoordinates.length, this.stride);\n  };\n  /**\n   * @return {Array<number>} Flat midpoint.\n   */\n\n\n  LineString.prototype.getFlatMidpoint = function getFlatMidpoint() {\n    if (this.flatMidpointRevision_ != this.getRevision()) {\n      this.flatMidpoint_ = this.getCoordinateAt(0.5, this.flatMidpoint_);\n      this.flatMidpointRevision_ = this.getRevision();\n    }\n\n    return this.flatMidpoint_;\n  };\n  /**\n   * @inheritDoc\n   */\n\n\n  LineString.prototype.getSimplifiedGeometryInternal = function getSimplifiedGeometryInternal(squaredTolerance) {\n    var simplifiedFlatCoordinates = [];\n    simplifiedFlatCoordinates.length = douglasPeucker(this.flatCoordinates, 0, this.flatCoordinates.length, this.stride, squaredTolerance, simplifiedFlatCoordinates, 0);\n    return new LineString(simplifiedFlatCoordinates, GeometryLayout.XY);\n  };\n  /**\n   * @inheritDoc\n   * @api\n   */\n\n\n  LineString.prototype.getType = function getType() {\n    return GeometryType.LINE_STRING;\n  };\n  /**\n   * @inheritDoc\n   * @api\n   */\n\n\n  LineString.prototype.intersectsExtent = function intersectsExtent(extent) {\n    return intersectsLineString(this.flatCoordinates, 0, this.flatCoordinates.length, this.stride, extent);\n  };\n  /**\n   * Set the coordinates of the linestring.\n   * @param {!Array<import(\"../coordinate.js\").Coordinate>} coordinates Coordinates.\n   * @param {GeometryLayout=} opt_layout Layout.\n   * @override\n   * @api\n   */\n\n\n  LineString.prototype.setCoordinates = function setCoordinates(coordinates, opt_layout) {\n    this.setLayout(opt_layout, coordinates, 1);\n\n    if (!this.flatCoordinates) {\n      this.flatCoordinates = [];\n    }\n\n    this.flatCoordinates.length = deflateCoordinates(this.flatCoordinates, 0, coordinates, this.stride);\n    this.changed();\n  };\n\n  return LineString;\n}(SimpleGeometry);\n\nexport default LineString;","map":{"version":3,"sources":["../../../src/ol/geom/LineString.js"],"names":["super","const"],"mappings":"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","sourcesContent":["/**\n * @module ol/geom/LineString\n */\nimport {extend} from '../array.js';\nimport {closestSquaredDistanceXY} from '../extent.js';\nimport GeometryLayout from './GeometryLayout.js';\nimport GeometryType from './GeometryType.js';\nimport SimpleGeometry from './SimpleGeometry.js';\nimport {assignClosestPoint, maxSquaredDelta} from './flat/closest.js';\nimport {deflateCoordinates} from './flat/deflate.js';\nimport {inflateCoordinates} from './flat/inflate.js';\nimport {interpolatePoint, lineStringCoordinateAtM} from './flat/interpolate.js';\nimport {intersectsLineString} from './flat/intersectsextent.js';\nimport {lineStringLength} from './flat/length.js';\nimport {forEach as forEachSegment} from './flat/segments.js';\nimport {douglasPeucker} from './flat/simplify.js';\n\n/**\n * @classdesc\n * Linestring geometry.\n *\n * @api\n */\nclass LineString extends SimpleGeometry {\n\n  /**\n   * @param {Array<import(\"../coordinate.js\").Coordinate>|Array<number>} coordinates Coordinates.\n   *     For internal use, flat coordinates in combination with `opt_layout` are also accepted.\n   * @param {GeometryLayout=} opt_layout Layout.\n   */\n  constructor(coordinates, opt_layout) {\n\n    super();\n\n    /**\n     * @private\n     * @type {import(\"../coordinate.js\").Coordinate}\n     */\n    this.flatMidpoint_ = null;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.flatMidpointRevision_ = -1;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.maxDelta_ = -1;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.maxDeltaRevision_ = -1;\n\n    if (opt_layout !== undefined && !Array.isArray(coordinates[0])) {\n      this.setFlatCoordinates(opt_layout, /** @type {Array<number>} */ (coordinates));\n    } else {\n      this.setCoordinates(/** @type {Array<import(\"../coordinate.js\").Coordinate>} */ (coordinates), opt_layout);\n    }\n\n  }\n\n  /**\n   * Append the passed coordinate to the coordinates of the linestring.\n   * @param {import(\"../coordinate.js\").Coordinate} coordinate Coordinate.\n   * @api\n   */\n  appendCoordinate(coordinate) {\n    if (!this.flatCoordinates) {\n      this.flatCoordinates = coordinate.slice();\n    } else {\n      extend(this.flatCoordinates, coordinate);\n    }\n    this.changed();\n  }\n\n  /**\n   * Make a complete copy of the geometry.\n   * @return {!LineString} Clone.\n   * @override\n   * @api\n   */\n  clone() {\n    return new LineString(this.flatCoordinates.slice(), this.layout);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  closestPointXY(x, y, closestPoint, minSquaredDistance) {\n    if (minSquaredDistance < closestSquaredDistanceXY(this.getExtent(), x, y)) {\n      return minSquaredDistance;\n    }\n    if (this.maxDeltaRevision_ != this.getRevision()) {\n      this.maxDelta_ = Math.sqrt(maxSquaredDelta(\n        this.flatCoordinates, 0, this.flatCoordinates.length, this.stride, 0));\n      this.maxDeltaRevision_ = this.getRevision();\n    }\n    return assignClosestPoint(\n      this.flatCoordinates, 0, this.flatCoordinates.length, this.stride,\n      this.maxDelta_, false, x, y, closestPoint, minSquaredDistance);\n  }\n\n  /**\n   * Iterate over each segment, calling the provided callback.\n   * If the callback returns a truthy value the function returns that\n   * value immediately. Otherwise the function returns `false`.\n   *\n   * @param {function(this: S, import(\"../coordinate.js\").Coordinate, import(\"../coordinate.js\").Coordinate): T} callback Function\n   *     called for each segment.\n   * @return {T|boolean} Value.\n   * @template T,S\n   * @api\n   */\n  forEachSegment(callback) {\n    return forEachSegment(this.flatCoordinates, 0, this.flatCoordinates.length, this.stride, callback);\n  }\n\n  /**\n   * Returns the coordinate at `m` using linear interpolation, or `null` if no\n   * such coordinate exists.\n   *\n   * `opt_extrapolate` controls extrapolation beyond the range of Ms in the\n   * MultiLineString. If `opt_extrapolate` is `true` then Ms less than the first\n   * M will return the first coordinate and Ms greater than the last M will\n   * return the last coordinate.\n   *\n   * @param {number} m M.\n   * @param {boolean=} opt_extrapolate Extrapolate. Default is `false`.\n   * @return {import(\"../coordinate.js\").Coordinate} Coordinate.\n   * @api\n   */\n  getCoordinateAtM(m, opt_extrapolate) {\n    if (this.layout != GeometryLayout.XYM &&\n        this.layout != GeometryLayout.XYZM) {\n      return null;\n    }\n    const extrapolate = opt_extrapolate !== undefined ? opt_extrapolate : false;\n    return lineStringCoordinateAtM(this.flatCoordinates, 0,\n      this.flatCoordinates.length, this.stride, m, extrapolate);\n  }\n\n  /**\n   * Return the coordinates of the linestring.\n   * @return {Array<import(\"../coordinate.js\").Coordinate>} Coordinates.\n   * @override\n   * @api\n   */\n  getCoordinates() {\n    return inflateCoordinates(\n      this.flatCoordinates, 0, this.flatCoordinates.length, this.stride);\n  }\n\n  /**\n   * Return the coordinate at the provided fraction along the linestring.\n   * The `fraction` is a number between 0 and 1, where 0 is the start of the\n   * linestring and 1 is the end.\n   * @param {number} fraction Fraction.\n   * @param {import(\"../coordinate.js\").Coordinate=} opt_dest Optional coordinate whose values will\n   *     be modified. If not provided, a new coordinate will be returned.\n   * @return {import(\"../coordinate.js\").Coordinate} Coordinate of the interpolated point.\n   * @api\n   */\n  getCoordinateAt(fraction, opt_dest) {\n    return interpolatePoint(\n      this.flatCoordinates, 0, this.flatCoordinates.length, this.stride,\n      fraction, opt_dest);\n  }\n\n  /**\n   * Return the length of the linestring on projected plane.\n   * @return {number} Length (on projected plane).\n   * @api\n   */\n  getLength() {\n    return lineStringLength(\n      this.flatCoordinates, 0, this.flatCoordinates.length, this.stride);\n  }\n\n  /**\n   * @return {Array<number>} Flat midpoint.\n   */\n  getFlatMidpoint() {\n    if (this.flatMidpointRevision_ != this.getRevision()) {\n      this.flatMidpoint_ = this.getCoordinateAt(0.5, this.flatMidpoint_);\n      this.flatMidpointRevision_ = this.getRevision();\n    }\n    return this.flatMidpoint_;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  getSimplifiedGeometryInternal(squaredTolerance) {\n    const simplifiedFlatCoordinates = [];\n    simplifiedFlatCoordinates.length = douglasPeucker(\n      this.flatCoordinates, 0, this.flatCoordinates.length, this.stride,\n      squaredTolerance, simplifiedFlatCoordinates, 0);\n    return new LineString(simplifiedFlatCoordinates, GeometryLayout.XY);\n  }\n\n  /**\n   * @inheritDoc\n   * @api\n   */\n  getType() {\n    return GeometryType.LINE_STRING;\n  }\n\n  /**\n   * @inheritDoc\n   * @api\n   */\n  intersectsExtent(extent) {\n    return intersectsLineString(\n      this.flatCoordinates, 0, this.flatCoordinates.length, this.stride,\n      extent);\n  }\n\n  /**\n   * Set the coordinates of the linestring.\n   * @param {!Array<import(\"../coordinate.js\").Coordinate>} coordinates Coordinates.\n   * @param {GeometryLayout=} opt_layout Layout.\n   * @override\n   * @api\n   */\n  setCoordinates(coordinates, opt_layout) {\n    this.setLayout(opt_layout, coordinates, 1);\n    if (!this.flatCoordinates) {\n      this.flatCoordinates = [];\n    }\n    this.flatCoordinates.length = deflateCoordinates(\n      this.flatCoordinates, 0, coordinates, this.stride);\n    this.changed();\n  }\n}\n\n\nexport default LineString;\n"]},"metadata":{},"sourceType":"module"}