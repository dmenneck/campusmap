{"ast":null,"code":"/**\n * @module ol/control/OverviewMap\n */\nimport Collection from '../Collection.js';\nimport Map from '../Map.js';\nimport MapEventType from '../MapEventType.js';\nimport MapProperty from '../MapProperty.js';\nimport { getChangeEventType } from '../Object.js';\nimport ObjectEventType from '../ObjectEventType.js';\nimport Overlay from '../Overlay.js';\nimport OverlayPositioning from '../OverlayPositioning.js';\nimport ViewProperty from '../ViewProperty.js';\nimport Control from './Control.js';\nimport { rotate as rotateCoordinate, add as addCoordinate } from '../coordinate.js';\nimport { CLASS_CONTROL, CLASS_UNSELECTABLE, CLASS_COLLAPSED } from '../css.js';\nimport { replaceNode } from '../dom.js';\nimport { listen, listenOnce, unlisten } from '../events.js';\nimport EventType from '../events/EventType.js';\nimport { containsExtent, getBottomLeft, getBottomRight, getTopLeft, getTopRight, scaleFromCenter } from '../extent.js';\n/**\n * Maximum width and/or height extent ratio that determines when the overview\n * map should be zoomed out.\n * @type {number}\n */\n\nvar MAX_RATIO = 0.75;\n/**\n * Minimum width and/or height extent ratio that determines when the overview\n * map should be zoomed in.\n * @type {number}\n */\n\nvar MIN_RATIO = 0.1;\n/**\n * @typedef {Object} Options\n * @property {string} [className='ol-overviewmap'] CSS class name.\n * @property {boolean} [collapsed=true] Whether the control should start collapsed or not (expanded).\n * @property {string|HTMLElement} [collapseLabel='«'] Text label to use for the\n * expanded overviewmap button. Instead of text, also an element (e.g. a `span` element) can be used.\n * @property {boolean} [collapsible=true] Whether the control can be collapsed or not.\n * @property {string|HTMLElement} [label='»'] Text label to use for the collapsed\n * overviewmap button. Instead of text, also an element (e.g. a `span` element) can be used.\n * @property {Array<import(\"../layer/Layer.js\").default>|import(\"../Collection.js\").default<import(\"../layer/Layer.js\").default>} [layers]\n * Layers for the overview map. If not set, then all main map layers are used\n * instead.\n * @property {function(import(\"../MapEvent.js\").default)} [render] Function called when the control\n * should be re-rendered. This is called in a `requestAnimationFrame` callback.\n * @property {HTMLElement|string} [target] Specify a target if you want the control\n * to be rendered outside of the map's viewport.\n * @property {string} [tipLabel='Overview map'] Text label to use for the button tip.\n * @property {import(\"../View.js\").default} [view] Custom view for the overview map. If not provided,\n * a default view with an EPSG:3857 projection will be used.\n */\n\n/**\n * Create a new control with a map acting as an overview map for an other\n * defined map.\n *\n * @api\n */\n\nvar OverviewMap =\n/*@__PURE__*/\nfunction (Control) {\n  function OverviewMap(opt_options) {\n    var options = opt_options ? opt_options : {};\n    Control.call(this, {\n      element: document.createElement('div'),\n      render: options.render || render,\n      target: options.target\n    });\n    /**\n     * @type {boolean}\n     * @private\n     */\n\n    this.collapsed_ = options.collapsed !== undefined ? options.collapsed : true;\n    /**\n     * @private\n     * @type {boolean}\n     */\n\n    this.collapsible_ = options.collapsible !== undefined ? options.collapsible : true;\n\n    if (!this.collapsible_) {\n      this.collapsed_ = false;\n    }\n\n    var className = options.className !== undefined ? options.className : 'ol-overviewmap';\n    var tipLabel = options.tipLabel !== undefined ? options.tipLabel : 'Overview map';\n    var collapseLabel = options.collapseLabel !== undefined ? options.collapseLabel : '\\u00AB';\n\n    if (typeof collapseLabel === 'string') {\n      /**\n       * @private\n       * @type {HTMLElement}\n       */\n      this.collapseLabel_ = document.createElement('span');\n      this.collapseLabel_.textContent = collapseLabel;\n    } else {\n      this.collapseLabel_ = collapseLabel;\n    }\n\n    var label = options.label !== undefined ? options.label : '\\u00BB';\n\n    if (typeof label === 'string') {\n      /**\n       * @private\n       * @type {HTMLElement}\n       */\n      this.label_ = document.createElement('span');\n      this.label_.textContent = label;\n    } else {\n      this.label_ = label;\n    }\n\n    var activeLabel = this.collapsible_ && !this.collapsed_ ? this.collapseLabel_ : this.label_;\n    var button = document.createElement('button');\n    button.setAttribute('type', 'button');\n    button.title = tipLabel;\n    button.appendChild(activeLabel);\n    listen(button, EventType.CLICK, this.handleClick_, this);\n    /**\n     * @type {HTMLElement}\n     * @private\n     */\n\n    this.ovmapDiv_ = document.createElement('div');\n    this.ovmapDiv_.className = 'ol-overviewmap-map';\n    /**\n     * @type {import(\"../Map.js\").default}\n     * @private\n     */\n\n    this.ovmap_ = new Map({\n      controls: new Collection(),\n      interactions: new Collection(),\n      view: options.view\n    });\n    var ovmap = this.ovmap_;\n\n    if (options.layers) {\n      /** @type {Array<import(\"../layer/Layer.js\").default>} */\n      options.layers.forEach(\n      /**\n       * @param {import(\"../layer/Layer.js\").default} layer Layer.\n       */\n      function (layer) {\n        ovmap.addLayer(layer);\n      }.bind(this));\n    }\n\n    var box = document.createElement('div');\n    box.className = 'ol-overviewmap-box';\n    box.style.boxSizing = 'border-box';\n    /**\n     * @type {import(\"../Overlay.js\").default}\n     * @private\n     */\n\n    this.boxOverlay_ = new Overlay({\n      position: [0, 0],\n      positioning: OverlayPositioning.BOTTOM_LEFT,\n      element: box\n    });\n    this.ovmap_.addOverlay(this.boxOverlay_);\n    var cssClasses = className + ' ' + CLASS_UNSELECTABLE + ' ' + CLASS_CONTROL + (this.collapsed_ && this.collapsible_ ? ' ' + CLASS_COLLAPSED : '') + (this.collapsible_ ? '' : ' ol-uncollapsible');\n    var element = this.element;\n    element.className = cssClasses;\n    element.appendChild(this.ovmapDiv_);\n    element.appendChild(button);\n    /* Interactive map */\n\n    var scope = this;\n    var overlay = this.boxOverlay_;\n    var overlayBox = this.boxOverlay_.getElement();\n    /* Functions definition */\n\n    var computeDesiredMousePosition = function (mousePosition) {\n      return {\n        clientX: mousePosition.clientX - overlayBox.offsetWidth / 2,\n        clientY: mousePosition.clientY + overlayBox.offsetHeight / 2\n      };\n    };\n\n    var move = function (event) {\n      var position =\n      /** @type {?} */\n      computeDesiredMousePosition(event);\n      var coordinates = ovmap.getEventCoordinate(\n      /** @type {Event} */\n      position);\n      overlay.setPosition(coordinates);\n    };\n\n    var endMoving = function (event) {\n      var coordinates = ovmap.getEventCoordinate(event);\n      scope.getMap().getView().setCenter(coordinates);\n      window.removeEventListener('mousemove', move);\n      window.removeEventListener('mouseup', endMoving);\n    };\n    /* Binding */\n\n\n    overlayBox.addEventListener('mousedown', function () {\n      window.addEventListener('mousemove', move);\n      window.addEventListener('mouseup', endMoving);\n    });\n  }\n\n  if (Control) OverviewMap.__proto__ = Control;\n  OverviewMap.prototype = Object.create(Control && Control.prototype);\n  OverviewMap.prototype.constructor = OverviewMap;\n  /**\n   * @inheritDoc\n   * @api\n   */\n\n  OverviewMap.prototype.setMap = function setMap(map) {\n    var oldMap = this.getMap();\n\n    if (map === oldMap) {\n      return;\n    }\n\n    if (oldMap) {\n      var oldView = oldMap.getView();\n\n      if (oldView) {\n        this.unbindView_(oldView);\n      }\n\n      this.ovmap_.setTarget(null);\n    }\n\n    Control.prototype.setMap.call(this, map);\n\n    if (map) {\n      this.ovmap_.setTarget(this.ovmapDiv_);\n      this.listenerKeys.push(listen(map, ObjectEventType.PROPERTYCHANGE, this.handleMapPropertyChange_, this)); // TODO: to really support map switching, this would need to be reworked\n\n      if (this.ovmap_.getLayers().getLength() === 0) {\n        this.ovmap_.setLayerGroup(map.getLayerGroup());\n      }\n\n      var view = map.getView();\n\n      if (view) {\n        this.bindView_(view);\n\n        if (view.isDef()) {\n          this.ovmap_.updateSize();\n          this.resetExtent_();\n        }\n      }\n    }\n  };\n  /**\n   * Handle map property changes.  This only deals with changes to the map's view.\n   * @param {import(\"../Object.js\").ObjectEvent} event The propertychange event.\n   * @private\n   */\n\n\n  OverviewMap.prototype.handleMapPropertyChange_ = function handleMapPropertyChange_(event) {\n    if (event.key === MapProperty.VIEW) {\n      var oldView =\n      /** @type {import(\"../View.js\").default} */\n      event.oldValue;\n\n      if (oldView) {\n        this.unbindView_(oldView);\n      }\n\n      var newView = this.getMap().getView();\n      this.bindView_(newView);\n    }\n  };\n  /**\n   * Register listeners for view property changes.\n   * @param {import(\"../View.js\").default} view The view.\n   * @private\n   */\n\n\n  OverviewMap.prototype.bindView_ = function bindView_(view) {\n    listen(view, getChangeEventType(ViewProperty.ROTATION), this.handleRotationChanged_, this);\n  };\n  /**\n   * Unregister listeners for view property changes.\n   * @param {import(\"../View.js\").default} view The view.\n   * @private\n   */\n\n\n  OverviewMap.prototype.unbindView_ = function unbindView_(view) {\n    unlisten(view, getChangeEventType(ViewProperty.ROTATION), this.handleRotationChanged_, this);\n  };\n  /**\n   * Handle rotation changes to the main map.\n   * TODO: This should rotate the extent rectrangle instead of the\n   * overview map's view.\n   * @private\n   */\n\n\n  OverviewMap.prototype.handleRotationChanged_ = function handleRotationChanged_() {\n    this.ovmap_.getView().setRotation(this.getMap().getView().getRotation());\n  };\n  /**\n   * Reset the overview map extent if the box size (width or\n   * height) is less than the size of the overview map size times minRatio\n   * or is greater than the size of the overview size times maxRatio.\n   *\n   * If the map extent was not reset, the box size can fits in the defined\n   * ratio sizes. This method then checks if is contained inside the overview\n   * map current extent. If not, recenter the overview map to the current\n   * main map center location.\n   * @private\n   */\n\n\n  OverviewMap.prototype.validateExtent_ = function validateExtent_() {\n    var map = this.getMap();\n    var ovmap = this.ovmap_;\n\n    if (!map.isRendered() || !ovmap.isRendered()) {\n      return;\n    }\n\n    var mapSize =\n    /** @type {import(\"../size.js\").Size} */\n    map.getSize();\n    var view = map.getView();\n    var extent = view.calculateExtent(mapSize);\n    var ovmapSize =\n    /** @type {import(\"../size.js\").Size} */\n    ovmap.getSize();\n    var ovview = ovmap.getView();\n    var ovextent = ovview.calculateExtent(ovmapSize);\n    var topLeftPixel = ovmap.getPixelFromCoordinate(getTopLeft(extent));\n    var bottomRightPixel = ovmap.getPixelFromCoordinate(getBottomRight(extent));\n    var boxWidth = Math.abs(topLeftPixel[0] - bottomRightPixel[0]);\n    var boxHeight = Math.abs(topLeftPixel[1] - bottomRightPixel[1]);\n    var ovmapWidth = ovmapSize[0];\n    var ovmapHeight = ovmapSize[1];\n\n    if (boxWidth < ovmapWidth * MIN_RATIO || boxHeight < ovmapHeight * MIN_RATIO || boxWidth > ovmapWidth * MAX_RATIO || boxHeight > ovmapHeight * MAX_RATIO) {\n      this.resetExtent_();\n    } else if (!containsExtent(ovextent, extent)) {\n      this.recenter_();\n    }\n  };\n  /**\n   * Reset the overview map extent to half calculated min and max ratio times\n   * the extent of the main map.\n   * @private\n   */\n\n\n  OverviewMap.prototype.resetExtent_ = function resetExtent_() {\n    if (MAX_RATIO === 0 || MIN_RATIO === 0) {\n      return;\n    }\n\n    var map = this.getMap();\n    var ovmap = this.ovmap_;\n    var mapSize =\n    /** @type {import(\"../size.js\").Size} */\n    map.getSize();\n    var view = map.getView();\n    var extent = view.calculateExtent(mapSize);\n    var ovview = ovmap.getView(); // get how many times the current map overview could hold different\n    // box sizes using the min and max ratio, pick the step in the middle used\n    // to calculate the extent from the main map to set it to the overview map,\n\n    var steps = Math.log(MAX_RATIO / MIN_RATIO) / Math.LN2;\n    var ratio = 1 / (Math.pow(2, steps / 2) * MIN_RATIO);\n    scaleFromCenter(extent, ratio);\n    ovview.fit(extent);\n  };\n  /**\n   * Set the center of the overview map to the map center without changing its\n   * resolution.\n   * @private\n   */\n\n\n  OverviewMap.prototype.recenter_ = function recenter_() {\n    var map = this.getMap();\n    var ovmap = this.ovmap_;\n    var view = map.getView();\n    var ovview = ovmap.getView();\n    ovview.setCenter(view.getCenter());\n  };\n  /**\n   * Update the box using the main map extent\n   * @private\n   */\n\n\n  OverviewMap.prototype.updateBox_ = function updateBox_() {\n    var map = this.getMap();\n    var ovmap = this.ovmap_;\n\n    if (!map.isRendered() || !ovmap.isRendered()) {\n      return;\n    }\n\n    var mapSize =\n    /** @type {import(\"../size.js\").Size} */\n    map.getSize();\n    var view = map.getView();\n    var ovview = ovmap.getView();\n    var rotation = view.getRotation();\n    var overlay = this.boxOverlay_;\n    var box = this.boxOverlay_.getElement();\n    var extent = view.calculateExtent(mapSize);\n    var ovresolution = ovview.getResolution();\n    var bottomLeft = getBottomLeft(extent);\n    var topRight = getTopRight(extent); // set position using bottom left coordinates\n\n    var rotateBottomLeft = this.calculateCoordinateRotate_(rotation, bottomLeft);\n    overlay.setPosition(rotateBottomLeft); // set box size calculated from map extent size and overview map resolution\n\n    if (box) {\n      box.style.width = Math.abs((bottomLeft[0] - topRight[0]) / ovresolution) + 'px';\n      box.style.height = Math.abs((topRight[1] - bottomLeft[1]) / ovresolution) + 'px';\n    }\n  };\n  /**\n   * @param {number} rotation Target rotation.\n   * @param {import(\"../coordinate.js\").Coordinate} coordinate Coordinate.\n   * @return {import(\"../coordinate.js\").Coordinate|undefined} Coordinate for rotation and center anchor.\n   * @private\n   */\n\n\n  OverviewMap.prototype.calculateCoordinateRotate_ = function calculateCoordinateRotate_(rotation, coordinate) {\n    var coordinateRotate;\n    var map = this.getMap();\n    var view = map.getView();\n    var currentCenter = view.getCenter();\n\n    if (currentCenter) {\n      coordinateRotate = [coordinate[0] - currentCenter[0], coordinate[1] - currentCenter[1]];\n      rotateCoordinate(coordinateRotate, rotation);\n      addCoordinate(coordinateRotate, currentCenter);\n    }\n\n    return coordinateRotate;\n  };\n  /**\n   * @param {MouseEvent} event The event to handle\n   * @private\n   */\n\n\n  OverviewMap.prototype.handleClick_ = function handleClick_(event) {\n    event.preventDefault();\n    this.handleToggle_();\n  };\n  /**\n   * @private\n   */\n\n\n  OverviewMap.prototype.handleToggle_ = function handleToggle_() {\n    this.element.classList.toggle(CLASS_COLLAPSED);\n\n    if (this.collapsed_) {\n      replaceNode(this.collapseLabel_, this.label_);\n    } else {\n      replaceNode(this.label_, this.collapseLabel_);\n    }\n\n    this.collapsed_ = !this.collapsed_; // manage overview map if it had not been rendered before and control\n    // is expanded\n\n    var ovmap = this.ovmap_;\n\n    if (!this.collapsed_ && !ovmap.isRendered()) {\n      ovmap.updateSize();\n      this.resetExtent_();\n      listenOnce(ovmap, MapEventType.POSTRENDER, function (event) {\n        this.updateBox_();\n      }, this);\n    }\n  };\n  /**\n   * Return `true` if the overview map is collapsible, `false` otherwise.\n   * @return {boolean} True if the widget is collapsible.\n   * @api\n   */\n\n\n  OverviewMap.prototype.getCollapsible = function getCollapsible() {\n    return this.collapsible_;\n  };\n  /**\n   * Set whether the overview map should be collapsible.\n   * @param {boolean} collapsible True if the widget is collapsible.\n   * @api\n   */\n\n\n  OverviewMap.prototype.setCollapsible = function setCollapsible(collapsible) {\n    if (this.collapsible_ === collapsible) {\n      return;\n    }\n\n    this.collapsible_ = collapsible;\n    this.element.classList.toggle('ol-uncollapsible');\n\n    if (!collapsible && this.collapsed_) {\n      this.handleToggle_();\n    }\n  };\n  /**\n   * Collapse or expand the overview map according to the passed parameter. Will\n   * not do anything if the overview map isn't collapsible or if the current\n   * collapsed state is already the one requested.\n   * @param {boolean} collapsed True if the widget is collapsed.\n   * @api\n   */\n\n\n  OverviewMap.prototype.setCollapsed = function setCollapsed(collapsed) {\n    if (!this.collapsible_ || this.collapsed_ === collapsed) {\n      return;\n    }\n\n    this.handleToggle_();\n  };\n  /**\n   * Determine if the overview map is collapsed.\n   * @return {boolean} The overview map is collapsed.\n   * @api\n   */\n\n\n  OverviewMap.prototype.getCollapsed = function getCollapsed() {\n    return this.collapsed_;\n  };\n  /**\n   * Return the overview map.\n   * @return {import(\"../PluggableMap.js\").default} Overview map.\n   * @api\n   */\n\n\n  OverviewMap.prototype.getOverviewMap = function getOverviewMap() {\n    return this.ovmap_;\n  };\n\n  return OverviewMap;\n}(Control);\n/**\n * Update the overview map element.\n * @param {import(\"../MapEvent.js\").default} mapEvent Map event.\n * @this {OverviewMap}\n * @api\n */\n\n\nexport function render(mapEvent) {\n  this.validateExtent_();\n  this.updateBox_();\n}\nexport default OverviewMap;","map":{"version":3,"sources":["../../../src/ol/control/OverviewMap.js"],"names":["const","super","let"],"mappings":"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","sourcesContent":["/**\n * @module ol/control/OverviewMap\n */\nimport Collection from '../Collection.js';\nimport Map from '../Map.js';\nimport MapEventType from '../MapEventType.js';\nimport MapProperty from '../MapProperty.js';\nimport {getChangeEventType} from '../Object.js';\nimport ObjectEventType from '../ObjectEventType.js';\nimport Overlay from '../Overlay.js';\nimport OverlayPositioning from '../OverlayPositioning.js';\nimport ViewProperty from '../ViewProperty.js';\nimport Control from './Control.js';\nimport {rotate as rotateCoordinate, add as addCoordinate} from '../coordinate.js';\nimport {CLASS_CONTROL, CLASS_UNSELECTABLE, CLASS_COLLAPSED} from '../css.js';\nimport {replaceNode} from '../dom.js';\nimport {listen, listenOnce, unlisten} from '../events.js';\nimport EventType from '../events/EventType.js';\nimport {containsExtent, getBottomLeft, getBottomRight, getTopLeft, getTopRight, scaleFromCenter} from '../extent.js';\n\n\n/**\n * Maximum width and/or height extent ratio that determines when the overview\n * map should be zoomed out.\n * @type {number}\n */\nconst MAX_RATIO = 0.75;\n\n\n/**\n * Minimum width and/or height extent ratio that determines when the overview\n * map should be zoomed in.\n * @type {number}\n */\nconst MIN_RATIO = 0.1;\n\n\n/**\n * @typedef {Object} Options\n * @property {string} [className='ol-overviewmap'] CSS class name.\n * @property {boolean} [collapsed=true] Whether the control should start collapsed or not (expanded).\n * @property {string|HTMLElement} [collapseLabel='«'] Text label to use for the\n * expanded overviewmap button. Instead of text, also an element (e.g. a `span` element) can be used.\n * @property {boolean} [collapsible=true] Whether the control can be collapsed or not.\n * @property {string|HTMLElement} [label='»'] Text label to use for the collapsed\n * overviewmap button. Instead of text, also an element (e.g. a `span` element) can be used.\n * @property {Array<import(\"../layer/Layer.js\").default>|import(\"../Collection.js\").default<import(\"../layer/Layer.js\").default>} [layers]\n * Layers for the overview map. If not set, then all main map layers are used\n * instead.\n * @property {function(import(\"../MapEvent.js\").default)} [render] Function called when the control\n * should be re-rendered. This is called in a `requestAnimationFrame` callback.\n * @property {HTMLElement|string} [target] Specify a target if you want the control\n * to be rendered outside of the map's viewport.\n * @property {string} [tipLabel='Overview map'] Text label to use for the button tip.\n * @property {import(\"../View.js\").default} [view] Custom view for the overview map. If not provided,\n * a default view with an EPSG:3857 projection will be used.\n */\n\n\n/**\n * Create a new control with a map acting as an overview map for an other\n * defined map.\n *\n * @api\n */\nclass OverviewMap extends Control {\n\n  /**\n   * @param {Options=} opt_options OverviewMap options.\n   */\n  constructor(opt_options) {\n\n    const options = opt_options ? opt_options : {};\n\n    super({\n      element: document.createElement('div'),\n      render: options.render || render,\n      target: options.target\n    });\n\n    /**\n     * @type {boolean}\n     * @private\n     */\n    this.collapsed_ = options.collapsed !== undefined ? options.collapsed : true;\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.collapsible_ = options.collapsible !== undefined ?\n      options.collapsible : true;\n\n    if (!this.collapsible_) {\n      this.collapsed_ = false;\n    }\n\n    const className = options.className !== undefined ? options.className : 'ol-overviewmap';\n\n    const tipLabel = options.tipLabel !== undefined ? options.tipLabel : 'Overview map';\n\n    const collapseLabel = options.collapseLabel !== undefined ? options.collapseLabel : '\\u00AB';\n\n    if (typeof collapseLabel === 'string') {\n      /**\n       * @private\n       * @type {HTMLElement}\n       */\n      this.collapseLabel_ = document.createElement('span');\n      this.collapseLabel_.textContent = collapseLabel;\n    } else {\n      this.collapseLabel_ = collapseLabel;\n    }\n\n    const label = options.label !== undefined ? options.label : '\\u00BB';\n\n\n    if (typeof label === 'string') {\n      /**\n       * @private\n       * @type {HTMLElement}\n       */\n      this.label_ = document.createElement('span');\n      this.label_.textContent = label;\n    } else {\n      this.label_ = label;\n    }\n\n    const activeLabel = (this.collapsible_ && !this.collapsed_) ?\n      this.collapseLabel_ : this.label_;\n    const button = document.createElement('button');\n    button.setAttribute('type', 'button');\n    button.title = tipLabel;\n    button.appendChild(activeLabel);\n\n    listen(button, EventType.CLICK,\n      this.handleClick_, this);\n\n    /**\n     * @type {HTMLElement}\n     * @private\n     */\n    this.ovmapDiv_ = document.createElement('div');\n    this.ovmapDiv_.className = 'ol-overviewmap-map';\n\n    /**\n     * @type {import(\"../Map.js\").default}\n     * @private\n     */\n    this.ovmap_ = new Map({\n      controls: new Collection(),\n      interactions: new Collection(),\n      view: options.view\n    });\n    const ovmap = this.ovmap_;\n\n    if (options.layers) {\n      /** @type {Array<import(\"../layer/Layer.js\").default>} */ (options.layers).forEach(\n        /**\n         * @param {import(\"../layer/Layer.js\").default} layer Layer.\n         */\n        (function(layer) {\n          ovmap.addLayer(layer);\n        }).bind(this));\n    }\n\n    const box = document.createElement('div');\n    box.className = 'ol-overviewmap-box';\n    box.style.boxSizing = 'border-box';\n\n    /**\n     * @type {import(\"../Overlay.js\").default}\n     * @private\n     */\n    this.boxOverlay_ = new Overlay({\n      position: [0, 0],\n      positioning: OverlayPositioning.BOTTOM_LEFT,\n      element: box\n    });\n    this.ovmap_.addOverlay(this.boxOverlay_);\n\n    const cssClasses = className + ' ' + CLASS_UNSELECTABLE + ' ' + CLASS_CONTROL +\n        (this.collapsed_ && this.collapsible_ ? ' ' + CLASS_COLLAPSED : '') +\n        (this.collapsible_ ? '' : ' ol-uncollapsible');\n    const element = this.element;\n    element.className = cssClasses;\n    element.appendChild(this.ovmapDiv_);\n    element.appendChild(button);\n\n    /* Interactive map */\n\n    const scope = this;\n\n    const overlay = this.boxOverlay_;\n    const overlayBox = this.boxOverlay_.getElement();\n\n    /* Functions definition */\n\n    const computeDesiredMousePosition = function(mousePosition) {\n      return {\n        clientX: mousePosition.clientX - (overlayBox.offsetWidth / 2),\n        clientY: mousePosition.clientY + (overlayBox.offsetHeight / 2)\n      };\n    };\n\n    const move = function(event) {\n      const position = /** @type {?} */ (computeDesiredMousePosition(event));\n      const coordinates = ovmap.getEventCoordinate(/** @type {Event} */ (position));\n\n      overlay.setPosition(coordinates);\n    };\n\n    const endMoving = function(event) {\n      const coordinates = ovmap.getEventCoordinate(event);\n\n      scope.getMap().getView().setCenter(coordinates);\n\n      window.removeEventListener('mousemove', move);\n      window.removeEventListener('mouseup', endMoving);\n    };\n\n    /* Binding */\n\n    overlayBox.addEventListener('mousedown', function() {\n      window.addEventListener('mousemove', move);\n      window.addEventListener('mouseup', endMoving);\n    });\n  }\n\n  /**\n   * @inheritDoc\n   * @api\n   */\n  setMap(map) {\n    const oldMap = this.getMap();\n    if (map === oldMap) {\n      return;\n    }\n    if (oldMap) {\n      const oldView = oldMap.getView();\n      if (oldView) {\n        this.unbindView_(oldView);\n      }\n      this.ovmap_.setTarget(null);\n    }\n    super.setMap(map);\n\n    if (map) {\n      this.ovmap_.setTarget(this.ovmapDiv_);\n      this.listenerKeys.push(listen(\n        map, ObjectEventType.PROPERTYCHANGE,\n        this.handleMapPropertyChange_, this));\n\n      // TODO: to really support map switching, this would need to be reworked\n      if (this.ovmap_.getLayers().getLength() === 0) {\n        this.ovmap_.setLayerGroup(map.getLayerGroup());\n      }\n\n      const view = map.getView();\n      if (view) {\n        this.bindView_(view);\n        if (view.isDef()) {\n          this.ovmap_.updateSize();\n          this.resetExtent_();\n        }\n      }\n    }\n  }\n\n  /**\n   * Handle map property changes.  This only deals with changes to the map's view.\n   * @param {import(\"../Object.js\").ObjectEvent} event The propertychange event.\n   * @private\n   */\n  handleMapPropertyChange_(event) {\n    if (event.key === MapProperty.VIEW) {\n      const oldView = /** @type {import(\"../View.js\").default} */ (event.oldValue);\n      if (oldView) {\n        this.unbindView_(oldView);\n      }\n      const newView = this.getMap().getView();\n      this.bindView_(newView);\n    }\n  }\n\n  /**\n   * Register listeners for view property changes.\n   * @param {import(\"../View.js\").default} view The view.\n   * @private\n   */\n  bindView_(view) {\n    listen(view,\n      getChangeEventType(ViewProperty.ROTATION),\n      this.handleRotationChanged_, this);\n  }\n\n  /**\n   * Unregister listeners for view property changes.\n   * @param {import(\"../View.js\").default} view The view.\n   * @private\n   */\n  unbindView_(view) {\n    unlisten(view,\n      getChangeEventType(ViewProperty.ROTATION),\n      this.handleRotationChanged_, this);\n  }\n\n  /**\n   * Handle rotation changes to the main map.\n   * TODO: This should rotate the extent rectrangle instead of the\n   * overview map's view.\n   * @private\n   */\n  handleRotationChanged_() {\n    this.ovmap_.getView().setRotation(this.getMap().getView().getRotation());\n  }\n\n  /**\n   * Reset the overview map extent if the box size (width or\n   * height) is less than the size of the overview map size times minRatio\n   * or is greater than the size of the overview size times maxRatio.\n   *\n   * If the map extent was not reset, the box size can fits in the defined\n   * ratio sizes. This method then checks if is contained inside the overview\n   * map current extent. If not, recenter the overview map to the current\n   * main map center location.\n   * @private\n   */\n  validateExtent_() {\n    const map = this.getMap();\n    const ovmap = this.ovmap_;\n\n    if (!map.isRendered() || !ovmap.isRendered()) {\n      return;\n    }\n\n    const mapSize = /** @type {import(\"../size.js\").Size} */ (map.getSize());\n\n    const view = map.getView();\n    const extent = view.calculateExtent(mapSize);\n\n    const ovmapSize = /** @type {import(\"../size.js\").Size} */ (ovmap.getSize());\n\n    const ovview = ovmap.getView();\n    const ovextent = ovview.calculateExtent(ovmapSize);\n\n    const topLeftPixel =\n        ovmap.getPixelFromCoordinate(getTopLeft(extent));\n    const bottomRightPixel =\n        ovmap.getPixelFromCoordinate(getBottomRight(extent));\n\n    const boxWidth = Math.abs(topLeftPixel[0] - bottomRightPixel[0]);\n    const boxHeight = Math.abs(topLeftPixel[1] - bottomRightPixel[1]);\n\n    const ovmapWidth = ovmapSize[0];\n    const ovmapHeight = ovmapSize[1];\n\n    if (boxWidth < ovmapWidth * MIN_RATIO ||\n        boxHeight < ovmapHeight * MIN_RATIO ||\n        boxWidth > ovmapWidth * MAX_RATIO ||\n        boxHeight > ovmapHeight * MAX_RATIO) {\n      this.resetExtent_();\n    } else if (!containsExtent(ovextent, extent)) {\n      this.recenter_();\n    }\n  }\n\n  /**\n   * Reset the overview map extent to half calculated min and max ratio times\n   * the extent of the main map.\n   * @private\n   */\n  resetExtent_() {\n    if (MAX_RATIO === 0 || MIN_RATIO === 0) {\n      return;\n    }\n\n    const map = this.getMap();\n    const ovmap = this.ovmap_;\n\n    const mapSize = /** @type {import(\"../size.js\").Size} */ (map.getSize());\n\n    const view = map.getView();\n    const extent = view.calculateExtent(mapSize);\n\n    const ovview = ovmap.getView();\n\n    // get how many times the current map overview could hold different\n    // box sizes using the min and max ratio, pick the step in the middle used\n    // to calculate the extent from the main map to set it to the overview map,\n    const steps = Math.log(\n      MAX_RATIO / MIN_RATIO) / Math.LN2;\n    const ratio = 1 / (Math.pow(2, steps / 2) * MIN_RATIO);\n    scaleFromCenter(extent, ratio);\n    ovview.fit(extent);\n  }\n\n  /**\n   * Set the center of the overview map to the map center without changing its\n   * resolution.\n   * @private\n   */\n  recenter_() {\n    const map = this.getMap();\n    const ovmap = this.ovmap_;\n\n    const view = map.getView();\n\n    const ovview = ovmap.getView();\n\n    ovview.setCenter(view.getCenter());\n  }\n\n  /**\n   * Update the box using the main map extent\n   * @private\n   */\n  updateBox_() {\n    const map = this.getMap();\n    const ovmap = this.ovmap_;\n\n    if (!map.isRendered() || !ovmap.isRendered()) {\n      return;\n    }\n\n    const mapSize = /** @type {import(\"../size.js\").Size} */ (map.getSize());\n\n    const view = map.getView();\n\n    const ovview = ovmap.getView();\n\n    const rotation = view.getRotation();\n\n    const overlay = this.boxOverlay_;\n    const box = this.boxOverlay_.getElement();\n    const extent = view.calculateExtent(mapSize);\n    const ovresolution = ovview.getResolution();\n    const bottomLeft = getBottomLeft(extent);\n    const topRight = getTopRight(extent);\n\n    // set position using bottom left coordinates\n    const rotateBottomLeft = this.calculateCoordinateRotate_(rotation, bottomLeft);\n    overlay.setPosition(rotateBottomLeft);\n\n    // set box size calculated from map extent size and overview map resolution\n    if (box) {\n      box.style.width = Math.abs((bottomLeft[0] - topRight[0]) / ovresolution) + 'px';\n      box.style.height = Math.abs((topRight[1] - bottomLeft[1]) / ovresolution) + 'px';\n    }\n  }\n\n  /**\n   * @param {number} rotation Target rotation.\n   * @param {import(\"../coordinate.js\").Coordinate} coordinate Coordinate.\n   * @return {import(\"../coordinate.js\").Coordinate|undefined} Coordinate for rotation and center anchor.\n   * @private\n   */\n  calculateCoordinateRotate_(rotation, coordinate) {\n    let coordinateRotate;\n\n    const map = this.getMap();\n    const view = map.getView();\n\n    const currentCenter = view.getCenter();\n\n    if (currentCenter) {\n      coordinateRotate = [\n        coordinate[0] - currentCenter[0],\n        coordinate[1] - currentCenter[1]\n      ];\n      rotateCoordinate(coordinateRotate, rotation);\n      addCoordinate(coordinateRotate, currentCenter);\n    }\n    return coordinateRotate;\n  }\n\n  /**\n   * @param {MouseEvent} event The event to handle\n   * @private\n   */\n  handleClick_(event) {\n    event.preventDefault();\n    this.handleToggle_();\n  }\n\n  /**\n   * @private\n   */\n  handleToggle_() {\n    this.element.classList.toggle(CLASS_COLLAPSED);\n    if (this.collapsed_) {\n      replaceNode(this.collapseLabel_, this.label_);\n    } else {\n      replaceNode(this.label_, this.collapseLabel_);\n    }\n    this.collapsed_ = !this.collapsed_;\n\n    // manage overview map if it had not been rendered before and control\n    // is expanded\n    const ovmap = this.ovmap_;\n    if (!this.collapsed_ && !ovmap.isRendered()) {\n      ovmap.updateSize();\n      this.resetExtent_();\n      listenOnce(ovmap, MapEventType.POSTRENDER,\n        function(event) {\n          this.updateBox_();\n        },\n        this);\n    }\n  }\n\n  /**\n   * Return `true` if the overview map is collapsible, `false` otherwise.\n   * @return {boolean} True if the widget is collapsible.\n   * @api\n   */\n  getCollapsible() {\n    return this.collapsible_;\n  }\n\n  /**\n   * Set whether the overview map should be collapsible.\n   * @param {boolean} collapsible True if the widget is collapsible.\n   * @api\n   */\n  setCollapsible(collapsible) {\n    if (this.collapsible_ === collapsible) {\n      return;\n    }\n    this.collapsible_ = collapsible;\n    this.element.classList.toggle('ol-uncollapsible');\n    if (!collapsible && this.collapsed_) {\n      this.handleToggle_();\n    }\n  }\n\n  /**\n   * Collapse or expand the overview map according to the passed parameter. Will\n   * not do anything if the overview map isn't collapsible or if the current\n   * collapsed state is already the one requested.\n   * @param {boolean} collapsed True if the widget is collapsed.\n   * @api\n   */\n  setCollapsed(collapsed) {\n    if (!this.collapsible_ || this.collapsed_ === collapsed) {\n      return;\n    }\n    this.handleToggle_();\n  }\n\n  /**\n   * Determine if the overview map is collapsed.\n   * @return {boolean} The overview map is collapsed.\n   * @api\n   */\n  getCollapsed() {\n    return this.collapsed_;\n  }\n\n  /**\n   * Return the overview map.\n   * @return {import(\"../PluggableMap.js\").default} Overview map.\n   * @api\n   */\n  getOverviewMap() {\n    return this.ovmap_;\n  }\n}\n\n\n/**\n * Update the overview map element.\n * @param {import(\"../MapEvent.js\").default} mapEvent Map event.\n * @this {OverviewMap}\n * @api\n */\nexport function render(mapEvent) {\n  this.validateExtent_();\n  this.updateBox_();\n}\n\n\nexport default OverviewMap;\n"]},"metadata":{},"sourceType":"module"}