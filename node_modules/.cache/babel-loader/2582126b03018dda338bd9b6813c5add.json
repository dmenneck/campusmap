{"ast":null,"code":"/**\n * @module ol/interaction/DragZoom\n */\nimport { inherits } from '../util.js';\nimport { easeOut } from '../easing.js';\nimport { shiftKeyOnly } from '../events/condition.js';\nimport { createOrUpdateFromCoordinates, getBottomLeft, getCenter, getTopRight, scaleFromCenter } from '../extent.js';\nimport DragBox from '../interaction/DragBox.js';\n/**\n * @typedef {Object} Options\n * @property {string} [className='ol-dragzoom'] CSS class name for styling the\n * box.\n * @property {module:ol/events/condition~Condition} [condition] A function that\n * takes an {@link module:ol/MapBrowserEvent~MapBrowserEvent} and returns a\n * boolean to indicate whether that event should be handled.\n * Default is {@link module:ol/events/condition~shiftKeyOnly}.\n * @property {number} [duration=200] Animation duration in milliseconds.\n * @property {boolean} [out=false] Use interaction for zooming out.\n */\n\n/**\n * @classdesc\n * Allows the user to zoom the map by clicking and dragging on the map,\n * normally combined with an {@link module:ol/events/condition} that limits\n * it to when a key, shift by default, is held down.\n *\n * To change the style of the box, use CSS and the `.ol-dragzoom` selector, or\n * your custom one configured with `className`.\n *\n * @constructor\n * @extends {module:ol/interaction/DragBox}\n * @param {module:ol/interaction/DragZoom~Options=} opt_options Options.\n * @api\n */\n\nconst DragZoom = function (opt_options) {\n  const options = opt_options ? opt_options : {};\n  const condition = options.condition ? options.condition : shiftKeyOnly;\n  /**\n   * @private\n   * @type {number}\n   */\n\n  this.duration_ = options.duration !== undefined ? options.duration : 200;\n  /**\n   * @private\n   * @type {boolean}\n   */\n\n  this.out_ = options.out !== undefined ? options.out : false;\n  DragBox.call(this, {\n    condition: condition,\n    className: options.className || 'ol-dragzoom'\n  });\n};\n\ninherits(DragZoom, DragBox);\n/**\n * @inheritDoc\n */\n\nDragZoom.prototype.onBoxEnd = function () {\n  const map = this.getMap();\n  const view =\n  /** @type {!module:ol/View} */\n  map.getView();\n  const size =\n  /** @type {!module:ol/size~Size} */\n  map.getSize();\n  let extent = this.getGeometry().getExtent();\n\n  if (this.out_) {\n    const mapExtent = view.calculateExtent(size);\n    const boxPixelExtent = createOrUpdateFromCoordinates([map.getPixelFromCoordinate(getBottomLeft(extent)), map.getPixelFromCoordinate(getTopRight(extent))]);\n    const factor = view.getResolutionForExtent(boxPixelExtent, size);\n    scaleFromCenter(mapExtent, 1 / factor);\n    extent = mapExtent;\n  }\n\n  const resolution = view.constrainResolution(view.getResolutionForExtent(extent, size));\n  let center = getCenter(extent);\n  center = view.constrainCenter(center);\n  view.animate({\n    resolution: resolution,\n    center: center,\n    duration: this.duration_,\n    easing: easeOut\n  });\n};\n\nexport default DragZoom;","map":null,"metadata":{},"sourceType":"module"}