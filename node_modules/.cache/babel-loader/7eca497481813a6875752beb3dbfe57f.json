{"ast":null,"code":"/**\n * @module ol/pointer/EventSource\n */\nvar EventSource = function EventSource(dispatcher, mapping) {\n  /**\n   * @type {import(\"./PointerEventHandler.js\").default}\n   */\n  this.dispatcher = dispatcher;\n  /**\n   * @private\n   * @const\n   * @type {!Object<string, function(Event)>}\n   */\n\n  this.mapping_ = mapping;\n};\n/**\n * List of events supported by this source.\n * @return {Array<string>} Event names\n */\n\n\nEventSource.prototype.getEvents = function getEvents() {\n  return Object.keys(this.mapping_);\n};\n/**\n * Returns the handler that should handle a given event type.\n * @param {string} eventType The event type.\n * @return {function(Event)} Handler\n */\n\n\nEventSource.prototype.getHandlerForEvent = function getHandlerForEvent(eventType) {\n  return this.mapping_[eventType];\n};\n\nexport default EventSource;","map":{"version":3,"sources":["../../../src/ol/pointer/EventSource.js"],"names":[],"mappings":"AAAA;;;AAIA,IAAM,WAAW,GAMf,SAAA,WAAA,CAAY,UAAZ,EAAwB,OAAxB,EAAiC;AAE/B;;;AAGA,OAAK,UAAL,GAAkB,UAAlB;AAEA;;;;;;AAKA,OAAK,QAAL,GAAgB,OAAhB;AACF,CAnBF;AAqBE;;;;;;AAIF,WAAA,CAAA,SAAA,CAAE,SAAF,GAAE,SAAA,SAAA,GAAY;AACV,SAAO,MAAM,CAAC,IAAP,CAAY,KAAK,QAAjB,CAAP;AACF,CAFF;AAIE;;;;;;;AAKF,WAAA,CAAA,SAAA,CAAE,kBAAF,GAAE,SAAA,kBAAA,CAAmB,SAAnB,EAA8B;AAC5B,SAAO,KAAK,QAAL,CAAc,SAAd,CAAP;AACD,CAFH;;AAMA,eAAe,WAAf","sourcesContent":["/**\n * @module ol/pointer/EventSource\n */\n\nclass EventSource {\n\n  /**\n   * @param {import(\"./PointerEventHandler.js\").default} dispatcher Event handler.\n   * @param {!Object<string, function(Event)>} mapping Event mapping.\n   */\n  constructor(dispatcher, mapping) {\n\n    /**\n     * @type {import(\"./PointerEventHandler.js\").default}\n     */\n    this.dispatcher = dispatcher;\n\n    /**\n     * @private\n     * @const\n     * @type {!Object<string, function(Event)>}\n     */\n    this.mapping_ = mapping;\n  }\n\n  /**\n   * List of events supported by this source.\n   * @return {Array<string>} Event names\n   */\n  getEvents() {\n    return Object.keys(this.mapping_);\n  }\n\n  /**\n   * Returns the handler that should handle a given event type.\n   * @param {string} eventType The event type.\n   * @return {function(Event)} Handler\n   */\n  getHandlerForEvent(eventType) {\n    return this.mapping_[eventType];\n  }\n\n}\n\nexport default EventSource;\n"]},"metadata":{},"sourceType":"module"}