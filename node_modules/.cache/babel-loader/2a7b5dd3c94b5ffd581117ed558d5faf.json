{"ast":null,"code":"/**\n * @module ol/reproj/Tile\n */\nimport { ERROR_THRESHOLD } from './common.js';\nimport Tile from '../Tile.js';\nimport TileState from '../TileState.js';\nimport { listen, unlistenByKey } from '../events.js';\nimport EventType from '../events/EventType.js';\nimport { getArea, getCenter, getIntersection } from '../extent.js';\nimport { clamp } from '../math.js';\nimport { calculateSourceResolution, render as renderReprojected } from '../reproj.js';\nimport Triangulation from './Triangulation.js';\n/**\n * @typedef {function(number, number, number, number) : import(\"../Tile.js\").default} FunctionType\n */\n\n/**\n * @classdesc\n * Class encapsulating single reprojected tile.\n * See {@link module:ol/source/TileImage~TileImage}.\n *\n */\n\nvar ReprojTile =\n/*@__PURE__*/\nfunction (Tile) {\n  function ReprojTile(sourceProj, sourceTileGrid, targetProj, targetTileGrid, tileCoord, wrappedTileCoord, pixelRatio, gutter, getTileFunction, opt_errorThreshold, opt_renderEdges) {\n    Tile.call(this, tileCoord, TileState.IDLE);\n    /**\n     * @private\n     * @type {boolean}\n     */\n\n    this.renderEdges_ = opt_renderEdges !== undefined ? opt_renderEdges : false;\n    /**\n     * @private\n     * @type {number}\n     */\n\n    this.pixelRatio_ = pixelRatio;\n    /**\n     * @private\n     * @type {number}\n     */\n\n    this.gutter_ = gutter;\n    /**\n     * @private\n     * @type {HTMLCanvasElement}\n     */\n\n    this.canvas_ = null;\n    /**\n     * @private\n     * @type {import(\"../tilegrid/TileGrid.js\").default}\n     */\n\n    this.sourceTileGrid_ = sourceTileGrid;\n    /**\n     * @private\n     * @type {import(\"../tilegrid/TileGrid.js\").default}\n     */\n\n    this.targetTileGrid_ = targetTileGrid;\n    /**\n     * @private\n     * @type {import(\"../tilecoord.js\").TileCoord}\n     */\n\n    this.wrappedTileCoord_ = wrappedTileCoord ? wrappedTileCoord : tileCoord;\n    /**\n     * @private\n     * @type {!Array<import(\"../Tile.js\").default>}\n     */\n\n    this.sourceTiles_ = [];\n    /**\n     * @private\n     * @type {Array<import(\"../events.js\").EventsKey>}\n     */\n\n    this.sourcesListenerKeys_ = null;\n    /**\n     * @private\n     * @type {number}\n     */\n\n    this.sourceZ_ = 0;\n    var targetExtent = targetTileGrid.getTileCoordExtent(this.wrappedTileCoord_);\n    var maxTargetExtent = this.targetTileGrid_.getExtent();\n    var maxSourceExtent = this.sourceTileGrid_.getExtent();\n    var limitedTargetExtent = maxTargetExtent ? getIntersection(targetExtent, maxTargetExtent) : targetExtent;\n\n    if (getArea(limitedTargetExtent) === 0) {\n      // Tile is completely outside range -> EMPTY\n      // TODO: is it actually correct that the source even creates the tile ?\n      this.state = TileState.EMPTY;\n      return;\n    }\n\n    var sourceProjExtent = sourceProj.getExtent();\n\n    if (sourceProjExtent) {\n      if (!maxSourceExtent) {\n        maxSourceExtent = sourceProjExtent;\n      } else {\n        maxSourceExtent = getIntersection(maxSourceExtent, sourceProjExtent);\n      }\n    }\n\n    var targetResolution = targetTileGrid.getResolution(this.wrappedTileCoord_[0]);\n    var targetCenter = getCenter(limitedTargetExtent);\n    var sourceResolution = calculateSourceResolution(sourceProj, targetProj, targetCenter, targetResolution);\n\n    if (!isFinite(sourceResolution) || sourceResolution <= 0) {\n      // invalid sourceResolution -> EMPTY\n      // probably edges of the projections when no extent is defined\n      this.state = TileState.EMPTY;\n      return;\n    }\n\n    var errorThresholdInPixels = opt_errorThreshold !== undefined ? opt_errorThreshold : ERROR_THRESHOLD;\n    /**\n     * @private\n     * @type {!import(\"./Triangulation.js\").default}\n     */\n\n    this.triangulation_ = new Triangulation(sourceProj, targetProj, limitedTargetExtent, maxSourceExtent, sourceResolution * errorThresholdInPixels);\n\n    if (this.triangulation_.getTriangles().length === 0) {\n      // no valid triangles -> EMPTY\n      this.state = TileState.EMPTY;\n      return;\n    }\n\n    this.sourceZ_ = sourceTileGrid.getZForResolution(sourceResolution);\n    var sourceExtent = this.triangulation_.calculateSourceExtent();\n\n    if (maxSourceExtent) {\n      if (sourceProj.canWrapX()) {\n        sourceExtent[1] = clamp(sourceExtent[1], maxSourceExtent[1], maxSourceExtent[3]);\n        sourceExtent[3] = clamp(sourceExtent[3], maxSourceExtent[1], maxSourceExtent[3]);\n      } else {\n        sourceExtent = getIntersection(sourceExtent, maxSourceExtent);\n      }\n    }\n\n    if (!getArea(sourceExtent)) {\n      this.state = TileState.EMPTY;\n    } else {\n      var sourceRange = sourceTileGrid.getTileRangeForExtentAndZ(sourceExtent, this.sourceZ_);\n\n      for (var srcX = sourceRange.minX; srcX <= sourceRange.maxX; srcX++) {\n        for (var srcY = sourceRange.minY; srcY <= sourceRange.maxY; srcY++) {\n          var tile = getTileFunction(this.sourceZ_, srcX, srcY, pixelRatio);\n\n          if (tile) {\n            this.sourceTiles_.push(tile);\n          }\n        }\n      }\n\n      if (this.sourceTiles_.length === 0) {\n        this.state = TileState.EMPTY;\n      }\n    }\n  }\n\n  if (Tile) ReprojTile.__proto__ = Tile;\n  ReprojTile.prototype = Object.create(Tile && Tile.prototype);\n  ReprojTile.prototype.constructor = ReprojTile;\n  /**\n   * @inheritDoc\n   */\n\n  ReprojTile.prototype.disposeInternal = function disposeInternal() {\n    if (this.state == TileState.LOADING) {\n      this.unlistenSources_();\n    }\n\n    Tile.prototype.disposeInternal.call(this);\n  };\n  /**\n   * Get the HTML Canvas element for this tile.\n   * @return {HTMLCanvasElement} Canvas.\n   */\n\n\n  ReprojTile.prototype.getImage = function getImage() {\n    return this.canvas_;\n  };\n  /**\n   * @private\n   */\n\n\n  ReprojTile.prototype.reproject_ = function reproject_() {\n    var sources = [];\n    this.sourceTiles_.forEach(function (tile, i, arr) {\n      if (tile && tile.getState() == TileState.LOADED) {\n        sources.push({\n          extent: this.sourceTileGrid_.getTileCoordExtent(tile.tileCoord),\n          image: tile.getImage()\n        });\n      }\n    }.bind(this));\n    this.sourceTiles_.length = 0;\n\n    if (sources.length === 0) {\n      this.state = TileState.ERROR;\n    } else {\n      var z = this.wrappedTileCoord_[0];\n      var size = this.targetTileGrid_.getTileSize(z);\n      var width = typeof size === 'number' ? size : size[0];\n      var height = typeof size === 'number' ? size : size[1];\n      var targetResolution = this.targetTileGrid_.getResolution(z);\n      var sourceResolution = this.sourceTileGrid_.getResolution(this.sourceZ_);\n      var targetExtent = this.targetTileGrid_.getTileCoordExtent(this.wrappedTileCoord_);\n      this.canvas_ = renderReprojected(width, height, this.pixelRatio_, sourceResolution, this.sourceTileGrid_.getExtent(), targetResolution, targetExtent, this.triangulation_, sources, this.gutter_, this.renderEdges_);\n      this.state = TileState.LOADED;\n    }\n\n    this.changed();\n  };\n  /**\n   * @inheritDoc\n   */\n\n\n  ReprojTile.prototype.load = function load() {\n    if (this.state == TileState.IDLE) {\n      this.state = TileState.LOADING;\n      this.changed();\n      var leftToLoad = 0;\n      this.sourcesListenerKeys_ = [];\n      this.sourceTiles_.forEach(function (tile, i, arr) {\n        var state = tile.getState();\n\n        if (state == TileState.IDLE || state == TileState.LOADING) {\n          leftToLoad++;\n          var sourceListenKey = listen(tile, EventType.CHANGE, function (e) {\n            var state = tile.getState();\n\n            if (state == TileState.LOADED || state == TileState.ERROR || state == TileState.EMPTY) {\n              unlistenByKey(sourceListenKey);\n              leftToLoad--;\n\n              if (leftToLoad === 0) {\n                this.unlistenSources_();\n                this.reproject_();\n              }\n            }\n          }, this);\n          this.sourcesListenerKeys_.push(sourceListenKey);\n        }\n      }.bind(this));\n      this.sourceTiles_.forEach(function (tile, i, arr) {\n        var state = tile.getState();\n\n        if (state == TileState.IDLE) {\n          tile.load();\n        }\n      });\n\n      if (leftToLoad === 0) {\n        setTimeout(this.reproject_.bind(this), 0);\n      }\n    }\n  };\n  /**\n   * @private\n   */\n\n\n  ReprojTile.prototype.unlistenSources_ = function unlistenSources_() {\n    this.sourcesListenerKeys_.forEach(unlistenByKey);\n    this.sourcesListenerKeys_ = null;\n  };\n\n  return ReprojTile;\n}(Tile);\n\nexport default ReprojTile;","map":{"version":3,"sources":["../../../src/ol/reproj/Tile.js"],"names":["super","const","let"],"mappings":"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","sourcesContent":["/**\n * @module ol/reproj/Tile\n */\nimport {ERROR_THRESHOLD} from './common.js';\n\nimport Tile from '../Tile.js';\nimport TileState from '../TileState.js';\nimport {listen, unlistenByKey} from '../events.js';\nimport EventType from '../events/EventType.js';\nimport {getArea, getCenter, getIntersection} from '../extent.js';\nimport {clamp} from '../math.js';\nimport {calculateSourceResolution, render as renderReprojected} from '../reproj.js';\nimport Triangulation from './Triangulation.js';\n\n\n/**\n * @typedef {function(number, number, number, number) : import(\"../Tile.js\").default} FunctionType\n */\n\n\n/**\n * @classdesc\n * Class encapsulating single reprojected tile.\n * See {@link module:ol/source/TileImage~TileImage}.\n *\n */\nclass ReprojTile extends Tile {\n  /**\n   * @param {import(\"../proj/Projection.js\").default} sourceProj Source projection.\n   * @param {import(\"../tilegrid/TileGrid.js\").default} sourceTileGrid Source tile grid.\n   * @param {import(\"../proj/Projection.js\").default} targetProj Target projection.\n   * @param {import(\"../tilegrid/TileGrid.js\").default} targetTileGrid Target tile grid.\n   * @param {import(\"../tilecoord.js\").TileCoord} tileCoord Coordinate of the tile.\n   * @param {import(\"../tilecoord.js\").TileCoord} wrappedTileCoord Coordinate of the tile wrapped in X.\n   * @param {number} pixelRatio Pixel ratio.\n   * @param {number} gutter Gutter of the source tiles.\n   * @param {FunctionType} getTileFunction\n   *     Function returning source tiles (z, x, y, pixelRatio).\n   * @param {number=} opt_errorThreshold Acceptable reprojection error (in px).\n   * @param {boolean=} opt_renderEdges Render reprojection edges.\n   */\n  constructor(\n    sourceProj,\n    sourceTileGrid,\n    targetProj,\n    targetTileGrid,\n    tileCoord,\n    wrappedTileCoord,\n    pixelRatio,\n    gutter,\n    getTileFunction,\n    opt_errorThreshold,\n    opt_renderEdges\n  ) {\n    super(tileCoord, TileState.IDLE);\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.renderEdges_ = opt_renderEdges !== undefined ? opt_renderEdges : false;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.pixelRatio_ = pixelRatio;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.gutter_ = gutter;\n\n    /**\n     * @private\n     * @type {HTMLCanvasElement}\n     */\n    this.canvas_ = null;\n\n    /**\n     * @private\n     * @type {import(\"../tilegrid/TileGrid.js\").default}\n     */\n    this.sourceTileGrid_ = sourceTileGrid;\n\n    /**\n     * @private\n     * @type {import(\"../tilegrid/TileGrid.js\").default}\n     */\n    this.targetTileGrid_ = targetTileGrid;\n\n    /**\n     * @private\n     * @type {import(\"../tilecoord.js\").TileCoord}\n     */\n    this.wrappedTileCoord_ = wrappedTileCoord ? wrappedTileCoord : tileCoord;\n\n    /**\n     * @private\n     * @type {!Array<import(\"../Tile.js\").default>}\n     */\n    this.sourceTiles_ = [];\n\n    /**\n     * @private\n     * @type {Array<import(\"../events.js\").EventsKey>}\n     */\n    this.sourcesListenerKeys_ = null;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.sourceZ_ = 0;\n\n    const targetExtent = targetTileGrid.getTileCoordExtent(this.wrappedTileCoord_);\n    const maxTargetExtent = this.targetTileGrid_.getExtent();\n    let maxSourceExtent = this.sourceTileGrid_.getExtent();\n\n    const limitedTargetExtent = maxTargetExtent ?\n      getIntersection(targetExtent, maxTargetExtent) : targetExtent;\n\n    if (getArea(limitedTargetExtent) === 0) {\n      // Tile is completely outside range -> EMPTY\n      // TODO: is it actually correct that the source even creates the tile ?\n      this.state = TileState.EMPTY;\n      return;\n    }\n\n    const sourceProjExtent = sourceProj.getExtent();\n    if (sourceProjExtent) {\n      if (!maxSourceExtent) {\n        maxSourceExtent = sourceProjExtent;\n      } else {\n        maxSourceExtent = getIntersection(maxSourceExtent, sourceProjExtent);\n      }\n    }\n\n    const targetResolution = targetTileGrid.getResolution(\n      this.wrappedTileCoord_[0]);\n\n    const targetCenter = getCenter(limitedTargetExtent);\n    const sourceResolution = calculateSourceResolution(\n      sourceProj, targetProj, targetCenter, targetResolution);\n\n    if (!isFinite(sourceResolution) || sourceResolution <= 0) {\n      // invalid sourceResolution -> EMPTY\n      // probably edges of the projections when no extent is defined\n      this.state = TileState.EMPTY;\n      return;\n    }\n\n    const errorThresholdInPixels = opt_errorThreshold !== undefined ?\n      opt_errorThreshold : ERROR_THRESHOLD;\n\n    /**\n     * @private\n     * @type {!import(\"./Triangulation.js\").default}\n     */\n    this.triangulation_ = new Triangulation(\n      sourceProj, targetProj, limitedTargetExtent, maxSourceExtent,\n      sourceResolution * errorThresholdInPixels);\n\n    if (this.triangulation_.getTriangles().length === 0) {\n      // no valid triangles -> EMPTY\n      this.state = TileState.EMPTY;\n      return;\n    }\n\n    this.sourceZ_ = sourceTileGrid.getZForResolution(sourceResolution);\n    let sourceExtent = this.triangulation_.calculateSourceExtent();\n\n    if (maxSourceExtent) {\n      if (sourceProj.canWrapX()) {\n        sourceExtent[1] = clamp(\n          sourceExtent[1], maxSourceExtent[1], maxSourceExtent[3]);\n        sourceExtent[3] = clamp(\n          sourceExtent[3], maxSourceExtent[1], maxSourceExtent[3]);\n      } else {\n        sourceExtent = getIntersection(sourceExtent, maxSourceExtent);\n      }\n    }\n\n    if (!getArea(sourceExtent)) {\n      this.state = TileState.EMPTY;\n    } else {\n      const sourceRange = sourceTileGrid.getTileRangeForExtentAndZ(\n        sourceExtent, this.sourceZ_);\n\n      for (let srcX = sourceRange.minX; srcX <= sourceRange.maxX; srcX++) {\n        for (let srcY = sourceRange.minY; srcY <= sourceRange.maxY; srcY++) {\n          const tile = getTileFunction(this.sourceZ_, srcX, srcY, pixelRatio);\n          if (tile) {\n            this.sourceTiles_.push(tile);\n          }\n        }\n      }\n\n      if (this.sourceTiles_.length === 0) {\n        this.state = TileState.EMPTY;\n      }\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  disposeInternal() {\n    if (this.state == TileState.LOADING) {\n      this.unlistenSources_();\n    }\n    super.disposeInternal();\n  }\n\n  /**\n   * Get the HTML Canvas element for this tile.\n   * @return {HTMLCanvasElement} Canvas.\n   */\n  getImage() {\n    return this.canvas_;\n  }\n\n  /**\n   * @private\n   */\n  reproject_() {\n    const sources = [];\n    this.sourceTiles_.forEach(function(tile, i, arr) {\n      if (tile && tile.getState() == TileState.LOADED) {\n        sources.push({\n          extent: this.sourceTileGrid_.getTileCoordExtent(tile.tileCoord),\n          image: tile.getImage()\n        });\n      }\n    }.bind(this));\n    this.sourceTiles_.length = 0;\n\n    if (sources.length === 0) {\n      this.state = TileState.ERROR;\n    } else {\n      const z = this.wrappedTileCoord_[0];\n      const size = this.targetTileGrid_.getTileSize(z);\n      const width = typeof size === 'number' ? size : size[0];\n      const height = typeof size === 'number' ? size : size[1];\n      const targetResolution = this.targetTileGrid_.getResolution(z);\n      const sourceResolution = this.sourceTileGrid_.getResolution(this.sourceZ_);\n\n      const targetExtent = this.targetTileGrid_.getTileCoordExtent(\n        this.wrappedTileCoord_);\n      this.canvas_ = renderReprojected(width, height, this.pixelRatio_,\n        sourceResolution, this.sourceTileGrid_.getExtent(),\n        targetResolution, targetExtent, this.triangulation_, sources,\n        this.gutter_, this.renderEdges_);\n\n      this.state = TileState.LOADED;\n    }\n    this.changed();\n  }\n\n  /**\n   * @inheritDoc\n   */\n  load() {\n    if (this.state == TileState.IDLE) {\n      this.state = TileState.LOADING;\n      this.changed();\n\n      let leftToLoad = 0;\n\n      this.sourcesListenerKeys_ = [];\n      this.sourceTiles_.forEach(function(tile, i, arr) {\n        const state = tile.getState();\n        if (state == TileState.IDLE || state == TileState.LOADING) {\n          leftToLoad++;\n\n          const sourceListenKey = listen(tile, EventType.CHANGE,\n            function(e) {\n              const state = tile.getState();\n              if (state == TileState.LOADED ||\n                    state == TileState.ERROR ||\n                    state == TileState.EMPTY) {\n                unlistenByKey(sourceListenKey);\n                leftToLoad--;\n                if (leftToLoad === 0) {\n                  this.unlistenSources_();\n                  this.reproject_();\n                }\n              }\n            }, this);\n          this.sourcesListenerKeys_.push(sourceListenKey);\n        }\n      }.bind(this));\n\n      this.sourceTiles_.forEach(function(tile, i, arr) {\n        const state = tile.getState();\n        if (state == TileState.IDLE) {\n          tile.load();\n        }\n      });\n\n      if (leftToLoad === 0) {\n        setTimeout(this.reproject_.bind(this), 0);\n      }\n    }\n  }\n\n  /**\n   * @private\n   */\n  unlistenSources_() {\n    this.sourcesListenerKeys_.forEach(unlistenByKey);\n    this.sourcesListenerKeys_ = null;\n  }\n}\n\n\nexport default ReprojTile;\n"]},"metadata":{},"sourceType":"module"}