{"ast":null,"code":"'use strict';\n\nvar support = require('./support');\n\nvar utils = require('./utils');\n\nvar crc32 = require('./crc32');\n\nvar signature = require('./signature');\n\nvar defaults = require('./defaults');\n\nvar base64 = require('./base64');\n\nvar compressions = require('./compressions');\n\nvar CompressedObject = require('./compressedObject');\n\nvar nodeBuffer = require('./nodeBuffer');\n\nvar utf8 = require('./utf8');\n\nvar StringWriter = require('./stringWriter');\n\nvar Uint8ArrayWriter = require('./uint8ArrayWriter');\n/**\n * Returns the raw data of a ZipObject, decompress the content if necessary.\n * @param {ZipObject} file the file to use.\n * @return {String|ArrayBuffer|Uint8Array|Buffer} the data.\n */\n\n\nvar getRawData = function (file) {\n  if (file._data instanceof CompressedObject) {\n    file._data = file._data.getContent();\n    file.options.binary = true;\n    file.options.base64 = false;\n\n    if (utils.getTypeOf(file._data) === \"uint8array\") {\n      var copy = file._data; // when reading an arraybuffer, the CompressedObject mechanism will keep it and subarray() a Uint8Array.\n      // if we request a file in the same format, we might get the same Uint8Array or its ArrayBuffer (the original zip file).\n\n      file._data = new Uint8Array(copy.length); // with an empty Uint8Array, Opera fails with a \"Offset larger than array size\"\n\n      if (copy.length !== 0) {\n        file._data.set(copy, 0);\n      }\n    }\n  }\n\n  return file._data;\n};\n/**\n * Returns the data of a ZipObject in a binary form. If the content is an unicode string, encode it.\n * @param {ZipObject} file the file to use.\n * @return {String|ArrayBuffer|Uint8Array|Buffer} the data.\n */\n\n\nvar getBinaryData = function (file) {\n  var result = getRawData(file),\n      type = utils.getTypeOf(result);\n\n  if (type === \"string\") {\n    if (!file.options.binary) {\n      // unicode text !\n      // unicode string => binary string is a painful process, check if we can avoid it.\n      if (support.nodebuffer) {\n        return nodeBuffer(result, \"utf-8\");\n      }\n    }\n\n    return file.asBinary();\n  }\n\n  return result;\n};\n/**\n * Transform this._data into a string.\n * @param {function} filter a function String -> String, applied if not null on the result.\n * @return {String} the string representing this._data.\n */\n\n\nvar dataToString = function (asUTF8) {\n  var result = getRawData(this);\n\n  if (result === null || typeof result === \"undefined\") {\n    return \"\";\n  } // if the data is a base64 string, we decode it before checking the encoding !\n\n\n  if (this.options.base64) {\n    result = base64.decode(result);\n  }\n\n  if (asUTF8 && this.options.binary) {\n    // JSZip.prototype.utf8decode supports arrays as input\n    // skip to array => string step, utf8decode will do it.\n    result = out.utf8decode(result);\n  } else {\n    // no utf8 transformation, do the array => string step.\n    result = utils.transformTo(\"string\", result);\n  }\n\n  if (!asUTF8 && !this.options.binary) {\n    result = utils.transformTo(\"string\", out.utf8encode(result));\n  }\n\n  return result;\n};\n/**\n * A simple object representing a file in the zip file.\n * @constructor\n * @param {string} name the name of the file\n * @param {String|ArrayBuffer|Uint8Array|Buffer} data the data\n * @param {Object} options the options of the file\n */\n\n\nvar ZipObject = function (name, data, options) {\n  this.name = name;\n  this.dir = options.dir;\n  this.date = options.date;\n  this.comment = options.comment;\n  this.unixPermissions = options.unixPermissions;\n  this.dosPermissions = options.dosPermissions;\n  this._data = data;\n  this.options = options;\n  /*\n   * This object contains initial values for dir and date.\n   * With them, we can check if the user changed the deprecated metadata in\n   * `ZipObject#options` or not.\n   */\n\n  this._initialMetadata = {\n    dir: options.dir,\n    date: options.date\n  };\n};\n\nZipObject.prototype = {\n  /**\n   * Return the content as UTF8 string.\n   * @return {string} the UTF8 string.\n   */\n  asText: function () {\n    return dataToString.call(this, true);\n  },\n\n  /**\n   * Returns the binary content.\n   * @return {string} the content as binary.\n   */\n  asBinary: function () {\n    return dataToString.call(this, false);\n  },\n\n  /**\n   * Returns the content as a nodejs Buffer.\n   * @return {Buffer} the content as a Buffer.\n   */\n  asNodeBuffer: function () {\n    var result = getBinaryData(this);\n    return utils.transformTo(\"nodebuffer\", result);\n  },\n\n  /**\n   * Returns the content as an Uint8Array.\n   * @return {Uint8Array} the content as an Uint8Array.\n   */\n  asUint8Array: function () {\n    var result = getBinaryData(this);\n    return utils.transformTo(\"uint8array\", result);\n  },\n\n  /**\n   * Returns the content as an ArrayBuffer.\n   * @return {ArrayBuffer} the content as an ArrayBufer.\n   */\n  asArrayBuffer: function () {\n    return this.asUint8Array().buffer;\n  }\n};\n/**\n * Transform an integer into a string in hexadecimal.\n * @private\n * @param {number} dec the number to convert.\n * @param {number} bytes the number of bytes to generate.\n * @returns {string} the result.\n */\n\nvar decToHex = function (dec, bytes) {\n  var hex = \"\",\n      i;\n\n  for (i = 0; i < bytes; i++) {\n    hex += String.fromCharCode(dec & 0xff);\n    dec = dec >>> 8;\n  }\n\n  return hex;\n};\n/**\n * Transforms the (incomplete) options from the user into the complete\n * set of options to create a file.\n * @private\n * @param {Object} o the options from the user.\n * @return {Object} the complete set of options.\n */\n\n\nvar prepareFileAttrs = function (o) {\n  o = o || {};\n\n  if (o.base64 === true && (o.binary === null || o.binary === undefined)) {\n    o.binary = true;\n  }\n\n  o = utils.extend(o, defaults);\n  o.date = o.date || new Date();\n  if (o.compression !== null) o.compression = o.compression.toUpperCase();\n  return o;\n};\n/**\n * Add a file in the current folder.\n * @private\n * @param {string} name the name of the file\n * @param {String|ArrayBuffer|Uint8Array|Buffer} data the data of the file\n * @param {Object} o the options of the file\n * @return {Object} the new file.\n */\n\n\nvar fileAdd = function (name, data, o) {\n  // be sure sub folders exist\n  var dataType = utils.getTypeOf(data),\n      parent;\n  o = prepareFileAttrs(o);\n\n  if (typeof o.unixPermissions === \"string\") {\n    o.unixPermissions = parseInt(o.unixPermissions, 8);\n  } // UNX_IFDIR  0040000 see zipinfo.c\n\n\n  if (o.unixPermissions && o.unixPermissions & 0x4000) {\n    o.dir = true;\n  } // Bit 4    Directory\n\n\n  if (o.dosPermissions && o.dosPermissions & 0x0010) {\n    o.dir = true;\n  }\n\n  if (o.dir) {\n    name = forceTrailingSlash(name);\n  }\n\n  if (o.createFolders && (parent = parentFolder(name))) {\n    folderAdd.call(this, parent, true);\n  }\n\n  if (o.dir || data === null || typeof data === \"undefined\") {\n    o.base64 = false;\n    o.binary = false;\n    data = null;\n    dataType = null;\n  } else if (dataType === \"string\") {\n    if (o.binary && !o.base64) {\n      // optimizedBinaryString == true means that the file has already been filtered with a 0xFF mask\n      if (o.optimizedBinaryString !== true) {\n        // this is a string, not in a base64 format.\n        // Be sure that this is a correct \"binary string\"\n        data = utils.string2binary(data);\n      }\n    }\n  } else {\n    // arraybuffer, uint8array, ...\n    o.base64 = false;\n    o.binary = true;\n\n    if (!dataType && !(data instanceof CompressedObject)) {\n      throw new Error(\"The data of '\" + name + \"' is in an unsupported format !\");\n    } // special case : it's way easier to work with Uint8Array than with ArrayBuffer\n\n\n    if (dataType === \"arraybuffer\") {\n      data = utils.transformTo(\"uint8array\", data);\n    }\n  }\n\n  var object = new ZipObject(name, data, o);\n  this.files[name] = object;\n  return object;\n};\n/**\n * Find the parent folder of the path.\n * @private\n * @param {string} path the path to use\n * @return {string} the parent folder, or \"\"\n */\n\n\nvar parentFolder = function (path) {\n  if (path.slice(-1) == '/') {\n    path = path.substring(0, path.length - 1);\n  }\n\n  var lastSlash = path.lastIndexOf('/');\n  return lastSlash > 0 ? path.substring(0, lastSlash) : \"\";\n};\n/**\n * Returns the path with a slash at the end.\n * @private\n * @param {String} path the path to check.\n * @return {String} the path with a trailing slash.\n */\n\n\nvar forceTrailingSlash = function (path) {\n  // Check the name ends with a /\n  if (path.slice(-1) != \"/\") {\n    path += \"/\"; // IE doesn't like substr(-1)\n  }\n\n  return path;\n};\n/**\n * Add a (sub) folder in the current folder.\n * @private\n * @param {string} name the folder's name\n * @param {boolean=} [createFolders] If true, automatically create sub\n *  folders. Defaults to false.\n * @return {Object} the new folder.\n */\n\n\nvar folderAdd = function (name, createFolders) {\n  createFolders = typeof createFolders !== 'undefined' ? createFolders : false;\n  name = forceTrailingSlash(name); // Does this folder already exist?\n\n  if (!this.files[name]) {\n    fileAdd.call(this, name, null, {\n      dir: true,\n      createFolders: createFolders\n    });\n  }\n\n  return this.files[name];\n};\n/**\n * Generate a JSZip.CompressedObject for a given zipOject.\n * @param {ZipObject} file the object to read.\n * @param {JSZip.compression} compression the compression to use.\n * @param {Object} compressionOptions the options to use when compressing.\n * @return {JSZip.CompressedObject} the compressed result.\n */\n\n\nvar generateCompressedObjectFrom = function (file, compression, compressionOptions) {\n  var result = new CompressedObject(),\n      content; // the data has not been decompressed, we might reuse things !\n\n  if (file._data instanceof CompressedObject) {\n    result.uncompressedSize = file._data.uncompressedSize;\n    result.crc32 = file._data.crc32;\n\n    if (result.uncompressedSize === 0 || file.dir) {\n      compression = compressions['STORE'];\n      result.compressedContent = \"\";\n      result.crc32 = 0;\n    } else if (file._data.compressionMethod === compression.magic) {\n      result.compressedContent = file._data.getCompressedContent();\n    } else {\n      content = file._data.getContent(); // need to decompress / recompress\n\n      result.compressedContent = compression.compress(utils.transformTo(compression.compressInputType, content), compressionOptions);\n    }\n  } else {\n    // have uncompressed data\n    content = getBinaryData(file);\n\n    if (!content || content.length === 0 || file.dir) {\n      compression = compressions['STORE'];\n      content = \"\";\n    }\n\n    result.uncompressedSize = content.length;\n    result.crc32 = crc32(content);\n    result.compressedContent = compression.compress(utils.transformTo(compression.compressInputType, content), compressionOptions);\n  }\n\n  result.compressedSize = result.compressedContent.length;\n  result.compressionMethod = compression.magic;\n  return result;\n};\n/**\n * Generate the UNIX part of the external file attributes.\n * @param {Object} unixPermissions the unix permissions or null.\n * @param {Boolean} isDir true if the entry is a directory, false otherwise.\n * @return {Number} a 32 bit integer.\n *\n * adapted from http://unix.stackexchange.com/questions/14705/the-zip-formats-external-file-attribute :\n *\n * TTTTsstrwxrwxrwx0000000000ADVSHR\n * ^^^^____________________________ file type, see zipinfo.c (UNX_*)\n *     ^^^_________________________ setuid, setgid, sticky\n *        ^^^^^^^^^________________ permissions\n *                 ^^^^^^^^^^______ not used ?\n *                           ^^^^^^ DOS attribute bits : Archive, Directory, Volume label, System file, Hidden, Read only\n */\n\n\nvar generateUnixExternalFileAttr = function (unixPermissions, isDir) {\n  var result = unixPermissions;\n\n  if (!unixPermissions) {\n    // I can't use octal values in strict mode, hence the hexa.\n    //  040775 => 0x41fd\n    // 0100664 => 0x81b4\n    result = isDir ? 0x41fd : 0x81b4;\n  }\n\n  return (result & 0xFFFF) << 16;\n};\n/**\n * Generate the DOS part of the external file attributes.\n * @param {Object} dosPermissions the dos permissions or null.\n * @param {Boolean} isDir true if the entry is a directory, false otherwise.\n * @return {Number} a 32 bit integer.\n *\n * Bit 0     Read-Only\n * Bit 1     Hidden\n * Bit 2     System\n * Bit 3     Volume Label\n * Bit 4     Directory\n * Bit 5     Archive\n */\n\n\nvar generateDosExternalFileAttr = function (dosPermissions, isDir) {\n  // the dir flag is already set for compatibility\n  return (dosPermissions || 0) & 0x3F;\n};\n/**\n * Generate the various parts used in the construction of the final zip file.\n * @param {string} name the file name.\n * @param {ZipObject} file the file content.\n * @param {JSZip.CompressedObject} compressedObject the compressed object.\n * @param {number} offset the current offset from the start of the zip file.\n * @param {String} platform let's pretend we are this platform (change platform dependents fields)\n * @param {Function} encodeFileName the function to encode the file name / comment.\n * @return {object} the zip parts.\n */\n\n\nvar generateZipParts = function (name, file, compressedObject, offset, platform, encodeFileName) {\n  var data = compressedObject.compressedContent,\n      useCustomEncoding = encodeFileName !== utf8.utf8encode,\n      encodedFileName = utils.transformTo(\"string\", encodeFileName(file.name)),\n      utfEncodedFileName = utils.transformTo(\"string\", utf8.utf8encode(file.name)),\n      comment = file.comment || \"\",\n      encodedComment = utils.transformTo(\"string\", encodeFileName(comment)),\n      utfEncodedComment = utils.transformTo(\"string\", utf8.utf8encode(comment)),\n      useUTF8ForFileName = utfEncodedFileName.length !== file.name.length,\n      useUTF8ForComment = utfEncodedComment.length !== comment.length,\n      o = file.options,\n      dosTime,\n      dosDate,\n      extraFields = \"\",\n      unicodePathExtraField = \"\",\n      unicodeCommentExtraField = \"\",\n      dir,\n      date; // handle the deprecated options.dir\n\n  if (file._initialMetadata.dir !== file.dir) {\n    dir = file.dir;\n  } else {\n    dir = o.dir;\n  } // handle the deprecated options.date\n\n\n  if (file._initialMetadata.date !== file.date) {\n    date = file.date;\n  } else {\n    date = o.date;\n  }\n\n  var extFileAttr = 0;\n  var versionMadeBy = 0;\n\n  if (dir) {\n    // dos or unix, we set the dos dir flag\n    extFileAttr |= 0x00010;\n  }\n\n  if (platform === \"UNIX\") {\n    versionMadeBy = 0x031E; // UNIX, version 3.0\n\n    extFileAttr |= generateUnixExternalFileAttr(file.unixPermissions, dir);\n  } else {\n    // DOS or other, fallback to DOS\n    versionMadeBy = 0x0014; // DOS, version 2.0\n\n    extFileAttr |= generateDosExternalFileAttr(file.dosPermissions, dir);\n  } // date\n  // @see http://www.delorie.com/djgpp/doc/rbinter/it/52/13.html\n  // @see http://www.delorie.com/djgpp/doc/rbinter/it/65/16.html\n  // @see http://www.delorie.com/djgpp/doc/rbinter/it/66/16.html\n\n\n  dosTime = date.getHours();\n  dosTime = dosTime << 6;\n  dosTime = dosTime | date.getMinutes();\n  dosTime = dosTime << 5;\n  dosTime = dosTime | date.getSeconds() / 2;\n  dosDate = date.getFullYear() - 1980;\n  dosDate = dosDate << 4;\n  dosDate = dosDate | date.getMonth() + 1;\n  dosDate = dosDate << 5;\n  dosDate = dosDate | date.getDate();\n\n  if (useUTF8ForFileName) {\n    // set the unicode path extra field. unzip needs at least one extra\n    // field to correctly handle unicode path, so using the path is as good\n    // as any other information. This could improve the situation with\n    // other archive managers too.\n    // This field is usually used without the utf8 flag, with a non\n    // unicode path in the header (winrar, winzip). This helps (a bit)\n    // with the messy Windows' default compressed folders feature but\n    // breaks on p7zip which doesn't seek the unicode path extra field.\n    // So for now, UTF-8 everywhere !\n    unicodePathExtraField = // Version\n    decToHex(1, 1) + // NameCRC32\n    decToHex(crc32(encodedFileName), 4) + // UnicodeName\n    utfEncodedFileName;\n    extraFields += // Info-ZIP Unicode Path Extra Field\n    \"\\x75\\x70\" + // size\n    decToHex(unicodePathExtraField.length, 2) + // content\n    unicodePathExtraField;\n  }\n\n  if (useUTF8ForComment) {\n    unicodeCommentExtraField = // Version\n    decToHex(1, 1) + // CommentCRC32\n    decToHex(this.crc32(encodedComment), 4) + // UnicodeName\n    utfEncodedComment;\n    extraFields += // Info-ZIP Unicode Path Extra Field\n    \"\\x75\\x63\" + // size\n    decToHex(unicodeCommentExtraField.length, 2) + // content\n    unicodeCommentExtraField;\n  }\n\n  var header = \"\"; // version needed to extract\n\n  header += \"\\x0A\\x00\"; // general purpose bit flag\n  // set bit 11 if utf8\n\n  header += !useCustomEncoding && (useUTF8ForFileName || useUTF8ForComment) ? \"\\x00\\x08\" : \"\\x00\\x00\"; // compression method\n\n  header += compressedObject.compressionMethod; // last mod file time\n\n  header += decToHex(dosTime, 2); // last mod file date\n\n  header += decToHex(dosDate, 2); // crc-32\n\n  header += decToHex(compressedObject.crc32, 4); // compressed size\n\n  header += decToHex(compressedObject.compressedSize, 4); // uncompressed size\n\n  header += decToHex(compressedObject.uncompressedSize, 4); // file name length\n\n  header += decToHex(encodedFileName.length, 2); // extra field length\n\n  header += decToHex(extraFields.length, 2);\n  var fileRecord = signature.LOCAL_FILE_HEADER + header + encodedFileName + extraFields;\n  var dirRecord = signature.CENTRAL_FILE_HEADER + // version made by (00: DOS)\n  decToHex(versionMadeBy, 2) + // file header (common to file and central directory)\n  header + // file comment length\n  decToHex(encodedComment.length, 2) + // disk number start\n  \"\\x00\\x00\" + // internal file attributes TODO\n  \"\\x00\\x00\" + // external file attributes\n  decToHex(extFileAttr, 4) + // relative offset of local header\n  decToHex(offset, 4) + // file name\n  encodedFileName + // extra field\n  extraFields + // file comment\n  encodedComment;\n  return {\n    fileRecord: fileRecord,\n    dirRecord: dirRecord,\n    compressedObject: compressedObject\n  };\n}; // return the actual prototype of JSZip\n\n\nvar out = {\n  /**\n   * Read an existing zip and merge the data in the current JSZip object.\n   * The implementation is in jszip-load.js, don't forget to include it.\n   * @param {String|ArrayBuffer|Uint8Array|Buffer} stream  The stream to load\n   * @param {Object} options Options for loading the stream.\n   *  options.base64 : is the stream in base64 ? default : false\n   * @return {JSZip} the current JSZip object\n   */\n  load: function (stream, options) {\n    throw new Error(\"Load method is not defined. Is the file jszip-load.js included ?\");\n  },\n\n  /**\n   * Filter nested files/folders with the specified function.\n   * @param {Function} search the predicate to use :\n   * function (relativePath, file) {...}\n   * It takes 2 arguments : the relative path and the file.\n   * @return {Array} An array of matching elements.\n   */\n  filter: function (search) {\n    var result = [],\n        filename,\n        relativePath,\n        file,\n        fileClone;\n\n    for (filename in this.files) {\n      if (!this.files.hasOwnProperty(filename)) {\n        continue;\n      }\n\n      file = this.files[filename]; // return a new object, don't let the user mess with our internal objects :)\n\n      fileClone = new ZipObject(file.name, file._data, utils.extend(file.options));\n      relativePath = filename.slice(this.root.length, filename.length);\n\n      if (filename.slice(0, this.root.length) === this.root && // the file is in the current root\n      search(relativePath, fileClone)) {\n        // and the file matches the function\n        result.push(fileClone);\n      }\n    }\n\n    return result;\n  },\n\n  /**\n   * Add a file to the zip file, or search a file.\n   * @param   {string|RegExp} name The name of the file to add (if data is defined),\n   * the name of the file to find (if no data) or a regex to match files.\n   * @param   {String|ArrayBuffer|Uint8Array|Buffer} data  The file data, either raw or base64 encoded\n   * @param   {Object} o     File options\n   * @return  {JSZip|Object|Array} this JSZip object (when adding a file),\n   * a file (when searching by string) or an array of files (when searching by regex).\n   */\n  file: function (name, data, o) {\n    if (arguments.length === 1) {\n      if (utils.isRegExp(name)) {\n        var regexp = name;\n        return this.filter(function (relativePath, file) {\n          return !file.dir && regexp.test(relativePath);\n        });\n      } else {\n        // text\n        return this.filter(function (relativePath, file) {\n          return !file.dir && relativePath === name;\n        })[0] || null;\n      }\n    } else {\n      // more than one argument : we have data !\n      name = this.root + name;\n      fileAdd.call(this, name, data, o);\n    }\n\n    return this;\n  },\n\n  /**\n   * Add a directory to the zip file, or search.\n   * @param   {String|RegExp} arg The name of the directory to add, or a regex to search folders.\n   * @return  {JSZip} an object with the new directory as the root, or an array containing matching folders.\n   */\n  folder: function (arg) {\n    if (!arg) {\n      return this;\n    }\n\n    if (utils.isRegExp(arg)) {\n      return this.filter(function (relativePath, file) {\n        return file.dir && arg.test(relativePath);\n      });\n    } // else, name is a new folder\n\n\n    var name = this.root + arg;\n    var newFolder = folderAdd.call(this, name); // Allow chaining by returning a new object with this folder as the root\n\n    var ret = this.clone();\n    ret.root = newFolder.name;\n    return ret;\n  },\n\n  /**\n   * Delete a file, or a directory and all sub-files, from the zip\n   * @param {string} name the name of the file to delete\n   * @return {JSZip} this JSZip object\n   */\n  remove: function (name) {\n    name = this.root + name;\n    var file = this.files[name];\n\n    if (!file) {\n      // Look for any folders\n      if (name.slice(-1) != \"/\") {\n        name += \"/\";\n      }\n\n      file = this.files[name];\n    }\n\n    if (file && !file.dir) {\n      // file\n      delete this.files[name];\n    } else {\n      // maybe a folder, delete recursively\n      var kids = this.filter(function (relativePath, file) {\n        return file.name.slice(0, name.length) === name;\n      });\n\n      for (var i = 0; i < kids.length; i++) {\n        delete this.files[kids[i].name];\n      }\n    }\n\n    return this;\n  },\n\n  /**\n   * Generate the complete zip file\n   * @param {Object} options the options to generate the zip file :\n   * - base64, (deprecated, use type instead) true to generate base64.\n   * - compression, \"STORE\" by default.\n   * - type, \"base64\" by default. Values are : string, base64, uint8array, arraybuffer, blob.\n   * @return {String|Uint8Array|ArrayBuffer|Buffer|Blob} the zip file\n   */\n  generate: function (options) {\n    options = utils.extend(options || {}, {\n      base64: true,\n      compression: \"STORE\",\n      compressionOptions: null,\n      type: \"base64\",\n      platform: \"DOS\",\n      comment: null,\n      mimeType: 'application/zip',\n      encodeFileName: utf8.utf8encode\n    });\n    utils.checkSupport(options.type); // accept nodejs `process.platform`\n\n    if (options.platform === 'darwin' || options.platform === 'freebsd' || options.platform === 'linux' || options.platform === 'sunos') {\n      options.platform = \"UNIX\";\n    }\n\n    if (options.platform === 'win32') {\n      options.platform = \"DOS\";\n    }\n\n    var zipData = [],\n        localDirLength = 0,\n        centralDirLength = 0,\n        writer,\n        i,\n        encodedComment = utils.transformTo(\"string\", options.encodeFileName(options.comment || this.comment || \"\")); // first, generate all the zip parts.\n\n    for (var name in this.files) {\n      if (!this.files.hasOwnProperty(name)) {\n        continue;\n      }\n\n      var file = this.files[name];\n      var compressionName = file.options.compression || options.compression.toUpperCase();\n      var compression = compressions[compressionName];\n\n      if (!compression) {\n        throw new Error(compressionName + \" is not a valid compression method !\");\n      }\n\n      var compressionOptions = file.options.compressionOptions || options.compressionOptions || {};\n      var compressedObject = generateCompressedObjectFrom.call(this, file, compression, compressionOptions);\n      var zipPart = generateZipParts.call(this, name, file, compressedObject, localDirLength, options.platform, options.encodeFileName);\n      localDirLength += zipPart.fileRecord.length + compressedObject.compressedSize;\n      centralDirLength += zipPart.dirRecord.length;\n      zipData.push(zipPart);\n    }\n\n    var dirEnd = \"\"; // end of central dir signature\n\n    dirEnd = signature.CENTRAL_DIRECTORY_END + // number of this disk\n    \"\\x00\\x00\" + // number of the disk with the start of the central directory\n    \"\\x00\\x00\" + // total number of entries in the central directory on this disk\n    decToHex(zipData.length, 2) + // total number of entries in the central directory\n    decToHex(zipData.length, 2) + // size of the central directory   4 bytes\n    decToHex(centralDirLength, 4) + // offset of start of central directory with respect to the starting disk number\n    decToHex(localDirLength, 4) + // .ZIP file comment length\n    decToHex(encodedComment.length, 2) + // .ZIP file comment\n    encodedComment; // we have all the parts (and the total length)\n    // time to create a writer !\n\n    var typeName = options.type.toLowerCase();\n\n    if (typeName === \"uint8array\" || typeName === \"arraybuffer\" || typeName === \"blob\" || typeName === \"nodebuffer\") {\n      writer = new Uint8ArrayWriter(localDirLength + centralDirLength + dirEnd.length);\n    } else {\n      writer = new StringWriter(localDirLength + centralDirLength + dirEnd.length);\n    }\n\n    for (i = 0; i < zipData.length; i++) {\n      writer.append(zipData[i].fileRecord);\n      writer.append(zipData[i].compressedObject.compressedContent);\n    }\n\n    for (i = 0; i < zipData.length; i++) {\n      writer.append(zipData[i].dirRecord);\n    }\n\n    writer.append(dirEnd);\n    var zip = writer.finalize();\n\n    switch (options.type.toLowerCase()) {\n      // case \"zip is an Uint8Array\"\n      case \"uint8array\":\n      case \"arraybuffer\":\n      case \"nodebuffer\":\n        return utils.transformTo(options.type.toLowerCase(), zip);\n\n      case \"blob\":\n        return utils.arrayBuffer2Blob(utils.transformTo(\"arraybuffer\", zip), options.mimeType);\n      // case \"zip is a string\"\n\n      case \"base64\":\n        return options.base64 ? base64.encode(zip) : zip;\n\n      default:\n        // case \"string\" :\n        return zip;\n    }\n  },\n\n  /**\n   * @deprecated\n   * This method will be removed in a future version without replacement.\n   */\n  crc32: function (input, crc) {\n    return crc32(input, crc);\n  },\n\n  /**\n   * @deprecated\n   * This method will be removed in a future version without replacement.\n   */\n  utf8encode: function (string) {\n    return utils.transformTo(\"string\", utf8.utf8encode(string));\n  },\n\n  /**\n   * @deprecated\n   * This method will be removed in a future version without replacement.\n   */\n  utf8decode: function (input) {\n    return utf8.utf8decode(input);\n  }\n};\nmodule.exports = out;","map":{"version":3,"sources":["/Users/dirkmennecke77/Desktop/Lageplan/node_modules/jszip/lib/object.js"],"names":["support","require","utils","crc32","signature","defaults","base64","compressions","CompressedObject","nodeBuffer","utf8","StringWriter","Uint8ArrayWriter","getRawData","file","_data","getContent","options","binary","getTypeOf","copy","Uint8Array","length","set","getBinaryData","result","type","nodebuffer","asBinary","dataToString","asUTF8","decode","out","utf8decode","transformTo","utf8encode","ZipObject","name","data","dir","date","comment","unixPermissions","dosPermissions","_initialMetadata","prototype","asText","call","asNodeBuffer","asUint8Array","asArrayBuffer","buffer","decToHex","dec","bytes","hex","i","String","fromCharCode","prepareFileAttrs","o","undefined","extend","Date","compression","toUpperCase","fileAdd","dataType","parent","parseInt","forceTrailingSlash","createFolders","parentFolder","folderAdd","optimizedBinaryString","string2binary","Error","object","files","path","slice","substring","lastSlash","lastIndexOf","generateCompressedObjectFrom","compressionOptions","content","uncompressedSize","compressedContent","compressionMethod","magic","getCompressedContent","compress","compressInputType","compressedSize","generateUnixExternalFileAttr","isDir","generateDosExternalFileAttr","generateZipParts","compressedObject","offset","platform","encodeFileName","useCustomEncoding","encodedFileName","utfEncodedFileName","encodedComment","utfEncodedComment","useUTF8ForFileName","useUTF8ForComment","dosTime","dosDate","extraFields","unicodePathExtraField","unicodeCommentExtraField","extFileAttr","versionMadeBy","getHours","getMinutes","getSeconds","getFullYear","getMonth","getDate","header","fileRecord","LOCAL_FILE_HEADER","dirRecord","CENTRAL_FILE_HEADER","load","stream","filter","search","filename","relativePath","fileClone","hasOwnProperty","root","push","arguments","isRegExp","regexp","test","folder","arg","newFolder","ret","clone","remove","kids","generate","mimeType","checkSupport","zipData","localDirLength","centralDirLength","writer","compressionName","zipPart","dirEnd","CENTRAL_DIRECTORY_END","typeName","toLowerCase","append","zip","finalize","arrayBuffer2Blob","encode","input","crc","string","module","exports"],"mappings":"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","sourcesContent":["'use strict';\nvar support = require('./support');\nvar utils = require('./utils');\nvar crc32 = require('./crc32');\nvar signature = require('./signature');\nvar defaults = require('./defaults');\nvar base64 = require('./base64');\nvar compressions = require('./compressions');\nvar CompressedObject = require('./compressedObject');\nvar nodeBuffer = require('./nodeBuffer');\nvar utf8 = require('./utf8');\nvar StringWriter = require('./stringWriter');\nvar Uint8ArrayWriter = require('./uint8ArrayWriter');\n\n/**\n * Returns the raw data of a ZipObject, decompress the content if necessary.\n * @param {ZipObject} file the file to use.\n * @return {String|ArrayBuffer|Uint8Array|Buffer} the data.\n */\nvar getRawData = function(file) {\n    if (file._data instanceof CompressedObject) {\n        file._data = file._data.getContent();\n        file.options.binary = true;\n        file.options.base64 = false;\n\n        if (utils.getTypeOf(file._data) === \"uint8array\") {\n            var copy = file._data;\n            // when reading an arraybuffer, the CompressedObject mechanism will keep it and subarray() a Uint8Array.\n            // if we request a file in the same format, we might get the same Uint8Array or its ArrayBuffer (the original zip file).\n            file._data = new Uint8Array(copy.length);\n            // with an empty Uint8Array, Opera fails with a \"Offset larger than array size\"\n            if (copy.length !== 0) {\n                file._data.set(copy, 0);\n            }\n        }\n    }\n    return file._data;\n};\n\n/**\n * Returns the data of a ZipObject in a binary form. If the content is an unicode string, encode it.\n * @param {ZipObject} file the file to use.\n * @return {String|ArrayBuffer|Uint8Array|Buffer} the data.\n */\nvar getBinaryData = function(file) {\n    var result = getRawData(file),\n        type = utils.getTypeOf(result);\n    if (type === \"string\") {\n        if (!file.options.binary) {\n            // unicode text !\n            // unicode string => binary string is a painful process, check if we can avoid it.\n            if (support.nodebuffer) {\n                return nodeBuffer(result, \"utf-8\");\n            }\n        }\n        return file.asBinary();\n    }\n    return result;\n};\n\n/**\n * Transform this._data into a string.\n * @param {function} filter a function String -> String, applied if not null on the result.\n * @return {String} the string representing this._data.\n */\nvar dataToString = function(asUTF8) {\n    var result = getRawData(this);\n    if (result === null || typeof result === \"undefined\") {\n        return \"\";\n    }\n    // if the data is a base64 string, we decode it before checking the encoding !\n    if (this.options.base64) {\n        result = base64.decode(result);\n    }\n    if (asUTF8 && this.options.binary) {\n        // JSZip.prototype.utf8decode supports arrays as input\n        // skip to array => string step, utf8decode will do it.\n        result = out.utf8decode(result);\n    }\n    else {\n        // no utf8 transformation, do the array => string step.\n        result = utils.transformTo(\"string\", result);\n    }\n\n    if (!asUTF8 && !this.options.binary) {\n        result = utils.transformTo(\"string\", out.utf8encode(result));\n    }\n    return result;\n};\n/**\n * A simple object representing a file in the zip file.\n * @constructor\n * @param {string} name the name of the file\n * @param {String|ArrayBuffer|Uint8Array|Buffer} data the data\n * @param {Object} options the options of the file\n */\nvar ZipObject = function(name, data, options) {\n    this.name = name;\n    this.dir = options.dir;\n    this.date = options.date;\n    this.comment = options.comment;\n    this.unixPermissions = options.unixPermissions;\n    this.dosPermissions = options.dosPermissions;\n\n    this._data = data;\n    this.options = options;\n\n    /*\n     * This object contains initial values for dir and date.\n     * With them, we can check if the user changed the deprecated metadata in\n     * `ZipObject#options` or not.\n     */\n    this._initialMetadata = {\n      dir : options.dir,\n      date : options.date\n    };\n};\n\nZipObject.prototype = {\n    /**\n     * Return the content as UTF8 string.\n     * @return {string} the UTF8 string.\n     */\n    asText: function() {\n        return dataToString.call(this, true);\n    },\n    /**\n     * Returns the binary content.\n     * @return {string} the content as binary.\n     */\n    asBinary: function() {\n        return dataToString.call(this, false);\n    },\n    /**\n     * Returns the content as a nodejs Buffer.\n     * @return {Buffer} the content as a Buffer.\n     */\n    asNodeBuffer: function() {\n        var result = getBinaryData(this);\n        return utils.transformTo(\"nodebuffer\", result);\n    },\n    /**\n     * Returns the content as an Uint8Array.\n     * @return {Uint8Array} the content as an Uint8Array.\n     */\n    asUint8Array: function() {\n        var result = getBinaryData(this);\n        return utils.transformTo(\"uint8array\", result);\n    },\n    /**\n     * Returns the content as an ArrayBuffer.\n     * @return {ArrayBuffer} the content as an ArrayBufer.\n     */\n    asArrayBuffer: function() {\n        return this.asUint8Array().buffer;\n    }\n};\n\n/**\n * Transform an integer into a string in hexadecimal.\n * @private\n * @param {number} dec the number to convert.\n * @param {number} bytes the number of bytes to generate.\n * @returns {string} the result.\n */\nvar decToHex = function(dec, bytes) {\n    var hex = \"\",\n        i;\n    for (i = 0; i < bytes; i++) {\n        hex += String.fromCharCode(dec & 0xff);\n        dec = dec >>> 8;\n    }\n    return hex;\n};\n\n/**\n * Transforms the (incomplete) options from the user into the complete\n * set of options to create a file.\n * @private\n * @param {Object} o the options from the user.\n * @return {Object} the complete set of options.\n */\nvar prepareFileAttrs = function(o) {\n    o = o || {};\n    if (o.base64 === true && (o.binary === null || o.binary === undefined)) {\n        o.binary = true;\n    }\n    o = utils.extend(o, defaults);\n    o.date = o.date || new Date();\n    if (o.compression !== null) o.compression = o.compression.toUpperCase();\n\n    return o;\n};\n\n/**\n * Add a file in the current folder.\n * @private\n * @param {string} name the name of the file\n * @param {String|ArrayBuffer|Uint8Array|Buffer} data the data of the file\n * @param {Object} o the options of the file\n * @return {Object} the new file.\n */\nvar fileAdd = function(name, data, o) {\n    // be sure sub folders exist\n    var dataType = utils.getTypeOf(data),\n        parent;\n\n    o = prepareFileAttrs(o);\n\n    if (typeof o.unixPermissions === \"string\") {\n        o.unixPermissions = parseInt(o.unixPermissions, 8);\n    }\n\n    // UNX_IFDIR  0040000 see zipinfo.c\n    if (o.unixPermissions && (o.unixPermissions & 0x4000)) {\n        o.dir = true;\n    }\n    // Bit 4    Directory\n    if (o.dosPermissions && (o.dosPermissions & 0x0010)) {\n        o.dir = true;\n    }\n\n    if (o.dir) {\n        name = forceTrailingSlash(name);\n    }\n\n    if (o.createFolders && (parent = parentFolder(name))) {\n        folderAdd.call(this, parent, true);\n    }\n\n    if (o.dir || data === null || typeof data === \"undefined\") {\n        o.base64 = false;\n        o.binary = false;\n        data = null;\n        dataType = null;\n    }\n    else if (dataType === \"string\") {\n        if (o.binary && !o.base64) {\n            // optimizedBinaryString == true means that the file has already been filtered with a 0xFF mask\n            if (o.optimizedBinaryString !== true) {\n                // this is a string, not in a base64 format.\n                // Be sure that this is a correct \"binary string\"\n                data = utils.string2binary(data);\n            }\n        }\n    }\n    else { // arraybuffer, uint8array, ...\n        o.base64 = false;\n        o.binary = true;\n\n        if (!dataType && !(data instanceof CompressedObject)) {\n            throw new Error(\"The data of '\" + name + \"' is in an unsupported format !\");\n        }\n\n        // special case : it's way easier to work with Uint8Array than with ArrayBuffer\n        if (dataType === \"arraybuffer\") {\n            data = utils.transformTo(\"uint8array\", data);\n        }\n    }\n\n    var object = new ZipObject(name, data, o);\n    this.files[name] = object;\n    return object;\n};\n\n/**\n * Find the parent folder of the path.\n * @private\n * @param {string} path the path to use\n * @return {string} the parent folder, or \"\"\n */\nvar parentFolder = function (path) {\n    if (path.slice(-1) == '/') {\n        path = path.substring(0, path.length - 1);\n    }\n    var lastSlash = path.lastIndexOf('/');\n    return (lastSlash > 0) ? path.substring(0, lastSlash) : \"\";\n};\n\n\n/**\n * Returns the path with a slash at the end.\n * @private\n * @param {String} path the path to check.\n * @return {String} the path with a trailing slash.\n */\nvar forceTrailingSlash = function(path) {\n    // Check the name ends with a /\n    if (path.slice(-1) != \"/\") {\n        path += \"/\"; // IE doesn't like substr(-1)\n    }\n    return path;\n};\n/**\n * Add a (sub) folder in the current folder.\n * @private\n * @param {string} name the folder's name\n * @param {boolean=} [createFolders] If true, automatically create sub\n *  folders. Defaults to false.\n * @return {Object} the new folder.\n */\nvar folderAdd = function(name, createFolders) {\n    createFolders = (typeof createFolders !== 'undefined') ? createFolders : false;\n\n    name = forceTrailingSlash(name);\n\n    // Does this folder already exist?\n    if (!this.files[name]) {\n        fileAdd.call(this, name, null, {\n            dir: true,\n            createFolders: createFolders\n        });\n    }\n    return this.files[name];\n};\n\n/**\n * Generate a JSZip.CompressedObject for a given zipOject.\n * @param {ZipObject} file the object to read.\n * @param {JSZip.compression} compression the compression to use.\n * @param {Object} compressionOptions the options to use when compressing.\n * @return {JSZip.CompressedObject} the compressed result.\n */\nvar generateCompressedObjectFrom = function(file, compression, compressionOptions) {\n    var result = new CompressedObject(),\n        content;\n\n    // the data has not been decompressed, we might reuse things !\n    if (file._data instanceof CompressedObject) {\n        result.uncompressedSize = file._data.uncompressedSize;\n        result.crc32 = file._data.crc32;\n\n        if (result.uncompressedSize === 0 || file.dir) {\n            compression = compressions['STORE'];\n            result.compressedContent = \"\";\n            result.crc32 = 0;\n        }\n        else if (file._data.compressionMethod === compression.magic) {\n            result.compressedContent = file._data.getCompressedContent();\n        }\n        else {\n            content = file._data.getContent();\n            // need to decompress / recompress\n            result.compressedContent = compression.compress(utils.transformTo(compression.compressInputType, content), compressionOptions);\n        }\n    }\n    else {\n        // have uncompressed data\n        content = getBinaryData(file);\n        if (!content || content.length === 0 || file.dir) {\n            compression = compressions['STORE'];\n            content = \"\";\n        }\n        result.uncompressedSize = content.length;\n        result.crc32 = crc32(content);\n        result.compressedContent = compression.compress(utils.transformTo(compression.compressInputType, content), compressionOptions);\n    }\n\n    result.compressedSize = result.compressedContent.length;\n    result.compressionMethod = compression.magic;\n\n    return result;\n};\n\n\n\n\n/**\n * Generate the UNIX part of the external file attributes.\n * @param {Object} unixPermissions the unix permissions or null.\n * @param {Boolean} isDir true if the entry is a directory, false otherwise.\n * @return {Number} a 32 bit integer.\n *\n * adapted from http://unix.stackexchange.com/questions/14705/the-zip-formats-external-file-attribute :\n *\n * TTTTsstrwxrwxrwx0000000000ADVSHR\n * ^^^^____________________________ file type, see zipinfo.c (UNX_*)\n *     ^^^_________________________ setuid, setgid, sticky\n *        ^^^^^^^^^________________ permissions\n *                 ^^^^^^^^^^______ not used ?\n *                           ^^^^^^ DOS attribute bits : Archive, Directory, Volume label, System file, Hidden, Read only\n */\nvar generateUnixExternalFileAttr = function (unixPermissions, isDir) {\n\n    var result = unixPermissions;\n    if (!unixPermissions) {\n        // I can't use octal values in strict mode, hence the hexa.\n        //  040775 => 0x41fd\n        // 0100664 => 0x81b4\n        result = isDir ? 0x41fd : 0x81b4;\n    }\n\n    return (result & 0xFFFF) << 16;\n};\n\n/**\n * Generate the DOS part of the external file attributes.\n * @param {Object} dosPermissions the dos permissions or null.\n * @param {Boolean} isDir true if the entry is a directory, false otherwise.\n * @return {Number} a 32 bit integer.\n *\n * Bit 0     Read-Only\n * Bit 1     Hidden\n * Bit 2     System\n * Bit 3     Volume Label\n * Bit 4     Directory\n * Bit 5     Archive\n */\nvar generateDosExternalFileAttr = function (dosPermissions, isDir) {\n\n    // the dir flag is already set for compatibility\n\n    return (dosPermissions || 0)  & 0x3F;\n};\n\n/**\n * Generate the various parts used in the construction of the final zip file.\n * @param {string} name the file name.\n * @param {ZipObject} file the file content.\n * @param {JSZip.CompressedObject} compressedObject the compressed object.\n * @param {number} offset the current offset from the start of the zip file.\n * @param {String} platform let's pretend we are this platform (change platform dependents fields)\n * @param {Function} encodeFileName the function to encode the file name / comment.\n * @return {object} the zip parts.\n */\nvar generateZipParts = function(name, file, compressedObject, offset, platform, encodeFileName) {\n    var data = compressedObject.compressedContent,\n        useCustomEncoding = encodeFileName !== utf8.utf8encode,\n        encodedFileName = utils.transformTo(\"string\", encodeFileName(file.name)),\n        utfEncodedFileName = utils.transformTo(\"string\", utf8.utf8encode(file.name)),\n        comment = file.comment || \"\",\n        encodedComment = utils.transformTo(\"string\", encodeFileName(comment)),\n        utfEncodedComment = utils.transformTo(\"string\", utf8.utf8encode(comment)),\n        useUTF8ForFileName = utfEncodedFileName.length !== file.name.length,\n        useUTF8ForComment = utfEncodedComment.length !== comment.length,\n        o = file.options,\n        dosTime,\n        dosDate,\n        extraFields = \"\",\n        unicodePathExtraField = \"\",\n        unicodeCommentExtraField = \"\",\n        dir, date;\n\n\n    // handle the deprecated options.dir\n    if (file._initialMetadata.dir !== file.dir) {\n        dir = file.dir;\n    } else {\n        dir = o.dir;\n    }\n\n    // handle the deprecated options.date\n    if(file._initialMetadata.date !== file.date) {\n        date = file.date;\n    } else {\n        date = o.date;\n    }\n\n    var extFileAttr = 0;\n    var versionMadeBy = 0;\n    if (dir) {\n        // dos or unix, we set the dos dir flag\n        extFileAttr |= 0x00010;\n    }\n    if(platform === \"UNIX\") {\n        versionMadeBy = 0x031E; // UNIX, version 3.0\n        extFileAttr |= generateUnixExternalFileAttr(file.unixPermissions, dir);\n    } else { // DOS or other, fallback to DOS\n        versionMadeBy = 0x0014; // DOS, version 2.0\n        extFileAttr |= generateDosExternalFileAttr(file.dosPermissions, dir);\n    }\n\n    // date\n    // @see http://www.delorie.com/djgpp/doc/rbinter/it/52/13.html\n    // @see http://www.delorie.com/djgpp/doc/rbinter/it/65/16.html\n    // @see http://www.delorie.com/djgpp/doc/rbinter/it/66/16.html\n\n    dosTime = date.getHours();\n    dosTime = dosTime << 6;\n    dosTime = dosTime | date.getMinutes();\n    dosTime = dosTime << 5;\n    dosTime = dosTime | date.getSeconds() / 2;\n\n    dosDate = date.getFullYear() - 1980;\n    dosDate = dosDate << 4;\n    dosDate = dosDate | (date.getMonth() + 1);\n    dosDate = dosDate << 5;\n    dosDate = dosDate | date.getDate();\n\n    if (useUTF8ForFileName) {\n        // set the unicode path extra field. unzip needs at least one extra\n        // field to correctly handle unicode path, so using the path is as good\n        // as any other information. This could improve the situation with\n        // other archive managers too.\n        // This field is usually used without the utf8 flag, with a non\n        // unicode path in the header (winrar, winzip). This helps (a bit)\n        // with the messy Windows' default compressed folders feature but\n        // breaks on p7zip which doesn't seek the unicode path extra field.\n        // So for now, UTF-8 everywhere !\n        unicodePathExtraField =\n            // Version\n            decToHex(1, 1) +\n            // NameCRC32\n            decToHex(crc32(encodedFileName), 4) +\n            // UnicodeName\n            utfEncodedFileName;\n\n        extraFields +=\n            // Info-ZIP Unicode Path Extra Field\n            \"\\x75\\x70\" +\n            // size\n            decToHex(unicodePathExtraField.length, 2) +\n            // content\n            unicodePathExtraField;\n    }\n\n    if(useUTF8ForComment) {\n\n        unicodeCommentExtraField =\n            // Version\n            decToHex(1, 1) +\n            // CommentCRC32\n            decToHex(this.crc32(encodedComment), 4) +\n            // UnicodeName\n            utfEncodedComment;\n\n        extraFields +=\n            // Info-ZIP Unicode Path Extra Field\n            \"\\x75\\x63\" +\n            // size\n            decToHex(unicodeCommentExtraField.length, 2) +\n            // content\n            unicodeCommentExtraField;\n    }\n\n    var header = \"\";\n\n    // version needed to extract\n    header += \"\\x0A\\x00\";\n    // general purpose bit flag\n    // set bit 11 if utf8\n    header += !useCustomEncoding && (useUTF8ForFileName || useUTF8ForComment) ? \"\\x00\\x08\" : \"\\x00\\x00\";\n    // compression method\n    header += compressedObject.compressionMethod;\n    // last mod file time\n    header += decToHex(dosTime, 2);\n    // last mod file date\n    header += decToHex(dosDate, 2);\n    // crc-32\n    header += decToHex(compressedObject.crc32, 4);\n    // compressed size\n    header += decToHex(compressedObject.compressedSize, 4);\n    // uncompressed size\n    header += decToHex(compressedObject.uncompressedSize, 4);\n    // file name length\n    header += decToHex(encodedFileName.length, 2);\n    // extra field length\n    header += decToHex(extraFields.length, 2);\n\n\n    var fileRecord = signature.LOCAL_FILE_HEADER + header + encodedFileName + extraFields;\n\n    var dirRecord = signature.CENTRAL_FILE_HEADER +\n    // version made by (00: DOS)\n    decToHex(versionMadeBy, 2) +\n    // file header (common to file and central directory)\n    header +\n    // file comment length\n    decToHex(encodedComment.length, 2) +\n    // disk number start\n    \"\\x00\\x00\" +\n    // internal file attributes TODO\n    \"\\x00\\x00\" +\n    // external file attributes\n    decToHex(extFileAttr, 4) +\n    // relative offset of local header\n    decToHex(offset, 4) +\n    // file name\n    encodedFileName +\n    // extra field\n    extraFields +\n    // file comment\n    encodedComment;\n\n    return {\n        fileRecord: fileRecord,\n        dirRecord: dirRecord,\n        compressedObject: compressedObject\n    };\n};\n\n\n// return the actual prototype of JSZip\nvar out = {\n    /**\n     * Read an existing zip and merge the data in the current JSZip object.\n     * The implementation is in jszip-load.js, don't forget to include it.\n     * @param {String|ArrayBuffer|Uint8Array|Buffer} stream  The stream to load\n     * @param {Object} options Options for loading the stream.\n     *  options.base64 : is the stream in base64 ? default : false\n     * @return {JSZip} the current JSZip object\n     */\n    load: function(stream, options) {\n        throw new Error(\"Load method is not defined. Is the file jszip-load.js included ?\");\n    },\n\n    /**\n     * Filter nested files/folders with the specified function.\n     * @param {Function} search the predicate to use :\n     * function (relativePath, file) {...}\n     * It takes 2 arguments : the relative path and the file.\n     * @return {Array} An array of matching elements.\n     */\n    filter: function(search) {\n        var result = [],\n            filename, relativePath, file, fileClone;\n        for (filename in this.files) {\n            if (!this.files.hasOwnProperty(filename)) {\n                continue;\n            }\n            file = this.files[filename];\n            // return a new object, don't let the user mess with our internal objects :)\n            fileClone = new ZipObject(file.name, file._data, utils.extend(file.options));\n            relativePath = filename.slice(this.root.length, filename.length);\n            if (filename.slice(0, this.root.length) === this.root && // the file is in the current root\n            search(relativePath, fileClone)) { // and the file matches the function\n                result.push(fileClone);\n            }\n        }\n        return result;\n    },\n\n    /**\n     * Add a file to the zip file, or search a file.\n     * @param   {string|RegExp} name The name of the file to add (if data is defined),\n     * the name of the file to find (if no data) or a regex to match files.\n     * @param   {String|ArrayBuffer|Uint8Array|Buffer} data  The file data, either raw or base64 encoded\n     * @param   {Object} o     File options\n     * @return  {JSZip|Object|Array} this JSZip object (when adding a file),\n     * a file (when searching by string) or an array of files (when searching by regex).\n     */\n    file: function(name, data, o) {\n        if (arguments.length === 1) {\n            if (utils.isRegExp(name)) {\n                var regexp = name;\n                return this.filter(function(relativePath, file) {\n                    return !file.dir && regexp.test(relativePath);\n                });\n            }\n            else { // text\n                return this.filter(function(relativePath, file) {\n                    return !file.dir && relativePath === name;\n                })[0] || null;\n            }\n        }\n        else { // more than one argument : we have data !\n            name = this.root + name;\n            fileAdd.call(this, name, data, o);\n        }\n        return this;\n    },\n\n    /**\n     * Add a directory to the zip file, or search.\n     * @param   {String|RegExp} arg The name of the directory to add, or a regex to search folders.\n     * @return  {JSZip} an object with the new directory as the root, or an array containing matching folders.\n     */\n    folder: function(arg) {\n        if (!arg) {\n            return this;\n        }\n\n        if (utils.isRegExp(arg)) {\n            return this.filter(function(relativePath, file) {\n                return file.dir && arg.test(relativePath);\n            });\n        }\n\n        // else, name is a new folder\n        var name = this.root + arg;\n        var newFolder = folderAdd.call(this, name);\n\n        // Allow chaining by returning a new object with this folder as the root\n        var ret = this.clone();\n        ret.root = newFolder.name;\n        return ret;\n    },\n\n    /**\n     * Delete a file, or a directory and all sub-files, from the zip\n     * @param {string} name the name of the file to delete\n     * @return {JSZip} this JSZip object\n     */\n    remove: function(name) {\n        name = this.root + name;\n        var file = this.files[name];\n        if (!file) {\n            // Look for any folders\n            if (name.slice(-1) != \"/\") {\n                name += \"/\";\n            }\n            file = this.files[name];\n        }\n\n        if (file && !file.dir) {\n            // file\n            delete this.files[name];\n        } else {\n            // maybe a folder, delete recursively\n            var kids = this.filter(function(relativePath, file) {\n                return file.name.slice(0, name.length) === name;\n            });\n            for (var i = 0; i < kids.length; i++) {\n                delete this.files[kids[i].name];\n            }\n        }\n\n        return this;\n    },\n\n    /**\n     * Generate the complete zip file\n     * @param {Object} options the options to generate the zip file :\n     * - base64, (deprecated, use type instead) true to generate base64.\n     * - compression, \"STORE\" by default.\n     * - type, \"base64\" by default. Values are : string, base64, uint8array, arraybuffer, blob.\n     * @return {String|Uint8Array|ArrayBuffer|Buffer|Blob} the zip file\n     */\n    generate: function(options) {\n        options = utils.extend(options || {}, {\n            base64: true,\n            compression: \"STORE\",\n            compressionOptions : null,\n            type: \"base64\",\n            platform: \"DOS\",\n            comment: null,\n            mimeType: 'application/zip',\n            encodeFileName: utf8.utf8encode\n        });\n\n        utils.checkSupport(options.type);\n\n        // accept nodejs `process.platform`\n        if(\n          options.platform === 'darwin' ||\n          options.platform === 'freebsd' ||\n          options.platform === 'linux' ||\n          options.platform === 'sunos'\n        ) {\n          options.platform = \"UNIX\";\n        }\n        if (options.platform === 'win32') {\n          options.platform = \"DOS\";\n        }\n\n        var zipData = [],\n            localDirLength = 0,\n            centralDirLength = 0,\n            writer, i,\n            encodedComment = utils.transformTo(\"string\", options.encodeFileName(options.comment || this.comment || \"\"));\n\n        // first, generate all the zip parts.\n        for (var name in this.files) {\n            if (!this.files.hasOwnProperty(name)) {\n                continue;\n            }\n            var file = this.files[name];\n\n            var compressionName = file.options.compression || options.compression.toUpperCase();\n            var compression = compressions[compressionName];\n            if (!compression) {\n                throw new Error(compressionName + \" is not a valid compression method !\");\n            }\n            var compressionOptions = file.options.compressionOptions || options.compressionOptions || {};\n\n            var compressedObject = generateCompressedObjectFrom.call(this, file, compression, compressionOptions);\n\n            var zipPart = generateZipParts.call(this, name, file, compressedObject, localDirLength, options.platform, options.encodeFileName);\n            localDirLength += zipPart.fileRecord.length + compressedObject.compressedSize;\n            centralDirLength += zipPart.dirRecord.length;\n            zipData.push(zipPart);\n        }\n\n        var dirEnd = \"\";\n\n        // end of central dir signature\n        dirEnd = signature.CENTRAL_DIRECTORY_END +\n        // number of this disk\n        \"\\x00\\x00\" +\n        // number of the disk with the start of the central directory\n        \"\\x00\\x00\" +\n        // total number of entries in the central directory on this disk\n        decToHex(zipData.length, 2) +\n        // total number of entries in the central directory\n        decToHex(zipData.length, 2) +\n        // size of the central directory   4 bytes\n        decToHex(centralDirLength, 4) +\n        // offset of start of central directory with respect to the starting disk number\n        decToHex(localDirLength, 4) +\n        // .ZIP file comment length\n        decToHex(encodedComment.length, 2) +\n        // .ZIP file comment\n        encodedComment;\n\n\n        // we have all the parts (and the total length)\n        // time to create a writer !\n        var typeName = options.type.toLowerCase();\n        if(typeName===\"uint8array\"||typeName===\"arraybuffer\"||typeName===\"blob\"||typeName===\"nodebuffer\") {\n            writer = new Uint8ArrayWriter(localDirLength + centralDirLength + dirEnd.length);\n        }else{\n            writer = new StringWriter(localDirLength + centralDirLength + dirEnd.length);\n        }\n\n        for (i = 0; i < zipData.length; i++) {\n            writer.append(zipData[i].fileRecord);\n            writer.append(zipData[i].compressedObject.compressedContent);\n        }\n        for (i = 0; i < zipData.length; i++) {\n            writer.append(zipData[i].dirRecord);\n        }\n\n        writer.append(dirEnd);\n\n        var zip = writer.finalize();\n\n\n\n        switch(options.type.toLowerCase()) {\n            // case \"zip is an Uint8Array\"\n            case \"uint8array\" :\n            case \"arraybuffer\" :\n            case \"nodebuffer\" :\n               return utils.transformTo(options.type.toLowerCase(), zip);\n            case \"blob\" :\n               return utils.arrayBuffer2Blob(utils.transformTo(\"arraybuffer\", zip), options.mimeType);\n            // case \"zip is a string\"\n            case \"base64\" :\n               return (options.base64) ? base64.encode(zip) : zip;\n            default : // case \"string\" :\n               return zip;\n         }\n\n    },\n\n    /**\n     * @deprecated\n     * This method will be removed in a future version without replacement.\n     */\n    crc32: function (input, crc) {\n        return crc32(input, crc);\n    },\n\n    /**\n     * @deprecated\n     * This method will be removed in a future version without replacement.\n     */\n    utf8encode: function (string) {\n        return utils.transformTo(\"string\", utf8.utf8encode(string));\n    },\n\n    /**\n     * @deprecated\n     * This method will be removed in a future version without replacement.\n     */\n    utf8decode: function (input) {\n        return utf8.utf8decode(input);\n    }\n};\nmodule.exports = out;\n"]},"metadata":{},"sourceType":"script"}