{"ast":null,"code":"/**\n * @module ol/renderer/canvas/TileLayer\n */\nimport { getUid, inherits } from '../../util.js';\nimport LayerType from '../../LayerType.js';\nimport TileRange from '../../TileRange.js';\nimport TileState from '../../TileState.js';\nimport ViewHint from '../../ViewHint.js';\nimport { createCanvasContext2D } from '../../dom.js';\nimport { containsExtent, createEmpty, equals, getIntersection, isEmpty } from '../../extent.js';\nimport IntermediateCanvasRenderer from '../canvas/IntermediateCanvas.js';\nimport { create as createTransform, compose as composeTransform } from '../../transform.js';\n/**\n * @constructor\n * @extends {module:ol/renderer/canvas/IntermediateCanvas}\n * @param {module:ol/layer/Tile|module:ol/layer/VectorTile} tileLayer Tile layer.\n * @api\n */\n\nconst CanvasTileLayerRenderer = function (tileLayer) {\n  IntermediateCanvasRenderer.call(this, tileLayer);\n  /**\n   * @protected\n   * @type {CanvasRenderingContext2D}\n   */\n\n  this.context = this.context === null ? null : createCanvasContext2D();\n  /**\n   * @private\n   * @type {number}\n   */\n\n  this.oversampling_;\n  /**\n   * @private\n   * @type {module:ol/extent~Extent}\n   */\n\n  this.renderedExtent_ = null;\n  /**\n   * @protected\n   * @type {number}\n   */\n\n  this.renderedRevision;\n  /**\n   * @protected\n   * @type {!Array.<module:ol/Tile>}\n   */\n\n  this.renderedTiles = [];\n  /**\n   * @private\n   * @type {boolean}\n   */\n\n  this.newTiles_ = false;\n  /**\n   * @protected\n   * @type {module:ol/extent~Extent}\n   */\n\n  this.tmpExtent = createEmpty();\n  /**\n   * @private\n   * @type {module:ol/TileRange}\n   */\n\n  this.tmpTileRange_ = new TileRange(0, 0, 0, 0);\n  /**\n   * @private\n   * @type {module:ol/transform~Transform}\n   */\n\n  this.imageTransform_ = createTransform();\n  /**\n   * @protected\n   * @type {number}\n   */\n\n  this.zDirection = 0;\n};\n\ninherits(CanvasTileLayerRenderer, IntermediateCanvasRenderer);\n/**\n * Determine if this renderer handles the provided layer.\n * @param {module:ol/layer/Layer} layer The candidate layer.\n * @return {boolean} The renderer can render the layer.\n */\n\nCanvasTileLayerRenderer['handles'] = function (layer) {\n  return layer.getType() === LayerType.TILE;\n};\n/**\n * Create a layer renderer.\n * @param {module:ol/renderer/Map} mapRenderer The map renderer.\n * @param {module:ol/layer/Layer} layer The layer to be rendererd.\n * @return {module:ol/renderer/canvas/TileLayer} The layer renderer.\n */\n\n\nCanvasTileLayerRenderer['create'] = function (mapRenderer, layer) {\n  return new CanvasTileLayerRenderer(\n  /** @type {module:ol/layer/Tile} */\n  layer);\n};\n/**\n * @private\n * @param {module:ol/Tile} tile Tile.\n * @return {boolean} Tile is drawable.\n */\n\n\nCanvasTileLayerRenderer.prototype.isDrawableTile_ = function (tile) {\n  const tileState = tile.getState();\n  const useInterimTilesOnError = this.getLayer().getUseInterimTilesOnError();\n  return tileState == TileState.LOADED || tileState == TileState.EMPTY || tileState == TileState.ERROR && !useInterimTilesOnError;\n};\n/**\n * @param {number} z Tile coordinate z.\n * @param {number} x Tile coordinate x.\n * @param {number} y Tile coordinate y.\n * @param {number} pixelRatio Pixel ratio.\n * @param {module:ol/proj/Projection} projection Projection.\n * @return {!module:ol/Tile} Tile.\n */\n\n\nCanvasTileLayerRenderer.prototype.getTile = function (z, x, y, pixelRatio, projection) {\n  const layer = this.getLayer();\n  const source =\n  /** @type {module:ol/source/Tile} */\n  layer.getSource();\n  let tile = source.getTile(z, x, y, pixelRatio, projection);\n\n  if (tile.getState() == TileState.ERROR) {\n    if (!layer.getUseInterimTilesOnError()) {\n      // When useInterimTilesOnError is false, we consider the error tile as loaded.\n      tile.setState(TileState.LOADED);\n    } else if (layer.getPreload() > 0) {\n      // Preloaded tiles for lower resolutions might have finished loading.\n      this.newTiles_ = true;\n    }\n  }\n\n  if (!this.isDrawableTile_(tile)) {\n    tile = tile.getInterimTile();\n  }\n\n  return tile;\n};\n/**\n * @inheritDoc\n */\n\n\nCanvasTileLayerRenderer.prototype.prepareFrame = function (frameState, layerState) {\n  const pixelRatio = frameState.pixelRatio;\n  const size = frameState.size;\n  const viewState = frameState.viewState;\n  const projection = viewState.projection;\n  const viewResolution = viewState.resolution;\n  const viewCenter = viewState.center;\n  const tileLayer = this.getLayer();\n  const tileSource =\n  /** @type {module:ol/source/Tile} */\n  tileLayer.getSource();\n  const sourceRevision = tileSource.getRevision();\n  const tileGrid = tileSource.getTileGridForProjection(projection);\n  const z = tileGrid.getZForResolution(viewResolution, this.zDirection);\n  const tileResolution = tileGrid.getResolution(z);\n  let oversampling = Math.round(viewResolution / tileResolution) || 1;\n  let extent = frameState.extent;\n\n  if (layerState.extent !== undefined) {\n    extent = getIntersection(extent, layerState.extent);\n  }\n\n  if (isEmpty(extent)) {\n    // Return false to prevent the rendering of the layer.\n    return false;\n  }\n\n  const tileRange = tileGrid.getTileRangeForExtentAndZ(extent, z);\n  const imageExtent = tileGrid.getTileRangeExtent(z, tileRange);\n  const tilePixelRatio = tileSource.getTilePixelRatio(pixelRatio);\n  /**\n   * @type {Object.<number, Object.<string, module:ol/Tile>>}\n   */\n\n  const tilesToDrawByZ = {};\n  tilesToDrawByZ[z] = {};\n  const findLoadedTiles = this.createLoadedTileFinder(tileSource, projection, tilesToDrawByZ);\n  const hints = frameState.viewHints;\n  const animatingOrInteracting = hints[ViewHint.ANIMATING] || hints[ViewHint.INTERACTING];\n  const tmpExtent = this.tmpExtent;\n  const tmpTileRange = this.tmpTileRange_;\n  this.newTiles_ = false;\n  let tile, x, y;\n\n  for (x = tileRange.minX; x <= tileRange.maxX; ++x) {\n    for (y = tileRange.minY; y <= tileRange.maxY; ++y) {\n      if (Date.now() - frameState.time > 16 && animatingOrInteracting) {\n        continue;\n      }\n\n      tile = this.getTile(z, x, y, pixelRatio, projection);\n\n      if (this.isDrawableTile_(tile)) {\n        const uid = getUid(this);\n\n        if (tile.getState() == TileState.LOADED) {\n          tilesToDrawByZ[z][tile.tileCoord.toString()] = tile;\n          const inTransition = tile.inTransition(uid);\n\n          if (!this.newTiles_ && (inTransition || this.renderedTiles.indexOf(tile) === -1)) {\n            this.newTiles_ = true;\n          }\n        }\n\n        if (tile.getAlpha(uid, frameState.time) === 1) {\n          // don't look for alt tiles if alpha is 1\n          continue;\n        }\n      }\n\n      const childTileRange = tileGrid.getTileCoordChildTileRange(tile.tileCoord, tmpTileRange, tmpExtent);\n      let covered = false;\n\n      if (childTileRange) {\n        covered = findLoadedTiles(z + 1, childTileRange);\n      }\n\n      if (!covered) {\n        tileGrid.forEachTileCoordParentTileRange(tile.tileCoord, findLoadedTiles, null, tmpTileRange, tmpExtent);\n      }\n    }\n  }\n\n  const renderedResolution = tileResolution * pixelRatio / tilePixelRatio * oversampling;\n\n  if (!(this.renderedResolution && Date.now() - frameState.time > 16 && animatingOrInteracting) && (this.newTiles_ || !(this.renderedExtent_ && containsExtent(this.renderedExtent_, extent)) || this.renderedRevision != sourceRevision || oversampling != this.oversampling_ || !animatingOrInteracting && renderedResolution != this.renderedResolution)) {\n    const context = this.context;\n\n    if (context) {\n      const tilePixelSize = tileSource.getTilePixelSize(z, pixelRatio, projection);\n      const width = Math.round(tileRange.getWidth() * tilePixelSize[0] / oversampling);\n      const height = Math.round(tileRange.getHeight() * tilePixelSize[1] / oversampling);\n      const canvas = context.canvas;\n\n      if (canvas.width != width || canvas.height != height) {\n        this.oversampling_ = oversampling;\n        canvas.width = width;\n        canvas.height = height;\n      } else {\n        if (this.renderedExtent_ && !equals(imageExtent, this.renderedExtent_)) {\n          context.clearRect(0, 0, width, height);\n        }\n\n        oversampling = this.oversampling_;\n      }\n    }\n\n    this.renderedTiles.length = 0;\n    /** @type {Array.<number>} */\n\n    const zs = Object.keys(tilesToDrawByZ).map(Number);\n    zs.sort(function (a, b) {\n      if (a === z) {\n        return 1;\n      } else if (b === z) {\n        return -1;\n      } else {\n        return a > b ? 1 : a < b ? -1 : 0;\n      }\n    });\n    let currentResolution, currentScale, currentTilePixelSize, currentZ, i, ii;\n    let tileExtent, tileGutter, tilesToDraw, w, h;\n\n    for (i = 0, ii = zs.length; i < ii; ++i) {\n      currentZ = zs[i];\n      currentTilePixelSize = tileSource.getTilePixelSize(currentZ, pixelRatio, projection);\n      currentResolution = tileGrid.getResolution(currentZ);\n      currentScale = currentResolution / tileResolution;\n      tileGutter = tilePixelRatio * tileSource.getGutter(projection);\n      tilesToDraw = tilesToDrawByZ[currentZ];\n\n      for (const tileCoordKey in tilesToDraw) {\n        tile = tilesToDraw[tileCoordKey];\n        tileExtent = tileGrid.getTileCoordExtent(tile.getTileCoord(), tmpExtent);\n        x = (tileExtent[0] - imageExtent[0]) / tileResolution * tilePixelRatio / oversampling;\n        y = (imageExtent[3] - tileExtent[3]) / tileResolution * tilePixelRatio / oversampling;\n        w = currentTilePixelSize[0] * currentScale / oversampling;\n        h = currentTilePixelSize[1] * currentScale / oversampling;\n        this.drawTileImage(tile, frameState, layerState, x, y, w, h, tileGutter, z === currentZ);\n        this.renderedTiles.push(tile);\n      }\n    }\n\n    this.renderedRevision = sourceRevision;\n    this.renderedResolution = tileResolution * pixelRatio / tilePixelRatio * oversampling;\n    this.renderedExtent_ = imageExtent;\n  }\n\n  const scale = this.renderedResolution / viewResolution;\n  const transform = composeTransform(this.imageTransform_, pixelRatio * size[0] / 2, pixelRatio * size[1] / 2, scale, scale, 0, (this.renderedExtent_[0] - viewCenter[0]) / this.renderedResolution * pixelRatio, (viewCenter[1] - this.renderedExtent_[3]) / this.renderedResolution * pixelRatio);\n  composeTransform(this.coordinateToCanvasPixelTransform, pixelRatio * size[0] / 2 - transform[4], pixelRatio * size[1] / 2 - transform[5], pixelRatio / viewResolution, -pixelRatio / viewResolution, 0, -viewCenter[0], -viewCenter[1]);\n  this.updateUsedTiles(frameState.usedTiles, tileSource, z, tileRange);\n  this.manageTilePyramid(frameState, tileSource, tileGrid, pixelRatio, projection, extent, z, tileLayer.getPreload());\n  this.scheduleExpireCache(frameState, tileSource);\n  return this.renderedTiles.length > 0;\n};\n/**\n * @param {module:ol/Tile} tile Tile.\n * @param {module:ol/PluggableMap~FrameState} frameState Frame state.\n * @param {module:ol/layer/Layer~State} layerState Layer state.\n * @param {number} x Left of the tile.\n * @param {number} y Top of the tile.\n * @param {number} w Width of the tile.\n * @param {number} h Height of the tile.\n * @param {number} gutter Tile gutter.\n * @param {boolean} transition Apply an alpha transition.\n */\n\n\nCanvasTileLayerRenderer.prototype.drawTileImage = function (tile, frameState, layerState, x, y, w, h, gutter, transition) {\n  const image = tile.getImage(this.getLayer());\n\n  if (!image) {\n    return;\n  }\n\n  const uid = getUid(this);\n  const alpha = transition ? tile.getAlpha(uid, frameState.time) : 1;\n\n  if (alpha === 1 && !this.getLayer().getSource().getOpaque(frameState.viewState.projection)) {\n    this.context.clearRect(x, y, w, h);\n  }\n\n  const alphaChanged = alpha !== this.context.globalAlpha;\n\n  if (alphaChanged) {\n    this.context.save();\n    this.context.globalAlpha = alpha;\n  }\n\n  this.context.drawImage(image, gutter, gutter, image.width - 2 * gutter, image.height - 2 * gutter, x, y, w, h);\n\n  if (alphaChanged) {\n    this.context.restore();\n  }\n\n  if (alpha !== 1) {\n    frameState.animate = true;\n  } else if (transition) {\n    tile.endTransition(uid);\n  }\n};\n/**\n * @inheritDoc\n */\n\n\nCanvasTileLayerRenderer.prototype.getImage = function () {\n  const context = this.context;\n  return context ? context.canvas : null;\n};\n/**\n * @function\n * @return {module:ol/layer/Tile|module:ol/layer/VectorTile}\n */\n\n\nCanvasTileLayerRenderer.prototype.getLayer;\n/**\n * @inheritDoc\n */\n\nCanvasTileLayerRenderer.prototype.getImageTransform = function () {\n  return this.imageTransform_;\n};\n\nexport default CanvasTileLayerRenderer;","map":null,"metadata":{},"sourceType":"module"}