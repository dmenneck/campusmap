{"ast":null,"code":"/**\n * @module ol/string\n */\n\n/**\n * @param {number} number Number to be formatted\n * @param {number} width The desired width\n * @param {number=} opt_precision Precision of the output string (i.e. number of decimal places)\n * @returns {string} Formatted string\n */\nexport function padNumber(number, width, opt_precision) {\n  var numberString = opt_precision !== undefined ? number.toFixed(opt_precision) : '' + number;\n  var decimal = numberString.indexOf('.');\n  decimal = decimal === -1 ? numberString.length : decimal;\n  return decimal > width ? numberString : new Array(1 + width - decimal).join('0') + numberString;\n}\n/**\n * Adapted from https://github.com/omichelsen/compare-versions/blob/master/index.js\n * @param {string|number} v1 First version\n * @param {string|number} v2 Second version\n * @returns {number} Value\n */\n\nexport function compareVersions(v1, v2) {\n  var s1 = ('' + v1).split('.');\n  var s2 = ('' + v2).split('.');\n\n  for (var i = 0; i < Math.max(s1.length, s2.length); i++) {\n    var n1 = parseInt(s1[i] || '0', 10);\n    var n2 = parseInt(s2[i] || '0', 10);\n\n    if (n1 > n2) {\n      return 1;\n    }\n\n    if (n2 > n1) {\n      return -1;\n    }\n  }\n\n  return 0;\n}","map":{"version":3,"sources":["../../src/ol/string.js"],"names":["const","let"],"mappings":"AAAA;;;;;;;;;;AAUA,OAAO,SAAS,SAAT,CAAmB,MAAnB,EAA2B,KAA3B,EAAkC,aAAlC,EAAiD;AACtDA,MAAM,YAAY,GAAG,aAAa,KAAK,SAAlB,GAA8B,MAAM,CAAC,OAAP,CAAe,aAAf,CAA9B,GAA8D,KAAK,MAAxFA;AACAC,MAAI,OAAO,GAAG,YAAY,CAAC,OAAb,CAAqB,GAArB,CAAdA;AACA,EAAA,OAAO,GAAG,OAAO,KAAK,CAAC,CAAb,GAAiB,YAAY,CAAC,MAA9B,GAAuC,OAAjD;AACA,SAAO,OAAO,GAAG,KAAV,GAAkB,YAAlB,GAAiC,IAAI,KAAJ,CAAU,IAAI,KAAJ,GAAY,OAAtB,EAA+B,IAA/B,CAAoC,GAApC,IAA2C,YAAnF;AACD;;;;;;;;AASD,OAAO,SAAS,eAAT,CAAyB,EAAzB,EAA6B,EAA7B,EAAiC;AACtCD,MAAM,EAAE,GAAG,CAAC,KAAK,EAAN,EAAU,KAAV,CAAgB,GAAhB,CAAXA;AACAA,MAAM,EAAE,GAAG,CAAC,KAAK,EAAN,EAAU,KAAV,CAAgB,GAAhB,CAAXA;;AAEA,OAAKC,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,IAAI,CAAC,GAAL,CAAS,EAAE,CAAC,MAAZ,EAAoB,EAAE,CAAC,MAAvB,CAApB,EAAoD,CAAC,EAArD,EAAyD;AACvDD,QAAM,EAAE,GAAG,QAAQ,CAAC,EAAE,CAAC,CAAD,CAAF,IAAS,GAAV,EAAe,EAAf,CAAnBA;AACAA,QAAM,EAAE,GAAG,QAAQ,CAAC,EAAE,CAAC,CAAD,CAAF,IAAS,GAAV,EAAe,EAAf,CAAnBA;;AAEA,QAAI,EAAE,GAAG,EAAT,EAAa;AACX,aAAO,CAAP;AACD;;AACD,QAAI,EAAE,GAAG,EAAT,EAAa;AACX,aAAO,CAAC,CAAR;AACD;AACF;;AAED,SAAO,CAAP;AACD","sourcesContent":["/**\n * @module ol/string\n */\n\n/**\n * @param {number} number Number to be formatted\n * @param {number} width The desired width\n * @param {number=} opt_precision Precision of the output string (i.e. number of decimal places)\n * @returns {string} Formatted string\n */\nexport function padNumber(number, width, opt_precision) {\n  const numberString = opt_precision !== undefined ? number.toFixed(opt_precision) : '' + number;\n  let decimal = numberString.indexOf('.');\n  decimal = decimal === -1 ? numberString.length : decimal;\n  return decimal > width ? numberString : new Array(1 + width - decimal).join('0') + numberString;\n}\n\n\n/**\n * Adapted from https://github.com/omichelsen/compare-versions/blob/master/index.js\n * @param {string|number} v1 First version\n * @param {string|number} v2 Second version\n * @returns {number} Value\n */\nexport function compareVersions(v1, v2) {\n  const s1 = ('' + v1).split('.');\n  const s2 = ('' + v2).split('.');\n\n  for (let i = 0; i < Math.max(s1.length, s2.length); i++) {\n    const n1 = parseInt(s1[i] || '0', 10);\n    const n2 = parseInt(s2[i] || '0', 10);\n\n    if (n1 > n2) {\n      return 1;\n    }\n    if (n2 > n1) {\n      return -1;\n    }\n  }\n\n  return 0;\n}\n"]},"metadata":{},"sourceType":"module"}