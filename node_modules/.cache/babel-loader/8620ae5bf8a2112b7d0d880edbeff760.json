{"ast":null,"code":"/**\n * @module ol/Image\n */\nimport { inherits } from './util.js';\nimport ImageBase from './ImageBase.js';\nimport ImageState from './ImageState.js';\nimport { listenOnce, unlistenByKey } from './events.js';\nimport EventType from './events/EventType.js';\nimport { getHeight } from './extent.js';\n/**\n * A function that takes an {@link module:ol/Image~Image} for the image and a\n * `{string}` for the src as arguments. It is supposed to make it so the\n * underlying image {@link module:ol/Image~Image#getImage} is assigned the\n * content specified by the src. If not specified, the default is\n *\n *     function(image, src) {\n *       image.getImage().src = src;\n *     }\n *\n * Providing a custom `imageLoadFunction` can be useful to load images with\n * post requests or - in general - through XHR requests, where the src of the\n * image element would be set to a data URI when the content is loaded.\n *\n * @typedef {function(module:ol/Image, string)} LoadFunction\n * @api\n */\n\n/**\n * @constructor\n * @extends {module:ol/ImageBase}\n * @param {module:ol/extent~Extent} extent Extent.\n * @param {number|undefined} resolution Resolution.\n * @param {number} pixelRatio Pixel ratio.\n * @param {string} src Image source URI.\n * @param {?string} crossOrigin Cross origin.\n * @param {module:ol/Image~LoadFunction} imageLoadFunction Image load function.\n */\n\nconst ImageWrapper = function (extent, resolution, pixelRatio, src, crossOrigin, imageLoadFunction) {\n  ImageBase.call(this, extent, resolution, pixelRatio, ImageState.IDLE);\n  /**\n   * @private\n   * @type {string}\n   */\n\n  this.src_ = src;\n  /**\n   * @private\n   * @type {HTMLCanvasElement|Image|HTMLVideoElement}\n   */\n\n  this.image_ = new Image();\n\n  if (crossOrigin !== null) {\n    this.image_.crossOrigin = crossOrigin;\n  }\n  /**\n   * @private\n   * @type {Array.<module:ol/events~EventsKey>}\n   */\n\n\n  this.imageListenerKeys_ = null;\n  /**\n   * @protected\n   * @type {module:ol/ImageState}\n   */\n\n  this.state = ImageState.IDLE;\n  /**\n   * @private\n   * @type {module:ol/Image~LoadFunction}\n   */\n\n  this.imageLoadFunction_ = imageLoadFunction;\n};\n\ninherits(ImageWrapper, ImageBase);\n/**\n * @inheritDoc\n * @api\n */\n\nImageWrapper.prototype.getImage = function () {\n  return this.image_;\n};\n/**\n * Tracks loading or read errors.\n *\n * @private\n */\n\n\nImageWrapper.prototype.handleImageError_ = function () {\n  this.state = ImageState.ERROR;\n  this.unlistenImage_();\n  this.changed();\n};\n/**\n * Tracks successful image load.\n *\n * @private\n */\n\n\nImageWrapper.prototype.handleImageLoad_ = function () {\n  if (this.resolution === undefined) {\n    this.resolution = getHeight(this.extent) / this.image_.height;\n  }\n\n  this.state = ImageState.LOADED;\n  this.unlistenImage_();\n  this.changed();\n};\n/**\n * Load the image or retry if loading previously failed.\n * Loading is taken care of by the tile queue, and calling this method is\n * only needed for preloading or for reloading in case of an error.\n * @override\n * @api\n */\n\n\nImageWrapper.prototype.load = function () {\n  if (this.state == ImageState.IDLE || this.state == ImageState.ERROR) {\n    this.state = ImageState.LOADING;\n    this.changed();\n    this.imageListenerKeys_ = [listenOnce(this.image_, EventType.ERROR, this.handleImageError_, this), listenOnce(this.image_, EventType.LOAD, this.handleImageLoad_, this)];\n    this.imageLoadFunction_(this, this.src_);\n  }\n};\n/**\n * @param {HTMLCanvasElement|Image|HTMLVideoElement} image Image.\n */\n\n\nImageWrapper.prototype.setImage = function (image) {\n  this.image_ = image;\n};\n/**\n * Discards event handlers which listen for load completion or errors.\n *\n * @private\n */\n\n\nImageWrapper.prototype.unlistenImage_ = function () {\n  this.imageListenerKeys_.forEach(unlistenByKey);\n  this.imageListenerKeys_ = null;\n};\n\nexport default ImageWrapper;","map":null,"metadata":{},"sourceType":"module"}