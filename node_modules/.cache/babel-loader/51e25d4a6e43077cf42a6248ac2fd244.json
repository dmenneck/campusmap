{"ast":null,"code":"/**\n * @module ol/control/ZoomSlider\n */\nimport ViewHint from '../ViewHint.js';\nimport Control from './Control.js';\nimport { CLASS_CONTROL, CLASS_UNSELECTABLE } from '../css.js';\nimport { easeOut } from '../easing.js';\nimport { listen, unlistenByKey } from '../events.js';\nimport { stopPropagation } from '../events/Event.js';\nimport EventType from '../events/EventType.js';\nimport { clamp } from '../math.js';\nimport PointerEventType from '../pointer/EventType.js';\nimport PointerEventHandler from '../pointer/PointerEventHandler.js';\n/**\n * The enum for available directions.\n *\n * @enum {number}\n */\n\nvar Direction = {\n  VERTICAL: 0,\n  HORIZONTAL: 1\n};\n/**\n * @typedef {Object} Options\n * @property {string} [className='ol-zoomslider'] CSS class name.\n * @property {number} [duration=200] Animation duration in milliseconds.\n * @property {function(import(\"../MapEvent.js\").default)} [render] Function called when the control\n * should be re-rendered. This is called in a `requestAnimationFrame` callback.\n */\n\n/**\n * @classdesc\n * A slider type of control for zooming.\n *\n * Example:\n *\n *     map.addControl(new ZoomSlider());\n *\n * @api\n */\n\nvar ZoomSlider =\n/*@__PURE__*/\nfunction (Control) {\n  function ZoomSlider(opt_options) {\n    var options = opt_options ? opt_options : {};\n    Control.call(this, {\n      element: document.createElement('div'),\n      render: options.render || render\n    });\n    /**\n      * @type {!Array.<import(\"../events.js\").EventsKey>}\n      * @private\n      */\n\n    this.dragListenerKeys_ = [];\n    /**\n     * Will hold the current resolution of the view.\n     *\n     * @type {number|undefined}\n     * @private\n     */\n\n    this.currentResolution_ = undefined;\n    /**\n     * The direction of the slider. Will be determined from actual display of the\n     * container and defaults to Direction.VERTICAL.\n     *\n     * @type {Direction}\n     * @private\n     */\n\n    this.direction_ = Direction.VERTICAL;\n    /**\n     * @type {boolean}\n     * @private\n     */\n\n    this.dragging_;\n    /**\n     * @type {number}\n     * @private\n     */\n\n    this.heightLimit_ = 0;\n    /**\n     * @type {number}\n     * @private\n     */\n\n    this.widthLimit_ = 0;\n    /**\n     * @type {number|undefined}\n     * @private\n     */\n\n    this.previousX_;\n    /**\n     * @type {number|undefined}\n     * @private\n     */\n\n    this.previousY_;\n    /**\n     * The calculated thumb size (border box plus margins).  Set when initSlider_\n     * is called.\n     * @type {import(\"../size.js\").Size}\n     * @private\n     */\n\n    this.thumbSize_ = null;\n    /**\n     * Whether the slider is initialized.\n     * @type {boolean}\n     * @private\n     */\n\n    this.sliderInitialized_ = false;\n    /**\n     * @type {number}\n     * @private\n     */\n\n    this.duration_ = options.duration !== undefined ? options.duration : 200;\n    var className = options.className !== undefined ? options.className : 'ol-zoomslider';\n    var thumbElement = document.createElement('button');\n    thumbElement.setAttribute('type', 'button');\n    thumbElement.className = className + '-thumb ' + CLASS_UNSELECTABLE;\n    var containerElement = this.element;\n    containerElement.className = className + ' ' + CLASS_UNSELECTABLE + ' ' + CLASS_CONTROL;\n    containerElement.appendChild(thumbElement);\n    /**\n     * @type {PointerEventHandler}\n     * @private\n     */\n\n    this.dragger_ = new PointerEventHandler(containerElement);\n    listen(this.dragger_, PointerEventType.POINTERDOWN, this.handleDraggerStart_, this);\n    listen(this.dragger_, PointerEventType.POINTERMOVE, this.handleDraggerDrag_, this);\n    listen(this.dragger_, PointerEventType.POINTERUP, this.handleDraggerEnd_, this);\n    listen(containerElement, EventType.CLICK, this.handleContainerClick_, this);\n    listen(thumbElement, EventType.CLICK, stopPropagation);\n  }\n\n  if (Control) ZoomSlider.__proto__ = Control;\n  ZoomSlider.prototype = Object.create(Control && Control.prototype);\n  ZoomSlider.prototype.constructor = ZoomSlider;\n  /**\n   * @inheritDoc\n   */\n\n  ZoomSlider.prototype.disposeInternal = function disposeInternal() {\n    this.dragger_.dispose();\n    Control.prototype.disposeInternal.call(this);\n  };\n  /**\n   * @inheritDoc\n   */\n\n\n  ZoomSlider.prototype.setMap = function setMap(map) {\n    Control.prototype.setMap.call(this, map);\n\n    if (map) {\n      map.render();\n    }\n  };\n  /**\n   * Initializes the slider element. This will determine and set this controls\n   * direction_ and also constrain the dragging of the thumb to always be within\n   * the bounds of the container.\n   *\n   * @private\n   */\n\n\n  ZoomSlider.prototype.initSlider_ = function initSlider_() {\n    var container = this.element;\n    var containerSize = {\n      width: container.offsetWidth,\n      height: container.offsetHeight\n    };\n    var thumb =\n    /** @type {HTMLElement} */\n    container.firstElementChild;\n    var computedStyle = getComputedStyle(thumb);\n    var thumbWidth = thumb.offsetWidth + parseFloat(computedStyle['marginRight']) + parseFloat(computedStyle['marginLeft']);\n    var thumbHeight = thumb.offsetHeight + parseFloat(computedStyle['marginTop']) + parseFloat(computedStyle['marginBottom']);\n    this.thumbSize_ = [thumbWidth, thumbHeight];\n\n    if (containerSize.width > containerSize.height) {\n      this.direction_ = Direction.HORIZONTAL;\n      this.widthLimit_ = containerSize.width - thumbWidth;\n    } else {\n      this.direction_ = Direction.VERTICAL;\n      this.heightLimit_ = containerSize.height - thumbHeight;\n    }\n\n    this.sliderInitialized_ = true;\n  };\n  /**\n   * @param {MouseEvent} event The browser event to handle.\n   * @private\n   */\n\n\n  ZoomSlider.prototype.handleContainerClick_ = function handleContainerClick_(event) {\n    var view = this.getMap().getView();\n    var relativePosition = this.getRelativePosition_(event.offsetX - this.thumbSize_[0] / 2, event.offsetY - this.thumbSize_[1] / 2);\n    var resolution = this.getResolutionForPosition_(relativePosition);\n    view.animate({\n      resolution: view.constrainResolution(resolution),\n      duration: this.duration_,\n      easing: easeOut\n    });\n  };\n  /**\n   * Handle dragger start events.\n   * @param {import(\"../pointer/PointerEvent.js\").default} event The drag event.\n   * @private\n   */\n\n\n  ZoomSlider.prototype.handleDraggerStart_ = function handleDraggerStart_(event) {\n    if (!this.dragging_ && event.originalEvent.target === this.element.firstElementChild) {\n      this.getMap().getView().setHint(ViewHint.INTERACTING, 1);\n      this.previousX_ = event.clientX;\n      this.previousY_ = event.clientY;\n      this.dragging_ = true;\n\n      if (this.dragListenerKeys_.length === 0) {\n        var drag = this.handleDraggerDrag_;\n        var end = this.handleDraggerEnd_;\n        this.dragListenerKeys_.push(listen(document, EventType.MOUSEMOVE, drag, this), listen(document, PointerEventType.POINTERMOVE, drag, this), listen(document, EventType.MOUSEUP, end, this), listen(document, PointerEventType.POINTERUP, end, this));\n      }\n    }\n  };\n  /**\n   * Handle dragger drag events.\n   *\n   * @param {import(\"../pointer/PointerEvent.js\").default} event The drag event.\n   * @private\n   */\n\n\n  ZoomSlider.prototype.handleDraggerDrag_ = function handleDraggerDrag_(event) {\n    if (this.dragging_) {\n      var element =\n      /** @type {HTMLElement} */\n      this.element.firstElementChild;\n      var deltaX = event.clientX - this.previousX_ + parseFloat(element.style.left);\n      var deltaY = event.clientY - this.previousY_ + parseFloat(element.style.top);\n      var relativePosition = this.getRelativePosition_(deltaX, deltaY);\n      this.currentResolution_ = this.getResolutionForPosition_(relativePosition);\n      this.getMap().getView().setResolution(this.currentResolution_);\n      this.setThumbPosition_(this.currentResolution_);\n      this.previousX_ = event.clientX;\n      this.previousY_ = event.clientY;\n    }\n  };\n  /**\n   * Handle dragger end events.\n   * @param {import(\"../pointer/PointerEvent.js\").default} event The drag event.\n   * @private\n   */\n\n\n  ZoomSlider.prototype.handleDraggerEnd_ = function handleDraggerEnd_(event) {\n    if (this.dragging_) {\n      var view = this.getMap().getView();\n      view.setHint(ViewHint.INTERACTING, -1);\n      view.animate({\n        resolution: view.constrainResolution(this.currentResolution_),\n        duration: this.duration_,\n        easing: easeOut\n      });\n      this.dragging_ = false;\n      this.previousX_ = undefined;\n      this.previousY_ = undefined;\n      this.dragListenerKeys_.forEach(unlistenByKey);\n      this.dragListenerKeys_.length = 0;\n    }\n  };\n  /**\n   * Positions the thumb inside its container according to the given resolution.\n   *\n   * @param {number} res The res.\n   * @private\n   */\n\n\n  ZoomSlider.prototype.setThumbPosition_ = function setThumbPosition_(res) {\n    var position = this.getPositionForResolution_(res);\n    var thumb =\n    /** @type {HTMLElement} */\n    this.element.firstElementChild;\n\n    if (this.direction_ == Direction.HORIZONTAL) {\n      thumb.style.left = this.widthLimit_ * position + 'px';\n    } else {\n      thumb.style.top = this.heightLimit_ * position + 'px';\n    }\n  };\n  /**\n   * Calculates the relative position of the thumb given x and y offsets.  The\n   * relative position scales from 0 to 1.  The x and y offsets are assumed to be\n   * in pixel units within the dragger limits.\n   *\n   * @param {number} x Pixel position relative to the left of the slider.\n   * @param {number} y Pixel position relative to the top of the slider.\n   * @return {number} The relative position of the thumb.\n   * @private\n   */\n\n\n  ZoomSlider.prototype.getRelativePosition_ = function getRelativePosition_(x, y) {\n    var amount;\n\n    if (this.direction_ === Direction.HORIZONTAL) {\n      amount = x / this.widthLimit_;\n    } else {\n      amount = y / this.heightLimit_;\n    }\n\n    return clamp(amount, 0, 1);\n  };\n  /**\n   * Calculates the corresponding resolution of the thumb given its relative\n   * position (where 0 is the minimum and 1 is the maximum).\n   *\n   * @param {number} position The relative position of the thumb.\n   * @return {number} The corresponding resolution.\n   * @private\n   */\n\n\n  ZoomSlider.prototype.getResolutionForPosition_ = function getResolutionForPosition_(position) {\n    var fn = this.getMap().getView().getResolutionForValueFunction();\n    return fn(1 - position);\n  };\n  /**\n   * Determines the relative position of the slider for the given resolution.  A\n   * relative position of 0 corresponds to the minimum view resolution.  A\n   * relative position of 1 corresponds to the maximum view resolution.\n   *\n   * @param {number} res The resolution.\n   * @return {number} The relative position value (between 0 and 1).\n   * @private\n   */\n\n\n  ZoomSlider.prototype.getPositionForResolution_ = function getPositionForResolution_(res) {\n    var fn = this.getMap().getView().getValueForResolutionFunction();\n    return 1 - fn(res);\n  };\n\n  return ZoomSlider;\n}(Control);\n/**\n * Update the zoomslider element.\n * @param {import(\"../MapEvent.js\").default} mapEvent Map event.\n * @this {ZoomSlider}\n * @api\n */\n\n\nexport function render(mapEvent) {\n  if (!mapEvent.frameState) {\n    return;\n  }\n\n  if (!this.sliderInitialized_) {\n    this.initSlider_();\n  }\n\n  var res = mapEvent.frameState.viewState.resolution;\n\n  if (res !== this.currentResolution_) {\n    this.currentResolution_ = res;\n    this.setThumbPosition_(res);\n  }\n}\nexport default ZoomSlider;","map":{"version":3,"sources":["../../../src/ol/control/ZoomSlider.js"],"names":["const","super","let"],"mappings":"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","sourcesContent":["/**\n * @module ol/control/ZoomSlider\n */\nimport ViewHint from '../ViewHint.js';\nimport Control from './Control.js';\nimport {CLASS_CONTROL, CLASS_UNSELECTABLE} from '../css.js';\nimport {easeOut} from '../easing.js';\nimport {listen, unlistenByKey} from '../events.js';\nimport {stopPropagation} from '../events/Event.js';\nimport EventType from '../events/EventType.js';\nimport {clamp} from '../math.js';\nimport PointerEventType from '../pointer/EventType.js';\nimport PointerEventHandler from '../pointer/PointerEventHandler.js';\n\n\n/**\n * The enum for available directions.\n *\n * @enum {number}\n */\nconst Direction = {\n  VERTICAL: 0,\n  HORIZONTAL: 1\n};\n\n\n/**\n * @typedef {Object} Options\n * @property {string} [className='ol-zoomslider'] CSS class name.\n * @property {number} [duration=200] Animation duration in milliseconds.\n * @property {function(import(\"../MapEvent.js\").default)} [render] Function called when the control\n * should be re-rendered. This is called in a `requestAnimationFrame` callback.\n */\n\n\n/**\n * @classdesc\n * A slider type of control for zooming.\n *\n * Example:\n *\n *     map.addControl(new ZoomSlider());\n *\n * @api\n */\nclass ZoomSlider extends Control {\n\n  /**\n   * @param {Options=} opt_options Zoom slider options.\n   */\n  constructor(opt_options) {\n\n    const options = opt_options ? opt_options : {};\n\n    super({\n      element: document.createElement('div'),\n      render: options.render || render\n    });\n\n    /**\n      * @type {!Array.<import(\"../events.js\").EventsKey>}\n      * @private\n      */\n    this.dragListenerKeys_ = [];\n\n    /**\n     * Will hold the current resolution of the view.\n     *\n     * @type {number|undefined}\n     * @private\n     */\n    this.currentResolution_ = undefined;\n\n    /**\n     * The direction of the slider. Will be determined from actual display of the\n     * container and defaults to Direction.VERTICAL.\n     *\n     * @type {Direction}\n     * @private\n     */\n    this.direction_ = Direction.VERTICAL;\n\n    /**\n     * @type {boolean}\n     * @private\n     */\n    this.dragging_;\n\n    /**\n     * @type {number}\n     * @private\n     */\n    this.heightLimit_ = 0;\n\n    /**\n     * @type {number}\n     * @private\n     */\n    this.widthLimit_ = 0;\n\n    /**\n     * @type {number|undefined}\n     * @private\n     */\n    this.previousX_;\n\n    /**\n     * @type {number|undefined}\n     * @private\n     */\n    this.previousY_;\n\n    /**\n     * The calculated thumb size (border box plus margins).  Set when initSlider_\n     * is called.\n     * @type {import(\"../size.js\").Size}\n     * @private\n     */\n    this.thumbSize_ = null;\n\n    /**\n     * Whether the slider is initialized.\n     * @type {boolean}\n     * @private\n     */\n    this.sliderInitialized_ = false;\n\n    /**\n     * @type {number}\n     * @private\n     */\n    this.duration_ = options.duration !== undefined ? options.duration : 200;\n\n    const className = options.className !== undefined ? options.className : 'ol-zoomslider';\n    const thumbElement = document.createElement('button');\n    thumbElement.setAttribute('type', 'button');\n    thumbElement.className = className + '-thumb ' + CLASS_UNSELECTABLE;\n    const containerElement = this.element;\n    containerElement.className = className + ' ' + CLASS_UNSELECTABLE + ' ' + CLASS_CONTROL;\n    containerElement.appendChild(thumbElement);\n    /**\n     * @type {PointerEventHandler}\n     * @private\n     */\n    this.dragger_ = new PointerEventHandler(containerElement);\n\n    listen(this.dragger_, PointerEventType.POINTERDOWN,\n      this.handleDraggerStart_, this);\n    listen(this.dragger_, PointerEventType.POINTERMOVE,\n      this.handleDraggerDrag_, this);\n    listen(this.dragger_, PointerEventType.POINTERUP,\n      this.handleDraggerEnd_, this);\n\n    listen(containerElement, EventType.CLICK, this.handleContainerClick_, this);\n    listen(thumbElement, EventType.CLICK, stopPropagation);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  disposeInternal() {\n    this.dragger_.dispose();\n    super.disposeInternal();\n  }\n\n  /**\n   * @inheritDoc\n   */\n  setMap(map) {\n    super.setMap(map);\n    if (map) {\n      map.render();\n    }\n  }\n\n  /**\n   * Initializes the slider element. This will determine and set this controls\n   * direction_ and also constrain the dragging of the thumb to always be within\n   * the bounds of the container.\n   *\n   * @private\n   */\n  initSlider_() {\n    const container = this.element;\n    const containerSize = {\n      width: container.offsetWidth, height: container.offsetHeight\n    };\n\n    const thumb = /** @type {HTMLElement} */ (container.firstElementChild);\n    const computedStyle = getComputedStyle(thumb);\n    const thumbWidth = thumb.offsetWidth +\n        parseFloat(computedStyle['marginRight']) +\n        parseFloat(computedStyle['marginLeft']);\n    const thumbHeight = thumb.offsetHeight +\n        parseFloat(computedStyle['marginTop']) +\n        parseFloat(computedStyle['marginBottom']);\n    this.thumbSize_ = [thumbWidth, thumbHeight];\n\n    if (containerSize.width > containerSize.height) {\n      this.direction_ = Direction.HORIZONTAL;\n      this.widthLimit_ = containerSize.width - thumbWidth;\n    } else {\n      this.direction_ = Direction.VERTICAL;\n      this.heightLimit_ = containerSize.height - thumbHeight;\n    }\n    this.sliderInitialized_ = true;\n  }\n\n  /**\n   * @param {MouseEvent} event The browser event to handle.\n   * @private\n   */\n  handleContainerClick_(event) {\n    const view = this.getMap().getView();\n\n    const relativePosition = this.getRelativePosition_(\n      event.offsetX - this.thumbSize_[0] / 2,\n      event.offsetY - this.thumbSize_[1] / 2);\n\n    const resolution = this.getResolutionForPosition_(relativePosition);\n\n    view.animate({\n      resolution: view.constrainResolution(resolution),\n      duration: this.duration_,\n      easing: easeOut\n    });\n  }\n\n  /**\n   * Handle dragger start events.\n   * @param {import(\"../pointer/PointerEvent.js\").default} event The drag event.\n   * @private\n   */\n  handleDraggerStart_(event) {\n    if (!this.dragging_ && event.originalEvent.target === this.element.firstElementChild) {\n      this.getMap().getView().setHint(ViewHint.INTERACTING, 1);\n      this.previousX_ = event.clientX;\n      this.previousY_ = event.clientY;\n      this.dragging_ = true;\n\n      if (this.dragListenerKeys_.length === 0) {\n        const drag = this.handleDraggerDrag_;\n        const end = this.handleDraggerEnd_;\n        this.dragListenerKeys_.push(\n          listen(document, EventType.MOUSEMOVE, drag, this),\n          listen(document, PointerEventType.POINTERMOVE, drag, this),\n          listen(document, EventType.MOUSEUP, end, this),\n          listen(document, PointerEventType.POINTERUP, end, this)\n        );\n      }\n    }\n  }\n\n  /**\n   * Handle dragger drag events.\n   *\n   * @param {import(\"../pointer/PointerEvent.js\").default} event The drag event.\n   * @private\n   */\n  handleDraggerDrag_(event) {\n    if (this.dragging_) {\n      const element = /** @type {HTMLElement} */ (this.element.firstElementChild);\n      const deltaX = event.clientX - this.previousX_ + parseFloat(element.style.left);\n      const deltaY = event.clientY - this.previousY_ + parseFloat(element.style.top);\n      const relativePosition = this.getRelativePosition_(deltaX, deltaY);\n      this.currentResolution_ = this.getResolutionForPosition_(relativePosition);\n      this.getMap().getView().setResolution(this.currentResolution_);\n      this.setThumbPosition_(this.currentResolution_);\n      this.previousX_ = event.clientX;\n      this.previousY_ = event.clientY;\n    }\n  }\n\n  /**\n   * Handle dragger end events.\n   * @param {import(\"../pointer/PointerEvent.js\").default} event The drag event.\n   * @private\n   */\n  handleDraggerEnd_(event) {\n    if (this.dragging_) {\n      const view = this.getMap().getView();\n      view.setHint(ViewHint.INTERACTING, -1);\n\n      view.animate({\n        resolution: view.constrainResolution(this.currentResolution_),\n        duration: this.duration_,\n        easing: easeOut\n      });\n\n      this.dragging_ = false;\n      this.previousX_ = undefined;\n      this.previousY_ = undefined;\n      this.dragListenerKeys_.forEach(unlistenByKey);\n      this.dragListenerKeys_.length = 0;\n    }\n  }\n\n  /**\n   * Positions the thumb inside its container according to the given resolution.\n   *\n   * @param {number} res The res.\n   * @private\n   */\n  setThumbPosition_(res) {\n    const position = this.getPositionForResolution_(res);\n    const thumb = /** @type {HTMLElement} */ (this.element.firstElementChild);\n\n    if (this.direction_ == Direction.HORIZONTAL) {\n      thumb.style.left = this.widthLimit_ * position + 'px';\n    } else {\n      thumb.style.top = this.heightLimit_ * position + 'px';\n    }\n  }\n\n  /**\n   * Calculates the relative position of the thumb given x and y offsets.  The\n   * relative position scales from 0 to 1.  The x and y offsets are assumed to be\n   * in pixel units within the dragger limits.\n   *\n   * @param {number} x Pixel position relative to the left of the slider.\n   * @param {number} y Pixel position relative to the top of the slider.\n   * @return {number} The relative position of the thumb.\n   * @private\n   */\n  getRelativePosition_(x, y) {\n    let amount;\n    if (this.direction_ === Direction.HORIZONTAL) {\n      amount = x / this.widthLimit_;\n    } else {\n      amount = y / this.heightLimit_;\n    }\n    return clamp(amount, 0, 1);\n  }\n\n  /**\n   * Calculates the corresponding resolution of the thumb given its relative\n   * position (where 0 is the minimum and 1 is the maximum).\n   *\n   * @param {number} position The relative position of the thumb.\n   * @return {number} The corresponding resolution.\n   * @private\n   */\n  getResolutionForPosition_(position) {\n    const fn = this.getMap().getView().getResolutionForValueFunction();\n    return fn(1 - position);\n  }\n\n  /**\n   * Determines the relative position of the slider for the given resolution.  A\n   * relative position of 0 corresponds to the minimum view resolution.  A\n   * relative position of 1 corresponds to the maximum view resolution.\n   *\n   * @param {number} res The resolution.\n   * @return {number} The relative position value (between 0 and 1).\n   * @private\n   */\n  getPositionForResolution_(res) {\n    const fn = this.getMap().getView().getValueForResolutionFunction();\n    return 1 - fn(res);\n  }\n}\n\n\n/**\n * Update the zoomslider element.\n * @param {import(\"../MapEvent.js\").default} mapEvent Map event.\n * @this {ZoomSlider}\n * @api\n */\nexport function render(mapEvent) {\n  if (!mapEvent.frameState) {\n    return;\n  }\n  if (!this.sliderInitialized_) {\n    this.initSlider_();\n  }\n  const res = mapEvent.frameState.viewState.resolution;\n  if (res !== this.currentResolution_) {\n    this.currentResolution_ = res;\n    this.setThumbPosition_(res);\n  }\n}\n\n\nexport default ZoomSlider;\n"]},"metadata":{},"sourceType":"module"}