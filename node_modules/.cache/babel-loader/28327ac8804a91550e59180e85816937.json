{"ast":null,"code":"/**\n * @module ol/ImageCanvas\n */\nimport ImageBase from './ImageBase.js';\nimport ImageState from './ImageState.js';\n/**\n * A function that is called to trigger asynchronous canvas drawing.  It is\n * called with a \"done\" callback that should be called when drawing is done.\n * If any error occurs during drawing, the \"done\" callback should be called with\n * that error.\n *\n * @typedef {function(function(Error=))} Loader\n */\n\nvar ImageCanvas =\n/*@__PURE__*/\nfunction (ImageBase) {\n  function ImageCanvas(extent, resolution, pixelRatio, canvas, opt_loader) {\n    var state = opt_loader !== undefined ? ImageState.IDLE : ImageState.LOADED;\n    ImageBase.call(this, extent, resolution, pixelRatio, state);\n    /**\n     * Optional canvas loader function.\n     * @type {?Loader}\n     * @private\n     */\n\n    this.loader_ = opt_loader !== undefined ? opt_loader : null;\n    /**\n     * @private\n     * @type {HTMLCanvasElement}\n     */\n\n    this.canvas_ = canvas;\n    /**\n     * @private\n     * @type {Error}\n     */\n\n    this.error_ = null;\n  }\n\n  if (ImageBase) ImageCanvas.__proto__ = ImageBase;\n  ImageCanvas.prototype = Object.create(ImageBase && ImageBase.prototype);\n  ImageCanvas.prototype.constructor = ImageCanvas;\n  /**\n   * Get any error associated with asynchronous rendering.\n   * @return {Error} Any error that occurred during rendering.\n   */\n\n  ImageCanvas.prototype.getError = function getError() {\n    return this.error_;\n  };\n  /**\n   * Handle async drawing complete.\n   * @param {Error=} err Any error during drawing.\n   * @private\n   */\n\n\n  ImageCanvas.prototype.handleLoad_ = function handleLoad_(err) {\n    if (err) {\n      this.error_ = err;\n      this.state = ImageState.ERROR;\n    } else {\n      this.state = ImageState.LOADED;\n    }\n\n    this.changed();\n  };\n  /**\n   * @inheritDoc\n   */\n\n\n  ImageCanvas.prototype.load = function load() {\n    if (this.state == ImageState.IDLE) {\n      this.state = ImageState.LOADING;\n      this.changed();\n      this.loader_(this.handleLoad_.bind(this));\n    }\n  };\n  /**\n   * @return {HTMLCanvasElement} Canvas element.\n   */\n\n\n  ImageCanvas.prototype.getImage = function getImage() {\n    return this.canvas_;\n  };\n\n  return ImageCanvas;\n}(ImageBase);\n\nexport default ImageCanvas;","map":{"version":3,"sources":["../../src/ol/ImageCanvas.js"],"names":["const","super"],"mappings":"AAAA;;;AAGA,OAAO,SAAP,MAAsB,gBAAtB;AACA,OAAO,UAAP,MAAuB,iBAAvB;;;;;;;;;;AAaA,IAAM,WAAW;AAAkB;AAAA,UAAA,SAAA,EAAA;AAUjC,WAAA,WAAA,CAAY,MAAZ,EAAoB,UAApB,EAAgC,UAAhC,EAA4C,MAA5C,EAAoD,UAApD,EAAgE;AAE9DA,QAAM,KAAK,GAAG,UAAU,KAAK,SAAf,GAA2B,UAAU,CAAC,IAAtC,GAA6C,UAAU,CAAC,MAAtEA;AAEAC,IAAAA,SAAAA,CAAAA,IAAAA,CAAK,IAALA,EAAM,MAANA,EAAc,UAAdA,EAA0B,UAA1BA,EAAsC,KAAtCA;;;;;;;AAOA,SAAK,OAAL,GAAe,UAAU,KAAK,SAAf,GAA2B,UAA3B,GAAwC,IAAvD;;;;;;AAMA,SAAK,OAAL,GAAe,MAAf;;;;;;AAMA,SAAK,MAAL,GAAc,IAAd;;;;;sCAED,W;;;;;;wBAMD,Q,GAAA,SAAA,QAAA,GAAW;AACT,WAAO,KAAK,MAAZ;AACD,G;;;;;;;;wBAOD,W,GAAA,SAAA,WAAA,CAAY,GAAZ,EAAiB;AACf,QAAI,GAAJ,EAAS;AACP,WAAK,MAAL,GAAc,GAAd;AACA,WAAK,KAAL,GAAa,UAAU,CAAC,KAAxB;AACD,KAHD,MAGO;AACL,WAAK,KAAL,GAAa,UAAU,CAAC,MAAxB;AACD;;AACD,SAAK,OAAL;AACD,G;;;;;;wBAKD,I,GAAA,SAAA,IAAA,GAAO;AACL,QAAI,KAAK,KAAL,IAAc,UAAU,CAAC,IAA7B,EAAmC;AACjC,WAAK,KAAL,GAAa,UAAU,CAAC,OAAxB;AACA,WAAK,OAAL;AACA,WAAK,OAAL,CAAa,KAAK,WAAL,CAAiB,IAAjB,CAAsB,IAAtB,CAAb;AACD;AACF,G;;;;;;wBAKD,Q,GAAA,SAAA,QAAA,GAAW;AACT,WAAO,KAAK,OAAZ;AACD,G;;;CA5EgC,CAAT,SAAS,CAAnC;;AAgFA,eAAe,WAAf","sourcesContent":["/**\n * @module ol/ImageCanvas\n */\nimport ImageBase from './ImageBase.js';\nimport ImageState from './ImageState.js';\n\n\n/**\n * A function that is called to trigger asynchronous canvas drawing.  It is\n * called with a \"done\" callback that should be called when drawing is done.\n * If any error occurs during drawing, the \"done\" callback should be called with\n * that error.\n *\n * @typedef {function(function(Error=))} Loader\n */\n\n\nclass ImageCanvas extends ImageBase {\n\n  /**\n   * @param {import(\"./extent.js\").Extent} extent Extent.\n   * @param {number} resolution Resolution.\n   * @param {number} pixelRatio Pixel ratio.\n   * @param {HTMLCanvasElement} canvas Canvas.\n   * @param {Loader=} opt_loader Optional loader function to\n   *     support asynchronous canvas drawing.\n   */\n  constructor(extent, resolution, pixelRatio, canvas, opt_loader) {\n\n    const state = opt_loader !== undefined ? ImageState.IDLE : ImageState.LOADED;\n\n    super(extent, resolution, pixelRatio, state);\n\n    /**\n     * Optional canvas loader function.\n     * @type {?Loader}\n     * @private\n     */\n    this.loader_ = opt_loader !== undefined ? opt_loader : null;\n\n    /**\n     * @private\n     * @type {HTMLCanvasElement}\n     */\n    this.canvas_ = canvas;\n\n    /**\n     * @private\n     * @type {Error}\n     */\n    this.error_ = null;\n\n  }\n\n  /**\n   * Get any error associated with asynchronous rendering.\n   * @return {Error} Any error that occurred during rendering.\n   */\n  getError() {\n    return this.error_;\n  }\n\n  /**\n   * Handle async drawing complete.\n   * @param {Error=} err Any error during drawing.\n   * @private\n   */\n  handleLoad_(err) {\n    if (err) {\n      this.error_ = err;\n      this.state = ImageState.ERROR;\n    } else {\n      this.state = ImageState.LOADED;\n    }\n    this.changed();\n  }\n\n  /**\n   * @inheritDoc\n   */\n  load() {\n    if (this.state == ImageState.IDLE) {\n      this.state = ImageState.LOADING;\n      this.changed();\n      this.loader_(this.handleLoad_.bind(this));\n    }\n  }\n\n  /**\n   * @return {HTMLCanvasElement} Canvas element.\n   */\n  getImage() {\n    return this.canvas_;\n  }\n}\n\n\nexport default ImageCanvas;\n"]},"metadata":{},"sourceType":"module"}