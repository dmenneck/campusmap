{"ast":null,"code":"/**\n * ag-grid-community - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components\n * @version v21.2.2\n * @link http://www.ag-grid.com/\n * @license MIT\n */\n\"use strict\";\n\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nvar __metadata = this && this.__metadata || function (k, v) {\n  if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar csvCreator_1 = require(\"./exporter/csvCreator\");\n\nvar rowRenderer_1 = require(\"./rendering/rowRenderer\");\n\nvar filterManager_1 = require(\"./filter/filterManager\");\n\nvar columnController_1 = require(\"./columnController/columnController\");\n\nvar selectionController_1 = require(\"./selectionController\");\n\nvar gridOptionsWrapper_1 = require(\"./gridOptionsWrapper\");\n\nvar valueService_1 = require(\"./valueService/valueService\");\n\nvar eventService_1 = require(\"./eventService\");\n\nvar constants_1 = require(\"./constants\");\n\nvar context_1 = require(\"./context/context\");\n\nvar sortController_1 = require(\"./sortController\");\n\nvar focusedCellController_1 = require(\"./focusedCellController\");\n\nvar cellRendererFactory_1 = require(\"./rendering/cellRendererFactory\");\n\nvar paginationProxy_1 = require(\"./rowModels/paginationProxy\");\n\nvar immutableService_1 = require(\"./rowModels/clientSide/immutableService\");\n\nvar valueCache_1 = require(\"./valueService/valueCache\");\n\nvar alignedGridsService_1 = require(\"./alignedGridsService\");\n\nvar pinnedRowModel_1 = require(\"./rowModels/pinnedRowModel\");\n\nvar animationFrameService_1 = require(\"./misc/animationFrameService\");\n\nvar utils_1 = require(\"./utils\");\n\nvar GridApi =\n/** @class */\nfunction () {\n  function GridApi() {\n    this.detailGridInfoMap = {};\n  }\n\n  GridApi.prototype.registerGridComp = function (gridPanel) {\n    this.gridPanel = gridPanel;\n  };\n\n  GridApi.prototype.registerGridCore = function (gridCore) {\n    this.gridCore = gridCore;\n  };\n\n  GridApi.prototype.registerHeaderRootComp = function (headerRootComp) {\n    this.headerRootComp = headerRootComp;\n  };\n\n  GridApi.prototype.init = function () {\n    switch (this.rowModel.getType()) {\n      case constants_1.Constants.ROW_MODEL_TYPE_CLIENT_SIDE:\n        this.clientSideRowModel = this.rowModel;\n        break;\n\n      case constants_1.Constants.ROW_MODEL_TYPE_INFINITE:\n        this.infinitePageRowModel = this.rowModel;\n        break;\n\n      case constants_1.Constants.ROW_MODEL_TYPE_SERVER_SIDE:\n        this.serverSideRowModel = this.rowModel;\n        break;\n    }\n  };\n  /** Used internally by grid. Not intended to be used by the client. Interface may change between releases. */\n\n\n  GridApi.prototype.__getAlignedGridService = function () {\n    return this.alignedGridsService;\n  };\n\n  GridApi.prototype.addDetailGridInfo = function (id, gridInfo) {\n    this.detailGridInfoMap[id] = gridInfo;\n  };\n\n  GridApi.prototype.removeDetailGridInfo = function (id) {\n    this.detailGridInfoMap[id] = undefined;\n  };\n\n  GridApi.prototype.getDetailGridInfo = function (id) {\n    return this.detailGridInfoMap[id];\n  };\n\n  GridApi.prototype.forEachDetailGridInfo = function (callback) {\n    var index = 0;\n\n    utils_1._.iterateObject(this.detailGridInfoMap, function (id, gridInfo) {\n      // check for undefined, as old references will still be lying around\n      if (utils_1._.exists(gridInfo)) {\n        callback(gridInfo, index);\n        index++;\n      }\n    });\n  };\n\n  GridApi.prototype.getDataAsCsv = function (params) {\n    return this.csvCreator.getDataAsCsv(params);\n  };\n\n  GridApi.prototype.exportDataAsCsv = function (params) {\n    this.csvCreator.exportDataAsCsv(params);\n  };\n\n  GridApi.prototype.getDataAsExcel = function (params) {\n    if (!this.excelCreator) {\n      console.warn('ag-Grid: Excel export is only available in ag-Grid Enterprise');\n    }\n\n    return this.excelCreator.getDataAsExcelXml(params);\n  };\n\n  GridApi.prototype.exportDataAsExcel = function (params) {\n    if (!this.excelCreator) {\n      console.warn('ag-Grid: Excel export is only available in ag-Grid Enterprise');\n    }\n\n    this.excelCreator.exportDataAsExcel(params);\n  };\n  /** @deprecated */\n\n\n  GridApi.prototype.setEnterpriseDatasource = function (datasource) {\n    console.warn(\"ag-grid: since version 18.x, api.setEnterpriseDatasource() should be replaced with api.setServerSideDatasource()\");\n    this.setServerSideDatasource(datasource);\n  };\n\n  GridApi.prototype.setServerSideDatasource = function (datasource) {\n    if (this.gridOptionsWrapper.isRowModelServerSide()) {\n      // should really have an IEnterpriseRowModel interface, so we are not casting to any\n      this.rowModel.setDatasource(datasource);\n    } else {\n      console.warn(\"ag-Grid: you can only use an enterprise datasource when gridOptions.rowModelType is '\" + constants_1.Constants.ROW_MODEL_TYPE_SERVER_SIDE + \"'\");\n    }\n  };\n\n  GridApi.prototype.setDatasource = function (datasource) {\n    if (this.gridOptionsWrapper.isRowModelInfinite()) {\n      this.rowModel.setDatasource(datasource);\n    } else {\n      console.warn(\"ag-Grid: you can only use a datasource when gridOptions.rowModelType is '\" + constants_1.Constants.ROW_MODEL_TYPE_INFINITE + \"'\");\n    }\n  };\n\n  GridApi.prototype.setViewportDatasource = function (viewportDatasource) {\n    if (this.gridOptionsWrapper.isRowModelViewport()) {\n      // this is bad coding, because it's using an interface that's exposed in the enterprise.\n      // really we should create an interface in the core for viewportDatasource and let\n      // the enterprise implement it, rather than casting to 'any' here\n      this.rowModel.setViewportDatasource(viewportDatasource);\n    } else {\n      console.warn(\"ag-Grid: you can only use a viewport datasource when gridOptions.rowModelType is '\" + constants_1.Constants.ROW_MODEL_TYPE_VIEWPORT + \"'\");\n    }\n  };\n\n  GridApi.prototype.setRowData = function (rowData) {\n    if (this.gridOptionsWrapper.isRowModelDefault()) {\n      if (this.gridOptionsWrapper.isDeltaRowDataMode()) {\n        var _a = this.immutableService.createTransactionForRowData(rowData),\n            transaction = _a[0],\n            orderIdMap = _a[1];\n\n        this.clientSideRowModel.updateRowData(transaction, orderIdMap); // need to force updating of full width rows - note this wouldn't be necessary the full width cell comp listened\n        // to the data change event on the row node and refreshed itself.\n\n        this.rowRenderer.refreshFullWidthRows();\n      } else {\n        this.selectionController.reset();\n        this.clientSideRowModel.setRowData(rowData);\n      }\n    } else {\n      console.warn('cannot call setRowData unless using normal row model');\n    }\n  };\n  /** @deprecated */\n\n\n  GridApi.prototype.setFloatingTopRowData = function (rows) {\n    console.warn('ag-Grid: since v12, api.setFloatingTopRowData() is now api.setPinnedTopRowData()');\n    this.setPinnedTopRowData(rows);\n  };\n  /** @deprecated */\n\n\n  GridApi.prototype.setFloatingBottomRowData = function (rows) {\n    console.warn('ag-Grid: since v12, api.setFloatingBottomRowData() is now api.setPinnedBottomRowData()');\n    this.setPinnedBottomRowData(rows);\n  };\n  /** @deprecated */\n\n\n  GridApi.prototype.getFloatingTopRowCount = function () {\n    console.warn('ag-Grid: since v12, api.getFloatingTopRowCount() is now api.getPinnedTopRowCount()');\n    return this.getPinnedTopRowCount();\n  };\n  /** @deprecated */\n\n\n  GridApi.prototype.getFloatingBottomRowCount = function () {\n    console.warn('ag-Grid: since v12, api.getFloatingBottomRowCount() is now api.getPinnedBottomRowCount()');\n    return this.getPinnedBottomRowCount();\n  };\n  /** @deprecated */\n\n\n  GridApi.prototype.getFloatingTopRow = function (index) {\n    console.warn('ag-Grid: since v12, api.getFloatingTopRow() is now api.getPinnedTopRow()');\n    return this.getPinnedTopRow(index);\n  };\n  /** @deprecated */\n\n\n  GridApi.prototype.getFloatingBottomRow = function (index) {\n    console.warn('ag-Grid: since v12, api.getFloatingBottomRow() is now api.getPinnedBottomRow()');\n    return this.getPinnedBottomRow(index);\n  };\n\n  GridApi.prototype.setPinnedTopRowData = function (rows) {\n    this.pinnedRowModel.setPinnedTopRowData(rows);\n  };\n\n  GridApi.prototype.setPinnedBottomRowData = function (rows) {\n    this.pinnedRowModel.setPinnedBottomRowData(rows);\n  };\n\n  GridApi.prototype.getPinnedTopRowCount = function () {\n    return this.pinnedRowModel.getPinnedTopRowCount();\n  };\n\n  GridApi.prototype.getPinnedBottomRowCount = function () {\n    return this.pinnedRowModel.getPinnedBottomRowCount();\n  };\n\n  GridApi.prototype.getPinnedTopRow = function (index) {\n    return this.pinnedRowModel.getPinnedTopRow(index);\n  };\n\n  GridApi.prototype.getPinnedBottomRow = function (index) {\n    return this.pinnedRowModel.getPinnedBottomRow(index);\n  };\n\n  GridApi.prototype.setColumnDefs = function (colDefs, source) {\n    if (source === void 0) {\n      source = \"api\";\n    }\n\n    this.columnController.setColumnDefs(colDefs, source);\n  };\n\n  GridApi.prototype.expireValueCache = function () {\n    this.valueCache.expire();\n  };\n\n  GridApi.prototype.getVerticalPixelRange = function () {\n    return this.gridPanel.getVScrollPosition();\n  };\n\n  GridApi.prototype.getHorizontalPixelRange = function () {\n    return this.gridPanel.getHScrollPosition();\n  };\n\n  GridApi.prototype.setAlwaysShowVerticalScroll = function (show) {\n    this.gridOptionsWrapper.setProperty('alwaysShowVerticalScroll', show);\n  };\n\n  GridApi.prototype.refreshToolPanel = function () {\n    this.gridCore.refreshSideBar();\n  };\n\n  GridApi.prototype.refreshCells = function (params) {\n    if (params === void 0) {\n      params = {};\n    }\n\n    if (Array.isArray(params)) {\n      // the old version of refreshCells() took an array of rowNodes for the first argument\n      console.warn('since ag-Grid v11.1, refreshCells() now takes parameters, please see the documentation.');\n      return;\n    }\n\n    this.rowRenderer.refreshCells(params);\n  };\n\n  GridApi.prototype.flashCells = function (params) {\n    if (params === void 0) {\n      params = {};\n    }\n\n    this.rowRenderer.flashCells(params);\n  };\n\n  GridApi.prototype.redrawRows = function (params) {\n    if (params === void 0) {\n      params = {};\n    }\n\n    if (params && params.rowNodes) {\n      this.rowRenderer.redrawRows(params.rowNodes);\n    } else {\n      this.rowRenderer.redrawAfterModelUpdate();\n    }\n  };\n\n  GridApi.prototype.timeFullRedraw = function (count) {\n    if (count === void 0) {\n      count = 1;\n    }\n\n    var iterationCount = 0;\n    var totalProcessing = 0;\n    var totalReflow = 0;\n    var that = this;\n    doOneIteration();\n\n    function doOneIteration() {\n      var start = new Date().getTime();\n      that.rowRenderer.redrawAfterModelUpdate();\n      var endProcessing = new Date().getTime();\n      window.setTimeout(function () {\n        var endReflow = new Date().getTime();\n        var durationProcessing = endProcessing - start;\n        var durationReflow = endReflow - endProcessing; // tslint:disable-next-line\n\n        console.log('duration:  processing = ' + durationProcessing + 'ms, reflow = ' + durationReflow + 'ms');\n        iterationCount++;\n        totalProcessing += durationProcessing;\n        totalReflow += durationReflow;\n\n        if (iterationCount < count) {\n          // wait for 1s between tests\n          window.setTimeout(doOneIteration, 1000);\n        } else {\n          finish();\n        }\n      }, 0);\n    }\n\n    function finish() {\n      // tslint:disable-next-line\n      console.log('tests complete. iteration count = ' + iterationCount); // tslint:disable-next-line\n\n      console.log('average processing = ' + totalProcessing / iterationCount + 'ms'); // tslint:disable-next-line\n\n      console.log('average reflow = ' + totalReflow / iterationCount + 'ms');\n    }\n  };\n  /** @deprecated */\n\n\n  GridApi.prototype.refreshView = function () {\n    console.warn('ag-Grid: since v11.1, refreshView() is deprecated, please call refreshCells() or redrawRows() instead');\n    this.redrawRows();\n  }; //** @deprecated */\n\n\n  GridApi.prototype.refreshRows = function (rowNodes) {\n    console.warn('since ag-Grid v11.1, refreshRows() is deprecated, please use refreshCells({rowNodes: rows}) or redrawRows({rowNodes: rows}) instead');\n    this.refreshCells({\n      rowNodes: rowNodes\n    });\n  };\n  /** @deprecated */\n\n\n  GridApi.prototype.rowDataChanged = function (rows) {\n    console.warn('ag-Grid: rowDataChanged is deprecated, either call refreshView() to refresh everything, or call rowNode.setRowData(newData) to set value on a particular node');\n    this.redrawRows();\n  };\n  /** @deprecated */\n\n\n  GridApi.prototype.softRefreshView = function () {\n    console.error('ag-Grid: since v16, softRefreshView() is no longer supported. Please check the documentation on how to refresh.');\n  };\n  /** @deprecated */\n\n\n  GridApi.prototype.refreshGroupRows = function () {\n    console.warn('ag-Grid: since v11.1, refreshGroupRows() is no longer supported, call refreshCells() instead. ' + 'Because refreshCells() now does dirty checking, it will only refresh cells that have changed, so it should ' + 'not be necessary to only refresh the group rows.');\n    this.refreshCells();\n  };\n\n  GridApi.prototype.setFunctionsReadOnly = function (readOnly) {\n    this.gridOptionsWrapper.setProperty('functionsReadOnly', readOnly);\n  };\n\n  GridApi.prototype.refreshHeader = function () {\n    this.headerRootComp.refreshHeader();\n    this.gridPanel.setHeaderAndFloatingHeights();\n  };\n\n  GridApi.prototype.isAnyFilterPresent = function () {\n    return this.filterManager.isAnyFilterPresent();\n  };\n\n  GridApi.prototype.isAdvancedFilterPresent = function () {\n    console.warn('ag-Grid: isAdvancedFilterPresent() is deprecated, please use isColumnFilterPresent()');\n    return this.isColumnFilterPresent();\n  };\n\n  GridApi.prototype.isColumnFilterPresent = function () {\n    return this.filterManager.isAdvancedFilterPresent();\n  };\n\n  GridApi.prototype.isQuickFilterPresent = function () {\n    return this.filterManager.isQuickFilterPresent();\n  };\n\n  GridApi.prototype.getModel = function () {\n    return this.rowModel;\n  };\n\n  GridApi.prototype.setRowNodeExpanded = function (rowNode, expanded) {\n    if (rowNode) {\n      rowNode.setExpanded(expanded);\n    }\n  };\n\n  GridApi.prototype.onGroupExpandedOrCollapsed = function (deprecated_refreshFromIndex) {\n    if (utils_1._.missing(this.clientSideRowModel)) {\n      console.warn('ag-Grid: cannot call onGroupExpandedOrCollapsed unless using normal row model');\n    }\n\n    if (utils_1._.exists(deprecated_refreshFromIndex)) {\n      console.warn('ag-Grid: api.onGroupExpandedOrCollapsed - refreshFromIndex parameter is no longer used, the grid will refresh all rows');\n    } // we don't really want the user calling this if only one rowNode was expanded, instead they should be\n    // calling rowNode.setExpanded(boolean) - this way we do a 'keepRenderedRows=false' so that the whole\n    // grid gets refreshed again - otherwise the row with the rowNodes that were changed won't get updated,\n    // and thus the expand icon in the group cell won't get 'opened' or 'closed'.\n\n\n    this.clientSideRowModel.refreshModel({\n      step: constants_1.Constants.STEP_MAP\n    });\n  };\n\n  GridApi.prototype.refreshInMemoryRowModel = function (step) {\n    console.warn(\"ag-grid: since version 18.x, api.refreshInMemoryRowModel() should be replaced with api.refreshClientSideRowModel()\");\n    this.refreshClientSideRowModel(step);\n  };\n\n  GridApi.prototype.refreshClientSideRowModel = function (step) {\n    if (utils_1._.missing(this.clientSideRowModel)) {\n      console.warn('cannot call refreshClientSideRowModel unless using normal row model');\n    }\n\n    var paramsStep = constants_1.Constants.STEP_EVERYTHING;\n    var stepsMapped = {\n      group: constants_1.Constants.STEP_EVERYTHING,\n      filter: constants_1.Constants.STEP_FILTER,\n      map: constants_1.Constants.STEP_MAP,\n      aggregate: constants_1.Constants.STEP_AGGREGATE,\n      sort: constants_1.Constants.STEP_SORT,\n      pivot: constants_1.Constants.STEP_PIVOT\n    };\n\n    if (utils_1._.exists(step)) {\n      paramsStep = stepsMapped[step];\n    }\n\n    if (utils_1._.missing(paramsStep)) {\n      console.error(\"ag-Grid: invalid step \" + step + \", available steps are \" + Object.keys(stepsMapped).join(', '));\n      return;\n    }\n\n    var modelParams = {\n      step: paramsStep,\n      keepRenderedRows: true,\n      animate: true,\n      keepEditingRows: true\n    };\n    this.clientSideRowModel.refreshModel(modelParams);\n  };\n\n  GridApi.prototype.isAnimationFrameQueueEmpty = function () {\n    return this.animationFrameService.isQueueEmpty();\n  };\n\n  GridApi.prototype.getRowNode = function (id) {\n    return this.rowModel.getRowNode(id);\n  };\n\n  GridApi.prototype.expandAll = function () {\n    if (utils_1._.missing(this.clientSideRowModel)) {\n      console.warn('ag-Grid: cannot call expandAll unless using normal row model');\n      return;\n    }\n\n    this.clientSideRowModel.expandOrCollapseAll(true);\n  };\n\n  GridApi.prototype.collapseAll = function () {\n    if (utils_1._.missing(this.clientSideRowModel)) {\n      console.warn('ag-Grid: cannot call collapseAll unless using normal row model');\n      return;\n    }\n\n    this.clientSideRowModel.expandOrCollapseAll(false);\n  };\n\n  GridApi.prototype.addVirtualRowListener = function (eventName, rowIndex, callback) {\n    if (typeof eventName !== 'string') {\n      console.warn('ag-Grid: addVirtualRowListener is deprecated, please use addRenderedRowListener.');\n    }\n\n    this.addRenderedRowListener(eventName, rowIndex, callback);\n  };\n\n  GridApi.prototype.addRenderedRowListener = function (eventName, rowIndex, callback) {\n    if (eventName === 'virtualRowSelected') {\n      console.warn(\"ag-Grid: event virtualRowSelected is deprecated, to register for individual row\\n                selection events, add a listener directly to the row node.\");\n    }\n\n    this.rowRenderer.addRenderedRowListener(eventName, rowIndex, callback);\n  };\n\n  GridApi.prototype.setQuickFilter = function (newFilter) {\n    this.filterManager.setQuickFilter(newFilter);\n  };\n\n  GridApi.prototype.selectIndex = function (index, tryMulti, suppressEvents) {\n    console.warn('ag-Grid: do not use api for selection, call node.setSelected(value) instead');\n\n    if (suppressEvents) {\n      console.warn('ag-Grid: suppressEvents is no longer supported, stop listening for the event if you no longer want it');\n    }\n\n    this.selectionController.selectIndex(index, tryMulti);\n  };\n\n  GridApi.prototype.deselectIndex = function (index, suppressEvents) {\n    if (suppressEvents === void 0) {\n      suppressEvents = false;\n    }\n\n    console.warn('ag-Grid: do not use api for selection, call node.setSelected(value) instead');\n\n    if (suppressEvents) {\n      console.warn('ag-Grid: suppressEvents is no longer supported, stop listening for the event if you no longer want it');\n    }\n\n    this.selectionController.deselectIndex(index);\n  };\n\n  GridApi.prototype.selectNode = function (node, tryMulti, suppressEvents) {\n    if (tryMulti === void 0) {\n      tryMulti = false;\n    }\n\n    if (suppressEvents === void 0) {\n      suppressEvents = false;\n    }\n\n    console.warn('ag-Grid: API for selection is deprecated, call node.setSelected(value) instead');\n\n    if (suppressEvents) {\n      console.warn('ag-Grid: suppressEvents is no longer supported, stop listening for the event if you no longer want it');\n    }\n\n    node.setSelectedParams({\n      newValue: true,\n      clearSelection: !tryMulti\n    });\n  };\n\n  GridApi.prototype.deselectNode = function (node, suppressEvents) {\n    if (suppressEvents === void 0) {\n      suppressEvents = false;\n    }\n\n    console.warn('ag-Grid: API for selection is deprecated, call node.setSelected(value) instead');\n\n    if (suppressEvents) {\n      console.warn('ag-Grid: suppressEvents is no longer supported, stop listening for the event if you no longer want it');\n    }\n\n    node.setSelectedParams({\n      newValue: false\n    });\n  };\n\n  GridApi.prototype.selectAll = function () {\n    this.selectionController.selectAllRowNodes();\n  };\n\n  GridApi.prototype.deselectAll = function () {\n    this.selectionController.deselectAllRowNodes();\n  };\n\n  GridApi.prototype.selectAllFiltered = function () {\n    this.selectionController.selectAllRowNodes(true);\n  };\n\n  GridApi.prototype.deselectAllFiltered = function () {\n    this.selectionController.deselectAllRowNodes(true);\n  };\n\n  GridApi.prototype.recomputeAggregates = function () {\n    if (utils_1._.missing(this.clientSideRowModel)) {\n      console.warn('cannot call recomputeAggregates unless using normal row model');\n    }\n\n    console.warn(\"recomputeAggregates is deprecated, please call api.refreshClientSideRowModel('aggregate') instead\");\n    this.clientSideRowModel.refreshModel({\n      step: constants_1.Constants.STEP_AGGREGATE\n    });\n  };\n\n  GridApi.prototype.sizeColumnsToFit = function () {\n    this.gridPanel.sizeColumnsToFit();\n  };\n\n  GridApi.prototype.showLoadingOverlay = function () {\n    this.gridPanel.showLoadingOverlay();\n  };\n\n  GridApi.prototype.showNoRowsOverlay = function () {\n    this.gridPanel.showNoRowsOverlay();\n  };\n\n  GridApi.prototype.hideOverlay = function () {\n    this.gridPanel.hideOverlay();\n  };\n\n  GridApi.prototype.isNodeSelected = function (node) {\n    console.warn('ag-Grid: no need to call api.isNodeSelected(), just call node.isSelected() instead');\n    return node.isSelected();\n  };\n\n  GridApi.prototype.getSelectedNodesById = function () {\n    console.error('ag-Grid: since version 3.4, getSelectedNodesById no longer exists, use getSelectedNodes() instead');\n    return null;\n  };\n\n  GridApi.prototype.getSelectedNodes = function () {\n    return this.selectionController.getSelectedNodes();\n  };\n\n  GridApi.prototype.getSelectedRows = function () {\n    return this.selectionController.getSelectedRows();\n  };\n\n  GridApi.prototype.getBestCostNodeSelection = function () {\n    return this.selectionController.getBestCostNodeSelection();\n  };\n\n  GridApi.prototype.getRenderedNodes = function () {\n    return this.rowRenderer.getRenderedNodes();\n  };\n\n  GridApi.prototype.ensureColIndexVisible = function (index) {\n    console.warn('ag-Grid: ensureColIndexVisible(index) no longer supported, use ensureColumnVisible(colKey) instead.');\n  };\n\n  GridApi.prototype.ensureColumnVisible = function (key) {\n    this.gridPanel.ensureColumnVisible(key);\n  }; // Valid values for position are bottom, middle and top\n\n\n  GridApi.prototype.ensureIndexVisible = function (index, position) {\n    this.gridPanel.ensureIndexVisible(index, position);\n  }; // Valid values for position are bottom, middle and top\n\n\n  GridApi.prototype.ensureNodeVisible = function (comparator, position) {\n    this.gridCore.ensureNodeVisible(comparator, position);\n  };\n\n  GridApi.prototype.forEachLeafNode = function (callback) {\n    if (utils_1._.missing(this.clientSideRowModel)) {\n      console.warn('cannot call forEachNode unless using normal row model');\n    }\n\n    this.clientSideRowModel.forEachLeafNode(callback);\n  };\n\n  GridApi.prototype.forEachNode = function (callback) {\n    this.rowModel.forEachNode(callback);\n  };\n\n  GridApi.prototype.forEachNodeAfterFilter = function (callback) {\n    if (utils_1._.missing(this.clientSideRowModel)) {\n      console.warn('cannot call forEachNodeAfterFilter unless using normal row model');\n    }\n\n    this.clientSideRowModel.forEachNodeAfterFilter(callback);\n  };\n\n  GridApi.prototype.forEachNodeAfterFilterAndSort = function (callback) {\n    if (utils_1._.missing(this.clientSideRowModel)) {\n      console.warn('cannot call forEachNodeAfterFilterAndSort unless using normal row model');\n    }\n\n    this.clientSideRowModel.forEachNodeAfterFilterAndSort(callback);\n  };\n\n  GridApi.prototype.getFilterApiForColDef = function (colDef) {\n    console.warn('ag-grid API method getFilterApiForColDef deprecated, use getFilterApi instead');\n    return this.getFilterInstance(colDef);\n  };\n\n  GridApi.prototype.getFilterInstance = function (key) {\n    var column = this.columnController.getPrimaryColumn(key);\n\n    if (column) {\n      return this.filterManager.getFilterComponent(column, 'NO_UI').resolveNow(null, function (filterComp) {\n        return filterComp;\n      });\n    }\n  };\n\n  GridApi.prototype.getFilterApi = function (key) {\n    console.warn('ag-Grid: getFilterApi is deprecated, use getFilterInstance instead');\n    return this.getFilterInstance(key);\n  };\n\n  GridApi.prototype.destroyFilter = function (key) {\n    var column = this.columnController.getPrimaryColumn(key);\n\n    if (column) {\n      return this.filterManager.destroyFilter(column, \"filterDestroyed\");\n    }\n  };\n\n  GridApi.prototype.getStatusPanel = function (key) {\n    if (this.statusBarService) {\n      return this.statusBarService.getStatusPanel(key);\n    }\n  };\n\n  GridApi.prototype.getColumnDef = function (key) {\n    var column = this.columnController.getPrimaryColumn(key);\n\n    if (column) {\n      return column.getColDef();\n    } else {\n      return null;\n    }\n  };\n\n  GridApi.prototype.onFilterChanged = function () {\n    this.filterManager.onFilterChanged();\n  };\n\n  GridApi.prototype.onSortChanged = function () {\n    this.sortController.onSortChanged();\n  };\n\n  GridApi.prototype.setSortModel = function (sortModel, source) {\n    if (source === void 0) {\n      source = \"api\";\n    }\n\n    this.sortController.setSortModel(sortModel, source);\n  };\n\n  GridApi.prototype.getSortModel = function () {\n    return this.sortController.getSortModel();\n  };\n\n  GridApi.prototype.setFilterModel = function (model) {\n    this.filterManager.setFilterModel(model);\n  };\n\n  GridApi.prototype.getFilterModel = function () {\n    return this.filterManager.getFilterModel();\n  };\n\n  GridApi.prototype.getFocusedCell = function () {\n    return this.focusedCellController.getFocusedCell();\n  };\n\n  GridApi.prototype.clearFocusedCell = function () {\n    return this.focusedCellController.clearFocusedCell();\n  };\n\n  GridApi.prototype.setFocusedCell = function (rowIndex, colKey, floating) {\n    this.focusedCellController.setFocusedCell(rowIndex, colKey, floating, true);\n  };\n\n  GridApi.prototype.setSuppressRowDrag = function (value) {\n    this.gridOptionsWrapper.setProperty(gridOptionsWrapper_1.GridOptionsWrapper.PROP_SUPPRESS_ROW_DRAG, value);\n  };\n\n  GridApi.prototype.setHeaderHeight = function (headerHeight) {\n    this.gridOptionsWrapper.setProperty(gridOptionsWrapper_1.GridOptionsWrapper.PROP_HEADER_HEIGHT, headerHeight);\n    this.doLayout();\n  };\n\n  GridApi.prototype.setGridAutoHeight = function (gridAutoHeight) {\n    console.warn('api.setGridAutoHeight(boolean) is deprecated, please use api.setDomLayout() instead');\n    this.setDomLayout(gridAutoHeight ? 'autoHeight' : 'normal');\n  };\n\n  GridApi.prototype.setDomLayout = function (domLayout) {\n    this.gridOptionsWrapper.setProperty(gridOptionsWrapper_1.GridOptionsWrapper.PROP_DOM_LAYOUT, domLayout);\n  };\n\n  GridApi.prototype.setEnableCellTextSelection = function (selectable) {\n    this.gridPanel.setCellTextSelection(selectable);\n  };\n\n  GridApi.prototype.setGroupHeaderHeight = function (headerHeight) {\n    this.gridOptionsWrapper.setProperty(gridOptionsWrapper_1.GridOptionsWrapper.PROP_GROUP_HEADER_HEIGHT, headerHeight);\n    this.doLayout();\n  };\n\n  GridApi.prototype.setFloatingFiltersHeight = function (headerHeight) {\n    this.gridOptionsWrapper.setProperty(gridOptionsWrapper_1.GridOptionsWrapper.PROP_FLOATING_FILTERS_HEIGHT, headerHeight);\n    this.doLayout();\n  };\n\n  GridApi.prototype.setPivotGroupHeaderHeight = function (headerHeight) {\n    this.gridOptionsWrapper.setProperty(gridOptionsWrapper_1.GridOptionsWrapper.PROP_PIVOT_GROUP_HEADER_HEIGHT, headerHeight);\n    this.doLayout();\n  };\n\n  GridApi.prototype.setPivotHeaderHeight = function (headerHeight) {\n    this.gridOptionsWrapper.setProperty(gridOptionsWrapper_1.GridOptionsWrapper.PROP_PIVOT_HEADER_HEIGHT, headerHeight);\n    this.doLayout();\n  };\n\n  GridApi.prototype.isSideBarVisible = function () {\n    return this.gridCore.isSideBarVisible();\n  };\n\n  GridApi.prototype.setSideBarVisible = function (show) {\n    this.gridCore.setSideBarVisible(show);\n  };\n\n  GridApi.prototype.showToolPanel = function (show) {\n    console.warn(\"ag-grid: from v19 api.showToolPanel has been deprecated in favour of api.setSideBarVisible\");\n    this.setSideBarVisible(show);\n  };\n\n  GridApi.prototype.openToolPanel = function (key) {\n    this.gridCore.openToolPanel(key);\n  };\n\n  GridApi.prototype.closeToolPanel = function () {\n    this.gridCore.closeToolPanel();\n  };\n\n  GridApi.prototype.getOpenedToolPanel = function () {\n    return this.gridCore.getOpenedToolPanel();\n  };\n\n  GridApi.prototype.getSideBar = function () {\n    return this.gridCore.getSideBar();\n  };\n\n  GridApi.prototype.setSideBar = function (def) {\n    return this.gridCore.setSideBar(def);\n  };\n\n  GridApi.prototype.setSuppressClipboardPaste = function (value) {\n    this.gridOptionsWrapper.setProperty(gridOptionsWrapper_1.GridOptionsWrapper.PROP_SUPPRESS_CLIPBOARD_PASTE, value);\n  };\n\n  GridApi.prototype.isToolPanelShowing = function () {\n    return this.gridCore.isToolPanelShowing();\n  };\n\n  GridApi.prototype.doLayout = function () {\n    this.gridPanel.checkViewportAndScrolls();\n  };\n\n  GridApi.prototype.resetRowHeights = function () {\n    if (utils_1._.exists(this.clientSideRowModel)) {\n      this.clientSideRowModel.resetRowHeights();\n    }\n  };\n\n  GridApi.prototype.setGroupRemoveSingleChildren = function (value) {\n    this.gridOptionsWrapper.setProperty(gridOptionsWrapper_1.GridOptionsWrapper.PROP_GROUP_REMOVE_SINGLE_CHILDREN, value);\n  };\n\n  GridApi.prototype.setGroupRemoveLowestSingleChildren = function (value) {\n    this.gridOptionsWrapper.setProperty(gridOptionsWrapper_1.GridOptionsWrapper.PROP_GROUP_REMOVE_LOWEST_SINGLE_CHILDREN, value);\n  };\n\n  GridApi.prototype.onRowHeightChanged = function () {\n    if (utils_1._.exists(this.clientSideRowModel)) {\n      this.clientSideRowModel.onRowHeightChanged();\n    }\n  };\n\n  GridApi.prototype.getValue = function (colKey, rowNode) {\n    var column = this.columnController.getPrimaryColumn(colKey);\n\n    if (utils_1._.missing(column)) {\n      column = this.columnController.getGridColumn(colKey);\n    }\n\n    if (utils_1._.missing(column)) {\n      return null;\n    } else {\n      return this.valueService.getValue(column, rowNode);\n    }\n  };\n\n  GridApi.prototype.addEventListener = function (eventType, listener) {\n    var async = this.gridOptionsWrapper.useAsyncEvents();\n    this.eventService.addEventListener(eventType, listener, async);\n  };\n\n  GridApi.prototype.addGlobalListener = function (listener) {\n    var async = this.gridOptionsWrapper.useAsyncEvents();\n    this.eventService.addGlobalListener(listener, async);\n  };\n\n  GridApi.prototype.removeEventListener = function (eventType, listener) {\n    var async = this.gridOptionsWrapper.useAsyncEvents();\n    this.eventService.removeEventListener(eventType, listener, async);\n  };\n\n  GridApi.prototype.removeGlobalListener = function (listener) {\n    var async = this.gridOptionsWrapper.useAsyncEvents();\n    this.eventService.removeGlobalListener(listener, async);\n  };\n\n  GridApi.prototype.dispatchEvent = function (event) {\n    this.eventService.dispatchEvent(event);\n  };\n\n  GridApi.prototype.destroy = function () {\n    // destroy the UI first (as they use the services)\n    this.gridCore.destroy(); // destroy the services\n\n    this.context.destroy();\n  };\n\n  GridApi.prototype.resetQuickFilter = function () {\n    this.rowModel.forEachNode(function (node) {\n      return node.quickFilterAggregateText = null;\n    });\n  };\n\n  GridApi.prototype.getRangeSelections = function () {\n    console.warn(\"ag-Grid: in v20.1.x, api.getRangeSelections() is gone, please use getCellRanges() instead.\\n        We had to change how cell selections works a small bit to allow charting to integrate. The return type of\\n        getCellRanges() is a bit different, please check the ag-Grid documentation.\");\n    return null;\n  };\n\n  GridApi.prototype.getCellRanges = function () {\n    if (this.rangeController) {\n      return this.rangeController.getCellRanges();\n    } else {\n      console.warn('ag-Grid: cell range selection is only available in ag-Grid Enterprise');\n      return null;\n    }\n  };\n\n  GridApi.prototype.camelCaseToHumanReadable = function (camelCase) {\n    return utils_1._.camelCaseToHumanText(camelCase);\n  };\n\n  GridApi.prototype.addRangeSelection = function (deprecatedNoLongerUsed) {\n    console.warn('ag-Grid: As of version 21.x, range selection changed slightly to allow charting integration. Please call api.addCellRange() instead of api.addRangeSelection()');\n  };\n\n  GridApi.prototype.addCellRange = function (params) {\n    if (!this.rangeController) {\n      console.warn('ag-Grid: cell range selection is only available in ag-Grid Enterprise');\n    }\n\n    this.rangeController.addCellRange(params);\n  };\n\n  GridApi.prototype.clearRangeSelection = function () {\n    if (!this.rangeController) {\n      console.warn('ag-Grid: cell range selection is only available in ag-Grid Enterprise');\n    }\n\n    this.rangeController.removeAllCellRanges();\n  };\n\n  GridApi.prototype.chartRange = function (params) {\n    if (!this.context.isModuleRegistered(\"chartsModule\"\n    /* ChartsModule */\n    )) {\n      utils_1._.doOnce(function () {\n        console.warn('ag-grid: Cannot chart range - the Charts Module has not been included.');\n      }, 'ChartsModuleCheck');\n\n      return;\n    }\n\n    return this.chartService.chartCellRange(params);\n  };\n\n  GridApi.prototype.copySelectedRowsToClipboard = function (includeHeader, columnKeys) {\n    if (!this.clipboardService) {\n      console.warn('ag-Grid: clipboard is only available in ag-Grid Enterprise');\n    }\n\n    this.clipboardService.copySelectedRowsToClipboard(includeHeader, columnKeys);\n  };\n\n  GridApi.prototype.copySelectedRangeToClipboard = function (includeHeader) {\n    if (!this.clipboardService) {\n      console.warn('ag-Grid: clipboard is only available in ag-Grid Enterprise');\n    }\n\n    this.clipboardService.copySelectedRangeToClipboard(includeHeader);\n  };\n\n  GridApi.prototype.copySelectedRangeDown = function () {\n    if (!this.clipboardService) {\n      console.warn('ag-Grid: clipboard is only available in ag-Grid Enterprise');\n    }\n\n    this.clipboardService.copyRangeDown();\n  };\n\n  GridApi.prototype.showColumnMenuAfterButtonClick = function (colKey, buttonElement) {\n    // use grid column so works with pivot mode\n    var column = this.columnController.getGridColumn(colKey);\n    this.menuFactory.showMenuAfterButtonClick(column, buttonElement);\n  };\n\n  GridApi.prototype.showColumnMenuAfterMouseClick = function (colKey, mouseEvent) {\n    // use grid column so works with pivot mode\n    var column = this.columnController.getGridColumn(colKey);\n    this.menuFactory.showMenuAfterMouseEvent(column, mouseEvent);\n  };\n\n  GridApi.prototype.hidePopupMenu = function () {\n    // hide the context menu if in enterprise\n    if (this.contextMenuFactory) {\n      this.contextMenuFactory.hideActiveMenu();\n    } // and hide the column menu always\n\n\n    this.menuFactory.hideActiveMenu();\n  };\n\n  GridApi.prototype.setPopupParent = function (ePopupParent) {\n    this.gridOptionsWrapper.setProperty(gridOptionsWrapper_1.GridOptionsWrapper.PROP_POPUP_PARENT, ePopupParent);\n  };\n\n  GridApi.prototype.tabToNextCell = function () {\n    return this.rowRenderer.tabToNextCell(false);\n  };\n\n  GridApi.prototype.tabToPreviousCell = function () {\n    return this.rowRenderer.tabToNextCell(true);\n  };\n\n  GridApi.prototype.getCellRendererInstances = function (params) {\n    if (params === void 0) {\n      params = {};\n    }\n\n    return this.rowRenderer.getCellRendererInstances(params);\n  };\n\n  GridApi.prototype.getCellEditorInstances = function (params) {\n    if (params === void 0) {\n      params = {};\n    }\n\n    return this.rowRenderer.getCellEditorInstances(params);\n  };\n\n  GridApi.prototype.getEditingCells = function () {\n    return this.rowRenderer.getEditingCells();\n  };\n\n  GridApi.prototype.stopEditing = function (cancel) {\n    if (cancel === void 0) {\n      cancel = false;\n    }\n\n    this.rowRenderer.stopEditing(cancel);\n  };\n\n  GridApi.prototype.startEditingCell = function (params) {\n    var column = this.columnController.getGridColumn(params.colKey);\n\n    if (!column) {\n      console.warn(\"ag-Grid: no column found for \" + params.colKey);\n      return;\n    }\n\n    var cellPosition = {\n      rowIndex: params.rowIndex,\n      rowPinned: params.rowPinned,\n      column: column\n    };\n\n    var notPinned = utils_1._.missing(params.rowPinned);\n\n    if (notPinned) {\n      this.gridPanel.ensureIndexVisible(params.rowIndex);\n    }\n\n    this.rowRenderer.startEditingCell(cellPosition, params.keyPress, params.charPress);\n  };\n\n  GridApi.prototype.addAggFunc = function (key, aggFunc) {\n    if (this.aggFuncService) {\n      this.aggFuncService.addAggFunc(key, aggFunc);\n    }\n  };\n\n  GridApi.prototype.addAggFuncs = function (aggFuncs) {\n    if (this.aggFuncService) {\n      this.aggFuncService.addAggFuncs(aggFuncs);\n    }\n  };\n\n  GridApi.prototype.clearAggFuncs = function () {\n    if (this.aggFuncService) {\n      this.aggFuncService.clear();\n    }\n  };\n\n  GridApi.prototype.updateRowData = function (rowDataTransaction) {\n    var res = null;\n\n    if (this.clientSideRowModel) {\n      res = this.clientSideRowModel.updateRowData(rowDataTransaction);\n    } else if (this.infinitePageRowModel) {\n      this.infinitePageRowModel.updateRowData(rowDataTransaction);\n    } else {\n      console.error('ag-Grid: updateRowData() only works with ClientSideRowModel and InfiniteRowModel.');\n    } // refresh all the full width rows\n\n\n    this.rowRenderer.refreshFullWidthRows(); // do change detection for all present cells\n\n    if (!this.gridOptionsWrapper.isSuppressChangeDetection()) {\n      this.rowRenderer.refreshCells();\n    }\n\n    return res;\n  };\n\n  GridApi.prototype.batchUpdateRowData = function (rowDataTransaction, callback) {\n    if (!this.clientSideRowModel) {\n      console.error('ag-Grid: api.batchUpdateRowData() only works with ClientSideRowModel.');\n      return;\n    }\n\n    this.clientSideRowModel.batchUpdateRowData(rowDataTransaction, callback);\n  };\n\n  GridApi.prototype.insertItemsAtIndex = function (index, items, skipRefresh) {\n    if (skipRefresh === void 0) {\n      skipRefresh = false;\n    }\n\n    console.warn('ag-Grid: insertItemsAtIndex() is deprecated, use updateRowData(transaction) instead.');\n    this.updateRowData({\n      add: items,\n      addIndex: index,\n      update: null,\n      remove: null\n    });\n  };\n\n  GridApi.prototype.removeItems = function (rowNodes, skipRefresh) {\n    if (skipRefresh === void 0) {\n      skipRefresh = false;\n    }\n\n    console.warn('ag-Grid: removeItems() is deprecated, use updateRowData(transaction) instead.');\n    var dataToRemove = rowNodes.map(function (rowNode) {\n      return rowNode.data;\n    });\n    this.updateRowData({\n      add: null,\n      addIndex: null,\n      update: null,\n      remove: dataToRemove\n    });\n  };\n\n  GridApi.prototype.addItems = function (items, skipRefresh) {\n    if (skipRefresh === void 0) {\n      skipRefresh = false;\n    }\n\n    console.warn('ag-Grid: addItems() is deprecated, use updateRowData(transaction) instead.');\n    this.updateRowData({\n      add: items,\n      addIndex: null,\n      update: null,\n      remove: null\n    });\n  };\n\n  GridApi.prototype.refreshVirtualPageCache = function () {\n    console.warn('ag-Grid: refreshVirtualPageCache() is now called refreshInfiniteCache(), please call refreshInfiniteCache() instead');\n    this.refreshInfiniteCache();\n  };\n\n  GridApi.prototype.refreshInfinitePageCache = function () {\n    console.warn('ag-Grid: refreshInfinitePageCache() is now called refreshInfiniteCache(), please call refreshInfiniteCache() instead');\n    this.refreshInfiniteCache();\n  };\n\n  GridApi.prototype.refreshInfiniteCache = function () {\n    if (this.infinitePageRowModel) {\n      this.infinitePageRowModel.refreshCache();\n    } else {\n      console.warn(\"ag-Grid: api.refreshInfiniteCache is only available when rowModelType='infinite'.\");\n    }\n  };\n\n  GridApi.prototype.purgeVirtualPageCache = function () {\n    console.warn('ag-Grid: purgeVirtualPageCache() is now called purgeInfiniteCache(), please call purgeInfiniteCache() instead');\n    this.purgeInfinitePageCache();\n  };\n\n  GridApi.prototype.purgeInfinitePageCache = function () {\n    console.warn('ag-Grid: purgeInfinitePageCache() is now called purgeInfiniteCache(), please call purgeInfiniteCache() instead');\n    this.purgeInfiniteCache();\n  };\n\n  GridApi.prototype.purgeInfiniteCache = function () {\n    if (this.infinitePageRowModel) {\n      this.infinitePageRowModel.purgeCache();\n    } else {\n      console.warn(\"ag-Grid: api.purgeInfiniteCache is only available when rowModelType='infinite'.\");\n    }\n  };\n  /** @deprecated */\n\n\n  GridApi.prototype.purgeEnterpriseCache = function (route) {\n    console.warn(\"ag-grid: since version 18.x, api.purgeEnterpriseCache() should be replaced with api.purgeServerSideCache()\");\n    this.purgeServerSideCache(route);\n  };\n\n  GridApi.prototype.purgeServerSideCache = function (route) {\n    if (this.serverSideRowModel) {\n      this.serverSideRowModel.purgeCache(route);\n    } else {\n      console.warn(\"ag-Grid: api.purgeServerSideCache is only available when rowModelType='enterprise'.\");\n    }\n  };\n\n  GridApi.prototype.getVirtualRowCount = function () {\n    console.warn('ag-Grid: getVirtualRowCount() is now called getInfiniteRowCount(), please call getInfiniteRowCount() instead');\n    return this.getInfiniteRowCount();\n  };\n\n  GridApi.prototype.getInfiniteRowCount = function () {\n    if (this.infinitePageRowModel) {\n      return this.infinitePageRowModel.getVirtualRowCount();\n    } else {\n      console.warn(\"ag-Grid: api.getVirtualRowCount is only available when rowModelType='virtual'.\");\n    }\n  };\n\n  GridApi.prototype.isMaxRowFound = function () {\n    if (this.infinitePageRowModel) {\n      return this.infinitePageRowModel.isMaxRowFound();\n    } else {\n      console.warn(\"ag-Grid: api.isMaxRowFound is only available when rowModelType='virtual'.\");\n    }\n  };\n\n  GridApi.prototype.setVirtualRowCount = function (rowCount, maxRowFound) {\n    console.warn('ag-Grid: setVirtualRowCount() is now called setInfiniteRowCount(), please call setInfiniteRowCount() instead');\n    this.setInfiniteRowCount(rowCount, maxRowFound);\n  };\n\n  GridApi.prototype.setInfiniteRowCount = function (rowCount, maxRowFound) {\n    if (this.infinitePageRowModel) {\n      this.infinitePageRowModel.setVirtualRowCount(rowCount, maxRowFound);\n    } else {\n      console.warn(\"ag-Grid: api.setVirtualRowCount is only available when rowModelType='virtual'.\");\n    }\n  };\n\n  GridApi.prototype.getVirtualPageState = function () {\n    console.warn('ag-Grid: getVirtualPageState() is now called getCacheBlockState(), please call getCacheBlockState() instead');\n    return this.getCacheBlockState();\n  };\n\n  GridApi.prototype.getInfinitePageState = function () {\n    console.warn('ag-Grid: getInfinitePageState() is now called getCacheBlockState(), please call getCacheBlockState() instead');\n    return this.getCacheBlockState();\n  };\n\n  GridApi.prototype.getCacheBlockState = function () {\n    if (this.infinitePageRowModel) {\n      return this.infinitePageRowModel.getBlockState();\n    } else if (this.serverSideRowModel) {\n      return this.serverSideRowModel.getBlockState();\n    } else {\n      console.warn(\"ag-Grid: api.getCacheBlockState() is only available when rowModelType='infinite' or rowModelType='serverSide'.\");\n    }\n  };\n\n  GridApi.prototype.checkGridSize = function () {\n    this.gridPanel.setHeaderAndFloatingHeights();\n  };\n\n  GridApi.prototype.getFirstRenderedRow = function () {\n    console.warn('in ag-Grid v12, getFirstRenderedRow() was renamed to getFirstDisplayedRow()');\n    return this.getFirstDisplayedRow();\n  };\n\n  GridApi.prototype.getFirstDisplayedRow = function () {\n    return this.rowRenderer.getFirstVirtualRenderedRow();\n  };\n\n  GridApi.prototype.getLastRenderedRow = function () {\n    console.warn('in ag-Grid v12, getLastRenderedRow() was renamed to getLastDisplayedRow()');\n    return this.getLastDisplayedRow();\n  };\n\n  GridApi.prototype.getLastDisplayedRow = function () {\n    return this.rowRenderer.getLastVirtualRenderedRow();\n  };\n\n  GridApi.prototype.getDisplayedRowAtIndex = function (index) {\n    return this.rowModel.getRow(index);\n  };\n\n  GridApi.prototype.getDisplayedRowCount = function () {\n    return this.rowModel.getRowCount();\n  };\n\n  GridApi.prototype.paginationIsLastPageFound = function () {\n    return this.paginationProxy.isLastPageFound();\n  };\n\n  GridApi.prototype.paginationGetPageSize = function () {\n    return this.paginationProxy.getPageSize();\n  };\n\n  GridApi.prototype.paginationSetPageSize = function (size) {\n    this.gridOptionsWrapper.setProperty('paginationPageSize', size);\n  };\n\n  GridApi.prototype.paginationGetCurrentPage = function () {\n    return this.paginationProxy.getCurrentPage();\n  };\n\n  GridApi.prototype.paginationGetTotalPages = function () {\n    return this.paginationProxy.getTotalPages();\n  };\n\n  GridApi.prototype.paginationGetRowCount = function () {\n    return this.paginationProxy.getMasterRowCount();\n  };\n\n  GridApi.prototype.paginationGoToNextPage = function () {\n    this.paginationProxy.goToNextPage();\n  };\n\n  GridApi.prototype.paginationGoToPreviousPage = function () {\n    this.paginationProxy.goToPreviousPage();\n  };\n\n  GridApi.prototype.paginationGoToFirstPage = function () {\n    this.paginationProxy.goToFirstPage();\n  };\n\n  GridApi.prototype.paginationGoToLastPage = function () {\n    this.paginationProxy.goToLastPage();\n  };\n\n  GridApi.prototype.paginationGoToPage = function (page) {\n    this.paginationProxy.goToPage(page);\n  };\n\n  __decorate([context_1.Autowired('immutableService'), __metadata(\"design:type\", immutableService_1.ImmutableService)], GridApi.prototype, \"immutableService\", void 0);\n\n  __decorate([context_1.Autowired('csvCreator'), __metadata(\"design:type\", csvCreator_1.CsvCreator)], GridApi.prototype, \"csvCreator\", void 0);\n\n  __decorate([context_1.Optional('excelCreator'), __metadata(\"design:type\", Object)], GridApi.prototype, \"excelCreator\", void 0);\n\n  __decorate([context_1.Autowired('rowRenderer'), __metadata(\"design:type\", rowRenderer_1.RowRenderer)], GridApi.prototype, \"rowRenderer\", void 0);\n\n  __decorate([context_1.Autowired('filterManager'), __metadata(\"design:type\", filterManager_1.FilterManager)], GridApi.prototype, \"filterManager\", void 0);\n\n  __decorate([context_1.Autowired('columnController'), __metadata(\"design:type\", columnController_1.ColumnController)], GridApi.prototype, \"columnController\", void 0);\n\n  __decorate([context_1.Autowired('selectionController'), __metadata(\"design:type\", selectionController_1.SelectionController)], GridApi.prototype, \"selectionController\", void 0);\n\n  __decorate([context_1.Autowired('gridOptionsWrapper'), __metadata(\"design:type\", gridOptionsWrapper_1.GridOptionsWrapper)], GridApi.prototype, \"gridOptionsWrapper\", void 0);\n\n  __decorate([context_1.Autowired('valueService'), __metadata(\"design:type\", valueService_1.ValueService)], GridApi.prototype, \"valueService\", void 0);\n\n  __decorate([context_1.Autowired('alignedGridsService'), __metadata(\"design:type\", alignedGridsService_1.AlignedGridsService)], GridApi.prototype, \"alignedGridsService\", void 0);\n\n  __decorate([context_1.Autowired('eventService'), __metadata(\"design:type\", eventService_1.EventService)], GridApi.prototype, \"eventService\", void 0);\n\n  __decorate([context_1.Autowired('pinnedRowModel'), __metadata(\"design:type\", pinnedRowModel_1.PinnedRowModel)], GridApi.prototype, \"pinnedRowModel\", void 0);\n\n  __decorate([context_1.Autowired('context'), __metadata(\"design:type\", context_1.Context)], GridApi.prototype, \"context\", void 0);\n\n  __decorate([context_1.Autowired('rowModel'), __metadata(\"design:type\", Object)], GridApi.prototype, \"rowModel\", void 0);\n\n  __decorate([context_1.Autowired('sortController'), __metadata(\"design:type\", sortController_1.SortController)], GridApi.prototype, \"sortController\", void 0);\n\n  __decorate([context_1.Autowired('paginationProxy'), __metadata(\"design:type\", paginationProxy_1.PaginationProxy)], GridApi.prototype, \"paginationProxy\", void 0);\n\n  __decorate([context_1.Autowired('focusedCellController'), __metadata(\"design:type\", focusedCellController_1.FocusedCellController)], GridApi.prototype, \"focusedCellController\", void 0);\n\n  __decorate([context_1.Optional('rangeController'), __metadata(\"design:type\", Object)], GridApi.prototype, \"rangeController\", void 0);\n\n  __decorate([context_1.Optional('clipboardService'), __metadata(\"design:type\", Object)], GridApi.prototype, \"clipboardService\", void 0);\n\n  __decorate([context_1.Optional('aggFuncService'), __metadata(\"design:type\", Object)], GridApi.prototype, \"aggFuncService\", void 0);\n\n  __decorate([context_1.Autowired('menuFactory'), __metadata(\"design:type\", Object)], GridApi.prototype, \"menuFactory\", void 0);\n\n  __decorate([context_1.Optional('contextMenuFactory'), __metadata(\"design:type\", Object)], GridApi.prototype, \"contextMenuFactory\", void 0);\n\n  __decorate([context_1.Autowired('cellRendererFactory'), __metadata(\"design:type\", cellRendererFactory_1.CellRendererFactory)], GridApi.prototype, \"cellRendererFactory\", void 0);\n\n  __decorate([context_1.Autowired('valueCache'), __metadata(\"design:type\", valueCache_1.ValueCache)], GridApi.prototype, \"valueCache\", void 0);\n\n  __decorate([context_1.Optional('sideBarComp'), __metadata(\"design:type\", Object)], GridApi.prototype, \"sideBarComp\", void 0);\n\n  __decorate([context_1.Autowired('animationFrameService'), __metadata(\"design:type\", animationFrameService_1.AnimationFrameService)], GridApi.prototype, \"animationFrameService\", void 0);\n\n  __decorate([context_1.Optional('statusBarService'), __metadata(\"design:type\", Object)], GridApi.prototype, \"statusBarService\", void 0);\n\n  __decorate([context_1.Optional('chartService'), __metadata(\"design:type\", Object)], GridApi.prototype, \"chartService\", void 0);\n\n  __decorate([context_1.PostConstruct, __metadata(\"design:type\", Function), __metadata(\"design:paramtypes\", []), __metadata(\"design:returntype\", void 0)], GridApi.prototype, \"init\", null);\n\n  GridApi = __decorate([context_1.Bean('gridApi')], GridApi);\n  return GridApi;\n}();\n\nexports.GridApi = GridApi;","map":{"version":3,"sources":["/Users/dirkmennecke77/Desktop/Lageplan/node_modules/ag-grid-community/dist/lib/gridApi.js"],"names":["__decorate","decorators","target","key","desc","c","arguments","length","r","Object","getOwnPropertyDescriptor","d","Reflect","decorate","i","defineProperty","__metadata","k","v","metadata","exports","value","csvCreator_1","require","rowRenderer_1","filterManager_1","columnController_1","selectionController_1","gridOptionsWrapper_1","valueService_1","eventService_1","constants_1","context_1","sortController_1","focusedCellController_1","cellRendererFactory_1","paginationProxy_1","immutableService_1","valueCache_1","alignedGridsService_1","pinnedRowModel_1","animationFrameService_1","utils_1","GridApi","detailGridInfoMap","prototype","registerGridComp","gridPanel","registerGridCore","gridCore","registerHeaderRootComp","headerRootComp","init","rowModel","getType","Constants","ROW_MODEL_TYPE_CLIENT_SIDE","clientSideRowModel","ROW_MODEL_TYPE_INFINITE","infinitePageRowModel","ROW_MODEL_TYPE_SERVER_SIDE","serverSideRowModel","__getAlignedGridService","alignedGridsService","addDetailGridInfo","id","gridInfo","removeDetailGridInfo","undefined","getDetailGridInfo","forEachDetailGridInfo","callback","index","_","iterateObject","exists","getDataAsCsv","params","csvCreator","exportDataAsCsv","getDataAsExcel","excelCreator","console","warn","getDataAsExcelXml","exportDataAsExcel","setEnterpriseDatasource","datasource","setServerSideDatasource","gridOptionsWrapper","isRowModelServerSide","setDatasource","isRowModelInfinite","setViewportDatasource","viewportDatasource","isRowModelViewport","ROW_MODEL_TYPE_VIEWPORT","setRowData","rowData","isRowModelDefault","isDeltaRowDataMode","_a","immutableService","createTransactionForRowData","transaction","orderIdMap","updateRowData","rowRenderer","refreshFullWidthRows","selectionController","reset","setFloatingTopRowData","rows","setPinnedTopRowData","setFloatingBottomRowData","setPinnedBottomRowData","getFloatingTopRowCount","getPinnedTopRowCount","getFloatingBottomRowCount","getPinnedBottomRowCount","getFloatingTopRow","getPinnedTopRow","getFloatingBottomRow","getPinnedBottomRow","pinnedRowModel","setColumnDefs","colDefs","source","columnController","expireValueCache","valueCache","expire","getVerticalPixelRange","getVScrollPosition","getHorizontalPixelRange","getHScrollPosition","setAlwaysShowVerticalScroll","show","setProperty","refreshToolPanel","refreshSideBar","refreshCells","Array","isArray","flashCells","redrawRows","rowNodes","redrawAfterModelUpdate","timeFullRedraw","count","iterationCount","totalProcessing","totalReflow","that","doOneIteration","start","Date","getTime","endProcessing","window","setTimeout","endReflow","durationProcessing","durationReflow","log","finish","refreshView","refreshRows","rowDataChanged","softRefreshView","error","refreshGroupRows","setFunctionsReadOnly","readOnly","refreshHeader","setHeaderAndFloatingHeights","isAnyFilterPresent","filterManager","isAdvancedFilterPresent","isColumnFilterPresent","isQuickFilterPresent","getModel","setRowNodeExpanded","rowNode","expanded","setExpanded","onGroupExpandedOrCollapsed","deprecated_refreshFromIndex","missing","refreshModel","step","STEP_MAP","refreshInMemoryRowModel","refreshClientSideRowModel","paramsStep","STEP_EVERYTHING","stepsMapped","group","filter","STEP_FILTER","map","aggregate","STEP_AGGREGATE","sort","STEP_SORT","pivot","STEP_PIVOT","keys","join","modelParams","keepRenderedRows","animate","keepEditingRows","isAnimationFrameQueueEmpty","animationFrameService","isQueueEmpty","getRowNode","expandAll","expandOrCollapseAll","collapseAll","addVirtualRowListener","eventName","rowIndex","addRenderedRowListener","setQuickFilter","newFilter","selectIndex","tryMulti","suppressEvents","deselectIndex","selectNode","node","setSelectedParams","newValue","clearSelection","deselectNode","selectAll","selectAllRowNodes","deselectAll","deselectAllRowNodes","selectAllFiltered","deselectAllFiltered","recomputeAggregates","sizeColumnsToFit","showLoadingOverlay","showNoRowsOverlay","hideOverlay","isNodeSelected","isSelected","getSelectedNodesById","getSelectedNodes","getSelectedRows","getBestCostNodeSelection","getRenderedNodes","ensureColIndexVisible","ensureColumnVisible","ensureIndexVisible","position","ensureNodeVisible","comparator","forEachLeafNode","forEachNode","forEachNodeAfterFilter","forEachNodeAfterFilterAndSort","getFilterApiForColDef","colDef","getFilterInstance","column","getPrimaryColumn","getFilterComponent","resolveNow","filterComp","getFilterApi","destroyFilter","getStatusPanel","statusBarService","getColumnDef","getColDef","onFilterChanged","onSortChanged","sortController","setSortModel","sortModel","getSortModel","setFilterModel","model","getFilterModel","getFocusedCell","focusedCellController","clearFocusedCell","setFocusedCell","colKey","floating","setSuppressRowDrag","GridOptionsWrapper","PROP_SUPPRESS_ROW_DRAG","setHeaderHeight","headerHeight","PROP_HEADER_HEIGHT","doLayout","setGridAutoHeight","gridAutoHeight","setDomLayout","domLayout","PROP_DOM_LAYOUT","setEnableCellTextSelection","selectable","setCellTextSelection","setGroupHeaderHeight","PROP_GROUP_HEADER_HEIGHT","setFloatingFiltersHeight","PROP_FLOATING_FILTERS_HEIGHT","setPivotGroupHeaderHeight","PROP_PIVOT_GROUP_HEADER_HEIGHT","setPivotHeaderHeight","PROP_PIVOT_HEADER_HEIGHT","isSideBarVisible","setSideBarVisible","showToolPanel","openToolPanel","closeToolPanel","getOpenedToolPanel","getSideBar","setSideBar","def","setSuppressClipboardPaste","PROP_SUPPRESS_CLIPBOARD_PASTE","isToolPanelShowing","checkViewportAndScrolls","resetRowHeights","setGroupRemoveSingleChildren","PROP_GROUP_REMOVE_SINGLE_CHILDREN","setGroupRemoveLowestSingleChildren","PROP_GROUP_REMOVE_LOWEST_SINGLE_CHILDREN","onRowHeightChanged","getValue","getGridColumn","valueService","addEventListener","eventType","listener","async","useAsyncEvents","eventService","addGlobalListener","removeEventListener","removeGlobalListener","dispatchEvent","event","destroy","context","resetQuickFilter","quickFilterAggregateText","getRangeSelections","getCellRanges","rangeController","camelCaseToHumanReadable","camelCase","camelCaseToHumanText","addRangeSelection","deprecatedNoLongerUsed","addCellRange","clearRangeSelection","removeAllCellRanges","chartRange","isModuleRegistered","doOnce","chartService","chartCellRange","copySelectedRowsToClipboard","includeHeader","columnKeys","clipboardService","copySelectedRangeToClipboard","copySelectedRangeDown","copyRangeDown","showColumnMenuAfterButtonClick","buttonElement","menuFactory","showMenuAfterButtonClick","showColumnMenuAfterMouseClick","mouseEvent","showMenuAfterMouseEvent","hidePopupMenu","contextMenuFactory","hideActiveMenu","setPopupParent","ePopupParent","PROP_POPUP_PARENT","tabToNextCell","tabToPreviousCell","getCellRendererInstances","getCellEditorInstances","getEditingCells","stopEditing","cancel","startEditingCell","cellPosition","rowPinned","notPinned","keyPress","charPress","addAggFunc","aggFunc","aggFuncService","addAggFuncs","aggFuncs","clearAggFuncs","clear","rowDataTransaction","res","isSuppressChangeDetection","batchUpdateRowData","insertItemsAtIndex","items","skipRefresh","add","addIndex","update","remove","removeItems","dataToRemove","data","addItems","refreshVirtualPageCache","refreshInfiniteCache","refreshInfinitePageCache","refreshCache","purgeVirtualPageCache","purgeInfinitePageCache","purgeInfiniteCache","purgeCache","purgeEnterpriseCache","route","purgeServerSideCache","getVirtualRowCount","getInfiniteRowCount","isMaxRowFound","setVirtualRowCount","rowCount","maxRowFound","setInfiniteRowCount","getVirtualPageState","getCacheBlockState","getInfinitePageState","getBlockState","checkGridSize","getFirstRenderedRow","getFirstDisplayedRow","getFirstVirtualRenderedRow","getLastRenderedRow","getLastDisplayedRow","getLastVirtualRenderedRow","getDisplayedRowAtIndex","getRow","getDisplayedRowCount","getRowCount","paginationIsLastPageFound","paginationProxy","isLastPageFound","paginationGetPageSize","getPageSize","paginationSetPageSize","size","paginationGetCurrentPage","getCurrentPage","paginationGetTotalPages","getTotalPages","paginationGetRowCount","getMasterRowCount","paginationGoToNextPage","goToNextPage","paginationGoToPreviousPage","goToPreviousPage","paginationGoToFirstPage","goToFirstPage","paginationGoToLastPage","goToLastPage","paginationGoToPage","page","goToPage","Autowired","ImmutableService","CsvCreator","Optional","RowRenderer","FilterManager","ColumnController","SelectionController","ValueService","AlignedGridsService","EventService","PinnedRowModel","Context","SortController","PaginationProxy","FocusedCellController","CellRendererFactory","ValueCache","AnimationFrameService","PostConstruct","Function","Bean"],"mappings":"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","sourcesContent":["/**\n * ag-grid-community - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components\n * @version v21.2.2\n * @link http://www.ag-grid.com/\n * @license MIT\n */\n\"use strict\";\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __metadata = (this && this.__metadata) || function (k, v) {\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar csvCreator_1 = require(\"./exporter/csvCreator\");\nvar rowRenderer_1 = require(\"./rendering/rowRenderer\");\nvar filterManager_1 = require(\"./filter/filterManager\");\nvar columnController_1 = require(\"./columnController/columnController\");\nvar selectionController_1 = require(\"./selectionController\");\nvar gridOptionsWrapper_1 = require(\"./gridOptionsWrapper\");\nvar valueService_1 = require(\"./valueService/valueService\");\nvar eventService_1 = require(\"./eventService\");\nvar constants_1 = require(\"./constants\");\nvar context_1 = require(\"./context/context\");\nvar sortController_1 = require(\"./sortController\");\nvar focusedCellController_1 = require(\"./focusedCellController\");\nvar cellRendererFactory_1 = require(\"./rendering/cellRendererFactory\");\nvar paginationProxy_1 = require(\"./rowModels/paginationProxy\");\nvar immutableService_1 = require(\"./rowModels/clientSide/immutableService\");\nvar valueCache_1 = require(\"./valueService/valueCache\");\nvar alignedGridsService_1 = require(\"./alignedGridsService\");\nvar pinnedRowModel_1 = require(\"./rowModels/pinnedRowModel\");\nvar animationFrameService_1 = require(\"./misc/animationFrameService\");\nvar utils_1 = require(\"./utils\");\nvar GridApi = /** @class */ (function () {\n    function GridApi() {\n        this.detailGridInfoMap = {};\n    }\n    GridApi.prototype.registerGridComp = function (gridPanel) {\n        this.gridPanel = gridPanel;\n    };\n    GridApi.prototype.registerGridCore = function (gridCore) {\n        this.gridCore = gridCore;\n    };\n    GridApi.prototype.registerHeaderRootComp = function (headerRootComp) {\n        this.headerRootComp = headerRootComp;\n    };\n    GridApi.prototype.init = function () {\n        switch (this.rowModel.getType()) {\n            case constants_1.Constants.ROW_MODEL_TYPE_CLIENT_SIDE:\n                this.clientSideRowModel = this.rowModel;\n                break;\n            case constants_1.Constants.ROW_MODEL_TYPE_INFINITE:\n                this.infinitePageRowModel = this.rowModel;\n                break;\n            case constants_1.Constants.ROW_MODEL_TYPE_SERVER_SIDE:\n                this.serverSideRowModel = this.rowModel;\n                break;\n        }\n    };\n    /** Used internally by grid. Not intended to be used by the client. Interface may change between releases. */\n    GridApi.prototype.__getAlignedGridService = function () {\n        return this.alignedGridsService;\n    };\n    GridApi.prototype.addDetailGridInfo = function (id, gridInfo) {\n        this.detailGridInfoMap[id] = gridInfo;\n    };\n    GridApi.prototype.removeDetailGridInfo = function (id) {\n        this.detailGridInfoMap[id] = undefined;\n    };\n    GridApi.prototype.getDetailGridInfo = function (id) {\n        return this.detailGridInfoMap[id];\n    };\n    GridApi.prototype.forEachDetailGridInfo = function (callback) {\n        var index = 0;\n        utils_1._.iterateObject(this.detailGridInfoMap, function (id, gridInfo) {\n            // check for undefined, as old references will still be lying around\n            if (utils_1._.exists(gridInfo)) {\n                callback(gridInfo, index);\n                index++;\n            }\n        });\n    };\n    GridApi.prototype.getDataAsCsv = function (params) {\n        return this.csvCreator.getDataAsCsv(params);\n    };\n    GridApi.prototype.exportDataAsCsv = function (params) {\n        this.csvCreator.exportDataAsCsv(params);\n    };\n    GridApi.prototype.getDataAsExcel = function (params) {\n        if (!this.excelCreator) {\n            console.warn('ag-Grid: Excel export is only available in ag-Grid Enterprise');\n        }\n        return this.excelCreator.getDataAsExcelXml(params);\n    };\n    GridApi.prototype.exportDataAsExcel = function (params) {\n        if (!this.excelCreator) {\n            console.warn('ag-Grid: Excel export is only available in ag-Grid Enterprise');\n        }\n        this.excelCreator.exportDataAsExcel(params);\n    };\n    /** @deprecated */\n    GridApi.prototype.setEnterpriseDatasource = function (datasource) {\n        console.warn(\"ag-grid: since version 18.x, api.setEnterpriseDatasource() should be replaced with api.setServerSideDatasource()\");\n        this.setServerSideDatasource(datasource);\n    };\n    GridApi.prototype.setServerSideDatasource = function (datasource) {\n        if (this.gridOptionsWrapper.isRowModelServerSide()) {\n            // should really have an IEnterpriseRowModel interface, so we are not casting to any\n            this.rowModel.setDatasource(datasource);\n        }\n        else {\n            console.warn(\"ag-Grid: you can only use an enterprise datasource when gridOptions.rowModelType is '\" + constants_1.Constants.ROW_MODEL_TYPE_SERVER_SIDE + \"'\");\n        }\n    };\n    GridApi.prototype.setDatasource = function (datasource) {\n        if (this.gridOptionsWrapper.isRowModelInfinite()) {\n            this.rowModel.setDatasource(datasource);\n        }\n        else {\n            console.warn(\"ag-Grid: you can only use a datasource when gridOptions.rowModelType is '\" + constants_1.Constants.ROW_MODEL_TYPE_INFINITE + \"'\");\n        }\n    };\n    GridApi.prototype.setViewportDatasource = function (viewportDatasource) {\n        if (this.gridOptionsWrapper.isRowModelViewport()) {\n            // this is bad coding, because it's using an interface that's exposed in the enterprise.\n            // really we should create an interface in the core for viewportDatasource and let\n            // the enterprise implement it, rather than casting to 'any' here\n            this.rowModel.setViewportDatasource(viewportDatasource);\n        }\n        else {\n            console.warn(\"ag-Grid: you can only use a viewport datasource when gridOptions.rowModelType is '\" + constants_1.Constants.ROW_MODEL_TYPE_VIEWPORT + \"'\");\n        }\n    };\n    GridApi.prototype.setRowData = function (rowData) {\n        if (this.gridOptionsWrapper.isRowModelDefault()) {\n            if (this.gridOptionsWrapper.isDeltaRowDataMode()) {\n                var _a = this.immutableService.createTransactionForRowData(rowData), transaction = _a[0], orderIdMap = _a[1];\n                this.clientSideRowModel.updateRowData(transaction, orderIdMap);\n                // need to force updating of full width rows - note this wouldn't be necessary the full width cell comp listened\n                // to the data change event on the row node and refreshed itself.\n                this.rowRenderer.refreshFullWidthRows();\n            }\n            else {\n                this.selectionController.reset();\n                this.clientSideRowModel.setRowData(rowData);\n            }\n        }\n        else {\n            console.warn('cannot call setRowData unless using normal row model');\n        }\n    };\n    /** @deprecated */\n    GridApi.prototype.setFloatingTopRowData = function (rows) {\n        console.warn('ag-Grid: since v12, api.setFloatingTopRowData() is now api.setPinnedTopRowData()');\n        this.setPinnedTopRowData(rows);\n    };\n    /** @deprecated */\n    GridApi.prototype.setFloatingBottomRowData = function (rows) {\n        console.warn('ag-Grid: since v12, api.setFloatingBottomRowData() is now api.setPinnedBottomRowData()');\n        this.setPinnedBottomRowData(rows);\n    };\n    /** @deprecated */\n    GridApi.prototype.getFloatingTopRowCount = function () {\n        console.warn('ag-Grid: since v12, api.getFloatingTopRowCount() is now api.getPinnedTopRowCount()');\n        return this.getPinnedTopRowCount();\n    };\n    /** @deprecated */\n    GridApi.prototype.getFloatingBottomRowCount = function () {\n        console.warn('ag-Grid: since v12, api.getFloatingBottomRowCount() is now api.getPinnedBottomRowCount()');\n        return this.getPinnedBottomRowCount();\n    };\n    /** @deprecated */\n    GridApi.prototype.getFloatingTopRow = function (index) {\n        console.warn('ag-Grid: since v12, api.getFloatingTopRow() is now api.getPinnedTopRow()');\n        return this.getPinnedTopRow(index);\n    };\n    /** @deprecated */\n    GridApi.prototype.getFloatingBottomRow = function (index) {\n        console.warn('ag-Grid: since v12, api.getFloatingBottomRow() is now api.getPinnedBottomRow()');\n        return this.getPinnedBottomRow(index);\n    };\n    GridApi.prototype.setPinnedTopRowData = function (rows) {\n        this.pinnedRowModel.setPinnedTopRowData(rows);\n    };\n    GridApi.prototype.setPinnedBottomRowData = function (rows) {\n        this.pinnedRowModel.setPinnedBottomRowData(rows);\n    };\n    GridApi.prototype.getPinnedTopRowCount = function () {\n        return this.pinnedRowModel.getPinnedTopRowCount();\n    };\n    GridApi.prototype.getPinnedBottomRowCount = function () {\n        return this.pinnedRowModel.getPinnedBottomRowCount();\n    };\n    GridApi.prototype.getPinnedTopRow = function (index) {\n        return this.pinnedRowModel.getPinnedTopRow(index);\n    };\n    GridApi.prototype.getPinnedBottomRow = function (index) {\n        return this.pinnedRowModel.getPinnedBottomRow(index);\n    };\n    GridApi.prototype.setColumnDefs = function (colDefs, source) {\n        if (source === void 0) { source = \"api\"; }\n        this.columnController.setColumnDefs(colDefs, source);\n    };\n    GridApi.prototype.expireValueCache = function () {\n        this.valueCache.expire();\n    };\n    GridApi.prototype.getVerticalPixelRange = function () {\n        return this.gridPanel.getVScrollPosition();\n    };\n    GridApi.prototype.getHorizontalPixelRange = function () {\n        return this.gridPanel.getHScrollPosition();\n    };\n    GridApi.prototype.setAlwaysShowVerticalScroll = function (show) {\n        this.gridOptionsWrapper.setProperty('alwaysShowVerticalScroll', show);\n    };\n    GridApi.prototype.refreshToolPanel = function () {\n        this.gridCore.refreshSideBar();\n    };\n    GridApi.prototype.refreshCells = function (params) {\n        if (params === void 0) { params = {}; }\n        if (Array.isArray(params)) {\n            // the old version of refreshCells() took an array of rowNodes for the first argument\n            console.warn('since ag-Grid v11.1, refreshCells() now takes parameters, please see the documentation.');\n            return;\n        }\n        this.rowRenderer.refreshCells(params);\n    };\n    GridApi.prototype.flashCells = function (params) {\n        if (params === void 0) { params = {}; }\n        this.rowRenderer.flashCells(params);\n    };\n    GridApi.prototype.redrawRows = function (params) {\n        if (params === void 0) { params = {}; }\n        if (params && params.rowNodes) {\n            this.rowRenderer.redrawRows(params.rowNodes);\n        }\n        else {\n            this.rowRenderer.redrawAfterModelUpdate();\n        }\n    };\n    GridApi.prototype.timeFullRedraw = function (count) {\n        if (count === void 0) { count = 1; }\n        var iterationCount = 0;\n        var totalProcessing = 0;\n        var totalReflow = 0;\n        var that = this;\n        doOneIteration();\n        function doOneIteration() {\n            var start = (new Date()).getTime();\n            that.rowRenderer.redrawAfterModelUpdate();\n            var endProcessing = (new Date()).getTime();\n            window.setTimeout(function () {\n                var endReflow = (new Date()).getTime();\n                var durationProcessing = endProcessing - start;\n                var durationReflow = endReflow - endProcessing;\n                // tslint:disable-next-line\n                console.log('duration:  processing = ' + durationProcessing + 'ms, reflow = ' + durationReflow + 'ms');\n                iterationCount++;\n                totalProcessing += durationProcessing;\n                totalReflow += durationReflow;\n                if (iterationCount < count) {\n                    // wait for 1s between tests\n                    window.setTimeout(doOneIteration, 1000);\n                }\n                else {\n                    finish();\n                }\n            }, 0);\n        }\n        function finish() {\n            // tslint:disable-next-line\n            console.log('tests complete. iteration count = ' + iterationCount);\n            // tslint:disable-next-line\n            console.log('average processing = ' + (totalProcessing / iterationCount) + 'ms');\n            // tslint:disable-next-line\n            console.log('average reflow = ' + (totalReflow / iterationCount) + 'ms');\n        }\n    };\n    /** @deprecated */\n    GridApi.prototype.refreshView = function () {\n        console.warn('ag-Grid: since v11.1, refreshView() is deprecated, please call refreshCells() or redrawRows() instead');\n        this.redrawRows();\n    };\n    //** @deprecated */\n    GridApi.prototype.refreshRows = function (rowNodes) {\n        console.warn('since ag-Grid v11.1, refreshRows() is deprecated, please use refreshCells({rowNodes: rows}) or redrawRows({rowNodes: rows}) instead');\n        this.refreshCells({ rowNodes: rowNodes });\n    };\n    /** @deprecated */\n    GridApi.prototype.rowDataChanged = function (rows) {\n        console.warn('ag-Grid: rowDataChanged is deprecated, either call refreshView() to refresh everything, or call rowNode.setRowData(newData) to set value on a particular node');\n        this.redrawRows();\n    };\n    /** @deprecated */\n    GridApi.prototype.softRefreshView = function () {\n        console.error('ag-Grid: since v16, softRefreshView() is no longer supported. Please check the documentation on how to refresh.');\n    };\n    /** @deprecated */\n    GridApi.prototype.refreshGroupRows = function () {\n        console.warn('ag-Grid: since v11.1, refreshGroupRows() is no longer supported, call refreshCells() instead. ' +\n            'Because refreshCells() now does dirty checking, it will only refresh cells that have changed, so it should ' +\n            'not be necessary to only refresh the group rows.');\n        this.refreshCells();\n    };\n    GridApi.prototype.setFunctionsReadOnly = function (readOnly) {\n        this.gridOptionsWrapper.setProperty('functionsReadOnly', readOnly);\n    };\n    GridApi.prototype.refreshHeader = function () {\n        this.headerRootComp.refreshHeader();\n        this.gridPanel.setHeaderAndFloatingHeights();\n    };\n    GridApi.prototype.isAnyFilterPresent = function () {\n        return this.filterManager.isAnyFilterPresent();\n    };\n    GridApi.prototype.isAdvancedFilterPresent = function () {\n        console.warn('ag-Grid: isAdvancedFilterPresent() is deprecated, please use isColumnFilterPresent()');\n        return this.isColumnFilterPresent();\n    };\n    GridApi.prototype.isColumnFilterPresent = function () {\n        return this.filterManager.isAdvancedFilterPresent();\n    };\n    GridApi.prototype.isQuickFilterPresent = function () {\n        return this.filterManager.isQuickFilterPresent();\n    };\n    GridApi.prototype.getModel = function () {\n        return this.rowModel;\n    };\n    GridApi.prototype.setRowNodeExpanded = function (rowNode, expanded) {\n        if (rowNode) {\n            rowNode.setExpanded(expanded);\n        }\n    };\n    GridApi.prototype.onGroupExpandedOrCollapsed = function (deprecated_refreshFromIndex) {\n        if (utils_1._.missing(this.clientSideRowModel)) {\n            console.warn('ag-Grid: cannot call onGroupExpandedOrCollapsed unless using normal row model');\n        }\n        if (utils_1._.exists(deprecated_refreshFromIndex)) {\n            console.warn('ag-Grid: api.onGroupExpandedOrCollapsed - refreshFromIndex parameter is no longer used, the grid will refresh all rows');\n        }\n        // we don't really want the user calling this if only one rowNode was expanded, instead they should be\n        // calling rowNode.setExpanded(boolean) - this way we do a 'keepRenderedRows=false' so that the whole\n        // grid gets refreshed again - otherwise the row with the rowNodes that were changed won't get updated,\n        // and thus the expand icon in the group cell won't get 'opened' or 'closed'.\n        this.clientSideRowModel.refreshModel({ step: constants_1.Constants.STEP_MAP });\n    };\n    GridApi.prototype.refreshInMemoryRowModel = function (step) {\n        console.warn(\"ag-grid: since version 18.x, api.refreshInMemoryRowModel() should be replaced with api.refreshClientSideRowModel()\");\n        this.refreshClientSideRowModel(step);\n    };\n    GridApi.prototype.refreshClientSideRowModel = function (step) {\n        if (utils_1._.missing(this.clientSideRowModel)) {\n            console.warn('cannot call refreshClientSideRowModel unless using normal row model');\n        }\n        var paramsStep = constants_1.Constants.STEP_EVERYTHING;\n        var stepsMapped = {\n            group: constants_1.Constants.STEP_EVERYTHING,\n            filter: constants_1.Constants.STEP_FILTER,\n            map: constants_1.Constants.STEP_MAP,\n            aggregate: constants_1.Constants.STEP_AGGREGATE,\n            sort: constants_1.Constants.STEP_SORT,\n            pivot: constants_1.Constants.STEP_PIVOT\n        };\n        if (utils_1._.exists(step)) {\n            paramsStep = stepsMapped[step];\n        }\n        if (utils_1._.missing(paramsStep)) {\n            console.error(\"ag-Grid: invalid step \" + step + \", available steps are \" + Object.keys(stepsMapped).join(', '));\n            return;\n        }\n        var modelParams = {\n            step: paramsStep,\n            keepRenderedRows: true,\n            animate: true,\n            keepEditingRows: true\n        };\n        this.clientSideRowModel.refreshModel(modelParams);\n    };\n    GridApi.prototype.isAnimationFrameQueueEmpty = function () {\n        return this.animationFrameService.isQueueEmpty();\n    };\n    GridApi.prototype.getRowNode = function (id) {\n        return this.rowModel.getRowNode(id);\n    };\n    GridApi.prototype.expandAll = function () {\n        if (utils_1._.missing(this.clientSideRowModel)) {\n            console.warn('ag-Grid: cannot call expandAll unless using normal row model');\n            return;\n        }\n        this.clientSideRowModel.expandOrCollapseAll(true);\n    };\n    GridApi.prototype.collapseAll = function () {\n        if (utils_1._.missing(this.clientSideRowModel)) {\n            console.warn('ag-Grid: cannot call collapseAll unless using normal row model');\n            return;\n        }\n        this.clientSideRowModel.expandOrCollapseAll(false);\n    };\n    GridApi.prototype.addVirtualRowListener = function (eventName, rowIndex, callback) {\n        if (typeof eventName !== 'string') {\n            console.warn('ag-Grid: addVirtualRowListener is deprecated, please use addRenderedRowListener.');\n        }\n        this.addRenderedRowListener(eventName, rowIndex, callback);\n    };\n    GridApi.prototype.addRenderedRowListener = function (eventName, rowIndex, callback) {\n        if (eventName === 'virtualRowSelected') {\n            console.warn(\"ag-Grid: event virtualRowSelected is deprecated, to register for individual row\\n                selection events, add a listener directly to the row node.\");\n        }\n        this.rowRenderer.addRenderedRowListener(eventName, rowIndex, callback);\n    };\n    GridApi.prototype.setQuickFilter = function (newFilter) {\n        this.filterManager.setQuickFilter(newFilter);\n    };\n    GridApi.prototype.selectIndex = function (index, tryMulti, suppressEvents) {\n        console.warn('ag-Grid: do not use api for selection, call node.setSelected(value) instead');\n        if (suppressEvents) {\n            console.warn('ag-Grid: suppressEvents is no longer supported, stop listening for the event if you no longer want it');\n        }\n        this.selectionController.selectIndex(index, tryMulti);\n    };\n    GridApi.prototype.deselectIndex = function (index, suppressEvents) {\n        if (suppressEvents === void 0) { suppressEvents = false; }\n        console.warn('ag-Grid: do not use api for selection, call node.setSelected(value) instead');\n        if (suppressEvents) {\n            console.warn('ag-Grid: suppressEvents is no longer supported, stop listening for the event if you no longer want it');\n        }\n        this.selectionController.deselectIndex(index);\n    };\n    GridApi.prototype.selectNode = function (node, tryMulti, suppressEvents) {\n        if (tryMulti === void 0) { tryMulti = false; }\n        if (suppressEvents === void 0) { suppressEvents = false; }\n        console.warn('ag-Grid: API for selection is deprecated, call node.setSelected(value) instead');\n        if (suppressEvents) {\n            console.warn('ag-Grid: suppressEvents is no longer supported, stop listening for the event if you no longer want it');\n        }\n        node.setSelectedParams({ newValue: true, clearSelection: !tryMulti });\n    };\n    GridApi.prototype.deselectNode = function (node, suppressEvents) {\n        if (suppressEvents === void 0) { suppressEvents = false; }\n        console.warn('ag-Grid: API for selection is deprecated, call node.setSelected(value) instead');\n        if (suppressEvents) {\n            console.warn('ag-Grid: suppressEvents is no longer supported, stop listening for the event if you no longer want it');\n        }\n        node.setSelectedParams({ newValue: false });\n    };\n    GridApi.prototype.selectAll = function () {\n        this.selectionController.selectAllRowNodes();\n    };\n    GridApi.prototype.deselectAll = function () {\n        this.selectionController.deselectAllRowNodes();\n    };\n    GridApi.prototype.selectAllFiltered = function () {\n        this.selectionController.selectAllRowNodes(true);\n    };\n    GridApi.prototype.deselectAllFiltered = function () {\n        this.selectionController.deselectAllRowNodes(true);\n    };\n    GridApi.prototype.recomputeAggregates = function () {\n        if (utils_1._.missing(this.clientSideRowModel)) {\n            console.warn('cannot call recomputeAggregates unless using normal row model');\n        }\n        console.warn(\"recomputeAggregates is deprecated, please call api.refreshClientSideRowModel('aggregate') instead\");\n        this.clientSideRowModel.refreshModel({ step: constants_1.Constants.STEP_AGGREGATE });\n    };\n    GridApi.prototype.sizeColumnsToFit = function () {\n        this.gridPanel.sizeColumnsToFit();\n    };\n    GridApi.prototype.showLoadingOverlay = function () {\n        this.gridPanel.showLoadingOverlay();\n    };\n    GridApi.prototype.showNoRowsOverlay = function () {\n        this.gridPanel.showNoRowsOverlay();\n    };\n    GridApi.prototype.hideOverlay = function () {\n        this.gridPanel.hideOverlay();\n    };\n    GridApi.prototype.isNodeSelected = function (node) {\n        console.warn('ag-Grid: no need to call api.isNodeSelected(), just call node.isSelected() instead');\n        return node.isSelected();\n    };\n    GridApi.prototype.getSelectedNodesById = function () {\n        console.error('ag-Grid: since version 3.4, getSelectedNodesById no longer exists, use getSelectedNodes() instead');\n        return null;\n    };\n    GridApi.prototype.getSelectedNodes = function () {\n        return this.selectionController.getSelectedNodes();\n    };\n    GridApi.prototype.getSelectedRows = function () {\n        return this.selectionController.getSelectedRows();\n    };\n    GridApi.prototype.getBestCostNodeSelection = function () {\n        return this.selectionController.getBestCostNodeSelection();\n    };\n    GridApi.prototype.getRenderedNodes = function () {\n        return this.rowRenderer.getRenderedNodes();\n    };\n    GridApi.prototype.ensureColIndexVisible = function (index) {\n        console.warn('ag-Grid: ensureColIndexVisible(index) no longer supported, use ensureColumnVisible(colKey) instead.');\n    };\n    GridApi.prototype.ensureColumnVisible = function (key) {\n        this.gridPanel.ensureColumnVisible(key);\n    };\n    // Valid values for position are bottom, middle and top\n    GridApi.prototype.ensureIndexVisible = function (index, position) {\n        this.gridPanel.ensureIndexVisible(index, position);\n    };\n    // Valid values for position are bottom, middle and top\n    GridApi.prototype.ensureNodeVisible = function (comparator, position) {\n        this.gridCore.ensureNodeVisible(comparator, position);\n    };\n    GridApi.prototype.forEachLeafNode = function (callback) {\n        if (utils_1._.missing(this.clientSideRowModel)) {\n            console.warn('cannot call forEachNode unless using normal row model');\n        }\n        this.clientSideRowModel.forEachLeafNode(callback);\n    };\n    GridApi.prototype.forEachNode = function (callback) {\n        this.rowModel.forEachNode(callback);\n    };\n    GridApi.prototype.forEachNodeAfterFilter = function (callback) {\n        if (utils_1._.missing(this.clientSideRowModel)) {\n            console.warn('cannot call forEachNodeAfterFilter unless using normal row model');\n        }\n        this.clientSideRowModel.forEachNodeAfterFilter(callback);\n    };\n    GridApi.prototype.forEachNodeAfterFilterAndSort = function (callback) {\n        if (utils_1._.missing(this.clientSideRowModel)) {\n            console.warn('cannot call forEachNodeAfterFilterAndSort unless using normal row model');\n        }\n        this.clientSideRowModel.forEachNodeAfterFilterAndSort(callback);\n    };\n    GridApi.prototype.getFilterApiForColDef = function (colDef) {\n        console.warn('ag-grid API method getFilterApiForColDef deprecated, use getFilterApi instead');\n        return this.getFilterInstance(colDef);\n    };\n    GridApi.prototype.getFilterInstance = function (key) {\n        var column = this.columnController.getPrimaryColumn(key);\n        if (column) {\n            return this.filterManager.getFilterComponent(column, 'NO_UI').resolveNow(null, function (filterComp) { return filterComp; });\n        }\n    };\n    GridApi.prototype.getFilterApi = function (key) {\n        console.warn('ag-Grid: getFilterApi is deprecated, use getFilterInstance instead');\n        return this.getFilterInstance(key);\n    };\n    GridApi.prototype.destroyFilter = function (key) {\n        var column = this.columnController.getPrimaryColumn(key);\n        if (column) {\n            return this.filterManager.destroyFilter(column, \"filterDestroyed\");\n        }\n    };\n    GridApi.prototype.getStatusPanel = function (key) {\n        if (this.statusBarService) {\n            return this.statusBarService.getStatusPanel(key);\n        }\n    };\n    GridApi.prototype.getColumnDef = function (key) {\n        var column = this.columnController.getPrimaryColumn(key);\n        if (column) {\n            return column.getColDef();\n        }\n        else {\n            return null;\n        }\n    };\n    GridApi.prototype.onFilterChanged = function () {\n        this.filterManager.onFilterChanged();\n    };\n    GridApi.prototype.onSortChanged = function () {\n        this.sortController.onSortChanged();\n    };\n    GridApi.prototype.setSortModel = function (sortModel, source) {\n        if (source === void 0) { source = \"api\"; }\n        this.sortController.setSortModel(sortModel, source);\n    };\n    GridApi.prototype.getSortModel = function () {\n        return this.sortController.getSortModel();\n    };\n    GridApi.prototype.setFilterModel = function (model) {\n        this.filterManager.setFilterModel(model);\n    };\n    GridApi.prototype.getFilterModel = function () {\n        return this.filterManager.getFilterModel();\n    };\n    GridApi.prototype.getFocusedCell = function () {\n        return this.focusedCellController.getFocusedCell();\n    };\n    GridApi.prototype.clearFocusedCell = function () {\n        return this.focusedCellController.clearFocusedCell();\n    };\n    GridApi.prototype.setFocusedCell = function (rowIndex, colKey, floating) {\n        this.focusedCellController.setFocusedCell(rowIndex, colKey, floating, true);\n    };\n    GridApi.prototype.setSuppressRowDrag = function (value) {\n        this.gridOptionsWrapper.setProperty(gridOptionsWrapper_1.GridOptionsWrapper.PROP_SUPPRESS_ROW_DRAG, value);\n    };\n    GridApi.prototype.setHeaderHeight = function (headerHeight) {\n        this.gridOptionsWrapper.setProperty(gridOptionsWrapper_1.GridOptionsWrapper.PROP_HEADER_HEIGHT, headerHeight);\n        this.doLayout();\n    };\n    GridApi.prototype.setGridAutoHeight = function (gridAutoHeight) {\n        console.warn('api.setGridAutoHeight(boolean) is deprecated, please use api.setDomLayout() instead');\n        this.setDomLayout(gridAutoHeight ? 'autoHeight' : 'normal');\n    };\n    GridApi.prototype.setDomLayout = function (domLayout) {\n        this.gridOptionsWrapper.setProperty(gridOptionsWrapper_1.GridOptionsWrapper.PROP_DOM_LAYOUT, domLayout);\n    };\n    GridApi.prototype.setEnableCellTextSelection = function (selectable) {\n        this.gridPanel.setCellTextSelection(selectable);\n    };\n    GridApi.prototype.setGroupHeaderHeight = function (headerHeight) {\n        this.gridOptionsWrapper.setProperty(gridOptionsWrapper_1.GridOptionsWrapper.PROP_GROUP_HEADER_HEIGHT, headerHeight);\n        this.doLayout();\n    };\n    GridApi.prototype.setFloatingFiltersHeight = function (headerHeight) {\n        this.gridOptionsWrapper.setProperty(gridOptionsWrapper_1.GridOptionsWrapper.PROP_FLOATING_FILTERS_HEIGHT, headerHeight);\n        this.doLayout();\n    };\n    GridApi.prototype.setPivotGroupHeaderHeight = function (headerHeight) {\n        this.gridOptionsWrapper.setProperty(gridOptionsWrapper_1.GridOptionsWrapper.PROP_PIVOT_GROUP_HEADER_HEIGHT, headerHeight);\n        this.doLayout();\n    };\n    GridApi.prototype.setPivotHeaderHeight = function (headerHeight) {\n        this.gridOptionsWrapper.setProperty(gridOptionsWrapper_1.GridOptionsWrapper.PROP_PIVOT_HEADER_HEIGHT, headerHeight);\n        this.doLayout();\n    };\n    GridApi.prototype.isSideBarVisible = function () {\n        return this.gridCore.isSideBarVisible();\n    };\n    GridApi.prototype.setSideBarVisible = function (show) {\n        this.gridCore.setSideBarVisible(show);\n    };\n    GridApi.prototype.showToolPanel = function (show) {\n        console.warn(\"ag-grid: from v19 api.showToolPanel has been deprecated in favour of api.setSideBarVisible\");\n        this.setSideBarVisible(show);\n    };\n    GridApi.prototype.openToolPanel = function (key) {\n        this.gridCore.openToolPanel(key);\n    };\n    GridApi.prototype.closeToolPanel = function () {\n        this.gridCore.closeToolPanel();\n    };\n    GridApi.prototype.getOpenedToolPanel = function () {\n        return this.gridCore.getOpenedToolPanel();\n    };\n    GridApi.prototype.getSideBar = function () {\n        return this.gridCore.getSideBar();\n    };\n    GridApi.prototype.setSideBar = function (def) {\n        return this.gridCore.setSideBar(def);\n    };\n    GridApi.prototype.setSuppressClipboardPaste = function (value) {\n        this.gridOptionsWrapper.setProperty(gridOptionsWrapper_1.GridOptionsWrapper.PROP_SUPPRESS_CLIPBOARD_PASTE, value);\n    };\n    GridApi.prototype.isToolPanelShowing = function () {\n        return this.gridCore.isToolPanelShowing();\n    };\n    GridApi.prototype.doLayout = function () {\n        this.gridPanel.checkViewportAndScrolls();\n    };\n    GridApi.prototype.resetRowHeights = function () {\n        if (utils_1._.exists(this.clientSideRowModel)) {\n            this.clientSideRowModel.resetRowHeights();\n        }\n    };\n    GridApi.prototype.setGroupRemoveSingleChildren = function (value) {\n        this.gridOptionsWrapper.setProperty(gridOptionsWrapper_1.GridOptionsWrapper.PROP_GROUP_REMOVE_SINGLE_CHILDREN, value);\n    };\n    GridApi.prototype.setGroupRemoveLowestSingleChildren = function (value) {\n        this.gridOptionsWrapper.setProperty(gridOptionsWrapper_1.GridOptionsWrapper.PROP_GROUP_REMOVE_LOWEST_SINGLE_CHILDREN, value);\n    };\n    GridApi.prototype.onRowHeightChanged = function () {\n        if (utils_1._.exists(this.clientSideRowModel)) {\n            this.clientSideRowModel.onRowHeightChanged();\n        }\n    };\n    GridApi.prototype.getValue = function (colKey, rowNode) {\n        var column = this.columnController.getPrimaryColumn(colKey);\n        if (utils_1._.missing(column)) {\n            column = this.columnController.getGridColumn(colKey);\n        }\n        if (utils_1._.missing(column)) {\n            return null;\n        }\n        else {\n            return this.valueService.getValue(column, rowNode);\n        }\n    };\n    GridApi.prototype.addEventListener = function (eventType, listener) {\n        var async = this.gridOptionsWrapper.useAsyncEvents();\n        this.eventService.addEventListener(eventType, listener, async);\n    };\n    GridApi.prototype.addGlobalListener = function (listener) {\n        var async = this.gridOptionsWrapper.useAsyncEvents();\n        this.eventService.addGlobalListener(listener, async);\n    };\n    GridApi.prototype.removeEventListener = function (eventType, listener) {\n        var async = this.gridOptionsWrapper.useAsyncEvents();\n        this.eventService.removeEventListener(eventType, listener, async);\n    };\n    GridApi.prototype.removeGlobalListener = function (listener) {\n        var async = this.gridOptionsWrapper.useAsyncEvents();\n        this.eventService.removeGlobalListener(listener, async);\n    };\n    GridApi.prototype.dispatchEvent = function (event) {\n        this.eventService.dispatchEvent(event);\n    };\n    GridApi.prototype.destroy = function () {\n        // destroy the UI first (as they use the services)\n        this.gridCore.destroy();\n        // destroy the services\n        this.context.destroy();\n    };\n    GridApi.prototype.resetQuickFilter = function () {\n        this.rowModel.forEachNode(function (node) { return node.quickFilterAggregateText = null; });\n    };\n    GridApi.prototype.getRangeSelections = function () {\n        console.warn(\"ag-Grid: in v20.1.x, api.getRangeSelections() is gone, please use getCellRanges() instead.\\n        We had to change how cell selections works a small bit to allow charting to integrate. The return type of\\n        getCellRanges() is a bit different, please check the ag-Grid documentation.\");\n        return null;\n    };\n    GridApi.prototype.getCellRanges = function () {\n        if (this.rangeController) {\n            return this.rangeController.getCellRanges();\n        }\n        else {\n            console.warn('ag-Grid: cell range selection is only available in ag-Grid Enterprise');\n            return null;\n        }\n    };\n    GridApi.prototype.camelCaseToHumanReadable = function (camelCase) {\n        return utils_1._.camelCaseToHumanText(camelCase);\n    };\n    GridApi.prototype.addRangeSelection = function (deprecatedNoLongerUsed) {\n        console.warn('ag-Grid: As of version 21.x, range selection changed slightly to allow charting integration. Please call api.addCellRange() instead of api.addRangeSelection()');\n    };\n    GridApi.prototype.addCellRange = function (params) {\n        if (!this.rangeController) {\n            console.warn('ag-Grid: cell range selection is only available in ag-Grid Enterprise');\n        }\n        this.rangeController.addCellRange(params);\n    };\n    GridApi.prototype.clearRangeSelection = function () {\n        if (!this.rangeController) {\n            console.warn('ag-Grid: cell range selection is only available in ag-Grid Enterprise');\n        }\n        this.rangeController.removeAllCellRanges();\n    };\n    GridApi.prototype.chartRange = function (params) {\n        if (!this.context.isModuleRegistered(\"chartsModule\" /* ChartsModule */)) {\n            utils_1._.doOnce(function () {\n                console.warn('ag-grid: Cannot chart range - the Charts Module has not been included.');\n            }, 'ChartsModuleCheck');\n            return;\n        }\n        return this.chartService.chartCellRange(params);\n    };\n    GridApi.prototype.copySelectedRowsToClipboard = function (includeHeader, columnKeys) {\n        if (!this.clipboardService) {\n            console.warn('ag-Grid: clipboard is only available in ag-Grid Enterprise');\n        }\n        this.clipboardService.copySelectedRowsToClipboard(includeHeader, columnKeys);\n    };\n    GridApi.prototype.copySelectedRangeToClipboard = function (includeHeader) {\n        if (!this.clipboardService) {\n            console.warn('ag-Grid: clipboard is only available in ag-Grid Enterprise');\n        }\n        this.clipboardService.copySelectedRangeToClipboard(includeHeader);\n    };\n    GridApi.prototype.copySelectedRangeDown = function () {\n        if (!this.clipboardService) {\n            console.warn('ag-Grid: clipboard is only available in ag-Grid Enterprise');\n        }\n        this.clipboardService.copyRangeDown();\n    };\n    GridApi.prototype.showColumnMenuAfterButtonClick = function (colKey, buttonElement) {\n        // use grid column so works with pivot mode\n        var column = this.columnController.getGridColumn(colKey);\n        this.menuFactory.showMenuAfterButtonClick(column, buttonElement);\n    };\n    GridApi.prototype.showColumnMenuAfterMouseClick = function (colKey, mouseEvent) {\n        // use grid column so works with pivot mode\n        var column = this.columnController.getGridColumn(colKey);\n        this.menuFactory.showMenuAfterMouseEvent(column, mouseEvent);\n    };\n    GridApi.prototype.hidePopupMenu = function () {\n        // hide the context menu if in enterprise\n        if (this.contextMenuFactory) {\n            this.contextMenuFactory.hideActiveMenu();\n        }\n        // and hide the column menu always\n        this.menuFactory.hideActiveMenu();\n    };\n    GridApi.prototype.setPopupParent = function (ePopupParent) {\n        this.gridOptionsWrapper.setProperty(gridOptionsWrapper_1.GridOptionsWrapper.PROP_POPUP_PARENT, ePopupParent);\n    };\n    GridApi.prototype.tabToNextCell = function () {\n        return this.rowRenderer.tabToNextCell(false);\n    };\n    GridApi.prototype.tabToPreviousCell = function () {\n        return this.rowRenderer.tabToNextCell(true);\n    };\n    GridApi.prototype.getCellRendererInstances = function (params) {\n        if (params === void 0) { params = {}; }\n        return this.rowRenderer.getCellRendererInstances(params);\n    };\n    GridApi.prototype.getCellEditorInstances = function (params) {\n        if (params === void 0) { params = {}; }\n        return this.rowRenderer.getCellEditorInstances(params);\n    };\n    GridApi.prototype.getEditingCells = function () {\n        return this.rowRenderer.getEditingCells();\n    };\n    GridApi.prototype.stopEditing = function (cancel) {\n        if (cancel === void 0) { cancel = false; }\n        this.rowRenderer.stopEditing(cancel);\n    };\n    GridApi.prototype.startEditingCell = function (params) {\n        var column = this.columnController.getGridColumn(params.colKey);\n        if (!column) {\n            console.warn(\"ag-Grid: no column found for \" + params.colKey);\n            return;\n        }\n        var cellPosition = {\n            rowIndex: params.rowIndex,\n            rowPinned: params.rowPinned,\n            column: column\n        };\n        var notPinned = utils_1._.missing(params.rowPinned);\n        if (notPinned) {\n            this.gridPanel.ensureIndexVisible(params.rowIndex);\n        }\n        this.rowRenderer.startEditingCell(cellPosition, params.keyPress, params.charPress);\n    };\n    GridApi.prototype.addAggFunc = function (key, aggFunc) {\n        if (this.aggFuncService) {\n            this.aggFuncService.addAggFunc(key, aggFunc);\n        }\n    };\n    GridApi.prototype.addAggFuncs = function (aggFuncs) {\n        if (this.aggFuncService) {\n            this.aggFuncService.addAggFuncs(aggFuncs);\n        }\n    };\n    GridApi.prototype.clearAggFuncs = function () {\n        if (this.aggFuncService) {\n            this.aggFuncService.clear();\n        }\n    };\n    GridApi.prototype.updateRowData = function (rowDataTransaction) {\n        var res = null;\n        if (this.clientSideRowModel) {\n            res = this.clientSideRowModel.updateRowData(rowDataTransaction);\n        }\n        else if (this.infinitePageRowModel) {\n            this.infinitePageRowModel.updateRowData(rowDataTransaction);\n        }\n        else {\n            console.error('ag-Grid: updateRowData() only works with ClientSideRowModel and InfiniteRowModel.');\n        }\n        // refresh all the full width rows\n        this.rowRenderer.refreshFullWidthRows();\n        // do change detection for all present cells\n        if (!this.gridOptionsWrapper.isSuppressChangeDetection()) {\n            this.rowRenderer.refreshCells();\n        }\n        return res;\n    };\n    GridApi.prototype.batchUpdateRowData = function (rowDataTransaction, callback) {\n        if (!this.clientSideRowModel) {\n            console.error('ag-Grid: api.batchUpdateRowData() only works with ClientSideRowModel.');\n            return;\n        }\n        this.clientSideRowModel.batchUpdateRowData(rowDataTransaction, callback);\n    };\n    GridApi.prototype.insertItemsAtIndex = function (index, items, skipRefresh) {\n        if (skipRefresh === void 0) { skipRefresh = false; }\n        console.warn('ag-Grid: insertItemsAtIndex() is deprecated, use updateRowData(transaction) instead.');\n        this.updateRowData({ add: items, addIndex: index, update: null, remove: null });\n    };\n    GridApi.prototype.removeItems = function (rowNodes, skipRefresh) {\n        if (skipRefresh === void 0) { skipRefresh = false; }\n        console.warn('ag-Grid: removeItems() is deprecated, use updateRowData(transaction) instead.');\n        var dataToRemove = rowNodes.map(function (rowNode) { return rowNode.data; });\n        this.updateRowData({ add: null, addIndex: null, update: null, remove: dataToRemove });\n    };\n    GridApi.prototype.addItems = function (items, skipRefresh) {\n        if (skipRefresh === void 0) { skipRefresh = false; }\n        console.warn('ag-Grid: addItems() is deprecated, use updateRowData(transaction) instead.');\n        this.updateRowData({ add: items, addIndex: null, update: null, remove: null });\n    };\n    GridApi.prototype.refreshVirtualPageCache = function () {\n        console.warn('ag-Grid: refreshVirtualPageCache() is now called refreshInfiniteCache(), please call refreshInfiniteCache() instead');\n        this.refreshInfiniteCache();\n    };\n    GridApi.prototype.refreshInfinitePageCache = function () {\n        console.warn('ag-Grid: refreshInfinitePageCache() is now called refreshInfiniteCache(), please call refreshInfiniteCache() instead');\n        this.refreshInfiniteCache();\n    };\n    GridApi.prototype.refreshInfiniteCache = function () {\n        if (this.infinitePageRowModel) {\n            this.infinitePageRowModel.refreshCache();\n        }\n        else {\n            console.warn(\"ag-Grid: api.refreshInfiniteCache is only available when rowModelType='infinite'.\");\n        }\n    };\n    GridApi.prototype.purgeVirtualPageCache = function () {\n        console.warn('ag-Grid: purgeVirtualPageCache() is now called purgeInfiniteCache(), please call purgeInfiniteCache() instead');\n        this.purgeInfinitePageCache();\n    };\n    GridApi.prototype.purgeInfinitePageCache = function () {\n        console.warn('ag-Grid: purgeInfinitePageCache() is now called purgeInfiniteCache(), please call purgeInfiniteCache() instead');\n        this.purgeInfiniteCache();\n    };\n    GridApi.prototype.purgeInfiniteCache = function () {\n        if (this.infinitePageRowModel) {\n            this.infinitePageRowModel.purgeCache();\n        }\n        else {\n            console.warn(\"ag-Grid: api.purgeInfiniteCache is only available when rowModelType='infinite'.\");\n        }\n    };\n    /** @deprecated */\n    GridApi.prototype.purgeEnterpriseCache = function (route) {\n        console.warn(\"ag-grid: since version 18.x, api.purgeEnterpriseCache() should be replaced with api.purgeServerSideCache()\");\n        this.purgeServerSideCache(route);\n    };\n    GridApi.prototype.purgeServerSideCache = function (route) {\n        if (this.serverSideRowModel) {\n            this.serverSideRowModel.purgeCache(route);\n        }\n        else {\n            console.warn(\"ag-Grid: api.purgeServerSideCache is only available when rowModelType='enterprise'.\");\n        }\n    };\n    GridApi.prototype.getVirtualRowCount = function () {\n        console.warn('ag-Grid: getVirtualRowCount() is now called getInfiniteRowCount(), please call getInfiniteRowCount() instead');\n        return this.getInfiniteRowCount();\n    };\n    GridApi.prototype.getInfiniteRowCount = function () {\n        if (this.infinitePageRowModel) {\n            return this.infinitePageRowModel.getVirtualRowCount();\n        }\n        else {\n            console.warn(\"ag-Grid: api.getVirtualRowCount is only available when rowModelType='virtual'.\");\n        }\n    };\n    GridApi.prototype.isMaxRowFound = function () {\n        if (this.infinitePageRowModel) {\n            return this.infinitePageRowModel.isMaxRowFound();\n        }\n        else {\n            console.warn(\"ag-Grid: api.isMaxRowFound is only available when rowModelType='virtual'.\");\n        }\n    };\n    GridApi.prototype.setVirtualRowCount = function (rowCount, maxRowFound) {\n        console.warn('ag-Grid: setVirtualRowCount() is now called setInfiniteRowCount(), please call setInfiniteRowCount() instead');\n        this.setInfiniteRowCount(rowCount, maxRowFound);\n    };\n    GridApi.prototype.setInfiniteRowCount = function (rowCount, maxRowFound) {\n        if (this.infinitePageRowModel) {\n            this.infinitePageRowModel.setVirtualRowCount(rowCount, maxRowFound);\n        }\n        else {\n            console.warn(\"ag-Grid: api.setVirtualRowCount is only available when rowModelType='virtual'.\");\n        }\n    };\n    GridApi.prototype.getVirtualPageState = function () {\n        console.warn('ag-Grid: getVirtualPageState() is now called getCacheBlockState(), please call getCacheBlockState() instead');\n        return this.getCacheBlockState();\n    };\n    GridApi.prototype.getInfinitePageState = function () {\n        console.warn('ag-Grid: getInfinitePageState() is now called getCacheBlockState(), please call getCacheBlockState() instead');\n        return this.getCacheBlockState();\n    };\n    GridApi.prototype.getCacheBlockState = function () {\n        if (this.infinitePageRowModel) {\n            return this.infinitePageRowModel.getBlockState();\n        }\n        else if (this.serverSideRowModel) {\n            return this.serverSideRowModel.getBlockState();\n        }\n        else {\n            console.warn(\"ag-Grid: api.getCacheBlockState() is only available when rowModelType='infinite' or rowModelType='serverSide'.\");\n        }\n    };\n    GridApi.prototype.checkGridSize = function () {\n        this.gridPanel.setHeaderAndFloatingHeights();\n    };\n    GridApi.prototype.getFirstRenderedRow = function () {\n        console.warn('in ag-Grid v12, getFirstRenderedRow() was renamed to getFirstDisplayedRow()');\n        return this.getFirstDisplayedRow();\n    };\n    GridApi.prototype.getFirstDisplayedRow = function () {\n        return this.rowRenderer.getFirstVirtualRenderedRow();\n    };\n    GridApi.prototype.getLastRenderedRow = function () {\n        console.warn('in ag-Grid v12, getLastRenderedRow() was renamed to getLastDisplayedRow()');\n        return this.getLastDisplayedRow();\n    };\n    GridApi.prototype.getLastDisplayedRow = function () {\n        return this.rowRenderer.getLastVirtualRenderedRow();\n    };\n    GridApi.prototype.getDisplayedRowAtIndex = function (index) {\n        return this.rowModel.getRow(index);\n    };\n    GridApi.prototype.getDisplayedRowCount = function () {\n        return this.rowModel.getRowCount();\n    };\n    GridApi.prototype.paginationIsLastPageFound = function () {\n        return this.paginationProxy.isLastPageFound();\n    };\n    GridApi.prototype.paginationGetPageSize = function () {\n        return this.paginationProxy.getPageSize();\n    };\n    GridApi.prototype.paginationSetPageSize = function (size) {\n        this.gridOptionsWrapper.setProperty('paginationPageSize', size);\n    };\n    GridApi.prototype.paginationGetCurrentPage = function () {\n        return this.paginationProxy.getCurrentPage();\n    };\n    GridApi.prototype.paginationGetTotalPages = function () {\n        return this.paginationProxy.getTotalPages();\n    };\n    GridApi.prototype.paginationGetRowCount = function () {\n        return this.paginationProxy.getMasterRowCount();\n    };\n    GridApi.prototype.paginationGoToNextPage = function () {\n        this.paginationProxy.goToNextPage();\n    };\n    GridApi.prototype.paginationGoToPreviousPage = function () {\n        this.paginationProxy.goToPreviousPage();\n    };\n    GridApi.prototype.paginationGoToFirstPage = function () {\n        this.paginationProxy.goToFirstPage();\n    };\n    GridApi.prototype.paginationGoToLastPage = function () {\n        this.paginationProxy.goToLastPage();\n    };\n    GridApi.prototype.paginationGoToPage = function (page) {\n        this.paginationProxy.goToPage(page);\n    };\n    __decorate([\n        context_1.Autowired('immutableService'),\n        __metadata(\"design:type\", immutableService_1.ImmutableService)\n    ], GridApi.prototype, \"immutableService\", void 0);\n    __decorate([\n        context_1.Autowired('csvCreator'),\n        __metadata(\"design:type\", csvCreator_1.CsvCreator)\n    ], GridApi.prototype, \"csvCreator\", void 0);\n    __decorate([\n        context_1.Optional('excelCreator'),\n        __metadata(\"design:type\", Object)\n    ], GridApi.prototype, \"excelCreator\", void 0);\n    __decorate([\n        context_1.Autowired('rowRenderer'),\n        __metadata(\"design:type\", rowRenderer_1.RowRenderer)\n    ], GridApi.prototype, \"rowRenderer\", void 0);\n    __decorate([\n        context_1.Autowired('filterManager'),\n        __metadata(\"design:type\", filterManager_1.FilterManager)\n    ], GridApi.prototype, \"filterManager\", void 0);\n    __decorate([\n        context_1.Autowired('columnController'),\n        __metadata(\"design:type\", columnController_1.ColumnController)\n    ], GridApi.prototype, \"columnController\", void 0);\n    __decorate([\n        context_1.Autowired('selectionController'),\n        __metadata(\"design:type\", selectionController_1.SelectionController)\n    ], GridApi.prototype, \"selectionController\", void 0);\n    __decorate([\n        context_1.Autowired('gridOptionsWrapper'),\n        __metadata(\"design:type\", gridOptionsWrapper_1.GridOptionsWrapper)\n    ], GridApi.prototype, \"gridOptionsWrapper\", void 0);\n    __decorate([\n        context_1.Autowired('valueService'),\n        __metadata(\"design:type\", valueService_1.ValueService)\n    ], GridApi.prototype, \"valueService\", void 0);\n    __decorate([\n        context_1.Autowired('alignedGridsService'),\n        __metadata(\"design:type\", alignedGridsService_1.AlignedGridsService)\n    ], GridApi.prototype, \"alignedGridsService\", void 0);\n    __decorate([\n        context_1.Autowired('eventService'),\n        __metadata(\"design:type\", eventService_1.EventService)\n    ], GridApi.prototype, \"eventService\", void 0);\n    __decorate([\n        context_1.Autowired('pinnedRowModel'),\n        __metadata(\"design:type\", pinnedRowModel_1.PinnedRowModel)\n    ], GridApi.prototype, \"pinnedRowModel\", void 0);\n    __decorate([\n        context_1.Autowired('context'),\n        __metadata(\"design:type\", context_1.Context)\n    ], GridApi.prototype, \"context\", void 0);\n    __decorate([\n        context_1.Autowired('rowModel'),\n        __metadata(\"design:type\", Object)\n    ], GridApi.prototype, \"rowModel\", void 0);\n    __decorate([\n        context_1.Autowired('sortController'),\n        __metadata(\"design:type\", sortController_1.SortController)\n    ], GridApi.prototype, \"sortController\", void 0);\n    __decorate([\n        context_1.Autowired('paginationProxy'),\n        __metadata(\"design:type\", paginationProxy_1.PaginationProxy)\n    ], GridApi.prototype, \"paginationProxy\", void 0);\n    __decorate([\n        context_1.Autowired('focusedCellController'),\n        __metadata(\"design:type\", focusedCellController_1.FocusedCellController)\n    ], GridApi.prototype, \"focusedCellController\", void 0);\n    __decorate([\n        context_1.Optional('rangeController'),\n        __metadata(\"design:type\", Object)\n    ], GridApi.prototype, \"rangeController\", void 0);\n    __decorate([\n        context_1.Optional('clipboardService'),\n        __metadata(\"design:type\", Object)\n    ], GridApi.prototype, \"clipboardService\", void 0);\n    __decorate([\n        context_1.Optional('aggFuncService'),\n        __metadata(\"design:type\", Object)\n    ], GridApi.prototype, \"aggFuncService\", void 0);\n    __decorate([\n        context_1.Autowired('menuFactory'),\n        __metadata(\"design:type\", Object)\n    ], GridApi.prototype, \"menuFactory\", void 0);\n    __decorate([\n        context_1.Optional('contextMenuFactory'),\n        __metadata(\"design:type\", Object)\n    ], GridApi.prototype, \"contextMenuFactory\", void 0);\n    __decorate([\n        context_1.Autowired('cellRendererFactory'),\n        __metadata(\"design:type\", cellRendererFactory_1.CellRendererFactory)\n    ], GridApi.prototype, \"cellRendererFactory\", void 0);\n    __decorate([\n        context_1.Autowired('valueCache'),\n        __metadata(\"design:type\", valueCache_1.ValueCache)\n    ], GridApi.prototype, \"valueCache\", void 0);\n    __decorate([\n        context_1.Optional('sideBarComp'),\n        __metadata(\"design:type\", Object)\n    ], GridApi.prototype, \"sideBarComp\", void 0);\n    __decorate([\n        context_1.Autowired('animationFrameService'),\n        __metadata(\"design:type\", animationFrameService_1.AnimationFrameService)\n    ], GridApi.prototype, \"animationFrameService\", void 0);\n    __decorate([\n        context_1.Optional('statusBarService'),\n        __metadata(\"design:type\", Object)\n    ], GridApi.prototype, \"statusBarService\", void 0);\n    __decorate([\n        context_1.Optional('chartService'),\n        __metadata(\"design:type\", Object)\n    ], GridApi.prototype, \"chartService\", void 0);\n    __decorate([\n        context_1.PostConstruct,\n        __metadata(\"design:type\", Function),\n        __metadata(\"design:paramtypes\", []),\n        __metadata(\"design:returntype\", void 0)\n    ], GridApi.prototype, \"init\", null);\n    GridApi = __decorate([\n        context_1.Bean('gridApi')\n    ], GridApi);\n    return GridApi;\n}());\nexports.GridApi = GridApi;\n"]},"metadata":{},"sourceType":"script"}