{"ast":null,"code":"/**\n * @module ol/control/Zoom\n */\nimport { inherits } from '../util.js';\nimport { listen } from '../events.js';\nimport EventType from '../events/EventType.js';\nimport Control from '../control/Control.js';\nimport { CLASS_CONTROL, CLASS_UNSELECTABLE } from '../css.js';\nimport { easeOut } from '../easing.js';\n/**\n * @typedef {Object} Options\n * @property {number} [duration=250] Animation duration in milliseconds.\n * @property {string} [className='ol-zoom'] CSS class name.\n * @property {string|Element} [zoomInLabel='+'] Text label to use for the zoom-in\n * button. Instead of text, also an element (e.g. a `span` element) can be used.\n * @property {string|Element} [zoomOutLabel='-'] Text label to use for the zoom-out button.\n * Instead of text, also an element (e.g. a `span` element) can be used.\n * @property {string} [zoomInTipLabel='Zoom in'] Text label to use for the button tip.\n * @property {string} [zoomOutTipLabel='Zoom out'] Text label to use for the button tip.\n * @property {number} [delta=1] The zoom delta applied on each click.\n * @property {Element|string} [target] Specify a target if you want the control to be\n * rendered outside of the map's viewport.\n */\n\n/**\n * @classdesc\n * A control with 2 buttons, one for zoom in and one for zoom out.\n * This control is one of the default controls of a map. To style this control\n * use css selectors `.ol-zoom-in` and `.ol-zoom-out`.\n *\n * @constructor\n * @extends {module:ol/control/Control}\n * @param {module:ol/control/Zoom~Options=} opt_options Zoom options.\n * @api\n */\n\nconst Zoom = function (opt_options) {\n  const options = opt_options ? opt_options : {};\n  const className = options.className !== undefined ? options.className : 'ol-zoom';\n  const delta = options.delta !== undefined ? options.delta : 1;\n  const zoomInLabel = options.zoomInLabel !== undefined ? options.zoomInLabel : '+';\n  const zoomOutLabel = options.zoomOutLabel !== undefined ? options.zoomOutLabel : '\\u2212';\n  const zoomInTipLabel = options.zoomInTipLabel !== undefined ? options.zoomInTipLabel : 'Zoom in';\n  const zoomOutTipLabel = options.zoomOutTipLabel !== undefined ? options.zoomOutTipLabel : 'Zoom out';\n  const inElement = document.createElement('button');\n  inElement.className = className + '-in';\n  inElement.setAttribute('type', 'button');\n  inElement.title = zoomInTipLabel;\n  inElement.appendChild(typeof zoomInLabel === 'string' ? document.createTextNode(zoomInLabel) : zoomInLabel);\n  listen(inElement, EventType.CLICK, Zoom.prototype.handleClick_.bind(this, delta));\n  const outElement = document.createElement('button');\n  outElement.className = className + '-out';\n  outElement.setAttribute('type', 'button');\n  outElement.title = zoomOutTipLabel;\n  outElement.appendChild(typeof zoomOutLabel === 'string' ? document.createTextNode(zoomOutLabel) : zoomOutLabel);\n  listen(outElement, EventType.CLICK, Zoom.prototype.handleClick_.bind(this, -delta));\n  const cssClasses = className + ' ' + CLASS_UNSELECTABLE + ' ' + CLASS_CONTROL;\n  const element = document.createElement('div');\n  element.className = cssClasses;\n  element.appendChild(inElement);\n  element.appendChild(outElement);\n  Control.call(this, {\n    element: element,\n    target: options.target\n  });\n  /**\n   * @type {number}\n   * @private\n   */\n\n  this.duration_ = options.duration !== undefined ? options.duration : 250;\n};\n\ninherits(Zoom, Control);\n/**\n * @param {number} delta Zoom delta.\n * @param {Event} event The event to handle\n * @private\n */\n\nZoom.prototype.handleClick_ = function (delta, event) {\n  event.preventDefault();\n  this.zoomByDelta_(delta);\n};\n/**\n * @param {number} delta Zoom delta.\n * @private\n */\n\n\nZoom.prototype.zoomByDelta_ = function (delta) {\n  const map = this.getMap();\n  const view = map.getView();\n\n  if (!view) {\n    // the map does not have a view, so we can't act\n    // upon it\n    return;\n  }\n\n  const currentResolution = view.getResolution();\n\n  if (currentResolution) {\n    const newResolution = view.constrainResolution(currentResolution, delta);\n\n    if (this.duration_ > 0) {\n      if (view.getAnimating()) {\n        view.cancelAnimations();\n      }\n\n      view.animate({\n        resolution: newResolution,\n        duration: this.duration_,\n        easing: easeOut\n      });\n    } else {\n      view.setResolution(newResolution);\n    }\n  }\n};\n\nexport default Zoom;","map":null,"metadata":{},"sourceType":"module"}