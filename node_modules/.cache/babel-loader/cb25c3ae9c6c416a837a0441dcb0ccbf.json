{"ast":null,"code":"/**\n * @module ol/renderer/canvas/Layer\n */\nimport { abstract } from '../../util.js';\nimport { getBottomLeft, getBottomRight, getTopLeft, getTopRight } from '../../extent.js';\nimport { TRUE } from '../../functions.js';\nimport RenderEvent from '../../render/Event.js';\nimport RenderEventType from '../../render/EventType.js';\nimport { rotateAtOffset } from '../../render/canvas.js';\nimport CanvasImmediateRenderer from '../../render/canvas/Immediate.js';\nimport LayerRenderer from '../Layer.js';\nimport { create as createTransform, apply as applyTransform, compose as composeTransform } from '../../transform.js';\n/**\n * @abstract\n */\n\nvar CanvasLayerRenderer =\n/*@__PURE__*/\nfunction (LayerRenderer) {\n  function CanvasLayerRenderer(layer) {\n    LayerRenderer.call(this, layer);\n    /**\n     * @protected\n     * @type {number}\n     */\n\n    this.renderedResolution;\n    /**\n     * @private\n     * @type {import(\"../../transform.js\").Transform}\n     */\n\n    this.transform_ = createTransform();\n  }\n\n  if (LayerRenderer) CanvasLayerRenderer.__proto__ = LayerRenderer;\n  CanvasLayerRenderer.prototype = Object.create(LayerRenderer && LayerRenderer.prototype);\n  CanvasLayerRenderer.prototype.constructor = CanvasLayerRenderer;\n  /**\n   * @param {CanvasRenderingContext2D} context Context.\n   * @param {import(\"../../PluggableMap.js\").FrameState} frameState Frame state.\n   * @param {import(\"../../extent.js\").Extent} extent Clip extent.\n   * @protected\n   */\n\n  CanvasLayerRenderer.prototype.clip = function clip(context, frameState, extent) {\n    var pixelRatio = frameState.pixelRatio;\n    var width = frameState.size[0] * pixelRatio;\n    var height = frameState.size[1] * pixelRatio;\n    var rotation = frameState.viewState.rotation;\n    var topLeft = getTopLeft(extent);\n    var topRight = getTopRight(extent);\n    var bottomRight = getBottomRight(extent);\n    var bottomLeft = getBottomLeft(extent);\n    applyTransform(frameState.coordinateToPixelTransform, topLeft);\n    applyTransform(frameState.coordinateToPixelTransform, topRight);\n    applyTransform(frameState.coordinateToPixelTransform, bottomRight);\n    applyTransform(frameState.coordinateToPixelTransform, bottomLeft);\n    context.save();\n    rotateAtOffset(context, -rotation, width / 2, height / 2);\n    context.beginPath();\n    context.moveTo(topLeft[0] * pixelRatio, topLeft[1] * pixelRatio);\n    context.lineTo(topRight[0] * pixelRatio, topRight[1] * pixelRatio);\n    context.lineTo(bottomRight[0] * pixelRatio, bottomRight[1] * pixelRatio);\n    context.lineTo(bottomLeft[0] * pixelRatio, bottomLeft[1] * pixelRatio);\n    context.clip();\n    rotateAtOffset(context, rotation, width / 2, height / 2);\n  };\n  /**\n   * @param {import(\"../../render/EventType.js\").default} type Event type.\n   * @param {CanvasRenderingContext2D} context Context.\n   * @param {import(\"../../PluggableMap.js\").FrameState} frameState Frame state.\n   * @param {import(\"../../transform.js\").Transform=} opt_transform Transform.\n   * @private\n   */\n\n\n  CanvasLayerRenderer.prototype.dispatchComposeEvent_ = function dispatchComposeEvent_(type, context, frameState, opt_transform) {\n    var layer = this.getLayer();\n\n    if (layer.hasListener(type)) {\n      var width = frameState.size[0] * frameState.pixelRatio;\n      var height = frameState.size[1] * frameState.pixelRatio;\n      var rotation = frameState.viewState.rotation;\n      rotateAtOffset(context, -rotation, width / 2, height / 2);\n      var transform = opt_transform !== undefined ? opt_transform : this.getTransform(frameState, 0);\n      var render = new CanvasImmediateRenderer(context, frameState.pixelRatio, frameState.extent, transform, frameState.viewState.rotation);\n      var composeEvent = new RenderEvent(type, render, frameState, context, null);\n      layer.dispatchEvent(composeEvent);\n      rotateAtOffset(context, rotation, width / 2, height / 2);\n    }\n  };\n  /**\n   * @param {import(\"../../coordinate.js\").Coordinate} coordinate Coordinate.\n   * @param {import(\"../../PluggableMap.js\").FrameState} frameState FrameState.\n   * @param {number} hitTolerance Hit tolerance in pixels.\n   * @param {function(this: S, import(\"../../layer/Layer.js\").default, (Uint8ClampedArray|Uint8Array)): T} callback Layer\n   *     callback.\n   * @param {S} thisArg Value to use as `this` when executing `callback`.\n   * @return {T|undefined} Callback result.\n   * @template S,T,U\n   */\n\n\n  CanvasLayerRenderer.prototype.forEachLayerAtCoordinate = function forEachLayerAtCoordinate(coordinate, frameState, hitTolerance, callback, thisArg) {\n    var hasFeature = this.forEachFeatureAtCoordinate(coordinate, frameState, hitTolerance, TRUE);\n\n    if (hasFeature) {\n      return callback.call(thisArg, this.getLayer(), null);\n    } else {\n      return undefined;\n    }\n  };\n  /**\n   * @param {CanvasRenderingContext2D} context Context.\n   * @param {import(\"../../PluggableMap.js\").FrameState} frameState Frame state.\n   * @param {import(\"../../layer/Layer.js\").State} layerState Layer state.\n   * @param {import(\"../../transform.js\").Transform=} opt_transform Transform.\n   * @protected\n   */\n\n\n  CanvasLayerRenderer.prototype.postCompose = function postCompose(context, frameState, layerState, opt_transform) {\n    this.dispatchComposeEvent_(RenderEventType.POSTCOMPOSE, context, frameState, opt_transform);\n  };\n  /**\n   * @param {CanvasRenderingContext2D} context Context.\n   * @param {import(\"../../PluggableMap.js\").FrameState} frameState Frame state.\n   * @param {import(\"../../transform.js\").Transform=} opt_transform Transform.\n   * @protected\n   */\n\n\n  CanvasLayerRenderer.prototype.preCompose = function preCompose(context, frameState, opt_transform) {\n    this.dispatchComposeEvent_(RenderEventType.PRECOMPOSE, context, frameState, opt_transform);\n  };\n  /**\n   * @param {CanvasRenderingContext2D} context Context.\n   * @param {import(\"../../PluggableMap.js\").FrameState} frameState Frame state.\n   * @param {import(\"../../transform.js\").Transform=} opt_transform Transform.\n   * @protected\n   */\n\n\n  CanvasLayerRenderer.prototype.dispatchRenderEvent = function dispatchRenderEvent(context, frameState, opt_transform) {\n    this.dispatchComposeEvent_(RenderEventType.RENDER, context, frameState, opt_transform);\n  };\n  /**\n   * @param {import(\"../../PluggableMap.js\").FrameState} frameState Frame state.\n   * @param {number} offsetX Offset on the x-axis in view coordinates.\n   * @protected\n   * @return {!import(\"../../transform.js\").Transform} Transform.\n   */\n\n\n  CanvasLayerRenderer.prototype.getTransform = function getTransform(frameState, offsetX) {\n    var viewState = frameState.viewState;\n    var pixelRatio = frameState.pixelRatio;\n    var dx1 = pixelRatio * frameState.size[0] / 2;\n    var dy1 = pixelRatio * frameState.size[1] / 2;\n    var sx = pixelRatio / viewState.resolution;\n    var sy = -sx;\n    var angle = -viewState.rotation;\n    var dx2 = -viewState.center[0] + offsetX;\n    var dy2 = -viewState.center[1];\n    return composeTransform(this.transform_, dx1, dy1, sx, sy, angle, dx2, dy2);\n  };\n  /**\n   * @abstract\n   * @param {import(\"../../PluggableMap.js\").FrameState} frameState Frame state.\n   * @param {import(\"../../layer/Layer.js\").State} layerState Layer state.\n   * @param {CanvasRenderingContext2D} context Context.\n   */\n\n\n  CanvasLayerRenderer.prototype.composeFrame = function composeFrame(frameState, layerState, context) {\n    abstract();\n  };\n  /**\n   * @abstract\n   * @param {import(\"../../PluggableMap.js\").FrameState} frameState Frame state.\n   * @param {import(\"../../layer/Layer.js\").State} layerState Layer state.\n   * @return {boolean} whether composeFrame should be called.\n   */\n\n\n  CanvasLayerRenderer.prototype.prepareFrame = function prepareFrame(frameState, layerState) {\n    return abstract();\n  };\n\n  return CanvasLayerRenderer;\n}(LayerRenderer);\n\nexport default CanvasLayerRenderer;","map":{"version":3,"sources":["../../../../src/ol/renderer/canvas/Layer.js"],"names":["super","const"],"mappings":"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","sourcesContent":["/**\n * @module ol/renderer/canvas/Layer\n */\nimport {abstract} from '../../util.js';\nimport {getBottomLeft, getBottomRight, getTopLeft, getTopRight} from '../../extent.js';\nimport {TRUE} from '../../functions.js';\nimport RenderEvent from '../../render/Event.js';\nimport RenderEventType from '../../render/EventType.js';\nimport {rotateAtOffset} from '../../render/canvas.js';\nimport CanvasImmediateRenderer from '../../render/canvas/Immediate.js';\nimport LayerRenderer from '../Layer.js';\nimport {create as createTransform, apply as applyTransform, compose as composeTransform} from '../../transform.js';\n\n/**\n * @abstract\n */\nclass CanvasLayerRenderer extends LayerRenderer {\n\n  /**\n   * @param {import(\"../../layer/Layer.js\").default} layer Layer.\n   */\n  constructor(layer) {\n\n    super(layer);\n\n    /**\n     * @protected\n     * @type {number}\n     */\n    this.renderedResolution;\n\n    /**\n     * @private\n     * @type {import(\"../../transform.js\").Transform}\n     */\n    this.transform_ = createTransform();\n\n  }\n\n  /**\n   * @param {CanvasRenderingContext2D} context Context.\n   * @param {import(\"../../PluggableMap.js\").FrameState} frameState Frame state.\n   * @param {import(\"../../extent.js\").Extent} extent Clip extent.\n   * @protected\n   */\n  clip(context, frameState, extent) {\n    const pixelRatio = frameState.pixelRatio;\n    const width = frameState.size[0] * pixelRatio;\n    const height = frameState.size[1] * pixelRatio;\n    const rotation = frameState.viewState.rotation;\n    const topLeft = getTopLeft(extent);\n    const topRight = getTopRight(extent);\n    const bottomRight = getBottomRight(extent);\n    const bottomLeft = getBottomLeft(extent);\n\n    applyTransform(frameState.coordinateToPixelTransform, topLeft);\n    applyTransform(frameState.coordinateToPixelTransform, topRight);\n    applyTransform(frameState.coordinateToPixelTransform, bottomRight);\n    applyTransform(frameState.coordinateToPixelTransform, bottomLeft);\n\n    context.save();\n    rotateAtOffset(context, -rotation, width / 2, height / 2);\n    context.beginPath();\n    context.moveTo(topLeft[0] * pixelRatio, topLeft[1] * pixelRatio);\n    context.lineTo(topRight[0] * pixelRatio, topRight[1] * pixelRatio);\n    context.lineTo(bottomRight[0] * pixelRatio, bottomRight[1] * pixelRatio);\n    context.lineTo(bottomLeft[0] * pixelRatio, bottomLeft[1] * pixelRatio);\n    context.clip();\n    rotateAtOffset(context, rotation, width / 2, height / 2);\n  }\n\n  /**\n   * @param {import(\"../../render/EventType.js\").default} type Event type.\n   * @param {CanvasRenderingContext2D} context Context.\n   * @param {import(\"../../PluggableMap.js\").FrameState} frameState Frame state.\n   * @param {import(\"../../transform.js\").Transform=} opt_transform Transform.\n   * @private\n   */\n  dispatchComposeEvent_(type, context, frameState, opt_transform) {\n    const layer = this.getLayer();\n    if (layer.hasListener(type)) {\n      const width = frameState.size[0] * frameState.pixelRatio;\n      const height = frameState.size[1] * frameState.pixelRatio;\n      const rotation = frameState.viewState.rotation;\n      rotateAtOffset(context, -rotation, width / 2, height / 2);\n      const transform = opt_transform !== undefined ?\n        opt_transform : this.getTransform(frameState, 0);\n      const render = new CanvasImmediateRenderer(\n        context, frameState.pixelRatio, frameState.extent, transform,\n        frameState.viewState.rotation);\n      const composeEvent = new RenderEvent(type, render, frameState,\n        context, null);\n      layer.dispatchEvent(composeEvent);\n      rotateAtOffset(context, rotation, width / 2, height / 2);\n    }\n  }\n\n  /**\n   * @param {import(\"../../coordinate.js\").Coordinate} coordinate Coordinate.\n   * @param {import(\"../../PluggableMap.js\").FrameState} frameState FrameState.\n   * @param {number} hitTolerance Hit tolerance in pixels.\n   * @param {function(this: S, import(\"../../layer/Layer.js\").default, (Uint8ClampedArray|Uint8Array)): T} callback Layer\n   *     callback.\n   * @param {S} thisArg Value to use as `this` when executing `callback`.\n   * @return {T|undefined} Callback result.\n   * @template S,T,U\n   */\n  forEachLayerAtCoordinate(coordinate, frameState, hitTolerance, callback, thisArg) {\n    const hasFeature = this.forEachFeatureAtCoordinate(coordinate, frameState, hitTolerance, TRUE);\n\n    if (hasFeature) {\n      return callback.call(thisArg, this.getLayer(), null);\n    } else {\n      return undefined;\n    }\n  }\n\n  /**\n   * @param {CanvasRenderingContext2D} context Context.\n   * @param {import(\"../../PluggableMap.js\").FrameState} frameState Frame state.\n   * @param {import(\"../../layer/Layer.js\").State} layerState Layer state.\n   * @param {import(\"../../transform.js\").Transform=} opt_transform Transform.\n   * @protected\n   */\n  postCompose(context, frameState, layerState, opt_transform) {\n    this.dispatchComposeEvent_(RenderEventType.POSTCOMPOSE, context, frameState, opt_transform);\n  }\n\n  /**\n   * @param {CanvasRenderingContext2D} context Context.\n   * @param {import(\"../../PluggableMap.js\").FrameState} frameState Frame state.\n   * @param {import(\"../../transform.js\").Transform=} opt_transform Transform.\n   * @protected\n   */\n  preCompose(context, frameState, opt_transform) {\n    this.dispatchComposeEvent_(RenderEventType.PRECOMPOSE, context, frameState, opt_transform);\n  }\n\n  /**\n   * @param {CanvasRenderingContext2D} context Context.\n   * @param {import(\"../../PluggableMap.js\").FrameState} frameState Frame state.\n   * @param {import(\"../../transform.js\").Transform=} opt_transform Transform.\n   * @protected\n   */\n  dispatchRenderEvent(context, frameState, opt_transform) {\n    this.dispatchComposeEvent_(RenderEventType.RENDER, context, frameState, opt_transform);\n  }\n\n  /**\n   * @param {import(\"../../PluggableMap.js\").FrameState} frameState Frame state.\n   * @param {number} offsetX Offset on the x-axis in view coordinates.\n   * @protected\n   * @return {!import(\"../../transform.js\").Transform} Transform.\n   */\n  getTransform(frameState, offsetX) {\n    const viewState = frameState.viewState;\n    const pixelRatio = frameState.pixelRatio;\n    const dx1 = pixelRatio * frameState.size[0] / 2;\n    const dy1 = pixelRatio * frameState.size[1] / 2;\n    const sx = pixelRatio / viewState.resolution;\n    const sy = -sx;\n    const angle = -viewState.rotation;\n    const dx2 = -viewState.center[0] + offsetX;\n    const dy2 = -viewState.center[1];\n    return composeTransform(this.transform_, dx1, dy1, sx, sy, angle, dx2, dy2);\n  }\n\n  /**\n   * @abstract\n   * @param {import(\"../../PluggableMap.js\").FrameState} frameState Frame state.\n   * @param {import(\"../../layer/Layer.js\").State} layerState Layer state.\n   * @param {CanvasRenderingContext2D} context Context.\n   */\n  composeFrame(frameState, layerState, context) {\n    abstract();\n  }\n\n  /**\n   * @abstract\n   * @param {import(\"../../PluggableMap.js\").FrameState} frameState Frame state.\n   * @param {import(\"../../layer/Layer.js\").State} layerState Layer state.\n   * @return {boolean} whether composeFrame should be called.\n   */\n  prepareFrame(frameState, layerState) {\n    return abstract();\n  }\n}\n\nexport default CanvasLayerRenderer;\n"]},"metadata":{},"sourceType":"module"}