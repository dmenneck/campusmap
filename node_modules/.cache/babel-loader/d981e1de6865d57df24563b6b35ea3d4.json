{"ast":null,"code":"/**\n * ag-grid-community - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components\n * @version v21.2.2\n * @link http://www.ag-grid.com/\n * @license MIT\n */\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n}); // class returns a unique id to use for the column. it checks the existing columns, and if the requested\n// id is already taken, it will start appending numbers until it gets a unique id.\n// eg, if the col field is 'name', it will try ids: {name, name_1, name_2...}\n// if no field or id provided in the col, it will try the ids of natural numbers\n\nvar utils_1 = require(\"../utils\");\n\nvar ColumnKeyCreator =\n/** @class */\nfunction () {\n  function ColumnKeyCreator() {\n    this.existingKeys = [];\n  }\n\n  ColumnKeyCreator.prototype.addExistingKeys = function (keys) {\n    this.existingKeys = this.existingKeys.concat(keys);\n  };\n\n  ColumnKeyCreator.prototype.getUniqueKey = function (colId, colField) {\n    // in case user passed in number for colId, convert to string\n    colId = utils_1._.toStringOrNull(colId);\n    var count = 0;\n\n    while (true) {\n      var idToTry = void 0;\n\n      if (colId) {\n        idToTry = colId;\n\n        if (count !== 0) {\n          idToTry += '_' + count;\n        }\n      } else if (colField) {\n        idToTry = colField;\n\n        if (count !== 0) {\n          idToTry += '_' + count;\n        }\n      } else {\n        idToTry = '' + count;\n      }\n\n      if (this.existingKeys.indexOf(idToTry) < 0) {\n        this.existingKeys.push(idToTry);\n        return idToTry;\n      }\n\n      count++;\n    }\n  };\n\n  return ColumnKeyCreator;\n}();\n\nexports.ColumnKeyCreator = ColumnKeyCreator;","map":{"version":3,"sources":["/Users/dirkmennecke77/Desktop/Lageplan/node_modules/ag-grid-community/dist/lib/columnController/columnKeyCreator.js"],"names":["Object","defineProperty","exports","value","utils_1","require","ColumnKeyCreator","existingKeys","prototype","addExistingKeys","keys","concat","getUniqueKey","colId","colField","_","toStringOrNull","count","idToTry","indexOf","push"],"mappings":"AAAA;;;;;;AAMA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C,E,CACA;AACA;AACA;AACA;;AACA,IAAIC,OAAO,GAAGC,OAAO,CAAC,UAAD,CAArB;;AACA,IAAIC,gBAAgB;AAAG;AAAe,YAAY;AAC9C,WAASA,gBAAT,GAA4B;AACxB,SAAKC,YAAL,GAAoB,EAApB;AACH;;AACDD,EAAAA,gBAAgB,CAACE,SAAjB,CAA2BC,eAA3B,GAA6C,UAAUC,IAAV,EAAgB;AACzD,SAAKH,YAAL,GAAoB,KAAKA,YAAL,CAAkBI,MAAlB,CAAyBD,IAAzB,CAApB;AACH,GAFD;;AAGAJ,EAAAA,gBAAgB,CAACE,SAAjB,CAA2BI,YAA3B,GAA0C,UAAUC,KAAV,EAAiBC,QAAjB,EAA2B;AACjE;AACAD,IAAAA,KAAK,GAAGT,OAAO,CAACW,CAAR,CAAUC,cAAV,CAAyBH,KAAzB,CAAR;AACA,QAAII,KAAK,GAAG,CAAZ;;AACA,WAAO,IAAP,EAAa;AACT,UAAIC,OAAO,GAAG,KAAK,CAAnB;;AACA,UAAIL,KAAJ,EAAW;AACPK,QAAAA,OAAO,GAAGL,KAAV;;AACA,YAAII,KAAK,KAAK,CAAd,EAAiB;AACbC,UAAAA,OAAO,IAAI,MAAMD,KAAjB;AACH;AACJ,OALD,MAMK,IAAIH,QAAJ,EAAc;AACfI,QAAAA,OAAO,GAAGJ,QAAV;;AACA,YAAIG,KAAK,KAAK,CAAd,EAAiB;AACbC,UAAAA,OAAO,IAAI,MAAMD,KAAjB;AACH;AACJ,OALI,MAMA;AACDC,QAAAA,OAAO,GAAG,KAAKD,KAAf;AACH;;AACD,UAAI,KAAKV,YAAL,CAAkBY,OAAlB,CAA0BD,OAA1B,IAAqC,CAAzC,EAA4C;AACxC,aAAKX,YAAL,CAAkBa,IAAlB,CAAuBF,OAAvB;AACA,eAAOA,OAAP;AACH;;AACDD,MAAAA,KAAK;AACR;AACJ,GA3BD;;AA4BA,SAAOX,gBAAP;AACH,CApCqC,EAAtC;;AAqCAJ,OAAO,CAACI,gBAAR,GAA2BA,gBAA3B","sourcesContent":["/**\n * ag-grid-community - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components\n * @version v21.2.2\n * @link http://www.ag-grid.com/\n * @license MIT\n */\n\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n// class returns a unique id to use for the column. it checks the existing columns, and if the requested\n// id is already taken, it will start appending numbers until it gets a unique id.\n// eg, if the col field is 'name', it will try ids: {name, name_1, name_2...}\n// if no field or id provided in the col, it will try the ids of natural numbers\nvar utils_1 = require(\"../utils\");\nvar ColumnKeyCreator = /** @class */ (function () {\n    function ColumnKeyCreator() {\n        this.existingKeys = [];\n    }\n    ColumnKeyCreator.prototype.addExistingKeys = function (keys) {\n        this.existingKeys = this.existingKeys.concat(keys);\n    };\n    ColumnKeyCreator.prototype.getUniqueKey = function (colId, colField) {\n        // in case user passed in number for colId, convert to string\n        colId = utils_1._.toStringOrNull(colId);\n        var count = 0;\n        while (true) {\n            var idToTry = void 0;\n            if (colId) {\n                idToTry = colId;\n                if (count !== 0) {\n                    idToTry += '_' + count;\n                }\n            }\n            else if (colField) {\n                idToTry = colField;\n                if (count !== 0) {\n                    idToTry += '_' + count;\n                }\n            }\n            else {\n                idToTry = '' + count;\n            }\n            if (this.existingKeys.indexOf(idToTry) < 0) {\n                this.existingKeys.push(idToTry);\n                return idToTry;\n            }\n            count++;\n        }\n    };\n    return ColumnKeyCreator;\n}());\nexports.ColumnKeyCreator = ColumnKeyCreator;\n"]},"metadata":{},"sourceType":"script"}