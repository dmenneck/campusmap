{"ast":null,"code":"/**\n * @module ol/render/canvas/Replay\n */\nimport { getUid, inherits } from '../../util.js';\nimport { UNDEFINED } from '../../functions.js';\nimport { equals, reverseSubArray } from '../../array.js';\nimport { asColorLike } from '../../colorlike.js';\nimport { buffer, clone, coordinateRelationship, createEmpty, createOrUpdate, createOrUpdateEmpty, extend, extendCoordinate, intersects } from '../../extent.js';\nimport Relationship from '../../extent/Relationship.js';\nimport GeometryType from '../../geom/GeometryType.js';\nimport { inflateCoordinates, inflateCoordinatesArray, inflateMultiCoordinatesArray } from '../../geom/flat/inflate.js';\nimport { lineStringLength } from '../../geom/flat/length.js';\nimport { drawTextOnPath } from '../../geom/flat/textpath.js';\nimport { transform2D } from '../../geom/flat/transform.js';\nimport { CANVAS_LINE_DASH } from '../../has.js';\nimport { isEmpty } from '../../obj.js';\nimport VectorContext from '../VectorContext.js';\nimport { drawImage, resetTransform, defaultPadding, defaultFillStyle, defaultStrokeStyle, defaultMiterLimit, defaultLineWidth, defaultLineJoin, defaultLineDashOffset, defaultLineDash, defaultLineCap } from '../canvas.js';\nimport CanvasInstruction from '../canvas/Instruction.js';\nimport { TEXT_ALIGN } from '../replay.js';\nimport { create as createTransform, compose as composeTransform, apply as applyTransform, setFromArray as transformSetFromArray } from '../../transform.js';\n/**\n * @constructor\n * @extends {module:ol/render/VectorContext}\n * @param {number} tolerance Tolerance.\n * @param {module:ol/extent~Extent} maxExtent Maximum extent.\n * @param {number} resolution Resolution.\n * @param {number} pixelRatio Pixel ratio.\n * @param {boolean} overlaps The replay can have overlapping geometries.\n * @param {?} declutterTree Declutter tree.\n * @struct\n */\n\nconst CanvasReplay = function (tolerance, maxExtent, resolution, pixelRatio, overlaps, declutterTree) {\n  VectorContext.call(this);\n  /**\n   * @type {?}\n   */\n\n  this.declutterTree = declutterTree;\n  /**\n   * @protected\n   * @type {number}\n   */\n\n  this.tolerance = tolerance;\n  /**\n   * @protected\n   * @const\n   * @type {module:ol/extent~Extent}\n   */\n\n  this.maxExtent = maxExtent;\n  /**\n   * @protected\n   * @type {boolean}\n   */\n\n  this.overlaps = overlaps;\n  /**\n   * @protected\n   * @type {number}\n   */\n\n  this.pixelRatio = pixelRatio;\n  /**\n   * @protected\n   * @type {number}\n   */\n\n  this.maxLineWidth = 0;\n  /**\n   * @protected\n   * @const\n   * @type {number}\n   */\n\n  this.resolution = resolution;\n  /**\n   * @private\n   * @type {boolean}\n   */\n\n  this.alignFill_;\n  /**\n   * @private\n   * @type {Array.<*>}\n   */\n\n  this.beginGeometryInstruction1_ = null;\n  /**\n   * @private\n   * @type {Array.<*>}\n   */\n\n  this.beginGeometryInstruction2_ = null;\n  /**\n   * @private\n   * @type {module:ol/extent~Extent}\n   */\n\n  this.bufferedMaxExtent_ = null;\n  /**\n   * @protected\n   * @type {Array.<*>}\n   */\n\n  this.instructions = [];\n  /**\n   * @protected\n   * @type {Array.<number>}\n   */\n\n  this.coordinates = [];\n  /**\n   * @private\n   * @type {!Object.<number,module:ol/coordinate~Coordinate|Array.<module:ol/coordinate~Coordinate>|Array.<Array.<module:ol/coordinate~Coordinate>>>}\n   */\n\n  this.coordinateCache_ = {};\n  /**\n   * @private\n   * @type {!module:ol/transform~Transform}\n   */\n\n  this.renderedTransform_ = createTransform();\n  /**\n   * @protected\n   * @type {Array.<*>}\n   */\n\n  this.hitDetectionInstructions = [];\n  /**\n   * @private\n   * @type {Array.<number>}\n   */\n\n  this.pixelCoordinates_ = null;\n  /**\n   * @protected\n   * @type {module:ol/render/canvas~FillStrokeState}\n   */\n\n  this.state =\n  /** @type {module:ol/render/canvas~FillStrokeState} */\n  {};\n  /**\n   * @private\n   * @type {number}\n   */\n\n  this.viewRotation_ = 0;\n};\n\ninherits(CanvasReplay, VectorContext);\n/**\n * @type {module:ol/extent~Extent}\n */\n\nconst tmpExtent = createEmpty();\n/**\n * @type {!module:ol/transform~Transform}\n */\n\nconst tmpTransform = createTransform();\n/**\n * @param {CanvasRenderingContext2D} context Context.\n * @param {module:ol/coordinate~Coordinate} p1 1st point of the background box.\n * @param {module:ol/coordinate~Coordinate} p2 2nd point of the background box.\n * @param {module:ol/coordinate~Coordinate} p3 3rd point of the background box.\n * @param {module:ol/coordinate~Coordinate} p4 4th point of the background box.\n * @param {Array.<*>} fillInstruction Fill instruction.\n * @param {Array.<*>} strokeInstruction Stroke instruction.\n */\n\nCanvasReplay.prototype.replayTextBackground_ = function (context, p1, p2, p3, p4, fillInstruction, strokeInstruction) {\n  context.beginPath();\n  context.moveTo.apply(context, p1);\n  context.lineTo.apply(context, p2);\n  context.lineTo.apply(context, p3);\n  context.lineTo.apply(context, p4);\n  context.lineTo.apply(context, p1);\n\n  if (fillInstruction) {\n    this.alignFill_ =\n    /** @type {boolean} */\n    fillInstruction[2];\n    this.fill_(context);\n  }\n\n  if (strokeInstruction) {\n    this.setStrokeStyle_(context,\n    /** @type {Array.<*>} */\n    strokeInstruction);\n    context.stroke();\n  }\n};\n/**\n * @param {CanvasRenderingContext2D} context Context.\n * @param {number} x X.\n * @param {number} y Y.\n * @param {HTMLImageElement|HTMLCanvasElement|HTMLVideoElement} image Image.\n * @param {number} anchorX Anchor X.\n * @param {number} anchorY Anchor Y.\n * @param {module:ol/render/canvas~DeclutterGroup} declutterGroup Declutter group.\n * @param {number} height Height.\n * @param {number} opacity Opacity.\n * @param {number} originX Origin X.\n * @param {number} originY Origin Y.\n * @param {number} rotation Rotation.\n * @param {number} scale Scale.\n * @param {boolean} snapToPixel Snap to pixel.\n * @param {number} width Width.\n * @param {Array.<number>} padding Padding.\n * @param {Array.<*>} fillInstruction Fill instruction.\n * @param {Array.<*>} strokeInstruction Stroke instruction.\n */\n\n\nCanvasReplay.prototype.replayImage_ = function (context, x, y, image, anchorX, anchorY, declutterGroup, height, opacity, originX, originY, rotation, scale, snapToPixel, width, padding, fillInstruction, strokeInstruction) {\n  const fillStroke = fillInstruction || strokeInstruction;\n  anchorX *= scale;\n  anchorY *= scale;\n  x -= anchorX;\n  y -= anchorY;\n  const w = width + originX > image.width ? image.width - originX : width;\n  const h = height + originY > image.height ? image.height - originY : height;\n  const boxW = padding[3] + w * scale + padding[1];\n  const boxH = padding[0] + h * scale + padding[2];\n  const boxX = x - padding[3];\n  const boxY = y - padding[0];\n  /** @type {module:ol/coordinate~Coordinate} */\n\n  let p1;\n  /** @type {module:ol/coordinate~Coordinate} */\n\n  let p2;\n  /** @type {module:ol/coordinate~Coordinate} */\n\n  let p3;\n  /** @type {module:ol/coordinate~Coordinate} */\n\n  let p4;\n\n  if (fillStroke || rotation !== 0) {\n    p1 = [boxX, boxY];\n    p2 = [boxX + boxW, boxY];\n    p3 = [boxX + boxW, boxY + boxH];\n    p4 = [boxX, boxY + boxH];\n  }\n\n  let transform = null;\n\n  if (rotation !== 0) {\n    const centerX = x + anchorX;\n    const centerY = y + anchorY;\n    transform = composeTransform(tmpTransform, centerX, centerY, 1, 1, rotation, -centerX, -centerY);\n    createOrUpdateEmpty(tmpExtent);\n    extendCoordinate(tmpExtent, applyTransform(tmpTransform, p1));\n    extendCoordinate(tmpExtent, applyTransform(tmpTransform, p2));\n    extendCoordinate(tmpExtent, applyTransform(tmpTransform, p3));\n    extendCoordinate(tmpExtent, applyTransform(tmpTransform, p4));\n  } else {\n    createOrUpdate(boxX, boxY, boxX + boxW, boxY + boxH, tmpExtent);\n  }\n\n  const canvas = context.canvas;\n  const strokePadding = strokeInstruction ? strokeInstruction[2] * scale / 2 : 0;\n  const intersects = tmpExtent[0] - strokePadding <= canvas.width && tmpExtent[2] + strokePadding >= 0 && tmpExtent[1] - strokePadding <= canvas.height && tmpExtent[3] + strokePadding >= 0;\n\n  if (snapToPixel) {\n    x = Math.round(x);\n    y = Math.round(y);\n  }\n\n  if (declutterGroup) {\n    if (!intersects && declutterGroup[4] == 1) {\n      return;\n    }\n\n    extend(declutterGroup, tmpExtent);\n    const declutterArgs = intersects ? [context, transform ? transform.slice(0) : null, opacity, image, originX, originY, w, h, x, y, scale] : null;\n\n    if (declutterArgs && fillStroke) {\n      declutterArgs.push(fillInstruction, strokeInstruction, p1, p2, p3, p4);\n    }\n\n    declutterGroup.push(declutterArgs);\n  } else if (intersects) {\n    if (fillStroke) {\n      this.replayTextBackground_(context, p1, p2, p3, p4,\n      /** @type {Array.<*>} */\n      fillInstruction,\n      /** @type {Array.<*>} */\n      strokeInstruction);\n    }\n\n    drawImage(context, transform, opacity, image, originX, originY, w, h, x, y, scale);\n  }\n};\n/**\n * @protected\n * @param {Array.<number>} dashArray Dash array.\n * @return {Array.<number>} Dash array with pixel ratio applied\n */\n\n\nCanvasReplay.prototype.applyPixelRatio = function (dashArray) {\n  const pixelRatio = this.pixelRatio;\n  return pixelRatio == 1 ? dashArray : dashArray.map(function (dash) {\n    return dash * pixelRatio;\n  });\n};\n/**\n * @param {Array.<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {number} end End.\n * @param {number} stride Stride.\n * @param {boolean} closed Last input coordinate equals first.\n * @param {boolean} skipFirst Skip first coordinate.\n * @protected\n * @return {number} My end.\n */\n\n\nCanvasReplay.prototype.appendFlatCoordinates = function (flatCoordinates, offset, end, stride, closed, skipFirst) {\n  let myEnd = this.coordinates.length;\n  const extent = this.getBufferedMaxExtent();\n\n  if (skipFirst) {\n    offset += stride;\n  }\n\n  const lastCoord = [flatCoordinates[offset], flatCoordinates[offset + 1]];\n  const nextCoord = [NaN, NaN];\n  let skipped = true;\n  let i, lastRel, nextRel;\n\n  for (i = offset + stride; i < end; i += stride) {\n    nextCoord[0] = flatCoordinates[i];\n    nextCoord[1] = flatCoordinates[i + 1];\n    nextRel = coordinateRelationship(extent, nextCoord);\n\n    if (nextRel !== lastRel) {\n      if (skipped) {\n        this.coordinates[myEnd++] = lastCoord[0];\n        this.coordinates[myEnd++] = lastCoord[1];\n      }\n\n      this.coordinates[myEnd++] = nextCoord[0];\n      this.coordinates[myEnd++] = nextCoord[1];\n      skipped = false;\n    } else if (nextRel === Relationship.INTERSECTING) {\n      this.coordinates[myEnd++] = nextCoord[0];\n      this.coordinates[myEnd++] = nextCoord[1];\n      skipped = false;\n    } else {\n      skipped = true;\n    }\n\n    lastCoord[0] = nextCoord[0];\n    lastCoord[1] = nextCoord[1];\n    lastRel = nextRel;\n  } // Last coordinate equals first or only one point to append:\n\n\n  if (closed && skipped || i === offset + stride) {\n    this.coordinates[myEnd++] = lastCoord[0];\n    this.coordinates[myEnd++] = lastCoord[1];\n  }\n\n  return myEnd;\n};\n/**\n * @param {Array.<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {Array.<number>} ends Ends.\n * @param {number} stride Stride.\n * @param {Array.<number>} replayEnds Replay ends.\n * @return {number} Offset.\n */\n\n\nCanvasReplay.prototype.drawCustomCoordinates_ = function (flatCoordinates, offset, ends, stride, replayEnds) {\n  for (let i = 0, ii = ends.length; i < ii; ++i) {\n    const end = ends[i];\n    const replayEnd = this.appendFlatCoordinates(flatCoordinates, offset, end, stride, false, false);\n    replayEnds.push(replayEnd);\n    offset = end;\n  }\n\n  return offset;\n};\n/**\n * @inheritDoc.\n */\n\n\nCanvasReplay.prototype.drawCustom = function (geometry, feature, renderer) {\n  this.beginGeometry(geometry, feature);\n  const type = geometry.getType();\n  const stride = geometry.getStride();\n  const replayBegin = this.coordinates.length;\n  let flatCoordinates, replayEnd, replayEnds, replayEndss;\n  let offset;\n\n  if (type == GeometryType.MULTI_POLYGON) {\n    geometry =\n    /** @type {module:ol/geom/MultiPolygon} */\n    geometry;\n    flatCoordinates = geometry.getOrientedFlatCoordinates();\n    replayEndss = [];\n    const endss = geometry.getEndss();\n    offset = 0;\n\n    for (let i = 0, ii = endss.length; i < ii; ++i) {\n      const myEnds = [];\n      offset = this.drawCustomCoordinates_(flatCoordinates, offset, endss[i], stride, myEnds);\n      replayEndss.push(myEnds);\n    }\n\n    this.instructions.push([CanvasInstruction.CUSTOM, replayBegin, replayEndss, geometry, renderer, inflateMultiCoordinatesArray]);\n  } else if (type == GeometryType.POLYGON || type == GeometryType.MULTI_LINE_STRING) {\n    replayEnds = [];\n    flatCoordinates = type == GeometryType.POLYGON ?\n    /** @type {module:ol/geom/Polygon} */\n    geometry.getOrientedFlatCoordinates() : geometry.getFlatCoordinates();\n    offset = this.drawCustomCoordinates_(flatCoordinates, 0,\n    /** @type {module:ol/geom/Polygon|module:ol/geom/MultiLineString} */\n    geometry.getEnds(), stride, replayEnds);\n    this.instructions.push([CanvasInstruction.CUSTOM, replayBegin, replayEnds, geometry, renderer, inflateCoordinatesArray]);\n  } else if (type == GeometryType.LINE_STRING || type == GeometryType.MULTI_POINT) {\n    flatCoordinates = geometry.getFlatCoordinates();\n    replayEnd = this.appendFlatCoordinates(flatCoordinates, 0, flatCoordinates.length, stride, false, false);\n    this.instructions.push([CanvasInstruction.CUSTOM, replayBegin, replayEnd, geometry, renderer, inflateCoordinates]);\n  } else if (type == GeometryType.POINT) {\n    flatCoordinates = geometry.getFlatCoordinates();\n    this.coordinates.push(flatCoordinates[0], flatCoordinates[1]);\n    replayEnd = this.coordinates.length;\n    this.instructions.push([CanvasInstruction.CUSTOM, replayBegin, replayEnd, geometry, renderer]);\n  }\n\n  this.endGeometry(geometry, feature);\n};\n/**\n * @protected\n * @param {module:ol/geom/Geometry|module:ol/render/Feature} geometry Geometry.\n * @param {module:ol/Feature|module:ol/render/Feature} feature Feature.\n */\n\n\nCanvasReplay.prototype.beginGeometry = function (geometry, feature) {\n  this.beginGeometryInstruction1_ = [CanvasInstruction.BEGIN_GEOMETRY, feature, 0];\n  this.instructions.push(this.beginGeometryInstruction1_);\n  this.beginGeometryInstruction2_ = [CanvasInstruction.BEGIN_GEOMETRY, feature, 0];\n  this.hitDetectionInstructions.push(this.beginGeometryInstruction2_);\n};\n/**\n * @private\n * @param {CanvasRenderingContext2D} context Context.\n */\n\n\nCanvasReplay.prototype.fill_ = function (context) {\n  if (this.alignFill_) {\n    const origin = applyTransform(this.renderedTransform_, [0, 0]);\n    const repeatSize = 512 * this.pixelRatio;\n    context.translate(origin[0] % repeatSize, origin[1] % repeatSize);\n    context.rotate(this.viewRotation_);\n  }\n\n  context.fill();\n\n  if (this.alignFill_) {\n    context.setTransform.apply(context, resetTransform);\n  }\n};\n/**\n * @private\n * @param {CanvasRenderingContext2D} context Context.\n * @param {Array.<*>} instruction Instruction.\n */\n\n\nCanvasReplay.prototype.setStrokeStyle_ = function (context, instruction) {\n  context.strokeStyle =\n  /** @type {module:ol/colorlike~ColorLike} */\n  instruction[1];\n  context.lineWidth =\n  /** @type {number} */\n  instruction[2];\n  context.lineCap =\n  /** @type {string} */\n  instruction[3];\n  context.lineJoin =\n  /** @type {string} */\n  instruction[4];\n  context.miterLimit =\n  /** @type {number} */\n  instruction[5];\n\n  if (CANVAS_LINE_DASH) {\n    context.lineDashOffset =\n    /** @type {number} */\n    instruction[7];\n    context.setLineDash(\n    /** @type {Array.<number>} */\n    instruction[6]);\n  }\n};\n/**\n * @param {module:ol/render/canvas~DeclutterGroup} declutterGroup Declutter group.\n * @param {module:ol/Feature|module:ol/render/Feature} feature Feature.\n */\n\n\nCanvasReplay.prototype.renderDeclutter_ = function (declutterGroup, feature) {\n  if (declutterGroup && declutterGroup.length > 5) {\n    const groupCount = declutterGroup[4];\n\n    if (groupCount == 1 || groupCount == declutterGroup.length - 5) {\n      /** @type {module:ol/structs/RBush~Entry} */\n      const box = {\n        minX:\n        /** @type {number} */\n        declutterGroup[0],\n        minY:\n        /** @type {number} */\n        declutterGroup[1],\n        maxX:\n        /** @type {number} */\n        declutterGroup[2],\n        maxY:\n        /** @type {number} */\n        declutterGroup[3],\n        value: feature\n      };\n\n      if (!this.declutterTree.collides(box)) {\n        this.declutterTree.insert(box);\n\n        for (let j = 5, jj = declutterGroup.length; j < jj; ++j) {\n          const declutterData =\n          /** @type {Array} */\n          declutterGroup[j];\n\n          if (declutterData) {\n            if (declutterData.length > 11) {\n              this.replayTextBackground_(declutterData[0], declutterData[13], declutterData[14], declutterData[15], declutterData[16], declutterData[11], declutterData[12]);\n            }\n\n            drawImage.apply(undefined, declutterData);\n          }\n        }\n      }\n\n      declutterGroup.length = 5;\n      createOrUpdateEmpty(declutterGroup);\n    }\n  }\n};\n/**\n * @private\n * @param {CanvasRenderingContext2D} context Context.\n * @param {module:ol/transform~Transform} transform Transform.\n * @param {Object.<string, boolean>} skippedFeaturesHash Ids of features\n *     to skip.\n * @param {Array.<*>} instructions Instructions array.\n * @param {function((module:ol/Feature|module:ol/render/Feature)): T|undefined}\n *     featureCallback Feature callback.\n * @param {module:ol/extent~Extent=} opt_hitExtent Only check features that intersect this\n *     extent.\n * @return {T|undefined} Callback result.\n * @template T\n */\n\n\nCanvasReplay.prototype.replay_ = function (context, transform, skippedFeaturesHash, instructions, featureCallback, opt_hitExtent) {\n  /** @type {Array.<number>} */\n  let pixelCoordinates;\n\n  if (this.pixelCoordinates_ && equals(transform, this.renderedTransform_)) {\n    pixelCoordinates = this.pixelCoordinates_;\n  } else {\n    if (!this.pixelCoordinates_) {\n      this.pixelCoordinates_ = [];\n    }\n\n    pixelCoordinates = transform2D(this.coordinates, 0, this.coordinates.length, 2, transform, this.pixelCoordinates_);\n    transformSetFromArray(this.renderedTransform_, transform);\n  }\n\n  const skipFeatures = !isEmpty(skippedFeaturesHash);\n  let i = 0; // instruction index\n\n  const ii = instructions.length; // end of instructions\n\n  let d = 0; // data index\n\n  let dd; // end of per-instruction data\n\n  let anchorX, anchorY, prevX, prevY, roundX, roundY, declutterGroup, image;\n  let pendingFill = 0;\n  let pendingStroke = 0;\n  let lastFillInstruction = null;\n  let lastStrokeInstruction = null;\n  const coordinateCache = this.coordinateCache_;\n  const viewRotation = this.viewRotation_;\n  const state =\n  /** @type {module:ol/render~State} */\n  {\n    context: context,\n    pixelRatio: this.pixelRatio,\n    resolution: this.resolution,\n    rotation: viewRotation\n  }; // When the batch size gets too big, performance decreases. 200 is a good\n  // balance between batch size and number of fill/stroke instructions.\n\n  const batchSize = this.instructions != instructions || this.overlaps ? 0 : 200;\n  let\n  /** @type {module:ol/Feature|module:ol/render/Feature} */\n  feature;\n  let x, y;\n\n  while (i < ii) {\n    const instruction = instructions[i];\n    const type =\n    /** @type {module:ol/render/canvas/Instruction} */\n    instruction[0];\n\n    switch (type) {\n      case CanvasInstruction.BEGIN_GEOMETRY:\n        feature =\n        /** @type {module:ol/Feature|module:ol/render/Feature} */\n        instruction[1];\n\n        if (skipFeatures && skippedFeaturesHash[getUid(feature).toString()] || !feature.getGeometry()) {\n          i =\n          /** @type {number} */\n          instruction[2];\n        } else if (opt_hitExtent !== undefined && !intersects(opt_hitExtent, feature.getGeometry().getExtent())) {\n          i =\n          /** @type {number} */\n          instruction[2] + 1;\n        } else {\n          ++i;\n        }\n\n        break;\n\n      case CanvasInstruction.BEGIN_PATH:\n        if (pendingFill > batchSize) {\n          this.fill_(context);\n          pendingFill = 0;\n        }\n\n        if (pendingStroke > batchSize) {\n          context.stroke();\n          pendingStroke = 0;\n        }\n\n        if (!pendingFill && !pendingStroke) {\n          context.beginPath();\n          prevX = prevY = NaN;\n        }\n\n        ++i;\n        break;\n\n      case CanvasInstruction.CIRCLE:\n        d =\n        /** @type {number} */\n        instruction[1];\n        const x1 = pixelCoordinates[d];\n        const y1 = pixelCoordinates[d + 1];\n        const x2 = pixelCoordinates[d + 2];\n        const y2 = pixelCoordinates[d + 3];\n        const dx = x2 - x1;\n        const dy = y2 - y1;\n        const r = Math.sqrt(dx * dx + dy * dy);\n        context.moveTo(x1 + r, y1);\n        context.arc(x1, y1, r, 0, 2 * Math.PI, true);\n        ++i;\n        break;\n\n      case CanvasInstruction.CLOSE_PATH:\n        context.closePath();\n        ++i;\n        break;\n\n      case CanvasInstruction.CUSTOM:\n        d =\n        /** @type {number} */\n        instruction[1];\n        dd = instruction[2];\n        const geometry =\n        /** @type {module:ol/geom/SimpleGeometry} */\n        instruction[3];\n        const renderer = instruction[4];\n        const fn = instruction.length == 6 ? instruction[5] : undefined;\n        state.geometry = geometry;\n        state.feature = feature;\n\n        if (!(i in coordinateCache)) {\n          coordinateCache[i] = [];\n        }\n\n        const coords = coordinateCache[i];\n\n        if (fn) {\n          fn(pixelCoordinates, d, dd, 2, coords);\n        } else {\n          coords[0] = pixelCoordinates[d];\n          coords[1] = pixelCoordinates[d + 1];\n          coords.length = 2;\n        }\n\n        renderer(coords, state);\n        ++i;\n        break;\n\n      case CanvasInstruction.DRAW_IMAGE:\n        d =\n        /** @type {number} */\n        instruction[1];\n        dd =\n        /** @type {number} */\n        instruction[2];\n        image =\n        /** @type {HTMLCanvasElement|HTMLVideoElement|Image} */\n        instruction[3]; // Remaining arguments in DRAW_IMAGE are in alphabetical order\n\n        anchorX =\n        /** @type {number} */\n        instruction[4];\n        anchorY =\n        /** @type {number} */\n        instruction[5];\n        declutterGroup = featureCallback ? null :\n        /** @type {module:ol/render/canvas~DeclutterGroup} */\n        instruction[6];\n        const height =\n        /** @type {number} */\n        instruction[7];\n        const opacity =\n        /** @type {number} */\n        instruction[8];\n        const originX =\n        /** @type {number} */\n        instruction[9];\n        const originY =\n        /** @type {number} */\n        instruction[10];\n        const rotateWithView =\n        /** @type {boolean} */\n        instruction[11];\n        let rotation =\n        /** @type {number} */\n        instruction[12];\n        const scale =\n        /** @type {number} */\n        instruction[13];\n        const snapToPixel =\n        /** @type {boolean} */\n        instruction[14];\n        const width =\n        /** @type {number} */\n        instruction[15];\n        let padding, backgroundFill, backgroundStroke;\n\n        if (instruction.length > 16) {\n          padding =\n          /** @type {Array.<number>} */\n          instruction[16];\n          backgroundFill =\n          /** @type {boolean} */\n          instruction[17];\n          backgroundStroke =\n          /** @type {boolean} */\n          instruction[18];\n        } else {\n          padding = defaultPadding;\n          backgroundFill = backgroundStroke = false;\n        }\n\n        if (rotateWithView) {\n          rotation += viewRotation;\n        }\n\n        for (; d < dd; d += 2) {\n          this.replayImage_(context, pixelCoordinates[d], pixelCoordinates[d + 1], image, anchorX, anchorY, declutterGroup, height, opacity, originX, originY, rotation, scale, snapToPixel, width, padding, backgroundFill ?\n          /** @type {Array.<*>} */\n          lastFillInstruction : null, backgroundStroke ?\n          /** @type {Array.<*>} */\n          lastStrokeInstruction : null);\n        }\n\n        this.renderDeclutter_(declutterGroup, feature);\n        ++i;\n        break;\n\n      case CanvasInstruction.DRAW_CHARS:\n        const begin =\n        /** @type {number} */\n        instruction[1];\n        const end =\n        /** @type {number} */\n        instruction[2];\n        const baseline =\n        /** @type {number} */\n        instruction[3];\n        declutterGroup = featureCallback ? null :\n        /** @type {module:ol/render/canvas~DeclutterGroup} */\n        instruction[4];\n        const overflow =\n        /** @type {number} */\n        instruction[5];\n        const fillKey =\n        /** @type {string} */\n        instruction[6];\n        const maxAngle =\n        /** @type {number} */\n        instruction[7];\n        const measure =\n        /** @type {function(string):number} */\n        instruction[8];\n        const offsetY =\n        /** @type {number} */\n        instruction[9];\n        const strokeKey =\n        /** @type {string} */\n        instruction[10];\n        const strokeWidth =\n        /** @type {number} */\n        instruction[11];\n        const text =\n        /** @type {string} */\n        instruction[12];\n        const textKey =\n        /** @type {string} */\n        instruction[13];\n        const textScale =\n        /** @type {number} */\n        instruction[14];\n        const pathLength = lineStringLength(pixelCoordinates, begin, end, 2);\n        const textLength = measure(text);\n\n        if (overflow || textLength <= pathLength) {\n          const textAlign =\n          /** @type {module:ol~render} */\n          this.textStates[textKey].textAlign;\n          const startM = (pathLength - textLength) * TEXT_ALIGN[textAlign];\n          const parts = drawTextOnPath(pixelCoordinates, begin, end, 2, text, measure, startM, maxAngle);\n\n          if (parts) {\n            let c, cc, chars, label, part;\n\n            if (strokeKey) {\n              for (c = 0, cc = parts.length; c < cc; ++c) {\n                part = parts[c]; // x, y, anchorX, rotation, chunk\n\n                chars =\n                /** @type {string} */\n                part[4];\n                label =\n                /** @type {module:ol~render} */\n                this.getImage(chars, textKey, '', strokeKey);\n                anchorX =\n                /** @type {number} */\n                part[2] + strokeWidth;\n                anchorY = baseline * label.height + (0.5 - baseline) * 2 * strokeWidth - offsetY;\n                this.replayImage_(context,\n                /** @type {number} */\n                part[0],\n                /** @type {number} */\n                part[1], label, anchorX, anchorY, declutterGroup, label.height, 1, 0, 0,\n                /** @type {number} */\n                part[3], textScale, false, label.width, defaultPadding, null, null);\n              }\n            }\n\n            if (fillKey) {\n              for (c = 0, cc = parts.length; c < cc; ++c) {\n                part = parts[c]; // x, y, anchorX, rotation, chunk\n\n                chars =\n                /** @type {string} */\n                part[4];\n                label =\n                /** @type {module:ol~render} */\n                this.getImage(chars, textKey, fillKey, '');\n                anchorX =\n                /** @type {number} */\n                part[2];\n                anchorY = baseline * label.height - offsetY;\n                this.replayImage_(context,\n                /** @type {number} */\n                part[0],\n                /** @type {number} */\n                part[1], label, anchorX, anchorY, declutterGroup, label.height, 1, 0, 0,\n                /** @type {number} */\n                part[3], textScale, false, label.width, defaultPadding, null, null);\n              }\n            }\n          }\n        }\n\n        this.renderDeclutter_(declutterGroup, feature);\n        ++i;\n        break;\n\n      case CanvasInstruction.END_GEOMETRY:\n        if (featureCallback !== undefined) {\n          feature =\n          /** @type {module:ol/Feature|module:ol/render/Feature} */\n          instruction[1];\n          const result = featureCallback(feature);\n\n          if (result) {\n            return result;\n          }\n        }\n\n        ++i;\n        break;\n\n      case CanvasInstruction.FILL:\n        if (batchSize) {\n          pendingFill++;\n        } else {\n          this.fill_(context);\n        }\n\n        ++i;\n        break;\n\n      case CanvasInstruction.MOVE_TO_LINE_TO:\n        d =\n        /** @type {number} */\n        instruction[1];\n        dd =\n        /** @type {number} */\n        instruction[2];\n        x = pixelCoordinates[d];\n        y = pixelCoordinates[d + 1];\n        roundX = x + 0.5 | 0;\n        roundY = y + 0.5 | 0;\n\n        if (roundX !== prevX || roundY !== prevY) {\n          context.moveTo(x, y);\n          prevX = roundX;\n          prevY = roundY;\n        }\n\n        for (d += 2; d < dd; d += 2) {\n          x = pixelCoordinates[d];\n          y = pixelCoordinates[d + 1];\n          roundX = x + 0.5 | 0;\n          roundY = y + 0.5 | 0;\n\n          if (d == dd - 2 || roundX !== prevX || roundY !== prevY) {\n            context.lineTo(x, y);\n            prevX = roundX;\n            prevY = roundY;\n          }\n        }\n\n        ++i;\n        break;\n\n      case CanvasInstruction.SET_FILL_STYLE:\n        lastFillInstruction = instruction;\n        this.alignFill_ = instruction[2];\n\n        if (pendingFill) {\n          this.fill_(context);\n          pendingFill = 0;\n\n          if (pendingStroke) {\n            context.stroke();\n            pendingStroke = 0;\n          }\n        }\n\n        context.fillStyle =\n        /** @type {module:ol/colorlike~ColorLike} */\n        instruction[1];\n        ++i;\n        break;\n\n      case CanvasInstruction.SET_STROKE_STYLE:\n        lastStrokeInstruction = instruction;\n\n        if (pendingStroke) {\n          context.stroke();\n          pendingStroke = 0;\n        }\n\n        this.setStrokeStyle_(context,\n        /** @type {Array.<*>} */\n        instruction);\n        ++i;\n        break;\n\n      case CanvasInstruction.STROKE:\n        if (batchSize) {\n          pendingStroke++;\n        } else {\n          context.stroke();\n        }\n\n        ++i;\n        break;\n\n      default:\n        ++i; // consume the instruction anyway, to avoid an infinite loop\n\n        break;\n    }\n  }\n\n  if (pendingFill) {\n    this.fill_(context);\n  }\n\n  if (pendingStroke) {\n    context.stroke();\n  }\n\n  return undefined;\n};\n/**\n * @param {CanvasRenderingContext2D} context Context.\n * @param {module:ol/transform~Transform} transform Transform.\n * @param {number} viewRotation View rotation.\n * @param {Object.<string, boolean>} skippedFeaturesHash Ids of features\n *     to skip.\n */\n\n\nCanvasReplay.prototype.replay = function (context, transform, viewRotation, skippedFeaturesHash) {\n  this.viewRotation_ = viewRotation;\n  this.replay_(context, transform, skippedFeaturesHash, this.instructions, undefined, undefined);\n};\n/**\n * @param {CanvasRenderingContext2D} context Context.\n * @param {module:ol/transform~Transform} transform Transform.\n * @param {number} viewRotation View rotation.\n * @param {Object.<string, boolean>} skippedFeaturesHash Ids of features\n *     to skip.\n * @param {function((module:ol/Feature|module:ol/render/Feature)): T=} opt_featureCallback\n *     Feature callback.\n * @param {module:ol/extent~Extent=} opt_hitExtent Only check features that intersect this\n *     extent.\n * @return {T|undefined} Callback result.\n * @template T\n */\n\n\nCanvasReplay.prototype.replayHitDetection = function (context, transform, viewRotation, skippedFeaturesHash, opt_featureCallback, opt_hitExtent) {\n  this.viewRotation_ = viewRotation;\n  return this.replay_(context, transform, skippedFeaturesHash, this.hitDetectionInstructions, opt_featureCallback, opt_hitExtent);\n};\n/**\n * Reverse the hit detection instructions.\n */\n\n\nCanvasReplay.prototype.reverseHitDetectionInstructions = function () {\n  const hitDetectionInstructions = this.hitDetectionInstructions; // step 1 - reverse array\n\n  hitDetectionInstructions.reverse(); // step 2 - reverse instructions within geometry blocks\n\n  let i;\n  const n = hitDetectionInstructions.length;\n  let instruction;\n  let type;\n  let begin = -1;\n\n  for (i = 0; i < n; ++i) {\n    instruction = hitDetectionInstructions[i];\n    type =\n    /** @type {module:ol/render/canvas/Instruction} */\n    instruction[0];\n\n    if (type == CanvasInstruction.END_GEOMETRY) {\n      begin = i;\n    } else if (type == CanvasInstruction.BEGIN_GEOMETRY) {\n      instruction[2] = i;\n      reverseSubArray(this.hitDetectionInstructions, begin, i);\n      begin = -1;\n    }\n  }\n};\n/**\n * @inheritDoc\n */\n\n\nCanvasReplay.prototype.setFillStrokeStyle = function (fillStyle, strokeStyle) {\n  const state = this.state;\n\n  if (fillStyle) {\n    const fillStyleColor = fillStyle.getColor();\n    state.fillStyle = asColorLike(fillStyleColor ? fillStyleColor : defaultFillStyle);\n  } else {\n    state.fillStyle = undefined;\n  }\n\n  if (strokeStyle) {\n    const strokeStyleColor = strokeStyle.getColor();\n    state.strokeStyle = asColorLike(strokeStyleColor ? strokeStyleColor : defaultStrokeStyle);\n    const strokeStyleLineCap = strokeStyle.getLineCap();\n    state.lineCap = strokeStyleLineCap !== undefined ? strokeStyleLineCap : defaultLineCap;\n    const strokeStyleLineDash = strokeStyle.getLineDash();\n    state.lineDash = strokeStyleLineDash ? strokeStyleLineDash.slice() : defaultLineDash;\n    const strokeStyleLineDashOffset = strokeStyle.getLineDashOffset();\n    state.lineDashOffset = strokeStyleLineDashOffset ? strokeStyleLineDashOffset : defaultLineDashOffset;\n    const strokeStyleLineJoin = strokeStyle.getLineJoin();\n    state.lineJoin = strokeStyleLineJoin !== undefined ? strokeStyleLineJoin : defaultLineJoin;\n    const strokeStyleWidth = strokeStyle.getWidth();\n    state.lineWidth = strokeStyleWidth !== undefined ? strokeStyleWidth : defaultLineWidth;\n    const strokeStyleMiterLimit = strokeStyle.getMiterLimit();\n    state.miterLimit = strokeStyleMiterLimit !== undefined ? strokeStyleMiterLimit : defaultMiterLimit;\n\n    if (state.lineWidth > this.maxLineWidth) {\n      this.maxLineWidth = state.lineWidth; // invalidate the buffered max extent cache\n\n      this.bufferedMaxExtent_ = null;\n    }\n  } else {\n    state.strokeStyle = undefined;\n    state.lineCap = undefined;\n    state.lineDash = null;\n    state.lineDashOffset = undefined;\n    state.lineJoin = undefined;\n    state.lineWidth = undefined;\n    state.miterLimit = undefined;\n  }\n};\n/**\n * @param {module:ol/render/canvas~FillStrokeState} state State.\n * @param {module:ol/geom/Geometry|module:ol/render/Feature} geometry Geometry.\n * @return {Array.<*>} Fill instruction.\n */\n\n\nCanvasReplay.prototype.createFill = function (state, geometry) {\n  const fillStyle = state.fillStyle;\n  const fillInstruction = [CanvasInstruction.SET_FILL_STYLE, fillStyle];\n\n  if (typeof fillStyle !== 'string') {\n    // Fill is a pattern or gradient - align it!\n    fillInstruction.push(true);\n  }\n\n  return fillInstruction;\n};\n/**\n * @param {module:ol/render/canvas~FillStrokeState} state State.\n */\n\n\nCanvasReplay.prototype.applyStroke = function (state) {\n  this.instructions.push(this.createStroke(state));\n};\n/**\n * @param {module:ol/render/canvas~FillStrokeState} state State.\n * @return {Array.<*>} Stroke instruction.\n */\n\n\nCanvasReplay.prototype.createStroke = function (state) {\n  return [CanvasInstruction.SET_STROKE_STYLE, state.strokeStyle, state.lineWidth * this.pixelRatio, state.lineCap, state.lineJoin, state.miterLimit, this.applyPixelRatio(state.lineDash), state.lineDashOffset * this.pixelRatio];\n};\n/**\n * @param {module:ol/render/canvas~FillStrokeState} state State.\n * @param {function(this:module:ol/render/canvas/Replay, module:ol/render/canvas~FillStrokeState, (module:ol/geom/Geometry|module:ol/render/Feature)):Array.<*>} createFill Create fill.\n * @param {module:ol/geom/Geometry|module:ol/render/Feature} geometry Geometry.\n */\n\n\nCanvasReplay.prototype.updateFillStyle = function (state, createFill, geometry) {\n  const fillStyle = state.fillStyle;\n\n  if (typeof fillStyle !== 'string' || state.currentFillStyle != fillStyle) {\n    if (fillStyle !== undefined) {\n      this.instructions.push(createFill.call(this, state, geometry));\n    }\n\n    state.currentFillStyle = fillStyle;\n  }\n};\n/**\n * @param {module:ol/render/canvas~FillStrokeState} state State.\n * @param {function(this:module:ol/render/canvas/Replay, module:ol/render/canvas~FillStrokeState)} applyStroke Apply stroke.\n */\n\n\nCanvasReplay.prototype.updateStrokeStyle = function (state, applyStroke) {\n  const strokeStyle = state.strokeStyle;\n  const lineCap = state.lineCap;\n  const lineDash = state.lineDash;\n  const lineDashOffset = state.lineDashOffset;\n  const lineJoin = state.lineJoin;\n  const lineWidth = state.lineWidth;\n  const miterLimit = state.miterLimit;\n\n  if (state.currentStrokeStyle != strokeStyle || state.currentLineCap != lineCap || lineDash != state.currentLineDash && !equals(state.currentLineDash, lineDash) || state.currentLineDashOffset != lineDashOffset || state.currentLineJoin != lineJoin || state.currentLineWidth != lineWidth || state.currentMiterLimit != miterLimit) {\n    if (strokeStyle !== undefined) {\n      applyStroke.call(this, state);\n    }\n\n    state.currentStrokeStyle = strokeStyle;\n    state.currentLineCap = lineCap;\n    state.currentLineDash = lineDash;\n    state.currentLineDashOffset = lineDashOffset;\n    state.currentLineJoin = lineJoin;\n    state.currentLineWidth = lineWidth;\n    state.currentMiterLimit = miterLimit;\n  }\n};\n/**\n * @param {module:ol/geom/Geometry|module:ol/render/Feature} geometry Geometry.\n * @param {module:ol/Feature|module:ol/render/Feature} feature Feature.\n */\n\n\nCanvasReplay.prototype.endGeometry = function (geometry, feature) {\n  this.beginGeometryInstruction1_[2] = this.instructions.length;\n  this.beginGeometryInstruction1_ = null;\n  this.beginGeometryInstruction2_[2] = this.hitDetectionInstructions.length;\n  this.beginGeometryInstruction2_ = null;\n  const endGeometryInstruction = [CanvasInstruction.END_GEOMETRY, feature];\n  this.instructions.push(endGeometryInstruction);\n  this.hitDetectionInstructions.push(endGeometryInstruction);\n};\n/**\n * FIXME empty description for jsdoc\n */\n\n\nCanvasReplay.prototype.finish = UNDEFINED;\n/**\n * Get the buffered rendering extent.  Rendering will be clipped to the extent\n * provided to the constructor.  To account for symbolizers that may intersect\n * this extent, we calculate a buffered extent (e.g. based on stroke width).\n * @return {module:ol/extent~Extent} The buffered rendering extent.\n * @protected\n */\n\nCanvasReplay.prototype.getBufferedMaxExtent = function () {\n  if (!this.bufferedMaxExtent_) {\n    this.bufferedMaxExtent_ = clone(this.maxExtent);\n\n    if (this.maxLineWidth > 0) {\n      const width = this.resolution * (this.maxLineWidth + 1) / 2;\n      buffer(this.bufferedMaxExtent_, width, this.bufferedMaxExtent_);\n    }\n  }\n\n  return this.bufferedMaxExtent_;\n};\n\nexport default CanvasReplay;","map":null,"metadata":{},"sourceType":"module"}