{"ast":null,"code":"/**\n * @module ol/style/RegularShape\n */\nimport { asString } from '../color.js';\nimport { asColorLike } from '../colorlike.js';\nimport { createCanvasContext2D } from '../dom.js';\nimport { CANVAS_LINE_DASH } from '../has.js';\nimport ImageState from '../ImageState.js';\nimport { defaultStrokeStyle, defaultFillStyle, defaultLineCap, defaultLineWidth, defaultLineJoin, defaultMiterLimit } from '../render/canvas.js';\nimport ImageStyle from './Image.js';\n/**\n * Specify radius for regular polygons, or radius1 and radius2 for stars.\n * @typedef {Object} Options\n * @property {import(\"./Fill.js\").default} [fill] Fill style.\n * @property {number} points Number of points for stars and regular polygons. In case of a polygon, the number of points\n * is the number of sides.\n * @property {number} [radius] Radius of a regular polygon.\n * @property {number} [radius1] Outer radius of a star.\n * @property {number} [radius2] Inner radius of a star.\n * @property {number} [angle=0] Shape's angle in radians. A value of 0 will have one of the shape's point facing up.\n * @property {import(\"./Stroke.js\").default} [stroke] Stroke style.\n * @property {number} [rotation=0] Rotation in radians (positive rotation clockwise).\n * @property {boolean} [rotateWithView=false] Whether to rotate the shape with the view.\n * @property {import(\"./AtlasManager.js\").default} [atlasManager] The atlas manager to use for this symbol. When\n * using WebGL it is recommended to use an atlas manager to avoid texture switching. If an atlas manager is given, the\n * symbol is added to an atlas. By default no atlas manager is used.\n */\n\n/**\n * @typedef {Object} RenderOptions\n * @property {import(\"../colorlike.js\").ColorLike} [strokeStyle]\n * @property {number} strokeWidth\n * @property {number} size\n * @property {string} lineCap\n * @property {Array<number>} lineDash\n * @property {number} lineDashOffset\n * @property {string} lineJoin\n * @property {number} miterLimit\n */\n\n/**\n * @classdesc\n * Set regular shape style for vector features. The resulting shape will be\n * a regular polygon when `radius` is provided, or a star when `radius1` and\n * `radius2` are provided.\n * @api\n */\n\nvar RegularShape =\n/*@__PURE__*/\nfunction (ImageStyle) {\n  function RegularShape(options) {\n    /**\n     * @type {boolean}\n     */\n    var rotateWithView = options.rotateWithView !== undefined ? options.rotateWithView : false;\n    ImageStyle.call(this, {\n      opacity: 1,\n      rotateWithView: rotateWithView,\n      rotation: options.rotation !== undefined ? options.rotation : 0,\n      scale: 1\n    });\n    /**\n     * @private\n     * @type {Array<string|number>}\n     */\n\n    this.checksums_ = null;\n    /**\n     * @private\n     * @type {HTMLCanvasElement}\n     */\n\n    this.canvas_ = null;\n    /**\n     * @private\n     * @type {HTMLCanvasElement}\n     */\n\n    this.hitDetectionCanvas_ = null;\n    /**\n     * @private\n     * @type {import(\"./Fill.js\").default}\n     */\n\n    this.fill_ = options.fill !== undefined ? options.fill : null;\n    /**\n     * @private\n     * @type {Array<number>}\n     */\n\n    this.origin_ = [0, 0];\n    /**\n     * @private\n     * @type {number}\n     */\n\n    this.points_ = options.points;\n    /**\n     * @protected\n     * @type {number}\n     */\n\n    this.radius_ =\n    /** @type {number} */\n    options.radius !== undefined ? options.radius : options.radius1;\n    /**\n     * @private\n     * @type {number|undefined}\n     */\n\n    this.radius2_ = options.radius2;\n    /**\n     * @private\n     * @type {number}\n     */\n\n    this.angle_ = options.angle !== undefined ? options.angle : 0;\n    /**\n     * @private\n     * @type {import(\"./Stroke.js\").default}\n     */\n\n    this.stroke_ = options.stroke !== undefined ? options.stroke : null;\n    /**\n     * @private\n     * @type {Array<number>}\n     */\n\n    this.anchor_ = null;\n    /**\n     * @private\n     * @type {import(\"../size.js\").Size}\n     */\n\n    this.size_ = null;\n    /**\n     * @private\n     * @type {import(\"../size.js\").Size}\n     */\n\n    this.imageSize_ = null;\n    /**\n     * @private\n     * @type {import(\"../size.js\").Size}\n     */\n\n    this.hitDetectionImageSize_ = null;\n    /**\n     * @protected\n     * @type {import(\"./AtlasManager.js\").default|undefined}\n     */\n\n    this.atlasManager_ = options.atlasManager;\n    this.render_(this.atlasManager_);\n  }\n\n  if (ImageStyle) RegularShape.__proto__ = ImageStyle;\n  RegularShape.prototype = Object.create(ImageStyle && ImageStyle.prototype);\n  RegularShape.prototype.constructor = RegularShape;\n  /**\n   * Clones the style. If an atlasmanager was provided to the original style it will be used in the cloned style, too.\n   * @return {RegularShape} The cloned style.\n   * @api\n   */\n\n  RegularShape.prototype.clone = function clone() {\n    var style = new RegularShape({\n      fill: this.getFill() ? this.getFill().clone() : undefined,\n      points: this.getPoints(),\n      radius: this.getRadius(),\n      radius2: this.getRadius2(),\n      angle: this.getAngle(),\n      stroke: this.getStroke() ? this.getStroke().clone() : undefined,\n      rotation: this.getRotation(),\n      rotateWithView: this.getRotateWithView(),\n      atlasManager: this.atlasManager_\n    });\n    style.setOpacity(this.getOpacity());\n    style.setScale(this.getScale());\n    return style;\n  };\n  /**\n   * @inheritDoc\n   * @api\n   */\n\n\n  RegularShape.prototype.getAnchor = function getAnchor() {\n    return this.anchor_;\n  };\n  /**\n   * Get the angle used in generating the shape.\n   * @return {number} Shape's rotation in radians.\n   * @api\n   */\n\n\n  RegularShape.prototype.getAngle = function getAngle() {\n    return this.angle_;\n  };\n  /**\n   * Get the fill style for the shape.\n   * @return {import(\"./Fill.js\").default} Fill style.\n   * @api\n   */\n\n\n  RegularShape.prototype.getFill = function getFill() {\n    return this.fill_;\n  };\n  /**\n   * @inheritDoc\n   */\n\n\n  RegularShape.prototype.getHitDetectionImage = function getHitDetectionImage(pixelRatio) {\n    return this.hitDetectionCanvas_;\n  };\n  /**\n   * @inheritDoc\n   * @api\n   */\n\n\n  RegularShape.prototype.getImage = function getImage(pixelRatio) {\n    return this.canvas_;\n  };\n  /**\n   * @inheritDoc\n   */\n\n\n  RegularShape.prototype.getImageSize = function getImageSize() {\n    return this.imageSize_;\n  };\n  /**\n   * @inheritDoc\n   */\n\n\n  RegularShape.prototype.getHitDetectionImageSize = function getHitDetectionImageSize() {\n    return this.hitDetectionImageSize_;\n  };\n  /**\n   * @inheritDoc\n   */\n\n\n  RegularShape.prototype.getImageState = function getImageState() {\n    return ImageState.LOADED;\n  };\n  /**\n   * @inheritDoc\n   * @api\n   */\n\n\n  RegularShape.prototype.getOrigin = function getOrigin() {\n    return this.origin_;\n  };\n  /**\n   * Get the number of points for generating the shape.\n   * @return {number} Number of points for stars and regular polygons.\n   * @api\n   */\n\n\n  RegularShape.prototype.getPoints = function getPoints() {\n    return this.points_;\n  };\n  /**\n   * Get the (primary) radius for the shape.\n   * @return {number} Radius.\n   * @api\n   */\n\n\n  RegularShape.prototype.getRadius = function getRadius() {\n    return this.radius_;\n  };\n  /**\n   * Get the secondary radius for the shape.\n   * @return {number|undefined} Radius2.\n   * @api\n   */\n\n\n  RegularShape.prototype.getRadius2 = function getRadius2() {\n    return this.radius2_;\n  };\n  /**\n   * @inheritDoc\n   * @api\n   */\n\n\n  RegularShape.prototype.getSize = function getSize() {\n    return this.size_;\n  };\n  /**\n   * Get the stroke style for the shape.\n   * @return {import(\"./Stroke.js\").default} Stroke style.\n   * @api\n   */\n\n\n  RegularShape.prototype.getStroke = function getStroke() {\n    return this.stroke_;\n  };\n  /**\n   * @inheritDoc\n   */\n\n\n  RegularShape.prototype.listenImageChange = function listenImageChange(listener, thisArg) {\n    return undefined;\n  };\n  /**\n   * @inheritDoc\n   */\n\n\n  RegularShape.prototype.load = function load() {};\n  /**\n   * @inheritDoc\n   */\n\n\n  RegularShape.prototype.unlistenImageChange = function unlistenImageChange(listener, thisArg) {};\n  /**\n   * @protected\n   * @param {import(\"./AtlasManager.js\").default|undefined} atlasManager An atlas manager.\n   */\n\n\n  RegularShape.prototype.render_ = function render_(atlasManager) {\n    var imageSize;\n    var lineCap = '';\n    var lineJoin = '';\n    var miterLimit = 0;\n    var lineDash = null;\n    var lineDashOffset = 0;\n    var strokeStyle;\n    var strokeWidth = 0;\n\n    if (this.stroke_) {\n      strokeStyle = this.stroke_.getColor();\n\n      if (strokeStyle === null) {\n        strokeStyle = defaultStrokeStyle;\n      }\n\n      strokeStyle = asColorLike(strokeStyle);\n      strokeWidth = this.stroke_.getWidth();\n\n      if (strokeWidth === undefined) {\n        strokeWidth = defaultLineWidth;\n      }\n\n      lineDash = this.stroke_.getLineDash();\n      lineDashOffset = this.stroke_.getLineDashOffset();\n\n      if (!CANVAS_LINE_DASH) {\n        lineDash = null;\n        lineDashOffset = 0;\n      }\n\n      lineJoin = this.stroke_.getLineJoin();\n\n      if (lineJoin === undefined) {\n        lineJoin = defaultLineJoin;\n      }\n\n      lineCap = this.stroke_.getLineCap();\n\n      if (lineCap === undefined) {\n        lineCap = defaultLineCap;\n      }\n\n      miterLimit = this.stroke_.getMiterLimit();\n\n      if (miterLimit === undefined) {\n        miterLimit = defaultMiterLimit;\n      }\n    }\n\n    var size = 2 * (this.radius_ + strokeWidth) + 1;\n    /** @type {RenderOptions} */\n\n    var renderOptions = {\n      strokeStyle: strokeStyle,\n      strokeWidth: strokeWidth,\n      size: size,\n      lineCap: lineCap,\n      lineDash: lineDash,\n      lineDashOffset: lineDashOffset,\n      lineJoin: lineJoin,\n      miterLimit: miterLimit\n    };\n\n    if (atlasManager === undefined) {\n      // no atlas manager is used, create a new canvas\n      var context = createCanvasContext2D(size, size);\n      this.canvas_ = context.canvas; // canvas.width and height are rounded to the closest integer\n\n      size = this.canvas_.width;\n      imageSize = size;\n      this.draw_(renderOptions, context, 0, 0);\n      this.createHitDetectionCanvas_(renderOptions);\n    } else {\n      // an atlas manager is used, add the symbol to an atlas\n      size = Math.round(size);\n      var hasCustomHitDetectionImage = !this.fill_;\n      var renderHitDetectionCallback;\n\n      if (hasCustomHitDetectionImage) {\n        // render the hit-detection image into a separate atlas image\n        renderHitDetectionCallback = this.drawHitDetectionCanvas_.bind(this, renderOptions);\n      }\n\n      var id = this.getChecksum();\n      var info = atlasManager.add(id, size, size, this.draw_.bind(this, renderOptions), renderHitDetectionCallback);\n      this.canvas_ = info.image;\n      this.origin_ = [info.offsetX, info.offsetY];\n      imageSize = info.image.width;\n\n      if (hasCustomHitDetectionImage) {\n        this.hitDetectionCanvas_ = info.hitImage;\n        this.hitDetectionImageSize_ = [info.hitImage.width, info.hitImage.height];\n      } else {\n        this.hitDetectionCanvas_ = this.canvas_;\n        this.hitDetectionImageSize_ = [imageSize, imageSize];\n      }\n    }\n\n    this.anchor_ = [size / 2, size / 2];\n    this.size_ = [size, size];\n    this.imageSize_ = [imageSize, imageSize];\n  };\n  /**\n   * @private\n   * @param {RenderOptions} renderOptions Render options.\n   * @param {CanvasRenderingContext2D} context The rendering context.\n   * @param {number} x The origin for the symbol (x).\n   * @param {number} y The origin for the symbol (y).\n   */\n\n\n  RegularShape.prototype.draw_ = function draw_(renderOptions, context, x, y) {\n    var i, angle0, radiusC; // reset transform\n\n    context.setTransform(1, 0, 0, 1, 0, 0); // then move to (x, y)\n\n    context.translate(x, y);\n    context.beginPath();\n    var points = this.points_;\n\n    if (points === Infinity) {\n      context.arc(renderOptions.size / 2, renderOptions.size / 2, this.radius_, 0, 2 * Math.PI, true);\n    } else {\n      var radius2 = this.radius2_ !== undefined ? this.radius2_ : this.radius_;\n\n      if (radius2 !== this.radius_) {\n        points = 2 * points;\n      }\n\n      for (i = 0; i <= points; i++) {\n        angle0 = i * 2 * Math.PI / points - Math.PI / 2 + this.angle_;\n        radiusC = i % 2 === 0 ? this.radius_ : radius2;\n        context.lineTo(renderOptions.size / 2 + radiusC * Math.cos(angle0), renderOptions.size / 2 + radiusC * Math.sin(angle0));\n      }\n    }\n\n    if (this.fill_) {\n      var color = this.fill_.getColor();\n\n      if (color === null) {\n        color = defaultFillStyle;\n      }\n\n      context.fillStyle = asColorLike(color);\n      context.fill();\n    }\n\n    if (this.stroke_) {\n      context.strokeStyle = renderOptions.strokeStyle;\n      context.lineWidth = renderOptions.strokeWidth;\n\n      if (renderOptions.lineDash) {\n        context.setLineDash(renderOptions.lineDash);\n        context.lineDashOffset = renderOptions.lineDashOffset;\n      }\n\n      context.lineCap =\n      /** @type {CanvasLineCap} */\n      renderOptions.lineCap;\n      context.lineJoin =\n      /** @type {CanvasLineJoin} */\n      renderOptions.lineJoin;\n      context.miterLimit = renderOptions.miterLimit;\n      context.stroke();\n    }\n\n    context.closePath();\n  };\n  /**\n   * @private\n   * @param {RenderOptions} renderOptions Render options.\n   */\n\n\n  RegularShape.prototype.createHitDetectionCanvas_ = function createHitDetectionCanvas_(renderOptions) {\n    this.hitDetectionImageSize_ = [renderOptions.size, renderOptions.size];\n\n    if (this.fill_) {\n      this.hitDetectionCanvas_ = this.canvas_;\n      return;\n    } // if no fill style is set, create an extra hit-detection image with a\n    // default fill style\n\n\n    var context = createCanvasContext2D(renderOptions.size, renderOptions.size);\n    this.hitDetectionCanvas_ = context.canvas;\n    this.drawHitDetectionCanvas_(renderOptions, context, 0, 0);\n  };\n  /**\n   * @private\n   * @param {RenderOptions} renderOptions Render options.\n   * @param {CanvasRenderingContext2D} context The context.\n   * @param {number} x The origin for the symbol (x).\n   * @param {number} y The origin for the symbol (y).\n   */\n\n\n  RegularShape.prototype.drawHitDetectionCanvas_ = function drawHitDetectionCanvas_(renderOptions, context, x, y) {\n    // reset transform\n    context.setTransform(1, 0, 0, 1, 0, 0); // then move to (x, y)\n\n    context.translate(x, y);\n    context.beginPath();\n    var points = this.points_;\n\n    if (points === Infinity) {\n      context.arc(renderOptions.size / 2, renderOptions.size / 2, this.radius_, 0, 2 * Math.PI, true);\n    } else {\n      var radius2 = this.radius2_ !== undefined ? this.radius2_ : this.radius_;\n\n      if (radius2 !== this.radius_) {\n        points = 2 * points;\n      }\n\n      var i, radiusC, angle0;\n\n      for (i = 0; i <= points; i++) {\n        angle0 = i * 2 * Math.PI / points - Math.PI / 2 + this.angle_;\n        radiusC = i % 2 === 0 ? this.radius_ : radius2;\n        context.lineTo(renderOptions.size / 2 + radiusC * Math.cos(angle0), renderOptions.size / 2 + radiusC * Math.sin(angle0));\n      }\n    }\n\n    context.fillStyle = asString(defaultFillStyle);\n    context.fill();\n\n    if (this.stroke_) {\n      context.strokeStyle = renderOptions.strokeStyle;\n      context.lineWidth = renderOptions.strokeWidth;\n\n      if (renderOptions.lineDash) {\n        context.setLineDash(renderOptions.lineDash);\n        context.lineDashOffset = renderOptions.lineDashOffset;\n      }\n\n      context.stroke();\n    }\n\n    context.closePath();\n  };\n  /**\n   * @return {string} The checksum.\n   */\n\n\n  RegularShape.prototype.getChecksum = function getChecksum() {\n    var strokeChecksum = this.stroke_ ? this.stroke_.getChecksum() : '-';\n    var fillChecksum = this.fill_ ? this.fill_.getChecksum() : '-';\n    var recalculate = !this.checksums_ || strokeChecksum != this.checksums_[1] || fillChecksum != this.checksums_[2] || this.radius_ != this.checksums_[3] || this.radius2_ != this.checksums_[4] || this.angle_ != this.checksums_[5] || this.points_ != this.checksums_[6];\n\n    if (recalculate) {\n      var checksum = 'r' + strokeChecksum + fillChecksum + (this.radius_ !== undefined ? this.radius_.toString() : '-') + (this.radius2_ !== undefined ? this.radius2_.toString() : '-') + (this.angle_ !== undefined ? this.angle_.toString() : '-') + (this.points_ !== undefined ? this.points_.toString() : '-');\n      this.checksums_ = [checksum, strokeChecksum, fillChecksum, this.radius_, this.radius2_, this.angle_, this.points_];\n    }\n\n    return (\n      /** @type {string} */\n      this.checksums_[0]\n    );\n  };\n\n  return RegularShape;\n}(ImageStyle);\n\nexport default RegularShape;","map":{"version":3,"sources":["../../../src/ol/style/RegularShape.js"],"names":["const","super","let"],"mappings":"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","sourcesContent":["/**\n * @module ol/style/RegularShape\n */\n\nimport {asString} from '../color.js';\nimport {asColorLike} from '../colorlike.js';\nimport {createCanvasContext2D} from '../dom.js';\nimport {CANVAS_LINE_DASH} from '../has.js';\nimport ImageState from '../ImageState.js';\nimport {defaultStrokeStyle, defaultFillStyle, defaultLineCap, defaultLineWidth, defaultLineJoin, defaultMiterLimit} from '../render/canvas.js';\nimport ImageStyle from './Image.js';\n\n\n/**\n * Specify radius for regular polygons, or radius1 and radius2 for stars.\n * @typedef {Object} Options\n * @property {import(\"./Fill.js\").default} [fill] Fill style.\n * @property {number} points Number of points for stars and regular polygons. In case of a polygon, the number of points\n * is the number of sides.\n * @property {number} [radius] Radius of a regular polygon.\n * @property {number} [radius1] Outer radius of a star.\n * @property {number} [radius2] Inner radius of a star.\n * @property {number} [angle=0] Shape's angle in radians. A value of 0 will have one of the shape's point facing up.\n * @property {import(\"./Stroke.js\").default} [stroke] Stroke style.\n * @property {number} [rotation=0] Rotation in radians (positive rotation clockwise).\n * @property {boolean} [rotateWithView=false] Whether to rotate the shape with the view.\n * @property {import(\"./AtlasManager.js\").default} [atlasManager] The atlas manager to use for this symbol. When\n * using WebGL it is recommended to use an atlas manager to avoid texture switching. If an atlas manager is given, the\n * symbol is added to an atlas. By default no atlas manager is used.\n */\n\n\n/**\n * @typedef {Object} RenderOptions\n * @property {import(\"../colorlike.js\").ColorLike} [strokeStyle]\n * @property {number} strokeWidth\n * @property {number} size\n * @property {string} lineCap\n * @property {Array<number>} lineDash\n * @property {number} lineDashOffset\n * @property {string} lineJoin\n * @property {number} miterLimit\n */\n\n\n/**\n * @classdesc\n * Set regular shape style for vector features. The resulting shape will be\n * a regular polygon when `radius` is provided, or a star when `radius1` and\n * `radius2` are provided.\n * @api\n */\nclass RegularShape extends ImageStyle {\n  /**\n   * @param {Options} options Options.\n   */\n  constructor(options) {\n    /**\n     * @type {boolean}\n     */\n    const rotateWithView = options.rotateWithView !== undefined ?\n      options.rotateWithView : false;\n\n    super({\n      opacity: 1,\n      rotateWithView: rotateWithView,\n      rotation: options.rotation !== undefined ? options.rotation : 0,\n      scale: 1\n    });\n\n    /**\n     * @private\n     * @type {Array<string|number>}\n     */\n    this.checksums_ = null;\n\n    /**\n     * @private\n     * @type {HTMLCanvasElement}\n     */\n    this.canvas_ = null;\n\n    /**\n     * @private\n     * @type {HTMLCanvasElement}\n     */\n    this.hitDetectionCanvas_ = null;\n\n    /**\n     * @private\n     * @type {import(\"./Fill.js\").default}\n     */\n    this.fill_ = options.fill !== undefined ? options.fill : null;\n\n    /**\n     * @private\n     * @type {Array<number>}\n     */\n    this.origin_ = [0, 0];\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.points_ = options.points;\n\n    /**\n     * @protected\n     * @type {number}\n     */\n    this.radius_ = /** @type {number} */ (options.radius !== undefined ?\n      options.radius : options.radius1);\n\n    /**\n     * @private\n     * @type {number|undefined}\n     */\n    this.radius2_ = options.radius2;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.angle_ = options.angle !== undefined ? options.angle : 0;\n\n    /**\n     * @private\n     * @type {import(\"./Stroke.js\").default}\n     */\n    this.stroke_ = options.stroke !== undefined ? options.stroke : null;\n\n    /**\n     * @private\n     * @type {Array<number>}\n     */\n    this.anchor_ = null;\n\n    /**\n     * @private\n     * @type {import(\"../size.js\").Size}\n     */\n    this.size_ = null;\n\n    /**\n     * @private\n     * @type {import(\"../size.js\").Size}\n     */\n    this.imageSize_ = null;\n\n    /**\n     * @private\n     * @type {import(\"../size.js\").Size}\n     */\n    this.hitDetectionImageSize_ = null;\n\n    /**\n     * @protected\n     * @type {import(\"./AtlasManager.js\").default|undefined}\n     */\n    this.atlasManager_ = options.atlasManager;\n\n    this.render_(this.atlasManager_);\n\n  }\n\n  /**\n   * Clones the style. If an atlasmanager was provided to the original style it will be used in the cloned style, too.\n   * @return {RegularShape} The cloned style.\n   * @api\n   */\n  clone() {\n    const style = new RegularShape({\n      fill: this.getFill() ? this.getFill().clone() : undefined,\n      points: this.getPoints(),\n      radius: this.getRadius(),\n      radius2: this.getRadius2(),\n      angle: this.getAngle(),\n      stroke: this.getStroke() ? this.getStroke().clone() : undefined,\n      rotation: this.getRotation(),\n      rotateWithView: this.getRotateWithView(),\n      atlasManager: this.atlasManager_\n    });\n    style.setOpacity(this.getOpacity());\n    style.setScale(this.getScale());\n    return style;\n  }\n\n  /**\n   * @inheritDoc\n   * @api\n   */\n  getAnchor() {\n    return this.anchor_;\n  }\n\n  /**\n   * Get the angle used in generating the shape.\n   * @return {number} Shape's rotation in radians.\n   * @api\n   */\n  getAngle() {\n    return this.angle_;\n  }\n\n  /**\n   * Get the fill style for the shape.\n   * @return {import(\"./Fill.js\").default} Fill style.\n   * @api\n   */\n  getFill() {\n    return this.fill_;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  getHitDetectionImage(pixelRatio) {\n    return this.hitDetectionCanvas_;\n  }\n\n  /**\n   * @inheritDoc\n   * @api\n   */\n  getImage(pixelRatio) {\n    return this.canvas_;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  getImageSize() {\n    return this.imageSize_;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  getHitDetectionImageSize() {\n    return this.hitDetectionImageSize_;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  getImageState() {\n    return ImageState.LOADED;\n  }\n\n  /**\n   * @inheritDoc\n   * @api\n   */\n  getOrigin() {\n    return this.origin_;\n  }\n\n  /**\n   * Get the number of points for generating the shape.\n   * @return {number} Number of points for stars and regular polygons.\n   * @api\n   */\n  getPoints() {\n    return this.points_;\n  }\n\n  /**\n   * Get the (primary) radius for the shape.\n   * @return {number} Radius.\n   * @api\n   */\n  getRadius() {\n    return this.radius_;\n  }\n\n  /**\n   * Get the secondary radius for the shape.\n   * @return {number|undefined} Radius2.\n   * @api\n   */\n  getRadius2() {\n    return this.radius2_;\n  }\n\n  /**\n   * @inheritDoc\n   * @api\n   */\n  getSize() {\n    return this.size_;\n  }\n\n  /**\n   * Get the stroke style for the shape.\n   * @return {import(\"./Stroke.js\").default} Stroke style.\n   * @api\n   */\n  getStroke() {\n    return this.stroke_;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  listenImageChange(listener, thisArg) {\n    return undefined;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  load() {}\n\n  /**\n   * @inheritDoc\n   */\n  unlistenImageChange(listener, thisArg) {}\n\n  /**\n   * @protected\n   * @param {import(\"./AtlasManager.js\").default|undefined} atlasManager An atlas manager.\n   */\n  render_(atlasManager) {\n    let imageSize;\n    let lineCap = '';\n    let lineJoin = '';\n    let miterLimit = 0;\n    let lineDash = null;\n    let lineDashOffset = 0;\n    let strokeStyle;\n    let strokeWidth = 0;\n\n    if (this.stroke_) {\n      strokeStyle = this.stroke_.getColor();\n      if (strokeStyle === null) {\n        strokeStyle = defaultStrokeStyle;\n      }\n      strokeStyle = asColorLike(strokeStyle);\n      strokeWidth = this.stroke_.getWidth();\n      if (strokeWidth === undefined) {\n        strokeWidth = defaultLineWidth;\n      }\n      lineDash = this.stroke_.getLineDash();\n      lineDashOffset = this.stroke_.getLineDashOffset();\n      if (!CANVAS_LINE_DASH) {\n        lineDash = null;\n        lineDashOffset = 0;\n      }\n      lineJoin = this.stroke_.getLineJoin();\n      if (lineJoin === undefined) {\n        lineJoin = defaultLineJoin;\n      }\n      lineCap = this.stroke_.getLineCap();\n      if (lineCap === undefined) {\n        lineCap = defaultLineCap;\n      }\n      miterLimit = this.stroke_.getMiterLimit();\n      if (miterLimit === undefined) {\n        miterLimit = defaultMiterLimit;\n      }\n    }\n\n    let size = 2 * (this.radius_ + strokeWidth) + 1;\n\n    /** @type {RenderOptions} */\n    const renderOptions = {\n      strokeStyle: strokeStyle,\n      strokeWidth: strokeWidth,\n      size: size,\n      lineCap: lineCap,\n      lineDash: lineDash,\n      lineDashOffset: lineDashOffset,\n      lineJoin: lineJoin,\n      miterLimit: miterLimit\n    };\n\n    if (atlasManager === undefined) {\n      // no atlas manager is used, create a new canvas\n      const context = createCanvasContext2D(size, size);\n      this.canvas_ = context.canvas;\n\n      // canvas.width and height are rounded to the closest integer\n      size = this.canvas_.width;\n      imageSize = size;\n\n      this.draw_(renderOptions, context, 0, 0);\n\n      this.createHitDetectionCanvas_(renderOptions);\n    } else {\n      // an atlas manager is used, add the symbol to an atlas\n      size = Math.round(size);\n\n      const hasCustomHitDetectionImage = !this.fill_;\n      let renderHitDetectionCallback;\n      if (hasCustomHitDetectionImage) {\n        // render the hit-detection image into a separate atlas image\n        renderHitDetectionCallback =\n            this.drawHitDetectionCanvas_.bind(this, renderOptions);\n      }\n\n      const id = this.getChecksum();\n      const info = atlasManager.add(\n        id, size, size, this.draw_.bind(this, renderOptions),\n        renderHitDetectionCallback);\n\n      this.canvas_ = info.image;\n      this.origin_ = [info.offsetX, info.offsetY];\n      imageSize = info.image.width;\n\n      if (hasCustomHitDetectionImage) {\n        this.hitDetectionCanvas_ = info.hitImage;\n        this.hitDetectionImageSize_ =\n            [info.hitImage.width, info.hitImage.height];\n      } else {\n        this.hitDetectionCanvas_ = this.canvas_;\n        this.hitDetectionImageSize_ = [imageSize, imageSize];\n      }\n    }\n\n    this.anchor_ = [size / 2, size / 2];\n    this.size_ = [size, size];\n    this.imageSize_ = [imageSize, imageSize];\n  }\n\n  /**\n   * @private\n   * @param {RenderOptions} renderOptions Render options.\n   * @param {CanvasRenderingContext2D} context The rendering context.\n   * @param {number} x The origin for the symbol (x).\n   * @param {number} y The origin for the symbol (y).\n   */\n  draw_(renderOptions, context, x, y) {\n    let i, angle0, radiusC;\n    // reset transform\n    context.setTransform(1, 0, 0, 1, 0, 0);\n\n    // then move to (x, y)\n    context.translate(x, y);\n\n    context.beginPath();\n\n    let points = this.points_;\n    if (points === Infinity) {\n      context.arc(\n        renderOptions.size / 2, renderOptions.size / 2,\n        this.radius_, 0, 2 * Math.PI, true);\n    } else {\n      const radius2 = (this.radius2_ !== undefined) ? this.radius2_\n        : this.radius_;\n      if (radius2 !== this.radius_) {\n        points = 2 * points;\n      }\n      for (i = 0; i <= points; i++) {\n        angle0 = i * 2 * Math.PI / points - Math.PI / 2 + this.angle_;\n        radiusC = i % 2 === 0 ? this.radius_ : radius2;\n        context.lineTo(renderOptions.size / 2 + radiusC * Math.cos(angle0),\n          renderOptions.size / 2 + radiusC * Math.sin(angle0));\n      }\n    }\n\n\n    if (this.fill_) {\n      let color = this.fill_.getColor();\n      if (color === null) {\n        color = defaultFillStyle;\n      }\n      context.fillStyle = asColorLike(color);\n      context.fill();\n    }\n    if (this.stroke_) {\n      context.strokeStyle = renderOptions.strokeStyle;\n      context.lineWidth = renderOptions.strokeWidth;\n      if (renderOptions.lineDash) {\n        context.setLineDash(renderOptions.lineDash);\n        context.lineDashOffset = renderOptions.lineDashOffset;\n      }\n      context.lineCap = /** @type {CanvasLineCap} */ (renderOptions.lineCap);\n      context.lineJoin = /** @type {CanvasLineJoin} */ (renderOptions.lineJoin);\n      context.miterLimit = renderOptions.miterLimit;\n      context.stroke();\n    }\n    context.closePath();\n  }\n\n  /**\n   * @private\n   * @param {RenderOptions} renderOptions Render options.\n   */\n  createHitDetectionCanvas_(renderOptions) {\n    this.hitDetectionImageSize_ = [renderOptions.size, renderOptions.size];\n    if (this.fill_) {\n      this.hitDetectionCanvas_ = this.canvas_;\n      return;\n    }\n\n    // if no fill style is set, create an extra hit-detection image with a\n    // default fill style\n    const context = createCanvasContext2D(renderOptions.size, renderOptions.size);\n    this.hitDetectionCanvas_ = context.canvas;\n\n    this.drawHitDetectionCanvas_(renderOptions, context, 0, 0);\n  }\n\n  /**\n   * @private\n   * @param {RenderOptions} renderOptions Render options.\n   * @param {CanvasRenderingContext2D} context The context.\n   * @param {number} x The origin for the symbol (x).\n   * @param {number} y The origin for the symbol (y).\n   */\n  drawHitDetectionCanvas_(renderOptions, context, x, y) {\n    // reset transform\n    context.setTransform(1, 0, 0, 1, 0, 0);\n\n    // then move to (x, y)\n    context.translate(x, y);\n\n    context.beginPath();\n\n    let points = this.points_;\n    if (points === Infinity) {\n      context.arc(\n        renderOptions.size / 2, renderOptions.size / 2,\n        this.radius_, 0, 2 * Math.PI, true);\n    } else {\n      const radius2 = (this.radius2_ !== undefined) ? this.radius2_\n        : this.radius_;\n      if (radius2 !== this.radius_) {\n        points = 2 * points;\n      }\n      let i, radiusC, angle0;\n      for (i = 0; i <= points; i++) {\n        angle0 = i * 2 * Math.PI / points - Math.PI / 2 + this.angle_;\n        radiusC = i % 2 === 0 ? this.radius_ : radius2;\n        context.lineTo(renderOptions.size / 2 + radiusC * Math.cos(angle0),\n          renderOptions.size / 2 + radiusC * Math.sin(angle0));\n      }\n    }\n\n    context.fillStyle = asString(defaultFillStyle);\n    context.fill();\n    if (this.stroke_) {\n      context.strokeStyle = renderOptions.strokeStyle;\n      context.lineWidth = renderOptions.strokeWidth;\n      if (renderOptions.lineDash) {\n        context.setLineDash(renderOptions.lineDash);\n        context.lineDashOffset = renderOptions.lineDashOffset;\n      }\n      context.stroke();\n    }\n    context.closePath();\n  }\n\n  /**\n   * @return {string} The checksum.\n   */\n  getChecksum() {\n    const strokeChecksum = this.stroke_ ?\n      this.stroke_.getChecksum() : '-';\n    const fillChecksum = this.fill_ ?\n      this.fill_.getChecksum() : '-';\n\n    const recalculate = !this.checksums_ ||\n        (strokeChecksum != this.checksums_[1] ||\n        fillChecksum != this.checksums_[2] ||\n        this.radius_ != this.checksums_[3] ||\n        this.radius2_ != this.checksums_[4] ||\n        this.angle_ != this.checksums_[5] ||\n        this.points_ != this.checksums_[6]);\n\n    if (recalculate) {\n      const checksum = 'r' + strokeChecksum + fillChecksum +\n          (this.radius_ !== undefined ? this.radius_.toString() : '-') +\n          (this.radius2_ !== undefined ? this.radius2_.toString() : '-') +\n          (this.angle_ !== undefined ? this.angle_.toString() : '-') +\n          (this.points_ !== undefined ? this.points_.toString() : '-');\n      this.checksums_ = [checksum, strokeChecksum, fillChecksum,\n        this.radius_, this.radius2_, this.angle_, this.points_];\n    }\n\n    return /** @type {string} */ (this.checksums_[0]);\n  }\n}\n\n\nexport default RegularShape;\n"]},"metadata":{},"sourceType":"module"}