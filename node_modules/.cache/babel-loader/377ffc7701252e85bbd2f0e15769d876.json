{"ast":null,"code":"/**\n * @module ol/pointer/TouchSource\n */\n// Based on https://github.com/Polymer/PointerEvents\n// Copyright (c) 2013 The Polymer Authors. All rights reserved.\n//\n// Redistribution and use in source and binary forms, with or without\n// modification, are permitted provided that the following conditions are\n// met:\n//\n// * Redistributions of source code must retain the above copyright\n// notice, this list of conditions and the following disclaimer.\n// * Redistributions in binary form must reproduce the above\n// copyright notice, this list of conditions and the following disclaimer\n// in the documentation and/or other materials provided with the\n// distribution.\n// * Neither the name of Google Inc. nor the names of its\n// contributors may be used to endorse or promote products derived from\n// this software without specific prior written permission.\n//\n// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n// \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\nimport { remove } from '../array.js';\nimport EventSource from './EventSource.js';\nimport { POINTER_ID } from './MouseSource.js';\n/**\n * @type {number}\n */\n\nvar CLICK_COUNT_TIMEOUT = 200;\n/**\n * @type {string}\n */\n\nvar POINTER_TYPE = 'touch';\n/**\n * Handler for `touchstart`, triggers `pointerover`,\n * `pointerenter` and `pointerdown` events.\n *\n * @this {TouchSource}\n * @param {TouchEvent} inEvent The in event.\n */\n\nfunction touchstart(inEvent) {\n  this.vacuumTouches_(inEvent);\n  this.setPrimaryTouch_(inEvent.changedTouches[0]);\n  this.dedupSynthMouse_(inEvent);\n  this.clickCount_++;\n  this.processTouches_(inEvent, this.overDown_);\n}\n/**\n * Handler for `touchmove`.\n *\n * @this {TouchSource}\n * @param {TouchEvent} inEvent The in event.\n */\n\n\nfunction touchmove(inEvent) {\n  this.processTouches_(inEvent, this.moveOverOut_);\n}\n/**\n * Handler for `touchend`, triggers `pointerup`,\n * `pointerout` and `pointerleave` events.\n *\n * @this {TouchSource}\n * @param {TouchEvent} inEvent The event.\n */\n\n\nfunction touchend(inEvent) {\n  this.dedupSynthMouse_(inEvent);\n  this.processTouches_(inEvent, this.upOut_);\n}\n/**\n * Handler for `touchcancel`, triggers `pointercancel`,\n * `pointerout` and `pointerleave` events.\n *\n * @this {TouchSource}\n * @param {TouchEvent} inEvent The in event.\n */\n\n\nfunction touchcancel(inEvent) {\n  this.processTouches_(inEvent, this.cancelOut_);\n}\n\nvar TouchSource =\n/*@__PURE__*/\nfunction (EventSource) {\n  function TouchSource(dispatcher, mouseSource) {\n    var mapping = {\n      'touchstart': touchstart,\n      'touchmove': touchmove,\n      'touchend': touchend,\n      'touchcancel': touchcancel\n    };\n    EventSource.call(this, dispatcher, mapping);\n    /**\n     * @const\n     * @type {!Object<string, Event|Object>}\n     */\n\n    this.pointerMap = dispatcher.pointerMap;\n    /**\n     * @const\n     * @type {import(\"./MouseSource.js\").default}\n     */\n\n    this.mouseSource = mouseSource;\n    /**\n     * @private\n     * @type {number|undefined}\n     */\n\n    this.firstTouchId_ = undefined;\n    /**\n     * @private\n     * @type {number}\n     */\n\n    this.clickCount_ = 0;\n    /**\n     * @private\n     * @type {?}\n     */\n\n    this.resetId_;\n    /**\n     * Mouse event timeout: This should be long enough to\n     * ignore compat mouse events made by touch.\n     * @private\n     * @type {number}\n     */\n\n    this.dedupTimeout_ = 2500;\n  }\n\n  if (EventSource) TouchSource.__proto__ = EventSource;\n  TouchSource.prototype = Object.create(EventSource && EventSource.prototype);\n  TouchSource.prototype.constructor = TouchSource;\n  /**\n   * @private\n   * @param {Touch} inTouch The in touch.\n   * @return {boolean} True, if this is the primary touch.\n   */\n\n  TouchSource.prototype.isPrimaryTouch_ = function isPrimaryTouch_(inTouch) {\n    return this.firstTouchId_ === inTouch.identifier;\n  };\n  /**\n   * Set primary touch if there are no pointers, or the only pointer is the mouse.\n   * @param {Touch} inTouch The in touch.\n   * @private\n   */\n\n\n  TouchSource.prototype.setPrimaryTouch_ = function setPrimaryTouch_(inTouch) {\n    var count = Object.keys(this.pointerMap).length;\n\n    if (count === 0 || count === 1 && POINTER_ID.toString() in this.pointerMap) {\n      this.firstTouchId_ = inTouch.identifier;\n      this.cancelResetClickCount_();\n    }\n  };\n  /**\n   * @private\n   * @param {PointerEvent} inPointer The in pointer object.\n   */\n\n\n  TouchSource.prototype.removePrimaryPointer_ = function removePrimaryPointer_(inPointer) {\n    if (inPointer.isPrimary) {\n      this.firstTouchId_ = undefined;\n      this.resetClickCount_();\n    }\n  };\n  /**\n   * @private\n   */\n\n\n  TouchSource.prototype.resetClickCount_ = function resetClickCount_() {\n    this.resetId_ = setTimeout(this.resetClickCountHandler_.bind(this), CLICK_COUNT_TIMEOUT);\n  };\n  /**\n   * @private\n   */\n\n\n  TouchSource.prototype.resetClickCountHandler_ = function resetClickCountHandler_() {\n    this.clickCount_ = 0;\n    this.resetId_ = undefined;\n  };\n  /**\n   * @private\n   */\n\n\n  TouchSource.prototype.cancelResetClickCount_ = function cancelResetClickCount_() {\n    if (this.resetId_ !== undefined) {\n      clearTimeout(this.resetId_);\n    }\n  };\n  /**\n   * @private\n   * @param {TouchEvent} browserEvent Browser event\n   * @param {Touch} inTouch Touch event\n   * @return {PointerEvent} A pointer object.\n   */\n\n\n  TouchSource.prototype.touchToPointer_ = function touchToPointer_(browserEvent, inTouch) {\n    var e = this.dispatcher.cloneEvent(browserEvent, inTouch); // Spec specifies that pointerId 1 is reserved for Mouse.\n    // Touch identifiers can start at 0.\n    // Add 2 to the touch identifier for compatibility.\n\n    e.pointerId = inTouch.identifier + 2; // TODO: check if this is necessary?\n    //e.target = findTarget(e);\n\n    e.bubbles = true;\n    e.cancelable = true;\n    e.detail = this.clickCount_;\n    e.button = 0;\n    e.buttons = 1;\n    e.width = inTouch.radiusX || 0;\n    e.height = inTouch.radiusY || 0;\n    e.pressure = inTouch.force || 0.5;\n    e.isPrimary = this.isPrimaryTouch_(inTouch);\n    e.pointerType = POINTER_TYPE; // make sure that the properties that are different for\n    // each `Touch` object are not copied from the BrowserEvent object\n\n    e.clientX = inTouch.clientX;\n    e.clientY = inTouch.clientY;\n    e.screenX = inTouch.screenX;\n    e.screenY = inTouch.screenY;\n    return e;\n  };\n  /**\n   * @private\n   * @param {TouchEvent} inEvent Touch event\n   * @param {function(TouchEvent, PointerEvent)} inFunction In function.\n   */\n\n\n  TouchSource.prototype.processTouches_ = function processTouches_(inEvent, inFunction) {\n    var touches = Array.prototype.slice.call(inEvent.changedTouches);\n    var count = touches.length;\n\n    function preventDefault() {\n      inEvent.preventDefault();\n    }\n\n    for (var i = 0; i < count; ++i) {\n      var pointer = this.touchToPointer_(inEvent, touches[i]); // forward touch preventDefaults\n\n      pointer.preventDefault = preventDefault;\n      inFunction.call(this, inEvent, pointer);\n    }\n  };\n  /**\n   * @private\n   * @param {TouchList} touchList The touch list.\n   * @param {number} searchId Search identifier.\n   * @return {boolean} True, if the `Touch` with the given id is in the list.\n   */\n\n\n  TouchSource.prototype.findTouch_ = function findTouch_(touchList, searchId) {\n    var l = touchList.length;\n\n    for (var i = 0; i < l; i++) {\n      var touch = touchList[i];\n\n      if (touch.identifier === searchId) {\n        return true;\n      }\n    }\n\n    return false;\n  };\n  /**\n   * In some instances, a touchstart can happen without a touchend. This\n   * leaves the pointermap in a broken state.\n   * Therefore, on every touchstart, we remove the touches that did not fire a\n   * touchend event.\n   * To keep state globally consistent, we fire a pointercancel for\n   * this \"abandoned\" touch\n   *\n   * @private\n   * @param {TouchEvent} inEvent The in event.\n   */\n\n\n  TouchSource.prototype.vacuumTouches_ = function vacuumTouches_(inEvent) {\n    var touchList = inEvent.touches; // pointerMap.getCount() should be < touchList.length here,\n    // as the touchstart has not been processed yet.\n\n    var keys = Object.keys(this.pointerMap);\n    var count = keys.length;\n\n    if (count >= touchList.length) {\n      var d = [];\n\n      for (var i = 0; i < count; ++i) {\n        var key = Number(keys[i]);\n        var value = this.pointerMap[key]; // Never remove pointerId == 1, which is mouse.\n        // Touch identifiers are 2 smaller than their pointerId, which is the\n        // index in pointermap.\n\n        if (key != POINTER_ID && !this.findTouch_(touchList, key - 2)) {\n          d.push(value.out);\n        }\n      }\n\n      for (var i$1 = 0; i$1 < d.length; ++i$1) {\n        this.cancelOut_(inEvent, d[i$1]);\n      }\n    }\n  };\n  /**\n   * @private\n   * @param {TouchEvent} browserEvent The event.\n   * @param {PointerEvent} inPointer The in pointer object.\n   */\n\n\n  TouchSource.prototype.overDown_ = function overDown_(browserEvent, inPointer) {\n    this.pointerMap[inPointer.pointerId] = {\n      target: inPointer.target,\n      out: inPointer,\n      outTarget: inPointer.target\n    };\n    this.dispatcher.over(inPointer, browserEvent);\n    this.dispatcher.enter(inPointer, browserEvent);\n    this.dispatcher.down(inPointer, browserEvent);\n  };\n  /**\n   * @private\n   * @param {TouchEvent} browserEvent The event.\n   * @param {PointerEvent} inPointer The in pointer.\n   */\n\n\n  TouchSource.prototype.moveOverOut_ = function moveOverOut_(browserEvent, inPointer) {\n    var event = inPointer;\n    var pointer = this.pointerMap[event.pointerId]; // a finger drifted off the screen, ignore it\n\n    if (!pointer) {\n      return;\n    }\n\n    var outEvent = pointer.out;\n    var outTarget = pointer.outTarget;\n    this.dispatcher.move(event, browserEvent);\n\n    if (outEvent && outTarget !== event.target) {\n      outEvent.relatedTarget = event.target;\n      /** @type {Object} */\n\n      event.relatedTarget = outTarget; // recover from retargeting by shadow\n\n      outEvent.target = outTarget;\n\n      if (event.target) {\n        this.dispatcher.leaveOut(outEvent, browserEvent);\n        this.dispatcher.enterOver(event, browserEvent);\n      } else {\n        // clean up case when finger leaves the screen\n\n        /** @type {Object} */\n        event.target = outTarget;\n        /** @type {Object} */\n\n        event.relatedTarget = null;\n        this.cancelOut_(browserEvent, event);\n      }\n    }\n\n    pointer.out = event;\n    pointer.outTarget = event.target;\n  };\n  /**\n   * @private\n   * @param {TouchEvent} browserEvent An event.\n   * @param {PointerEvent} inPointer The inPointer object.\n   */\n\n\n  TouchSource.prototype.upOut_ = function upOut_(browserEvent, inPointer) {\n    this.dispatcher.up(inPointer, browserEvent);\n    this.dispatcher.out(inPointer, browserEvent);\n    this.dispatcher.leave(inPointer, browserEvent);\n    this.cleanUpPointer_(inPointer);\n  };\n  /**\n   * @private\n   * @param {TouchEvent} browserEvent The event.\n   * @param {PointerEvent} inPointer The in pointer.\n   */\n\n\n  TouchSource.prototype.cancelOut_ = function cancelOut_(browserEvent, inPointer) {\n    this.dispatcher.cancel(inPointer, browserEvent);\n    this.dispatcher.out(inPointer, browserEvent);\n    this.dispatcher.leave(inPointer, browserEvent);\n    this.cleanUpPointer_(inPointer);\n  };\n  /**\n   * @private\n   * @param {PointerEvent} inPointer The inPointer object.\n   */\n\n\n  TouchSource.prototype.cleanUpPointer_ = function cleanUpPointer_(inPointer) {\n    delete this.pointerMap[inPointer.pointerId];\n    this.removePrimaryPointer_(inPointer);\n  };\n  /**\n   * Prevent synth mouse events from creating pointer events.\n   *\n   * @private\n   * @param {TouchEvent} inEvent The in event.\n   */\n\n\n  TouchSource.prototype.dedupSynthMouse_ = function dedupSynthMouse_(inEvent) {\n    var lts = this.mouseSource.lastTouches;\n    var t = inEvent.changedTouches[0]; // only the primary finger will synth mouse events\n\n    if (this.isPrimaryTouch_(t)) {\n      // remember x/y of last touch\n      var lt = [t.clientX, t.clientY];\n      lts.push(lt);\n      setTimeout(function () {\n        // remove touch after timeout\n        remove(lts, lt);\n      }, this.dedupTimeout_);\n    }\n  };\n\n  return TouchSource;\n}(EventSource);\n\nexport default TouchSource;","map":{"version":3,"sources":["../../../src/ol/pointer/TouchSource.js"],"names":["const","super","let","i"],"mappings":"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","sourcesContent":["/**\n * @module ol/pointer/TouchSource\n */\n\n// Based on https://github.com/Polymer/PointerEvents\n\n// Copyright (c) 2013 The Polymer Authors. All rights reserved.\n//\n// Redistribution and use in source and binary forms, with or without\n// modification, are permitted provided that the following conditions are\n// met:\n//\n// * Redistributions of source code must retain the above copyright\n// notice, this list of conditions and the following disclaimer.\n// * Redistributions in binary form must reproduce the above\n// copyright notice, this list of conditions and the following disclaimer\n// in the documentation and/or other materials provided with the\n// distribution.\n// * Neither the name of Google Inc. nor the names of its\n// contributors may be used to endorse or promote products derived from\n// this software without specific prior written permission.\n//\n// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n// \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\nimport {remove} from '../array.js';\nimport EventSource from './EventSource.js';\nimport {POINTER_ID} from './MouseSource.js';\n\n\n/**\n * @type {number}\n */\nconst CLICK_COUNT_TIMEOUT = 200;\n\n/**\n * @type {string}\n */\nconst POINTER_TYPE = 'touch';\n\n/**\n * Handler for `touchstart`, triggers `pointerover`,\n * `pointerenter` and `pointerdown` events.\n *\n * @this {TouchSource}\n * @param {TouchEvent} inEvent The in event.\n */\nfunction touchstart(inEvent) {\n  this.vacuumTouches_(inEvent);\n  this.setPrimaryTouch_(inEvent.changedTouches[0]);\n  this.dedupSynthMouse_(inEvent);\n  this.clickCount_++;\n  this.processTouches_(inEvent, this.overDown_);\n}\n\n/**\n * Handler for `touchmove`.\n *\n * @this {TouchSource}\n * @param {TouchEvent} inEvent The in event.\n */\nfunction touchmove(inEvent) {\n  this.processTouches_(inEvent, this.moveOverOut_);\n}\n\n/**\n * Handler for `touchend`, triggers `pointerup`,\n * `pointerout` and `pointerleave` events.\n *\n * @this {TouchSource}\n * @param {TouchEvent} inEvent The event.\n */\nfunction touchend(inEvent) {\n  this.dedupSynthMouse_(inEvent);\n  this.processTouches_(inEvent, this.upOut_);\n}\n\n/**\n * Handler for `touchcancel`, triggers `pointercancel`,\n * `pointerout` and `pointerleave` events.\n *\n * @this {TouchSource}\n * @param {TouchEvent} inEvent The in event.\n */\nfunction touchcancel(inEvent) {\n  this.processTouches_(inEvent, this.cancelOut_);\n}\n\n\nclass TouchSource extends EventSource {\n\n  /**\n   * @param {import(\"./PointerEventHandler.js\").default} dispatcher The event handler.\n   * @param {import(\"./MouseSource.js\").default} mouseSource Mouse source.\n   */\n  constructor(dispatcher, mouseSource) {\n    const mapping = {\n      'touchstart': touchstart,\n      'touchmove': touchmove,\n      'touchend': touchend,\n      'touchcancel': touchcancel\n    };\n    super(dispatcher, mapping);\n\n    /**\n     * @const\n     * @type {!Object<string, Event|Object>}\n     */\n    this.pointerMap = dispatcher.pointerMap;\n\n    /**\n     * @const\n     * @type {import(\"./MouseSource.js\").default}\n     */\n    this.mouseSource = mouseSource;\n\n    /**\n     * @private\n     * @type {number|undefined}\n     */\n    this.firstTouchId_ = undefined;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.clickCount_ = 0;\n\n    /**\n     * @private\n     * @type {?}\n     */\n    this.resetId_;\n\n    /**\n     * Mouse event timeout: This should be long enough to\n     * ignore compat mouse events made by touch.\n     * @private\n     * @type {number}\n     */\n    this.dedupTimeout_ = 2500;\n  }\n\n  /**\n   * @private\n   * @param {Touch} inTouch The in touch.\n   * @return {boolean} True, if this is the primary touch.\n   */\n  isPrimaryTouch_(inTouch) {\n    return this.firstTouchId_ === inTouch.identifier;\n  }\n\n  /**\n   * Set primary touch if there are no pointers, or the only pointer is the mouse.\n   * @param {Touch} inTouch The in touch.\n   * @private\n   */\n  setPrimaryTouch_(inTouch) {\n    const count = Object.keys(this.pointerMap).length;\n    if (count === 0 || (count === 1 && POINTER_ID.toString() in this.pointerMap)) {\n      this.firstTouchId_ = inTouch.identifier;\n      this.cancelResetClickCount_();\n    }\n  }\n\n  /**\n   * @private\n   * @param {PointerEvent} inPointer The in pointer object.\n   */\n  removePrimaryPointer_(inPointer) {\n    if (inPointer.isPrimary) {\n      this.firstTouchId_ = undefined;\n      this.resetClickCount_();\n    }\n  }\n\n  /**\n   * @private\n   */\n  resetClickCount_() {\n    this.resetId_ = setTimeout(\n      this.resetClickCountHandler_.bind(this),\n      CLICK_COUNT_TIMEOUT);\n  }\n\n  /**\n   * @private\n   */\n  resetClickCountHandler_() {\n    this.clickCount_ = 0;\n    this.resetId_ = undefined;\n  }\n\n  /**\n   * @private\n   */\n  cancelResetClickCount_() {\n    if (this.resetId_ !== undefined) {\n      clearTimeout(this.resetId_);\n    }\n  }\n\n  /**\n   * @private\n   * @param {TouchEvent} browserEvent Browser event\n   * @param {Touch} inTouch Touch event\n   * @return {PointerEvent} A pointer object.\n   */\n  touchToPointer_(browserEvent, inTouch) {\n    const e = this.dispatcher.cloneEvent(browserEvent, inTouch);\n    // Spec specifies that pointerId 1 is reserved for Mouse.\n    // Touch identifiers can start at 0.\n    // Add 2 to the touch identifier for compatibility.\n    e.pointerId = inTouch.identifier + 2;\n    // TODO: check if this is necessary?\n    //e.target = findTarget(e);\n    e.bubbles = true;\n    e.cancelable = true;\n    e.detail = this.clickCount_;\n    e.button = 0;\n    e.buttons = 1;\n    e.width = inTouch.radiusX || 0;\n    e.height = inTouch.radiusY || 0;\n    e.pressure = inTouch.force || 0.5;\n    e.isPrimary = this.isPrimaryTouch_(inTouch);\n    e.pointerType = POINTER_TYPE;\n\n    // make sure that the properties that are different for\n    // each `Touch` object are not copied from the BrowserEvent object\n    e.clientX = inTouch.clientX;\n    e.clientY = inTouch.clientY;\n    e.screenX = inTouch.screenX;\n    e.screenY = inTouch.screenY;\n\n    return e;\n  }\n\n  /**\n   * @private\n   * @param {TouchEvent} inEvent Touch event\n   * @param {function(TouchEvent, PointerEvent)} inFunction In function.\n   */\n  processTouches_(inEvent, inFunction) {\n    const touches = Array.prototype.slice.call(inEvent.changedTouches);\n    const count = touches.length;\n    function preventDefault() {\n      inEvent.preventDefault();\n    }\n    for (let i = 0; i < count; ++i) {\n      const pointer = this.touchToPointer_(inEvent, touches[i]);\n      // forward touch preventDefaults\n      pointer.preventDefault = preventDefault;\n      inFunction.call(this, inEvent, pointer);\n    }\n  }\n\n  /**\n   * @private\n   * @param {TouchList} touchList The touch list.\n   * @param {number} searchId Search identifier.\n   * @return {boolean} True, if the `Touch` with the given id is in the list.\n   */\n  findTouch_(touchList, searchId) {\n    const l = touchList.length;\n    for (let i = 0; i < l; i++) {\n      const touch = touchList[i];\n      if (touch.identifier === searchId) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  /**\n   * In some instances, a touchstart can happen without a touchend. This\n   * leaves the pointermap in a broken state.\n   * Therefore, on every touchstart, we remove the touches that did not fire a\n   * touchend event.\n   * To keep state globally consistent, we fire a pointercancel for\n   * this \"abandoned\" touch\n   *\n   * @private\n   * @param {TouchEvent} inEvent The in event.\n   */\n  vacuumTouches_(inEvent) {\n    const touchList = inEvent.touches;\n    // pointerMap.getCount() should be < touchList.length here,\n    // as the touchstart has not been processed yet.\n    const keys = Object.keys(this.pointerMap);\n    const count = keys.length;\n    if (count >= touchList.length) {\n      const d = [];\n      for (let i = 0; i < count; ++i) {\n        const key = Number(keys[i]);\n        const value = this.pointerMap[key];\n        // Never remove pointerId == 1, which is mouse.\n        // Touch identifiers are 2 smaller than their pointerId, which is the\n        // index in pointermap.\n        if (key != POINTER_ID && !this.findTouch_(touchList, key - 2)) {\n          d.push(value.out);\n        }\n      }\n      for (let i = 0; i < d.length; ++i) {\n        this.cancelOut_(inEvent, d[i]);\n      }\n    }\n  }\n\n  /**\n   * @private\n   * @param {TouchEvent} browserEvent The event.\n   * @param {PointerEvent} inPointer The in pointer object.\n   */\n  overDown_(browserEvent, inPointer) {\n    this.pointerMap[inPointer.pointerId] = {\n      target: inPointer.target,\n      out: inPointer,\n      outTarget: inPointer.target\n    };\n    this.dispatcher.over(inPointer, browserEvent);\n    this.dispatcher.enter(inPointer, browserEvent);\n    this.dispatcher.down(inPointer, browserEvent);\n  }\n\n  /**\n   * @private\n   * @param {TouchEvent} browserEvent The event.\n   * @param {PointerEvent} inPointer The in pointer.\n   */\n  moveOverOut_(browserEvent, inPointer) {\n    const event = inPointer;\n    const pointer = this.pointerMap[event.pointerId];\n    // a finger drifted off the screen, ignore it\n    if (!pointer) {\n      return;\n    }\n    const outEvent = pointer.out;\n    const outTarget = pointer.outTarget;\n    this.dispatcher.move(event, browserEvent);\n    if (outEvent && outTarget !== event.target) {\n      outEvent.relatedTarget = event.target;\n      /** @type {Object} */ (event).relatedTarget = outTarget;\n      // recover from retargeting by shadow\n      outEvent.target = outTarget;\n      if (event.target) {\n        this.dispatcher.leaveOut(outEvent, browserEvent);\n        this.dispatcher.enterOver(event, browserEvent);\n      } else {\n        // clean up case when finger leaves the screen\n        /** @type {Object} */ (event).target = outTarget;\n        /** @type {Object} */ (event).relatedTarget = null;\n        this.cancelOut_(browserEvent, event);\n      }\n    }\n    pointer.out = event;\n    pointer.outTarget = event.target;\n  }\n\n  /**\n   * @private\n   * @param {TouchEvent} browserEvent An event.\n   * @param {PointerEvent} inPointer The inPointer object.\n   */\n  upOut_(browserEvent, inPointer) {\n    this.dispatcher.up(inPointer, browserEvent);\n    this.dispatcher.out(inPointer, browserEvent);\n    this.dispatcher.leave(inPointer, browserEvent);\n    this.cleanUpPointer_(inPointer);\n  }\n\n  /**\n   * @private\n   * @param {TouchEvent} browserEvent The event.\n   * @param {PointerEvent} inPointer The in pointer.\n   */\n  cancelOut_(browserEvent, inPointer) {\n    this.dispatcher.cancel(inPointer, browserEvent);\n    this.dispatcher.out(inPointer, browserEvent);\n    this.dispatcher.leave(inPointer, browserEvent);\n    this.cleanUpPointer_(inPointer);\n  }\n\n  /**\n   * @private\n   * @param {PointerEvent} inPointer The inPointer object.\n   */\n  cleanUpPointer_(inPointer) {\n    delete this.pointerMap[inPointer.pointerId];\n    this.removePrimaryPointer_(inPointer);\n  }\n\n  /**\n   * Prevent synth mouse events from creating pointer events.\n   *\n   * @private\n   * @param {TouchEvent} inEvent The in event.\n   */\n  dedupSynthMouse_(inEvent) {\n    const lts = this.mouseSource.lastTouches;\n    const t = inEvent.changedTouches[0];\n    // only the primary finger will synth mouse events\n    if (this.isPrimaryTouch_(t)) {\n      // remember x/y of last touch\n      const lt = [t.clientX, t.clientY];\n      lts.push(lt);\n\n      setTimeout(function() {\n        // remove touch after timeout\n        remove(lts, lt);\n      }, this.dedupTimeout_);\n    }\n  }\n}\n\nexport default TouchSource;\n"]},"metadata":{},"sourceType":"module"}