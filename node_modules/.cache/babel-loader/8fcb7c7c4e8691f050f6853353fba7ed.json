{"ast":null,"code":"/**\n * ag-grid-community - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components\n * @version v21.2.2\n * @link http://www.ag-grid.com/\n * @license MIT\n */\n\"use strict\";\n\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar column_1 = require(\"../../entities/column\");\n\nvar beanStub_1 = require(\"../../context/beanStub\");\n\nvar constants_1 = require(\"../../constants\");\n\nvar utils_1 = require(\"../../utils\");\n\nvar SetLeftFeature =\n/** @class */\nfunction (_super) {\n  __extends(SetLeftFeature, _super);\n\n  function SetLeftFeature(columnOrGroup, eCell, beans, colsSpanning) {\n    var _this = _super.call(this) || this;\n\n    _this.columnOrGroup = columnOrGroup;\n    _this.eCell = eCell;\n    _this.colsSpanning = colsSpanning;\n    _this.beans = beans;\n    _this.printLayout = beans.gridOptionsWrapper.getDomLayout() === constants_1.Constants.DOM_LAYOUT_PRINT;\n    return _this;\n  }\n\n  SetLeftFeature.prototype.setColsSpanning = function (colsSpanning) {\n    this.colsSpanning = colsSpanning;\n    this.onLeftChanged();\n  };\n\n  SetLeftFeature.prototype.getColumnOrGroup = function () {\n    if (this.beans.gridOptionsWrapper.isEnableRtl() && this.colsSpanning) {\n      return utils_1._.last(this.colsSpanning);\n    } else {\n      return this.columnOrGroup;\n    }\n  };\n\n  SetLeftFeature.prototype.init = function () {\n    this.addDestroyableEventListener(this.columnOrGroup, column_1.Column.EVENT_LEFT_CHANGED, this.onLeftChanged.bind(this));\n    this.setLeftFirstTime();\n  };\n\n  SetLeftFeature.prototype.setLeftFirstTime = function () {\n    var suppressMoveAnimation = this.beans.gridOptionsWrapper.isSuppressColumnMoveAnimation();\n\n    var oldLeftExists = utils_1._.exists(this.columnOrGroup.getOldLeft());\n\n    var animateColumnMove = this.beans.columnAnimationService.isActive() && oldLeftExists && !suppressMoveAnimation;\n\n    if (animateColumnMove) {\n      this.animateInLeft();\n    } else {\n      this.onLeftChanged();\n    }\n  };\n\n  SetLeftFeature.prototype.animateInLeft = function () {\n    var _this = this;\n\n    var left = this.getColumnOrGroup().getLeft();\n    var oldLeft = this.getColumnOrGroup().getOldLeft();\n    this.setLeft(oldLeft); // we must keep track of the left we want to set to, as this would otherwise lead to a race\n    // condition, if the user changed the left value many times in one VM turn, then we want to make\n    // make sure the actualLeft we set in the timeout below (in the next VM turn) is the correct left\n    // position. eg if user changes column position twice, then setLeft() below executes twice in next\n    // VM turn, but only one (the correct one) should get applied.\n\n    this.actualLeft = left;\n    this.beans.columnAnimationService.executeNextVMTurn(function () {\n      // test this left value is the latest one to be applied, and if not, do nothing\n      if (_this.actualLeft === left) {\n        _this.setLeft(left);\n      }\n    });\n  };\n\n  SetLeftFeature.prototype.onLeftChanged = function () {\n    var colOrGroup = this.getColumnOrGroup();\n    var left = colOrGroup.getLeft();\n    this.actualLeft = this.modifyLeftForPrintLayout(colOrGroup, left);\n    this.setLeft(this.actualLeft);\n  };\n\n  SetLeftFeature.prototype.modifyLeftForPrintLayout = function (colOrGroup, leftPosition) {\n    if (!this.printLayout) {\n      return leftPosition;\n    }\n\n    if (colOrGroup.getPinned() === column_1.Column.PINNED_LEFT) {\n      return leftPosition;\n    } else if (colOrGroup.getPinned() === column_1.Column.PINNED_RIGHT) {\n      var leftWidth = this.beans.columnController.getPinnedLeftContainerWidth();\n      var bodyWidth = this.beans.columnController.getBodyContainerWidth();\n      return leftWidth + bodyWidth + leftPosition;\n    } else {\n      // is in body\n      var leftWidth = this.beans.columnController.getPinnedLeftContainerWidth();\n      return leftWidth + leftPosition;\n    }\n  };\n\n  SetLeftFeature.prototype.setLeft = function (value) {\n    // if the value is null, then that means the column is no longer\n    // displayed. there is logic in the rendering to fade these columns\n    // out, so we don't try and change their left positions.\n    if (utils_1._.exists(value)) {\n      this.eCell.style.left = value + \"px\";\n    }\n  };\n\n  return SetLeftFeature;\n}(beanStub_1.BeanStub);\n\nexports.SetLeftFeature = SetLeftFeature;","map":{"version":3,"sources":["/Users/dirkmennecke77/Desktop/Lageplan/node_modules/ag-grid-community/dist/lib/rendering/features/setLeftFeature.js"],"names":["__extends","extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__","constructor","prototype","create","defineProperty","exports","value","column_1","require","beanStub_1","constants_1","utils_1","SetLeftFeature","_super","columnOrGroup","eCell","beans","colsSpanning","_this","call","printLayout","gridOptionsWrapper","getDomLayout","Constants","DOM_LAYOUT_PRINT","setColsSpanning","onLeftChanged","getColumnOrGroup","isEnableRtl","_","last","init","addDestroyableEventListener","Column","EVENT_LEFT_CHANGED","bind","setLeftFirstTime","suppressMoveAnimation","isSuppressColumnMoveAnimation","oldLeftExists","exists","getOldLeft","animateColumnMove","columnAnimationService","isActive","animateInLeft","left","getLeft","oldLeft","setLeft","actualLeft","executeNextVMTurn","colOrGroup","modifyLeftForPrintLayout","leftPosition","getPinned","PINNED_LEFT","PINNED_RIGHT","leftWidth","columnController","getPinnedLeftContainerWidth","bodyWidth","getBodyContainerWidth","style","BeanStub"],"mappings":"AAAA;;;;;;AAMA;;AACA,IAAIA,SAAS,GAAI,QAAQ,KAAKA,SAAd,IAA6B,YAAY;AACrD,MAAIC,aAAa,GAAG,UAAUC,CAAV,EAAaC,CAAb,EAAgB;AAChCF,IAAAA,aAAa,GAAGG,MAAM,CAACC,cAAP,IACX;AAAEC,MAAAA,SAAS,EAAE;AAAb,iBAA6BC,KAA7B,IAAsC,UAAUL,CAAV,EAAaC,CAAb,EAAgB;AAAED,MAAAA,CAAC,CAACI,SAAF,GAAcH,CAAd;AAAkB,KAD/D,IAEZ,UAAUD,CAAV,EAAaC,CAAb,EAAgB;AAAE,WAAK,IAAIK,CAAT,IAAcL,CAAd,EAAiB,IAAIA,CAAC,CAACM,cAAF,CAAiBD,CAAjB,CAAJ,EAAyBN,CAAC,CAACM,CAAD,CAAD,GAAOL,CAAC,CAACK,CAAD,CAAR;AAAc,KAF9E;;AAGA,WAAOP,aAAa,CAACC,CAAD,EAAIC,CAAJ,CAApB;AACH,GALD;;AAMA,SAAO,UAAUD,CAAV,EAAaC,CAAb,EAAgB;AACnBF,IAAAA,aAAa,CAACC,CAAD,EAAIC,CAAJ,CAAb;;AACA,aAASO,EAAT,GAAc;AAAE,WAAKC,WAAL,GAAmBT,CAAnB;AAAuB;;AACvCA,IAAAA,CAAC,CAACU,SAAF,GAAcT,CAAC,KAAK,IAAN,GAAaC,MAAM,CAACS,MAAP,CAAcV,CAAd,CAAb,IAAiCO,EAAE,CAACE,SAAH,GAAeT,CAAC,CAACS,SAAjB,EAA4B,IAAIF,EAAJ,EAA7D,CAAd;AACH,GAJD;AAKH,CAZ2C,EAA5C;;AAaAN,MAAM,CAACU,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;;AACA,IAAIC,QAAQ,GAAGC,OAAO,CAAC,uBAAD,CAAtB;;AACA,IAAIC,UAAU,GAAGD,OAAO,CAAC,wBAAD,CAAxB;;AACA,IAAIE,WAAW,GAAGF,OAAO,CAAC,iBAAD,CAAzB;;AACA,IAAIG,OAAO,GAAGH,OAAO,CAAC,aAAD,CAArB;;AACA,IAAII,cAAc;AAAG;AAAe,UAAUC,MAAV,EAAkB;AAClDvB,EAAAA,SAAS,CAACsB,cAAD,EAAiBC,MAAjB,CAAT;;AACA,WAASD,cAAT,CAAwBE,aAAxB,EAAuCC,KAAvC,EAA8CC,KAA9C,EAAqDC,YAArD,EAAmE;AAC/D,QAAIC,KAAK,GAAGL,MAAM,CAACM,IAAP,CAAY,IAAZ,KAAqB,IAAjC;;AACAD,IAAAA,KAAK,CAACJ,aAAN,GAAsBA,aAAtB;AACAI,IAAAA,KAAK,CAACH,KAAN,GAAcA,KAAd;AACAG,IAAAA,KAAK,CAACD,YAAN,GAAqBA,YAArB;AACAC,IAAAA,KAAK,CAACF,KAAN,GAAcA,KAAd;AACAE,IAAAA,KAAK,CAACE,WAAN,GAAoBJ,KAAK,CAACK,kBAAN,CAAyBC,YAAzB,OAA4CZ,WAAW,CAACa,SAAZ,CAAsBC,gBAAtF;AACA,WAAON,KAAP;AACH;;AACDN,EAAAA,cAAc,CAACV,SAAf,CAAyBuB,eAAzB,GAA2C,UAAUR,YAAV,EAAwB;AAC/D,SAAKA,YAAL,GAAoBA,YAApB;AACA,SAAKS,aAAL;AACH,GAHD;;AAIAd,EAAAA,cAAc,CAACV,SAAf,CAAyByB,gBAAzB,GAA4C,YAAY;AACpD,QAAI,KAAKX,KAAL,CAAWK,kBAAX,CAA8BO,WAA9B,MAA+C,KAAKX,YAAxD,EAAsE;AAClE,aAAON,OAAO,CAACkB,CAAR,CAAUC,IAAV,CAAe,KAAKb,YAApB,CAAP;AACH,KAFD,MAGK;AACD,aAAO,KAAKH,aAAZ;AACH;AACJ,GAPD;;AAQAF,EAAAA,cAAc,CAACV,SAAf,CAAyB6B,IAAzB,GAAgC,YAAY;AACxC,SAAKC,2BAAL,CAAiC,KAAKlB,aAAtC,EAAqDP,QAAQ,CAAC0B,MAAT,CAAgBC,kBAArE,EAAyF,KAAKR,aAAL,CAAmBS,IAAnB,CAAwB,IAAxB,CAAzF;AACA,SAAKC,gBAAL;AACH,GAHD;;AAIAxB,EAAAA,cAAc,CAACV,SAAf,CAAyBkC,gBAAzB,GAA4C,YAAY;AACpD,QAAIC,qBAAqB,GAAG,KAAKrB,KAAL,CAAWK,kBAAX,CAA8BiB,6BAA9B,EAA5B;;AACA,QAAIC,aAAa,GAAG5B,OAAO,CAACkB,CAAR,CAAUW,MAAV,CAAiB,KAAK1B,aAAL,CAAmB2B,UAAnB,EAAjB,CAApB;;AACA,QAAIC,iBAAiB,GAAG,KAAK1B,KAAL,CAAW2B,sBAAX,CAAkCC,QAAlC,MAAgDL,aAAhD,IAAiE,CAACF,qBAA1F;;AACA,QAAIK,iBAAJ,EAAuB;AACnB,WAAKG,aAAL;AACH,KAFD,MAGK;AACD,WAAKnB,aAAL;AACH;AACJ,GAVD;;AAWAd,EAAAA,cAAc,CAACV,SAAf,CAAyB2C,aAAzB,GAAyC,YAAY;AACjD,QAAI3B,KAAK,GAAG,IAAZ;;AACA,QAAI4B,IAAI,GAAG,KAAKnB,gBAAL,GAAwBoB,OAAxB,EAAX;AACA,QAAIC,OAAO,GAAG,KAAKrB,gBAAL,GAAwBc,UAAxB,EAAd;AACA,SAAKQ,OAAL,CAAaD,OAAb,EAJiD,CAKjD;AACA;AACA;AACA;AACA;;AACA,SAAKE,UAAL,GAAkBJ,IAAlB;AACA,SAAK9B,KAAL,CAAW2B,sBAAX,CAAkCQ,iBAAlC,CAAoD,YAAY;AAC5D;AACA,UAAIjC,KAAK,CAACgC,UAAN,KAAqBJ,IAAzB,EAA+B;AAC3B5B,QAAAA,KAAK,CAAC+B,OAAN,CAAcH,IAAd;AACH;AACJ,KALD;AAMH,GAjBD;;AAkBAlC,EAAAA,cAAc,CAACV,SAAf,CAAyBwB,aAAzB,GAAyC,YAAY;AACjD,QAAI0B,UAAU,GAAG,KAAKzB,gBAAL,EAAjB;AACA,QAAImB,IAAI,GAAGM,UAAU,CAACL,OAAX,EAAX;AACA,SAAKG,UAAL,GAAkB,KAAKG,wBAAL,CAA8BD,UAA9B,EAA0CN,IAA1C,CAAlB;AACA,SAAKG,OAAL,CAAa,KAAKC,UAAlB;AACH,GALD;;AAMAtC,EAAAA,cAAc,CAACV,SAAf,CAAyBmD,wBAAzB,GAAoD,UAAUD,UAAV,EAAsBE,YAAtB,EAAoC;AACpF,QAAI,CAAC,KAAKlC,WAAV,EAAuB;AACnB,aAAOkC,YAAP;AACH;;AACD,QAAIF,UAAU,CAACG,SAAX,OAA2BhD,QAAQ,CAAC0B,MAAT,CAAgBuB,WAA/C,EAA4D;AACxD,aAAOF,YAAP;AACH,KAFD,MAGK,IAAIF,UAAU,CAACG,SAAX,OAA2BhD,QAAQ,CAAC0B,MAAT,CAAgBwB,YAA/C,EAA6D;AAC9D,UAAIC,SAAS,GAAG,KAAK1C,KAAL,CAAW2C,gBAAX,CAA4BC,2BAA5B,EAAhB;AACA,UAAIC,SAAS,GAAG,KAAK7C,KAAL,CAAW2C,gBAAX,CAA4BG,qBAA5B,EAAhB;AACA,aAAOJ,SAAS,GAAGG,SAAZ,GAAwBP,YAA/B;AACH,KAJI,MAKA;AACD;AACA,UAAII,SAAS,GAAG,KAAK1C,KAAL,CAAW2C,gBAAX,CAA4BC,2BAA5B,EAAhB;AACA,aAAOF,SAAS,GAAGJ,YAAnB;AACH;AACJ,GAjBD;;AAkBA1C,EAAAA,cAAc,CAACV,SAAf,CAAyB+C,OAAzB,GAAmC,UAAU3C,KAAV,EAAiB;AAChD;AACA;AACA;AACA,QAAIK,OAAO,CAACkB,CAAR,CAAUW,MAAV,CAAiBlC,KAAjB,CAAJ,EAA6B;AACzB,WAAKS,KAAL,CAAWgD,KAAX,CAAiBjB,IAAjB,GAAwBxC,KAAK,GAAG,IAAhC;AACH;AACJ,GAPD;;AAQA,SAAOM,cAAP;AACH,CAzFmC,CAyFlCH,UAAU,CAACuD,QAzFuB,CAApC;;AA0FA3D,OAAO,CAACO,cAAR,GAAyBA,cAAzB","sourcesContent":["/**\n * ag-grid-community - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components\n * @version v21.2.2\n * @link http://www.ag-grid.com/\n * @license MIT\n */\n\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar column_1 = require(\"../../entities/column\");\nvar beanStub_1 = require(\"../../context/beanStub\");\nvar constants_1 = require(\"../../constants\");\nvar utils_1 = require(\"../../utils\");\nvar SetLeftFeature = /** @class */ (function (_super) {\n    __extends(SetLeftFeature, _super);\n    function SetLeftFeature(columnOrGroup, eCell, beans, colsSpanning) {\n        var _this = _super.call(this) || this;\n        _this.columnOrGroup = columnOrGroup;\n        _this.eCell = eCell;\n        _this.colsSpanning = colsSpanning;\n        _this.beans = beans;\n        _this.printLayout = beans.gridOptionsWrapper.getDomLayout() === constants_1.Constants.DOM_LAYOUT_PRINT;\n        return _this;\n    }\n    SetLeftFeature.prototype.setColsSpanning = function (colsSpanning) {\n        this.colsSpanning = colsSpanning;\n        this.onLeftChanged();\n    };\n    SetLeftFeature.prototype.getColumnOrGroup = function () {\n        if (this.beans.gridOptionsWrapper.isEnableRtl() && this.colsSpanning) {\n            return utils_1._.last(this.colsSpanning);\n        }\n        else {\n            return this.columnOrGroup;\n        }\n    };\n    SetLeftFeature.prototype.init = function () {\n        this.addDestroyableEventListener(this.columnOrGroup, column_1.Column.EVENT_LEFT_CHANGED, this.onLeftChanged.bind(this));\n        this.setLeftFirstTime();\n    };\n    SetLeftFeature.prototype.setLeftFirstTime = function () {\n        var suppressMoveAnimation = this.beans.gridOptionsWrapper.isSuppressColumnMoveAnimation();\n        var oldLeftExists = utils_1._.exists(this.columnOrGroup.getOldLeft());\n        var animateColumnMove = this.beans.columnAnimationService.isActive() && oldLeftExists && !suppressMoveAnimation;\n        if (animateColumnMove) {\n            this.animateInLeft();\n        }\n        else {\n            this.onLeftChanged();\n        }\n    };\n    SetLeftFeature.prototype.animateInLeft = function () {\n        var _this = this;\n        var left = this.getColumnOrGroup().getLeft();\n        var oldLeft = this.getColumnOrGroup().getOldLeft();\n        this.setLeft(oldLeft);\n        // we must keep track of the left we want to set to, as this would otherwise lead to a race\n        // condition, if the user changed the left value many times in one VM turn, then we want to make\n        // make sure the actualLeft we set in the timeout below (in the next VM turn) is the correct left\n        // position. eg if user changes column position twice, then setLeft() below executes twice in next\n        // VM turn, but only one (the correct one) should get applied.\n        this.actualLeft = left;\n        this.beans.columnAnimationService.executeNextVMTurn(function () {\n            // test this left value is the latest one to be applied, and if not, do nothing\n            if (_this.actualLeft === left) {\n                _this.setLeft(left);\n            }\n        });\n    };\n    SetLeftFeature.prototype.onLeftChanged = function () {\n        var colOrGroup = this.getColumnOrGroup();\n        var left = colOrGroup.getLeft();\n        this.actualLeft = this.modifyLeftForPrintLayout(colOrGroup, left);\n        this.setLeft(this.actualLeft);\n    };\n    SetLeftFeature.prototype.modifyLeftForPrintLayout = function (colOrGroup, leftPosition) {\n        if (!this.printLayout) {\n            return leftPosition;\n        }\n        if (colOrGroup.getPinned() === column_1.Column.PINNED_LEFT) {\n            return leftPosition;\n        }\n        else if (colOrGroup.getPinned() === column_1.Column.PINNED_RIGHT) {\n            var leftWidth = this.beans.columnController.getPinnedLeftContainerWidth();\n            var bodyWidth = this.beans.columnController.getBodyContainerWidth();\n            return leftWidth + bodyWidth + leftPosition;\n        }\n        else {\n            // is in body\n            var leftWidth = this.beans.columnController.getPinnedLeftContainerWidth();\n            return leftWidth + leftPosition;\n        }\n    };\n    SetLeftFeature.prototype.setLeft = function (value) {\n        // if the value is null, then that means the column is no longer\n        // displayed. there is logic in the rendering to fade these columns\n        // out, so we don't try and change their left positions.\n        if (utils_1._.exists(value)) {\n            this.eCell.style.left = value + \"px\";\n        }\n    };\n    return SetLeftFeature;\n}(beanStub_1.BeanStub));\nexports.SetLeftFeature = SetLeftFeature;\n"]},"metadata":{},"sourceType":"script"}