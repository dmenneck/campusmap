{"ast":null,"code":"/**\n * @module ol/geom/MultiPoint\n */\nimport { extend } from '../array.js';\nimport { closestSquaredDistanceXY, containsXY } from '../extent.js';\nimport GeometryType from './GeometryType.js';\nimport Point from './Point.js';\nimport SimpleGeometry from './SimpleGeometry.js';\nimport { deflateCoordinates } from './flat/deflate.js';\nimport { inflateCoordinates } from './flat/inflate.js';\nimport { squaredDistance as squaredDx } from '../math.js';\n/**\n * @classdesc\n * Multi-point geometry.\n *\n * @api\n */\n\nvar MultiPoint =\n/*@__PURE__*/\nfunction (SimpleGeometry) {\n  function MultiPoint(coordinates, opt_layout) {\n    SimpleGeometry.call(this);\n\n    if (opt_layout && !Array.isArray(coordinates[0])) {\n      this.setFlatCoordinates(opt_layout,\n      /** @type {Array<number>} */\n      coordinates);\n    } else {\n      this.setCoordinates(\n      /** @type {Array<import(\"../coordinate.js\").Coordinate>} */\n      coordinates, opt_layout);\n    }\n  }\n\n  if (SimpleGeometry) MultiPoint.__proto__ = SimpleGeometry;\n  MultiPoint.prototype = Object.create(SimpleGeometry && SimpleGeometry.prototype);\n  MultiPoint.prototype.constructor = MultiPoint;\n  /**\n   * Append the passed point to this multipoint.\n   * @param {Point} point Point.\n   * @api\n   */\n\n  MultiPoint.prototype.appendPoint = function appendPoint(point) {\n    if (!this.flatCoordinates) {\n      this.flatCoordinates = point.getFlatCoordinates().slice();\n    } else {\n      extend(this.flatCoordinates, point.getFlatCoordinates());\n    }\n\n    this.changed();\n  };\n  /**\n   * Make a complete copy of the geometry.\n   * @return {!MultiPoint} Clone.\n   * @override\n   * @api\n   */\n\n\n  MultiPoint.prototype.clone = function clone() {\n    var multiPoint = new MultiPoint(this.flatCoordinates.slice(), this.layout);\n    return multiPoint;\n  };\n  /**\n   * @inheritDoc\n   */\n\n\n  MultiPoint.prototype.closestPointXY = function closestPointXY(x, y, closestPoint, minSquaredDistance) {\n    if (minSquaredDistance < closestSquaredDistanceXY(this.getExtent(), x, y)) {\n      return minSquaredDistance;\n    }\n\n    var flatCoordinates = this.flatCoordinates;\n    var stride = this.stride;\n\n    for (var i = 0, ii = flatCoordinates.length; i < ii; i += stride) {\n      var squaredDistance = squaredDx(x, y, flatCoordinates[i], flatCoordinates[i + 1]);\n\n      if (squaredDistance < minSquaredDistance) {\n        minSquaredDistance = squaredDistance;\n\n        for (var j = 0; j < stride; ++j) {\n          closestPoint[j] = flatCoordinates[i + j];\n        }\n\n        closestPoint.length = stride;\n      }\n    }\n\n    return minSquaredDistance;\n  };\n  /**\n   * Return the coordinates of the multipoint.\n   * @return {Array<import(\"../coordinate.js\").Coordinate>} Coordinates.\n   * @override\n   * @api\n   */\n\n\n  MultiPoint.prototype.getCoordinates = function getCoordinates() {\n    return inflateCoordinates(this.flatCoordinates, 0, this.flatCoordinates.length, this.stride);\n  };\n  /**\n   * Return the point at the specified index.\n   * @param {number} index Index.\n   * @return {Point} Point.\n   * @api\n   */\n\n\n  MultiPoint.prototype.getPoint = function getPoint(index) {\n    var n = !this.flatCoordinates ? 0 : this.flatCoordinates.length / this.stride;\n\n    if (index < 0 || n <= index) {\n      return null;\n    }\n\n    return new Point(this.flatCoordinates.slice(index * this.stride, (index + 1) * this.stride), this.layout);\n  };\n  /**\n   * Return the points of this multipoint.\n   * @return {Array<Point>} Points.\n   * @api\n   */\n\n\n  MultiPoint.prototype.getPoints = function getPoints() {\n    var flatCoordinates = this.flatCoordinates;\n    var layout = this.layout;\n    var stride = this.stride;\n    /** @type {Array<Point>} */\n\n    var points = [];\n\n    for (var i = 0, ii = flatCoordinates.length; i < ii; i += stride) {\n      var point = new Point(flatCoordinates.slice(i, i + stride), layout);\n      points.push(point);\n    }\n\n    return points;\n  };\n  /**\n   * @inheritDoc\n   * @api\n   */\n\n\n  MultiPoint.prototype.getType = function getType() {\n    return GeometryType.MULTI_POINT;\n  };\n  /**\n   * @inheritDoc\n   * @api\n   */\n\n\n  MultiPoint.prototype.intersectsExtent = function intersectsExtent(extent) {\n    var flatCoordinates = this.flatCoordinates;\n    var stride = this.stride;\n\n    for (var i = 0, ii = flatCoordinates.length; i < ii; i += stride) {\n      var x = flatCoordinates[i];\n      var y = flatCoordinates[i + 1];\n\n      if (containsXY(extent, x, y)) {\n        return true;\n      }\n    }\n\n    return false;\n  };\n  /**\n   * Set the coordinates of the multipoint.\n   * @param {!Array<import(\"../coordinate.js\").Coordinate>} coordinates Coordinates.\n   * @param {import(\"./GeometryLayout.js\").default=} opt_layout Layout.\n   * @override\n   * @api\n   */\n\n\n  MultiPoint.prototype.setCoordinates = function setCoordinates(coordinates, opt_layout) {\n    this.setLayout(opt_layout, coordinates, 1);\n\n    if (!this.flatCoordinates) {\n      this.flatCoordinates = [];\n    }\n\n    this.flatCoordinates.length = deflateCoordinates(this.flatCoordinates, 0, coordinates, this.stride);\n    this.changed();\n  };\n\n  return MultiPoint;\n}(SimpleGeometry);\n\nexport default MultiPoint;","map":{"version":3,"sources":["../../../src/ol/geom/MultiPoint.js"],"names":["super","const","let"],"mappings":"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","sourcesContent":["/**\n * @module ol/geom/MultiPoint\n */\nimport {extend} from '../array.js';\nimport {closestSquaredDistanceXY, containsXY} from '../extent.js';\nimport GeometryType from './GeometryType.js';\nimport Point from './Point.js';\nimport SimpleGeometry from './SimpleGeometry.js';\nimport {deflateCoordinates} from './flat/deflate.js';\nimport {inflateCoordinates} from './flat/inflate.js';\nimport {squaredDistance as squaredDx} from '../math.js';\n\n/**\n * @classdesc\n * Multi-point geometry.\n *\n * @api\n */\nclass MultiPoint extends SimpleGeometry {\n\n  /**\n   * @param {Array<import(\"../coordinate.js\").Coordinate>|Array<number>} coordinates Coordinates.\n   *     For internal use, flat coordinates in combination with `opt_layout` are also accepted.\n   * @param {import(\"./GeometryLayout.js\").default=} opt_layout Layout.\n   */\n  constructor(coordinates, opt_layout) {\n    super();\n    if (opt_layout && !Array.isArray(coordinates[0])) {\n      this.setFlatCoordinates(opt_layout, /** @type {Array<number>} */ (coordinates));\n    } else {\n      this.setCoordinates(/** @type {Array<import(\"../coordinate.js\").Coordinate>} */ (coordinates), opt_layout);\n    }\n  }\n\n  /**\n   * Append the passed point to this multipoint.\n   * @param {Point} point Point.\n   * @api\n   */\n  appendPoint(point) {\n    if (!this.flatCoordinates) {\n      this.flatCoordinates = point.getFlatCoordinates().slice();\n    } else {\n      extend(this.flatCoordinates, point.getFlatCoordinates());\n    }\n    this.changed();\n  }\n\n  /**\n   * Make a complete copy of the geometry.\n   * @return {!MultiPoint} Clone.\n   * @override\n   * @api\n   */\n  clone() {\n    const multiPoint = new MultiPoint(this.flatCoordinates.slice(), this.layout);\n    return multiPoint;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  closestPointXY(x, y, closestPoint, minSquaredDistance) {\n    if (minSquaredDistance < closestSquaredDistanceXY(this.getExtent(), x, y)) {\n      return minSquaredDistance;\n    }\n    const flatCoordinates = this.flatCoordinates;\n    const stride = this.stride;\n    for (let i = 0, ii = flatCoordinates.length; i < ii; i += stride) {\n      const squaredDistance = squaredDx(\n        x, y, flatCoordinates[i], flatCoordinates[i + 1]);\n      if (squaredDistance < minSquaredDistance) {\n        minSquaredDistance = squaredDistance;\n        for (let j = 0; j < stride; ++j) {\n          closestPoint[j] = flatCoordinates[i + j];\n        }\n        closestPoint.length = stride;\n      }\n    }\n    return minSquaredDistance;\n  }\n\n  /**\n   * Return the coordinates of the multipoint.\n   * @return {Array<import(\"../coordinate.js\").Coordinate>} Coordinates.\n   * @override\n   * @api\n   */\n  getCoordinates() {\n    return inflateCoordinates(\n      this.flatCoordinates, 0, this.flatCoordinates.length, this.stride);\n  }\n\n  /**\n   * Return the point at the specified index.\n   * @param {number} index Index.\n   * @return {Point} Point.\n   * @api\n   */\n  getPoint(index) {\n    const n = !this.flatCoordinates ? 0 : this.flatCoordinates.length / this.stride;\n    if (index < 0 || n <= index) {\n      return null;\n    }\n    return new Point(this.flatCoordinates.slice(\n      index * this.stride, (index + 1) * this.stride), this.layout);\n  }\n\n  /**\n   * Return the points of this multipoint.\n   * @return {Array<Point>} Points.\n   * @api\n   */\n  getPoints() {\n    const flatCoordinates = this.flatCoordinates;\n    const layout = this.layout;\n    const stride = this.stride;\n    /** @type {Array<Point>} */\n    const points = [];\n    for (let i = 0, ii = flatCoordinates.length; i < ii; i += stride) {\n      const point = new Point(flatCoordinates.slice(i, i + stride), layout);\n      points.push(point);\n    }\n    return points;\n  }\n\n  /**\n   * @inheritDoc\n   * @api\n   */\n  getType() {\n    return GeometryType.MULTI_POINT;\n  }\n\n  /**\n   * @inheritDoc\n   * @api\n   */\n  intersectsExtent(extent) {\n    const flatCoordinates = this.flatCoordinates;\n    const stride = this.stride;\n    for (let i = 0, ii = flatCoordinates.length; i < ii; i += stride) {\n      const x = flatCoordinates[i];\n      const y = flatCoordinates[i + 1];\n      if (containsXY(extent, x, y)) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  /**\n   * Set the coordinates of the multipoint.\n   * @param {!Array<import(\"../coordinate.js\").Coordinate>} coordinates Coordinates.\n   * @param {import(\"./GeometryLayout.js\").default=} opt_layout Layout.\n   * @override\n   * @api\n   */\n  setCoordinates(coordinates, opt_layout) {\n    this.setLayout(opt_layout, coordinates, 1);\n    if (!this.flatCoordinates) {\n      this.flatCoordinates = [];\n    }\n    this.flatCoordinates.length = deflateCoordinates(\n      this.flatCoordinates, 0, coordinates, this.stride);\n    this.changed();\n  }\n}\n\n\nexport default MultiPoint;\n"]},"metadata":{},"sourceType":"module"}