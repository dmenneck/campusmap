{"ast":null,"code":"/**\n * @module ol/source/Source\n */\nimport { inherits } from '../util.js';\nimport { UNDEFINED } from '../functions.js';\nimport BaseObject from '../Object.js';\nimport { get as getProjection } from '../proj.js';\nimport SourceState from '../source/State.js';\n/**\n * A function that returns a string or an array of strings representing source\n * attributions.\n *\n * @typedef {function(module:ol/PluggableMap~FrameState): (string|Array.<string>)} Attribution\n */\n\n/**\n * A type that can be used to provide attribution information for data sources.\n *\n * It represents either\n * * a simple string (e.g. `'© Acme Inc.'`)\n * * an array of simple strings (e.g. `['© Acme Inc.', '© Bacme Inc.']`)\n * * a function that returns a string or array of strings (`{@link module:ol/source/Source~Attribution}`)\n *\n * @typedef {string|Array.<string>|module:ol/source/Source~Attribution} AttributionLike\n */\n\n/**\n * @typedef {Object} Options\n * @property {module:ol/source/Source~AttributionLike} [attributions]\n * @property {module:ol/proj~ProjectionLike} projection\n * @property {module:ol/source/State} [state]\n * @property {boolean} [wrapX]\n */\n\n/**\n * @classdesc\n * Abstract base class; normally only used for creating subclasses and not\n * instantiated in apps.\n * Base class for {@link module:ol/layer/Layer~Layer} sources.\n *\n * A generic `change` event is triggered when the state of the source changes.\n *\n * @constructor\n * @abstract\n * @extends {module:ol/Object}\n * @param {module:ol/source/Source~Options} options Source options.\n * @api\n */\n\nconst Source = function (options) {\n  BaseObject.call(this);\n  /**\n   * @private\n   * @type {module:ol/proj/Projection}\n   */\n\n  this.projection_ = getProjection(options.projection);\n  /**\n   * @private\n   * @type {?module:ol/source/Source~Attribution}\n   */\n\n  this.attributions_ = this.adaptAttributions_(options.attributions);\n  /**\n   * @private\n   * @type {module:ol/source/State}\n   */\n\n  this.state_ = options.state !== undefined ? options.state : SourceState.READY;\n  /**\n   * @private\n   * @type {boolean}\n   */\n\n  this.wrapX_ = options.wrapX !== undefined ? options.wrapX : false;\n};\n\ninherits(Source, BaseObject);\n/**\n * Turns the attributions option into an attributions function.\n * @param {module:ol/source/Source~AttributionLike|undefined} attributionLike The attribution option.\n * @return {?module:ol/source/Source~Attribution} An attribution function (or null).\n */\n\nSource.prototype.adaptAttributions_ = function (attributionLike) {\n  if (!attributionLike) {\n    return null;\n  }\n\n  if (Array.isArray(attributionLike)) {\n    return function (frameState) {\n      return attributionLike;\n    };\n  }\n\n  if (typeof attributionLike === 'function') {\n    return attributionLike;\n  }\n\n  return function (frameState) {\n    return [attributionLike];\n  };\n};\n/**\n * @param {module:ol/coordinate~Coordinate} coordinate Coordinate.\n * @param {number} resolution Resolution.\n * @param {number} rotation Rotation.\n * @param {number} hitTolerance Hit tolerance in pixels.\n * @param {Object.<string, boolean>} skippedFeatureUids Skipped feature uids.\n * @param {function((module:ol/Feature|module:ol/render/Feature)): T} callback Feature callback.\n * @return {T|undefined} Callback result.\n * @template T\n */\n\n\nSource.prototype.forEachFeatureAtCoordinate = UNDEFINED;\n/**\n * Get the attribution function for the source.\n * @return {?module:ol/source/Source~Attribution} Attribution function.\n */\n\nSource.prototype.getAttributions = function () {\n  return this.attributions_;\n};\n/**\n * Get the projection of the source.\n * @return {module:ol/proj/Projection} Projection.\n * @api\n */\n\n\nSource.prototype.getProjection = function () {\n  return this.projection_;\n};\n/**\n * @abstract\n * @return {Array.<number>|undefined} Resolutions.\n */\n\n\nSource.prototype.getResolutions = function () {};\n/**\n * Get the state of the source, see {@link module:ol/source/State~State} for possible states.\n * @return {module:ol/source/State} State.\n * @api\n */\n\n\nSource.prototype.getState = function () {\n  return this.state_;\n};\n/**\n * @return {boolean|undefined} Wrap X.\n */\n\n\nSource.prototype.getWrapX = function () {\n  return this.wrapX_;\n};\n/**\n * Refreshes the source and finally dispatches a 'change' event.\n * @api\n */\n\n\nSource.prototype.refresh = function () {\n  this.changed();\n};\n/**\n * Set the attributions of the source.\n * @param {module:ol/source/Source~AttributionLike|undefined} attributions Attributions.\n *     Can be passed as `string`, `Array<string>`, `{@link module:ol/source/Source~Attribution}`,\n *     or `undefined`.\n * @api\n */\n\n\nSource.prototype.setAttributions = function (attributions) {\n  this.attributions_ = this.adaptAttributions_(attributions);\n  this.changed();\n};\n/**\n * Set the state of the source.\n * @param {module:ol/source/State} state State.\n * @protected\n */\n\n\nSource.prototype.setState = function (state) {\n  this.state_ = state;\n  this.changed();\n};\n\nexport default Source;","map":null,"metadata":{},"sourceType":"module"}