{"ast":null,"code":"/**\n * @module ol/style/Icon\n */\nimport { getUid, inherits } from '../util.js';\nimport ImageState from '../ImageState.js';\nimport { assert } from '../asserts.js';\nimport { asArray } from '../color.js';\nimport { listen, unlisten } from '../events.js';\nimport EventType from '../events/EventType.js';\nimport IconAnchorUnits from '../style/IconAnchorUnits.js';\nimport { get as getIconImage } from '../style/IconImage.js';\nimport IconOrigin from '../style/IconOrigin.js';\nimport ImageStyle from '../style/Image.js';\n/**\n * @typedef {Object} Options\n * @property {Array.<number>} [anchor=[0.5, 0.5]] Anchor. Default value is the icon center.\n * @property {module:ol/style/IconOrigin} [anchorOrigin] Origin of the anchor: `bottom-left`, `bottom-right`,\n * `top-left` or `top-right`. Default is `top-left`.\n * @property {module:ol/style/IconAnchorUnits} [anchorXUnits] Units in which the anchor x value is\n * specified. A value of `'fraction'` indicates the x value is a fraction of the icon. A value of `'pixels'` indicates\n * the x value in pixels. Default is `'fraction'`.\n * @property {module:ol/style/IconAnchorUnits} [anchorYUnits] Units in which the anchor y value is\n * specified. A value of `'fraction'` indicates the y value is a fraction of the icon. A value of `'pixels'` indicates\n * the y value in pixels. Default is `'fraction'`.\n * @property {module:ol/color~Color|string} [color] Color to tint the icon. If not specified,\n * the icon will be left as is.\n * @property {null|string} [crossOrigin] The `crossOrigin` attribute for loaded images. Note that you must provide a\n * `crossOrigin` value if you are using the WebGL renderer or if you want to access pixel data with the Canvas renderer.\n * See {@link https://developer.mozilla.org/en-US/docs/Web/HTML/CORS_enabled_image} for more detail.\n * @property {Image|HTMLCanvasElement} [img] Image object for the icon. If the `src` option is not provided then the\n * provided image must already be loaded. And in that case, it is required\n * to provide the size of the image, with the `imgSize` option.\n * @property {Array.<number>} [offset=[0, 0]] Offset, which, together with the size and the offset origin, define the\n * sub-rectangle to use from the original icon image.\n * @property {module:ol/style/IconOrigin} [offsetOrigin] Origin of the offset: `bottom-left`, `bottom-right`,\n * `top-left` or `top-right`. Default is `top-left`.\n * @property {number} [opacity=1] Opacity of the icon.\n * @property {number} [scale=1] Scale.\n * @property {boolean} [snapToPixel=true] If `true` integral numbers of pixels are used as the X and Y pixel coordinate\n * when drawing the icon in the output canvas. If `false` fractional numbers may be used. Using `true` allows for\n * \"sharp\" rendering (no blur), while using `false` allows for \"accurate\" rendering. Note that accuracy is important if\n * the icon's position is animated. Without it, the icon may jitter noticeably.\n * @property {boolean} [rotateWithView=false] Whether to rotate the icon with the view.\n * @property {number} [rotation=0] Rotation in radians (positive rotation clockwise).\n * @property {module:ol/size~Size} [size] Icon size in pixel. Can be used together with `offset` to define the\n * sub-rectangle to use from the origin (sprite) icon image.\n * @property {module:ol/size~Size} [imgSize] Image size in pixels. Only required if `img` is set and `src` is not, and\n * for SVG images in Internet Explorer 11. The provided `imgSize` needs to match the actual size of the image.\n * @property {string} [src] Image source URI.\n */\n\n/**\n * @classdesc\n * Set icon style for vector features.\n *\n * @constructor\n * @param {module:ol/style/Icon~Options=} opt_options Options.\n * @extends {module:ol/style/Image}\n * @api\n */\n\nconst Icon = function (opt_options) {\n  const options = opt_options || {};\n  /**\n   * @private\n   * @type {Array.<number>}\n   */\n\n  this.anchor_ = options.anchor !== undefined ? options.anchor : [0.5, 0.5];\n  /**\n   * @private\n   * @type {Array.<number>}\n   */\n\n  this.normalizedAnchor_ = null;\n  /**\n   * @private\n   * @type {module:ol/style/IconOrigin}\n   */\n\n  this.anchorOrigin_ = options.anchorOrigin !== undefined ? options.anchorOrigin : IconOrigin.TOP_LEFT;\n  /**\n   * @private\n   * @type {module:ol/style/IconAnchorUnits}\n   */\n\n  this.anchorXUnits_ = options.anchorXUnits !== undefined ? options.anchorXUnits : IconAnchorUnits.FRACTION;\n  /**\n   * @private\n   * @type {module:ol/style/IconAnchorUnits}\n   */\n\n  this.anchorYUnits_ = options.anchorYUnits !== undefined ? options.anchorYUnits : IconAnchorUnits.FRACTION;\n  /**\n   * @private\n   * @type {?string}\n   */\n\n  this.crossOrigin_ = options.crossOrigin !== undefined ? options.crossOrigin : null;\n  /**\n   * @type {Image|HTMLCanvasElement}\n   */\n\n  const image = options.img !== undefined ? options.img : null;\n  /**\n   * @type {module:ol/size~Size}\n   */\n\n  const imgSize = options.imgSize !== undefined ? options.imgSize : null;\n  /**\n   * @type {string|undefined}\n   */\n\n  let src = options.src;\n  assert(!(src !== undefined && image), 4); // `image` and `src` cannot be provided at the same time\n\n  assert(!image || image && imgSize, 5); // `imgSize` must be set when `image` is provided\n\n  if ((src === undefined || src.length === 0) && image) {\n    src = image.src || getUid(image).toString();\n  }\n\n  assert(src !== undefined && src.length > 0, 6); // A defined and non-empty `src` or `image` must be provided\n\n  /**\n   * @type {module:ol/ImageState}\n   */\n\n  const imageState = options.src !== undefined ? ImageState.IDLE : ImageState.LOADED;\n  /**\n   * @private\n   * @type {module:ol/color~Color}\n   */\n\n  this.color_ = options.color !== undefined ? asArray(options.color) : null;\n  /**\n   * @private\n   * @type {module:ol/style/IconImage}\n   */\n\n  this.iconImage_ = getIconImage(image,\n  /** @type {string} */\n  src, imgSize, this.crossOrigin_, imageState, this.color_);\n  /**\n   * @private\n   * @type {Array.<number>}\n   */\n\n  this.offset_ = options.offset !== undefined ? options.offset : [0, 0];\n  /**\n   * @private\n   * @type {module:ol/style/IconOrigin}\n   */\n\n  this.offsetOrigin_ = options.offsetOrigin !== undefined ? options.offsetOrigin : IconOrigin.TOP_LEFT;\n  /**\n   * @private\n   * @type {Array.<number>}\n   */\n\n  this.origin_ = null;\n  /**\n   * @private\n   * @type {module:ol/size~Size}\n   */\n\n  this.size_ = options.size !== undefined ? options.size : null;\n  /**\n   * @type {number}\n   */\n\n  const opacity = options.opacity !== undefined ? options.opacity : 1;\n  /**\n   * @type {boolean}\n   */\n\n  const rotateWithView = options.rotateWithView !== undefined ? options.rotateWithView : false;\n  /**\n   * @type {number}\n   */\n\n  const rotation = options.rotation !== undefined ? options.rotation : 0;\n  /**\n   * @type {number}\n   */\n\n  const scale = options.scale !== undefined ? options.scale : 1;\n  /**\n   * @type {boolean}\n   */\n\n  const snapToPixel = options.snapToPixel !== undefined ? options.snapToPixel : true;\n  ImageStyle.call(this, {\n    opacity: opacity,\n    rotation: rotation,\n    scale: scale,\n    snapToPixel: snapToPixel,\n    rotateWithView: rotateWithView\n  });\n};\n\ninherits(Icon, ImageStyle);\n/**\n * Clones the style. The underlying Image/HTMLCanvasElement is not cloned.\n * @return {module:ol/style/Icon} The cloned style.\n * @api\n */\n\nIcon.prototype.clone = function () {\n  return new Icon({\n    anchor: this.anchor_.slice(),\n    anchorOrigin: this.anchorOrigin_,\n    anchorXUnits: this.anchorXUnits_,\n    anchorYUnits: this.anchorYUnits_,\n    crossOrigin: this.crossOrigin_,\n    color: this.color_ && this.color_.slice ? this.color_.slice() : this.color_ || undefined,\n    src: this.getSrc(),\n    offset: this.offset_.slice(),\n    offsetOrigin: this.offsetOrigin_,\n    size: this.size_ !== null ? this.size_.slice() : undefined,\n    opacity: this.getOpacity(),\n    scale: this.getScale(),\n    snapToPixel: this.getSnapToPixel(),\n    rotation: this.getRotation(),\n    rotateWithView: this.getRotateWithView()\n  });\n};\n/**\n * @inheritDoc\n * @api\n */\n\n\nIcon.prototype.getAnchor = function () {\n  if (this.normalizedAnchor_) {\n    return this.normalizedAnchor_;\n  }\n\n  let anchor = this.anchor_;\n  const size = this.getSize();\n\n  if (this.anchorXUnits_ == IconAnchorUnits.FRACTION || this.anchorYUnits_ == IconAnchorUnits.FRACTION) {\n    if (!size) {\n      return null;\n    }\n\n    anchor = this.anchor_.slice();\n\n    if (this.anchorXUnits_ == IconAnchorUnits.FRACTION) {\n      anchor[0] *= size[0];\n    }\n\n    if (this.anchorYUnits_ == IconAnchorUnits.FRACTION) {\n      anchor[1] *= size[1];\n    }\n  }\n\n  if (this.anchorOrigin_ != IconOrigin.TOP_LEFT) {\n    if (!size) {\n      return null;\n    }\n\n    if (anchor === this.anchor_) {\n      anchor = this.anchor_.slice();\n    }\n\n    if (this.anchorOrigin_ == IconOrigin.TOP_RIGHT || this.anchorOrigin_ == IconOrigin.BOTTOM_RIGHT) {\n      anchor[0] = -anchor[0] + size[0];\n    }\n\n    if (this.anchorOrigin_ == IconOrigin.BOTTOM_LEFT || this.anchorOrigin_ == IconOrigin.BOTTOM_RIGHT) {\n      anchor[1] = -anchor[1] + size[1];\n    }\n  }\n\n  this.normalizedAnchor_ = anchor;\n  return this.normalizedAnchor_;\n};\n/**\n * Get the icon color.\n * @return {module:ol/color~Color} Color.\n * @api\n */\n\n\nIcon.prototype.getColor = function () {\n  return this.color_;\n};\n/**\n * Get the image icon.\n * @param {number} pixelRatio Pixel ratio.\n * @return {Image|HTMLCanvasElement} Image or Canvas element.\n * @override\n * @api\n */\n\n\nIcon.prototype.getImage = function (pixelRatio) {\n  return this.iconImage_.getImage(pixelRatio);\n};\n/**\n * @override\n */\n\n\nIcon.prototype.getImageSize = function () {\n  return this.iconImage_.getSize();\n};\n/**\n * @override\n */\n\n\nIcon.prototype.getHitDetectionImageSize = function () {\n  return this.getImageSize();\n};\n/**\n * @override\n */\n\n\nIcon.prototype.getImageState = function () {\n  return this.iconImage_.getImageState();\n};\n/**\n * @override\n */\n\n\nIcon.prototype.getHitDetectionImage = function (pixelRatio) {\n  return this.iconImage_.getHitDetectionImage(pixelRatio);\n};\n/**\n * @inheritDoc\n * @api\n */\n\n\nIcon.prototype.getOrigin = function () {\n  if (this.origin_) {\n    return this.origin_;\n  }\n\n  let offset = this.offset_;\n\n  if (this.offsetOrigin_ != IconOrigin.TOP_LEFT) {\n    const size = this.getSize();\n    const iconImageSize = this.iconImage_.getSize();\n\n    if (!size || !iconImageSize) {\n      return null;\n    }\n\n    offset = offset.slice();\n\n    if (this.offsetOrigin_ == IconOrigin.TOP_RIGHT || this.offsetOrigin_ == IconOrigin.BOTTOM_RIGHT) {\n      offset[0] = iconImageSize[0] - size[0] - offset[0];\n    }\n\n    if (this.offsetOrigin_ == IconOrigin.BOTTOM_LEFT || this.offsetOrigin_ == IconOrigin.BOTTOM_RIGHT) {\n      offset[1] = iconImageSize[1] - size[1] - offset[1];\n    }\n  }\n\n  this.origin_ = offset;\n  return this.origin_;\n};\n/**\n * Get the image URL.\n * @return {string|undefined} Image src.\n * @api\n */\n\n\nIcon.prototype.getSrc = function () {\n  return this.iconImage_.getSrc();\n};\n/**\n * @inheritDoc\n * @api\n */\n\n\nIcon.prototype.getSize = function () {\n  return !this.size_ ? this.iconImage_.getSize() : this.size_;\n};\n/**\n * @override\n */\n\n\nIcon.prototype.listenImageChange = function (listener, thisArg) {\n  return listen(this.iconImage_, EventType.CHANGE, listener, thisArg);\n};\n/**\n * Load not yet loaded URI.\n * When rendering a feature with an icon style, the vector renderer will\n * automatically call this method. However, you might want to call this\n * method yourself for preloading or other purposes.\n * @override\n * @api\n */\n\n\nIcon.prototype.load = function () {\n  this.iconImage_.load();\n};\n/**\n * @override\n */\n\n\nIcon.prototype.unlistenImageChange = function (listener, thisArg) {\n  unlisten(this.iconImage_, EventType.CHANGE, listener, thisArg);\n};\n\nexport default Icon;","map":null,"metadata":{},"sourceType":"module"}