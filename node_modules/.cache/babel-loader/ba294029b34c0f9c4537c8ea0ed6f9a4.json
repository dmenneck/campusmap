{"ast":null,"code":"/**\n * @module ol/format/XMLFeature\n */\nimport { inherits } from '../util.js';\nimport { extend } from '../array.js';\nimport FeatureFormat from '../format/Feature.js';\nimport FormatType from '../format/FormatType.js';\nimport { isDocument, isNode, parse } from '../xml.js';\n/**\n * @classdesc\n * Abstract base class; normally only used for creating subclasses and not\n * instantiated in apps.\n * Base class for XML feature formats.\n *\n * @constructor\n * @abstract\n * @extends {module:ol/format/Feature}\n */\n\nconst XMLFeature = function () {\n  /**\n   * @type {XMLSerializer}\n   * @private\n   */\n  this.xmlSerializer_ = new XMLSerializer();\n  FeatureFormat.call(this);\n};\n\ninherits(XMLFeature, FeatureFormat);\n/**\n * @inheritDoc\n */\n\nXMLFeature.prototype.getType = function () {\n  return FormatType.XML;\n};\n/**\n * @inheritDoc\n */\n\n\nXMLFeature.prototype.readFeature = function (source, opt_options) {\n  if (isDocument(source)) {\n    return this.readFeatureFromDocument(\n    /** @type {Document} */\n    source, opt_options);\n  } else if (isNode(source)) {\n    return this.readFeatureFromNode(\n    /** @type {Node} */\n    source, opt_options);\n  } else if (typeof source === 'string') {\n    const doc = parse(source);\n    return this.readFeatureFromDocument(doc, opt_options);\n  } else {\n    return null;\n  }\n};\n/**\n * @param {Document} doc Document.\n * @param {module:ol/format/Feature~ReadOptions=} opt_options Options.\n * @return {module:ol/Feature} Feature.\n */\n\n\nXMLFeature.prototype.readFeatureFromDocument = function (doc, opt_options) {\n  const features = this.readFeaturesFromDocument(doc, opt_options);\n\n  if (features.length > 0) {\n    return features[0];\n  } else {\n    return null;\n  }\n};\n/**\n * @param {Node} node Node.\n * @param {module:ol/format/Feature~ReadOptions=} opt_options Options.\n * @return {module:ol/Feature} Feature.\n */\n\n\nXMLFeature.prototype.readFeatureFromNode = function (node, opt_options) {\n  return null; // not implemented\n};\n/**\n * @inheritDoc\n */\n\n\nXMLFeature.prototype.readFeatures = function (source, opt_options) {\n  if (isDocument(source)) {\n    return this.readFeaturesFromDocument(\n    /** @type {Document} */\n    source, opt_options);\n  } else if (isNode(source)) {\n    return this.readFeaturesFromNode(\n    /** @type {Node} */\n    source, opt_options);\n  } else if (typeof source === 'string') {\n    const doc = parse(source);\n    return this.readFeaturesFromDocument(doc, opt_options);\n  } else {\n    return [];\n  }\n};\n/**\n * @param {Document} doc Document.\n * @param {module:ol/format/Feature~ReadOptions=} opt_options Options.\n * @protected\n * @return {Array.<module:ol/Feature>} Features.\n */\n\n\nXMLFeature.prototype.readFeaturesFromDocument = function (doc, opt_options) {\n  /** @type {Array.<module:ol/Feature>} */\n  const features = [];\n\n  for (let n = doc.firstChild; n; n = n.nextSibling) {\n    if (n.nodeType == Node.ELEMENT_NODE) {\n      extend(features, this.readFeaturesFromNode(n, opt_options));\n    }\n  }\n\n  return features;\n};\n/**\n * @abstract\n * @param {Node} node Node.\n * @param {module:ol/format/Feature~ReadOptions=} opt_options Options.\n * @protected\n * @return {Array.<module:ol/Feature>} Features.\n */\n\n\nXMLFeature.prototype.readFeaturesFromNode = function (node, opt_options) {};\n/**\n * @inheritDoc\n */\n\n\nXMLFeature.prototype.readGeometry = function (source, opt_options) {\n  if (isDocument(source)) {\n    return this.readGeometryFromDocument(\n    /** @type {Document} */\n    source, opt_options);\n  } else if (isNode(source)) {\n    return this.readGeometryFromNode(\n    /** @type {Node} */\n    source, opt_options);\n  } else if (typeof source === 'string') {\n    const doc = parse(source);\n    return this.readGeometryFromDocument(doc, opt_options);\n  } else {\n    return null;\n  }\n};\n/**\n * @param {Document} doc Document.\n * @param {module:ol/format/Feature~ReadOptions=} opt_options Options.\n * @protected\n * @return {module:ol/geom/Geometry} Geometry.\n */\n\n\nXMLFeature.prototype.readGeometryFromDocument = function (doc, opt_options) {\n  return null; // not implemented\n};\n/**\n * @param {Node} node Node.\n * @param {module:ol/format/Feature~ReadOptions=} opt_options Options.\n * @protected\n * @return {module:ol/geom/Geometry} Geometry.\n */\n\n\nXMLFeature.prototype.readGeometryFromNode = function (node, opt_options) {\n  return null; // not implemented\n};\n/**\n * @inheritDoc\n */\n\n\nXMLFeature.prototype.readProjection = function (source) {\n  if (isDocument(source)) {\n    return this.readProjectionFromDocument(\n    /** @type {Document} */\n    source);\n  } else if (isNode(source)) {\n    return this.readProjectionFromNode(\n    /** @type {Node} */\n    source);\n  } else if (typeof source === 'string') {\n    const doc = parse(source);\n    return this.readProjectionFromDocument(doc);\n  } else {\n    return null;\n  }\n};\n/**\n * @param {Document} doc Document.\n * @protected\n * @return {module:ol/proj/Projection} Projection.\n */\n\n\nXMLFeature.prototype.readProjectionFromDocument = function (doc) {\n  return this.dataProjection;\n};\n/**\n * @param {Node} node Node.\n * @protected\n * @return {module:ol/proj/Projection} Projection.\n */\n\n\nXMLFeature.prototype.readProjectionFromNode = function (node) {\n  return this.dataProjection;\n};\n/**\n * @inheritDoc\n */\n\n\nXMLFeature.prototype.writeFeature = function (feature, opt_options) {\n  const node = this.writeFeatureNode(feature, opt_options);\n  return this.xmlSerializer_.serializeToString(node);\n};\n/**\n * @param {module:ol/Feature} feature Feature.\n * @param {module:ol/format/Feature~WriteOptions=} opt_options Options.\n * @protected\n * @return {Node} Node.\n */\n\n\nXMLFeature.prototype.writeFeatureNode = function (feature, opt_options) {\n  return null; // not implemented\n};\n/**\n * @inheritDoc\n */\n\n\nXMLFeature.prototype.writeFeatures = function (features, opt_options) {\n  const node = this.writeFeaturesNode(features, opt_options);\n  return this.xmlSerializer_.serializeToString(node);\n};\n/**\n * @param {Array.<module:ol/Feature>} features Features.\n * @param {module:ol/format/Feature~WriteOptions=} opt_options Options.\n * @return {Node} Node.\n */\n\n\nXMLFeature.prototype.writeFeaturesNode = function (features, opt_options) {\n  return null; // not implemented\n};\n/**\n * @inheritDoc\n */\n\n\nXMLFeature.prototype.writeGeometry = function (geometry, opt_options) {\n  const node = this.writeGeometryNode(geometry, opt_options);\n  return this.xmlSerializer_.serializeToString(node);\n};\n/**\n * @param {module:ol/geom/Geometry} geometry Geometry.\n * @param {module:ol/format/Feature~WriteOptions=} opt_options Options.\n * @return {Node} Node.\n */\n\n\nXMLFeature.prototype.writeGeometryNode = function (geometry, opt_options) {\n  return null; // not implemented\n};\n\nexport default XMLFeature;","map":null,"metadata":{},"sourceType":"module"}