{"ast":null,"code":"/**\n * ag-grid-community - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components\n * @version v21.2.2\n * @link http://www.ag-grid.com/\n * @license MIT\n */\n\"use strict\";\n\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nvar __metadata = this && this.__metadata || function (k, v) {\n  if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar dragAndDropService_1 = require(\"../dragAndDrop/dragAndDropService\");\n\nvar context_1 = require(\"../context/context\");\n\nvar moveColumnController_1 = require(\"./moveColumnController\");\n\nvar column_1 = require(\"../entities/column\");\n\nvar bodyDropPivotTarget_1 = require(\"./bodyDropPivotTarget\");\n\nvar columnController_1 = require(\"../columnController/columnController\");\n\nvar DropType;\n\n(function (DropType) {\n  DropType[DropType[\"ColumnMove\"] = 0] = \"ColumnMove\";\n  DropType[DropType[\"Pivot\"] = 1] = \"Pivot\";\n})(DropType || (DropType = {}));\n\nvar BodyDropTarget =\n/** @class */\nfunction () {\n  function BodyDropTarget(pinned, eContainer) {\n    this.dropListeners = {};\n    this.pinned = pinned;\n    this.eContainer = eContainer;\n  }\n\n  BodyDropTarget.prototype.registerGridComp = function (gridPanel) {\n    this.gridPanel = gridPanel;\n    this.moveColumnController.registerGridComp(gridPanel);\n\n    switch (this.pinned) {\n      case column_1.Column.PINNED_LEFT:\n        this.eSecondaryContainers = this.gridPanel.getDropTargetLeftContainers();\n        break;\n\n      case column_1.Column.PINNED_RIGHT:\n        this.eSecondaryContainers = this.gridPanel.getDropTargetRightContainers();\n        break;\n\n      default:\n        this.eSecondaryContainers = this.gridPanel.getDropTargetBodyContainers();\n        break;\n    }\n  };\n\n  BodyDropTarget.prototype.isInterestedIn = function (type) {\n    // not interested in row drags\n    return type === dragAndDropService_1.DragSourceType.HeaderCell || type === dragAndDropService_1.DragSourceType.ToolPanel;\n  };\n\n  BodyDropTarget.prototype.getSecondaryContainers = function () {\n    return this.eSecondaryContainers;\n  };\n\n  BodyDropTarget.prototype.getContainer = function () {\n    return this.eContainer;\n  };\n\n  BodyDropTarget.prototype.init = function () {\n    this.moveColumnController = new moveColumnController_1.MoveColumnController(this.pinned, this.eContainer);\n    this.context.wireBean(this.moveColumnController);\n    var bodyDropPivotTarget = new bodyDropPivotTarget_1.BodyDropPivotTarget(this.pinned);\n    this.context.wireBean(bodyDropPivotTarget);\n    this.dropListeners[DropType.ColumnMove] = this.moveColumnController;\n    this.dropListeners[DropType.Pivot] = bodyDropPivotTarget;\n    this.dragAndDropService.addDropTarget(this);\n  };\n\n  BodyDropTarget.prototype.getIconName = function () {\n    return this.currentDropListener.getIconName();\n  }; // we want to use the bodyPivotTarget if the user is dragging columns in from the toolPanel\n  // and we are in pivot mode, as it has to logic to set pivot/value/group on the columns when\n  // dropped into the grid's body.\n\n\n  BodyDropTarget.prototype.getDropType = function (draggingEvent) {\n    if (this.columnController.isPivotMode()) {\n      // in pivot mode, then if moving a column (ie didn't come from toolpanel) then it's\n      // a standard column move, however if it came from teh toolpanel, then we are introducing\n      // dimensions or values to the grid\n      if (draggingEvent.dragSource.type === dragAndDropService_1.DragSourceType.ToolPanel) {\n        return DropType.Pivot;\n      } else {\n        return DropType.ColumnMove;\n      }\n    } else {\n      // it's a column, and not pivot mode, so always moving\n      return DropType.ColumnMove;\n    }\n  };\n\n  BodyDropTarget.prototype.onDragEnter = function (draggingEvent) {\n    // we pick the drop listener depending on whether we are in pivot mode are not. if we are\n    // in pivot mode, then dropping cols changes the row group, pivot, value stats. otherwise\n    // we change visibility state and position.\n    // if (this.columnController.isPivotMode()) {\n    var dropType = this.getDropType(draggingEvent);\n    this.currentDropListener = this.dropListeners[dropType];\n    this.currentDropListener.onDragEnter(draggingEvent);\n  };\n\n  BodyDropTarget.prototype.onDragLeave = function (params) {\n    this.currentDropListener.onDragLeave(params);\n  };\n\n  BodyDropTarget.prototype.onDragging = function (params) {\n    this.currentDropListener.onDragging(params);\n  };\n\n  BodyDropTarget.prototype.onDragStop = function (params) {\n    this.currentDropListener.onDragStop(params);\n  };\n\n  __decorate([context_1.Autowired('context'), __metadata(\"design:type\", context_1.Context)], BodyDropTarget.prototype, \"context\", void 0);\n\n  __decorate([context_1.Autowired('dragAndDropService'), __metadata(\"design:type\", dragAndDropService_1.DragAndDropService)], BodyDropTarget.prototype, \"dragAndDropService\", void 0);\n\n  __decorate([context_1.Autowired('columnController'), __metadata(\"design:type\", columnController_1.ColumnController)], BodyDropTarget.prototype, \"columnController\", void 0);\n\n  __decorate([context_1.PostConstruct, __metadata(\"design:type\", Function), __metadata(\"design:paramtypes\", []), __metadata(\"design:returntype\", void 0)], BodyDropTarget.prototype, \"init\", null);\n\n  return BodyDropTarget;\n}();\n\nexports.BodyDropTarget = BodyDropTarget;","map":{"version":3,"sources":["/Users/dirkmennecke77/Desktop/Lageplan/node_modules/ag-grid-community/dist/lib/headerRendering/bodyDropTarget.js"],"names":["__decorate","decorators","target","key","desc","c","arguments","length","r","Object","getOwnPropertyDescriptor","d","Reflect","decorate","i","defineProperty","__metadata","k","v","metadata","exports","value","dragAndDropService_1","require","context_1","moveColumnController_1","column_1","bodyDropPivotTarget_1","columnController_1","DropType","BodyDropTarget","pinned","eContainer","dropListeners","prototype","registerGridComp","gridPanel","moveColumnController","Column","PINNED_LEFT","eSecondaryContainers","getDropTargetLeftContainers","PINNED_RIGHT","getDropTargetRightContainers","getDropTargetBodyContainers","isInterestedIn","type","DragSourceType","HeaderCell","ToolPanel","getSecondaryContainers","getContainer","init","MoveColumnController","context","wireBean","bodyDropPivotTarget","BodyDropPivotTarget","ColumnMove","Pivot","dragAndDropService","addDropTarget","getIconName","currentDropListener","getDropType","draggingEvent","columnController","isPivotMode","dragSource","onDragEnter","dropType","onDragLeave","params","onDragging","onDragStop","Autowired","Context","DragAndDropService","ColumnController","PostConstruct","Function"],"mappings":"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","sourcesContent":["/**\n * ag-grid-community - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components\n * @version v21.2.2\n * @link http://www.ag-grid.com/\n * @license MIT\n */\n\"use strict\";\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __metadata = (this && this.__metadata) || function (k, v) {\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar dragAndDropService_1 = require(\"../dragAndDrop/dragAndDropService\");\nvar context_1 = require(\"../context/context\");\nvar moveColumnController_1 = require(\"./moveColumnController\");\nvar column_1 = require(\"../entities/column\");\nvar bodyDropPivotTarget_1 = require(\"./bodyDropPivotTarget\");\nvar columnController_1 = require(\"../columnController/columnController\");\nvar DropType;\n(function (DropType) {\n    DropType[DropType[\"ColumnMove\"] = 0] = \"ColumnMove\";\n    DropType[DropType[\"Pivot\"] = 1] = \"Pivot\";\n})(DropType || (DropType = {}));\nvar BodyDropTarget = /** @class */ (function () {\n    function BodyDropTarget(pinned, eContainer) {\n        this.dropListeners = {};\n        this.pinned = pinned;\n        this.eContainer = eContainer;\n    }\n    BodyDropTarget.prototype.registerGridComp = function (gridPanel) {\n        this.gridPanel = gridPanel;\n        this.moveColumnController.registerGridComp(gridPanel);\n        switch (this.pinned) {\n            case column_1.Column.PINNED_LEFT:\n                this.eSecondaryContainers = this.gridPanel.getDropTargetLeftContainers();\n                break;\n            case column_1.Column.PINNED_RIGHT:\n                this.eSecondaryContainers = this.gridPanel.getDropTargetRightContainers();\n                break;\n            default:\n                this.eSecondaryContainers = this.gridPanel.getDropTargetBodyContainers();\n                break;\n        }\n    };\n    BodyDropTarget.prototype.isInterestedIn = function (type) {\n        // not interested in row drags\n        return type === dragAndDropService_1.DragSourceType.HeaderCell || type === dragAndDropService_1.DragSourceType.ToolPanel;\n    };\n    BodyDropTarget.prototype.getSecondaryContainers = function () {\n        return this.eSecondaryContainers;\n    };\n    BodyDropTarget.prototype.getContainer = function () {\n        return this.eContainer;\n    };\n    BodyDropTarget.prototype.init = function () {\n        this.moveColumnController = new moveColumnController_1.MoveColumnController(this.pinned, this.eContainer);\n        this.context.wireBean(this.moveColumnController);\n        var bodyDropPivotTarget = new bodyDropPivotTarget_1.BodyDropPivotTarget(this.pinned);\n        this.context.wireBean(bodyDropPivotTarget);\n        this.dropListeners[DropType.ColumnMove] = this.moveColumnController;\n        this.dropListeners[DropType.Pivot] = bodyDropPivotTarget;\n        this.dragAndDropService.addDropTarget(this);\n    };\n    BodyDropTarget.prototype.getIconName = function () {\n        return this.currentDropListener.getIconName();\n    };\n    // we want to use the bodyPivotTarget if the user is dragging columns in from the toolPanel\n    // and we are in pivot mode, as it has to logic to set pivot/value/group on the columns when\n    // dropped into the grid's body.\n    BodyDropTarget.prototype.getDropType = function (draggingEvent) {\n        if (this.columnController.isPivotMode()) {\n            // in pivot mode, then if moving a column (ie didn't come from toolpanel) then it's\n            // a standard column move, however if it came from teh toolpanel, then we are introducing\n            // dimensions or values to the grid\n            if (draggingEvent.dragSource.type === dragAndDropService_1.DragSourceType.ToolPanel) {\n                return DropType.Pivot;\n            }\n            else {\n                return DropType.ColumnMove;\n            }\n        }\n        else {\n            // it's a column, and not pivot mode, so always moving\n            return DropType.ColumnMove;\n        }\n    };\n    BodyDropTarget.prototype.onDragEnter = function (draggingEvent) {\n        // we pick the drop listener depending on whether we are in pivot mode are not. if we are\n        // in pivot mode, then dropping cols changes the row group, pivot, value stats. otherwise\n        // we change visibility state and position.\n        // if (this.columnController.isPivotMode()) {\n        var dropType = this.getDropType(draggingEvent);\n        this.currentDropListener = this.dropListeners[dropType];\n        this.currentDropListener.onDragEnter(draggingEvent);\n    };\n    BodyDropTarget.prototype.onDragLeave = function (params) {\n        this.currentDropListener.onDragLeave(params);\n    };\n    BodyDropTarget.prototype.onDragging = function (params) {\n        this.currentDropListener.onDragging(params);\n    };\n    BodyDropTarget.prototype.onDragStop = function (params) {\n        this.currentDropListener.onDragStop(params);\n    };\n    __decorate([\n        context_1.Autowired('context'),\n        __metadata(\"design:type\", context_1.Context)\n    ], BodyDropTarget.prototype, \"context\", void 0);\n    __decorate([\n        context_1.Autowired('dragAndDropService'),\n        __metadata(\"design:type\", dragAndDropService_1.DragAndDropService)\n    ], BodyDropTarget.prototype, \"dragAndDropService\", void 0);\n    __decorate([\n        context_1.Autowired('columnController'),\n        __metadata(\"design:type\", columnController_1.ColumnController)\n    ], BodyDropTarget.prototype, \"columnController\", void 0);\n    __decorate([\n        context_1.PostConstruct,\n        __metadata(\"design:type\", Function),\n        __metadata(\"design:paramtypes\", []),\n        __metadata(\"design:returntype\", void 0)\n    ], BodyDropTarget.prototype, \"init\", null);\n    return BodyDropTarget;\n}());\nexports.BodyDropTarget = BodyDropTarget;\n"]},"metadata":{},"sourceType":"script"}