{"ast":null,"code":"/**\n * @module ol/PluggableMap\n */\nimport { getUid } from './util.js';\nimport Collection from './Collection.js';\nimport CollectionEventType from './CollectionEventType.js';\nimport MapBrowserEvent from './MapBrowserEvent.js';\nimport MapBrowserEventHandler from './MapBrowserEventHandler.js';\nimport MapBrowserEventType from './MapBrowserEventType.js';\nimport MapEvent from './MapEvent.js';\nimport MapEventType from './MapEventType.js';\nimport MapProperty from './MapProperty.js';\nimport RenderEventType from './render/EventType.js';\nimport BaseObject, { getChangeEventType } from './Object.js';\nimport ObjectEventType from './ObjectEventType.js';\nimport TileQueue from './TileQueue.js';\nimport View from './View.js';\nimport ViewHint from './ViewHint.js';\nimport { assert } from './asserts.js';\nimport { removeNode } from './dom.js';\nimport { listen, unlistenByKey, unlisten } from './events.js';\nimport { stopPropagation } from './events/Event.js';\nimport EventType from './events/EventType.js';\nimport { createEmpty, clone, createOrUpdateEmpty, equals, getForViewAndSize, isEmpty } from './extent.js';\nimport { TRUE } from './functions.js';\nimport { DEVICE_PIXEL_RATIO, TOUCH } from './has.js';\nimport LayerGroup from './layer/Group.js';\nimport { hasArea } from './size.js';\nimport { DROP } from './structs/PriorityQueue.js';\nimport { create as createTransform, apply as applyTransform } from './transform.js';\n/**\n * State of the current frame. Only `pixelRatio`, `time` and `viewState` should\n * be used in applications.\n * @typedef {Object} FrameState\n * @property {number} pixelRatio The pixel ratio of the frame.\n * @property {number} time The time when rendering of the frame was requested.\n * @property {import(\"./View.js\").State} viewState The state of the current view.\n * @property {boolean} animate\n * @property {import(\"./transform.js\").Transform} coordinateToPixelTransform\n * @property {null|import(\"./extent.js\").Extent} extent\n * @property {import(\"./coordinate.js\").Coordinate} focus\n * @property {number} index\n * @property {Object<string, import(\"./layer/Layer.js\").State>} layerStates\n * @property {Array<import(\"./layer/Layer.js\").State>} layerStatesArray\n * @property {import(\"./transform.js\").Transform} pixelToCoordinateTransform\n * @property {Array<PostRenderFunction>} postRenderFunctions\n * @property {import(\"./size.js\").Size} size\n * @property {!Object<string, boolean>} skippedFeatureUids\n * @property {TileQueue} tileQueue\n * @property {Object<string, Object<string, import(\"./TileRange.js\").default>>} usedTiles\n * @property {Array<number>} viewHints\n * @property {!Object<string, Object<string, boolean>>} wantedTiles\n */\n\n/**\n * @typedef {function(PluggableMap, ?FrameState): boolean} PostRenderFunction\n */\n\n/**\n * @typedef {Object} AtPixelOptions\n * @property {undefined|function(import(\"./layer/Layer.js\").default): boolean} layerFilter Layer filter\n * function. The filter function will receive one argument, the\n * {@link module:ol/layer/Layer layer-candidate} and it should return a boolean value.\n * Only layers which are visible and for which this function returns `true`\n * will be tested for features. By default, all visible layers will be tested.\n * @property {number} [hitTolerance=0] Hit-detection tolerance in pixels. Pixels\n * inside the radius around the given position will be checked for features. This only\n * works for the canvas renderer and not for WebGL.\n */\n\n/**\n * @typedef {Object} MapOptionsInternal\n * @property {Collection<import(\"./control/Control.js\").default>} [controls]\n * @property {Collection<import(\"./interaction/Interaction.js\").default>} [interactions]\n * @property {HTMLElement|Document} keyboardEventTarget\n * @property {Collection<import(\"./Overlay.js\").default>} overlays\n * @property {Object<string, *>} values\n */\n\n/**\n * Object literal with config options for the map.\n * @typedef {Object} MapOptions\n * @property {Collection<import(\"./control/Control.js\").default>|Array<import(\"./control/Control.js\").default>} [controls]\n * Controls initially added to the map. If not specified,\n * {@link module:ol/control~defaults} is used.\n * @property {number} [pixelRatio=window.devicePixelRatio] The ratio between\n * physical pixels and device-independent pixels (dips) on the device.\n * @property {Collection<import(\"./interaction/Interaction.js\").default>|Array<import(\"./interaction/Interaction.js\").default>} [interactions]\n * Interactions that are initially added to the map. If not specified,\n * {@link module:ol/interaction~defaults} is used.\n * @property {HTMLElement|Document|string} [keyboardEventTarget] The element to\n * listen to keyboard events on. This determines when the `KeyboardPan` and\n * `KeyboardZoom` interactions trigger. For example, if this option is set to\n * `document` the keyboard interactions will always trigger. If this option is\n * not specified, the element the library listens to keyboard events on is the\n * map target (i.e. the user-provided div for the map). If this is not\n * `document`, the target element needs to be focused for key events to be\n * emitted, requiring that the target element has a `tabindex` attribute.\n * @property {Array<import(\"./layer/Base.js\").default>|Collection<import(\"./layer/Base.js\").default>|LayerGroup} [layers]\n * Layers. If this is not defined, a map with no layers will be rendered. Note\n * that layers are rendered in the order supplied, so if you want, for example,\n * a vector layer to appear on top of a tile layer, it must come after the tile\n * layer.\n * @property {number} [maxTilesLoading=16] Maximum number tiles to load\n * simultaneously.\n * @property {boolean} [loadTilesWhileAnimating=false] When set to `true`, tiles\n * will be loaded during animations. This may improve the user experience, but\n * can also make animations stutter on devices with slow memory.\n * @property {boolean} [loadTilesWhileInteracting=false] When set to `true`,\n * tiles will be loaded while interacting with the map. This may improve the\n * user experience, but can also make map panning and zooming choppy on devices\n * with slow memory.\n * @property {number} [moveTolerance=1] The minimum distance in pixels the\n * cursor must move to be detected as a map move event instead of a click.\n * Increasing this value can make it easier to click on the map.\n * @property {Collection<import(\"./Overlay.js\").default>|Array<import(\"./Overlay.js\").default>} [overlays]\n * Overlays initially added to the map. By default, no overlays are added.\n * @property {HTMLElement|string} [target] The container for the map, either the\n * element itself or the `id` of the element. If not specified at construction\n * time, {@link module:ol/Map~Map#setTarget} must be called for the map to be\n * rendered.\n * @property {View} [view] The map's view.  No layer sources will be\n * fetched unless this is specified at construction time or through\n * {@link module:ol/Map~Map#setView}.\n */\n\n/**\n * @fires import(\"./MapBrowserEvent.js\").MapBrowserEvent\n * @fires import(\"./MapEvent.js\").MapEvent\n * @fires module:ol/render/Event~RenderEvent#postcompose\n * @fires module:ol/render/Event~RenderEvent#precompose\n * @fires module:ol/render/Event~RenderEvent#rendercomplete\n * @api\n */\n\nvar PluggableMap =\n/*@__PURE__*/\nfunction (BaseObject) {\n  function PluggableMap(options) {\n    BaseObject.call(this);\n    var optionsInternal = createOptionsInternal(options);\n    /**\n     * @type {number}\n     * @private\n     */\n\n    this.maxTilesLoading_ = options.maxTilesLoading !== undefined ? options.maxTilesLoading : 16;\n    /**\n     * @type {boolean}\n     * @private\n     */\n\n    this.loadTilesWhileAnimating_ = options.loadTilesWhileAnimating !== undefined ? options.loadTilesWhileAnimating : false;\n    /**\n     * @type {boolean}\n     * @private\n     */\n\n    this.loadTilesWhileInteracting_ = options.loadTilesWhileInteracting !== undefined ? options.loadTilesWhileInteracting : false;\n    /**\n     * @private\n     * @type {number}\n     */\n\n    this.pixelRatio_ = options.pixelRatio !== undefined ? options.pixelRatio : DEVICE_PIXEL_RATIO;\n    /**\n     * @private\n     * @type {number|undefined}\n     */\n\n    this.animationDelayKey_;\n    /**\n     * @private\n     */\n\n    this.animationDelay_ = function () {\n      this.animationDelayKey_ = undefined;\n      this.renderFrame_.call(this, Date.now());\n    }.bind(this);\n    /**\n     * @private\n     * @type {import(\"./transform.js\").Transform}\n     */\n\n\n    this.coordinateToPixelTransform_ = createTransform();\n    /**\n     * @private\n     * @type {import(\"./transform.js\").Transform}\n     */\n\n    this.pixelToCoordinateTransform_ = createTransform();\n    /**\n     * @private\n     * @type {number}\n     */\n\n    this.frameIndex_ = 0;\n    /**\n     * @private\n     * @type {?FrameState}\n     */\n\n    this.frameState_ = null;\n    /**\n     * The extent at the previous 'moveend' event.\n     * @private\n     * @type {import(\"./extent.js\").Extent}\n     */\n\n    this.previousExtent_ = null;\n    /**\n     * @private\n     * @type {?import(\"./events.js\").EventsKey}\n     */\n\n    this.viewPropertyListenerKey_ = null;\n    /**\n     * @private\n     * @type {?import(\"./events.js\").EventsKey}\n     */\n\n    this.viewChangeListenerKey_ = null;\n    /**\n     * @private\n     * @type {Array<import(\"./events.js\").EventsKey>}\n     */\n\n    this.layerGroupPropertyListenerKeys_ = null;\n    /**\n     * @private\n     * @type {!HTMLElement}\n     */\n\n    this.viewport_ = document.createElement('div');\n    this.viewport_.className = 'ol-viewport' + (TOUCH ? ' ol-touch' : '');\n    this.viewport_.style.position = 'relative';\n    this.viewport_.style.overflow = 'hidden';\n    this.viewport_.style.width = '100%';\n    this.viewport_.style.height = '100%'; // prevent page zoom on IE >= 10 browsers\n\n    this.viewport_.style.msTouchAction = 'none';\n    this.viewport_.style.touchAction = 'none';\n    /**\n     * @private\n     * @type {!HTMLElement}\n     */\n\n    this.overlayContainer_ = document.createElement('div');\n    this.overlayContainer_.className = 'ol-overlaycontainer';\n    this.viewport_.appendChild(this.overlayContainer_);\n    /**\n     * @private\n     * @type {!HTMLElement}\n     */\n\n    this.overlayContainerStopEvent_ = document.createElement('div');\n    this.overlayContainerStopEvent_.className = 'ol-overlaycontainer-stopevent';\n    var overlayEvents = [EventType.CLICK, EventType.DBLCLICK, EventType.MOUSEDOWN, EventType.TOUCHSTART, EventType.MSPOINTERDOWN, MapBrowserEventType.POINTERDOWN, EventType.MOUSEWHEEL, EventType.WHEEL];\n\n    for (var i = 0, ii = overlayEvents.length; i < ii; ++i) {\n      listen(this.overlayContainerStopEvent_, overlayEvents[i], stopPropagation);\n    }\n\n    this.viewport_.appendChild(this.overlayContainerStopEvent_);\n    /**\n     * @private\n     * @type {MapBrowserEventHandler}\n     */\n\n    this.mapBrowserEventHandler_ = new MapBrowserEventHandler(this, options.moveTolerance);\n\n    for (var key in MapBrowserEventType) {\n      listen(this.mapBrowserEventHandler_, MapBrowserEventType[key], this.handleMapBrowserEvent, this);\n    }\n    /**\n     * @private\n     * @type {HTMLElement|Document}\n     */\n\n\n    this.keyboardEventTarget_ = optionsInternal.keyboardEventTarget;\n    /**\n     * @private\n     * @type {Array<import(\"./events.js\").EventsKey>}\n     */\n\n    this.keyHandlerKeys_ = null;\n    listen(this.viewport_, EventType.CONTEXTMENU, this.handleBrowserEvent, this);\n    listen(this.viewport_, EventType.WHEEL, this.handleBrowserEvent, this);\n    listen(this.viewport_, EventType.MOUSEWHEEL, this.handleBrowserEvent, this);\n    /**\n     * @type {Collection<import(\"./control/Control.js\").default>}\n     * @protected\n     */\n\n    this.controls = optionsInternal.controls || new Collection();\n    /**\n     * @type {Collection<import(\"./interaction/Interaction.js\").default>}\n     * @protected\n     */\n\n    this.interactions = optionsInternal.interactions || new Collection();\n    /**\n     * @type {Collection<import(\"./Overlay.js\").default>}\n     * @private\n     */\n\n    this.overlays_ = optionsInternal.overlays;\n    /**\n     * A lookup of overlays by id.\n     * @private\n     * @type {Object<string, import(\"./Overlay.js\").default>}\n     */\n\n    this.overlayIdIndex_ = {};\n    /**\n     * @type {import(\"./renderer/Map.js\").default}\n     * @private\n     */\n\n    this.renderer_ = this.createRenderer();\n    /**\n     * @type {function(Event)|undefined}\n     * @private\n     */\n\n    this.handleResize_;\n    /**\n     * @private\n     * @type {import(\"./coordinate.js\").Coordinate}\n     */\n\n    this.focus_ = null;\n    /**\n     * @private\n     * @type {!Array<PostRenderFunction>}\n     */\n\n    this.postRenderFunctions_ = [];\n    /**\n     * @private\n     * @type {TileQueue}\n     */\n\n    this.tileQueue_ = new TileQueue(this.getTilePriority.bind(this), this.handleTileChange_.bind(this));\n    /**\n     * Uids of features to skip at rendering time.\n     * @type {Object<string, boolean>}\n     * @private\n     */\n\n    this.skippedFeatureUids_ = {};\n    listen(this, getChangeEventType(MapProperty.LAYERGROUP), this.handleLayerGroupChanged_, this);\n    listen(this, getChangeEventType(MapProperty.VIEW), this.handleViewChanged_, this);\n    listen(this, getChangeEventType(MapProperty.SIZE), this.handleSizeChanged_, this);\n    listen(this, getChangeEventType(MapProperty.TARGET), this.handleTargetChanged_, this); // setProperties will trigger the rendering of the map if the map\n    // is \"defined\" already.\n\n    this.setProperties(optionsInternal.values);\n    this.controls.forEach(\n    /**\n     * @param {import(\"./control/Control.js\").default} control Control.\n     * @this {PluggableMap}\n     */\n    function (control) {\n      control.setMap(this);\n    }.bind(this));\n    listen(this.controls, CollectionEventType.ADD,\n    /**\n     * @param {import(\"./Collection.js\").CollectionEvent} event CollectionEvent.\n     */\n    function (event) {\n      event.element.setMap(this);\n    }, this);\n    listen(this.controls, CollectionEventType.REMOVE,\n    /**\n     * @param {import(\"./Collection.js\").CollectionEvent} event CollectionEvent.\n     */\n    function (event) {\n      event.element.setMap(null);\n    }, this);\n    this.interactions.forEach(\n    /**\n     * @param {import(\"./interaction/Interaction.js\").default} interaction Interaction.\n     * @this {PluggableMap}\n     */\n    function (interaction) {\n      interaction.setMap(this);\n    }.bind(this));\n    listen(this.interactions, CollectionEventType.ADD,\n    /**\n     * @param {import(\"./Collection.js\").CollectionEvent} event CollectionEvent.\n     */\n    function (event) {\n      event.element.setMap(this);\n    }, this);\n    listen(this.interactions, CollectionEventType.REMOVE,\n    /**\n     * @param {import(\"./Collection.js\").CollectionEvent} event CollectionEvent.\n     */\n    function (event) {\n      event.element.setMap(null);\n    }, this);\n    this.overlays_.forEach(this.addOverlayInternal_.bind(this));\n    listen(this.overlays_, CollectionEventType.ADD,\n    /**\n     * @param {import(\"./Collection.js\").CollectionEvent} event CollectionEvent.\n     */\n    function (event) {\n      this.addOverlayInternal_(\n      /** @type {import(\"./Overlay.js\").default} */\n      event.element);\n    }, this);\n    listen(this.overlays_, CollectionEventType.REMOVE,\n    /**\n     * @param {import(\"./Collection.js\").CollectionEvent} event CollectionEvent.\n     */\n    function (event) {\n      var overlay =\n      /** @type {import(\"./Overlay.js\").default} */\n      event.element;\n      var id = overlay.getId();\n\n      if (id !== undefined) {\n        delete this.overlayIdIndex_[id.toString()];\n      }\n\n      event.element.setMap(null);\n    }, this);\n  }\n\n  if (BaseObject) PluggableMap.__proto__ = BaseObject;\n  PluggableMap.prototype = Object.create(BaseObject && BaseObject.prototype);\n  PluggableMap.prototype.constructor = PluggableMap;\n  /**\n   * @abstract\n   * @return {import(\"./renderer/Map.js\").default} The map renderer\n   */\n\n  PluggableMap.prototype.createRenderer = function createRenderer() {\n    throw new Error('Use a map type that has a createRenderer method');\n  };\n  /**\n   * Add the given control to the map.\n   * @param {import(\"./control/Control.js\").default} control Control.\n   * @api\n   */\n\n\n  PluggableMap.prototype.addControl = function addControl(control) {\n    this.getControls().push(control);\n  };\n  /**\n   * Add the given interaction to the map.\n   * @param {import(\"./interaction/Interaction.js\").default} interaction Interaction to add.\n   * @api\n   */\n\n\n  PluggableMap.prototype.addInteraction = function addInteraction(interaction) {\n    this.getInteractions().push(interaction);\n  };\n  /**\n   * Adds the given layer to the top of this map. If you want to add a layer\n   * elsewhere in the stack, use `getLayers()` and the methods available on\n   * {@link module:ol/Collection~Collection}.\n   * @param {import(\"./layer/Base.js\").default} layer Layer.\n   * @api\n   */\n\n\n  PluggableMap.prototype.addLayer = function addLayer(layer) {\n    var layers = this.getLayerGroup().getLayers();\n    layers.push(layer);\n  };\n  /**\n   * Add the given overlay to the map.\n   * @param {import(\"./Overlay.js\").default} overlay Overlay.\n   * @api\n   */\n\n\n  PluggableMap.prototype.addOverlay = function addOverlay(overlay) {\n    this.getOverlays().push(overlay);\n  };\n  /**\n   * This deals with map's overlay collection changes.\n   * @param {import(\"./Overlay.js\").default} overlay Overlay.\n   * @private\n   */\n\n\n  PluggableMap.prototype.addOverlayInternal_ = function addOverlayInternal_(overlay) {\n    var id = overlay.getId();\n\n    if (id !== undefined) {\n      this.overlayIdIndex_[id.toString()] = overlay;\n    }\n\n    overlay.setMap(this);\n  };\n  /**\n   *\n   * @inheritDoc\n   */\n\n\n  PluggableMap.prototype.disposeInternal = function disposeInternal() {\n    this.mapBrowserEventHandler_.dispose();\n    unlisten(this.viewport_, EventType.CONTEXTMENU, this.handleBrowserEvent, this);\n    unlisten(this.viewport_, EventType.WHEEL, this.handleBrowserEvent, this);\n    unlisten(this.viewport_, EventType.MOUSEWHEEL, this.handleBrowserEvent, this);\n\n    if (this.handleResize_ !== undefined) {\n      removeEventListener(EventType.RESIZE, this.handleResize_, false);\n      this.handleResize_ = undefined;\n    }\n\n    if (this.animationDelayKey_) {\n      cancelAnimationFrame(this.animationDelayKey_);\n      this.animationDelayKey_ = undefined;\n    }\n\n    this.setTarget(null);\n    BaseObject.prototype.disposeInternal.call(this);\n  };\n  /**\n   * Detect features that intersect a pixel on the viewport, and execute a\n   * callback with each intersecting feature. Layers included in the detection can\n   * be configured through the `layerFilter` option in `opt_options`.\n   * @param {import(\"./pixel.js\").Pixel} pixel Pixel.\n   * @param {function(this: S, import(\"./Feature.js\").FeatureLike,\n   *     import(\"./layer/Layer.js\").default): T} callback Feature callback. The callback will be\n   *     called with two arguments. The first argument is one\n   *     {@link module:ol/Feature feature} or\n   *     {@link module:ol/render/Feature render feature} at the pixel, the second is\n   *     the {@link module:ol/layer/Layer layer} of the feature and will be null for\n   *     unmanaged layers. To stop detection, callback functions can return a\n   *     truthy value.\n   * @param {AtPixelOptions=} opt_options Optional options.\n   * @return {T|undefined} Callback result, i.e. the return value of last\n   * callback execution, or the first truthy callback return value.\n   * @template S,T\n   * @api\n   */\n\n\n  PluggableMap.prototype.forEachFeatureAtPixel = function forEachFeatureAtPixel(pixel, callback, opt_options) {\n    if (!this.frameState_) {\n      return;\n    }\n\n    var coordinate = this.getCoordinateFromPixel(pixel);\n    opt_options = opt_options !== undefined ? opt_options :\n    /** @type {AtPixelOptions} */\n    {};\n    var hitTolerance = opt_options.hitTolerance !== undefined ? opt_options.hitTolerance * this.frameState_.pixelRatio : 0;\n    var layerFilter = opt_options.layerFilter !== undefined ? opt_options.layerFilter : TRUE;\n    return this.renderer_.forEachFeatureAtCoordinate(coordinate, this.frameState_, hitTolerance, callback, null, layerFilter, null);\n  };\n  /**\n   * Get all features that intersect a pixel on the viewport.\n   * @param {import(\"./pixel.js\").Pixel} pixel Pixel.\n   * @param {AtPixelOptions=} opt_options Optional options.\n   * @return {Array<import(\"./Feature.js\").FeatureLike>} The detected features or\n   * `null` if none were found.\n   * @api\n   */\n\n\n  PluggableMap.prototype.getFeaturesAtPixel = function getFeaturesAtPixel(pixel, opt_options) {\n    var features = null;\n    this.forEachFeatureAtPixel(pixel, function (feature) {\n      if (!features) {\n        features = [];\n      }\n\n      features.push(feature);\n    }, opt_options);\n    return features;\n  };\n  /**\n   * Detect layers that have a color value at a pixel on the viewport, and\n   * execute a callback with each matching layer. Layers included in the\n   * detection can be configured through `opt_layerFilter`.\n   * @param {import(\"./pixel.js\").Pixel} pixel Pixel.\n   * @param {function(this: S, import(\"./layer/Layer.js\").default, (Uint8ClampedArray|Uint8Array)): T} callback\n   *     Layer callback. This callback will receive two arguments: first is the\n   *     {@link module:ol/layer/Layer layer}, second argument is an array representing\n   *     [R, G, B, A] pixel values (0 - 255) and will be `null` for layer types\n   *     that do not currently support this argument. To stop detection, callback\n   *     functions can return a truthy value.\n   * @param {AtPixelOptions=} opt_options Configuration options.\n   * @return {T|undefined} Callback result, i.e. the return value of last\n   * callback execution, or the first truthy callback return value.\n   * @template S,T\n   * @api\n   */\n\n\n  PluggableMap.prototype.forEachLayerAtPixel = function forEachLayerAtPixel(pixel, callback, opt_options) {\n    if (!this.frameState_) {\n      return;\n    }\n\n    var options = opt_options ||\n    /** @type {AtPixelOptions} */\n    {};\n    var hitTolerance = options.hitTolerance !== undefined ? opt_options.hitTolerance * this.frameState_.pixelRatio : 0;\n    var layerFilter = options.layerFilter || TRUE;\n    return this.renderer_.forEachLayerAtPixel(pixel, this.frameState_, hitTolerance, callback, null, layerFilter, null);\n  };\n  /**\n   * Detect if features intersect a pixel on the viewport. Layers included in the\n   * detection can be configured through `opt_layerFilter`.\n   * @param {import(\"./pixel.js\").Pixel} pixel Pixel.\n   * @param {AtPixelOptions=} opt_options Optional options.\n   * @return {boolean} Is there a feature at the given pixel?\n   * @template U\n   * @api\n   */\n\n\n  PluggableMap.prototype.hasFeatureAtPixel = function hasFeatureAtPixel(pixel, opt_options) {\n    if (!this.frameState_) {\n      return false;\n    }\n\n    var coordinate = this.getCoordinateFromPixel(pixel);\n    opt_options = opt_options !== undefined ? opt_options :\n    /** @type {AtPixelOptions} */\n    {};\n    var layerFilter = opt_options.layerFilter !== undefined ? opt_options.layerFilter : TRUE;\n    var hitTolerance = opt_options.hitTolerance !== undefined ? opt_options.hitTolerance * this.frameState_.pixelRatio : 0;\n    return this.renderer_.hasFeatureAtCoordinate(coordinate, this.frameState_, hitTolerance, layerFilter, null);\n  };\n  /**\n   * Returns the coordinate in view projection for a browser event.\n   * @param {Event} event Event.\n   * @return {import(\"./coordinate.js\").Coordinate} Coordinate.\n   * @api\n   */\n\n\n  PluggableMap.prototype.getEventCoordinate = function getEventCoordinate(event) {\n    return this.getCoordinateFromPixel(this.getEventPixel(event));\n  };\n  /**\n   * Returns the map pixel position for a browser event relative to the viewport.\n   * @param {Event|TouchEvent} event Event.\n   * @return {import(\"./pixel.js\").Pixel} Pixel.\n   * @api\n   */\n\n\n  PluggableMap.prototype.getEventPixel = function getEventPixel(event) {\n    var viewportPosition = this.viewport_.getBoundingClientRect();\n    var eventPosition = 'changedTouches' in event ?\n    /** @type {TouchEvent} */\n    event.changedTouches[0] :\n    /** @type {MouseEvent} */\n    event;\n    return [eventPosition.clientX - viewportPosition.left, eventPosition.clientY - viewportPosition.top];\n  };\n  /**\n   * Get the target in which this map is rendered.\n   * Note that this returns what is entered as an option or in setTarget:\n   * if that was an element, it returns an element; if a string, it returns that.\n   * @return {HTMLElement|string|undefined} The Element or id of the Element that the\n   *     map is rendered in.\n   * @observable\n   * @api\n   */\n\n\n  PluggableMap.prototype.getTarget = function getTarget() {\n    return (\n      /** @type {HTMLElement|string|undefined} */\n      this.get(MapProperty.TARGET)\n    );\n  };\n  /**\n   * Get the DOM element into which this map is rendered. In contrast to\n   * `getTarget` this method always return an `Element`, or `null` if the\n   * map has no target.\n   * @return {HTMLElement} The element that the map is rendered in.\n   * @api\n   */\n\n\n  PluggableMap.prototype.getTargetElement = function getTargetElement() {\n    var target = this.getTarget();\n\n    if (target !== undefined) {\n      return typeof target === 'string' ? document.getElementById(target) : target;\n    } else {\n      return null;\n    }\n  };\n  /**\n   * Get the coordinate for a given pixel.  This returns a coordinate in the\n   * map view projection.\n   * @param {import(\"./pixel.js\").Pixel} pixel Pixel position in the map viewport.\n   * @return {import(\"./coordinate.js\").Coordinate} The coordinate for the pixel position.\n   * @api\n   */\n\n\n  PluggableMap.prototype.getCoordinateFromPixel = function getCoordinateFromPixel(pixel) {\n    var frameState = this.frameState_;\n\n    if (!frameState) {\n      return null;\n    } else {\n      return applyTransform(frameState.pixelToCoordinateTransform, pixel.slice());\n    }\n  };\n  /**\n   * Get the map controls. Modifying this collection changes the controls\n   * associated with the map.\n   * @return {Collection<import(\"./control/Control.js\").default>} Controls.\n   * @api\n   */\n\n\n  PluggableMap.prototype.getControls = function getControls() {\n    return this.controls;\n  };\n  /**\n   * Get the map overlays. Modifying this collection changes the overlays\n   * associated with the map.\n   * @return {Collection<import(\"./Overlay.js\").default>} Overlays.\n   * @api\n   */\n\n\n  PluggableMap.prototype.getOverlays = function getOverlays() {\n    return this.overlays_;\n  };\n  /**\n   * Get an overlay by its identifier (the value returned by overlay.getId()).\n   * Note that the index treats string and numeric identifiers as the same. So\n   * `map.getOverlayById(2)` will return an overlay with id `'2'` or `2`.\n   * @param {string|number} id Overlay identifier.\n   * @return {import(\"./Overlay.js\").default} Overlay.\n   * @api\n   */\n\n\n  PluggableMap.prototype.getOverlayById = function getOverlayById(id) {\n    var overlay = this.overlayIdIndex_[id.toString()];\n    return overlay !== undefined ? overlay : null;\n  };\n  /**\n   * Get the map interactions. Modifying this collection changes the interactions\n   * associated with the map.\n   *\n   * Interactions are used for e.g. pan, zoom and rotate.\n   * @return {Collection<import(\"./interaction/Interaction.js\").default>} Interactions.\n   * @api\n   */\n\n\n  PluggableMap.prototype.getInteractions = function getInteractions() {\n    return this.interactions;\n  };\n  /**\n   * Get the layergroup associated with this map.\n   * @return {LayerGroup} A layer group containing the layers in this map.\n   * @observable\n   * @api\n   */\n\n\n  PluggableMap.prototype.getLayerGroup = function getLayerGroup() {\n    return (\n      /** @type {LayerGroup} */\n      this.get(MapProperty.LAYERGROUP)\n    );\n  };\n  /**\n   * Get the collection of layers associated with this map.\n   * @return {!Collection<import(\"./layer/Base.js\").default>} Layers.\n   * @api\n   */\n\n\n  PluggableMap.prototype.getLayers = function getLayers() {\n    var layers = this.getLayerGroup().getLayers();\n    return layers;\n  };\n  /**\n   * Get the pixel for a coordinate.  This takes a coordinate in the map view\n   * projection and returns the corresponding pixel.\n   * @param {import(\"./coordinate.js\").Coordinate} coordinate A map coordinate.\n   * @return {import(\"./pixel.js\").Pixel} A pixel position in the map viewport.\n   * @api\n   */\n\n\n  PluggableMap.prototype.getPixelFromCoordinate = function getPixelFromCoordinate(coordinate) {\n    var frameState = this.frameState_;\n\n    if (!frameState) {\n      return null;\n    } else {\n      return applyTransform(frameState.coordinateToPixelTransform, coordinate.slice(0, 2));\n    }\n  };\n  /**\n   * Get the map renderer.\n   * @return {import(\"./renderer/Map.js\").default} Renderer\n   */\n\n\n  PluggableMap.prototype.getRenderer = function getRenderer() {\n    return this.renderer_;\n  };\n  /**\n   * Get the size of this map.\n   * @return {import(\"./size.js\").Size|undefined} The size in pixels of the map in the DOM.\n   * @observable\n   * @api\n   */\n\n\n  PluggableMap.prototype.getSize = function getSize() {\n    return (\n      /** @type {import(\"./size.js\").Size|undefined} */\n      this.get(MapProperty.SIZE)\n    );\n  };\n  /**\n   * Get the view associated with this map. A view manages properties such as\n   * center and resolution.\n   * @return {View} The view that controls this map.\n   * @observable\n   * @api\n   */\n\n\n  PluggableMap.prototype.getView = function getView() {\n    return (\n      /** @type {View} */\n      this.get(MapProperty.VIEW)\n    );\n  };\n  /**\n   * Get the element that serves as the map viewport.\n   * @return {HTMLElement} Viewport.\n   * @api\n   */\n\n\n  PluggableMap.prototype.getViewport = function getViewport() {\n    return this.viewport_;\n  };\n  /**\n   * Get the element that serves as the container for overlays.  Elements added to\n   * this container will let mousedown and touchstart events through to the map,\n   * so clicks and gestures on an overlay will trigger {@link module:ol/MapBrowserEvent~MapBrowserEvent}\n   * events.\n   * @return {!HTMLElement} The map's overlay container.\n   */\n\n\n  PluggableMap.prototype.getOverlayContainer = function getOverlayContainer() {\n    return this.overlayContainer_;\n  };\n  /**\n   * Get the element that serves as a container for overlays that don't allow\n   * event propagation. Elements added to this container won't let mousedown and\n   * touchstart events through to the map, so clicks and gestures on an overlay\n   * don't trigger any {@link module:ol/MapBrowserEvent~MapBrowserEvent}.\n   * @return {!HTMLElement} The map's overlay container that stops events.\n   */\n\n\n  PluggableMap.prototype.getOverlayContainerStopEvent = function getOverlayContainerStopEvent() {\n    return this.overlayContainerStopEvent_;\n  };\n  /**\n   * @param {import(\"./Tile.js\").default} tile Tile.\n   * @param {string} tileSourceKey Tile source key.\n   * @param {import(\"./coordinate.js\").Coordinate} tileCenter Tile center.\n   * @param {number} tileResolution Tile resolution.\n   * @return {number} Tile priority.\n   */\n\n\n  PluggableMap.prototype.getTilePriority = function getTilePriority(tile, tileSourceKey, tileCenter, tileResolution) {\n    // Filter out tiles at higher zoom levels than the current zoom level, or that\n    // are outside the visible extent.\n    var frameState = this.frameState_;\n\n    if (!frameState || !(tileSourceKey in frameState.wantedTiles)) {\n      return DROP;\n    }\n\n    if (!frameState.wantedTiles[tileSourceKey][tile.getKey()]) {\n      return DROP;\n    } // Prioritize the highest zoom level tiles closest to the focus.\n    // Tiles at higher zoom levels are prioritized using Math.log(tileResolution).\n    // Within a zoom level, tiles are prioritized by the distance in pixels\n    // between the center of the tile and the focus.  The factor of 65536 means\n    // that the prioritization should behave as desired for tiles up to\n    // 65536 * Math.log(2) = 45426 pixels from the focus.\n\n\n    var deltaX = tileCenter[0] - frameState.focus[0];\n    var deltaY = tileCenter[1] - frameState.focus[1];\n    return 65536 * Math.log(tileResolution) + Math.sqrt(deltaX * deltaX + deltaY * deltaY) / tileResolution;\n  };\n  /**\n   * @param {Event} browserEvent Browser event.\n   * @param {string=} opt_type Type.\n   */\n\n\n  PluggableMap.prototype.handleBrowserEvent = function handleBrowserEvent(browserEvent, opt_type) {\n    var type = opt_type || browserEvent.type;\n    var mapBrowserEvent = new MapBrowserEvent(type, this, browserEvent);\n    this.handleMapBrowserEvent(mapBrowserEvent);\n  };\n  /**\n   * @param {MapBrowserEvent} mapBrowserEvent The event to handle.\n   */\n\n\n  PluggableMap.prototype.handleMapBrowserEvent = function handleMapBrowserEvent(mapBrowserEvent) {\n    if (!this.frameState_) {\n      // With no view defined, we cannot translate pixels into geographical\n      // coordinates so interactions cannot be used.\n      return;\n    }\n\n    this.focus_ = mapBrowserEvent.coordinate;\n    mapBrowserEvent.frameState = this.frameState_;\n    var interactionsArray = this.getInteractions().getArray();\n\n    if (this.dispatchEvent(mapBrowserEvent) !== false) {\n      for (var i = interactionsArray.length - 1; i >= 0; i--) {\n        var interaction = interactionsArray[i];\n\n        if (!interaction.getActive()) {\n          continue;\n        }\n\n        var cont = interaction.handleEvent(mapBrowserEvent);\n\n        if (!cont) {\n          break;\n        }\n      }\n    }\n  };\n  /**\n   * @protected\n   */\n\n\n  PluggableMap.prototype.handlePostRender = function handlePostRender() {\n    var frameState = this.frameState_; // Manage the tile queue\n    // Image loads are expensive and a limited resource, so try to use them\n    // efficiently:\n    // * When the view is static we allow a large number of parallel tile loads\n    //   to complete the frame as quickly as possible.\n    // * When animating or interacting, image loads can cause janks, so we reduce\n    //   the maximum number of loads per frame and limit the number of parallel\n    //   tile loads to remain reactive to view changes and to reduce the chance of\n    //   loading tiles that will quickly disappear from view.\n\n    var tileQueue = this.tileQueue_;\n\n    if (!tileQueue.isEmpty()) {\n      var maxTotalLoading = this.maxTilesLoading_;\n      var maxNewLoads = maxTotalLoading;\n\n      if (frameState) {\n        var hints = frameState.viewHints;\n\n        if (hints[ViewHint.ANIMATING]) {\n          maxTotalLoading = this.loadTilesWhileAnimating_ ? 8 : 0;\n          maxNewLoads = 2;\n        }\n\n        if (hints[ViewHint.INTERACTING]) {\n          maxTotalLoading = this.loadTilesWhileInteracting_ ? 8 : 0;\n          maxNewLoads = 2;\n        }\n      }\n\n      if (tileQueue.getTilesLoading() < maxTotalLoading) {\n        tileQueue.reprioritize(); // FIXME only call if view has changed\n\n        tileQueue.loadMoreTiles(maxTotalLoading, maxNewLoads);\n      }\n    }\n\n    if (frameState && this.hasListener(RenderEventType.RENDERCOMPLETE) && !frameState.animate && !this.tileQueue_.getTilesLoading() && !getLoading(this.getLayers().getArray())) {\n      this.renderer_.dispatchRenderEvent(RenderEventType.RENDERCOMPLETE, frameState);\n    }\n\n    var postRenderFunctions = this.postRenderFunctions_;\n\n    for (var i = 0, ii = postRenderFunctions.length; i < ii; ++i) {\n      postRenderFunctions[i](this, frameState);\n    }\n\n    postRenderFunctions.length = 0;\n  };\n  /**\n   * @private\n   */\n\n\n  PluggableMap.prototype.handleSizeChanged_ = function handleSizeChanged_() {\n    this.render();\n  };\n  /**\n   * @private\n   */\n\n\n  PluggableMap.prototype.handleTargetChanged_ = function handleTargetChanged_() {\n    // target may be undefined, null, a string or an Element.\n    // If it's a string we convert it to an Element before proceeding.\n    // If it's not now an Element we remove the viewport from the DOM.\n    // If it's an Element we append the viewport element to it.\n    var targetElement;\n\n    if (this.getTarget()) {\n      targetElement = this.getTargetElement();\n    }\n\n    if (this.keyHandlerKeys_) {\n      for (var i = 0, ii = this.keyHandlerKeys_.length; i < ii; ++i) {\n        unlistenByKey(this.keyHandlerKeys_[i]);\n      }\n\n      this.keyHandlerKeys_ = null;\n    }\n\n    if (!targetElement) {\n      this.renderer_.removeLayerRenderers();\n      removeNode(this.viewport_);\n\n      if (this.handleResize_ !== undefined) {\n        removeEventListener(EventType.RESIZE, this.handleResize_, false);\n        this.handleResize_ = undefined;\n      }\n    } else {\n      targetElement.appendChild(this.viewport_);\n      var keyboardEventTarget = !this.keyboardEventTarget_ ? targetElement : this.keyboardEventTarget_;\n      this.keyHandlerKeys_ = [listen(keyboardEventTarget, EventType.KEYDOWN, this.handleBrowserEvent, this), listen(keyboardEventTarget, EventType.KEYPRESS, this.handleBrowserEvent, this)];\n\n      if (!this.handleResize_) {\n        this.handleResize_ = this.updateSize.bind(this);\n        window.addEventListener(EventType.RESIZE, this.handleResize_, false);\n      }\n    }\n\n    this.updateSize(); // updateSize calls setSize, so no need to call this.render\n    // ourselves here.\n  };\n  /**\n   * @private\n   */\n\n\n  PluggableMap.prototype.handleTileChange_ = function handleTileChange_() {\n    this.render();\n  };\n  /**\n   * @private\n   */\n\n\n  PluggableMap.prototype.handleViewPropertyChanged_ = function handleViewPropertyChanged_() {\n    this.render();\n  };\n  /**\n   * @private\n   */\n\n\n  PluggableMap.prototype.handleViewChanged_ = function handleViewChanged_() {\n    if (this.viewPropertyListenerKey_) {\n      unlistenByKey(this.viewPropertyListenerKey_);\n      this.viewPropertyListenerKey_ = null;\n    }\n\n    if (this.viewChangeListenerKey_) {\n      unlistenByKey(this.viewChangeListenerKey_);\n      this.viewChangeListenerKey_ = null;\n    }\n\n    var view = this.getView();\n\n    if (view) {\n      this.viewport_.setAttribute('data-view', getUid(view));\n      this.viewPropertyListenerKey_ = listen(view, ObjectEventType.PROPERTYCHANGE, this.handleViewPropertyChanged_, this);\n      this.viewChangeListenerKey_ = listen(view, EventType.CHANGE, this.handleViewPropertyChanged_, this);\n    }\n\n    this.render();\n  };\n  /**\n   * @private\n   */\n\n\n  PluggableMap.prototype.handleLayerGroupChanged_ = function handleLayerGroupChanged_() {\n    if (this.layerGroupPropertyListenerKeys_) {\n      this.layerGroupPropertyListenerKeys_.forEach(unlistenByKey);\n      this.layerGroupPropertyListenerKeys_ = null;\n    }\n\n    var layerGroup = this.getLayerGroup();\n\n    if (layerGroup) {\n      this.layerGroupPropertyListenerKeys_ = [listen(layerGroup, ObjectEventType.PROPERTYCHANGE, this.render, this), listen(layerGroup, EventType.CHANGE, this.render, this)];\n    }\n\n    this.render();\n  };\n  /**\n   * @return {boolean} Is rendered.\n   */\n\n\n  PluggableMap.prototype.isRendered = function isRendered() {\n    return !!this.frameState_;\n  };\n  /**\n   * Requests an immediate render in a synchronous manner.\n   * @api\n   */\n\n\n  PluggableMap.prototype.renderSync = function renderSync() {\n    if (this.animationDelayKey_) {\n      cancelAnimationFrame(this.animationDelayKey_);\n    }\n\n    this.animationDelay_();\n  };\n  /**\n   * Request a map rendering (at the next animation frame).\n   * @api\n   */\n\n\n  PluggableMap.prototype.render = function render() {\n    if (this.animationDelayKey_ === undefined) {\n      this.animationDelayKey_ = requestAnimationFrame(this.animationDelay_);\n    }\n  };\n  /**\n   * Remove the given control from the map.\n   * @param {import(\"./control/Control.js\").default} control Control.\n   * @return {import(\"./control/Control.js\").default|undefined} The removed control (or undefined\n   *     if the control was not found).\n   * @api\n   */\n\n\n  PluggableMap.prototype.removeControl = function removeControl(control) {\n    return this.getControls().remove(control);\n  };\n  /**\n   * Remove the given interaction from the map.\n   * @param {import(\"./interaction/Interaction.js\").default} interaction Interaction to remove.\n   * @return {import(\"./interaction/Interaction.js\").default|undefined} The removed interaction (or\n   *     undefined if the interaction was not found).\n   * @api\n   */\n\n\n  PluggableMap.prototype.removeInteraction = function removeInteraction(interaction) {\n    return this.getInteractions().remove(interaction);\n  };\n  /**\n   * Removes the given layer from the map.\n   * @param {import(\"./layer/Base.js\").default} layer Layer.\n   * @return {import(\"./layer/Base.js\").default|undefined} The removed layer (or undefined if the\n   *     layer was not found).\n   * @api\n   */\n\n\n  PluggableMap.prototype.removeLayer = function removeLayer(layer) {\n    var layers = this.getLayerGroup().getLayers();\n    return layers.remove(layer);\n  };\n  /**\n   * Remove the given overlay from the map.\n   * @param {import(\"./Overlay.js\").default} overlay Overlay.\n   * @return {import(\"./Overlay.js\").default|undefined} The removed overlay (or undefined\n   *     if the overlay was not found).\n   * @api\n   */\n\n\n  PluggableMap.prototype.removeOverlay = function removeOverlay(overlay) {\n    return this.getOverlays().remove(overlay);\n  };\n  /**\n   * @param {number} time Time.\n   * @private\n   */\n\n\n  PluggableMap.prototype.renderFrame_ = function renderFrame_(time) {\n    var viewState;\n    var size = this.getSize();\n    var view = this.getView();\n    var extent = createEmpty();\n    var previousFrameState = this.frameState_;\n    /** @type {?FrameState} */\n\n    var frameState = null;\n\n    if (size !== undefined && hasArea(size) && view && view.isDef()) {\n      var viewHints = view.getHints(this.frameState_ ? this.frameState_.viewHints : undefined);\n      var layerStatesArray = this.getLayerGroup().getLayerStatesArray();\n      var layerStates = {};\n\n      for (var i = 0, ii = layerStatesArray.length; i < ii; ++i) {\n        layerStates[getUid(layerStatesArray[i].layer)] = layerStatesArray[i];\n      }\n\n      viewState = view.getState(this.pixelRatio_);\n      frameState =\n      /** @type {FrameState} */\n      {\n        animate: false,\n        coordinateToPixelTransform: this.coordinateToPixelTransform_,\n        extent: extent,\n        focus: this.focus_ ? this.focus_ : viewState.center,\n        index: this.frameIndex_++,\n        layerStates: layerStates,\n        layerStatesArray: layerStatesArray,\n        pixelRatio: this.pixelRatio_,\n        pixelToCoordinateTransform: this.pixelToCoordinateTransform_,\n        postRenderFunctions: [],\n        size: size,\n        skippedFeatureUids: this.skippedFeatureUids_,\n        tileQueue: this.tileQueue_,\n        time: time,\n        usedTiles: {},\n        viewState: viewState,\n        viewHints: viewHints,\n        wantedTiles: {}\n      };\n    }\n\n    if (frameState) {\n      frameState.extent = getForViewAndSize(viewState.center, viewState.resolution, viewState.rotation, frameState.size, extent);\n    }\n\n    this.frameState_ = frameState;\n    this.renderer_.renderFrame(frameState);\n\n    if (frameState) {\n      if (frameState.animate) {\n        this.render();\n      }\n\n      Array.prototype.push.apply(this.postRenderFunctions_, frameState.postRenderFunctions);\n\n      if (previousFrameState) {\n        var moveStart = !this.previousExtent_ || !isEmpty(this.previousExtent_) && !equals(frameState.extent, this.previousExtent_);\n\n        if (moveStart) {\n          this.dispatchEvent(new MapEvent(MapEventType.MOVESTART, this, previousFrameState));\n          this.previousExtent_ = createOrUpdateEmpty(this.previousExtent_);\n        }\n      }\n\n      var idle = this.previousExtent_ && !frameState.viewHints[ViewHint.ANIMATING] && !frameState.viewHints[ViewHint.INTERACTING] && !equals(frameState.extent, this.previousExtent_);\n\n      if (idle) {\n        this.dispatchEvent(new MapEvent(MapEventType.MOVEEND, this, frameState));\n        clone(frameState.extent, this.previousExtent_);\n      }\n    }\n\n    this.dispatchEvent(new MapEvent(MapEventType.POSTRENDER, this, frameState));\n    setTimeout(this.handlePostRender.bind(this), 0);\n  };\n  /**\n   * Sets the layergroup of this map.\n   * @param {LayerGroup} layerGroup A layer group containing the layers in this map.\n   * @observable\n   * @api\n   */\n\n\n  PluggableMap.prototype.setLayerGroup = function setLayerGroup(layerGroup) {\n    this.set(MapProperty.LAYERGROUP, layerGroup);\n  };\n  /**\n   * Set the size of this map.\n   * @param {import(\"./size.js\").Size|undefined} size The size in pixels of the map in the DOM.\n   * @observable\n   * @api\n   */\n\n\n  PluggableMap.prototype.setSize = function setSize(size) {\n    this.set(MapProperty.SIZE, size);\n  };\n  /**\n   * Set the target element to render this map into.\n   * @param {HTMLElement|string|undefined} target The Element or id of the Element\n   *     that the map is rendered in.\n   * @observable\n   * @api\n   */\n\n\n  PluggableMap.prototype.setTarget = function setTarget(target) {\n    this.set(MapProperty.TARGET, target);\n  };\n  /**\n   * Set the view for this map.\n   * @param {View} view The view that controls this map.\n   * @observable\n   * @api\n   */\n\n\n  PluggableMap.prototype.setView = function setView(view) {\n    this.set(MapProperty.VIEW, view);\n  };\n  /**\n   * @param {import(\"./Feature.js\").default} feature Feature.\n   */\n\n\n  PluggableMap.prototype.skipFeature = function skipFeature(feature) {\n    this.skippedFeatureUids_[getUid(feature)] = true;\n    this.render();\n  };\n  /**\n   * Force a recalculation of the map viewport size.  This should be called when\n   * third-party code changes the size of the map viewport.\n   * @api\n   */\n\n\n  PluggableMap.prototype.updateSize = function updateSize() {\n    var targetElement = this.getTargetElement();\n\n    if (!targetElement) {\n      this.setSize(undefined);\n    } else {\n      var computedStyle = getComputedStyle(targetElement);\n      this.setSize([targetElement.offsetWidth - parseFloat(computedStyle['borderLeftWidth']) - parseFloat(computedStyle['paddingLeft']) - parseFloat(computedStyle['paddingRight']) - parseFloat(computedStyle['borderRightWidth']), targetElement.offsetHeight - parseFloat(computedStyle['borderTopWidth']) - parseFloat(computedStyle['paddingTop']) - parseFloat(computedStyle['paddingBottom']) - parseFloat(computedStyle['borderBottomWidth'])]);\n    }\n  };\n  /**\n   * @param {import(\"./Feature.js\").default} feature Feature.\n   */\n\n\n  PluggableMap.prototype.unskipFeature = function unskipFeature(feature) {\n    delete this.skippedFeatureUids_[getUid(feature)];\n    this.render();\n  };\n\n  return PluggableMap;\n}(BaseObject);\n/**\n * @param {MapOptions} options Map options.\n * @return {MapOptionsInternal} Internal map options.\n */\n\n\nfunction createOptionsInternal(options) {\n  /**\n   * @type {HTMLElement|Document}\n   */\n  var keyboardEventTarget = null;\n\n  if (options.keyboardEventTarget !== undefined) {\n    keyboardEventTarget = typeof options.keyboardEventTarget === 'string' ? document.getElementById(options.keyboardEventTarget) : options.keyboardEventTarget;\n  }\n  /**\n   * @type {Object<string, *>}\n   */\n\n\n  var values = {};\n  var layerGroup = options.layers && typeof\n  /** @type {?} */\n  options.layers.getLayers === 'function' ?\n  /** @type {LayerGroup} */\n  options.layers : new LayerGroup({\n    layers:\n    /** @type {Collection} */\n    options.layers\n  });\n  values[MapProperty.LAYERGROUP] = layerGroup;\n  values[MapProperty.TARGET] = options.target;\n  values[MapProperty.VIEW] = options.view !== undefined ? options.view : new View();\n  var controls;\n\n  if (options.controls !== undefined) {\n    if (Array.isArray(options.controls)) {\n      controls = new Collection(options.controls.slice());\n    } else {\n      assert(typeof\n      /** @type {?} */\n      options.controls.getArray === 'function', 47); // Expected `controls` to be an array or an `import(\"./Collection.js\").Collection`\n\n      controls =\n      /** @type {Collection} */\n      options.controls;\n    }\n  }\n\n  var interactions;\n\n  if (options.interactions !== undefined) {\n    if (Array.isArray(options.interactions)) {\n      interactions = new Collection(options.interactions.slice());\n    } else {\n      assert(typeof\n      /** @type {?} */\n      options.interactions.getArray === 'function', 48); // Expected `interactions` to be an array or an `import(\"./Collection.js\").Collection`\n\n      interactions =\n      /** @type {Collection} */\n      options.interactions;\n    }\n  }\n\n  var overlays;\n\n  if (options.overlays !== undefined) {\n    if (Array.isArray(options.overlays)) {\n      overlays = new Collection(options.overlays.slice());\n    } else {\n      assert(typeof\n      /** @type {?} */\n      options.overlays.getArray === 'function', 49); // Expected `overlays` to be an array or an `import(\"./Collection.js\").Collection`\n\n      overlays = options.overlays;\n    }\n  } else {\n    overlays = new Collection();\n  }\n\n  return {\n    controls: controls,\n    interactions: interactions,\n    keyboardEventTarget: keyboardEventTarget,\n    overlays: overlays,\n    values: values\n  };\n}\n\nexport default PluggableMap;\n/**\n * @param  {Array<import(\"./layer/Base.js\").default>} layers Layers.\n * @return {boolean} Layers have sources that are still loading.\n */\n\nfunction getLoading(layers) {\n  for (var i = 0, ii = layers.length; i < ii; ++i) {\n    var layer = layers[i];\n\n    if (typeof\n    /** @type {?} */\n    layer.getLayers === 'function') {\n      return getLoading(\n      /** @type {LayerGroup} */\n      layer.getLayers().getArray());\n    } else {\n      var source =\n      /** @type {import(\"./layer/Layer.js\").default} */\n      layer.getSource();\n\n      if (source && source.loading) {\n        return true;\n      }\n    }\n  }\n\n  return false;\n}","map":{"version":3,"sources":["../../src/ol/PluggableMap.js"],"names":["super","const","let"],"mappings":"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","sourcesContent":["/**\n * @module ol/PluggableMap\n */\nimport {getUid} from './util.js';\nimport Collection from './Collection.js';\nimport CollectionEventType from './CollectionEventType.js';\nimport MapBrowserEvent from './MapBrowserEvent.js';\nimport MapBrowserEventHandler from './MapBrowserEventHandler.js';\nimport MapBrowserEventType from './MapBrowserEventType.js';\nimport MapEvent from './MapEvent.js';\nimport MapEventType from './MapEventType.js';\nimport MapProperty from './MapProperty.js';\nimport RenderEventType from './render/EventType.js';\nimport BaseObject, {getChangeEventType} from './Object.js';\nimport ObjectEventType from './ObjectEventType.js';\nimport TileQueue from './TileQueue.js';\nimport View from './View.js';\nimport ViewHint from './ViewHint.js';\nimport {assert} from './asserts.js';\nimport {removeNode} from './dom.js';\nimport {listen, unlistenByKey, unlisten} from './events.js';\nimport {stopPropagation} from './events/Event.js';\nimport EventType from './events/EventType.js';\nimport {createEmpty, clone, createOrUpdateEmpty, equals, getForViewAndSize, isEmpty} from './extent.js';\nimport {TRUE} from './functions.js';\nimport {DEVICE_PIXEL_RATIO, TOUCH} from './has.js';\nimport LayerGroup from './layer/Group.js';\nimport {hasArea} from './size.js';\nimport {DROP} from './structs/PriorityQueue.js';\nimport {create as createTransform, apply as applyTransform} from './transform.js';\n\n\n/**\n * State of the current frame. Only `pixelRatio`, `time` and `viewState` should\n * be used in applications.\n * @typedef {Object} FrameState\n * @property {number} pixelRatio The pixel ratio of the frame.\n * @property {number} time The time when rendering of the frame was requested.\n * @property {import(\"./View.js\").State} viewState The state of the current view.\n * @property {boolean} animate\n * @property {import(\"./transform.js\").Transform} coordinateToPixelTransform\n * @property {null|import(\"./extent.js\").Extent} extent\n * @property {import(\"./coordinate.js\").Coordinate} focus\n * @property {number} index\n * @property {Object<string, import(\"./layer/Layer.js\").State>} layerStates\n * @property {Array<import(\"./layer/Layer.js\").State>} layerStatesArray\n * @property {import(\"./transform.js\").Transform} pixelToCoordinateTransform\n * @property {Array<PostRenderFunction>} postRenderFunctions\n * @property {import(\"./size.js\").Size} size\n * @property {!Object<string, boolean>} skippedFeatureUids\n * @property {TileQueue} tileQueue\n * @property {Object<string, Object<string, import(\"./TileRange.js\").default>>} usedTiles\n * @property {Array<number>} viewHints\n * @property {!Object<string, Object<string, boolean>>} wantedTiles\n */\n\n\n/**\n * @typedef {function(PluggableMap, ?FrameState): boolean} PostRenderFunction\n */\n\n\n/**\n * @typedef {Object} AtPixelOptions\n * @property {undefined|function(import(\"./layer/Layer.js\").default): boolean} layerFilter Layer filter\n * function. The filter function will receive one argument, the\n * {@link module:ol/layer/Layer layer-candidate} and it should return a boolean value.\n * Only layers which are visible and for which this function returns `true`\n * will be tested for features. By default, all visible layers will be tested.\n * @property {number} [hitTolerance=0] Hit-detection tolerance in pixels. Pixels\n * inside the radius around the given position will be checked for features. This only\n * works for the canvas renderer and not for WebGL.\n */\n\n\n/**\n * @typedef {Object} MapOptionsInternal\n * @property {Collection<import(\"./control/Control.js\").default>} [controls]\n * @property {Collection<import(\"./interaction/Interaction.js\").default>} [interactions]\n * @property {HTMLElement|Document} keyboardEventTarget\n * @property {Collection<import(\"./Overlay.js\").default>} overlays\n * @property {Object<string, *>} values\n */\n\n\n/**\n * Object literal with config options for the map.\n * @typedef {Object} MapOptions\n * @property {Collection<import(\"./control/Control.js\").default>|Array<import(\"./control/Control.js\").default>} [controls]\n * Controls initially added to the map. If not specified,\n * {@link module:ol/control~defaults} is used.\n * @property {number} [pixelRatio=window.devicePixelRatio] The ratio between\n * physical pixels and device-independent pixels (dips) on the device.\n * @property {Collection<import(\"./interaction/Interaction.js\").default>|Array<import(\"./interaction/Interaction.js\").default>} [interactions]\n * Interactions that are initially added to the map. If not specified,\n * {@link module:ol/interaction~defaults} is used.\n * @property {HTMLElement|Document|string} [keyboardEventTarget] The element to\n * listen to keyboard events on. This determines when the `KeyboardPan` and\n * `KeyboardZoom` interactions trigger. For example, if this option is set to\n * `document` the keyboard interactions will always trigger. If this option is\n * not specified, the element the library listens to keyboard events on is the\n * map target (i.e. the user-provided div for the map). If this is not\n * `document`, the target element needs to be focused for key events to be\n * emitted, requiring that the target element has a `tabindex` attribute.\n * @property {Array<import(\"./layer/Base.js\").default>|Collection<import(\"./layer/Base.js\").default>|LayerGroup} [layers]\n * Layers. If this is not defined, a map with no layers will be rendered. Note\n * that layers are rendered in the order supplied, so if you want, for example,\n * a vector layer to appear on top of a tile layer, it must come after the tile\n * layer.\n * @property {number} [maxTilesLoading=16] Maximum number tiles to load\n * simultaneously.\n * @property {boolean} [loadTilesWhileAnimating=false] When set to `true`, tiles\n * will be loaded during animations. This may improve the user experience, but\n * can also make animations stutter on devices with slow memory.\n * @property {boolean} [loadTilesWhileInteracting=false] When set to `true`,\n * tiles will be loaded while interacting with the map. This may improve the\n * user experience, but can also make map panning and zooming choppy on devices\n * with slow memory.\n * @property {number} [moveTolerance=1] The minimum distance in pixels the\n * cursor must move to be detected as a map move event instead of a click.\n * Increasing this value can make it easier to click on the map.\n * @property {Collection<import(\"./Overlay.js\").default>|Array<import(\"./Overlay.js\").default>} [overlays]\n * Overlays initially added to the map. By default, no overlays are added.\n * @property {HTMLElement|string} [target] The container for the map, either the\n * element itself or the `id` of the element. If not specified at construction\n * time, {@link module:ol/Map~Map#setTarget} must be called for the map to be\n * rendered.\n * @property {View} [view] The map's view.  No layer sources will be\n * fetched unless this is specified at construction time or through\n * {@link module:ol/Map~Map#setView}.\n */\n\n\n/**\n * @fires import(\"./MapBrowserEvent.js\").MapBrowserEvent\n * @fires import(\"./MapEvent.js\").MapEvent\n * @fires module:ol/render/Event~RenderEvent#postcompose\n * @fires module:ol/render/Event~RenderEvent#precompose\n * @fires module:ol/render/Event~RenderEvent#rendercomplete\n * @api\n */\nclass PluggableMap extends BaseObject {\n\n  /**\n   * @param {MapOptions} options Map options.\n   */\n  constructor(options) {\n\n    super();\n\n    const optionsInternal = createOptionsInternal(options);\n\n    /**\n     * @type {number}\n     * @private\n     */\n    this.maxTilesLoading_ = options.maxTilesLoading !== undefined ? options.maxTilesLoading : 16;\n\n    /**\n     * @type {boolean}\n     * @private\n     */\n    this.loadTilesWhileAnimating_ =\n        options.loadTilesWhileAnimating !== undefined ?\n          options.loadTilesWhileAnimating : false;\n\n    /**\n     * @type {boolean}\n     * @private\n     */\n    this.loadTilesWhileInteracting_ =\n        options.loadTilesWhileInteracting !== undefined ?\n          options.loadTilesWhileInteracting : false;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.pixelRatio_ = options.pixelRatio !== undefined ?\n      options.pixelRatio : DEVICE_PIXEL_RATIO;\n\n    /**\n     * @private\n     * @type {number|undefined}\n     */\n    this.animationDelayKey_;\n\n    /**\n     * @private\n     */\n    this.animationDelay_ = function() {\n      this.animationDelayKey_ = undefined;\n      this.renderFrame_.call(this, Date.now());\n    }.bind(this);\n\n    /**\n     * @private\n     * @type {import(\"./transform.js\").Transform}\n     */\n    this.coordinateToPixelTransform_ = createTransform();\n\n    /**\n     * @private\n     * @type {import(\"./transform.js\").Transform}\n     */\n    this.pixelToCoordinateTransform_ = createTransform();\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.frameIndex_ = 0;\n\n    /**\n     * @private\n     * @type {?FrameState}\n     */\n    this.frameState_ = null;\n\n    /**\n     * The extent at the previous 'moveend' event.\n     * @private\n     * @type {import(\"./extent.js\").Extent}\n     */\n    this.previousExtent_ = null;\n\n    /**\n     * @private\n     * @type {?import(\"./events.js\").EventsKey}\n     */\n    this.viewPropertyListenerKey_ = null;\n\n    /**\n     * @private\n     * @type {?import(\"./events.js\").EventsKey}\n     */\n    this.viewChangeListenerKey_ = null;\n\n    /**\n     * @private\n     * @type {Array<import(\"./events.js\").EventsKey>}\n     */\n    this.layerGroupPropertyListenerKeys_ = null;\n\n    /**\n     * @private\n     * @type {!HTMLElement}\n     */\n    this.viewport_ = document.createElement('div');\n    this.viewport_.className = 'ol-viewport' + (TOUCH ? ' ol-touch' : '');\n    this.viewport_.style.position = 'relative';\n    this.viewport_.style.overflow = 'hidden';\n    this.viewport_.style.width = '100%';\n    this.viewport_.style.height = '100%';\n    // prevent page zoom on IE >= 10 browsers\n    this.viewport_.style.msTouchAction = 'none';\n    this.viewport_.style.touchAction = 'none';\n\n    /**\n     * @private\n     * @type {!HTMLElement}\n     */\n    this.overlayContainer_ = document.createElement('div');\n    this.overlayContainer_.className = 'ol-overlaycontainer';\n    this.viewport_.appendChild(this.overlayContainer_);\n\n    /**\n     * @private\n     * @type {!HTMLElement}\n     */\n    this.overlayContainerStopEvent_ = document.createElement('div');\n    this.overlayContainerStopEvent_.className = 'ol-overlaycontainer-stopevent';\n    const overlayEvents = [\n      EventType.CLICK,\n      EventType.DBLCLICK,\n      EventType.MOUSEDOWN,\n      EventType.TOUCHSTART,\n      EventType.MSPOINTERDOWN,\n      MapBrowserEventType.POINTERDOWN,\n      EventType.MOUSEWHEEL,\n      EventType.WHEEL\n    ];\n    for (let i = 0, ii = overlayEvents.length; i < ii; ++i) {\n      listen(this.overlayContainerStopEvent_, overlayEvents[i], stopPropagation);\n    }\n    this.viewport_.appendChild(this.overlayContainerStopEvent_);\n\n    /**\n     * @private\n     * @type {MapBrowserEventHandler}\n     */\n    this.mapBrowserEventHandler_ = new MapBrowserEventHandler(this, options.moveTolerance);\n    for (const key in MapBrowserEventType) {\n      listen(this.mapBrowserEventHandler_, MapBrowserEventType[key],\n        this.handleMapBrowserEvent, this);\n    }\n\n    /**\n     * @private\n     * @type {HTMLElement|Document}\n     */\n    this.keyboardEventTarget_ = optionsInternal.keyboardEventTarget;\n\n    /**\n     * @private\n     * @type {Array<import(\"./events.js\").EventsKey>}\n     */\n    this.keyHandlerKeys_ = null;\n\n    listen(this.viewport_, EventType.CONTEXTMENU, this.handleBrowserEvent, this);\n    listen(this.viewport_, EventType.WHEEL, this.handleBrowserEvent, this);\n    listen(this.viewport_, EventType.MOUSEWHEEL, this.handleBrowserEvent, this);\n\n    /**\n     * @type {Collection<import(\"./control/Control.js\").default>}\n     * @protected\n     */\n    this.controls = optionsInternal.controls || new Collection();\n\n    /**\n     * @type {Collection<import(\"./interaction/Interaction.js\").default>}\n     * @protected\n     */\n    this.interactions = optionsInternal.interactions || new Collection();\n\n    /**\n     * @type {Collection<import(\"./Overlay.js\").default>}\n     * @private\n     */\n    this.overlays_ = optionsInternal.overlays;\n\n    /**\n     * A lookup of overlays by id.\n     * @private\n     * @type {Object<string, import(\"./Overlay.js\").default>}\n     */\n    this.overlayIdIndex_ = {};\n\n    /**\n     * @type {import(\"./renderer/Map.js\").default}\n     * @private\n     */\n    this.renderer_ = this.createRenderer();\n\n    /**\n     * @type {function(Event)|undefined}\n     * @private\n     */\n    this.handleResize_;\n\n    /**\n     * @private\n     * @type {import(\"./coordinate.js\").Coordinate}\n     */\n    this.focus_ = null;\n\n    /**\n     * @private\n     * @type {!Array<PostRenderFunction>}\n     */\n    this.postRenderFunctions_ = [];\n\n    /**\n     * @private\n     * @type {TileQueue}\n     */\n    this.tileQueue_ = new TileQueue(\n      this.getTilePriority.bind(this),\n      this.handleTileChange_.bind(this));\n\n    /**\n     * Uids of features to skip at rendering time.\n     * @type {Object<string, boolean>}\n     * @private\n     */\n    this.skippedFeatureUids_ = {};\n\n    listen(\n      this, getChangeEventType(MapProperty.LAYERGROUP),\n      this.handleLayerGroupChanged_, this);\n    listen(this, getChangeEventType(MapProperty.VIEW),\n      this.handleViewChanged_, this);\n    listen(this, getChangeEventType(MapProperty.SIZE),\n      this.handleSizeChanged_, this);\n    listen(this, getChangeEventType(MapProperty.TARGET),\n      this.handleTargetChanged_, this);\n\n    // setProperties will trigger the rendering of the map if the map\n    // is \"defined\" already.\n    this.setProperties(optionsInternal.values);\n\n    this.controls.forEach(\n      /**\n       * @param {import(\"./control/Control.js\").default} control Control.\n       * @this {PluggableMap}\n       */\n      (function(control) {\n        control.setMap(this);\n      }).bind(this));\n\n    listen(this.controls, CollectionEventType.ADD,\n      /**\n       * @param {import(\"./Collection.js\").CollectionEvent} event CollectionEvent.\n       */\n      function(event) {\n        event.element.setMap(this);\n      }, this);\n\n    listen(this.controls, CollectionEventType.REMOVE,\n      /**\n       * @param {import(\"./Collection.js\").CollectionEvent} event CollectionEvent.\n       */\n      function(event) {\n        event.element.setMap(null);\n      }, this);\n\n    this.interactions.forEach(\n      /**\n       * @param {import(\"./interaction/Interaction.js\").default} interaction Interaction.\n       * @this {PluggableMap}\n       */\n      (function(interaction) {\n        interaction.setMap(this);\n      }).bind(this));\n\n    listen(this.interactions, CollectionEventType.ADD,\n      /**\n       * @param {import(\"./Collection.js\").CollectionEvent} event CollectionEvent.\n       */\n      function(event) {\n        event.element.setMap(this);\n      }, this);\n\n    listen(this.interactions, CollectionEventType.REMOVE,\n      /**\n       * @param {import(\"./Collection.js\").CollectionEvent} event CollectionEvent.\n       */\n      function(event) {\n        event.element.setMap(null);\n      }, this);\n\n    this.overlays_.forEach(this.addOverlayInternal_.bind(this));\n\n    listen(this.overlays_, CollectionEventType.ADD,\n      /**\n       * @param {import(\"./Collection.js\").CollectionEvent} event CollectionEvent.\n       */\n      function(event) {\n        this.addOverlayInternal_(/** @type {import(\"./Overlay.js\").default} */ (event.element));\n      }, this);\n\n    listen(this.overlays_, CollectionEventType.REMOVE,\n      /**\n       * @param {import(\"./Collection.js\").CollectionEvent} event CollectionEvent.\n       */\n      function(event) {\n        const overlay = /** @type {import(\"./Overlay.js\").default} */ (event.element);\n        const id = overlay.getId();\n        if (id !== undefined) {\n          delete this.overlayIdIndex_[id.toString()];\n        }\n        event.element.setMap(null);\n      }, this);\n\n  }\n\n  /**\n   * @abstract\n   * @return {import(\"./renderer/Map.js\").default} The map renderer\n   */\n  createRenderer() {\n    throw new Error('Use a map type that has a createRenderer method');\n  }\n\n  /**\n   * Add the given control to the map.\n   * @param {import(\"./control/Control.js\").default} control Control.\n   * @api\n   */\n  addControl(control) {\n    this.getControls().push(control);\n  }\n\n  /**\n   * Add the given interaction to the map.\n   * @param {import(\"./interaction/Interaction.js\").default} interaction Interaction to add.\n   * @api\n   */\n  addInteraction(interaction) {\n    this.getInteractions().push(interaction);\n  }\n\n  /**\n   * Adds the given layer to the top of this map. If you want to add a layer\n   * elsewhere in the stack, use `getLayers()` and the methods available on\n   * {@link module:ol/Collection~Collection}.\n   * @param {import(\"./layer/Base.js\").default} layer Layer.\n   * @api\n   */\n  addLayer(layer) {\n    const layers = this.getLayerGroup().getLayers();\n    layers.push(layer);\n  }\n\n  /**\n   * Add the given overlay to the map.\n   * @param {import(\"./Overlay.js\").default} overlay Overlay.\n   * @api\n   */\n  addOverlay(overlay) {\n    this.getOverlays().push(overlay);\n  }\n\n  /**\n   * This deals with map's overlay collection changes.\n   * @param {import(\"./Overlay.js\").default} overlay Overlay.\n   * @private\n   */\n  addOverlayInternal_(overlay) {\n    const id = overlay.getId();\n    if (id !== undefined) {\n      this.overlayIdIndex_[id.toString()] = overlay;\n    }\n    overlay.setMap(this);\n  }\n\n  /**\n   *\n   * @inheritDoc\n   */\n  disposeInternal() {\n    this.mapBrowserEventHandler_.dispose();\n    unlisten(this.viewport_, EventType.CONTEXTMENU, this.handleBrowserEvent, this);\n    unlisten(this.viewport_, EventType.WHEEL, this.handleBrowserEvent, this);\n    unlisten(this.viewport_, EventType.MOUSEWHEEL, this.handleBrowserEvent, this);\n    if (this.handleResize_ !== undefined) {\n      removeEventListener(EventType.RESIZE, this.handleResize_, false);\n      this.handleResize_ = undefined;\n    }\n    if (this.animationDelayKey_) {\n      cancelAnimationFrame(this.animationDelayKey_);\n      this.animationDelayKey_ = undefined;\n    }\n    this.setTarget(null);\n    super.disposeInternal();\n  }\n\n  /**\n   * Detect features that intersect a pixel on the viewport, and execute a\n   * callback with each intersecting feature. Layers included in the detection can\n   * be configured through the `layerFilter` option in `opt_options`.\n   * @param {import(\"./pixel.js\").Pixel} pixel Pixel.\n   * @param {function(this: S, import(\"./Feature.js\").FeatureLike,\n   *     import(\"./layer/Layer.js\").default): T} callback Feature callback. The callback will be\n   *     called with two arguments. The first argument is one\n   *     {@link module:ol/Feature feature} or\n   *     {@link module:ol/render/Feature render feature} at the pixel, the second is\n   *     the {@link module:ol/layer/Layer layer} of the feature and will be null for\n   *     unmanaged layers. To stop detection, callback functions can return a\n   *     truthy value.\n   * @param {AtPixelOptions=} opt_options Optional options.\n   * @return {T|undefined} Callback result, i.e. the return value of last\n   * callback execution, or the first truthy callback return value.\n   * @template S,T\n   * @api\n   */\n  forEachFeatureAtPixel(pixel, callback, opt_options) {\n    if (!this.frameState_) {\n      return;\n    }\n    const coordinate = this.getCoordinateFromPixel(pixel);\n    opt_options = opt_options !== undefined ? opt_options :\n      /** @type {AtPixelOptions} */ ({});\n    const hitTolerance = opt_options.hitTolerance !== undefined ?\n      opt_options.hitTolerance * this.frameState_.pixelRatio : 0;\n    const layerFilter = opt_options.layerFilter !== undefined ?\n      opt_options.layerFilter : TRUE;\n    return this.renderer_.forEachFeatureAtCoordinate(\n      coordinate, this.frameState_, hitTolerance, callback, null,\n      layerFilter, null);\n  }\n\n  /**\n   * Get all features that intersect a pixel on the viewport.\n   * @param {import(\"./pixel.js\").Pixel} pixel Pixel.\n   * @param {AtPixelOptions=} opt_options Optional options.\n   * @return {Array<import(\"./Feature.js\").FeatureLike>} The detected features or\n   * `null` if none were found.\n   * @api\n   */\n  getFeaturesAtPixel(pixel, opt_options) {\n    let features = null;\n    this.forEachFeatureAtPixel(pixel, function(feature) {\n      if (!features) {\n        features = [];\n      }\n      features.push(feature);\n    }, opt_options);\n    return features;\n  }\n\n  /**\n   * Detect layers that have a color value at a pixel on the viewport, and\n   * execute a callback with each matching layer. Layers included in the\n   * detection can be configured through `opt_layerFilter`.\n   * @param {import(\"./pixel.js\").Pixel} pixel Pixel.\n   * @param {function(this: S, import(\"./layer/Layer.js\").default, (Uint8ClampedArray|Uint8Array)): T} callback\n   *     Layer callback. This callback will receive two arguments: first is the\n   *     {@link module:ol/layer/Layer layer}, second argument is an array representing\n   *     [R, G, B, A] pixel values (0 - 255) and will be `null` for layer types\n   *     that do not currently support this argument. To stop detection, callback\n   *     functions can return a truthy value.\n   * @param {AtPixelOptions=} opt_options Configuration options.\n   * @return {T|undefined} Callback result, i.e. the return value of last\n   * callback execution, or the first truthy callback return value.\n   * @template S,T\n   * @api\n   */\n  forEachLayerAtPixel(pixel, callback, opt_options) {\n    if (!this.frameState_) {\n      return;\n    }\n    const options = opt_options || /** @type {AtPixelOptions} */ ({});\n    const hitTolerance = options.hitTolerance !== undefined ?\n      opt_options.hitTolerance * this.frameState_.pixelRatio : 0;\n    const layerFilter = options.layerFilter || TRUE;\n    return this.renderer_.forEachLayerAtPixel(\n      pixel, this.frameState_, hitTolerance, callback, null, layerFilter, null);\n  }\n\n  /**\n   * Detect if features intersect a pixel on the viewport. Layers included in the\n   * detection can be configured through `opt_layerFilter`.\n   * @param {import(\"./pixel.js\").Pixel} pixel Pixel.\n   * @param {AtPixelOptions=} opt_options Optional options.\n   * @return {boolean} Is there a feature at the given pixel?\n   * @template U\n   * @api\n   */\n  hasFeatureAtPixel(pixel, opt_options) {\n    if (!this.frameState_) {\n      return false;\n    }\n    const coordinate = this.getCoordinateFromPixel(pixel);\n    opt_options = opt_options !== undefined ? opt_options :\n      /** @type {AtPixelOptions} */ ({});\n    const layerFilter = opt_options.layerFilter !== undefined ? opt_options.layerFilter : TRUE;\n    const hitTolerance = opt_options.hitTolerance !== undefined ?\n      opt_options.hitTolerance * this.frameState_.pixelRatio : 0;\n    return this.renderer_.hasFeatureAtCoordinate(\n      coordinate, this.frameState_, hitTolerance, layerFilter, null);\n  }\n\n  /**\n   * Returns the coordinate in view projection for a browser event.\n   * @param {Event} event Event.\n   * @return {import(\"./coordinate.js\").Coordinate} Coordinate.\n   * @api\n   */\n  getEventCoordinate(event) {\n    return this.getCoordinateFromPixel(this.getEventPixel(event));\n  }\n\n  /**\n   * Returns the map pixel position for a browser event relative to the viewport.\n   * @param {Event|TouchEvent} event Event.\n   * @return {import(\"./pixel.js\").Pixel} Pixel.\n   * @api\n   */\n  getEventPixel(event) {\n    const viewportPosition = this.viewport_.getBoundingClientRect();\n    const eventPosition = 'changedTouches' in event ?\n      /** @type {TouchEvent} */ (event).changedTouches[0] :\n      /** @type {MouseEvent} */ (event);\n\n    return [\n      eventPosition.clientX - viewportPosition.left,\n      eventPosition.clientY - viewportPosition.top\n    ];\n  }\n\n  /**\n   * Get the target in which this map is rendered.\n   * Note that this returns what is entered as an option or in setTarget:\n   * if that was an element, it returns an element; if a string, it returns that.\n   * @return {HTMLElement|string|undefined} The Element or id of the Element that the\n   *     map is rendered in.\n   * @observable\n   * @api\n   */\n  getTarget() {\n    return /** @type {HTMLElement|string|undefined} */ (this.get(MapProperty.TARGET));\n  }\n\n  /**\n   * Get the DOM element into which this map is rendered. In contrast to\n   * `getTarget` this method always return an `Element`, or `null` if the\n   * map has no target.\n   * @return {HTMLElement} The element that the map is rendered in.\n   * @api\n   */\n  getTargetElement() {\n    const target = this.getTarget();\n    if (target !== undefined) {\n      return typeof target === 'string' ? document.getElementById(target) : target;\n    } else {\n      return null;\n    }\n  }\n\n  /**\n   * Get the coordinate for a given pixel.  This returns a coordinate in the\n   * map view projection.\n   * @param {import(\"./pixel.js\").Pixel} pixel Pixel position in the map viewport.\n   * @return {import(\"./coordinate.js\").Coordinate} The coordinate for the pixel position.\n   * @api\n   */\n  getCoordinateFromPixel(pixel) {\n    const frameState = this.frameState_;\n    if (!frameState) {\n      return null;\n    } else {\n      return applyTransform(frameState.pixelToCoordinateTransform, pixel.slice());\n    }\n  }\n\n  /**\n   * Get the map controls. Modifying this collection changes the controls\n   * associated with the map.\n   * @return {Collection<import(\"./control/Control.js\").default>} Controls.\n   * @api\n   */\n  getControls() {\n    return this.controls;\n  }\n\n  /**\n   * Get the map overlays. Modifying this collection changes the overlays\n   * associated with the map.\n   * @return {Collection<import(\"./Overlay.js\").default>} Overlays.\n   * @api\n   */\n  getOverlays() {\n    return this.overlays_;\n  }\n\n  /**\n   * Get an overlay by its identifier (the value returned by overlay.getId()).\n   * Note that the index treats string and numeric identifiers as the same. So\n   * `map.getOverlayById(2)` will return an overlay with id `'2'` or `2`.\n   * @param {string|number} id Overlay identifier.\n   * @return {import(\"./Overlay.js\").default} Overlay.\n   * @api\n   */\n  getOverlayById(id) {\n    const overlay = this.overlayIdIndex_[id.toString()];\n    return overlay !== undefined ? overlay : null;\n  }\n\n  /**\n   * Get the map interactions. Modifying this collection changes the interactions\n   * associated with the map.\n   *\n   * Interactions are used for e.g. pan, zoom and rotate.\n   * @return {Collection<import(\"./interaction/Interaction.js\").default>} Interactions.\n   * @api\n   */\n  getInteractions() {\n    return this.interactions;\n  }\n\n  /**\n   * Get the layergroup associated with this map.\n   * @return {LayerGroup} A layer group containing the layers in this map.\n   * @observable\n   * @api\n   */\n  getLayerGroup() {\n    return (\n      /** @type {LayerGroup} */ (this.get(MapProperty.LAYERGROUP))\n    );\n  }\n\n  /**\n   * Get the collection of layers associated with this map.\n   * @return {!Collection<import(\"./layer/Base.js\").default>} Layers.\n   * @api\n   */\n  getLayers() {\n    const layers = this.getLayerGroup().getLayers();\n    return layers;\n  }\n\n  /**\n   * Get the pixel for a coordinate.  This takes a coordinate in the map view\n   * projection and returns the corresponding pixel.\n   * @param {import(\"./coordinate.js\").Coordinate} coordinate A map coordinate.\n   * @return {import(\"./pixel.js\").Pixel} A pixel position in the map viewport.\n   * @api\n   */\n  getPixelFromCoordinate(coordinate) {\n    const frameState = this.frameState_;\n    if (!frameState) {\n      return null;\n    } else {\n      return applyTransform(frameState.coordinateToPixelTransform, coordinate.slice(0, 2));\n    }\n  }\n\n  /**\n   * Get the map renderer.\n   * @return {import(\"./renderer/Map.js\").default} Renderer\n   */\n  getRenderer() {\n    return this.renderer_;\n  }\n\n  /**\n   * Get the size of this map.\n   * @return {import(\"./size.js\").Size|undefined} The size in pixels of the map in the DOM.\n   * @observable\n   * @api\n   */\n  getSize() {\n    return (\n      /** @type {import(\"./size.js\").Size|undefined} */ (this.get(MapProperty.SIZE))\n    );\n  }\n\n  /**\n   * Get the view associated with this map. A view manages properties such as\n   * center and resolution.\n   * @return {View} The view that controls this map.\n   * @observable\n   * @api\n   */\n  getView() {\n    return (\n      /** @type {View} */ (this.get(MapProperty.VIEW))\n    );\n  }\n\n  /**\n   * Get the element that serves as the map viewport.\n   * @return {HTMLElement} Viewport.\n   * @api\n   */\n  getViewport() {\n    return this.viewport_;\n  }\n\n  /**\n   * Get the element that serves as the container for overlays.  Elements added to\n   * this container will let mousedown and touchstart events through to the map,\n   * so clicks and gestures on an overlay will trigger {@link module:ol/MapBrowserEvent~MapBrowserEvent}\n   * events.\n   * @return {!HTMLElement} The map's overlay container.\n   */\n  getOverlayContainer() {\n    return this.overlayContainer_;\n  }\n\n  /**\n   * Get the element that serves as a container for overlays that don't allow\n   * event propagation. Elements added to this container won't let mousedown and\n   * touchstart events through to the map, so clicks and gestures on an overlay\n   * don't trigger any {@link module:ol/MapBrowserEvent~MapBrowserEvent}.\n   * @return {!HTMLElement} The map's overlay container that stops events.\n   */\n  getOverlayContainerStopEvent() {\n    return this.overlayContainerStopEvent_;\n  }\n\n  /**\n   * @param {import(\"./Tile.js\").default} tile Tile.\n   * @param {string} tileSourceKey Tile source key.\n   * @param {import(\"./coordinate.js\").Coordinate} tileCenter Tile center.\n   * @param {number} tileResolution Tile resolution.\n   * @return {number} Tile priority.\n   */\n  getTilePriority(tile, tileSourceKey, tileCenter, tileResolution) {\n    // Filter out tiles at higher zoom levels than the current zoom level, or that\n    // are outside the visible extent.\n    const frameState = this.frameState_;\n    if (!frameState || !(tileSourceKey in frameState.wantedTiles)) {\n      return DROP;\n    }\n    if (!frameState.wantedTiles[tileSourceKey][tile.getKey()]) {\n      return DROP;\n    }\n    // Prioritize the highest zoom level tiles closest to the focus.\n    // Tiles at higher zoom levels are prioritized using Math.log(tileResolution).\n    // Within a zoom level, tiles are prioritized by the distance in pixels\n    // between the center of the tile and the focus.  The factor of 65536 means\n    // that the prioritization should behave as desired for tiles up to\n    // 65536 * Math.log(2) = 45426 pixels from the focus.\n    const deltaX = tileCenter[0] - frameState.focus[0];\n    const deltaY = tileCenter[1] - frameState.focus[1];\n    return 65536 * Math.log(tileResolution) +\n        Math.sqrt(deltaX * deltaX + deltaY * deltaY) / tileResolution;\n  }\n\n  /**\n   * @param {Event} browserEvent Browser event.\n   * @param {string=} opt_type Type.\n   */\n  handleBrowserEvent(browserEvent, opt_type) {\n    const type = opt_type || browserEvent.type;\n    const mapBrowserEvent = new MapBrowserEvent(type, this, browserEvent);\n    this.handleMapBrowserEvent(mapBrowserEvent);\n  }\n\n  /**\n   * @param {MapBrowserEvent} mapBrowserEvent The event to handle.\n   */\n  handleMapBrowserEvent(mapBrowserEvent) {\n    if (!this.frameState_) {\n      // With no view defined, we cannot translate pixels into geographical\n      // coordinates so interactions cannot be used.\n      return;\n    }\n    this.focus_ = mapBrowserEvent.coordinate;\n    mapBrowserEvent.frameState = this.frameState_;\n    const interactionsArray = this.getInteractions().getArray();\n    if (this.dispatchEvent(mapBrowserEvent) !== false) {\n      for (let i = interactionsArray.length - 1; i >= 0; i--) {\n        const interaction = interactionsArray[i];\n        if (!interaction.getActive()) {\n          continue;\n        }\n        const cont = interaction.handleEvent(mapBrowserEvent);\n        if (!cont) {\n          break;\n        }\n      }\n    }\n  }\n\n  /**\n   * @protected\n   */\n  handlePostRender() {\n\n    const frameState = this.frameState_;\n\n    // Manage the tile queue\n    // Image loads are expensive and a limited resource, so try to use them\n    // efficiently:\n    // * When the view is static we allow a large number of parallel tile loads\n    //   to complete the frame as quickly as possible.\n    // * When animating or interacting, image loads can cause janks, so we reduce\n    //   the maximum number of loads per frame and limit the number of parallel\n    //   tile loads to remain reactive to view changes and to reduce the chance of\n    //   loading tiles that will quickly disappear from view.\n    const tileQueue = this.tileQueue_;\n    if (!tileQueue.isEmpty()) {\n      let maxTotalLoading = this.maxTilesLoading_;\n      let maxNewLoads = maxTotalLoading;\n      if (frameState) {\n        const hints = frameState.viewHints;\n        if (hints[ViewHint.ANIMATING]) {\n          maxTotalLoading = this.loadTilesWhileAnimating_ ? 8 : 0;\n          maxNewLoads = 2;\n        }\n        if (hints[ViewHint.INTERACTING]) {\n          maxTotalLoading = this.loadTilesWhileInteracting_ ? 8 : 0;\n          maxNewLoads = 2;\n        }\n      }\n      if (tileQueue.getTilesLoading() < maxTotalLoading) {\n        tileQueue.reprioritize(); // FIXME only call if view has changed\n        tileQueue.loadMoreTiles(maxTotalLoading, maxNewLoads);\n      }\n    }\n    if (frameState && this.hasListener(RenderEventType.RENDERCOMPLETE) && !frameState.animate &&\n        !this.tileQueue_.getTilesLoading() && !getLoading(this.getLayers().getArray())) {\n      this.renderer_.dispatchRenderEvent(RenderEventType.RENDERCOMPLETE, frameState);\n    }\n\n    const postRenderFunctions = this.postRenderFunctions_;\n    for (let i = 0, ii = postRenderFunctions.length; i < ii; ++i) {\n      postRenderFunctions[i](this, frameState);\n    }\n    postRenderFunctions.length = 0;\n  }\n\n  /**\n   * @private\n   */\n  handleSizeChanged_() {\n    this.render();\n  }\n\n  /**\n   * @private\n   */\n  handleTargetChanged_() {\n    // target may be undefined, null, a string or an Element.\n    // If it's a string we convert it to an Element before proceeding.\n    // If it's not now an Element we remove the viewport from the DOM.\n    // If it's an Element we append the viewport element to it.\n\n    let targetElement;\n    if (this.getTarget()) {\n      targetElement = this.getTargetElement();\n    }\n\n    if (this.keyHandlerKeys_) {\n      for (let i = 0, ii = this.keyHandlerKeys_.length; i < ii; ++i) {\n        unlistenByKey(this.keyHandlerKeys_[i]);\n      }\n      this.keyHandlerKeys_ = null;\n    }\n\n    if (!targetElement) {\n      this.renderer_.removeLayerRenderers();\n      removeNode(this.viewport_);\n      if (this.handleResize_ !== undefined) {\n        removeEventListener(EventType.RESIZE, this.handleResize_, false);\n        this.handleResize_ = undefined;\n      }\n    } else {\n      targetElement.appendChild(this.viewport_);\n\n      const keyboardEventTarget = !this.keyboardEventTarget_ ?\n        targetElement : this.keyboardEventTarget_;\n      this.keyHandlerKeys_ = [\n        listen(keyboardEventTarget, EventType.KEYDOWN, this.handleBrowserEvent, this),\n        listen(keyboardEventTarget, EventType.KEYPRESS, this.handleBrowserEvent, this)\n      ];\n\n      if (!this.handleResize_) {\n        this.handleResize_ = this.updateSize.bind(this);\n        window.addEventListener(EventType.RESIZE, this.handleResize_, false);\n      }\n    }\n\n    this.updateSize();\n    // updateSize calls setSize, so no need to call this.render\n    // ourselves here.\n  }\n\n  /**\n   * @private\n   */\n  handleTileChange_() {\n    this.render();\n  }\n\n  /**\n   * @private\n   */\n  handleViewPropertyChanged_() {\n    this.render();\n  }\n\n  /**\n   * @private\n   */\n  handleViewChanged_() {\n    if (this.viewPropertyListenerKey_) {\n      unlistenByKey(this.viewPropertyListenerKey_);\n      this.viewPropertyListenerKey_ = null;\n    }\n    if (this.viewChangeListenerKey_) {\n      unlistenByKey(this.viewChangeListenerKey_);\n      this.viewChangeListenerKey_ = null;\n    }\n    const view = this.getView();\n    if (view) {\n      this.viewport_.setAttribute('data-view', getUid(view));\n      this.viewPropertyListenerKey_ = listen(\n        view, ObjectEventType.PROPERTYCHANGE,\n        this.handleViewPropertyChanged_, this);\n      this.viewChangeListenerKey_ = listen(\n        view, EventType.CHANGE,\n        this.handleViewPropertyChanged_, this);\n    }\n    this.render();\n  }\n\n  /**\n   * @private\n   */\n  handleLayerGroupChanged_() {\n    if (this.layerGroupPropertyListenerKeys_) {\n      this.layerGroupPropertyListenerKeys_.forEach(unlistenByKey);\n      this.layerGroupPropertyListenerKeys_ = null;\n    }\n    const layerGroup = this.getLayerGroup();\n    if (layerGroup) {\n      this.layerGroupPropertyListenerKeys_ = [\n        listen(\n          layerGroup, ObjectEventType.PROPERTYCHANGE,\n          this.render, this),\n        listen(\n          layerGroup, EventType.CHANGE,\n          this.render, this)\n      ];\n    }\n    this.render();\n  }\n\n  /**\n   * @return {boolean} Is rendered.\n   */\n  isRendered() {\n    return !!this.frameState_;\n  }\n\n  /**\n   * Requests an immediate render in a synchronous manner.\n   * @api\n   */\n  renderSync() {\n    if (this.animationDelayKey_) {\n      cancelAnimationFrame(this.animationDelayKey_);\n    }\n    this.animationDelay_();\n  }\n\n  /**\n   * Request a map rendering (at the next animation frame).\n   * @api\n   */\n  render() {\n    if (this.animationDelayKey_ === undefined) {\n      this.animationDelayKey_ = requestAnimationFrame(this.animationDelay_);\n    }\n  }\n\n  /**\n   * Remove the given control from the map.\n   * @param {import(\"./control/Control.js\").default} control Control.\n   * @return {import(\"./control/Control.js\").default|undefined} The removed control (or undefined\n   *     if the control was not found).\n   * @api\n   */\n  removeControl(control) {\n    return this.getControls().remove(control);\n  }\n\n  /**\n   * Remove the given interaction from the map.\n   * @param {import(\"./interaction/Interaction.js\").default} interaction Interaction to remove.\n   * @return {import(\"./interaction/Interaction.js\").default|undefined} The removed interaction (or\n   *     undefined if the interaction was not found).\n   * @api\n   */\n  removeInteraction(interaction) {\n    return this.getInteractions().remove(interaction);\n  }\n\n  /**\n   * Removes the given layer from the map.\n   * @param {import(\"./layer/Base.js\").default} layer Layer.\n   * @return {import(\"./layer/Base.js\").default|undefined} The removed layer (or undefined if the\n   *     layer was not found).\n   * @api\n   */\n  removeLayer(layer) {\n    const layers = this.getLayerGroup().getLayers();\n    return layers.remove(layer);\n  }\n\n  /**\n   * Remove the given overlay from the map.\n   * @param {import(\"./Overlay.js\").default} overlay Overlay.\n   * @return {import(\"./Overlay.js\").default|undefined} The removed overlay (or undefined\n   *     if the overlay was not found).\n   * @api\n   */\n  removeOverlay(overlay) {\n    return this.getOverlays().remove(overlay);\n  }\n\n  /**\n   * @param {number} time Time.\n   * @private\n   */\n  renderFrame_(time) {\n    let viewState;\n\n    const size = this.getSize();\n    const view = this.getView();\n    const extent = createEmpty();\n    const previousFrameState = this.frameState_;\n    /** @type {?FrameState} */\n    let frameState = null;\n    if (size !== undefined && hasArea(size) && view && view.isDef()) {\n      const viewHints = view.getHints(this.frameState_ ? this.frameState_.viewHints : undefined);\n      const layerStatesArray = this.getLayerGroup().getLayerStatesArray();\n      const layerStates = {};\n      for (let i = 0, ii = layerStatesArray.length; i < ii; ++i) {\n        layerStates[getUid(layerStatesArray[i].layer)] = layerStatesArray[i];\n      }\n      viewState = view.getState(this.pixelRatio_);\n      frameState = /** @type {FrameState} */ ({\n        animate: false,\n        coordinateToPixelTransform: this.coordinateToPixelTransform_,\n        extent: extent,\n        focus: this.focus_ ? this.focus_ : viewState.center,\n        index: this.frameIndex_++,\n        layerStates: layerStates,\n        layerStatesArray: layerStatesArray,\n        pixelRatio: this.pixelRatio_,\n        pixelToCoordinateTransform: this.pixelToCoordinateTransform_,\n        postRenderFunctions: [],\n        size: size,\n        skippedFeatureUids: this.skippedFeatureUids_,\n        tileQueue: this.tileQueue_,\n        time: time,\n        usedTiles: {},\n        viewState: viewState,\n        viewHints: viewHints,\n        wantedTiles: {}\n      });\n    }\n\n    if (frameState) {\n      frameState.extent = getForViewAndSize(viewState.center,\n        viewState.resolution, viewState.rotation, frameState.size, extent);\n    }\n\n    this.frameState_ = frameState;\n    this.renderer_.renderFrame(frameState);\n\n    if (frameState) {\n      if (frameState.animate) {\n        this.render();\n      }\n      Array.prototype.push.apply(this.postRenderFunctions_, frameState.postRenderFunctions);\n\n      if (previousFrameState) {\n        const moveStart = !this.previousExtent_ ||\n                    (!isEmpty(this.previousExtent_) &&\n                    !equals(frameState.extent, this.previousExtent_));\n        if (moveStart) {\n          this.dispatchEvent(\n            new MapEvent(MapEventType.MOVESTART, this, previousFrameState));\n          this.previousExtent_ = createOrUpdateEmpty(this.previousExtent_);\n        }\n      }\n\n      const idle = this.previousExtent_ &&\n          !frameState.viewHints[ViewHint.ANIMATING] &&\n          !frameState.viewHints[ViewHint.INTERACTING] &&\n          !equals(frameState.extent, this.previousExtent_);\n\n      if (idle) {\n        this.dispatchEvent(new MapEvent(MapEventType.MOVEEND, this, frameState));\n        clone(frameState.extent, this.previousExtent_);\n      }\n    }\n\n    this.dispatchEvent(new MapEvent(MapEventType.POSTRENDER, this, frameState));\n\n    setTimeout(this.handlePostRender.bind(this), 0);\n\n  }\n\n  /**\n   * Sets the layergroup of this map.\n   * @param {LayerGroup} layerGroup A layer group containing the layers in this map.\n   * @observable\n   * @api\n   */\n  setLayerGroup(layerGroup) {\n    this.set(MapProperty.LAYERGROUP, layerGroup);\n  }\n\n  /**\n   * Set the size of this map.\n   * @param {import(\"./size.js\").Size|undefined} size The size in pixels of the map in the DOM.\n   * @observable\n   * @api\n   */\n  setSize(size) {\n    this.set(MapProperty.SIZE, size);\n  }\n\n  /**\n   * Set the target element to render this map into.\n   * @param {HTMLElement|string|undefined} target The Element or id of the Element\n   *     that the map is rendered in.\n   * @observable\n   * @api\n   */\n  setTarget(target) {\n    this.set(MapProperty.TARGET, target);\n  }\n\n  /**\n   * Set the view for this map.\n   * @param {View} view The view that controls this map.\n   * @observable\n   * @api\n   */\n  setView(view) {\n    this.set(MapProperty.VIEW, view);\n  }\n\n  /**\n   * @param {import(\"./Feature.js\").default} feature Feature.\n   */\n  skipFeature(feature) {\n    this.skippedFeatureUids_[getUid(feature)] = true;\n    this.render();\n  }\n\n  /**\n   * Force a recalculation of the map viewport size.  This should be called when\n   * third-party code changes the size of the map viewport.\n   * @api\n   */\n  updateSize() {\n    const targetElement = this.getTargetElement();\n\n    if (!targetElement) {\n      this.setSize(undefined);\n    } else {\n      const computedStyle = getComputedStyle(targetElement);\n      this.setSize([\n        targetElement.offsetWidth -\n            parseFloat(computedStyle['borderLeftWidth']) -\n            parseFloat(computedStyle['paddingLeft']) -\n            parseFloat(computedStyle['paddingRight']) -\n            parseFloat(computedStyle['borderRightWidth']),\n        targetElement.offsetHeight -\n            parseFloat(computedStyle['borderTopWidth']) -\n            parseFloat(computedStyle['paddingTop']) -\n            parseFloat(computedStyle['paddingBottom']) -\n            parseFloat(computedStyle['borderBottomWidth'])\n      ]);\n    }\n  }\n\n  /**\n   * @param {import(\"./Feature.js\").default} feature Feature.\n   */\n  unskipFeature(feature) {\n    delete this.skippedFeatureUids_[getUid(feature)];\n    this.render();\n  }\n}\n\n\n/**\n * @param {MapOptions} options Map options.\n * @return {MapOptionsInternal} Internal map options.\n */\nfunction createOptionsInternal(options) {\n\n  /**\n   * @type {HTMLElement|Document}\n   */\n  let keyboardEventTarget = null;\n  if (options.keyboardEventTarget !== undefined) {\n    keyboardEventTarget = typeof options.keyboardEventTarget === 'string' ?\n      document.getElementById(options.keyboardEventTarget) :\n      options.keyboardEventTarget;\n  }\n\n  /**\n   * @type {Object<string, *>}\n   */\n  const values = {};\n\n  const layerGroup = options.layers && typeof /** @type {?} */ (options.layers).getLayers === 'function' ?\n    /** @type {LayerGroup} */ (options.layers) : new LayerGroup({layers: /** @type {Collection} */ (options.layers)});\n  values[MapProperty.LAYERGROUP] = layerGroup;\n\n  values[MapProperty.TARGET] = options.target;\n\n  values[MapProperty.VIEW] = options.view !== undefined ?\n    options.view : new View();\n\n  let controls;\n  if (options.controls !== undefined) {\n    if (Array.isArray(options.controls)) {\n      controls = new Collection(options.controls.slice());\n    } else {\n      assert(typeof /** @type {?} */ (options.controls).getArray === 'function',\n        47); // Expected `controls` to be an array or an `import(\"./Collection.js\").Collection`\n      controls = /** @type {Collection} */ (options.controls);\n    }\n  }\n\n  let interactions;\n  if (options.interactions !== undefined) {\n    if (Array.isArray(options.interactions)) {\n      interactions = new Collection(options.interactions.slice());\n    } else {\n      assert(typeof /** @type {?} */ (options.interactions).getArray === 'function',\n        48); // Expected `interactions` to be an array or an `import(\"./Collection.js\").Collection`\n      interactions = /** @type {Collection} */ (options.interactions);\n    }\n  }\n\n  let overlays;\n  if (options.overlays !== undefined) {\n    if (Array.isArray(options.overlays)) {\n      overlays = new Collection(options.overlays.slice());\n    } else {\n      assert(typeof /** @type {?} */ (options.overlays).getArray === 'function',\n        49); // Expected `overlays` to be an array or an `import(\"./Collection.js\").Collection`\n      overlays = options.overlays;\n    }\n  } else {\n    overlays = new Collection();\n  }\n\n  return {\n    controls: controls,\n    interactions: interactions,\n    keyboardEventTarget: keyboardEventTarget,\n    overlays: overlays,\n    values: values\n  };\n\n}\nexport default PluggableMap;\n\n/**\n * @param  {Array<import(\"./layer/Base.js\").default>} layers Layers.\n * @return {boolean} Layers have sources that are still loading.\n */\nfunction getLoading(layers) {\n  for (let i = 0, ii = layers.length; i < ii; ++i) {\n    const layer = layers[i];\n    if (typeof /** @type {?} */ (layer).getLayers === 'function') {\n      return getLoading(/** @type {LayerGroup} */ (layer).getLayers().getArray());\n    } else {\n      const source = /** @type {import(\"./layer/Layer.js\").default} */ (\n        layer).getSource();\n      if (source && source.loading) {\n        return true;\n      }\n    }\n  }\n  return false;\n}\n"]},"metadata":{},"sourceType":"module"}