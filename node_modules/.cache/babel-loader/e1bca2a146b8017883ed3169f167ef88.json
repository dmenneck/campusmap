{"ast":null,"code":"/**\n * @module ol/control/ZoomToExtent\n */\nimport { listen } from '../events.js';\nimport EventType from '../events/EventType.js';\nimport Control from './Control.js';\nimport { CLASS_CONTROL, CLASS_UNSELECTABLE } from '../css.js';\n/**\n * @typedef {Object} Options\n * @property {string} [className='ol-zoom-extent'] Class name.\n * @property {HTMLElement|string} [target] Specify a target if you want the control\n * to be rendered outside of the map's viewport.\n * @property {string|HTMLElement} [label='E'] Text label to use for the button.\n * Instead of text, also an element (e.g. a `span` element) can be used.\n * @property {string} [tipLabel='Fit to extent'] Text label to use for the button tip.\n * @property {import(\"../extent.js\").Extent} [extent] The extent to zoom to. If undefined the validity\n * extent of the view projection is used.\n */\n\n/**\n * @classdesc\n * A button control which, when pressed, changes the map view to a specific\n * extent. To style this control use the css selector `.ol-zoom-extent`.\n *\n * @api\n */\n\nvar ZoomToExtent =\n/*@__PURE__*/\nfunction (Control) {\n  function ZoomToExtent(opt_options) {\n    var options = opt_options ? opt_options : {};\n    Control.call(this, {\n      element: document.createElement('div'),\n      target: options.target\n    });\n    /**\n     * @type {import(\"../extent.js\").Extent}\n     * @protected\n     */\n\n    this.extent = options.extent ? options.extent : null;\n    var className = options.className !== undefined ? options.className : 'ol-zoom-extent';\n    var label = options.label !== undefined ? options.label : 'E';\n    var tipLabel = options.tipLabel !== undefined ? options.tipLabel : 'Fit to extent';\n    var button = document.createElement('button');\n    button.setAttribute('type', 'button');\n    button.title = tipLabel;\n    button.appendChild(typeof label === 'string' ? document.createTextNode(label) : label);\n    listen(button, EventType.CLICK, this.handleClick_, this);\n    var cssClasses = className + ' ' + CLASS_UNSELECTABLE + ' ' + CLASS_CONTROL;\n    var element = this.element;\n    element.className = cssClasses;\n    element.appendChild(button);\n  }\n\n  if (Control) ZoomToExtent.__proto__ = Control;\n  ZoomToExtent.prototype = Object.create(Control && Control.prototype);\n  ZoomToExtent.prototype.constructor = ZoomToExtent;\n  /**\n   * @param {MouseEvent} event The event to handle\n   * @private\n   */\n\n  ZoomToExtent.prototype.handleClick_ = function handleClick_(event) {\n    event.preventDefault();\n    this.handleZoomToExtent();\n  };\n  /**\n   * @protected\n   */\n\n\n  ZoomToExtent.prototype.handleZoomToExtent = function handleZoomToExtent() {\n    var map = this.getMap();\n    var view = map.getView();\n    var extent = !this.extent ? view.getProjection().getExtent() : this.extent;\n    view.fit(extent);\n  };\n\n  return ZoomToExtent;\n}(Control);\n\nexport default ZoomToExtent;","map":{"version":3,"sources":["../../../src/ol/control/ZoomToExtent.js"],"names":["const","super"],"mappings":"AAAA;;;AAGA,SAAQ,MAAR,QAAqB,cAArB;AACA,OAAO,SAAP,MAAsB,wBAAtB;AACA,OAAO,OAAP,MAAoB,cAApB;AACA,SAAQ,aAAR,EAAuB,kBAAvB,QAAgD,WAAhD;;;;;;;;;;;;;;;;;;;;;AAuBA,IAAM,YAAY;AAAgB;AAAA,UAAA,OAAA,EAAA;AAKhC,WAAA,YAAA,CAAY,WAAZ,EAAyB;AACvBA,QAAM,OAAO,GAAG,WAAW,GAAG,WAAH,GAAiB,EAA5CA;AAEAC,IAAAA,OAAAA,CAAAA,IAAAA,CAAK,IAALA,EAAM;AACJ,MAAA,OAAO,EAAE,QAAQ,CAAC,aAAT,CAAuB,KAAvB,CADL;AAEJ,MAAA,MAAM,EAAE,OAAO,CAAC;AAFZ,KAANA;;;;;;AASA,SAAK,MAAL,GAAc,OAAO,CAAC,MAAR,GAAiB,OAAO,CAAC,MAAzB,GAAkC,IAAhD;AAEAD,QAAM,SAAS,GAAG,OAAO,CAAC,SAAR,KAAsB,SAAtB,GAAkC,OAAO,CAAC,SAA1C,GAAsD,gBAAxEA;AAEAA,QAAM,KAAK,GAAG,OAAO,CAAC,KAAR,KAAkB,SAAlB,GAA8B,OAAO,CAAC,KAAtC,GAA8C,GAA5DA;AACAA,QAAM,QAAQ,GAAG,OAAO,CAAC,QAAR,KAAqB,SAArB,GAAiC,OAAO,CAAC,QAAzC,GAAoD,eAArEA;AACAA,QAAM,MAAM,GAAG,QAAQ,CAAC,aAAT,CAAuB,QAAvB,CAAfA;AACA,IAAA,MAAM,CAAC,YAAP,CAAoB,MAApB,EAA4B,QAA5B;AACA,IAAA,MAAM,CAAC,KAAP,GAAe,QAAf;AACA,IAAA,MAAM,CAAC,WAAP,CACE,OAAO,KAAP,KAAiB,QAAjB,GAA4B,QAAQ,CAAC,cAAT,CAAwB,KAAxB,CAA5B,GAA6D,KAD/D;AAIA,IAAA,MAAM,CAAC,MAAD,EAAS,SAAS,CAAC,KAAnB,EAA0B,KAAK,YAA/B,EAA6C,IAA7C,CAAN;AAEAA,QAAM,UAAU,GAAG,SAAS,GAAG,GAAZ,GAAkB,kBAAlB,GAAuC,GAAvC,GAA6C,aAAhEA;AACAA,QAAM,OAAO,GAAG,KAAK,OAArBA;AACA,IAAA,OAAO,CAAC,SAAR,GAAoB,UAApB;AACA,IAAA,OAAO,CAAC,WAAR,CAAoB,MAApB;;;;;uCACD,Y;;;;;;yBAMD,Y,GAAA,SAAA,YAAA,CAAa,KAAb,EAAoB;AAClB,IAAA,KAAK,CAAC,cAAN;AACA,SAAK,kBAAL;AACD,G;;;;;;yBAKD,kB,GAAA,SAAA,kBAAA,GAAqB;AACnBA,QAAM,GAAG,GAAG,KAAK,MAAL,EAAZA;AACAA,QAAM,IAAI,GAAG,GAAG,CAAC,OAAJ,EAAbA;AACAA,QAAM,MAAM,GAAG,CAAC,KAAK,MAAN,GAAe,IAAI,CAAC,aAAL,GAAqB,SAArB,EAAf,GAAkD,KAAK,MAAtEA;AACA,IAAA,IAAI,CAAC,GAAL,CAAS,MAAT;AACD,G;;;CAvD+B,CAAP,OAAO,CAAlC;;AA0DA,eAAe,YAAf","sourcesContent":["/**\n * @module ol/control/ZoomToExtent\n */\nimport {listen} from '../events.js';\nimport EventType from '../events/EventType.js';\nimport Control from './Control.js';\nimport {CLASS_CONTROL, CLASS_UNSELECTABLE} from '../css.js';\n\n\n/**\n * @typedef {Object} Options\n * @property {string} [className='ol-zoom-extent'] Class name.\n * @property {HTMLElement|string} [target] Specify a target if you want the control\n * to be rendered outside of the map's viewport.\n * @property {string|HTMLElement} [label='E'] Text label to use for the button.\n * Instead of text, also an element (e.g. a `span` element) can be used.\n * @property {string} [tipLabel='Fit to extent'] Text label to use for the button tip.\n * @property {import(\"../extent.js\").Extent} [extent] The extent to zoom to. If undefined the validity\n * extent of the view projection is used.\n */\n\n\n/**\n * @classdesc\n * A button control which, when pressed, changes the map view to a specific\n * extent. To style this control use the css selector `.ol-zoom-extent`.\n *\n * @api\n */\nclass ZoomToExtent extends Control {\n\n  /**\n   * @param {Options=} opt_options Options.\n   */\n  constructor(opt_options) {\n    const options = opt_options ? opt_options : {};\n\n    super({\n      element: document.createElement('div'),\n      target: options.target\n    });\n\n    /**\n     * @type {import(\"../extent.js\").Extent}\n     * @protected\n     */\n    this.extent = options.extent ? options.extent : null;\n\n    const className = options.className !== undefined ? options.className : 'ol-zoom-extent';\n\n    const label = options.label !== undefined ? options.label : 'E';\n    const tipLabel = options.tipLabel !== undefined ? options.tipLabel : 'Fit to extent';\n    const button = document.createElement('button');\n    button.setAttribute('type', 'button');\n    button.title = tipLabel;\n    button.appendChild(\n      typeof label === 'string' ? document.createTextNode(label) : label\n    );\n\n    listen(button, EventType.CLICK, this.handleClick_, this);\n\n    const cssClasses = className + ' ' + CLASS_UNSELECTABLE + ' ' + CLASS_CONTROL;\n    const element = this.element;\n    element.className = cssClasses;\n    element.appendChild(button);\n  }\n\n  /**\n   * @param {MouseEvent} event The event to handle\n   * @private\n   */\n  handleClick_(event) {\n    event.preventDefault();\n    this.handleZoomToExtent();\n  }\n\n  /**\n   * @protected\n   */\n  handleZoomToExtent() {\n    const map = this.getMap();\n    const view = map.getView();\n    const extent = !this.extent ? view.getProjection().getExtent() : this.extent;\n    view.fit(extent);\n  }\n}\n\nexport default ZoomToExtent;\n"]},"metadata":{},"sourceType":"module"}