{"ast":null,"code":"/**\n * @module ol/geom/flat/closest\n */\nimport { lerp, squaredDistance as squaredDx } from '../../math.js';\n/**\n * Returns the point on the 2D line segment flatCoordinates[offset1] to\n * flatCoordinates[offset2] that is closest to the point (x, y).  Extra\n * dimensions are linearly interpolated.\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset1 Offset 1.\n * @param {number} offset2 Offset 2.\n * @param {number} stride Stride.\n * @param {number} x X.\n * @param {number} y Y.\n * @param {Array<number>} closestPoint Closest point.\n */\n\nfunction assignClosest(flatCoordinates, offset1, offset2, stride, x, y, closestPoint) {\n  var x1 = flatCoordinates[offset1];\n  var y1 = flatCoordinates[offset1 + 1];\n  var dx = flatCoordinates[offset2] - x1;\n  var dy = flatCoordinates[offset2 + 1] - y1;\n  var offset;\n\n  if (dx === 0 && dy === 0) {\n    offset = offset1;\n  } else {\n    var t = ((x - x1) * dx + (y - y1) * dy) / (dx * dx + dy * dy);\n\n    if (t > 1) {\n      offset = offset2;\n    } else if (t > 0) {\n      for (var i = 0; i < stride; ++i) {\n        closestPoint[i] = lerp(flatCoordinates[offset1 + i], flatCoordinates[offset2 + i], t);\n      }\n\n      closestPoint.length = stride;\n      return;\n    } else {\n      offset = offset1;\n    }\n  }\n\n  for (var i$1 = 0; i$1 < stride; ++i$1) {\n    closestPoint[i$1] = flatCoordinates[offset + i$1];\n  }\n\n  closestPoint.length = stride;\n}\n/**\n * Return the squared of the largest distance between any pair of consecutive\n * coordinates.\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {number} end End.\n * @param {number} stride Stride.\n * @param {number} max Max squared delta.\n * @return {number} Max squared delta.\n */\n\n\nexport function maxSquaredDelta(flatCoordinates, offset, end, stride, max) {\n  var x1 = flatCoordinates[offset];\n  var y1 = flatCoordinates[offset + 1];\n\n  for (offset += stride; offset < end; offset += stride) {\n    var x2 = flatCoordinates[offset];\n    var y2 = flatCoordinates[offset + 1];\n    var squaredDelta = squaredDx(x1, y1, x2, y2);\n\n    if (squaredDelta > max) {\n      max = squaredDelta;\n    }\n\n    x1 = x2;\n    y1 = y2;\n  }\n\n  return max;\n}\n/**\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {Array<number>} ends Ends.\n * @param {number} stride Stride.\n * @param {number} max Max squared delta.\n * @return {number} Max squared delta.\n */\n\nexport function arrayMaxSquaredDelta(flatCoordinates, offset, ends, stride, max) {\n  for (var i = 0, ii = ends.length; i < ii; ++i) {\n    var end = ends[i];\n    max = maxSquaredDelta(flatCoordinates, offset, end, stride, max);\n    offset = end;\n  }\n\n  return max;\n}\n/**\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {Array<Array<number>>} endss Endss.\n * @param {number} stride Stride.\n * @param {number} max Max squared delta.\n * @return {number} Max squared delta.\n */\n\nexport function multiArrayMaxSquaredDelta(flatCoordinates, offset, endss, stride, max) {\n  for (var i = 0, ii = endss.length; i < ii; ++i) {\n    var ends = endss[i];\n    max = arrayMaxSquaredDelta(flatCoordinates, offset, ends, stride, max);\n    offset = ends[ends.length - 1];\n  }\n\n  return max;\n}\n/**\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {number} end End.\n * @param {number} stride Stride.\n * @param {number} maxDelta Max delta.\n * @param {boolean} isRing Is ring.\n * @param {number} x X.\n * @param {number} y Y.\n * @param {Array<number>} closestPoint Closest point.\n * @param {number} minSquaredDistance Minimum squared distance.\n * @param {Array<number>=} opt_tmpPoint Temporary point object.\n * @return {number} Minimum squared distance.\n */\n\nexport function assignClosestPoint(flatCoordinates, offset, end, stride, maxDelta, isRing, x, y, closestPoint, minSquaredDistance, opt_tmpPoint) {\n  if (offset == end) {\n    return minSquaredDistance;\n  }\n\n  var i, squaredDistance;\n\n  if (maxDelta === 0) {\n    // All points are identical, so just test the first point.\n    squaredDistance = squaredDx(x, y, flatCoordinates[offset], flatCoordinates[offset + 1]);\n\n    if (squaredDistance < minSquaredDistance) {\n      for (i = 0; i < stride; ++i) {\n        closestPoint[i] = flatCoordinates[offset + i];\n      }\n\n      closestPoint.length = stride;\n      return squaredDistance;\n    } else {\n      return minSquaredDistance;\n    }\n  }\n\n  var tmpPoint = opt_tmpPoint ? opt_tmpPoint : [NaN, NaN];\n  var index = offset + stride;\n\n  while (index < end) {\n    assignClosest(flatCoordinates, index - stride, index, stride, x, y, tmpPoint);\n    squaredDistance = squaredDx(x, y, tmpPoint[0], tmpPoint[1]);\n\n    if (squaredDistance < minSquaredDistance) {\n      minSquaredDistance = squaredDistance;\n\n      for (i = 0; i < stride; ++i) {\n        closestPoint[i] = tmpPoint[i];\n      }\n\n      closestPoint.length = stride;\n      index += stride;\n    } else {\n      // Skip ahead multiple points, because we know that all the skipped\n      // points cannot be any closer than the closest point we have found so\n      // far.  We know this because we know how close the current point is, how\n      // close the closest point we have found so far is, and the maximum\n      // distance between consecutive points.  For example, if we're currently\n      // at distance 10, the best we've found so far is 3, and that the maximum\n      // distance between consecutive points is 2, then we'll need to skip at\n      // least (10 - 3) / 2 == 3 (rounded down) points to have any chance of\n      // finding a closer point.  We use Math.max(..., 1) to ensure that we\n      // always advance at least one point, to avoid an infinite loop.\n      index += stride * Math.max((Math.sqrt(squaredDistance) - Math.sqrt(minSquaredDistance)) / maxDelta | 0, 1);\n    }\n  }\n\n  if (isRing) {\n    // Check the closing segment.\n    assignClosest(flatCoordinates, end - stride, offset, stride, x, y, tmpPoint);\n    squaredDistance = squaredDx(x, y, tmpPoint[0], tmpPoint[1]);\n\n    if (squaredDistance < minSquaredDistance) {\n      minSquaredDistance = squaredDistance;\n\n      for (i = 0; i < stride; ++i) {\n        closestPoint[i] = tmpPoint[i];\n      }\n\n      closestPoint.length = stride;\n    }\n  }\n\n  return minSquaredDistance;\n}\n/**\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {Array<number>} ends Ends.\n * @param {number} stride Stride.\n * @param {number} maxDelta Max delta.\n * @param {boolean} isRing Is ring.\n * @param {number} x X.\n * @param {number} y Y.\n * @param {Array<number>} closestPoint Closest point.\n * @param {number} minSquaredDistance Minimum squared distance.\n * @param {Array<number>=} opt_tmpPoint Temporary point object.\n * @return {number} Minimum squared distance.\n */\n\nexport function assignClosestArrayPoint(flatCoordinates, offset, ends, stride, maxDelta, isRing, x, y, closestPoint, minSquaredDistance, opt_tmpPoint) {\n  var tmpPoint = opt_tmpPoint ? opt_tmpPoint : [NaN, NaN];\n\n  for (var i = 0, ii = ends.length; i < ii; ++i) {\n    var end = ends[i];\n    minSquaredDistance = assignClosestPoint(flatCoordinates, offset, end, stride, maxDelta, isRing, x, y, closestPoint, minSquaredDistance, tmpPoint);\n    offset = end;\n  }\n\n  return minSquaredDistance;\n}\n/**\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {Array<Array<number>>} endss Endss.\n * @param {number} stride Stride.\n * @param {number} maxDelta Max delta.\n * @param {boolean} isRing Is ring.\n * @param {number} x X.\n * @param {number} y Y.\n * @param {Array<number>} closestPoint Closest point.\n * @param {number} minSquaredDistance Minimum squared distance.\n * @param {Array<number>=} opt_tmpPoint Temporary point object.\n * @return {number} Minimum squared distance.\n */\n\nexport function assignClosestMultiArrayPoint(flatCoordinates, offset, endss, stride, maxDelta, isRing, x, y, closestPoint, minSquaredDistance, opt_tmpPoint) {\n  var tmpPoint = opt_tmpPoint ? opt_tmpPoint : [NaN, NaN];\n\n  for (var i = 0, ii = endss.length; i < ii; ++i) {\n    var ends = endss[i];\n    minSquaredDistance = assignClosestArrayPoint(flatCoordinates, offset, ends, stride, maxDelta, isRing, x, y, closestPoint, minSquaredDistance, tmpPoint);\n    offset = ends[ends.length - 1];\n  }\n\n  return minSquaredDistance;\n}","map":{"version":3,"sources":["../../../../src/ol/geom/flat/closest.js"],"names":["const","let","i"],"mappings":"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","sourcesContent":["/**\n * @module ol/geom/flat/closest\n */\nimport {lerp, squaredDistance as squaredDx} from '../../math.js';\n\n\n/**\n * Returns the point on the 2D line segment flatCoordinates[offset1] to\n * flatCoordinates[offset2] that is closest to the point (x, y).  Extra\n * dimensions are linearly interpolated.\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset1 Offset 1.\n * @param {number} offset2 Offset 2.\n * @param {number} stride Stride.\n * @param {number} x X.\n * @param {number} y Y.\n * @param {Array<number>} closestPoint Closest point.\n */\nfunction assignClosest(flatCoordinates, offset1, offset2, stride, x, y, closestPoint) {\n  const x1 = flatCoordinates[offset1];\n  const y1 = flatCoordinates[offset1 + 1];\n  const dx = flatCoordinates[offset2] - x1;\n  const dy = flatCoordinates[offset2 + 1] - y1;\n  let offset;\n  if (dx === 0 && dy === 0) {\n    offset = offset1;\n  } else {\n    const t = ((x - x1) * dx + (y - y1) * dy) / (dx * dx + dy * dy);\n    if (t > 1) {\n      offset = offset2;\n    } else if (t > 0) {\n      for (let i = 0; i < stride; ++i) {\n        closestPoint[i] = lerp(flatCoordinates[offset1 + i],\n          flatCoordinates[offset2 + i], t);\n      }\n      closestPoint.length = stride;\n      return;\n    } else {\n      offset = offset1;\n    }\n  }\n  for (let i = 0; i < stride; ++i) {\n    closestPoint[i] = flatCoordinates[offset + i];\n  }\n  closestPoint.length = stride;\n}\n\n\n/**\n * Return the squared of the largest distance between any pair of consecutive\n * coordinates.\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {number} end End.\n * @param {number} stride Stride.\n * @param {number} max Max squared delta.\n * @return {number} Max squared delta.\n */\nexport function maxSquaredDelta(flatCoordinates, offset, end, stride, max) {\n  let x1 = flatCoordinates[offset];\n  let y1 = flatCoordinates[offset + 1];\n  for (offset += stride; offset < end; offset += stride) {\n    const x2 = flatCoordinates[offset];\n    const y2 = flatCoordinates[offset + 1];\n    const squaredDelta = squaredDx(x1, y1, x2, y2);\n    if (squaredDelta > max) {\n      max = squaredDelta;\n    }\n    x1 = x2;\n    y1 = y2;\n  }\n  return max;\n}\n\n\n/**\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {Array<number>} ends Ends.\n * @param {number} stride Stride.\n * @param {number} max Max squared delta.\n * @return {number} Max squared delta.\n */\nexport function arrayMaxSquaredDelta(flatCoordinates, offset, ends, stride, max) {\n  for (let i = 0, ii = ends.length; i < ii; ++i) {\n    const end = ends[i];\n    max = maxSquaredDelta(\n      flatCoordinates, offset, end, stride, max);\n    offset = end;\n  }\n  return max;\n}\n\n\n/**\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {Array<Array<number>>} endss Endss.\n * @param {number} stride Stride.\n * @param {number} max Max squared delta.\n * @return {number} Max squared delta.\n */\nexport function multiArrayMaxSquaredDelta(flatCoordinates, offset, endss, stride, max) {\n  for (let i = 0, ii = endss.length; i < ii; ++i) {\n    const ends = endss[i];\n    max = arrayMaxSquaredDelta(\n      flatCoordinates, offset, ends, stride, max);\n    offset = ends[ends.length - 1];\n  }\n  return max;\n}\n\n\n/**\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {number} end End.\n * @param {number} stride Stride.\n * @param {number} maxDelta Max delta.\n * @param {boolean} isRing Is ring.\n * @param {number} x X.\n * @param {number} y Y.\n * @param {Array<number>} closestPoint Closest point.\n * @param {number} minSquaredDistance Minimum squared distance.\n * @param {Array<number>=} opt_tmpPoint Temporary point object.\n * @return {number} Minimum squared distance.\n */\nexport function assignClosestPoint(flatCoordinates, offset, end,\n  stride, maxDelta, isRing, x, y, closestPoint, minSquaredDistance,\n  opt_tmpPoint) {\n  if (offset == end) {\n    return minSquaredDistance;\n  }\n  let i, squaredDistance;\n  if (maxDelta === 0) {\n    // All points are identical, so just test the first point.\n    squaredDistance = squaredDx(\n      x, y, flatCoordinates[offset], flatCoordinates[offset + 1]);\n    if (squaredDistance < minSquaredDistance) {\n      for (i = 0; i < stride; ++i) {\n        closestPoint[i] = flatCoordinates[offset + i];\n      }\n      closestPoint.length = stride;\n      return squaredDistance;\n    } else {\n      return minSquaredDistance;\n    }\n  }\n  const tmpPoint = opt_tmpPoint ? opt_tmpPoint : [NaN, NaN];\n  let index = offset + stride;\n  while (index < end) {\n    assignClosest(\n      flatCoordinates, index - stride, index, stride, x, y, tmpPoint);\n    squaredDistance = squaredDx(x, y, tmpPoint[0], tmpPoint[1]);\n    if (squaredDistance < minSquaredDistance) {\n      minSquaredDistance = squaredDistance;\n      for (i = 0; i < stride; ++i) {\n        closestPoint[i] = tmpPoint[i];\n      }\n      closestPoint.length = stride;\n      index += stride;\n    } else {\n      // Skip ahead multiple points, because we know that all the skipped\n      // points cannot be any closer than the closest point we have found so\n      // far.  We know this because we know how close the current point is, how\n      // close the closest point we have found so far is, and the maximum\n      // distance between consecutive points.  For example, if we're currently\n      // at distance 10, the best we've found so far is 3, and that the maximum\n      // distance between consecutive points is 2, then we'll need to skip at\n      // least (10 - 3) / 2 == 3 (rounded down) points to have any chance of\n      // finding a closer point.  We use Math.max(..., 1) to ensure that we\n      // always advance at least one point, to avoid an infinite loop.\n      index += stride * Math.max(\n        ((Math.sqrt(squaredDistance) -\n            Math.sqrt(minSquaredDistance)) / maxDelta) | 0, 1);\n    }\n  }\n  if (isRing) {\n    // Check the closing segment.\n    assignClosest(\n      flatCoordinates, end - stride, offset, stride, x, y, tmpPoint);\n    squaredDistance = squaredDx(x, y, tmpPoint[0], tmpPoint[1]);\n    if (squaredDistance < minSquaredDistance) {\n      minSquaredDistance = squaredDistance;\n      for (i = 0; i < stride; ++i) {\n        closestPoint[i] = tmpPoint[i];\n      }\n      closestPoint.length = stride;\n    }\n  }\n  return minSquaredDistance;\n}\n\n\n/**\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {Array<number>} ends Ends.\n * @param {number} stride Stride.\n * @param {number} maxDelta Max delta.\n * @param {boolean} isRing Is ring.\n * @param {number} x X.\n * @param {number} y Y.\n * @param {Array<number>} closestPoint Closest point.\n * @param {number} minSquaredDistance Minimum squared distance.\n * @param {Array<number>=} opt_tmpPoint Temporary point object.\n * @return {number} Minimum squared distance.\n */\nexport function assignClosestArrayPoint(flatCoordinates, offset, ends,\n  stride, maxDelta, isRing, x, y, closestPoint, minSquaredDistance,\n  opt_tmpPoint) {\n  const tmpPoint = opt_tmpPoint ? opt_tmpPoint : [NaN, NaN];\n  for (let i = 0, ii = ends.length; i < ii; ++i) {\n    const end = ends[i];\n    minSquaredDistance = assignClosestPoint(\n      flatCoordinates, offset, end, stride,\n      maxDelta, isRing, x, y, closestPoint, minSquaredDistance, tmpPoint);\n    offset = end;\n  }\n  return minSquaredDistance;\n}\n\n\n/**\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {Array<Array<number>>} endss Endss.\n * @param {number} stride Stride.\n * @param {number} maxDelta Max delta.\n * @param {boolean} isRing Is ring.\n * @param {number} x X.\n * @param {number} y Y.\n * @param {Array<number>} closestPoint Closest point.\n * @param {number} minSquaredDistance Minimum squared distance.\n * @param {Array<number>=} opt_tmpPoint Temporary point object.\n * @return {number} Minimum squared distance.\n */\nexport function assignClosestMultiArrayPoint(flatCoordinates, offset,\n  endss, stride, maxDelta, isRing, x, y, closestPoint, minSquaredDistance,\n  opt_tmpPoint) {\n  const tmpPoint = opt_tmpPoint ? opt_tmpPoint : [NaN, NaN];\n  for (let i = 0, ii = endss.length; i < ii; ++i) {\n    const ends = endss[i];\n    minSquaredDistance = assignClosestArrayPoint(\n      flatCoordinates, offset, ends, stride,\n      maxDelta, isRing, x, y, closestPoint, minSquaredDistance, tmpPoint);\n    offset = ends[ends.length - 1];\n  }\n  return minSquaredDistance;\n}\n"]},"metadata":{},"sourceType":"module"}