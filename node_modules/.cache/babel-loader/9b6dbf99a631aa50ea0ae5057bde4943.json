{"ast":null,"code":"/**\n * @module ol/style/IconImageCache\n */\nimport { asString } from '../color.js';\n/**\n * Singleton class. Available through {@link module:ol/style/IconImageCache~shared}.\n * @constructor\n */\n\nconst IconImageCache = function () {\n  /**\n   * @type {!Object.<string, module:ol/style/IconImage>}\n   * @private\n   */\n  this.cache_ = {};\n  /**\n   * @type {number}\n   * @private\n   */\n\n  this.cacheSize_ = 0;\n  /**\n   * @type {number}\n   * @private\n   */\n\n  this.maxCacheSize_ = 32;\n};\n/**\n * @param {string} src Src.\n * @param {?string} crossOrigin Cross origin.\n * @param {module:ol/color~Color} color Color.\n * @return {string} Cache key.\n */\n\n\nfunction getKey(src, crossOrigin, color) {\n  const colorString = color ? asString(color) : 'null';\n  return crossOrigin + ':' + src + ':' + colorString;\n}\n/**\n * FIXME empty description for jsdoc\n */\n\n\nIconImageCache.prototype.clear = function () {\n  this.cache_ = {};\n  this.cacheSize_ = 0;\n};\n/**\n * FIXME empty description for jsdoc\n */\n\n\nIconImageCache.prototype.expire = function () {\n  if (this.cacheSize_ > this.maxCacheSize_) {\n    let i = 0;\n\n    for (const key in this.cache_) {\n      const iconImage = this.cache_[key];\n\n      if ((i++ & 3) === 0 && !iconImage.hasListener()) {\n        delete this.cache_[key];\n        --this.cacheSize_;\n      }\n    }\n  }\n};\n/**\n * @param {string} src Src.\n * @param {?string} crossOrigin Cross origin.\n * @param {module:ol/color~Color} color Color.\n * @return {module:ol/style/IconImage} Icon image.\n */\n\n\nIconImageCache.prototype.get = function (src, crossOrigin, color) {\n  const key = getKey(src, crossOrigin, color);\n  return key in this.cache_ ? this.cache_[key] : null;\n};\n/**\n * @param {string} src Src.\n * @param {?string} crossOrigin Cross origin.\n * @param {module:ol/color~Color} color Color.\n * @param {module:ol/style/IconImage} iconImage Icon image.\n */\n\n\nIconImageCache.prototype.set = function (src, crossOrigin, color, iconImage) {\n  const key = getKey(src, crossOrigin, color);\n  this.cache_[key] = iconImage;\n  ++this.cacheSize_;\n};\n/**\n * Set the cache size of the icon cache. Default is `32`. Change this value when\n * your map uses more than 32 different icon images and you are not caching icon\n * styles on the application level.\n * @param {number} maxCacheSize Cache max size.\n * @api\n */\n\n\nIconImageCache.prototype.setSize = function (maxCacheSize) {\n  this.maxCacheSize_ = maxCacheSize;\n  this.expire();\n};\n\nexport default IconImageCache;\n/**\n * The {@link module:ol/style/IconImageCache~IconImageCache} for\n * {@link module:ol/style/Icon~Icon} images.\n * @api\n */\n\nexport const shared = new IconImageCache();","map":null,"metadata":{},"sourceType":"module"}