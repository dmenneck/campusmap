{"ast":null,"code":"/**\n * @module ol/resolutionconstraint\n */\nimport { linearFindNearest } from './array.js';\nimport { clamp } from './math.js';\n/**\n * @typedef {function((number|undefined), number, number): (number|undefined)} Type\n */\n\n/**\n * @param {Array<number>} resolutions Resolutions.\n * @return {Type} Zoom function.\n */\n\nexport function createSnapToResolutions(resolutions) {\n  return (\n    /**\n     * @param {number|undefined} resolution Resolution.\n     * @param {number} delta Delta.\n     * @param {number} direction Direction.\n     * @return {number|undefined} Resolution.\n     */\n    function (resolution, delta, direction) {\n      if (resolution !== undefined) {\n        var z = linearFindNearest(resolutions, resolution, direction);\n        z = clamp(z + delta, 0, resolutions.length - 1);\n        var index = Math.floor(z);\n\n        if (z != index && index < resolutions.length - 1) {\n          var power = resolutions[index] / resolutions[index + 1];\n          return resolutions[index] / Math.pow(power, z - index);\n        } else {\n          return resolutions[index];\n        }\n      } else {\n        return undefined;\n      }\n    }\n  );\n}\n/**\n * @param {number} power Power.\n * @param {number} maxResolution Maximum resolution.\n * @param {number=} opt_maxLevel Maximum level.\n * @return {Type} Zoom function.\n */\n\nexport function createSnapToPower(power, maxResolution, opt_maxLevel) {\n  return (\n    /**\n     * @param {number|undefined} resolution Resolution.\n     * @param {number} delta Delta.\n     * @param {number} direction Direction.\n     * @return {number|undefined} Resolution.\n     */\n    function (resolution, delta, direction) {\n      if (resolution !== undefined) {\n        var offset = -direction / 2 + 0.5;\n        var oldLevel = Math.floor(Math.log(maxResolution / resolution) / Math.log(power) + offset);\n        var newLevel = Math.max(oldLevel + delta, 0);\n\n        if (opt_maxLevel !== undefined) {\n          newLevel = Math.min(newLevel, opt_maxLevel);\n        }\n\n        return maxResolution / Math.pow(power, newLevel);\n      } else {\n        return undefined;\n      }\n    }\n  );\n}","map":{"version":3,"sources":["../../src/ol/resolutionconstraint.js"],"names":["let","const"],"mappings":"AAAA;;;AAGA,SAAQ,iBAAR,QAAgC,YAAhC;AACA,SAAQ,KAAR,QAAoB,WAApB;;;;;;;;;;AAYA,OAAO,SAAS,uBAAT,CAAiC,WAAjC,EAA8C;AACnD;;;;;;;AAOE,cAAS,UAAT,EAAqB,KAArB,EAA4B,SAA5B,EAAuC;AACrC,UAAI,UAAU,KAAK,SAAnB,EAA8B;AAC5BA,YAAI,CAAC,GAAG,iBAAiB,CAAC,WAAD,EAAc,UAAd,EAA0B,SAA1B,CAAzBA;AACA,QAAA,CAAC,GAAG,KAAK,CAAC,CAAC,GAAG,KAAL,EAAY,CAAZ,EAAe,WAAW,CAAC,MAAZ,GAAqB,CAApC,CAAT;AACAC,YAAM,KAAK,GAAG,IAAI,CAAC,KAAL,CAAW,CAAX,CAAdA;;AACA,YAAI,CAAC,IAAI,KAAL,IAAc,KAAK,GAAG,WAAW,CAAC,MAAZ,GAAqB,CAA/C,EAAkD;AAChDA,cAAM,KAAK,GAAG,WAAW,CAAC,KAAD,CAAX,GAAqB,WAAW,CAAC,KAAK,GAAG,CAAT,CAA9CA;AACA,iBAAO,WAAW,CAAC,KAAD,CAAX,GAAqB,IAAI,CAAC,GAAL,CAAS,KAAT,EAAgB,CAAC,GAAG,KAApB,CAA5B;AACD,SAHD,MAGO;AACL,iBAAO,WAAW,CAAC,KAAD,CAAlB;AACD;AACF,OAVD,MAUO;AACL,eAAO,SAAP;AACD;AACF;AArBH;AAuBD;;;;;;;;AASD,OAAO,SAAS,iBAAT,CAA2B,KAA3B,EAAkC,aAAlC,EAAiD,YAAjD,EAA+D;AACpE;;;;;;;AAOE,cAAS,UAAT,EAAqB,KAArB,EAA4B,SAA5B,EAAuC;AACrC,UAAI,UAAU,KAAK,SAAnB,EAA8B;AAC5BA,YAAM,MAAM,GAAG,CAAC,SAAD,GAAa,CAAb,GAAiB,GAAhCA;AACAA,YAAM,QAAQ,GAAG,IAAI,CAAC,KAAL,CACf,IAAI,CAAC,GAAL,CAAS,aAAa,GAAG,UAAzB,IAAuC,IAAI,CAAC,GAAL,CAAS,KAAT,CAAvC,GAAyD,MAD1C,CAAjBA;AAEAD,YAAI,QAAQ,GAAG,IAAI,CAAC,GAAL,CAAS,QAAQ,GAAG,KAApB,EAA2B,CAA3B,CAAfA;;AACA,YAAI,YAAY,KAAK,SAArB,EAAgC;AAC9B,UAAA,QAAQ,GAAG,IAAI,CAAC,GAAL,CAAS,QAAT,EAAmB,YAAnB,CAAX;AACD;;AACD,eAAO,aAAa,GAAG,IAAI,CAAC,GAAL,CAAS,KAAT,EAAgB,QAAhB,CAAvB;AACD,OATD,MASO;AACL,eAAO,SAAP;AACD;AACF;AApBH;AAqBD","sourcesContent":["/**\n * @module ol/resolutionconstraint\n */\nimport {linearFindNearest} from './array.js';\nimport {clamp} from './math.js';\n\n\n/**\n * @typedef {function((number|undefined), number, number): (number|undefined)} Type\n */\n\n\n/**\n * @param {Array<number>} resolutions Resolutions.\n * @return {Type} Zoom function.\n */\nexport function createSnapToResolutions(resolutions) {\n  return (\n    /**\n     * @param {number|undefined} resolution Resolution.\n     * @param {number} delta Delta.\n     * @param {number} direction Direction.\n     * @return {number|undefined} Resolution.\n     */\n    function(resolution, delta, direction) {\n      if (resolution !== undefined) {\n        let z = linearFindNearest(resolutions, resolution, direction);\n        z = clamp(z + delta, 0, resolutions.length - 1);\n        const index = Math.floor(z);\n        if (z != index && index < resolutions.length - 1) {\n          const power = resolutions[index] / resolutions[index + 1];\n          return resolutions[index] / Math.pow(power, z - index);\n        } else {\n          return resolutions[index];\n        }\n      } else {\n        return undefined;\n      }\n    }\n  );\n}\n\n\n/**\n * @param {number} power Power.\n * @param {number} maxResolution Maximum resolution.\n * @param {number=} opt_maxLevel Maximum level.\n * @return {Type} Zoom function.\n */\nexport function createSnapToPower(power, maxResolution, opt_maxLevel) {\n  return (\n    /**\n     * @param {number|undefined} resolution Resolution.\n     * @param {number} delta Delta.\n     * @param {number} direction Direction.\n     * @return {number|undefined} Resolution.\n     */\n    function(resolution, delta, direction) {\n      if (resolution !== undefined) {\n        const offset = -direction / 2 + 0.5;\n        const oldLevel = Math.floor(\n          Math.log(maxResolution / resolution) / Math.log(power) + offset);\n        let newLevel = Math.max(oldLevel + delta, 0);\n        if (opt_maxLevel !== undefined) {\n          newLevel = Math.min(newLevel, opt_maxLevel);\n        }\n        return maxResolution / Math.pow(power, newLevel);\n      } else {\n        return undefined;\n      }\n    });\n}\n"]},"metadata":{},"sourceType":"module"}