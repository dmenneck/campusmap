{"ast":null,"code":"/**\n * @module ol/interaction/Modify\n */\nimport { getUid, inherits } from '../util.js';\nimport Collection from '../Collection.js';\nimport CollectionEventType from '../CollectionEventType.js';\nimport Feature from '../Feature.js';\nimport MapBrowserEventType from '../MapBrowserEventType.js';\nimport MapBrowserPointerEvent from '../MapBrowserPointerEvent.js';\nimport { equals } from '../array.js';\nimport { equals as coordinatesEqual, distance as coordinateDistance, squaredDistance as squaredCoordinateDistance, squaredDistanceToSegment, closestOnSegment } from '../coordinate.js';\nimport { listen, unlisten } from '../events.js';\nimport Event from '../events/Event.js';\nimport EventType from '../events/EventType.js';\nimport { always, primaryAction, altKeyOnly, singleClick } from '../events/condition.js';\nimport { boundingExtent, buffer, createOrUpdateFromCoordinate } from '../extent.js';\nimport GeometryType from '../geom/GeometryType.js';\nimport Point from '../geom/Point.js';\nimport PointerInteraction, { handleEvent as handlePointerEvent } from '../interaction/Pointer.js';\nimport VectorLayer from '../layer/Vector.js';\nimport VectorSource from '../source/Vector.js';\nimport VectorEventType from '../source/VectorEventType.js';\nimport RBush from '../structs/RBush.js';\nimport { createEditingStyle } from '../style/Style.js';\n/**\n * @enum {string}\n */\n\nconst ModifyEventType = {\n  /**\n   * Triggered upon feature modification start\n   * @event ModifyEvent#modifystart\n   * @api\n   */\n  MODIFYSTART: 'modifystart',\n\n  /**\n   * Triggered upon feature modification end\n   * @event ModifyEvent#modifyend\n   * @api\n   */\n  MODIFYEND: 'modifyend'\n};\n/**\n * @typedef {Object} SegmentData\n * @property {Array.<number>} [depth]\n * @property {module:ol/Feature} feature\n * @property {module:ol/geom/SimpleGeometry} geometry\n * @property {number} index\n * @property {Array.<module:ol/extent~Extent>} segment\n * @property {Array.<module:ol/interaction/Modify~SegmentData>} [featureSegments]\n */\n\n/**\n * @typedef {Object} Options\n * @property {module:ol/events/condition~Condition} [condition] A function that\n * takes an {@link module:ol/MapBrowserEvent~MapBrowserEvent} and returns a\n * boolean to indicate whether that event will be considered to add or move a\n * vertex to the sketch. Default is\n * {@link module:ol/events/condition~primaryAction}.\n * @property {module:ol/events/condition~Condition} [deleteCondition] A function\n * that takes an {@link module:ol/MapBrowserEvent~MapBrowserEvent} and returns a\n * boolean to indicate whether that event should be handled. By default,\n * {@link module:ol/events/condition~singleClick} with\n * {@link module:ol/events/condition~altKeyOnly} results in a vertex deletion.\n * @property {module:ol/events/condition~Condition} [insertVertexCondition] A\n * function that takes an {@link module:ol/MapBrowserEvent~MapBrowserEvent} and\n * returns a boolean to indicate whether a new vertex can be added to the sketch\n * features. Default is {@link module:ol/events/condition~always}.\n * @property {number} [pixelTolerance=10] Pixel tolerance for considering the\n * pointer close enough to a segment or vertex for editing.\n * @property {module:ol/style/Style|Array.<module:ol/style/Style>|module:ol/style/Style~StyleFunction} [style]\n * Style used for the features being modified. By default the default edit\n * style is used (see {@link module:ol/style}).\n * @property {module:ol/source/Vector} [source] The vector source with\n * features to modify.  If a vector source is not provided, a feature collection\n * must be provided with the features option.\n * @property {module:ol/Collection.<module:ol/Feature>} [features]\n * The features the interaction works on.  If a feature collection is not\n * provided, a vector source must be provided with the source option.\n * @property {boolean} [wrapX=false] Wrap the world horizontally on the sketch\n * overlay.\n */\n\n/**\n * @classdesc\n * Events emitted by {@link module:ol/interaction/Modify~Modify} instances are\n * instances of this type.\n *\n * @constructor\n * @extends {module:ol/events/Event}\n * @param {ModifyEventType} type Type.\n * @param {module:ol/Collection.<module:ol/Feature>} features\n * The features modified.\n * @param {module:ol/MapBrowserPointerEvent} mapBrowserPointerEvent\n * Associated {@link module:ol/MapBrowserPointerEvent}.\n */\n\nexport const ModifyEvent = function (type, features, mapBrowserPointerEvent) {\n  Event.call(this, type);\n  /**\n   * The features being modified.\n   * @type {module:ol/Collection.<module:ol/Feature>}\n   * @api\n   */\n\n  this.features = features;\n  /**\n   * Associated {@link module:ol/MapBrowserEvent}.\n   * @type {module:ol/MapBrowserEvent}\n   * @api\n   */\n\n  this.mapBrowserEvent = mapBrowserPointerEvent;\n};\ninherits(ModifyEvent, Event);\n/**\n * @classdesc\n * Interaction for modifying feature geometries.  To modify features that have\n * been added to an existing source, construct the modify interaction with the\n * `source` option.  If you want to modify features in a collection (for example,\n * the collection used by a select interaction), construct the interaction with\n * the `features` option.  The interaction must be constructed with either a\n * `source` or `features` option.\n *\n * By default, the interaction will allow deletion of vertices when the `alt`\n * key is pressed.  To configure the interaction with a different condition\n * for deletion, use the `deleteCondition` option.\n *\n * @constructor\n * @extends {module:ol/interaction/Pointer}\n * @param {module:ol/interaction/Modify~Options} options Options.\n * @fires module:ol/interaction/Modify~ModifyEvent\n * @api\n */\n\nconst Modify = function (options) {\n  PointerInteraction.call(this, {\n    handleDownEvent: handleDownEvent,\n    handleDragEvent: handleDragEvent,\n    handleEvent: handleEvent,\n    handleUpEvent: handleUpEvent\n  });\n  /**\n   * @private\n   * @type {module:ol/events/condition~Condition}\n   */\n\n  this.condition_ = options.condition ? options.condition : primaryAction;\n  /**\n   * @private\n   * @param {module:ol/MapBrowserEvent} mapBrowserEvent Browser event.\n   * @return {boolean} Combined condition result.\n   */\n\n  this.defaultDeleteCondition_ = function (mapBrowserEvent) {\n    return altKeyOnly(mapBrowserEvent) && singleClick(mapBrowserEvent);\n  };\n  /**\n   * @type {module:ol/events/condition~Condition}\n   * @private\n   */\n\n\n  this.deleteCondition_ = options.deleteCondition ? options.deleteCondition : this.defaultDeleteCondition_;\n  /**\n   * @type {module:ol/events/condition~Condition}\n   * @private\n   */\n\n  this.insertVertexCondition_ = options.insertVertexCondition ? options.insertVertexCondition : always;\n  /**\n   * Editing vertex.\n   * @type {module:ol/Feature}\n   * @private\n   */\n\n  this.vertexFeature_ = null;\n  /**\n   * Segments intersecting {@link this.vertexFeature_} by segment uid.\n   * @type {Object.<string, boolean>}\n   * @private\n   */\n\n  this.vertexSegments_ = null;\n  /**\n   * @type {module:ol~Pixel}\n   * @private\n   */\n\n  this.lastPixel_ = [0, 0];\n  /**\n   * Tracks if the next `singleclick` event should be ignored to prevent\n   * accidental deletion right after vertex creation.\n   * @type {boolean}\n   * @private\n   */\n\n  this.ignoreNextSingleClick_ = false;\n  /**\n   * @type {boolean}\n   * @private\n   */\n\n  this.modified_ = false;\n  /**\n   * Segment RTree for each layer\n   * @type {module:ol/structs/RBush.<module:ol/interaction/Modify~SegmentData>}\n   * @private\n   */\n\n  this.rBush_ = new RBush();\n  /**\n   * @type {number}\n   * @private\n   */\n\n  this.pixelTolerance_ = options.pixelTolerance !== undefined ? options.pixelTolerance : 10;\n  /**\n   * @type {boolean}\n   * @private\n   */\n\n  this.snappedToVertex_ = false;\n  /**\n   * Indicate whether the interaction is currently changing a feature's\n   * coordinates.\n   * @type {boolean}\n   * @private\n   */\n\n  this.changingFeature_ = false;\n  /**\n   * @type {Array}\n   * @private\n   */\n\n  this.dragSegments_ = [];\n  /**\n   * Draw overlay where sketch features are drawn.\n   * @type {module:ol/layer/Vector}\n   * @private\n   */\n\n  this.overlay_ = new VectorLayer({\n    source: new VectorSource({\n      useSpatialIndex: false,\n      wrapX: !!options.wrapX\n    }),\n    style: options.style ? options.style : getDefaultStyleFunction(),\n    updateWhileAnimating: true,\n    updateWhileInteracting: true\n  });\n  /**\n   * @const\n   * @private\n   * @type {!Object.<string, function(module:ol/Feature, module:ol/geom/Geometry)>}\n   */\n\n  this.SEGMENT_WRITERS_ = {\n    'Point': this.writePointGeometry_,\n    'LineString': this.writeLineStringGeometry_,\n    'LinearRing': this.writeLineStringGeometry_,\n    'Polygon': this.writePolygonGeometry_,\n    'MultiPoint': this.writeMultiPointGeometry_,\n    'MultiLineString': this.writeMultiLineStringGeometry_,\n    'MultiPolygon': this.writeMultiPolygonGeometry_,\n    'Circle': this.writeCircleGeometry_,\n    'GeometryCollection': this.writeGeometryCollectionGeometry_\n  };\n  /**\n   * @type {module:ol/source/Vector}\n   * @private\n   */\n\n  this.source_ = null;\n  let features;\n\n  if (options.source) {\n    this.source_ = options.source;\n    features = new Collection(this.source_.getFeatures());\n    listen(this.source_, VectorEventType.ADDFEATURE, this.handleSourceAdd_, this);\n    listen(this.source_, VectorEventType.REMOVEFEATURE, this.handleSourceRemove_, this);\n  } else {\n    features = options.features;\n  }\n\n  if (!features) {\n    throw new Error('The modify interaction requires features or a source');\n  }\n  /**\n   * @type {module:ol/Collection.<module:ol/Feature>}\n   * @private\n   */\n\n\n  this.features_ = features;\n  this.features_.forEach(this.addFeature_.bind(this));\n  listen(this.features_, CollectionEventType.ADD, this.handleFeatureAdd_, this);\n  listen(this.features_, CollectionEventType.REMOVE, this.handleFeatureRemove_, this);\n  /**\n   * @type {module:ol/MapBrowserPointerEvent}\n   * @private\n   */\n\n  this.lastPointerEvent_ = null;\n};\n\ninherits(Modify, PointerInteraction);\n/**\n * The segment index assigned to a circle's center when\n * breaking up a circle into ModifySegmentDataType segments.\n * @type {number}\n */\n\nconst CIRCLE_CENTER_INDEX = 0;\n/**\n * The segment index assigned to a circle's circumference when\n * breaking up a circle into ModifySegmentDataType segments.\n * @type {number}\n */\n\nconst CIRCLE_CIRCUMFERENCE_INDEX = 1;\n/**\n * @param {module:ol/Feature} feature Feature.\n * @private\n */\n\nModify.prototype.addFeature_ = function (feature) {\n  const geometry = feature.getGeometry();\n\n  if (geometry && geometry.getType() in this.SEGMENT_WRITERS_) {\n    this.SEGMENT_WRITERS_[geometry.getType()].call(this, feature, geometry);\n  }\n\n  const map = this.getMap();\n\n  if (map && map.isRendered() && this.getActive()) {\n    this.handlePointerAtPixel_(this.lastPixel_, map);\n  }\n\n  listen(feature, EventType.CHANGE, this.handleFeatureChange_, this);\n};\n/**\n * @param {module:ol/MapBrowserPointerEvent} evt Map browser event\n * @private\n */\n\n\nModify.prototype.willModifyFeatures_ = function (evt) {\n  if (!this.modified_) {\n    this.modified_ = true;\n    this.dispatchEvent(new ModifyEvent(ModifyEventType.MODIFYSTART, this.features_, evt));\n  }\n};\n/**\n * @param {module:ol/Feature} feature Feature.\n * @private\n */\n\n\nModify.prototype.removeFeature_ = function (feature) {\n  this.removeFeatureSegmentData_(feature); // Remove the vertex feature if the collection of canditate features\n  // is empty.\n\n  if (this.vertexFeature_ && this.features_.getLength() === 0) {\n    this.overlay_.getSource().removeFeature(this.vertexFeature_);\n    this.vertexFeature_ = null;\n  }\n\n  unlisten(feature, EventType.CHANGE, this.handleFeatureChange_, this);\n};\n/**\n * @param {module:ol/Feature} feature Feature.\n * @private\n */\n\n\nModify.prototype.removeFeatureSegmentData_ = function (feature) {\n  const rBush = this.rBush_;\n  const\n  /** @type {Array.<module:ol/interaction/Modify~SegmentData>} */\n  nodesToRemove = [];\n  rBush.forEach(\n  /**\n   * @param {module:ol/interaction/Modify~SegmentData} node RTree node.\n   */\n  function (node) {\n    if (feature === node.feature) {\n      nodesToRemove.push(node);\n    }\n  });\n\n  for (let i = nodesToRemove.length - 1; i >= 0; --i) {\n    rBush.remove(nodesToRemove[i]);\n  }\n};\n/**\n * @inheritDoc\n */\n\n\nModify.prototype.setActive = function (active) {\n  if (this.vertexFeature_ && !active) {\n    this.overlay_.getSource().removeFeature(this.vertexFeature_);\n    this.vertexFeature_ = null;\n  }\n\n  PointerInteraction.prototype.setActive.call(this, active);\n};\n/**\n * @inheritDoc\n */\n\n\nModify.prototype.setMap = function (map) {\n  this.overlay_.setMap(map);\n  PointerInteraction.prototype.setMap.call(this, map);\n};\n/**\n * @param {module:ol/source/Vector~VectorSourceEvent} event Event.\n * @private\n */\n\n\nModify.prototype.handleSourceAdd_ = function (event) {\n  if (event.feature) {\n    this.features_.push(event.feature);\n  }\n};\n/**\n * @param {module:ol/source/Vector~VectorSourceEvent} event Event.\n * @private\n */\n\n\nModify.prototype.handleSourceRemove_ = function (event) {\n  if (event.feature) {\n    this.features_.remove(event.feature);\n  }\n};\n/**\n * @param {module:ol/Collection~CollectionEvent} evt Event.\n * @private\n */\n\n\nModify.prototype.handleFeatureAdd_ = function (evt) {\n  this.addFeature_(\n  /** @type {module:ol/Feature} */\n  evt.element);\n};\n/**\n * @param {module:ol/events/Event} evt Event.\n * @private\n */\n\n\nModify.prototype.handleFeatureChange_ = function (evt) {\n  if (!this.changingFeature_) {\n    const feature =\n    /** @type {module:ol/Feature} */\n    evt.target;\n    this.removeFeature_(feature);\n    this.addFeature_(feature);\n  }\n};\n/**\n * @param {module:ol/Collection~CollectionEvent} evt Event.\n * @private\n */\n\n\nModify.prototype.handleFeatureRemove_ = function (evt) {\n  const feature =\n  /** @type {module:ol/Feature} */\n  evt.element;\n  this.removeFeature_(feature);\n};\n/**\n * @param {module:ol/Feature} feature Feature\n * @param {module:ol/geom/Point} geometry Geometry.\n * @private\n */\n\n\nModify.prototype.writePointGeometry_ = function (feature, geometry) {\n  const coordinates = geometry.getCoordinates();\n  const segmentData =\n  /** @type {module:ol/interaction/Modify~SegmentData} */\n  {\n    feature: feature,\n    geometry: geometry,\n    segment: [coordinates, coordinates]\n  };\n  this.rBush_.insert(geometry.getExtent(), segmentData);\n};\n/**\n * @param {module:ol/Feature} feature Feature\n * @param {module:ol/geom/MultiPoint} geometry Geometry.\n * @private\n */\n\n\nModify.prototype.writeMultiPointGeometry_ = function (feature, geometry) {\n  const points = geometry.getCoordinates();\n\n  for (let i = 0, ii = points.length; i < ii; ++i) {\n    const coordinates = points[i];\n    const segmentData =\n    /** @type {module:ol/interaction/Modify~SegmentData} */\n    {\n      feature: feature,\n      geometry: geometry,\n      depth: [i],\n      index: i,\n      segment: [coordinates, coordinates]\n    };\n    this.rBush_.insert(geometry.getExtent(), segmentData);\n  }\n};\n/**\n * @param {module:ol/Feature} feature Feature\n * @param {module:ol/geom/LineString} geometry Geometry.\n * @private\n */\n\n\nModify.prototype.writeLineStringGeometry_ = function (feature, geometry) {\n  const coordinates = geometry.getCoordinates();\n\n  for (let i = 0, ii = coordinates.length - 1; i < ii; ++i) {\n    const segment = coordinates.slice(i, i + 2);\n    const segmentData =\n    /** @type {module:ol/interaction/Modify~SegmentData} */\n    {\n      feature: feature,\n      geometry: geometry,\n      index: i,\n      segment: segment\n    };\n    this.rBush_.insert(boundingExtent(segment), segmentData);\n  }\n};\n/**\n * @param {module:ol/Feature} feature Feature\n * @param {module:ol/geom/MultiLineString} geometry Geometry.\n * @private\n */\n\n\nModify.prototype.writeMultiLineStringGeometry_ = function (feature, geometry) {\n  const lines = geometry.getCoordinates();\n\n  for (let j = 0, jj = lines.length; j < jj; ++j) {\n    const coordinates = lines[j];\n\n    for (let i = 0, ii = coordinates.length - 1; i < ii; ++i) {\n      const segment = coordinates.slice(i, i + 2);\n      const segmentData =\n      /** @type {module:ol/interaction/Modify~SegmentData} */\n      {\n        feature: feature,\n        geometry: geometry,\n        depth: [j],\n        index: i,\n        segment: segment\n      };\n      this.rBush_.insert(boundingExtent(segment), segmentData);\n    }\n  }\n};\n/**\n * @param {module:ol/Feature} feature Feature\n * @param {module:ol/geom/Polygon} geometry Geometry.\n * @private\n */\n\n\nModify.prototype.writePolygonGeometry_ = function (feature, geometry) {\n  const rings = geometry.getCoordinates();\n\n  for (let j = 0, jj = rings.length; j < jj; ++j) {\n    const coordinates = rings[j];\n\n    for (let i = 0, ii = coordinates.length - 1; i < ii; ++i) {\n      const segment = coordinates.slice(i, i + 2);\n      const segmentData =\n      /** @type {module:ol/interaction/Modify~SegmentData} */\n      {\n        feature: feature,\n        geometry: geometry,\n        depth: [j],\n        index: i,\n        segment: segment\n      };\n      this.rBush_.insert(boundingExtent(segment), segmentData);\n    }\n  }\n};\n/**\n * @param {module:ol/Feature} feature Feature\n * @param {module:ol/geom/MultiPolygon} geometry Geometry.\n * @private\n */\n\n\nModify.prototype.writeMultiPolygonGeometry_ = function (feature, geometry) {\n  const polygons = geometry.getCoordinates();\n\n  for (let k = 0, kk = polygons.length; k < kk; ++k) {\n    const rings = polygons[k];\n\n    for (let j = 0, jj = rings.length; j < jj; ++j) {\n      const coordinates = rings[j];\n\n      for (let i = 0, ii = coordinates.length - 1; i < ii; ++i) {\n        const segment = coordinates.slice(i, i + 2);\n        const segmentData =\n        /** @type {module:ol/interaction/Modify~SegmentData} */\n        {\n          feature: feature,\n          geometry: geometry,\n          depth: [j, k],\n          index: i,\n          segment: segment\n        };\n        this.rBush_.insert(boundingExtent(segment), segmentData);\n      }\n    }\n  }\n};\n/**\n * We convert a circle into two segments.  The segment at index\n * {@link CIRCLE_CENTER_INDEX} is the\n * circle's center (a point).  The segment at index\n * {@link CIRCLE_CIRCUMFERENCE_INDEX} is\n * the circumference, and is not a line segment.\n *\n * @param {module:ol/Feature} feature Feature.\n * @param {module:ol/geom/Circle} geometry Geometry.\n * @private\n */\n\n\nModify.prototype.writeCircleGeometry_ = function (feature, geometry) {\n  const coordinates = geometry.getCenter();\n  const centerSegmentData =\n  /** @type {module:ol/interaction/Modify~SegmentData} */\n  {\n    feature: feature,\n    geometry: geometry,\n    index: CIRCLE_CENTER_INDEX,\n    segment: [coordinates, coordinates]\n  };\n  const circumferenceSegmentData =\n  /** @type {module:ol/interaction/Modify~SegmentData} */\n  {\n    feature: feature,\n    geometry: geometry,\n    index: CIRCLE_CIRCUMFERENCE_INDEX,\n    segment: [coordinates, coordinates]\n  };\n  const featureSegments = [centerSegmentData, circumferenceSegmentData];\n  centerSegmentData.featureSegments = circumferenceSegmentData.featureSegments = featureSegments;\n  this.rBush_.insert(createOrUpdateFromCoordinate(coordinates), centerSegmentData);\n  this.rBush_.insert(geometry.getExtent(), circumferenceSegmentData);\n};\n/**\n * @param {module:ol/Feature} feature Feature\n * @param {module:ol/geom/GeometryCollection} geometry Geometry.\n * @private\n */\n\n\nModify.prototype.writeGeometryCollectionGeometry_ = function (feature, geometry) {\n  const geometries = geometry.getGeometriesArray();\n\n  for (let i = 0; i < geometries.length; ++i) {\n    this.SEGMENT_WRITERS_[geometries[i].getType()].call(this, feature, geometries[i]);\n  }\n};\n/**\n * @param {module:ol/coordinate~Coordinate} coordinates Coordinates.\n * @return {module:ol/Feature} Vertex feature.\n * @private\n */\n\n\nModify.prototype.createOrUpdateVertexFeature_ = function (coordinates) {\n  let vertexFeature = this.vertexFeature_;\n\n  if (!vertexFeature) {\n    vertexFeature = new Feature(new Point(coordinates));\n    this.vertexFeature_ = vertexFeature;\n    this.overlay_.getSource().addFeature(vertexFeature);\n  } else {\n    const geometry =\n    /** @type {module:ol/geom/Point} */\n    vertexFeature.getGeometry();\n    geometry.setCoordinates(coordinates);\n  }\n\n  return vertexFeature;\n};\n/**\n * @param {module:ol/interaction/Modify~SegmentData} a The first segment data.\n * @param {module:ol/interaction/Modify~SegmentData} b The second segment data.\n * @return {number} The difference in indexes.\n */\n\n\nfunction compareIndexes(a, b) {\n  return a.index - b.index;\n}\n/**\n * @param {module:ol/MapBrowserPointerEvent} evt Event.\n * @return {boolean} Start drag sequence?\n * @this {module:ol/interaction/Modify}\n */\n\n\nfunction handleDownEvent(evt) {\n  if (!this.condition_(evt)) {\n    return false;\n  }\n\n  this.handlePointerAtPixel_(evt.pixel, evt.map);\n  const pixelCoordinate = evt.map.getCoordinateFromPixel(evt.pixel);\n  this.dragSegments_.length = 0;\n  this.modified_ = false;\n  const vertexFeature = this.vertexFeature_;\n\n  if (vertexFeature) {\n    const insertVertices = [];\n    const geometry =\n    /** @type {module:ol/geom/Point} */\n    vertexFeature.getGeometry();\n    const vertex = geometry.getCoordinates();\n    const vertexExtent = boundingExtent([vertex]);\n    const segmentDataMatches = this.rBush_.getInExtent(vertexExtent);\n    const componentSegments = {};\n    segmentDataMatches.sort(compareIndexes);\n\n    for (let i = 0, ii = segmentDataMatches.length; i < ii; ++i) {\n      const segmentDataMatch = segmentDataMatches[i];\n      const segment = segmentDataMatch.segment;\n      let uid = getUid(segmentDataMatch.feature);\n      const depth = segmentDataMatch.depth;\n\n      if (depth) {\n        uid += '-' + depth.join('-'); // separate feature components\n      }\n\n      if (!componentSegments[uid]) {\n        componentSegments[uid] = new Array(2);\n      }\n\n      if (segmentDataMatch.geometry.getType() === GeometryType.CIRCLE && segmentDataMatch.index === CIRCLE_CIRCUMFERENCE_INDEX) {\n        const closestVertex = closestOnSegmentData(pixelCoordinate, segmentDataMatch);\n\n        if (coordinatesEqual(closestVertex, vertex) && !componentSegments[uid][0]) {\n          this.dragSegments_.push([segmentDataMatch, 0]);\n          componentSegments[uid][0] = segmentDataMatch;\n        }\n      } else if (coordinatesEqual(segment[0], vertex) && !componentSegments[uid][0]) {\n        this.dragSegments_.push([segmentDataMatch, 0]);\n        componentSegments[uid][0] = segmentDataMatch;\n      } else if (coordinatesEqual(segment[1], vertex) && !componentSegments[uid][1]) {\n        // prevent dragging closed linestrings by the connecting node\n        if ((segmentDataMatch.geometry.getType() === GeometryType.LINE_STRING || segmentDataMatch.geometry.getType() === GeometryType.MULTI_LINE_STRING) && componentSegments[uid][0] && componentSegments[uid][0].index === 0) {\n          continue;\n        }\n\n        this.dragSegments_.push([segmentDataMatch, 1]);\n        componentSegments[uid][1] = segmentDataMatch;\n      } else if (this.insertVertexCondition_(evt) && getUid(segment) in this.vertexSegments_ && !componentSegments[uid][0] && !componentSegments[uid][1]) {\n        insertVertices.push([segmentDataMatch, vertex]);\n      }\n    }\n\n    if (insertVertices.length) {\n      this.willModifyFeatures_(evt);\n    }\n\n    for (let j = insertVertices.length - 1; j >= 0; --j) {\n      this.insertVertex_.apply(this, insertVertices[j]);\n    }\n  }\n\n  return !!this.vertexFeature_;\n}\n/**\n * @param {module:ol/MapBrowserPointerEvent} evt Event.\n * @this {module:ol/interaction/Modify}\n */\n\n\nfunction handleDragEvent(evt) {\n  this.ignoreNextSingleClick_ = false;\n  this.willModifyFeatures_(evt);\n  const vertex = evt.coordinate;\n\n  for (let i = 0, ii = this.dragSegments_.length; i < ii; ++i) {\n    const dragSegment = this.dragSegments_[i];\n    const segmentData = dragSegment[0];\n    const depth = segmentData.depth;\n    const geometry = segmentData.geometry;\n    let coordinates;\n    const segment = segmentData.segment;\n    const index = dragSegment[1];\n\n    while (vertex.length < geometry.getStride()) {\n      vertex.push(segment[index][vertex.length]);\n    }\n\n    switch (geometry.getType()) {\n      case GeometryType.POINT:\n        coordinates = vertex;\n        segment[0] = segment[1] = vertex;\n        break;\n\n      case GeometryType.MULTI_POINT:\n        coordinates = geometry.getCoordinates();\n        coordinates[segmentData.index] = vertex;\n        segment[0] = segment[1] = vertex;\n        break;\n\n      case GeometryType.LINE_STRING:\n        coordinates = geometry.getCoordinates();\n        coordinates[segmentData.index + index] = vertex;\n        segment[index] = vertex;\n        break;\n\n      case GeometryType.MULTI_LINE_STRING:\n        coordinates = geometry.getCoordinates();\n        coordinates[depth[0]][segmentData.index + index] = vertex;\n        segment[index] = vertex;\n        break;\n\n      case GeometryType.POLYGON:\n        coordinates = geometry.getCoordinates();\n        coordinates[depth[0]][segmentData.index + index] = vertex;\n        segment[index] = vertex;\n        break;\n\n      case GeometryType.MULTI_POLYGON:\n        coordinates = geometry.getCoordinates();\n        coordinates[depth[1]][depth[0]][segmentData.index + index] = vertex;\n        segment[index] = vertex;\n        break;\n\n      case GeometryType.CIRCLE:\n        segment[0] = segment[1] = vertex;\n\n        if (segmentData.index === CIRCLE_CENTER_INDEX) {\n          this.changingFeature_ = true;\n          geometry.setCenter(vertex);\n          this.changingFeature_ = false;\n        } else {\n          // We're dragging the circle's circumference:\n          this.changingFeature_ = true;\n          geometry.setRadius(coordinateDistance(geometry.getCenter(), vertex));\n          this.changingFeature_ = false;\n        }\n\n        break;\n\n      default: // pass\n\n    }\n\n    if (coordinates) {\n      this.setGeometryCoordinates_(geometry, coordinates);\n    }\n  }\n\n  this.createOrUpdateVertexFeature_(vertex);\n}\n/**\n * @param {module:ol/MapBrowserPointerEvent} evt Event.\n * @return {boolean} Stop drag sequence?\n * @this {module:ol/interaction/Modify}\n */\n\n\nfunction handleUpEvent(evt) {\n  for (let i = this.dragSegments_.length - 1; i >= 0; --i) {\n    const segmentData = this.dragSegments_[i][0];\n    const geometry = segmentData.geometry;\n\n    if (geometry.getType() === GeometryType.CIRCLE) {\n      // Update a circle object in the R* bush:\n      const coordinates = geometry.getCenter();\n      const centerSegmentData = segmentData.featureSegments[0];\n      const circumferenceSegmentData = segmentData.featureSegments[1];\n      centerSegmentData.segment[0] = centerSegmentData.segment[1] = coordinates;\n      circumferenceSegmentData.segment[0] = circumferenceSegmentData.segment[1] = coordinates;\n      this.rBush_.update(createOrUpdateFromCoordinate(coordinates), centerSegmentData);\n      this.rBush_.update(geometry.getExtent(), circumferenceSegmentData);\n    } else {\n      this.rBush_.update(boundingExtent(segmentData.segment), segmentData);\n    }\n  }\n\n  if (this.modified_) {\n    this.dispatchEvent(new ModifyEvent(ModifyEventType.MODIFYEND, this.features_, evt));\n    this.modified_ = false;\n  }\n\n  return false;\n}\n/**\n * Handles the {@link module:ol/MapBrowserEvent map browser event} and may modify the\n * geometry.\n * @param {module:ol/MapBrowserEvent} mapBrowserEvent Map browser event.\n * @return {boolean} `false` to stop event propagation.\n * @this {module:ol/interaction/Modify}\n */\n\n\nfunction handleEvent(mapBrowserEvent) {\n  if (!(mapBrowserEvent instanceof MapBrowserPointerEvent)) {\n    return true;\n  }\n\n  this.lastPointerEvent_ = mapBrowserEvent;\n  let handled;\n\n  if (!mapBrowserEvent.map.getView().getInteracting() && mapBrowserEvent.type == MapBrowserEventType.POINTERMOVE && !this.handlingDownUpSequence) {\n    this.handlePointerMove_(mapBrowserEvent);\n  }\n\n  if (this.vertexFeature_ && this.deleteCondition_(mapBrowserEvent)) {\n    if (mapBrowserEvent.type != MapBrowserEventType.SINGLECLICK || !this.ignoreNextSingleClick_) {\n      handled = this.removePoint();\n    } else {\n      handled = true;\n    }\n  }\n\n  if (mapBrowserEvent.type == MapBrowserEventType.SINGLECLICK) {\n    this.ignoreNextSingleClick_ = false;\n  }\n\n  return handlePointerEvent.call(this, mapBrowserEvent) && !handled;\n}\n/**\n * @param {module:ol/MapBrowserEvent} evt Event.\n * @private\n */\n\n\nModify.prototype.handlePointerMove_ = function (evt) {\n  this.lastPixel_ = evt.pixel;\n  this.handlePointerAtPixel_(evt.pixel, evt.map);\n};\n/**\n * @param {module:ol~Pixel} pixel Pixel\n * @param {module:ol/PluggableMap} map Map.\n * @private\n */\n\n\nModify.prototype.handlePointerAtPixel_ = function (pixel, map) {\n  const pixelCoordinate = map.getCoordinateFromPixel(pixel);\n\n  const sortByDistance = function (a, b) {\n    return pointDistanceToSegmentDataSquared(pixelCoordinate, a) - pointDistanceToSegmentDataSquared(pixelCoordinate, b);\n  };\n\n  const box = buffer(createOrUpdateFromCoordinate(pixelCoordinate), map.getView().getResolution() * this.pixelTolerance_);\n  const rBush = this.rBush_;\n  const nodes = rBush.getInExtent(box);\n\n  if (nodes.length > 0) {\n    nodes.sort(sortByDistance);\n    const node = nodes[0];\n    const closestSegment = node.segment;\n    let vertex = closestOnSegmentData(pixelCoordinate, node);\n    const vertexPixel = map.getPixelFromCoordinate(vertex);\n    let dist = coordinateDistance(pixel, vertexPixel);\n\n    if (dist <= this.pixelTolerance_) {\n      const vertexSegments = {};\n\n      if (node.geometry.getType() === GeometryType.CIRCLE && node.index === CIRCLE_CIRCUMFERENCE_INDEX) {\n        this.snappedToVertex_ = true;\n        this.createOrUpdateVertexFeature_(vertex);\n      } else {\n        const pixel1 = map.getPixelFromCoordinate(closestSegment[0]);\n        const pixel2 = map.getPixelFromCoordinate(closestSegment[1]);\n        const squaredDist1 = squaredCoordinateDistance(vertexPixel, pixel1);\n        const squaredDist2 = squaredCoordinateDistance(vertexPixel, pixel2);\n        dist = Math.sqrt(Math.min(squaredDist1, squaredDist2));\n        this.snappedToVertex_ = dist <= this.pixelTolerance_;\n\n        if (this.snappedToVertex_) {\n          vertex = squaredDist1 > squaredDist2 ? closestSegment[1] : closestSegment[0];\n        }\n\n        this.createOrUpdateVertexFeature_(vertex);\n\n        for (let i = 1, ii = nodes.length; i < ii; ++i) {\n          const segment = nodes[i].segment;\n\n          if (coordinatesEqual(closestSegment[0], segment[0]) && coordinatesEqual(closestSegment[1], segment[1]) || coordinatesEqual(closestSegment[0], segment[1]) && coordinatesEqual(closestSegment[1], segment[0])) {\n            vertexSegments[getUid(segment)] = true;\n          } else {\n            break;\n          }\n        }\n      }\n\n      vertexSegments[getUid(closestSegment)] = true;\n      this.vertexSegments_ = vertexSegments;\n      return;\n    }\n  }\n\n  if (this.vertexFeature_) {\n    this.overlay_.getSource().removeFeature(this.vertexFeature_);\n    this.vertexFeature_ = null;\n  }\n};\n/**\n * Returns the distance from a point to a line segment.\n *\n * @param {module:ol/coordinate~Coordinate} pointCoordinates The coordinates of the point from\n *        which to calculate the distance.\n * @param {module:ol/interaction/Modify~SegmentData} segmentData The object describing the line\n *        segment we are calculating the distance to.\n * @return {number} The square of the distance between a point and a line segment.\n */\n\n\nfunction pointDistanceToSegmentDataSquared(pointCoordinates, segmentData) {\n  const geometry = segmentData.geometry;\n\n  if (geometry.getType() === GeometryType.CIRCLE) {\n    const circleGeometry =\n    /** @type {module:ol/geom/Circle} */\n    geometry;\n\n    if (segmentData.index === CIRCLE_CIRCUMFERENCE_INDEX) {\n      const distanceToCenterSquared = squaredCoordinateDistance(circleGeometry.getCenter(), pointCoordinates);\n      const distanceToCircumference = Math.sqrt(distanceToCenterSquared) - circleGeometry.getRadius();\n      return distanceToCircumference * distanceToCircumference;\n    }\n  }\n\n  return squaredDistanceToSegment(pointCoordinates, segmentData.segment);\n}\n/**\n * Returns the point closest to a given line segment.\n *\n * @param {module:ol/coordinate~Coordinate} pointCoordinates The point to which a closest point\n *        should be found.\n * @param {module:ol/interaction/Modify~SegmentData} segmentData The object describing the line\n *        segment which should contain the closest point.\n * @return {module:ol/coordinate~Coordinate} The point closest to the specified line segment.\n */\n\n\nfunction closestOnSegmentData(pointCoordinates, segmentData) {\n  const geometry = segmentData.geometry;\n\n  if (geometry.getType() === GeometryType.CIRCLE && segmentData.index === CIRCLE_CIRCUMFERENCE_INDEX) {\n    return geometry.getClosestPoint(pointCoordinates);\n  }\n\n  return closestOnSegment(pointCoordinates, segmentData.segment);\n}\n/**\n * @param {module:ol/interaction/Modify~SegmentData} segmentData Segment data.\n * @param {module:ol/coordinate~Coordinate} vertex Vertex.\n * @private\n */\n\n\nModify.prototype.insertVertex_ = function (segmentData, vertex) {\n  const segment = segmentData.segment;\n  const feature = segmentData.feature;\n  const geometry = segmentData.geometry;\n  const depth = segmentData.depth;\n  const index =\n  /** @type {number} */\n  segmentData.index;\n  let coordinates;\n\n  while (vertex.length < geometry.getStride()) {\n    vertex.push(0);\n  }\n\n  switch (geometry.getType()) {\n    case GeometryType.MULTI_LINE_STRING:\n      coordinates = geometry.getCoordinates();\n      coordinates[depth[0]].splice(index + 1, 0, vertex);\n      break;\n\n    case GeometryType.POLYGON:\n      coordinates = geometry.getCoordinates();\n      coordinates[depth[0]].splice(index + 1, 0, vertex);\n      break;\n\n    case GeometryType.MULTI_POLYGON:\n      coordinates = geometry.getCoordinates();\n      coordinates[depth[1]][depth[0]].splice(index + 1, 0, vertex);\n      break;\n\n    case GeometryType.LINE_STRING:\n      coordinates = geometry.getCoordinates();\n      coordinates.splice(index + 1, 0, vertex);\n      break;\n\n    default:\n      return;\n  }\n\n  this.setGeometryCoordinates_(geometry, coordinates);\n  const rTree = this.rBush_;\n  rTree.remove(segmentData);\n  this.updateSegmentIndices_(geometry, index, depth, 1);\n  const newSegmentData =\n  /** @type {module:ol/interaction/Modify~SegmentData} */\n  {\n    segment: [segment[0], vertex],\n    feature: feature,\n    geometry: geometry,\n    depth: depth,\n    index: index\n  };\n  rTree.insert(boundingExtent(newSegmentData.segment), newSegmentData);\n  this.dragSegments_.push([newSegmentData, 1]);\n  const newSegmentData2 =\n  /** @type {module:ol/interaction/Modify~SegmentData} */\n  {\n    segment: [vertex, segment[1]],\n    feature: feature,\n    geometry: geometry,\n    depth: depth,\n    index: index + 1\n  };\n  rTree.insert(boundingExtent(newSegmentData2.segment), newSegmentData2);\n  this.dragSegments_.push([newSegmentData2, 0]);\n  this.ignoreNextSingleClick_ = true;\n};\n/**\n * Removes the vertex currently being pointed.\n * @return {boolean} True when a vertex was removed.\n * @api\n */\n\n\nModify.prototype.removePoint = function () {\n  if (this.lastPointerEvent_ && this.lastPointerEvent_.type != MapBrowserEventType.POINTERDRAG) {\n    const evt = this.lastPointerEvent_;\n    this.willModifyFeatures_(evt);\n    this.removeVertex_();\n    this.dispatchEvent(new ModifyEvent(ModifyEventType.MODIFYEND, this.features_, evt));\n    this.modified_ = false;\n    return true;\n  }\n\n  return false;\n};\n/**\n * Removes a vertex from all matching features.\n * @return {boolean} True when a vertex was removed.\n * @private\n */\n\n\nModify.prototype.removeVertex_ = function () {\n  const dragSegments = this.dragSegments_;\n  const segmentsByFeature = {};\n  let deleted = false;\n  let component, coordinates, dragSegment, geometry, i, index, left;\n  let newIndex, right, segmentData, uid;\n\n  for (i = dragSegments.length - 1; i >= 0; --i) {\n    dragSegment = dragSegments[i];\n    segmentData = dragSegment[0];\n    uid = getUid(segmentData.feature);\n\n    if (segmentData.depth) {\n      // separate feature components\n      uid += '-' + segmentData.depth.join('-');\n    }\n\n    if (!(uid in segmentsByFeature)) {\n      segmentsByFeature[uid] = {};\n    }\n\n    if (dragSegment[1] === 0) {\n      segmentsByFeature[uid].right = segmentData;\n      segmentsByFeature[uid].index = segmentData.index;\n    } else if (dragSegment[1] == 1) {\n      segmentsByFeature[uid].left = segmentData;\n      segmentsByFeature[uid].index = segmentData.index + 1;\n    }\n  }\n\n  for (uid in segmentsByFeature) {\n    right = segmentsByFeature[uid].right;\n    left = segmentsByFeature[uid].left;\n    index = segmentsByFeature[uid].index;\n    newIndex = index - 1;\n\n    if (left !== undefined) {\n      segmentData = left;\n    } else {\n      segmentData = right;\n    }\n\n    if (newIndex < 0) {\n      newIndex = 0;\n    }\n\n    geometry = segmentData.geometry;\n    coordinates = geometry.getCoordinates();\n    component = coordinates;\n    deleted = false;\n\n    switch (geometry.getType()) {\n      case GeometryType.MULTI_LINE_STRING:\n        if (coordinates[segmentData.depth[0]].length > 2) {\n          coordinates[segmentData.depth[0]].splice(index, 1);\n          deleted = true;\n        }\n\n        break;\n\n      case GeometryType.LINE_STRING:\n        if (coordinates.length > 2) {\n          coordinates.splice(index, 1);\n          deleted = true;\n        }\n\n        break;\n\n      case GeometryType.MULTI_POLYGON:\n        component = component[segmentData.depth[1]];\n\n      /* falls through */\n\n      case GeometryType.POLYGON:\n        component = component[segmentData.depth[0]];\n\n        if (component.length > 4) {\n          if (index == component.length - 1) {\n            index = 0;\n          }\n\n          component.splice(index, 1);\n          deleted = true;\n\n          if (index === 0) {\n            // close the ring again\n            component.pop();\n            component.push(component[0]);\n            newIndex = component.length - 1;\n          }\n        }\n\n        break;\n\n      default: // pass\n\n    }\n\n    if (deleted) {\n      this.setGeometryCoordinates_(geometry, coordinates);\n      const segments = [];\n\n      if (left !== undefined) {\n        this.rBush_.remove(left);\n        segments.push(left.segment[0]);\n      }\n\n      if (right !== undefined) {\n        this.rBush_.remove(right);\n        segments.push(right.segment[1]);\n      }\n\n      if (left !== undefined && right !== undefined) {\n        const newSegmentData =\n        /** @type {module:ol/interaction/Modify~SegmentData} */\n        {\n          depth: segmentData.depth,\n          feature: segmentData.feature,\n          geometry: segmentData.geometry,\n          index: newIndex,\n          segment: segments\n        };\n        this.rBush_.insert(boundingExtent(newSegmentData.segment), newSegmentData);\n      }\n\n      this.updateSegmentIndices_(geometry, index, segmentData.depth, -1);\n\n      if (this.vertexFeature_) {\n        this.overlay_.getSource().removeFeature(this.vertexFeature_);\n        this.vertexFeature_ = null;\n      }\n\n      dragSegments.length = 0;\n    }\n  }\n\n  return deleted;\n};\n/**\n * @param {module:ol/geom/SimpleGeometry} geometry Geometry.\n * @param {Array} coordinates Coordinates.\n * @private\n */\n\n\nModify.prototype.setGeometryCoordinates_ = function (geometry, coordinates) {\n  this.changingFeature_ = true;\n  geometry.setCoordinates(coordinates);\n  this.changingFeature_ = false;\n};\n/**\n * @param {module:ol/geom/SimpleGeometry} geometry Geometry.\n * @param {number} index Index.\n * @param {Array.<number>|undefined} depth Depth.\n * @param {number} delta Delta (1 or -1).\n * @private\n */\n\n\nModify.prototype.updateSegmentIndices_ = function (geometry, index, depth, delta) {\n  this.rBush_.forEachInExtent(geometry.getExtent(), function (segmentDataMatch) {\n    if (segmentDataMatch.geometry === geometry && (depth === undefined || segmentDataMatch.depth === undefined || equals(segmentDataMatch.depth, depth)) && segmentDataMatch.index > index) {\n      segmentDataMatch.index += delta;\n    }\n  });\n};\n/**\n * @return {module:ol/style/Style~StyleFunction} Styles.\n */\n\n\nfunction getDefaultStyleFunction() {\n  const style = createEditingStyle();\n  return function (feature, resolution) {\n    return style[GeometryType.POINT];\n  };\n}\n\nexport default Modify;","map":null,"metadata":{},"sourceType":"module"}