{"ast":null,"code":"/**\n * @module ol/interaction/Draw\n */\nimport EventType from '../events/EventType.js';\nimport Feature from '../Feature.js';\nimport MapBrowserEventType from '../MapBrowserEventType.js';\nimport MapBrowserPointerEvent from '../MapBrowserPointerEvent.js';\nimport { getChangeEventType } from '../Object.js';\nimport { squaredDistance as squaredCoordinateDistance } from '../coordinate.js';\nimport { listen } from '../events.js';\nimport Event from '../events/Event.js';\nimport { noModifierKeys, always, shiftKeyOnly } from '../events/condition.js';\nimport { boundingExtent, getBottomLeft, getBottomRight, getTopLeft, getTopRight } from '../extent.js';\nimport { TRUE, FALSE } from '../functions.js';\nimport Circle from '../geom/Circle.js';\nimport GeometryType from '../geom/GeometryType.js';\nimport LineString from '../geom/LineString.js';\nimport MultiLineString from '../geom/MultiLineString.js';\nimport MultiPoint from '../geom/MultiPoint.js';\nimport MultiPolygon from '../geom/MultiPolygon.js';\nimport { POINTER_TYPE } from '../pointer/MouseSource.js';\nimport Point from '../geom/Point.js';\nimport Polygon, { fromCircle, makeRegular } from '../geom/Polygon.js';\nimport PointerInteraction from './Pointer.js';\nimport InteractionProperty from './Property.js';\nimport VectorLayer from '../layer/Vector.js';\nimport VectorSource from '../source/Vector.js';\nimport { createEditingStyle } from '../style/Style.js';\n/**\n * @typedef {Object} Options\n * @property {GeometryType} type Geometry type of\n * the geometries being drawn with this instance.\n * @property {number} [clickTolerance=6] The maximum distance in pixels between\n * \"down\" and \"up\" for a \"up\" event to be considered a \"click\" event and\n * actually add a point/vertex to the geometry being drawn.  The default of `6`\n * was chosen for the draw interaction to behave correctly on mouse as well as\n * on touch devices.\n * @property {import(\"../Collection.js\").default<Feature>} [features]\n * Destination collection for the drawn features.\n * @property {VectorSource} [source] Destination source for\n * the drawn features.\n * @property {number} [dragVertexDelay=500] Delay in milliseconds after pointerdown\n * before the current vertex can be dragged to its exact position.\n * @property {number} [snapTolerance=12] Pixel distance for snapping to the\n * drawing finish.\n * @property {boolean} [stopClick=false] Stop click, singleclick, and\n * doubleclick events from firing during drawing.\n * @property {number} [maxPoints] The number of points that can be drawn before\n * a polygon ring or line string is finished. By default there is no\n * restriction.\n * @property {number} [minPoints] The number of points that must be drawn\n * before a polygon ring or line string can be finished. Default is `3` for\n * polygon rings and `2` for line strings.\n * @property {import(\"../events/condition.js\").Condition} [finishCondition] A function\n * that takes an {@link module:ol/MapBrowserEvent~MapBrowserEvent} and returns a\n * boolean to indicate whether the drawing can be finished.\n * @property {import(\"../style/Style.js\").StyleLike} [style]\n * Style for sketch features.\n * @property {GeometryFunction} [geometryFunction]\n * Function that is called when a geometry's coordinates are updated.\n * @property {string} [geometryName] Geometry name to use for features created\n * by the draw interaction.\n * @property {import(\"../events/condition.js\").Condition} [condition] A function that\n * takes an {@link module:ol/MapBrowserEvent~MapBrowserEvent} and returns a\n * boolean to indicate whether that event should be handled.\n * By default {@link module:ol/events/condition~noModifierKeys}, i.e. a click,\n * adds a vertex or deactivates freehand drawing.\n * @property {boolean} [freehand=false] Operate in freehand mode for lines,\n * polygons, and circles.  This makes the interaction always operate in freehand\n * mode and takes precedence over any `freehandCondition` option.\n * @property {import(\"../events/condition.js\").Condition} [freehandCondition]\n * Condition that activates freehand drawing for lines and polygons. This\n * function takes an {@link module:ol/MapBrowserEvent~MapBrowserEvent} and\n * returns a boolean to indicate whether that event should be handled. The\n * default is {@link module:ol/events/condition~shiftKeyOnly}, meaning that the\n * Shift key activates freehand drawing.\n * @property {boolean} [wrapX=false] Wrap the world horizontally on the sketch\n * overlay.\n */\n\n/**\n * Coordinate type when drawing points.\n * @typedef {import(\"../coordinate.js\").Coordinate} PointCoordType\n */\n\n/**\n * Coordinate type when drawing lines.\n * @typedef {Array<import(\"../coordinate.js\").Coordinate>} LineCoordType\n */\n\n/**\n * Coordinate type when drawing polygons.\n * @typedef {Array<Array<import(\"../coordinate.js\").Coordinate>>} PolyCoordType\n */\n\n/**\n * Types used for drawing coordinates.\n * @typedef {PointCoordType|LineCoordType|PolyCoordType} SketchCoordType\n */\n\n/**\n * Function that takes an array of coordinates and an optional existing geometry as\n * arguments, and returns a geometry. The optional existing geometry is the\n * geometry that is returned when the function is called without a second\n * argument.\n * @typedef {function(!SketchCoordType, import(\"../geom/SimpleGeometry.js\").default=):\n *     import(\"../geom/SimpleGeometry.js\").default} GeometryFunction\n */\n\n/**\n * Draw mode.  This collapses multi-part geometry types with their single-part\n * cousins.\n * @enum {string}\n */\n\nvar Mode = {\n  POINT: 'Point',\n  LINE_STRING: 'LineString',\n  POLYGON: 'Polygon',\n  CIRCLE: 'Circle'\n};\n/**\n * @enum {string}\n */\n\nvar DrawEventType = {\n  /**\n   * Triggered upon feature draw start\n   * @event DrawEvent#drawstart\n   * @api\n   */\n  DRAWSTART: 'drawstart',\n\n  /**\n   * Triggered upon feature draw end\n   * @event DrawEvent#drawend\n   * @api\n   */\n  DRAWEND: 'drawend'\n};\n/**\n * @classdesc\n * Events emitted by {@link module:ol/interaction/Draw~Draw} instances are\n * instances of this type.\n */\n\nvar DrawEvent =\n/*@__PURE__*/\nfunction (Event) {\n  function DrawEvent(type, feature) {\n    Event.call(this, type);\n    /**\n     * The feature being drawn.\n     * @type {Feature}\n     * @api\n     */\n\n    this.feature = feature;\n  }\n\n  if (Event) DrawEvent.__proto__ = Event;\n  DrawEvent.prototype = Object.create(Event && Event.prototype);\n  DrawEvent.prototype.constructor = DrawEvent;\n  return DrawEvent;\n}(Event);\n/**\n * @classdesc\n * Interaction for drawing feature geometries.\n *\n * @fires DrawEvent\n * @api\n */\n\n\nvar Draw =\n/*@__PURE__*/\nfunction (PointerInteraction) {\n  function Draw(options) {\n    var pointerOptions =\n    /** @type {import(\"./Pointer.js\").Options} */\n    options;\n\n    if (!pointerOptions.stopDown) {\n      pointerOptions.stopDown = FALSE;\n    }\n\n    PointerInteraction.call(this, pointerOptions);\n    /**\n     * @type {boolean}\n     * @private\n     */\n\n    this.shouldHandle_ = false;\n    /**\n     * @type {import(\"../pixel.js\").Pixel}\n     * @private\n     */\n\n    this.downPx_ = null;\n    /**\n     * @type {?}\n     * @private\n     */\n\n    this.downTimeout_;\n    /**\n     * @type {number|undefined}\n     * @private\n     */\n\n    this.lastDragTime_;\n    /**\n     * @type {boolean}\n     * @private\n     */\n\n    this.freehand_ = false;\n    /**\n     * Target source for drawn features.\n     * @type {VectorSource}\n     * @private\n     */\n\n    this.source_ = options.source ? options.source : null;\n    /**\n     * Target collection for drawn features.\n     * @type {import(\"../Collection.js\").default<Feature>}\n     * @private\n     */\n\n    this.features_ = options.features ? options.features : null;\n    /**\n     * Pixel distance for snapping.\n     * @type {number}\n     * @private\n     */\n\n    this.snapTolerance_ = options.snapTolerance ? options.snapTolerance : 12;\n    /**\n     * Geometry type.\n     * @type {GeometryType}\n     * @private\n     */\n\n    this.type_ =\n    /** @type {GeometryType} */\n    options.type;\n    /**\n     * Drawing mode (derived from geometry type.\n     * @type {Mode}\n     * @private\n     */\n\n    this.mode_ = getMode(this.type_);\n    /**\n     * Stop click, singleclick, and doubleclick events from firing during drawing.\n     * Default is `false`.\n     * @type {boolean}\n     * @private\n     */\n\n    this.stopClick_ = !!options.stopClick;\n    /**\n     * The number of points that must be drawn before a polygon ring or line\n     * string can be finished.  The default is 3 for polygon rings and 2 for\n     * line strings.\n     * @type {number}\n     * @private\n     */\n\n    this.minPoints_ = options.minPoints ? options.minPoints : this.mode_ === Mode.POLYGON ? 3 : 2;\n    /**\n     * The number of points that can be drawn before a polygon ring or line string\n     * is finished. The default is no restriction.\n     * @type {number}\n     * @private\n     */\n\n    this.maxPoints_ = options.maxPoints ? options.maxPoints : Infinity;\n    /**\n     * A function to decide if a potential finish coordinate is permissible\n     * @private\n     * @type {import(\"../events/condition.js\").Condition}\n     */\n\n    this.finishCondition_ = options.finishCondition ? options.finishCondition : TRUE;\n    var geometryFunction = options.geometryFunction;\n\n    if (!geometryFunction) {\n      if (this.type_ === GeometryType.CIRCLE) {\n        /**\n         * @param {!LineCoordType} coordinates The coordinates.\n         * @param {import(\"../geom/SimpleGeometry.js\").default=} opt_geometry Optional geometry.\n         * @return {import(\"../geom/SimpleGeometry.js\").default} A geometry.\n         */\n        geometryFunction = function (coordinates, opt_geometry) {\n          var circle = opt_geometry ?\n          /** @type {Circle} */\n          opt_geometry : new Circle([NaN, NaN]);\n          var squaredLength = squaredCoordinateDistance(coordinates[0], coordinates[1]);\n          circle.setCenterAndRadius(coordinates[0], Math.sqrt(squaredLength));\n          return circle;\n        };\n      } else {\n        var Constructor;\n        var mode = this.mode_;\n\n        if (mode === Mode.POINT) {\n          Constructor = Point;\n        } else if (mode === Mode.LINE_STRING) {\n          Constructor = LineString;\n        } else if (mode === Mode.POLYGON) {\n          Constructor = Polygon;\n        }\n        /**\n         * @param {!LineCoordType} coordinates The coordinates.\n         * @param {import(\"../geom/SimpleGeometry.js\").default=} opt_geometry Optional geometry.\n         * @return {import(\"../geom/SimpleGeometry.js\").default} A geometry.\n         */\n\n\n        geometryFunction = function (coordinates, opt_geometry) {\n          var geometry = opt_geometry;\n\n          if (geometry) {\n            if (mode === Mode.POLYGON) {\n              if (coordinates[0].length) {\n                // Add a closing coordinate to match the first\n                geometry.setCoordinates([coordinates[0].concat([coordinates[0][0]])]);\n              } else {\n                geometry.setCoordinates([]);\n              }\n            } else {\n              geometry.setCoordinates(coordinates);\n            }\n          } else {\n            geometry = new Constructor(coordinates);\n          }\n\n          return geometry;\n        };\n      }\n    }\n    /**\n     * @type {GeometryFunction}\n     * @private\n     */\n\n\n    this.geometryFunction_ = geometryFunction;\n    /**\n     * @type {number}\n     * @private\n     */\n\n    this.dragVertexDelay_ = options.dragVertexDelay !== undefined ? options.dragVertexDelay : 500;\n    /**\n     * Finish coordinate for the feature (first point for polygons, last point for\n     * linestrings).\n     * @type {import(\"../coordinate.js\").Coordinate}\n     * @private\n     */\n\n    this.finishCoordinate_ = null;\n    /**\n     * Sketch feature.\n     * @type {Feature}\n     * @private\n     */\n\n    this.sketchFeature_ = null;\n    /**\n     * Sketch point.\n     * @type {Feature}\n     * @private\n     */\n\n    this.sketchPoint_ = null;\n    /**\n     * Sketch coordinates. Used when drawing a line or polygon.\n     * @type {SketchCoordType}\n     * @private\n     */\n\n    this.sketchCoords_ = null;\n    /**\n     * Sketch line. Used when drawing polygon.\n     * @type {Feature}\n     * @private\n     */\n\n    this.sketchLine_ = null;\n    /**\n     * Sketch line coordinates. Used when drawing a polygon or circle.\n     * @type {LineCoordType}\n     * @private\n     */\n\n    this.sketchLineCoords_ = null;\n    /**\n     * Squared tolerance for handling up events.  If the squared distance\n     * between a down and up event is greater than this tolerance, up events\n     * will not be handled.\n     * @type {number}\n     * @private\n     */\n\n    this.squaredClickTolerance_ = options.clickTolerance ? options.clickTolerance * options.clickTolerance : 36;\n    /**\n     * Draw overlay where our sketch features are drawn.\n     * @type {VectorLayer}\n     * @private\n     */\n\n    this.overlay_ = new VectorLayer({\n      source: new VectorSource({\n        useSpatialIndex: false,\n        wrapX: options.wrapX ? options.wrapX : false\n      }),\n      style: options.style ? options.style : getDefaultStyleFunction(),\n      updateWhileInteracting: true\n    });\n    /**\n     * Name of the geometry attribute for newly created features.\n     * @type {string|undefined}\n     * @private\n     */\n\n    this.geometryName_ = options.geometryName;\n    /**\n     * @private\n     * @type {import(\"../events/condition.js\").Condition}\n     */\n\n    this.condition_ = options.condition ? options.condition : noModifierKeys;\n    /**\n     * @private\n     * @type {import(\"../events/condition.js\").Condition}\n     */\n\n    this.freehandCondition_;\n\n    if (options.freehand) {\n      this.freehandCondition_ = always;\n    } else {\n      this.freehandCondition_ = options.freehandCondition ? options.freehandCondition : shiftKeyOnly;\n    }\n\n    listen(this, getChangeEventType(InteractionProperty.ACTIVE), this.updateState_, this);\n  }\n\n  if (PointerInteraction) Draw.__proto__ = PointerInteraction;\n  Draw.prototype = Object.create(PointerInteraction && PointerInteraction.prototype);\n  Draw.prototype.constructor = Draw;\n  /**\n   * @inheritDoc\n   */\n\n  Draw.prototype.setMap = function setMap(map) {\n    PointerInteraction.prototype.setMap.call(this, map);\n    this.updateState_();\n  };\n  /**\n   * Get the overlay layer that this interaction renders sketch features to.\n   * @return {VectorLayer} Overlay layer.\n   * @api\n   */\n\n\n  Draw.prototype.getOverlay = function getOverlay() {\n    return this.overlay_;\n  };\n  /**\n   * Handles the {@link module:ol/MapBrowserEvent map browser event} and may actually draw or finish the drawing.\n   * @override\n   * @api\n   */\n\n\n  Draw.prototype.handleEvent = function handleEvent(event) {\n    if (event.originalEvent.type === EventType.CONTEXTMENU) {\n      // Avoid context menu for long taps when drawing on mobile\n      event.preventDefault();\n    }\n\n    this.freehand_ = this.mode_ !== Mode.POINT && this.freehandCondition_(event);\n    var move = event.type === MapBrowserEventType.POINTERMOVE;\n    var pass = true;\n\n    if (!this.freehand_ && this.lastDragTime_ && event.type === MapBrowserEventType.POINTERDRAG) {\n      var now = Date.now();\n\n      if (now - this.lastDragTime_ >= this.dragVertexDelay_) {\n        this.downPx_ = event.pixel;\n        this.shouldHandle_ = !this.freehand_;\n        move = true;\n      } else {\n        this.lastDragTime_ = undefined;\n      }\n\n      if (this.shouldHandle_ && this.downTimeout_ !== undefined) {\n        clearTimeout(this.downTimeout_);\n        this.downTimeout_ = undefined;\n      }\n    }\n\n    if (this.freehand_ && event.type === MapBrowserEventType.POINTERDRAG && this.sketchFeature_ !== null) {\n      this.addToDrawing_(event);\n      pass = false;\n    } else if (this.freehand_ && event.type === MapBrowserEventType.POINTERDOWN) {\n      pass = false;\n    } else if (move) {\n      pass = event.type === MapBrowserEventType.POINTERMOVE;\n\n      if (pass && this.freehand_) {\n        pass = this.handlePointerMove_(event);\n      } else if (\n      /** @type {MapBrowserPointerEvent} */\n      event.pointerEvent.pointerType == POINTER_TYPE || event.type === MapBrowserEventType.POINTERDRAG && this.downTimeout_ === undefined) {\n        this.handlePointerMove_(event);\n      }\n    } else if (event.type === MapBrowserEventType.DBLCLICK) {\n      pass = false;\n    }\n\n    return PointerInteraction.prototype.handleEvent.call(this, event) && pass;\n  };\n  /**\n   * @inheritDoc\n   */\n\n\n  Draw.prototype.handleDownEvent = function handleDownEvent(event) {\n    this.shouldHandle_ = !this.freehand_;\n\n    if (this.freehand_) {\n      this.downPx_ = event.pixel;\n\n      if (!this.finishCoordinate_) {\n        this.startDrawing_(event);\n      }\n\n      return true;\n    } else if (this.condition_(event)) {\n      this.lastDragTime_ = Date.now();\n      this.downTimeout_ = setTimeout(function () {\n        this.handlePointerMove_(new MapBrowserPointerEvent(MapBrowserEventType.POINTERMOVE, event.map, event.pointerEvent, false, event.frameState));\n      }.bind(this), this.dragVertexDelay_);\n      this.downPx_ = event.pixel;\n      return true;\n    } else {\n      return false;\n    }\n  };\n  /**\n   * @inheritDoc\n   */\n\n\n  Draw.prototype.handleUpEvent = function handleUpEvent(event) {\n    var pass = true;\n\n    if (this.downTimeout_) {\n      clearTimeout(this.downTimeout_);\n      this.downTimeout_ = undefined;\n    }\n\n    this.handlePointerMove_(event);\n    var circleMode = this.mode_ === Mode.CIRCLE;\n\n    if (this.shouldHandle_) {\n      if (!this.finishCoordinate_) {\n        this.startDrawing_(event);\n\n        if (this.mode_ === Mode.POINT) {\n          this.finishDrawing();\n        }\n      } else if (this.freehand_ || circleMode) {\n        this.finishDrawing();\n      } else if (this.atFinish_(event)) {\n        if (this.finishCondition_(event)) {\n          this.finishDrawing();\n        }\n      } else {\n        this.addToDrawing_(event);\n      }\n\n      pass = false;\n    } else if (this.freehand_) {\n      this.finishCoordinate_ = null;\n      this.abortDrawing_();\n    }\n\n    if (!pass && this.stopClick_) {\n      event.stopPropagation();\n    }\n\n    return pass;\n  };\n  /**\n   * Handle move events.\n   * @param {import(\"../MapBrowserEvent.js\").default} event A move event.\n   * @return {boolean} Pass the event to other interactions.\n   * @private\n   */\n\n\n  Draw.prototype.handlePointerMove_ = function handlePointerMove_(event) {\n    if (this.downPx_ && (!this.freehand_ && this.shouldHandle_ || this.freehand_ && !this.shouldHandle_)) {\n      var downPx = this.downPx_;\n      var clickPx = event.pixel;\n      var dx = downPx[0] - clickPx[0];\n      var dy = downPx[1] - clickPx[1];\n      var squaredDistance = dx * dx + dy * dy;\n      this.shouldHandle_ = this.freehand_ ? squaredDistance > this.squaredClickTolerance_ : squaredDistance <= this.squaredClickTolerance_;\n\n      if (!this.shouldHandle_) {\n        return true;\n      }\n    }\n\n    if (this.finishCoordinate_) {\n      this.modifyDrawing_(event);\n    } else {\n      this.createOrUpdateSketchPoint_(event);\n    }\n\n    return true;\n  };\n  /**\n   * Determine if an event is within the snapping tolerance of the start coord.\n   * @param {import(\"../MapBrowserEvent.js\").default} event Event.\n   * @return {boolean} The event is within the snapping tolerance of the start.\n   * @private\n   */\n\n\n  Draw.prototype.atFinish_ = function atFinish_(event) {\n    var at = false;\n\n    if (this.sketchFeature_) {\n      var potentiallyDone = false;\n      var potentiallyFinishCoordinates = [this.finishCoordinate_];\n\n      if (this.mode_ === Mode.LINE_STRING) {\n        potentiallyDone = this.sketchCoords_.length > this.minPoints_;\n      } else if (this.mode_ === Mode.POLYGON) {\n        var sketchCoords =\n        /** @type {PolyCoordType} */\n        this.sketchCoords_;\n        potentiallyDone = sketchCoords[0].length > this.minPoints_;\n        potentiallyFinishCoordinates = [sketchCoords[0][0], sketchCoords[0][sketchCoords[0].length - 2]];\n      }\n\n      if (potentiallyDone) {\n        var map = event.map;\n\n        for (var i = 0, ii = potentiallyFinishCoordinates.length; i < ii; i++) {\n          var finishCoordinate = potentiallyFinishCoordinates[i];\n          var finishPixel = map.getPixelFromCoordinate(finishCoordinate);\n          var pixel = event.pixel;\n          var dx = pixel[0] - finishPixel[0];\n          var dy = pixel[1] - finishPixel[1];\n          var snapTolerance = this.freehand_ ? 1 : this.snapTolerance_;\n          at = Math.sqrt(dx * dx + dy * dy) <= snapTolerance;\n\n          if (at) {\n            this.finishCoordinate_ = finishCoordinate;\n            break;\n          }\n        }\n      }\n    }\n\n    return at;\n  };\n  /**\n   * @param {import(\"../MapBrowserEvent.js\").default} event Event.\n   * @private\n   */\n\n\n  Draw.prototype.createOrUpdateSketchPoint_ = function createOrUpdateSketchPoint_(event) {\n    var coordinates = event.coordinate.slice();\n\n    if (!this.sketchPoint_) {\n      this.sketchPoint_ = new Feature(new Point(coordinates));\n      this.updateSketchFeatures_();\n    } else {\n      var sketchPointGeom =\n      /** @type {Point} */\n      this.sketchPoint_.getGeometry();\n      sketchPointGeom.setCoordinates(coordinates);\n    }\n  };\n  /**\n   * Start the drawing.\n   * @param {import(\"../MapBrowserEvent.js\").default} event Event.\n   * @private\n   */\n\n\n  Draw.prototype.startDrawing_ = function startDrawing_(event) {\n    var start = event.coordinate;\n    this.finishCoordinate_ = start;\n\n    if (this.mode_ === Mode.POINT) {\n      this.sketchCoords_ = start.slice();\n    } else if (this.mode_ === Mode.POLYGON) {\n      this.sketchCoords_ = [[start.slice(), start.slice()]];\n      this.sketchLineCoords_ = this.sketchCoords_[0];\n    } else {\n      this.sketchCoords_ = [start.slice(), start.slice()];\n    }\n\n    if (this.sketchLineCoords_) {\n      this.sketchLine_ = new Feature(new LineString(this.sketchLineCoords_));\n    }\n\n    var geometry = this.geometryFunction_(this.sketchCoords_);\n    this.sketchFeature_ = new Feature();\n\n    if (this.geometryName_) {\n      this.sketchFeature_.setGeometryName(this.geometryName_);\n    }\n\n    this.sketchFeature_.setGeometry(geometry);\n    this.updateSketchFeatures_();\n    this.dispatchEvent(new DrawEvent(DrawEventType.DRAWSTART, this.sketchFeature_));\n  };\n  /**\n   * Modify the drawing.\n   * @param {import(\"../MapBrowserEvent.js\").default} event Event.\n   * @private\n   */\n\n\n  Draw.prototype.modifyDrawing_ = function modifyDrawing_(event) {\n    var coordinate = event.coordinate;\n    var geometry =\n    /** @type {import(\"../geom/SimpleGeometry.js\").default} */\n    this.sketchFeature_.getGeometry();\n    var coordinates, last;\n\n    if (this.mode_ === Mode.POINT) {\n      last = this.sketchCoords_;\n    } else if (this.mode_ === Mode.POLYGON) {\n      coordinates =\n      /** @type {PolyCoordType} */\n      this.sketchCoords_[0];\n      last = coordinates[coordinates.length - 1];\n\n      if (this.atFinish_(event)) {\n        // snap to finish\n        coordinate = this.finishCoordinate_.slice();\n      }\n    } else {\n      coordinates = this.sketchCoords_;\n      last = coordinates[coordinates.length - 1];\n    }\n\n    last[0] = coordinate[0];\n    last[1] = coordinate[1];\n    this.geometryFunction_(\n    /** @type {!LineCoordType} */\n    this.sketchCoords_, geometry);\n\n    if (this.sketchPoint_) {\n      var sketchPointGeom =\n      /** @type {Point} */\n      this.sketchPoint_.getGeometry();\n      sketchPointGeom.setCoordinates(coordinate);\n    }\n    /** @type {LineString} */\n\n\n    var sketchLineGeom;\n\n    if (geometry.getType() == GeometryType.POLYGON && this.mode_ !== Mode.POLYGON) {\n      if (!this.sketchLine_) {\n        this.sketchLine_ = new Feature();\n      }\n\n      var ring =\n      /** @type {Polygon} */\n      geometry.getLinearRing(0);\n      sketchLineGeom =\n      /** @type {LineString} */\n      this.sketchLine_.getGeometry();\n\n      if (!sketchLineGeom) {\n        sketchLineGeom = new LineString(ring.getFlatCoordinates(), ring.getLayout());\n        this.sketchLine_.setGeometry(sketchLineGeom);\n      } else {\n        sketchLineGeom.setFlatCoordinates(ring.getLayout(), ring.getFlatCoordinates());\n        sketchLineGeom.changed();\n      }\n    } else if (this.sketchLineCoords_) {\n      sketchLineGeom =\n      /** @type {LineString} */\n      this.sketchLine_.getGeometry();\n      sketchLineGeom.setCoordinates(this.sketchLineCoords_);\n    }\n\n    this.updateSketchFeatures_();\n  };\n  /**\n   * Add a new coordinate to the drawing.\n   * @param {import(\"../MapBrowserEvent.js\").default} event Event.\n   * @private\n   */\n\n\n  Draw.prototype.addToDrawing_ = function addToDrawing_(event) {\n    var coordinate = event.coordinate;\n    var geometry =\n    /** @type {import(\"../geom/SimpleGeometry.js\").default} */\n    this.sketchFeature_.getGeometry();\n    var done;\n    var coordinates;\n\n    if (this.mode_ === Mode.LINE_STRING) {\n      this.finishCoordinate_ = coordinate.slice();\n      coordinates =\n      /** @type {LineCoordType} */\n      this.sketchCoords_;\n\n      if (coordinates.length >= this.maxPoints_) {\n        if (this.freehand_) {\n          coordinates.pop();\n        } else {\n          done = true;\n        }\n      }\n\n      coordinates.push(coordinate.slice());\n      this.geometryFunction_(coordinates, geometry);\n    } else if (this.mode_ === Mode.POLYGON) {\n      coordinates =\n      /** @type {PolyCoordType} */\n      this.sketchCoords_[0];\n\n      if (coordinates.length >= this.maxPoints_) {\n        if (this.freehand_) {\n          coordinates.pop();\n        } else {\n          done = true;\n        }\n      }\n\n      coordinates.push(coordinate.slice());\n\n      if (done) {\n        this.finishCoordinate_ = coordinates[0];\n      }\n\n      this.geometryFunction_(this.sketchCoords_, geometry);\n    }\n\n    this.updateSketchFeatures_();\n\n    if (done) {\n      this.finishDrawing();\n    }\n  };\n  /**\n   * Remove last point of the feature currently being drawn.\n   * @api\n   */\n\n\n  Draw.prototype.removeLastPoint = function removeLastPoint() {\n    if (!this.sketchFeature_) {\n      return;\n    }\n\n    var geometry =\n    /** @type {import(\"../geom/SimpleGeometry.js\").default} */\n    this.sketchFeature_.getGeometry();\n    var coordinates;\n    /** @type {LineString} */\n\n    var sketchLineGeom;\n\n    if (this.mode_ === Mode.LINE_STRING) {\n      coordinates =\n      /** @type {LineCoordType} */\n      this.sketchCoords_;\n      coordinates.splice(-2, 1);\n      this.geometryFunction_(coordinates, geometry);\n\n      if (coordinates.length >= 2) {\n        this.finishCoordinate_ = coordinates[coordinates.length - 2].slice();\n      }\n    } else if (this.mode_ === Mode.POLYGON) {\n      coordinates =\n      /** @type {PolyCoordType} */\n      this.sketchCoords_[0];\n      coordinates.splice(-2, 1);\n      sketchLineGeom =\n      /** @type {LineString} */\n      this.sketchLine_.getGeometry();\n      sketchLineGeom.setCoordinates(coordinates);\n      this.geometryFunction_(this.sketchCoords_, geometry);\n    }\n\n    if (coordinates.length === 0) {\n      this.finishCoordinate_ = null;\n    }\n\n    this.updateSketchFeatures_();\n  };\n  /**\n   * Stop drawing and add the sketch feature to the target layer.\n   * The {@link module:ol/interaction/Draw~DrawEventType.DRAWEND} event is\n   * dispatched before inserting the feature.\n   * @api\n   */\n\n\n  Draw.prototype.finishDrawing = function finishDrawing() {\n    var sketchFeature = this.abortDrawing_();\n\n    if (!sketchFeature) {\n      return;\n    }\n\n    var coordinates = this.sketchCoords_;\n    var geometry =\n    /** @type {import(\"../geom/SimpleGeometry.js\").default} */\n    sketchFeature.getGeometry();\n\n    if (this.mode_ === Mode.LINE_STRING) {\n      // remove the redundant last point\n      coordinates.pop();\n      this.geometryFunction_(coordinates, geometry);\n    } else if (this.mode_ === Mode.POLYGON) {\n      // remove the redundant last point in ring\n\n      /** @type {PolyCoordType} */\n      coordinates[0].pop();\n      this.geometryFunction_(coordinates, geometry);\n      coordinates = geometry.getCoordinates();\n    } // cast multi-part geometries\n\n\n    if (this.type_ === GeometryType.MULTI_POINT) {\n      sketchFeature.setGeometry(new MultiPoint([\n      /** @type {PointCoordType} */\n      coordinates]));\n    } else if (this.type_ === GeometryType.MULTI_LINE_STRING) {\n      sketchFeature.setGeometry(new MultiLineString([\n      /** @type {LineCoordType} */\n      coordinates]));\n    } else if (this.type_ === GeometryType.MULTI_POLYGON) {\n      sketchFeature.setGeometry(new MultiPolygon([\n      /** @type {PolyCoordType} */\n      coordinates]));\n    } // First dispatch event to allow full set up of feature\n\n\n    this.dispatchEvent(new DrawEvent(DrawEventType.DRAWEND, sketchFeature)); // Then insert feature\n\n    if (this.features_) {\n      this.features_.push(sketchFeature);\n    }\n\n    if (this.source_) {\n      this.source_.addFeature(sketchFeature);\n    }\n  };\n  /**\n   * Stop drawing without adding the sketch feature to the target layer.\n   * @return {Feature} The sketch feature (or null if none).\n   * @private\n   */\n\n\n  Draw.prototype.abortDrawing_ = function abortDrawing_() {\n    this.finishCoordinate_ = null;\n    var sketchFeature = this.sketchFeature_;\n\n    if (sketchFeature) {\n      this.sketchFeature_ = null;\n      this.sketchPoint_ = null;\n      this.sketchLine_ = null;\n      /** @type {VectorSource} */\n\n      this.overlay_.getSource().clear(true);\n    }\n\n    return sketchFeature;\n  };\n  /**\n   * Extend an existing geometry by adding additional points. This only works\n   * on features with `LineString` geometries, where the interaction will\n   * extend lines by adding points to the end of the coordinates array.\n   * @param {!Feature} feature Feature to be extended.\n   * @api\n   */\n\n\n  Draw.prototype.extend = function extend(feature) {\n    var geometry = feature.getGeometry();\n    var lineString =\n    /** @type {LineString} */\n    geometry;\n    this.sketchFeature_ = feature;\n    this.sketchCoords_ = lineString.getCoordinates();\n    var last = this.sketchCoords_[this.sketchCoords_.length - 1];\n    this.finishCoordinate_ = last.slice();\n    this.sketchCoords_.push(last.slice());\n    this.updateSketchFeatures_();\n    this.dispatchEvent(new DrawEvent(DrawEventType.DRAWSTART, this.sketchFeature_));\n  };\n  /**\n   * Redraw the sketch features.\n   * @private\n   */\n\n\n  Draw.prototype.updateSketchFeatures_ = function updateSketchFeatures_() {\n    var sketchFeatures = [];\n\n    if (this.sketchFeature_) {\n      sketchFeatures.push(this.sketchFeature_);\n    }\n\n    if (this.sketchLine_) {\n      sketchFeatures.push(this.sketchLine_);\n    }\n\n    if (this.sketchPoint_) {\n      sketchFeatures.push(this.sketchPoint_);\n    }\n\n    var overlaySource =\n    /** @type {VectorSource} */\n    this.overlay_.getSource();\n    overlaySource.clear(true);\n    overlaySource.addFeatures(sketchFeatures);\n  };\n  /**\n   * @private\n   */\n\n\n  Draw.prototype.updateState_ = function updateState_() {\n    var map = this.getMap();\n    var active = this.getActive();\n\n    if (!map || !active) {\n      this.abortDrawing_();\n    }\n\n    this.overlay_.setMap(active ? map : null);\n  };\n\n  return Draw;\n}(PointerInteraction);\n/**\n * @return {import(\"../style/Style.js\").StyleFunction} Styles.\n */\n\n\nfunction getDefaultStyleFunction() {\n  var styles = createEditingStyle();\n  return function (feature, resolution) {\n    return styles[feature.getGeometry().getType()];\n  };\n}\n/**\n * Create a `geometryFunction` for `type: 'Circle'` that will create a regular\n * polygon with a user specified number of sides and start angle instead of an\n * `import(\"../geom/Circle.js\").Circle` geometry.\n * @param {number=} opt_sides Number of sides of the regular polygon. Default is\n *     32.\n * @param {number=} opt_angle Angle of the first point in radians. 0 means East.\n *     Default is the angle defined by the heading from the center of the\n *     regular polygon to the current pointer position.\n * @return {GeometryFunction} Function that draws a\n *     polygon.\n * @api\n */\n\n\nexport function createRegularPolygon(opt_sides, opt_angle) {\n  return function (coordinates, opt_geometry) {\n    var center =\n    /** @type {LineCoordType} */\n    coordinates[0];\n    var end =\n    /** @type {LineCoordType} */\n    coordinates[1];\n    var radius = Math.sqrt(squaredCoordinateDistance(center, end));\n    var geometry = opt_geometry ?\n    /** @type {Polygon} */\n    opt_geometry : fromCircle(new Circle(center), opt_sides);\n    var angle = opt_angle;\n\n    if (!opt_angle) {\n      var x = end[0] - center[0];\n      var y = end[1] - center[1];\n      angle = Math.atan(y / x) - (x < 0 ? Math.PI : 0);\n    }\n\n    makeRegular(geometry, center, radius, angle);\n    return geometry;\n  };\n}\n/**\n * Create a `geometryFunction` that will create a box-shaped polygon (aligned\n * with the coordinate system axes).  Use this with the draw interaction and\n * `type: 'Circle'` to return a box instead of a circle geometry.\n * @return {GeometryFunction} Function that draws a box-shaped polygon.\n * @api\n */\n\nexport function createBox() {\n  return function (coordinates, opt_geometry) {\n    var extent = boundingExtent(\n    /** @type {LineCoordType} */\n    coordinates);\n    var boxCoordinates = [[getBottomLeft(extent), getBottomRight(extent), getTopRight(extent), getTopLeft(extent), getBottomLeft(extent)]];\n    var geometry = opt_geometry;\n\n    if (geometry) {\n      geometry.setCoordinates(boxCoordinates);\n    } else {\n      geometry = new Polygon(boxCoordinates);\n    }\n\n    return geometry;\n  };\n}\n/**\n * Get the drawing mode.  The mode for mult-part geometries is the same as for\n * their single-part cousins.\n * @param {GeometryType} type Geometry type.\n * @return {Mode} Drawing mode.\n */\n\nfunction getMode(type) {\n  var mode;\n\n  if (type === GeometryType.POINT || type === GeometryType.MULTI_POINT) {\n    mode = Mode.POINT;\n  } else if (type === GeometryType.LINE_STRING || type === GeometryType.MULTI_LINE_STRING) {\n    mode = Mode.LINE_STRING;\n  } else if (type === GeometryType.POLYGON || type === GeometryType.MULTI_POLYGON) {\n    mode = Mode.POLYGON;\n  } else if (type === GeometryType.CIRCLE) {\n    mode = Mode.CIRCLE;\n  }\n\n  return (\n    /** @type {!Mode} */\n    mode\n  );\n}\n\nexport default Draw;","map":{"version":3,"sources":["../../../src/ol/interaction/Draw.js"],"names":["const","super","let"],"mappings":"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","sourcesContent":["/**\n * @module ol/interaction/Draw\n */\nimport EventType from '../events/EventType.js';\nimport Feature from '../Feature.js';\nimport MapBrowserEventType from '../MapBrowserEventType.js';\nimport MapBrowserPointerEvent from '../MapBrowserPointerEvent.js';\nimport {getChangeEventType} from '../Object.js';\nimport {squaredDistance as squaredCoordinateDistance} from '../coordinate.js';\nimport {listen} from '../events.js';\nimport Event from '../events/Event.js';\nimport {noModifierKeys, always, shiftKeyOnly} from '../events/condition.js';\nimport {boundingExtent, getBottomLeft, getBottomRight, getTopLeft, getTopRight} from '../extent.js';\nimport {TRUE, FALSE} from '../functions.js';\nimport Circle from '../geom/Circle.js';\nimport GeometryType from '../geom/GeometryType.js';\nimport LineString from '../geom/LineString.js';\nimport MultiLineString from '../geom/MultiLineString.js';\nimport MultiPoint from '../geom/MultiPoint.js';\nimport MultiPolygon from '../geom/MultiPolygon.js';\nimport {POINTER_TYPE} from '../pointer/MouseSource.js';\nimport Point from '../geom/Point.js';\nimport Polygon, {fromCircle, makeRegular} from '../geom/Polygon.js';\nimport PointerInteraction from './Pointer.js';\nimport InteractionProperty from './Property.js';\nimport VectorLayer from '../layer/Vector.js';\nimport VectorSource from '../source/Vector.js';\nimport {createEditingStyle} from '../style/Style.js';\n\n\n/**\n * @typedef {Object} Options\n * @property {GeometryType} type Geometry type of\n * the geometries being drawn with this instance.\n * @property {number} [clickTolerance=6] The maximum distance in pixels between\n * \"down\" and \"up\" for a \"up\" event to be considered a \"click\" event and\n * actually add a point/vertex to the geometry being drawn.  The default of `6`\n * was chosen for the draw interaction to behave correctly on mouse as well as\n * on touch devices.\n * @property {import(\"../Collection.js\").default<Feature>} [features]\n * Destination collection for the drawn features.\n * @property {VectorSource} [source] Destination source for\n * the drawn features.\n * @property {number} [dragVertexDelay=500] Delay in milliseconds after pointerdown\n * before the current vertex can be dragged to its exact position.\n * @property {number} [snapTolerance=12] Pixel distance for snapping to the\n * drawing finish.\n * @property {boolean} [stopClick=false] Stop click, singleclick, and\n * doubleclick events from firing during drawing.\n * @property {number} [maxPoints] The number of points that can be drawn before\n * a polygon ring or line string is finished. By default there is no\n * restriction.\n * @property {number} [minPoints] The number of points that must be drawn\n * before a polygon ring or line string can be finished. Default is `3` for\n * polygon rings and `2` for line strings.\n * @property {import(\"../events/condition.js\").Condition} [finishCondition] A function\n * that takes an {@link module:ol/MapBrowserEvent~MapBrowserEvent} and returns a\n * boolean to indicate whether the drawing can be finished.\n * @property {import(\"../style/Style.js\").StyleLike} [style]\n * Style for sketch features.\n * @property {GeometryFunction} [geometryFunction]\n * Function that is called when a geometry's coordinates are updated.\n * @property {string} [geometryName] Geometry name to use for features created\n * by the draw interaction.\n * @property {import(\"../events/condition.js\").Condition} [condition] A function that\n * takes an {@link module:ol/MapBrowserEvent~MapBrowserEvent} and returns a\n * boolean to indicate whether that event should be handled.\n * By default {@link module:ol/events/condition~noModifierKeys}, i.e. a click,\n * adds a vertex or deactivates freehand drawing.\n * @property {boolean} [freehand=false] Operate in freehand mode for lines,\n * polygons, and circles.  This makes the interaction always operate in freehand\n * mode and takes precedence over any `freehandCondition` option.\n * @property {import(\"../events/condition.js\").Condition} [freehandCondition]\n * Condition that activates freehand drawing for lines and polygons. This\n * function takes an {@link module:ol/MapBrowserEvent~MapBrowserEvent} and\n * returns a boolean to indicate whether that event should be handled. The\n * default is {@link module:ol/events/condition~shiftKeyOnly}, meaning that the\n * Shift key activates freehand drawing.\n * @property {boolean} [wrapX=false] Wrap the world horizontally on the sketch\n * overlay.\n */\n\n\n/**\n * Coordinate type when drawing points.\n * @typedef {import(\"../coordinate.js\").Coordinate} PointCoordType\n */\n\n\n/**\n * Coordinate type when drawing lines.\n * @typedef {Array<import(\"../coordinate.js\").Coordinate>} LineCoordType\n */\n\n\n/**\n * Coordinate type when drawing polygons.\n * @typedef {Array<Array<import(\"../coordinate.js\").Coordinate>>} PolyCoordType\n */\n\n\n/**\n * Types used for drawing coordinates.\n * @typedef {PointCoordType|LineCoordType|PolyCoordType} SketchCoordType\n */\n\n\n/**\n * Function that takes an array of coordinates and an optional existing geometry as\n * arguments, and returns a geometry. The optional existing geometry is the\n * geometry that is returned when the function is called without a second\n * argument.\n * @typedef {function(!SketchCoordType, import(\"../geom/SimpleGeometry.js\").default=):\n *     import(\"../geom/SimpleGeometry.js\").default} GeometryFunction\n */\n\n\n/**\n * Draw mode.  This collapses multi-part geometry types with their single-part\n * cousins.\n * @enum {string}\n */\nconst Mode = {\n  POINT: 'Point',\n  LINE_STRING: 'LineString',\n  POLYGON: 'Polygon',\n  CIRCLE: 'Circle'\n};\n\n\n/**\n * @enum {string}\n */\nconst DrawEventType = {\n  /**\n   * Triggered upon feature draw start\n   * @event DrawEvent#drawstart\n   * @api\n   */\n  DRAWSTART: 'drawstart',\n  /**\n   * Triggered upon feature draw end\n   * @event DrawEvent#drawend\n   * @api\n   */\n  DRAWEND: 'drawend'\n};\n\n\n/**\n * @classdesc\n * Events emitted by {@link module:ol/interaction/Draw~Draw} instances are\n * instances of this type.\n */\nclass DrawEvent extends Event {\n  /**\n   * @param {DrawEventType} type Type.\n   * @param {Feature} feature The feature drawn.\n   */\n  constructor(type, feature) {\n\n    super(type);\n\n    /**\n     * The feature being drawn.\n     * @type {Feature}\n     * @api\n     */\n    this.feature = feature;\n\n  }\n\n}\n\n\n/**\n * @classdesc\n * Interaction for drawing feature geometries.\n *\n * @fires DrawEvent\n * @api\n */\nclass Draw extends PointerInteraction {\n  /**\n   * @param {Options} options Options.\n   */\n  constructor(options) {\n\n    const pointerOptions = /** @type {import(\"./Pointer.js\").Options} */ (options);\n    if (!pointerOptions.stopDown) {\n      pointerOptions.stopDown = FALSE;\n    }\n\n    super(pointerOptions);\n\n    /**\n     * @type {boolean}\n     * @private\n     */\n    this.shouldHandle_ = false;\n\n    /**\n     * @type {import(\"../pixel.js\").Pixel}\n     * @private\n     */\n    this.downPx_ = null;\n\n    /**\n     * @type {?}\n     * @private\n     */\n    this.downTimeout_;\n\n    /**\n     * @type {number|undefined}\n     * @private\n     */\n    this.lastDragTime_;\n\n    /**\n     * @type {boolean}\n     * @private\n     */\n    this.freehand_ = false;\n\n    /**\n     * Target source for drawn features.\n     * @type {VectorSource}\n     * @private\n     */\n    this.source_ = options.source ? options.source : null;\n\n    /**\n     * Target collection for drawn features.\n     * @type {import(\"../Collection.js\").default<Feature>}\n     * @private\n     */\n    this.features_ = options.features ? options.features : null;\n\n    /**\n     * Pixel distance for snapping.\n     * @type {number}\n     * @private\n     */\n    this.snapTolerance_ = options.snapTolerance ? options.snapTolerance : 12;\n\n    /**\n     * Geometry type.\n     * @type {GeometryType}\n     * @private\n     */\n    this.type_ = /** @type {GeometryType} */ (options.type);\n\n    /**\n     * Drawing mode (derived from geometry type.\n     * @type {Mode}\n     * @private\n     */\n    this.mode_ = getMode(this.type_);\n\n    /**\n     * Stop click, singleclick, and doubleclick events from firing during drawing.\n     * Default is `false`.\n     * @type {boolean}\n     * @private\n     */\n    this.stopClick_ = !!options.stopClick;\n\n    /**\n     * The number of points that must be drawn before a polygon ring or line\n     * string can be finished.  The default is 3 for polygon rings and 2 for\n     * line strings.\n     * @type {number}\n     * @private\n     */\n    this.minPoints_ = options.minPoints ?\n      options.minPoints :\n      (this.mode_ === Mode.POLYGON ? 3 : 2);\n\n    /**\n     * The number of points that can be drawn before a polygon ring or line string\n     * is finished. The default is no restriction.\n     * @type {number}\n     * @private\n     */\n    this.maxPoints_ = options.maxPoints ? options.maxPoints : Infinity;\n\n    /**\n     * A function to decide if a potential finish coordinate is permissible\n     * @private\n     * @type {import(\"../events/condition.js\").Condition}\n     */\n    this.finishCondition_ = options.finishCondition ? options.finishCondition : TRUE;\n\n    let geometryFunction = options.geometryFunction;\n    if (!geometryFunction) {\n      if (this.type_ === GeometryType.CIRCLE) {\n        /**\n         * @param {!LineCoordType} coordinates The coordinates.\n         * @param {import(\"../geom/SimpleGeometry.js\").default=} opt_geometry Optional geometry.\n         * @return {import(\"../geom/SimpleGeometry.js\").default} A geometry.\n         */\n        geometryFunction = function(coordinates, opt_geometry) {\n          const circle = opt_geometry ? /** @type {Circle} */ (opt_geometry) :\n            new Circle([NaN, NaN]);\n          const squaredLength = squaredCoordinateDistance(\n            coordinates[0], coordinates[1]);\n          circle.setCenterAndRadius(coordinates[0], Math.sqrt(squaredLength));\n          return circle;\n        };\n      } else {\n        let Constructor;\n        const mode = this.mode_;\n        if (mode === Mode.POINT) {\n          Constructor = Point;\n        } else if (mode === Mode.LINE_STRING) {\n          Constructor = LineString;\n        } else if (mode === Mode.POLYGON) {\n          Constructor = Polygon;\n        }\n        /**\n         * @param {!LineCoordType} coordinates The coordinates.\n         * @param {import(\"../geom/SimpleGeometry.js\").default=} opt_geometry Optional geometry.\n         * @return {import(\"../geom/SimpleGeometry.js\").default} A geometry.\n         */\n        geometryFunction = function(coordinates, opt_geometry) {\n          let geometry = opt_geometry;\n          if (geometry) {\n            if (mode === Mode.POLYGON) {\n              if (coordinates[0].length) {\n                // Add a closing coordinate to match the first\n                geometry.setCoordinates([coordinates[0].concat([coordinates[0][0]])]);\n              } else {\n                geometry.setCoordinates([]);\n              }\n            } else {\n              geometry.setCoordinates(coordinates);\n            }\n          } else {\n            geometry = new Constructor(coordinates);\n          }\n          return geometry;\n        };\n      }\n    }\n\n    /**\n     * @type {GeometryFunction}\n     * @private\n     */\n    this.geometryFunction_ = geometryFunction;\n\n    /**\n     * @type {number}\n     * @private\n     */\n    this.dragVertexDelay_ = options.dragVertexDelay !== undefined ? options.dragVertexDelay : 500;\n\n    /**\n     * Finish coordinate for the feature (first point for polygons, last point for\n     * linestrings).\n     * @type {import(\"../coordinate.js\").Coordinate}\n     * @private\n     */\n    this.finishCoordinate_ = null;\n\n    /**\n     * Sketch feature.\n     * @type {Feature}\n     * @private\n     */\n    this.sketchFeature_ = null;\n\n    /**\n     * Sketch point.\n     * @type {Feature}\n     * @private\n     */\n    this.sketchPoint_ = null;\n\n    /**\n     * Sketch coordinates. Used when drawing a line or polygon.\n     * @type {SketchCoordType}\n     * @private\n     */\n    this.sketchCoords_ = null;\n\n    /**\n     * Sketch line. Used when drawing polygon.\n     * @type {Feature}\n     * @private\n     */\n    this.sketchLine_ = null;\n\n    /**\n     * Sketch line coordinates. Used when drawing a polygon or circle.\n     * @type {LineCoordType}\n     * @private\n     */\n    this.sketchLineCoords_ = null;\n\n    /**\n     * Squared tolerance for handling up events.  If the squared distance\n     * between a down and up event is greater than this tolerance, up events\n     * will not be handled.\n     * @type {number}\n     * @private\n     */\n    this.squaredClickTolerance_ = options.clickTolerance ?\n      options.clickTolerance * options.clickTolerance : 36;\n\n    /**\n     * Draw overlay where our sketch features are drawn.\n     * @type {VectorLayer}\n     * @private\n     */\n    this.overlay_ = new VectorLayer({\n      source: new VectorSource({\n        useSpatialIndex: false,\n        wrapX: options.wrapX ? options.wrapX : false\n      }),\n      style: options.style ? options.style :\n        getDefaultStyleFunction(),\n      updateWhileInteracting: true\n    });\n\n    /**\n     * Name of the geometry attribute for newly created features.\n     * @type {string|undefined}\n     * @private\n     */\n    this.geometryName_ = options.geometryName;\n\n    /**\n     * @private\n     * @type {import(\"../events/condition.js\").Condition}\n     */\n    this.condition_ = options.condition ? options.condition : noModifierKeys;\n\n    /**\n     * @private\n     * @type {import(\"../events/condition.js\").Condition}\n     */\n    this.freehandCondition_;\n    if (options.freehand) {\n      this.freehandCondition_ = always;\n    } else {\n      this.freehandCondition_ = options.freehandCondition ?\n        options.freehandCondition : shiftKeyOnly;\n    }\n\n    listen(this,\n      getChangeEventType(InteractionProperty.ACTIVE),\n      this.updateState_, this);\n\n  }\n\n  /**\n   * @inheritDoc\n   */\n  setMap(map) {\n    super.setMap(map);\n    this.updateState_();\n  }\n\n  /**\n   * Get the overlay layer that this interaction renders sketch features to.\n   * @return {VectorLayer} Overlay layer.\n   * @api\n   */\n  getOverlay() {\n    return this.overlay_;\n  }\n\n  /**\n   * Handles the {@link module:ol/MapBrowserEvent map browser event} and may actually draw or finish the drawing.\n   * @override\n   * @api\n   */\n  handleEvent(event) {\n    if (event.originalEvent.type === EventType.CONTEXTMENU) {\n      // Avoid context menu for long taps when drawing on mobile\n      event.preventDefault();\n    }\n    this.freehand_ = this.mode_ !== Mode.POINT && this.freehandCondition_(event);\n    let move = event.type === MapBrowserEventType.POINTERMOVE;\n    let pass = true;\n    if (!this.freehand_ && this.lastDragTime_ && event.type === MapBrowserEventType.POINTERDRAG) {\n      const now = Date.now();\n      if (now - this.lastDragTime_ >= this.dragVertexDelay_) {\n        this.downPx_ = event.pixel;\n        this.shouldHandle_ = !this.freehand_;\n        move = true;\n      } else {\n        this.lastDragTime_ = undefined;\n      }\n      if (this.shouldHandle_ && this.downTimeout_ !== undefined) {\n        clearTimeout(this.downTimeout_);\n        this.downTimeout_ = undefined;\n      }\n    }\n    if (this.freehand_ &&\n        event.type === MapBrowserEventType.POINTERDRAG &&\n        this.sketchFeature_ !== null) {\n      this.addToDrawing_(event);\n      pass = false;\n    } else if (this.freehand_ &&\n        event.type === MapBrowserEventType.POINTERDOWN) {\n      pass = false;\n    } else if (move) {\n      pass = event.type === MapBrowserEventType.POINTERMOVE;\n      if (pass && this.freehand_) {\n        pass = this.handlePointerMove_(event);\n      } else if (/** @type {MapBrowserPointerEvent} */ (event).pointerEvent.pointerType == POINTER_TYPE ||\n          (event.type === MapBrowserEventType.POINTERDRAG && this.downTimeout_ === undefined)) {\n        this.handlePointerMove_(event);\n      }\n    } else if (event.type === MapBrowserEventType.DBLCLICK) {\n      pass = false;\n    }\n\n    return super.handleEvent(event) && pass;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  handleDownEvent(event) {\n    this.shouldHandle_ = !this.freehand_;\n\n    if (this.freehand_) {\n      this.downPx_ = event.pixel;\n      if (!this.finishCoordinate_) {\n        this.startDrawing_(event);\n      }\n      return true;\n    } else if (this.condition_(event)) {\n      this.lastDragTime_ = Date.now();\n      this.downTimeout_ = setTimeout(function() {\n        this.handlePointerMove_(new MapBrowserPointerEvent(\n          MapBrowserEventType.POINTERMOVE, event.map, event.pointerEvent, false, event.frameState));\n      }.bind(this), this.dragVertexDelay_);\n      this.downPx_ = event.pixel;\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n\n  /**\n   * @inheritDoc\n   */\n  handleUpEvent(event) {\n    let pass = true;\n\n    if (this.downTimeout_) {\n      clearTimeout(this.downTimeout_);\n      this.downTimeout_ = undefined;\n    }\n\n    this.handlePointerMove_(event);\n\n    const circleMode = this.mode_ === Mode.CIRCLE;\n\n    if (this.shouldHandle_) {\n      if (!this.finishCoordinate_) {\n        this.startDrawing_(event);\n        if (this.mode_ === Mode.POINT) {\n          this.finishDrawing();\n        }\n      } else if (this.freehand_ || circleMode) {\n        this.finishDrawing();\n      } else if (this.atFinish_(event)) {\n        if (this.finishCondition_(event)) {\n          this.finishDrawing();\n        }\n      } else {\n        this.addToDrawing_(event);\n      }\n      pass = false;\n    } else if (this.freehand_) {\n      this.finishCoordinate_ = null;\n      this.abortDrawing_();\n    }\n    if (!pass && this.stopClick_) {\n      event.stopPropagation();\n    }\n    return pass;\n  }\n\n  /**\n   * Handle move events.\n   * @param {import(\"../MapBrowserEvent.js\").default} event A move event.\n   * @return {boolean} Pass the event to other interactions.\n   * @private\n   */\n  handlePointerMove_(event) {\n    if (this.downPx_ &&\n        ((!this.freehand_ && this.shouldHandle_) ||\n        (this.freehand_ && !this.shouldHandle_))) {\n      const downPx = this.downPx_;\n      const clickPx = event.pixel;\n      const dx = downPx[0] - clickPx[0];\n      const dy = downPx[1] - clickPx[1];\n      const squaredDistance = dx * dx + dy * dy;\n      this.shouldHandle_ = this.freehand_ ?\n        squaredDistance > this.squaredClickTolerance_ :\n        squaredDistance <= this.squaredClickTolerance_;\n      if (!this.shouldHandle_) {\n        return true;\n      }\n    }\n\n    if (this.finishCoordinate_) {\n      this.modifyDrawing_(event);\n    } else {\n      this.createOrUpdateSketchPoint_(event);\n    }\n    return true;\n  }\n\n  /**\n   * Determine if an event is within the snapping tolerance of the start coord.\n   * @param {import(\"../MapBrowserEvent.js\").default} event Event.\n   * @return {boolean} The event is within the snapping tolerance of the start.\n   * @private\n   */\n  atFinish_(event) {\n    let at = false;\n    if (this.sketchFeature_) {\n      let potentiallyDone = false;\n      let potentiallyFinishCoordinates = [this.finishCoordinate_];\n      if (this.mode_ === Mode.LINE_STRING) {\n        potentiallyDone = this.sketchCoords_.length > this.minPoints_;\n      } else if (this.mode_ === Mode.POLYGON) {\n        const sketchCoords = /** @type {PolyCoordType} */ (this.sketchCoords_);\n        potentiallyDone = sketchCoords[0].length > this.minPoints_;\n        potentiallyFinishCoordinates = [sketchCoords[0][0], sketchCoords[0][sketchCoords[0].length - 2]];\n      }\n      if (potentiallyDone) {\n        const map = event.map;\n        for (let i = 0, ii = potentiallyFinishCoordinates.length; i < ii; i++) {\n          const finishCoordinate = potentiallyFinishCoordinates[i];\n          const finishPixel = map.getPixelFromCoordinate(finishCoordinate);\n          const pixel = event.pixel;\n          const dx = pixel[0] - finishPixel[0];\n          const dy = pixel[1] - finishPixel[1];\n          const snapTolerance = this.freehand_ ? 1 : this.snapTolerance_;\n          at = Math.sqrt(dx * dx + dy * dy) <= snapTolerance;\n          if (at) {\n            this.finishCoordinate_ = finishCoordinate;\n            break;\n          }\n        }\n      }\n    }\n    return at;\n  }\n\n  /**\n   * @param {import(\"../MapBrowserEvent.js\").default} event Event.\n   * @private\n   */\n  createOrUpdateSketchPoint_(event) {\n    const coordinates = event.coordinate.slice();\n    if (!this.sketchPoint_) {\n      this.sketchPoint_ = new Feature(new Point(coordinates));\n      this.updateSketchFeatures_();\n    } else {\n      const sketchPointGeom = /** @type {Point} */ (this.sketchPoint_.getGeometry());\n      sketchPointGeom.setCoordinates(coordinates);\n    }\n  }\n\n  /**\n   * Start the drawing.\n   * @param {import(\"../MapBrowserEvent.js\").default} event Event.\n   * @private\n   */\n  startDrawing_(event) {\n    const start = event.coordinate;\n    this.finishCoordinate_ = start;\n    if (this.mode_ === Mode.POINT) {\n      this.sketchCoords_ = start.slice();\n    } else if (this.mode_ === Mode.POLYGON) {\n      this.sketchCoords_ = [[start.slice(), start.slice()]];\n      this.sketchLineCoords_ = this.sketchCoords_[0];\n    } else {\n      this.sketchCoords_ = [start.slice(), start.slice()];\n    }\n    if (this.sketchLineCoords_) {\n      this.sketchLine_ = new Feature(\n        new LineString(this.sketchLineCoords_));\n    }\n    const geometry = this.geometryFunction_(this.sketchCoords_);\n    this.sketchFeature_ = new Feature();\n    if (this.geometryName_) {\n      this.sketchFeature_.setGeometryName(this.geometryName_);\n    }\n    this.sketchFeature_.setGeometry(geometry);\n    this.updateSketchFeatures_();\n    this.dispatchEvent(new DrawEvent(DrawEventType.DRAWSTART, this.sketchFeature_));\n  }\n\n  /**\n   * Modify the drawing.\n   * @param {import(\"../MapBrowserEvent.js\").default} event Event.\n   * @private\n   */\n  modifyDrawing_(event) {\n    let coordinate = event.coordinate;\n    const geometry = /** @type {import(\"../geom/SimpleGeometry.js\").default} */ (this.sketchFeature_.getGeometry());\n    let coordinates, last;\n    if (this.mode_ === Mode.POINT) {\n      last = this.sketchCoords_;\n    } else if (this.mode_ === Mode.POLYGON) {\n      coordinates = /** @type {PolyCoordType} */ (this.sketchCoords_)[0];\n      last = coordinates[coordinates.length - 1];\n      if (this.atFinish_(event)) {\n        // snap to finish\n        coordinate = this.finishCoordinate_.slice();\n      }\n    } else {\n      coordinates = this.sketchCoords_;\n      last = coordinates[coordinates.length - 1];\n    }\n    last[0] = coordinate[0];\n    last[1] = coordinate[1];\n    this.geometryFunction_(/** @type {!LineCoordType} */ (this.sketchCoords_), geometry);\n    if (this.sketchPoint_) {\n      const sketchPointGeom = /** @type {Point} */ (this.sketchPoint_.getGeometry());\n      sketchPointGeom.setCoordinates(coordinate);\n    }\n    /** @type {LineString} */\n    let sketchLineGeom;\n    if (geometry.getType() == GeometryType.POLYGON &&\n        this.mode_ !== Mode.POLYGON) {\n      if (!this.sketchLine_) {\n        this.sketchLine_ = new Feature();\n      }\n      const ring = /** @type {Polygon} */ (geometry).getLinearRing(0);\n      sketchLineGeom = /** @type {LineString} */ (this.sketchLine_.getGeometry());\n      if (!sketchLineGeom) {\n        sketchLineGeom = new LineString(ring.getFlatCoordinates(), ring.getLayout());\n        this.sketchLine_.setGeometry(sketchLineGeom);\n      } else {\n        sketchLineGeom.setFlatCoordinates(\n          ring.getLayout(), ring.getFlatCoordinates());\n        sketchLineGeom.changed();\n      }\n    } else if (this.sketchLineCoords_) {\n      sketchLineGeom = /** @type {LineString} */ (this.sketchLine_.getGeometry());\n      sketchLineGeom.setCoordinates(this.sketchLineCoords_);\n    }\n    this.updateSketchFeatures_();\n  }\n\n  /**\n   * Add a new coordinate to the drawing.\n   * @param {import(\"../MapBrowserEvent.js\").default} event Event.\n   * @private\n   */\n  addToDrawing_(event) {\n    const coordinate = event.coordinate;\n    const geometry = /** @type {import(\"../geom/SimpleGeometry.js\").default} */ (this.sketchFeature_.getGeometry());\n    let done;\n    let coordinates;\n    if (this.mode_ === Mode.LINE_STRING) {\n      this.finishCoordinate_ = coordinate.slice();\n      coordinates = /** @type {LineCoordType} */ (this.sketchCoords_);\n      if (coordinates.length >= this.maxPoints_) {\n        if (this.freehand_) {\n          coordinates.pop();\n        } else {\n          done = true;\n        }\n      }\n      coordinates.push(coordinate.slice());\n      this.geometryFunction_(coordinates, geometry);\n    } else if (this.mode_ === Mode.POLYGON) {\n      coordinates = /** @type {PolyCoordType} */ (this.sketchCoords_)[0];\n      if (coordinates.length >= this.maxPoints_) {\n        if (this.freehand_) {\n          coordinates.pop();\n        } else {\n          done = true;\n        }\n      }\n      coordinates.push(coordinate.slice());\n      if (done) {\n        this.finishCoordinate_ = coordinates[0];\n      }\n      this.geometryFunction_(this.sketchCoords_, geometry);\n    }\n    this.updateSketchFeatures_();\n    if (done) {\n      this.finishDrawing();\n    }\n  }\n\n  /**\n   * Remove last point of the feature currently being drawn.\n   * @api\n   */\n  removeLastPoint() {\n    if (!this.sketchFeature_) {\n      return;\n    }\n    const geometry = /** @type {import(\"../geom/SimpleGeometry.js\").default} */ (this.sketchFeature_.getGeometry());\n    let coordinates;\n    /** @type {LineString} */\n    let sketchLineGeom;\n    if (this.mode_ === Mode.LINE_STRING) {\n      coordinates = /** @type {LineCoordType} */ (this.sketchCoords_);\n      coordinates.splice(-2, 1);\n      this.geometryFunction_(coordinates, geometry);\n      if (coordinates.length >= 2) {\n        this.finishCoordinate_ = coordinates[coordinates.length - 2].slice();\n      }\n    } else if (this.mode_ === Mode.POLYGON) {\n      coordinates = /** @type {PolyCoordType} */ (this.sketchCoords_)[0];\n      coordinates.splice(-2, 1);\n      sketchLineGeom = /** @type {LineString} */ (this.sketchLine_.getGeometry());\n      sketchLineGeom.setCoordinates(coordinates);\n      this.geometryFunction_(this.sketchCoords_, geometry);\n    }\n\n    if (coordinates.length === 0) {\n      this.finishCoordinate_ = null;\n    }\n\n    this.updateSketchFeatures_();\n  }\n\n  /**\n   * Stop drawing and add the sketch feature to the target layer.\n   * The {@link module:ol/interaction/Draw~DrawEventType.DRAWEND} event is\n   * dispatched before inserting the feature.\n   * @api\n   */\n  finishDrawing() {\n    const sketchFeature = this.abortDrawing_();\n    if (!sketchFeature) {\n      return;\n    }\n    let coordinates = this.sketchCoords_;\n    const geometry = /** @type {import(\"../geom/SimpleGeometry.js\").default} */ (sketchFeature.getGeometry());\n    if (this.mode_ === Mode.LINE_STRING) {\n      // remove the redundant last point\n      coordinates.pop();\n      this.geometryFunction_(coordinates, geometry);\n    } else if (this.mode_ === Mode.POLYGON) {\n      // remove the redundant last point in ring\n      /** @type {PolyCoordType} */ (coordinates)[0].pop();\n      this.geometryFunction_(coordinates, geometry);\n      coordinates = geometry.getCoordinates();\n    }\n\n    // cast multi-part geometries\n    if (this.type_ === GeometryType.MULTI_POINT) {\n      sketchFeature.setGeometry(new MultiPoint([/** @type {PointCoordType} */(coordinates)]));\n    } else if (this.type_ === GeometryType.MULTI_LINE_STRING) {\n      sketchFeature.setGeometry(new MultiLineString([/** @type {LineCoordType} */(coordinates)]));\n    } else if (this.type_ === GeometryType.MULTI_POLYGON) {\n      sketchFeature.setGeometry(new MultiPolygon([/** @type {PolyCoordType} */(coordinates)]));\n    }\n\n    // First dispatch event to allow full set up of feature\n    this.dispatchEvent(new DrawEvent(DrawEventType.DRAWEND, sketchFeature));\n\n    // Then insert feature\n    if (this.features_) {\n      this.features_.push(sketchFeature);\n    }\n    if (this.source_) {\n      this.source_.addFeature(sketchFeature);\n    }\n  }\n\n  /**\n   * Stop drawing without adding the sketch feature to the target layer.\n   * @return {Feature} The sketch feature (or null if none).\n   * @private\n   */\n  abortDrawing_() {\n    this.finishCoordinate_ = null;\n    const sketchFeature = this.sketchFeature_;\n    if (sketchFeature) {\n      this.sketchFeature_ = null;\n      this.sketchPoint_ = null;\n      this.sketchLine_ = null;\n      /** @type {VectorSource} */ (this.overlay_.getSource()).clear(true);\n    }\n    return sketchFeature;\n  }\n\n  /**\n   * Extend an existing geometry by adding additional points. This only works\n   * on features with `LineString` geometries, where the interaction will\n   * extend lines by adding points to the end of the coordinates array.\n   * @param {!Feature} feature Feature to be extended.\n   * @api\n   */\n  extend(feature) {\n    const geometry = feature.getGeometry();\n    const lineString = /** @type {LineString} */ (geometry);\n    this.sketchFeature_ = feature;\n    this.sketchCoords_ = lineString.getCoordinates();\n    const last = this.sketchCoords_[this.sketchCoords_.length - 1];\n    this.finishCoordinate_ = last.slice();\n    this.sketchCoords_.push(last.slice());\n    this.updateSketchFeatures_();\n    this.dispatchEvent(new DrawEvent(DrawEventType.DRAWSTART, this.sketchFeature_));\n  }\n\n  /**\n   * Redraw the sketch features.\n   * @private\n   */\n  updateSketchFeatures_() {\n    const sketchFeatures = [];\n    if (this.sketchFeature_) {\n      sketchFeatures.push(this.sketchFeature_);\n    }\n    if (this.sketchLine_) {\n      sketchFeatures.push(this.sketchLine_);\n    }\n    if (this.sketchPoint_) {\n      sketchFeatures.push(this.sketchPoint_);\n    }\n    const overlaySource = /** @type {VectorSource} */ (this.overlay_.getSource());\n    overlaySource.clear(true);\n    overlaySource.addFeatures(sketchFeatures);\n  }\n\n  /**\n   * @private\n   */\n  updateState_() {\n    const map = this.getMap();\n    const active = this.getActive();\n    if (!map || !active) {\n      this.abortDrawing_();\n    }\n    this.overlay_.setMap(active ? map : null);\n  }\n}\n\n\n/**\n * @return {import(\"../style/Style.js\").StyleFunction} Styles.\n */\nfunction getDefaultStyleFunction() {\n  const styles = createEditingStyle();\n  return function(feature, resolution) {\n    return styles[feature.getGeometry().getType()];\n  };\n}\n\n\n/**\n * Create a `geometryFunction` for `type: 'Circle'` that will create a regular\n * polygon with a user specified number of sides and start angle instead of an\n * `import(\"../geom/Circle.js\").Circle` geometry.\n * @param {number=} opt_sides Number of sides of the regular polygon. Default is\n *     32.\n * @param {number=} opt_angle Angle of the first point in radians. 0 means East.\n *     Default is the angle defined by the heading from the center of the\n *     regular polygon to the current pointer position.\n * @return {GeometryFunction} Function that draws a\n *     polygon.\n * @api\n */\nexport function createRegularPolygon(opt_sides, opt_angle) {\n  return function(coordinates, opt_geometry) {\n    const center = /** @type {LineCoordType} */ (coordinates)[0];\n    const end = /** @type {LineCoordType} */ (coordinates)[1];\n    const radius = Math.sqrt(\n      squaredCoordinateDistance(center, end));\n    const geometry = opt_geometry ? /** @type {Polygon} */ (opt_geometry) :\n      fromCircle(new Circle(center), opt_sides);\n    let angle = opt_angle;\n    if (!opt_angle) {\n      const x = end[0] - center[0];\n      const y = end[1] - center[1];\n      angle = Math.atan(y / x) - (x < 0 ? Math.PI : 0);\n    }\n    makeRegular(geometry, center, radius, angle);\n    return geometry;\n  };\n}\n\n\n/**\n * Create a `geometryFunction` that will create a box-shaped polygon (aligned\n * with the coordinate system axes).  Use this with the draw interaction and\n * `type: 'Circle'` to return a box instead of a circle geometry.\n * @return {GeometryFunction} Function that draws a box-shaped polygon.\n * @api\n */\nexport function createBox() {\n  return (\n    function(coordinates, opt_geometry) {\n      const extent = boundingExtent(/** @type {LineCoordType} */ (coordinates));\n      const boxCoordinates = [[\n        getBottomLeft(extent),\n        getBottomRight(extent),\n        getTopRight(extent),\n        getTopLeft(extent),\n        getBottomLeft(extent)\n      ]];\n      let geometry = opt_geometry;\n      if (geometry) {\n        geometry.setCoordinates(boxCoordinates);\n      } else {\n        geometry = new Polygon(boxCoordinates);\n      }\n      return geometry;\n    }\n  );\n}\n\n\n/**\n * Get the drawing mode.  The mode for mult-part geometries is the same as for\n * their single-part cousins.\n * @param {GeometryType} type Geometry type.\n * @return {Mode} Drawing mode.\n */\nfunction getMode(type) {\n  let mode;\n  if (type === GeometryType.POINT ||\n      type === GeometryType.MULTI_POINT) {\n    mode = Mode.POINT;\n  } else if (type === GeometryType.LINE_STRING ||\n      type === GeometryType.MULTI_LINE_STRING) {\n    mode = Mode.LINE_STRING;\n  } else if (type === GeometryType.POLYGON ||\n      type === GeometryType.MULTI_POLYGON) {\n    mode = Mode.POLYGON;\n  } else if (type === GeometryType.CIRCLE) {\n    mode = Mode.CIRCLE;\n  }\n  return (\n    /** @type {!Mode} */ (mode)\n  );\n}\n\n\nexport default Draw;\n"]},"metadata":{},"sourceType":"module"}