{"ast":null,"code":"/**\n * ag-grid-community - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components\n * @version v21.2.2\n * @link http://www.ag-grid.com/\n * @license MIT\n */\n\"use strict\";\n\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nvar __metadata = this && this.__metadata || function (k, v) {\n  if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar context_1 = require(\"../context/context\");\n\nvar beans_1 = require(\"./beans\");\n\nvar cellComp_1 = require(\"./cellComp\");\n\nvar columnController_1 = require(\"../columnController/columnController\");\n\nvar utils_1 = require(\"../utils\");\n\nvar AutoHeightCalculator =\n/** @class */\nfunction () {\n  function AutoHeightCalculator() {}\n\n  AutoHeightCalculator.prototype.registerGridComp = function (gridPanel) {\n    this.gridPanel = gridPanel;\n  };\n\n  AutoHeightCalculator.prototype.getPreferredHeightForRow = function (rowNode) {\n    var _this = this;\n\n    if (!this.eDummyContainer) {\n      this.eDummyContainer = document.createElement('div'); // so any styles on row also get applied in dummy, otherwise\n      // the content in dummy may differ to the real\n\n      utils_1._.addCssClass(this.eDummyContainer, 'ag-row ag-row-no-focus');\n    } // we put the dummy into the body container, so it will inherit all the\n    // css styles that the real cells are inheriting\n\n\n    var eBodyContainer = this.gridPanel.getCenterContainer();\n    eBodyContainer.appendChild(this.eDummyContainer);\n    var cellComps = [];\n    var autoRowHeightCols = this.columnController.getAllAutoRowHeightCols();\n    var visibleAutoRowHeightCols = autoRowHeightCols.filter(function (col) {\n      return col.isVisible();\n    });\n    visibleAutoRowHeightCols.forEach(function (col) {\n      var cellComp = new cellComp_1.CellComp(_this.$scope, _this.beans, col, rowNode, null, true, false);\n      cellComp.setParentRow(_this.eDummyContainer);\n      cellComps.push(cellComp);\n    });\n    var template = cellComps.map(function (cellComp) {\n      return cellComp.getCreateTemplate();\n    }).join(' ');\n    this.eDummyContainer.innerHTML = template; // this gets any cellComps that are using components to put the components in\n\n    cellComps.forEach(function (cellComp) {\n      return cellComp.afterAttached();\n    }); // we should be able to just take the height of the row at this point, however\n    // the row isn't expanding to cover the cell heights, i don't know why, i couldn't\n    // figure it out so instead looking at the individual cells instead\n\n    var maxCellHeight = 0;\n\n    for (var i = 0; i < this.eDummyContainer.children.length; i++) {\n      var child = this.eDummyContainer.children[i];\n\n      if (child.offsetHeight > maxCellHeight) {\n        maxCellHeight = child.offsetHeight;\n      }\n    } // we are finished with the dummy container, so get rid of it\n\n\n    eBodyContainer.removeChild(this.eDummyContainer);\n    cellComps.forEach(function (cellComp) {\n      // dunno why we need to detach first, doing it here to be consistent with code in RowComp\n      cellComp.detach();\n      cellComp.destroy();\n    }); // in case anything left over from last time\n\n    utils_1._.clearElement(this.eDummyContainer);\n\n    return maxCellHeight;\n  };\n\n  __decorate([context_1.Autowired('beans'), __metadata(\"design:type\", beans_1.Beans)], AutoHeightCalculator.prototype, \"beans\", void 0);\n\n  __decorate([context_1.Autowired(\"$scope\"), __metadata(\"design:type\", Object)], AutoHeightCalculator.prototype, \"$scope\", void 0);\n\n  __decorate([context_1.Autowired(\"columnController\"), __metadata(\"design:type\", columnController_1.ColumnController)], AutoHeightCalculator.prototype, \"columnController\", void 0);\n\n  AutoHeightCalculator = __decorate([context_1.Bean('autoHeightCalculator')], AutoHeightCalculator);\n  return AutoHeightCalculator;\n}();\n\nexports.AutoHeightCalculator = AutoHeightCalculator;","map":{"version":3,"sources":["/Users/dirkmennecke77/Desktop/Lageplan/node_modules/ag-grid-community/dist/lib/rendering/autoHeightCalculator.js"],"names":["__decorate","decorators","target","key","desc","c","arguments","length","r","Object","getOwnPropertyDescriptor","d","Reflect","decorate","i","defineProperty","__metadata","k","v","metadata","exports","value","context_1","require","beans_1","cellComp_1","columnController_1","utils_1","AutoHeightCalculator","prototype","registerGridComp","gridPanel","getPreferredHeightForRow","rowNode","_this","eDummyContainer","document","createElement","_","addCssClass","eBodyContainer","getCenterContainer","appendChild","cellComps","autoRowHeightCols","columnController","getAllAutoRowHeightCols","visibleAutoRowHeightCols","filter","col","isVisible","forEach","cellComp","CellComp","$scope","beans","setParentRow","push","template","map","getCreateTemplate","join","innerHTML","afterAttached","maxCellHeight","children","child","offsetHeight","removeChild","detach","destroy","clearElement","Autowired","Beans","ColumnController","Bean"],"mappings":"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","sourcesContent":["/**\n * ag-grid-community - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components\n * @version v21.2.2\n * @link http://www.ag-grid.com/\n * @license MIT\n */\n\"use strict\";\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __metadata = (this && this.__metadata) || function (k, v) {\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar context_1 = require(\"../context/context\");\nvar beans_1 = require(\"./beans\");\nvar cellComp_1 = require(\"./cellComp\");\nvar columnController_1 = require(\"../columnController/columnController\");\nvar utils_1 = require(\"../utils\");\nvar AutoHeightCalculator = /** @class */ (function () {\n    function AutoHeightCalculator() {\n    }\n    AutoHeightCalculator.prototype.registerGridComp = function (gridPanel) {\n        this.gridPanel = gridPanel;\n    };\n    AutoHeightCalculator.prototype.getPreferredHeightForRow = function (rowNode) {\n        var _this = this;\n        if (!this.eDummyContainer) {\n            this.eDummyContainer = document.createElement('div');\n            // so any styles on row also get applied in dummy, otherwise\n            // the content in dummy may differ to the real\n            utils_1._.addCssClass(this.eDummyContainer, 'ag-row ag-row-no-focus');\n        }\n        // we put the dummy into the body container, so it will inherit all the\n        // css styles that the real cells are inheriting\n        var eBodyContainer = this.gridPanel.getCenterContainer();\n        eBodyContainer.appendChild(this.eDummyContainer);\n        var cellComps = [];\n        var autoRowHeightCols = this.columnController.getAllAutoRowHeightCols();\n        var visibleAutoRowHeightCols = autoRowHeightCols.filter(function (col) { return col.isVisible(); });\n        visibleAutoRowHeightCols.forEach(function (col) {\n            var cellComp = new cellComp_1.CellComp(_this.$scope, _this.beans, col, rowNode, null, true, false);\n            cellComp.setParentRow(_this.eDummyContainer);\n            cellComps.push(cellComp);\n        });\n        var template = cellComps.map(function (cellComp) { return cellComp.getCreateTemplate(); }).join(' ');\n        this.eDummyContainer.innerHTML = template;\n        // this gets any cellComps that are using components to put the components in\n        cellComps.forEach(function (cellComp) { return cellComp.afterAttached(); });\n        // we should be able to just take the height of the row at this point, however\n        // the row isn't expanding to cover the cell heights, i don't know why, i couldn't\n        // figure it out so instead looking at the individual cells instead\n        var maxCellHeight = 0;\n        for (var i = 0; i < this.eDummyContainer.children.length; i++) {\n            var child = this.eDummyContainer.children[i];\n            if (child.offsetHeight > maxCellHeight) {\n                maxCellHeight = child.offsetHeight;\n            }\n        }\n        // we are finished with the dummy container, so get rid of it\n        eBodyContainer.removeChild(this.eDummyContainer);\n        cellComps.forEach(function (cellComp) {\n            // dunno why we need to detach first, doing it here to be consistent with code in RowComp\n            cellComp.detach();\n            cellComp.destroy();\n        });\n        // in case anything left over from last time\n        utils_1._.clearElement(this.eDummyContainer);\n        return maxCellHeight;\n    };\n    __decorate([\n        context_1.Autowired('beans'),\n        __metadata(\"design:type\", beans_1.Beans)\n    ], AutoHeightCalculator.prototype, \"beans\", void 0);\n    __decorate([\n        context_1.Autowired(\"$scope\"),\n        __metadata(\"design:type\", Object)\n    ], AutoHeightCalculator.prototype, \"$scope\", void 0);\n    __decorate([\n        context_1.Autowired(\"columnController\"),\n        __metadata(\"design:type\", columnController_1.ColumnController)\n    ], AutoHeightCalculator.prototype, \"columnController\", void 0);\n    AutoHeightCalculator = __decorate([\n        context_1.Bean('autoHeightCalculator')\n    ], AutoHeightCalculator);\n    return AutoHeightCalculator;\n}());\nexports.AutoHeightCalculator = AutoHeightCalculator;\n"]},"metadata":{},"sourceType":"script"}