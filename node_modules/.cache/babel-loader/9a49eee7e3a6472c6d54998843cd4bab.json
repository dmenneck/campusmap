{"ast":null,"code":"/**\n * ag-grid-community - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components\n * @version v21.2.2\n * @link http://www.ag-grid.com/\n * @license MIT\n */\n\"use strict\";\n\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nvar __metadata = this && this.__metadata || function (k, v) {\n  if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar dragAndDropService_1 = require(\"../dragAndDrop/dragAndDropService\");\n\nvar context_1 = require(\"../context/context\");\n\nvar focusedCellController_1 = require(\"../focusedCellController\");\n\nvar gridOptionsWrapper_1 = require(\"../gridOptionsWrapper\");\n\nvar eventService_1 = require(\"../eventService\");\n\nvar eventKeys_1 = require(\"../eventKeys\");\n\nvar constants_1 = require(\"../constants\");\n\nvar RowDragFeature =\n/** @class */\nfunction () {\n  function RowDragFeature(eContainer, gridPanel) {\n    this.eContainer = eContainer;\n    this.gridPanel = gridPanel;\n  }\n\n  RowDragFeature.prototype.postConstruct = function () {\n    if (this.gridOptionsWrapper.isRowModelDefault()) {\n      this.clientSideRowModel = this.rowModel;\n    }\n  };\n\n  RowDragFeature.prototype.getContainer = function () {\n    return this.eContainer;\n  };\n\n  RowDragFeature.prototype.isInterestedIn = function (type) {\n    return type === dragAndDropService_1.DragSourceType.RowDrag;\n  };\n\n  RowDragFeature.prototype.getIconName = function () {\n    return dragAndDropService_1.DragAndDropService.ICON_MOVE;\n  };\n\n  RowDragFeature.prototype.onDragEnter = function (draggingEvent) {\n    // when entering, we fire the enter event, then in onEnterOrDragging,\n    // we also fire the move event. so we get both events when entering.\n    this.dispatchEvent(eventKeys_1.Events.EVENT_ROW_DRAG_ENTER, draggingEvent);\n    this.dragAndDropService.setGhostIcon(dragAndDropService_1.DragAndDropService.ICON_MOVE);\n    draggingEvent.dragItem.rowNode.setDragging(true);\n    this.onEnterOrDragging(draggingEvent);\n  };\n\n  RowDragFeature.prototype.onDragging = function (draggingEvent) {\n    this.onEnterOrDragging(draggingEvent);\n  };\n\n  RowDragFeature.prototype.onEnterOrDragging = function (draggingEvent) {\n    // this event is fired for enter and move\n    this.dispatchEvent(eventKeys_1.Events.EVENT_ROW_DRAG_MOVE, draggingEvent);\n    this.lastDraggingEvent = draggingEvent;\n    var pixel = this.normaliseForScroll(draggingEvent.y);\n    var managedDrag = this.gridOptionsWrapper.isRowDragManaged();\n\n    if (managedDrag) {\n      this.doManagedDrag(draggingEvent, pixel);\n    }\n\n    this.checkCenterForScrolling(pixel);\n  };\n\n  RowDragFeature.prototype.doManagedDrag = function (draggingEvent, pixel) {\n    var rowNode = draggingEvent.dragItem.rowNode;\n    var rowWasMoved = this.clientSideRowModel.ensureRowAtPixel(rowNode, pixel);\n\n    if (rowWasMoved) {\n      this.focusedCellController.clearFocusedCell();\n\n      if (this.rangeController) {\n        this.rangeController.removeAllCellRanges();\n      }\n    }\n  };\n\n  RowDragFeature.prototype.normaliseForScroll = function (pixel) {\n    var gridPanelHasScrolls = this.gridOptionsWrapper.getDomLayout() === constants_1.Constants.DOM_LAYOUT_NORMAL;\n\n    if (gridPanelHasScrolls) {\n      var pixelRange = this.gridPanel.getVScrollPosition();\n      return pixel + pixelRange.top;\n    } else {\n      return pixel;\n    }\n  };\n\n  RowDragFeature.prototype.checkCenterForScrolling = function (pixel) {\n    // scroll if the mouse is within 50px of the grid edge\n    var pixelRange = this.gridPanel.getVScrollPosition(); // console.log(`pixelRange = (${pixelRange.top}, ${pixelRange.bottom})`);\n\n    this.needToMoveUp = pixel < pixelRange.top + 50;\n    this.needToMoveDown = pixel > pixelRange.bottom - 50; // console.log(`needToMoveUp = ${this.needToMoveUp} = pixel < (pixelRange.top + 50) = ${pixel} < (${pixelRange.top} + 50)`);\n    // console.log(`needToMoveDown = ${this.needToMoveDown} = pixel < (pixelRange.top + 50) = ${pixel} < (${pixelRange.top} + 50)`);\n\n    if (this.needToMoveUp || this.needToMoveDown) {\n      this.ensureIntervalStarted();\n    } else {\n      this.ensureIntervalCleared();\n    }\n  };\n\n  RowDragFeature.prototype.ensureIntervalStarted = function () {\n    if (!this.movingIntervalId) {\n      this.intervalCount = 0;\n      this.movingIntervalId = window.setInterval(this.moveInterval.bind(this), 100);\n    }\n  };\n\n  RowDragFeature.prototype.ensureIntervalCleared = function () {\n    if (this.moveInterval) {\n      window.clearInterval(this.movingIntervalId);\n      this.movingIntervalId = null;\n    }\n  };\n\n  RowDragFeature.prototype.moveInterval = function () {\n    // the amounts we move get bigger at each interval, so the speed accelerates, starting a bit slow\n    // and getting faster. this is to give smoother user experience. we max at 100px to limit the speed.\n    var pixelsToMove;\n    this.intervalCount++;\n    pixelsToMove = 10 + this.intervalCount * 5;\n\n    if (pixelsToMove > 100) {\n      pixelsToMove = 100;\n    }\n\n    var pixelsMoved;\n\n    if (this.needToMoveDown) {\n      pixelsMoved = this.gridPanel.scrollVertically(pixelsToMove);\n    } else if (this.needToMoveUp) {\n      pixelsMoved = this.gridPanel.scrollVertically(-pixelsToMove);\n    }\n\n    if (pixelsMoved !== 0) {\n      this.onDragging(this.lastDraggingEvent);\n    }\n  }; // i tried using generics here with this:\n  //     public createEvent<T extends RowDragEvent>(type: string, clazz: {new(): T; }, draggingEvent: DraggingEvent) {\n  // but it didn't work - i think it's because it only works with classes, and not interfaces, (the events are interfaces)\n\n\n  RowDragFeature.prototype.dispatchEvent = function (type, draggingEvent) {\n    var yNormalised = this.normaliseForScroll(draggingEvent.y);\n    var overIndex = -1;\n    var overNode = null;\n    var mouseIsPastLastRow = yNormalised > this.rowModel.getCurrentPageHeight();\n\n    if (!mouseIsPastLastRow) {\n      overIndex = this.rowModel.getRowIndexAtPixel(yNormalised);\n      overNode = this.rowModel.getRow(overIndex);\n    }\n\n    var vDirectionString;\n\n    switch (draggingEvent.vDirection) {\n      case dragAndDropService_1.VDirection.Down:\n        vDirectionString = 'down';\n        break;\n\n      case dragAndDropService_1.VDirection.Up:\n        vDirectionString = 'up';\n        break;\n\n      default:\n        vDirectionString = null;\n        break;\n    }\n\n    var event = {\n      type: type,\n      api: this.gridOptionsWrapper.getApi(),\n      columnApi: this.gridOptionsWrapper.getColumnApi(),\n      event: draggingEvent.event,\n      node: draggingEvent.dragItem.rowNode,\n      overIndex: overIndex,\n      overNode: overNode,\n      y: yNormalised,\n      vDirection: vDirectionString\n    };\n    this.eventService.dispatchEvent(event);\n  };\n\n  RowDragFeature.prototype.onDragLeave = function (draggingEvent) {\n    this.dispatchEvent(eventKeys_1.Events.EVENT_ROW_DRAG_LEAVE, draggingEvent);\n    this.stopDragging(draggingEvent);\n  };\n\n  RowDragFeature.prototype.onDragStop = function (draggingEvent) {\n    this.dispatchEvent(eventKeys_1.Events.EVENT_ROW_DRAG_END, draggingEvent);\n    this.stopDragging(draggingEvent);\n  };\n\n  RowDragFeature.prototype.stopDragging = function (draggingEvent) {\n    this.ensureIntervalCleared();\n    draggingEvent.dragItem.rowNode.setDragging(false);\n  };\n\n  __decorate([context_1.Autowired('dragAndDropService'), __metadata(\"design:type\", dragAndDropService_1.DragAndDropService)], RowDragFeature.prototype, \"dragAndDropService\", void 0);\n\n  __decorate([context_1.Autowired('rowModel'), __metadata(\"design:type\", Object)], RowDragFeature.prototype, \"rowModel\", void 0);\n\n  __decorate([context_1.Autowired('focusedCellController'), __metadata(\"design:type\", focusedCellController_1.FocusedCellController)], RowDragFeature.prototype, \"focusedCellController\", void 0);\n\n  __decorate([context_1.Autowired('gridOptionsWrapper'), __metadata(\"design:type\", gridOptionsWrapper_1.GridOptionsWrapper)], RowDragFeature.prototype, \"gridOptionsWrapper\", void 0);\n\n  __decorate([context_1.Optional('rangeController'), __metadata(\"design:type\", Object)], RowDragFeature.prototype, \"rangeController\", void 0);\n\n  __decorate([context_1.Autowired('eventService'), __metadata(\"design:type\", eventService_1.EventService)], RowDragFeature.prototype, \"eventService\", void 0);\n\n  __decorate([context_1.PostConstruct, __metadata(\"design:type\", Function), __metadata(\"design:paramtypes\", []), __metadata(\"design:returntype\", void 0)], RowDragFeature.prototype, \"postConstruct\", null);\n\n  return RowDragFeature;\n}();\n\nexports.RowDragFeature = RowDragFeature;","map":{"version":3,"sources":["/Users/dirkmennecke77/Desktop/Lageplan/node_modules/ag-grid-community/dist/lib/gridPanel/rowDragFeature.js"],"names":["__decorate","decorators","target","key","desc","c","arguments","length","r","Object","getOwnPropertyDescriptor","d","Reflect","decorate","i","defineProperty","__metadata","k","v","metadata","exports","value","dragAndDropService_1","require","context_1","focusedCellController_1","gridOptionsWrapper_1","eventService_1","eventKeys_1","constants_1","RowDragFeature","eContainer","gridPanel","prototype","postConstruct","gridOptionsWrapper","isRowModelDefault","clientSideRowModel","rowModel","getContainer","isInterestedIn","type","DragSourceType","RowDrag","getIconName","DragAndDropService","ICON_MOVE","onDragEnter","draggingEvent","dispatchEvent","Events","EVENT_ROW_DRAG_ENTER","dragAndDropService","setGhostIcon","dragItem","rowNode","setDragging","onEnterOrDragging","onDragging","EVENT_ROW_DRAG_MOVE","lastDraggingEvent","pixel","normaliseForScroll","y","managedDrag","isRowDragManaged","doManagedDrag","checkCenterForScrolling","rowWasMoved","ensureRowAtPixel","focusedCellController","clearFocusedCell","rangeController","removeAllCellRanges","gridPanelHasScrolls","getDomLayout","Constants","DOM_LAYOUT_NORMAL","pixelRange","getVScrollPosition","top","needToMoveUp","needToMoveDown","bottom","ensureIntervalStarted","ensureIntervalCleared","movingIntervalId","intervalCount","window","setInterval","moveInterval","bind","clearInterval","pixelsToMove","pixelsMoved","scrollVertically","yNormalised","overIndex","overNode","mouseIsPastLastRow","getCurrentPageHeight","getRowIndexAtPixel","getRow","vDirectionString","vDirection","VDirection","Down","Up","event","api","getApi","columnApi","getColumnApi","node","eventService","onDragLeave","EVENT_ROW_DRAG_LEAVE","stopDragging","onDragStop","EVENT_ROW_DRAG_END","Autowired","FocusedCellController","GridOptionsWrapper","Optional","EventService","PostConstruct","Function"],"mappings":"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","sourcesContent":["/**\n * ag-grid-community - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components\n * @version v21.2.2\n * @link http://www.ag-grid.com/\n * @license MIT\n */\n\"use strict\";\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __metadata = (this && this.__metadata) || function (k, v) {\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar dragAndDropService_1 = require(\"../dragAndDrop/dragAndDropService\");\nvar context_1 = require(\"../context/context\");\nvar focusedCellController_1 = require(\"../focusedCellController\");\nvar gridOptionsWrapper_1 = require(\"../gridOptionsWrapper\");\nvar eventService_1 = require(\"../eventService\");\nvar eventKeys_1 = require(\"../eventKeys\");\nvar constants_1 = require(\"../constants\");\nvar RowDragFeature = /** @class */ (function () {\n    function RowDragFeature(eContainer, gridPanel) {\n        this.eContainer = eContainer;\n        this.gridPanel = gridPanel;\n    }\n    RowDragFeature.prototype.postConstruct = function () {\n        if (this.gridOptionsWrapper.isRowModelDefault()) {\n            this.clientSideRowModel = this.rowModel;\n        }\n    };\n    RowDragFeature.prototype.getContainer = function () {\n        return this.eContainer;\n    };\n    RowDragFeature.prototype.isInterestedIn = function (type) {\n        return type === dragAndDropService_1.DragSourceType.RowDrag;\n    };\n    RowDragFeature.prototype.getIconName = function () {\n        return dragAndDropService_1.DragAndDropService.ICON_MOVE;\n    };\n    RowDragFeature.prototype.onDragEnter = function (draggingEvent) {\n        // when entering, we fire the enter event, then in onEnterOrDragging,\n        // we also fire the move event. so we get both events when entering.\n        this.dispatchEvent(eventKeys_1.Events.EVENT_ROW_DRAG_ENTER, draggingEvent);\n        this.dragAndDropService.setGhostIcon(dragAndDropService_1.DragAndDropService.ICON_MOVE);\n        draggingEvent.dragItem.rowNode.setDragging(true);\n        this.onEnterOrDragging(draggingEvent);\n    };\n    RowDragFeature.prototype.onDragging = function (draggingEvent) {\n        this.onEnterOrDragging(draggingEvent);\n    };\n    RowDragFeature.prototype.onEnterOrDragging = function (draggingEvent) {\n        // this event is fired for enter and move\n        this.dispatchEvent(eventKeys_1.Events.EVENT_ROW_DRAG_MOVE, draggingEvent);\n        this.lastDraggingEvent = draggingEvent;\n        var pixel = this.normaliseForScroll(draggingEvent.y);\n        var managedDrag = this.gridOptionsWrapper.isRowDragManaged();\n        if (managedDrag) {\n            this.doManagedDrag(draggingEvent, pixel);\n        }\n        this.checkCenterForScrolling(pixel);\n    };\n    RowDragFeature.prototype.doManagedDrag = function (draggingEvent, pixel) {\n        var rowNode = draggingEvent.dragItem.rowNode;\n        var rowWasMoved = this.clientSideRowModel.ensureRowAtPixel(rowNode, pixel);\n        if (rowWasMoved) {\n            this.focusedCellController.clearFocusedCell();\n            if (this.rangeController) {\n                this.rangeController.removeAllCellRanges();\n            }\n        }\n    };\n    RowDragFeature.prototype.normaliseForScroll = function (pixel) {\n        var gridPanelHasScrolls = this.gridOptionsWrapper.getDomLayout() === constants_1.Constants.DOM_LAYOUT_NORMAL;\n        if (gridPanelHasScrolls) {\n            var pixelRange = this.gridPanel.getVScrollPosition();\n            return pixel + pixelRange.top;\n        }\n        else {\n            return pixel;\n        }\n    };\n    RowDragFeature.prototype.checkCenterForScrolling = function (pixel) {\n        // scroll if the mouse is within 50px of the grid edge\n        var pixelRange = this.gridPanel.getVScrollPosition();\n        // console.log(`pixelRange = (${pixelRange.top}, ${pixelRange.bottom})`);\n        this.needToMoveUp = pixel < (pixelRange.top + 50);\n        this.needToMoveDown = pixel > (pixelRange.bottom - 50);\n        // console.log(`needToMoveUp = ${this.needToMoveUp} = pixel < (pixelRange.top + 50) = ${pixel} < (${pixelRange.top} + 50)`);\n        // console.log(`needToMoveDown = ${this.needToMoveDown} = pixel < (pixelRange.top + 50) = ${pixel} < (${pixelRange.top} + 50)`);\n        if (this.needToMoveUp || this.needToMoveDown) {\n            this.ensureIntervalStarted();\n        }\n        else {\n            this.ensureIntervalCleared();\n        }\n    };\n    RowDragFeature.prototype.ensureIntervalStarted = function () {\n        if (!this.movingIntervalId) {\n            this.intervalCount = 0;\n            this.movingIntervalId = window.setInterval(this.moveInterval.bind(this), 100);\n        }\n    };\n    RowDragFeature.prototype.ensureIntervalCleared = function () {\n        if (this.moveInterval) {\n            window.clearInterval(this.movingIntervalId);\n            this.movingIntervalId = null;\n        }\n    };\n    RowDragFeature.prototype.moveInterval = function () {\n        // the amounts we move get bigger at each interval, so the speed accelerates, starting a bit slow\n        // and getting faster. this is to give smoother user experience. we max at 100px to limit the speed.\n        var pixelsToMove;\n        this.intervalCount++;\n        pixelsToMove = 10 + (this.intervalCount * 5);\n        if (pixelsToMove > 100) {\n            pixelsToMove = 100;\n        }\n        var pixelsMoved;\n        if (this.needToMoveDown) {\n            pixelsMoved = this.gridPanel.scrollVertically(pixelsToMove);\n        }\n        else if (this.needToMoveUp) {\n            pixelsMoved = this.gridPanel.scrollVertically(-pixelsToMove);\n        }\n        if (pixelsMoved !== 0) {\n            this.onDragging(this.lastDraggingEvent);\n        }\n    };\n    // i tried using generics here with this:\n    //     public createEvent<T extends RowDragEvent>(type: string, clazz: {new(): T; }, draggingEvent: DraggingEvent) {\n    // but it didn't work - i think it's because it only works with classes, and not interfaces, (the events are interfaces)\n    RowDragFeature.prototype.dispatchEvent = function (type, draggingEvent) {\n        var yNormalised = this.normaliseForScroll(draggingEvent.y);\n        var overIndex = -1;\n        var overNode = null;\n        var mouseIsPastLastRow = yNormalised > this.rowModel.getCurrentPageHeight();\n        if (!mouseIsPastLastRow) {\n            overIndex = this.rowModel.getRowIndexAtPixel(yNormalised);\n            overNode = this.rowModel.getRow(overIndex);\n        }\n        var vDirectionString;\n        switch (draggingEvent.vDirection) {\n            case dragAndDropService_1.VDirection.Down:\n                vDirectionString = 'down';\n                break;\n            case dragAndDropService_1.VDirection.Up:\n                vDirectionString = 'up';\n                break;\n            default:\n                vDirectionString = null;\n                break;\n        }\n        var event = {\n            type: type,\n            api: this.gridOptionsWrapper.getApi(),\n            columnApi: this.gridOptionsWrapper.getColumnApi(),\n            event: draggingEvent.event,\n            node: draggingEvent.dragItem.rowNode,\n            overIndex: overIndex,\n            overNode: overNode,\n            y: yNormalised,\n            vDirection: vDirectionString\n        };\n        this.eventService.dispatchEvent(event);\n    };\n    RowDragFeature.prototype.onDragLeave = function (draggingEvent) {\n        this.dispatchEvent(eventKeys_1.Events.EVENT_ROW_DRAG_LEAVE, draggingEvent);\n        this.stopDragging(draggingEvent);\n    };\n    RowDragFeature.prototype.onDragStop = function (draggingEvent) {\n        this.dispatchEvent(eventKeys_1.Events.EVENT_ROW_DRAG_END, draggingEvent);\n        this.stopDragging(draggingEvent);\n    };\n    RowDragFeature.prototype.stopDragging = function (draggingEvent) {\n        this.ensureIntervalCleared();\n        draggingEvent.dragItem.rowNode.setDragging(false);\n    };\n    __decorate([\n        context_1.Autowired('dragAndDropService'),\n        __metadata(\"design:type\", dragAndDropService_1.DragAndDropService)\n    ], RowDragFeature.prototype, \"dragAndDropService\", void 0);\n    __decorate([\n        context_1.Autowired('rowModel'),\n        __metadata(\"design:type\", Object)\n    ], RowDragFeature.prototype, \"rowModel\", void 0);\n    __decorate([\n        context_1.Autowired('focusedCellController'),\n        __metadata(\"design:type\", focusedCellController_1.FocusedCellController)\n    ], RowDragFeature.prototype, \"focusedCellController\", void 0);\n    __decorate([\n        context_1.Autowired('gridOptionsWrapper'),\n        __metadata(\"design:type\", gridOptionsWrapper_1.GridOptionsWrapper)\n    ], RowDragFeature.prototype, \"gridOptionsWrapper\", void 0);\n    __decorate([\n        context_1.Optional('rangeController'),\n        __metadata(\"design:type\", Object)\n    ], RowDragFeature.prototype, \"rangeController\", void 0);\n    __decorate([\n        context_1.Autowired('eventService'),\n        __metadata(\"design:type\", eventService_1.EventService)\n    ], RowDragFeature.prototype, \"eventService\", void 0);\n    __decorate([\n        context_1.PostConstruct,\n        __metadata(\"design:type\", Function),\n        __metadata(\"design:paramtypes\", []),\n        __metadata(\"design:returntype\", void 0)\n    ], RowDragFeature.prototype, \"postConstruct\", null);\n    return RowDragFeature;\n}());\nexports.RowDragFeature = RowDragFeature;\n"]},"metadata":{},"sourceType":"script"}