{"ast":null,"code":"/**\n * ag-grid-community - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components\n * @version v21.2.2\n * @link http://www.ag-grid.com/\n * @license MIT\n */\n\"use strict\";\n\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nvar __metadata = this && this.__metadata || function (k, v) {\n  if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar context_1 = require(\"../context/context\");\n\nvar context_2 = require(\"../context/context\");\n\nvar gridOptionsWrapper_1 = require(\"../gridOptionsWrapper\");\n\nvar utils_1 = require(\"../utils\");\n\nvar MouseEventService =\n/** @class */\nfunction () {\n  function MouseEventService() {\n    this.gridInstanceId = MouseEventService_1.gridInstanceSequence.next();\n  }\n\n  MouseEventService_1 = MouseEventService;\n\n  MouseEventService.prototype.init = function () {\n    this.stampDomElementWithGridInstance();\n  }; // we put the instance id onto the main DOM element. this is used for events, when grids are inside grids,\n  // so the grid can work out if the even came from this grid or a grid inside this one. see the ctrl+v logic\n  // for where this is used.\n\n\n  MouseEventService.prototype.stampDomElementWithGridInstance = function () {\n    this.eGridDiv[MouseEventService_1.GRID_DOM_KEY] = this.gridInstanceId;\n  };\n\n  MouseEventService.prototype.getRenderedCellForEvent = function (event) {\n    return utils_1._.getCellCompForEvent(this.gridOptionsWrapper, event);\n  }; // walks the path of the event, and returns true if this grid is the first one that it finds. if doing\n  // master / detail grids, and a child grid is found, then it returns false. this stops things like copy/paste\n  // getting executed on many grids at the same time.\n\n\n  MouseEventService.prototype.isEventFromThisGrid = function (event) {\n    var path = utils_1._.getEventPath(event);\n\n    for (var i = 0; i < path.length; i++) {\n      var element = path[i];\n      var instanceId = element[MouseEventService_1.GRID_DOM_KEY];\n\n      if (utils_1._.exists(instanceId)) {\n        var eventFromThisGrid = instanceId === this.gridInstanceId;\n        return eventFromThisGrid;\n      }\n    }\n\n    return false;\n  };\n\n  MouseEventService.prototype.getCellPositionForEvent = function (event) {\n    var cellComp = this.getRenderedCellForEvent(event);\n    return cellComp ? cellComp.getCellPosition() : null;\n  };\n\n  var MouseEventService_1;\n  MouseEventService.gridInstanceSequence = new utils_1.NumberSequence();\n  MouseEventService.GRID_DOM_KEY = '__ag_grid_instance';\n\n  __decorate([context_2.Autowired('gridOptionsWrapper'), __metadata(\"design:type\", gridOptionsWrapper_1.GridOptionsWrapper)], MouseEventService.prototype, \"gridOptionsWrapper\", void 0);\n\n  __decorate([context_2.Autowired('eGridDiv'), __metadata(\"design:type\", HTMLElement)], MouseEventService.prototype, \"eGridDiv\", void 0);\n\n  __decorate([context_1.PostConstruct, __metadata(\"design:type\", Function), __metadata(\"design:paramtypes\", []), __metadata(\"design:returntype\", void 0)], MouseEventService.prototype, \"init\", null);\n\n  MouseEventService = MouseEventService_1 = __decorate([context_1.Bean('mouseEventService')], MouseEventService);\n  return MouseEventService;\n}();\n\nexports.MouseEventService = MouseEventService;","map":{"version":3,"sources":["/Users/dirkmennecke77/Desktop/Lageplan/node_modules/ag-grid-community/dist/lib/gridPanel/mouseEventService.js"],"names":["__decorate","decorators","target","key","desc","c","arguments","length","r","Object","getOwnPropertyDescriptor","d","Reflect","decorate","i","defineProperty","__metadata","k","v","metadata","exports","value","context_1","require","context_2","gridOptionsWrapper_1","utils_1","MouseEventService","gridInstanceId","MouseEventService_1","gridInstanceSequence","next","prototype","init","stampDomElementWithGridInstance","eGridDiv","GRID_DOM_KEY","getRenderedCellForEvent","event","_","getCellCompForEvent","gridOptionsWrapper","isEventFromThisGrid","path","getEventPath","element","instanceId","exists","eventFromThisGrid","getCellPositionForEvent","cellComp","getCellPosition","NumberSequence","Autowired","GridOptionsWrapper","HTMLElement","PostConstruct","Function","Bean"],"mappings":"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","sourcesContent":["/**\n * ag-grid-community - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components\n * @version v21.2.2\n * @link http://www.ag-grid.com/\n * @license MIT\n */\n\"use strict\";\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __metadata = (this && this.__metadata) || function (k, v) {\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar context_1 = require(\"../context/context\");\nvar context_2 = require(\"../context/context\");\nvar gridOptionsWrapper_1 = require(\"../gridOptionsWrapper\");\nvar utils_1 = require(\"../utils\");\nvar MouseEventService = /** @class */ (function () {\n    function MouseEventService() {\n        this.gridInstanceId = MouseEventService_1.gridInstanceSequence.next();\n    }\n    MouseEventService_1 = MouseEventService;\n    MouseEventService.prototype.init = function () {\n        this.stampDomElementWithGridInstance();\n    };\n    // we put the instance id onto the main DOM element. this is used for events, when grids are inside grids,\n    // so the grid can work out if the even came from this grid or a grid inside this one. see the ctrl+v logic\n    // for where this is used.\n    MouseEventService.prototype.stampDomElementWithGridInstance = function () {\n        this.eGridDiv[MouseEventService_1.GRID_DOM_KEY] = this.gridInstanceId;\n    };\n    MouseEventService.prototype.getRenderedCellForEvent = function (event) {\n        return utils_1._.getCellCompForEvent(this.gridOptionsWrapper, event);\n    };\n    // walks the path of the event, and returns true if this grid is the first one that it finds. if doing\n    // master / detail grids, and a child grid is found, then it returns false. this stops things like copy/paste\n    // getting executed on many grids at the same time.\n    MouseEventService.prototype.isEventFromThisGrid = function (event) {\n        var path = utils_1._.getEventPath(event);\n        for (var i = 0; i < path.length; i++) {\n            var element = path[i];\n            var instanceId = element[MouseEventService_1.GRID_DOM_KEY];\n            if (utils_1._.exists(instanceId)) {\n                var eventFromThisGrid = instanceId === this.gridInstanceId;\n                return eventFromThisGrid;\n            }\n        }\n        return false;\n    };\n    MouseEventService.prototype.getCellPositionForEvent = function (event) {\n        var cellComp = this.getRenderedCellForEvent(event);\n        return cellComp ? cellComp.getCellPosition() : null;\n    };\n    var MouseEventService_1;\n    MouseEventService.gridInstanceSequence = new utils_1.NumberSequence();\n    MouseEventService.GRID_DOM_KEY = '__ag_grid_instance';\n    __decorate([\n        context_2.Autowired('gridOptionsWrapper'),\n        __metadata(\"design:type\", gridOptionsWrapper_1.GridOptionsWrapper)\n    ], MouseEventService.prototype, \"gridOptionsWrapper\", void 0);\n    __decorate([\n        context_2.Autowired('eGridDiv'),\n        __metadata(\"design:type\", HTMLElement)\n    ], MouseEventService.prototype, \"eGridDiv\", void 0);\n    __decorate([\n        context_1.PostConstruct,\n        __metadata(\"design:type\", Function),\n        __metadata(\"design:paramtypes\", []),\n        __metadata(\"design:returntype\", void 0)\n    ], MouseEventService.prototype, \"init\", null);\n    MouseEventService = MouseEventService_1 = __decorate([\n        context_1.Bean('mouseEventService')\n    ], MouseEventService);\n    return MouseEventService;\n}());\nexports.MouseEventService = MouseEventService;\n"]},"metadata":{},"sourceType":"script"}