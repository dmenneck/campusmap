{"ast":null,"code":"/**\n * @module ol/pointer/MsSource\n */\n// Based on https://github.com/Polymer/PointerEvents\n// Copyright (c) 2013 The Polymer Authors. All rights reserved.\n//\n// Redistribution and use in source and binary forms, with or without\n// modification, are permitted provided that the following conditions are\n// met:\n//\n// * Redistributions of source code must retain the above copyright\n// notice, this list of conditions and the following disclaimer.\n// * Redistributions in binary form must reproduce the above\n// copyright notice, this list of conditions and the following disclaimer\n// in the documentation and/or other materials provided with the\n// distribution.\n// * Neither the name of Google Inc. nor the names of its\n// contributors may be used to endorse or promote products derived from\n// this software without specific prior written permission.\n//\n// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n// \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\nimport { inherits } from '../util.js';\nimport EventSource from '../pointer/EventSource.js';\n/**\n * @param {module:ol/pointer/PointerEventHandler} dispatcher Event handler.\n * @constructor\n * @extends {module:ol/pointer/EventSource}\n */\n\nconst MsSource = function (dispatcher) {\n  const mapping = {\n    'MSPointerDown': this.msPointerDown,\n    'MSPointerMove': this.msPointerMove,\n    'MSPointerUp': this.msPointerUp,\n    'MSPointerOut': this.msPointerOut,\n    'MSPointerOver': this.msPointerOver,\n    'MSPointerCancel': this.msPointerCancel,\n    'MSGotPointerCapture': this.msGotPointerCapture,\n    'MSLostPointerCapture': this.msLostPointerCapture\n  };\n  EventSource.call(this, dispatcher, mapping);\n  /**\n   * @const\n   * @type {!Object.<string, MSPointerEvent|Object>}\n   */\n\n  this.pointerMap = dispatcher.pointerMap;\n};\n\ninherits(MsSource, EventSource);\n/**\n * @const\n * @type {Array.<string>}\n */\n\nconst POINTER_TYPES = ['', 'unavailable', 'touch', 'pen', 'mouse'];\n/**\n * Creates a copy of the original event that will be used\n * for the fake pointer event.\n *\n * @private\n * @param {MSPointerEvent} inEvent The in event.\n * @return {Object} The copied event.\n */\n\nMsSource.prototype.prepareEvent_ = function (inEvent) {\n  let e = inEvent;\n\n  if (typeof inEvent.pointerType === 'number') {\n    e = this.dispatcher.cloneEvent(inEvent, inEvent);\n    e.pointerType = POINTER_TYPES[inEvent.pointerType];\n  }\n\n  return e;\n};\n/**\n * Remove this pointer from the list of active pointers.\n * @param {number} pointerId Pointer identifier.\n */\n\n\nMsSource.prototype.cleanup = function (pointerId) {\n  delete this.pointerMap[pointerId.toString()];\n};\n/**\n * Handler for `msPointerDown`.\n *\n * @param {MSPointerEvent} inEvent The in event.\n */\n\n\nMsSource.prototype.msPointerDown = function (inEvent) {\n  this.pointerMap[inEvent.pointerId.toString()] = inEvent;\n  const e = this.prepareEvent_(inEvent);\n  this.dispatcher.down(e, inEvent);\n};\n/**\n * Handler for `msPointerMove`.\n *\n * @param {MSPointerEvent} inEvent The in event.\n */\n\n\nMsSource.prototype.msPointerMove = function (inEvent) {\n  const e = this.prepareEvent_(inEvent);\n  this.dispatcher.move(e, inEvent);\n};\n/**\n * Handler for `msPointerUp`.\n *\n * @param {MSPointerEvent} inEvent The in event.\n */\n\n\nMsSource.prototype.msPointerUp = function (inEvent) {\n  const e = this.prepareEvent_(inEvent);\n  this.dispatcher.up(e, inEvent);\n  this.cleanup(inEvent.pointerId);\n};\n/**\n * Handler for `msPointerOut`.\n *\n * @param {MSPointerEvent} inEvent The in event.\n */\n\n\nMsSource.prototype.msPointerOut = function (inEvent) {\n  const e = this.prepareEvent_(inEvent);\n  this.dispatcher.leaveOut(e, inEvent);\n};\n/**\n * Handler for `msPointerOver`.\n *\n * @param {MSPointerEvent} inEvent The in event.\n */\n\n\nMsSource.prototype.msPointerOver = function (inEvent) {\n  const e = this.prepareEvent_(inEvent);\n  this.dispatcher.enterOver(e, inEvent);\n};\n/**\n * Handler for `msPointerCancel`.\n *\n * @param {MSPointerEvent} inEvent The in event.\n */\n\n\nMsSource.prototype.msPointerCancel = function (inEvent) {\n  const e = this.prepareEvent_(inEvent);\n  this.dispatcher.cancel(e, inEvent);\n  this.cleanup(inEvent.pointerId);\n};\n/**\n * Handler for `msLostPointerCapture`.\n *\n * @param {MSPointerEvent} inEvent The in event.\n */\n\n\nMsSource.prototype.msLostPointerCapture = function (inEvent) {\n  const e = this.dispatcher.makeEvent('lostpointercapture', inEvent, inEvent);\n  this.dispatcher.dispatchEvent(e);\n};\n/**\n * Handler for `msGotPointerCapture`.\n *\n * @param {MSPointerEvent} inEvent The in event.\n */\n\n\nMsSource.prototype.msGotPointerCapture = function (inEvent) {\n  const e = this.dispatcher.makeEvent('gotpointercapture', inEvent, inEvent);\n  this.dispatcher.dispatchEvent(e);\n};\n\nexport default MsSource;","map":null,"metadata":{},"sourceType":"module"}