{"ast":null,"code":"/**\n * @module ol/interaction/DragRotate\n */\nimport { disable } from '../rotationconstraint.js';\nimport ViewHint from '../ViewHint.js';\nimport { altShiftKeysOnly, mouseOnly, mouseActionButton } from '../events/condition.js';\nimport { FALSE } from '../functions.js';\nimport { rotate, rotateWithoutConstraints } from './Interaction.js';\nimport PointerInteraction from './Pointer.js';\n/**\n * @typedef {Object} Options\n * @property {import(\"../events/condition.js\").Condition} [condition] A function that takes an\n * {@link module:ol/MapBrowserEvent~MapBrowserEvent} and returns a boolean\n * to indicate whether that event should be handled.\n * Default is {@link module:ol/events/condition~altShiftKeysOnly}.\n * @property {number} [duration=250] Animation duration in milliseconds.\n */\n\n/**\n * @classdesc\n * Allows the user to rotate the map by clicking and dragging on the map,\n * normally combined with an {@link module:ol/events/condition} that limits\n * it to when the alt and shift keys are held down.\n *\n * This interaction is only supported for mouse devices.\n * @api\n */\n\nvar DragRotate =\n/*@__PURE__*/\nfunction (PointerInteraction) {\n  function DragRotate(opt_options) {\n    var options = opt_options ? opt_options : {};\n    PointerInteraction.call(this, {\n      stopDown: FALSE\n    });\n    /**\n     * @private\n     * @type {import(\"../events/condition.js\").Condition}\n     */\n\n    this.condition_ = options.condition ? options.condition : altShiftKeysOnly;\n    /**\n     * @private\n     * @type {number|undefined}\n     */\n\n    this.lastAngle_ = undefined;\n    /**\n     * @private\n     * @type {number}\n     */\n\n    this.duration_ = options.duration !== undefined ? options.duration : 250;\n  }\n\n  if (PointerInteraction) DragRotate.__proto__ = PointerInteraction;\n  DragRotate.prototype = Object.create(PointerInteraction && PointerInteraction.prototype);\n  DragRotate.prototype.constructor = DragRotate;\n  /**\n   * @inheritDoc\n   */\n\n  DragRotate.prototype.handleDragEvent = function handleDragEvent(mapBrowserEvent) {\n    if (!mouseOnly(mapBrowserEvent)) {\n      return;\n    }\n\n    var map = mapBrowserEvent.map;\n    var view = map.getView();\n\n    if (view.getConstraints().rotation === disable) {\n      return;\n    }\n\n    var size = map.getSize();\n    var offset = mapBrowserEvent.pixel;\n    var theta = Math.atan2(size[1] / 2 - offset[1], offset[0] - size[0] / 2);\n\n    if (this.lastAngle_ !== undefined) {\n      var delta = theta - this.lastAngle_;\n      var rotation = view.getRotation();\n      rotateWithoutConstraints(view, rotation - delta);\n    }\n\n    this.lastAngle_ = theta;\n  };\n  /**\n   * @inheritDoc\n   */\n\n\n  DragRotate.prototype.handleUpEvent = function handleUpEvent(mapBrowserEvent) {\n    if (!mouseOnly(mapBrowserEvent)) {\n      return true;\n    }\n\n    var map = mapBrowserEvent.map;\n    var view = map.getView();\n    view.setHint(ViewHint.INTERACTING, -1);\n    var rotation = view.getRotation();\n    rotate(view, rotation, undefined, this.duration_);\n    return false;\n  };\n  /**\n   * @inheritDoc\n   */\n\n\n  DragRotate.prototype.handleDownEvent = function handleDownEvent(mapBrowserEvent) {\n    if (!mouseOnly(mapBrowserEvent)) {\n      return false;\n    }\n\n    if (mouseActionButton(mapBrowserEvent) && this.condition_(mapBrowserEvent)) {\n      var map = mapBrowserEvent.map;\n      map.getView().setHint(ViewHint.INTERACTING, 1);\n      this.lastAngle_ = undefined;\n      return true;\n    } else {\n      return false;\n    }\n  };\n\n  return DragRotate;\n}(PointerInteraction);\n\nexport default DragRotate;","map":{"version":3,"sources":["../../../src/ol/interaction/DragRotate.js"],"names":["const","super"],"mappings":"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","sourcesContent":["/**\n * @module ol/interaction/DragRotate\n */\nimport {disable} from '../rotationconstraint.js';\nimport ViewHint from '../ViewHint.js';\nimport {altShiftKeysOnly, mouseOnly, mouseActionButton} from '../events/condition.js';\nimport {FALSE} from '../functions.js';\nimport {rotate, rotateWithoutConstraints} from './Interaction.js';\nimport PointerInteraction from './Pointer.js';\n\n\n/**\n * @typedef {Object} Options\n * @property {import(\"../events/condition.js\").Condition} [condition] A function that takes an\n * {@link module:ol/MapBrowserEvent~MapBrowserEvent} and returns a boolean\n * to indicate whether that event should be handled.\n * Default is {@link module:ol/events/condition~altShiftKeysOnly}.\n * @property {number} [duration=250] Animation duration in milliseconds.\n */\n\n\n/**\n * @classdesc\n * Allows the user to rotate the map by clicking and dragging on the map,\n * normally combined with an {@link module:ol/events/condition} that limits\n * it to when the alt and shift keys are held down.\n *\n * This interaction is only supported for mouse devices.\n * @api\n */\nclass DragRotate extends PointerInteraction {\n\n  /**\n   * @param {Options=} opt_options Options.\n   */\n  constructor(opt_options) {\n\n    const options = opt_options ? opt_options : {};\n\n    super({\n      stopDown: FALSE\n    });\n\n    /**\n     * @private\n     * @type {import(\"../events/condition.js\").Condition}\n     */\n    this.condition_ = options.condition ? options.condition : altShiftKeysOnly;\n\n    /**\n     * @private\n     * @type {number|undefined}\n     */\n    this.lastAngle_ = undefined;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.duration_ = options.duration !== undefined ? options.duration : 250;\n\n  }\n\n  /**\n   * @inheritDoc\n   */\n  handleDragEvent(mapBrowserEvent) {\n    if (!mouseOnly(mapBrowserEvent)) {\n      return;\n    }\n\n    const map = mapBrowserEvent.map;\n    const view = map.getView();\n    if (view.getConstraints().rotation === disable) {\n      return;\n    }\n    const size = map.getSize();\n    const offset = mapBrowserEvent.pixel;\n    const theta =\n        Math.atan2(size[1] / 2 - offset[1], offset[0] - size[0] / 2);\n    if (this.lastAngle_ !== undefined) {\n      const delta = theta - this.lastAngle_;\n      const rotation = view.getRotation();\n      rotateWithoutConstraints(view, rotation - delta);\n    }\n    this.lastAngle_ = theta;\n  }\n\n\n  /**\n   * @inheritDoc\n   */\n  handleUpEvent(mapBrowserEvent) {\n    if (!mouseOnly(mapBrowserEvent)) {\n      return true;\n    }\n\n    const map = mapBrowserEvent.map;\n    const view = map.getView();\n    view.setHint(ViewHint.INTERACTING, -1);\n    const rotation = view.getRotation();\n    rotate(view, rotation, undefined, this.duration_);\n    return false;\n  }\n\n\n  /**\n   * @inheritDoc\n   */\n  handleDownEvent(mapBrowserEvent) {\n    if (!mouseOnly(mapBrowserEvent)) {\n      return false;\n    }\n\n    if (mouseActionButton(mapBrowserEvent) && this.condition_(mapBrowserEvent)) {\n      const map = mapBrowserEvent.map;\n      map.getView().setHint(ViewHint.INTERACTING, 1);\n      this.lastAngle_ = undefined;\n      return true;\n    } else {\n      return false;\n    }\n  }\n}\n\nexport default DragRotate;\n"]},"metadata":{},"sourceType":"module"}