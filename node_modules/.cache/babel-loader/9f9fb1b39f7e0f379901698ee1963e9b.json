{"ast":null,"code":"/**\n * ag-grid-community - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components\n * @version v21.2.2\n * @link http://www.ag-grid.com/\n * @license MIT\n */\n\"use strict\";\n\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nvar __metadata = this && this.__metadata || function (k, v) {\n  if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\n\nvar __param = this && this.__param || function (paramIndex, decorator) {\n  return function (target, key) {\n    decorator(target, key, paramIndex);\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar logger_1 = require(\"../logger\");\n\nvar context_1 = require(\"../context/context\");\n\nvar context_2 = require(\"../context/context\");\n\nvar ExpressionService =\n/** @class */\nfunction () {\n  function ExpressionService() {\n    this.expressionToFunctionCache = {};\n  }\n\n  ExpressionService.prototype.setBeans = function (loggerFactory) {\n    this.logger = loggerFactory.create('ExpressionService');\n  };\n\n  ExpressionService.prototype.evaluate = function (expressionOrFunc, params) {\n    if (typeof expressionOrFunc === 'function') {\n      // valueGetter is a function, so just call it\n      var func = expressionOrFunc;\n      return func(params);\n    } else if (typeof expressionOrFunc === 'string') {\n      // valueGetter is an expression, so execute the expression\n      var expression = expressionOrFunc;\n      return this.evaluateExpression(expression, params);\n    } else {\n      console.error('ag-Grid: value should be either a string or a function', expressionOrFunc);\n    }\n  };\n\n  ExpressionService.prototype.evaluateExpression = function (expression, params) {\n    try {\n      var javaScriptFunction = this.createExpressionFunction(expression); // the params don't have all these values, rather we add every possible\n      // value a params can have, which makes whatever is in the params available.\n\n      var result = javaScriptFunction(params.value, params.context, params.oldValue, params.newValue, params.value, params.node, params.data, params.colDef, params.rowIndex, params.api, params.columnApi, params.getValue, params.column, params.columnGroup);\n      return result;\n    } catch (e) {\n      // the expression failed, which can happen, as it's the client that\n      // provides the expression. so print a nice message\n      // tslint:disable-next-line\n      console.log('Processing of the expression failed'); // tslint:disable-next-line\n\n      console.log('Expression = ' + expression); // tslint:disable-next-line\n\n      console.log('Exception = ' + e);\n      return null;\n    }\n  };\n\n  ExpressionService.prototype.createExpressionFunction = function (expression) {\n    // check cache first\n    if (this.expressionToFunctionCache[expression]) {\n      return this.expressionToFunctionCache[expression];\n    } // if not found in cache, return the function\n\n\n    var functionBody = this.createFunctionBody(expression);\n    var theFunction = new Function('x, ctx, oldValue, newValue, value, node, data, colDef, rowIndex, api, columnApi, getValue, column, columnGroup', functionBody); // store in cache\n\n    this.expressionToFunctionCache[expression] = theFunction;\n    return theFunction;\n  };\n\n  ExpressionService.prototype.createFunctionBody = function (expression) {\n    // if the expression has the 'return' word in it, then use as is,\n    // if not, then wrap it with return and ';' to make a function\n    if (expression.indexOf('return') >= 0) {\n      return expression;\n    } else {\n      return 'return ' + expression + ';';\n    }\n  };\n\n  __decorate([__param(0, context_2.Qualifier('loggerFactory')), __metadata(\"design:type\", Function), __metadata(\"design:paramtypes\", [logger_1.LoggerFactory]), __metadata(\"design:returntype\", void 0)], ExpressionService.prototype, \"setBeans\", null);\n\n  ExpressionService = __decorate([context_1.Bean('expressionService')], ExpressionService);\n  return ExpressionService;\n}();\n\nexports.ExpressionService = ExpressionService;","map":{"version":3,"sources":["/Users/dirkmennecke77/Desktop/Lageplan/node_modules/ag-grid-community/dist/lib/valueService/expressionService.js"],"names":["__decorate","decorators","target","key","desc","c","arguments","length","r","Object","getOwnPropertyDescriptor","d","Reflect","decorate","i","defineProperty","__metadata","k","v","metadata","__param","paramIndex","decorator","exports","value","logger_1","require","context_1","context_2","ExpressionService","expressionToFunctionCache","prototype","setBeans","loggerFactory","logger","create","evaluate","expressionOrFunc","params","func","expression","evaluateExpression","console","error","javaScriptFunction","createExpressionFunction","result","context","oldValue","newValue","node","data","colDef","rowIndex","api","columnApi","getValue","column","columnGroup","e","log","functionBody","createFunctionBody","theFunction","Function","indexOf","Qualifier","LoggerFactory","Bean"],"mappings":"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","sourcesContent":["/**\n * ag-grid-community - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components\n * @version v21.2.2\n * @link http://www.ag-grid.com/\n * @license MIT\n */\n\"use strict\";\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __metadata = (this && this.__metadata) || function (k, v) {\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\nvar __param = (this && this.__param) || function (paramIndex, decorator) {\n    return function (target, key) { decorator(target, key, paramIndex); }\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar logger_1 = require(\"../logger\");\nvar context_1 = require(\"../context/context\");\nvar context_2 = require(\"../context/context\");\nvar ExpressionService = /** @class */ (function () {\n    function ExpressionService() {\n        this.expressionToFunctionCache = {};\n    }\n    ExpressionService.prototype.setBeans = function (loggerFactory) {\n        this.logger = loggerFactory.create('ExpressionService');\n    };\n    ExpressionService.prototype.evaluate = function (expressionOrFunc, params) {\n        if (typeof expressionOrFunc === 'function') {\n            // valueGetter is a function, so just call it\n            var func = expressionOrFunc;\n            return func(params);\n        }\n        else if (typeof expressionOrFunc === 'string') {\n            // valueGetter is an expression, so execute the expression\n            var expression = expressionOrFunc;\n            return this.evaluateExpression(expression, params);\n        }\n        else {\n            console.error('ag-Grid: value should be either a string or a function', expressionOrFunc);\n        }\n    };\n    ExpressionService.prototype.evaluateExpression = function (expression, params) {\n        try {\n            var javaScriptFunction = this.createExpressionFunction(expression);\n            // the params don't have all these values, rather we add every possible\n            // value a params can have, which makes whatever is in the params available.\n            var result = javaScriptFunction(params.value, params.context, params.oldValue, params.newValue, params.value, params.node, params.data, params.colDef, params.rowIndex, params.api, params.columnApi, params.getValue, params.column, params.columnGroup);\n            return result;\n        }\n        catch (e) {\n            // the expression failed, which can happen, as it's the client that\n            // provides the expression. so print a nice message\n            // tslint:disable-next-line\n            console.log('Processing of the expression failed');\n            // tslint:disable-next-line\n            console.log('Expression = ' + expression);\n            // tslint:disable-next-line\n            console.log('Exception = ' + e);\n            return null;\n        }\n    };\n    ExpressionService.prototype.createExpressionFunction = function (expression) {\n        // check cache first\n        if (this.expressionToFunctionCache[expression]) {\n            return this.expressionToFunctionCache[expression];\n        }\n        // if not found in cache, return the function\n        var functionBody = this.createFunctionBody(expression);\n        var theFunction = new Function('x, ctx, oldValue, newValue, value, node, data, colDef, rowIndex, api, columnApi, getValue, column, columnGroup', functionBody);\n        // store in cache\n        this.expressionToFunctionCache[expression] = theFunction;\n        return theFunction;\n    };\n    ExpressionService.prototype.createFunctionBody = function (expression) {\n        // if the expression has the 'return' word in it, then use as is,\n        // if not, then wrap it with return and ';' to make a function\n        if (expression.indexOf('return') >= 0) {\n            return expression;\n        }\n        else {\n            return 'return ' + expression + ';';\n        }\n    };\n    __decorate([\n        __param(0, context_2.Qualifier('loggerFactory')),\n        __metadata(\"design:type\", Function),\n        __metadata(\"design:paramtypes\", [logger_1.LoggerFactory]),\n        __metadata(\"design:returntype\", void 0)\n    ], ExpressionService.prototype, \"setBeans\", null);\n    ExpressionService = __decorate([\n        context_1.Bean('expressionService')\n    ], ExpressionService);\n    return ExpressionService;\n}());\nexports.ExpressionService = ExpressionService;\n"]},"metadata":{},"sourceType":"script"}