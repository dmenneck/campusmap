{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = exports.WfsSearch = void 0;\n\nrequire(\"antd/es/spin/style\");\n\nvar _spin = _interopRequireDefault(require(\"antd/es/spin\"));\n\nrequire(\"antd/es/auto-complete/style\");\n\nvar _autoComplete = _interopRequireDefault(require(\"antd/es/auto-complete\"));\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _propTypes = _interopRequireDefault(require(\"prop-types\"));\n\nvar _Map = _interopRequireDefault(require(\"ol/Map\"));\n\nvar _GeoJSON = _interopRequireDefault(require(\"ol/format/GeoJSON\"));\n\nvar _isFunction = _interopRequireDefault(require(\"lodash/isFunction\"));\n\nvar _debounce = _interopRequireDefault(require(\"lodash/debounce\"));\n\nvar _Logger = _interopRequireDefault(require(\"@terrestris/base-util/dist/Logger\"));\n\nvar _WfsFilterUtil = _interopRequireDefault(require(\"@terrestris/ol-util/dist/WfsFilterUtil/WfsFilterUtil\"));\n\nvar _constants = require(\"../../constants\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\n\nfunction _typeof(obj) {\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    if (i % 2) {\n      var source = arguments[i] != null ? arguments[i] : {};\n      var ownKeys = Object.keys(source);\n\n      if (typeof Object.getOwnPropertySymbols === 'function') {\n        ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) {\n          return Object.getOwnPropertyDescriptor(source, sym).enumerable;\n        }));\n      }\n\n      ownKeys.forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(arguments[i]));\n    }\n  }\n\n  return target;\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n\n  return _assertThisInitialized(self);\n}\n\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nvar Option = _autoComplete[\"default\"].Option;\n/**\n * The WfsSearch field.\n * Implements an input field to do a WFS-GetFeature request.\n *\n * The GetFeature request is created with `ol.format.WFS.writeGetFeature`\n * so most of the WFS specific options work like document in the corresponding\n * API-docs: https://openlayers.org/en/latest/apidoc/module-ol_format_WFS.html\n *\n * @class WfsSearch\n * @extends React.Component\n */\n\nvar WfsSearch =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(WfsSearch, _React$Component);\n  /**\n   * The className added to this component.\n   * @type {String}\n   * @private\n   */\n\n\n  function WfsSearch(props) {\n    var _this;\n\n    _classCallCheck(this, WfsSearch);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(WfsSearch).call(this, props));\n\n    _defineProperty(_assertThisInitialized(_this), \"className\", \"\".concat(_constants.CSS_PREFIX, \"wfssearch\"));\n\n    _this.state = {\n      searchTerm: '',\n      data: []\n    };\n    _this.onUpdateInput = _this.onUpdateInput.bind(_assertThisInitialized(_this));\n    _this.onMenuItemSelected = _this.onMenuItemSelected.bind(_assertThisInitialized(_this)); // delay requests invoking\n\n    _this.doSearch = (0, _debounce[\"default\"])(_this.doSearch, _this.props.delay);\n    return _this;\n  }\n  /**\n   * Called if the input of the AutoComplete is being updated. It sets the\n   * current inputValue as searchTerm and starts a search if the inputValue has\n   * a length of at least `this.props.minChars` (default 3).\n   *\n   * @param {String|undefined} value The inputValue. Undefined if clear btn\n   *                                      is pressed.\n   */\n\n\n  _createClass(WfsSearch, [{\n    key: \"onUpdateInput\",\n    value: function onUpdateInput(value) {\n      var _this2 = this;\n\n      var _this$props = this.props,\n          minChars = _this$props.minChars,\n          onChange = _this$props.onChange,\n          onBeforeSearch = _this$props.onBeforeSearch;\n      this.setState({\n        data: []\n      });\n\n      if ((0, _isFunction[\"default\"])(onBeforeSearch)) {\n        value = onBeforeSearch(value);\n      }\n\n      this.setState({\n        searchTerm: value\n      }, function () {\n        if (_this2.state.searchTerm && _this2.state.searchTerm.length >= minChars) {\n          _this2.doSearch();\n        }\n      });\n\n      if ((0, _isFunction[\"default\"])(onChange)) {\n        onChange(value);\n      }\n    }\n    /**\n     * Perform the search.\n     * @private\n     */\n\n  }, {\n    key: \"doSearch\",\n    value: function doSearch() {\n      var _this3 = this;\n\n      var _this$props2 = this.props,\n          additionalFetchOptions = _this$props2.additionalFetchOptions,\n          baseUrl = _this$props2.baseUrl,\n          featureNS = _this$props2.featureNS,\n          featurePrefix = _this$props2.featurePrefix,\n          featureTypes = _this$props2.featureTypes,\n          geometryName = _this$props2.geometryName,\n          maxFeatures = _this$props2.maxFeatures,\n          outputFormat = _this$props2.outputFormat,\n          propertyNames = _this$props2.propertyNames,\n          srsName = _this$props2.srsName,\n          wfsFormatOptions = _this$props2.wfsFormatOptions,\n          searchAttributes = _this$props2.searchAttributes,\n          attributeDetails = _this$props2.attributeDetails;\n      var searchOpts = {\n        featureNS: featureNS,\n        featurePrefix: featurePrefix,\n        featureTypes: featureTypes,\n        geometryName: geometryName,\n        maxFeatures: maxFeatures,\n        outputFormat: outputFormat,\n        propertyNames: propertyNames,\n        srsName: srsName,\n        wfsFormatOptions: wfsFormatOptions,\n        searchAttributes: searchAttributes,\n        attributeDetails: attributeDetails\n      };\n\n      var request = _WfsFilterUtil[\"default\"].getCombinedRequests(searchOpts, this.state.searchTerm);\n\n      if (request) {\n        this.setState({\n          fetching: true\n        }, function () {\n          fetch(\"\".concat(baseUrl), _objectSpread({\n            method: 'POST',\n            credentials: additionalFetchOptions.credentials ? additionalFetchOptions.credentials : 'same-origin',\n            body: new XMLSerializer().serializeToString(request)\n          }, additionalFetchOptions)).then(function (response) {\n            return response.json();\n          }).then(_this3.onFetchSuccess.bind(_this3))[\"catch\"](_this3.onFetchError.bind(_this3));\n        });\n      } else {\n        this.onFetchError('Missing GetFeature request parameters');\n      }\n    }\n    /**\n     * This function gets called on success of the WFS GetFeature fetch request.\n     * It sets the response as data.\n     *\n     * @param {Array<object>} response The found features.\n     */\n\n  }, {\n    key: \"onFetchSuccess\",\n    value: function onFetchSuccess(response) {\n      var _this4 = this;\n\n      var data = response.features ? response.features : [];\n      data.forEach(function (feature) {\n        return feature.searchTerm = _this4.state.searchTerm;\n      });\n      this.setState({\n        data: data,\n        fetching: false\n      });\n    }\n    /**\n     * This function gets called when the WFS GetFeature fetch request returns an error.\n     * It logs the error to the console.\n     *\n     * @param {String} error The errorstring.\n     */\n\n  }, {\n    key: \"onFetchError\",\n    value: function onFetchError(error) {\n      _Logger[\"default\"].error(\"Error while requesting WFS GetFeature: \".concat(error));\n\n      this.setState({\n        fetching: false\n      });\n    }\n    /**\n     * The function describes what to do when an item is selected.\n     *\n     * @param {String|number} value The value of the selected option.\n     * @param {Node} option The selected option.\n     */\n\n  }, {\n    key: \"onMenuItemSelected\",\n    value: function onMenuItemSelected(value, option) {\n      var _this$props3 = this.props,\n          map = _this$props3.map,\n          idProperty = _this$props3.idProperty;\n      var selectedFeature = this.state.data.filter(function (feat) {\n        return feat[idProperty] === option.key;\n      })[0];\n      this.props.onSelect(selectedFeature, map);\n    }\n    /**\n     * The render function.\n     */\n\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this5 = this;\n\n      var _this$state = this.state,\n          data = _this$state.data,\n          fetching = _this$state.fetching;\n\n      var _this$props4 = this.props,\n          additionalFetchOptions = _this$props4.additionalFetchOptions,\n          baseUrl = _this$props4.baseUrl,\n          className = _this$props4.className,\n          featureNS = _this$props4.featureNS,\n          featurePrefix = _this$props4.featurePrefix,\n          featureTypes = _this$props4.featureTypes,\n          filter = _this$props4.filter,\n          geometryName = _this$props4.geometryName,\n          map = _this$props4.map,\n          maxFeatures = _this$props4.maxFeatures,\n          minChars = _this$props4.minChars,\n          outputFormat = _this$props4.outputFormat,\n          onChange = _this$props4.onChange,\n          onSelect = _this$props4.onSelect,\n          propertyNames = _this$props4.propertyNames,\n          renderOption = _this$props4.renderOption,\n          searchAttributes = _this$props4.searchAttributes,\n          attributeDetails = _this$props4.attributeDetails,\n          srsName = _this$props4.srsName,\n          wfsFormatOptions = _this$props4.wfsFormatOptions,\n          displayValue = _this$props4.displayValue,\n          passThroughProps = _objectWithoutProperties(_this$props4, [\"additionalFetchOptions\", \"baseUrl\", \"className\", \"featureNS\", \"featurePrefix\", \"featureTypes\", \"filter\", \"geometryName\", \"map\", \"maxFeatures\", \"minChars\", \"outputFormat\", \"onChange\", \"onSelect\", \"propertyNames\", \"renderOption\", \"searchAttributes\", \"attributeDetails\", \"srsName\", \"wfsFormatOptions\", \"displayValue\"]);\n\n      var finalClassName = className ? \"\".concat(className, \" \").concat(this.className) : this.className;\n      return _react[\"default\"].createElement(_autoComplete[\"default\"], _extends({\n        className: finalClassName,\n        defaultActiveFirstOption: false,\n        allowClear: true,\n        onChange: this.onUpdateInput,\n        onSelect: this.onMenuItemSelected,\n        notFoundContent: fetching ? _react[\"default\"].createElement(_spin[\"default\"], {\n          size: \"small\"\n        }) : null,\n        filterOption: false,\n        showArrow: false\n      }, passThroughProps), data.map(function (d) {\n        return renderOption(d, _this5.props);\n      }));\n    }\n  }]);\n\n  return WfsSearch;\n}(_react[\"default\"].Component);\n\nexports.WfsSearch = WfsSearch;\n\n_defineProperty(WfsSearch, \"propTypes\", {\n  /**\n   * An optional CSS class which should be added.\n   * @type {String}\n   */\n  className: _propTypes[\"default\"].string,\n\n  /**\n   * The base URL. Please make sure that the WFS-Server supports CORS.\n   * @type {String}\n   */\n  baseUrl: _propTypes[\"default\"].string.isRequired,\n\n  /**\n   * An object mapping feature types to an array of attributes that should be searched through.\n   * @type {Object}\n   */\n  searchAttributes: _propTypes[\"default\"].object.isRequired,\n\n  /**\n   * A nested object mapping feature types to an object of attribute details,\n   * which are also mapped by search attribute name.\n   *\n   * Example:\n   *   ```\n   *   attributeDetails: {\n   *    featType1: {\n   *      attr1: {\n   *        matchCase: true,\n   *        type: 'number',\n   *        exactSearch: false\n   *      },\n   *      attr2: {\n   *        matchCase: false,\n   *        type: 'string',\n   *        exactSearch: true\n   *      }\n   *    },\n   *    featType2: {...}\n   *   }\n   *   ```\n   * @type {Object}\n   */\n  attributeDetails: _propTypes[\"default\"].objectOf(_propTypes[\"default\"].objectOf(_propTypes[\"default\"].shape({\n    matchCase: _propTypes[\"default\"].bool,\n    type: _propTypes[\"default\"].string,\n    exactSearch: _propTypes[\"default\"].bool\n  }))),\n\n  /**\n   * The namespace URI used for features.\n   * @type {String}\n   */\n  featureNS: _propTypes[\"default\"].string,\n\n  /**\n   * The prefix for the feature namespace.\n   * @type {String}\n   */\n  featurePrefix: _propTypes[\"default\"].string,\n\n  /**\n   * The feature type names. Required.\n   * @type {String[]}\n   */\n  featureTypes: _propTypes[\"default\"].arrayOf(_propTypes[\"default\"].string).isRequired,\n\n  /**\n   * SRS name. No srsName attribute will be set on geometries when this is not\n   * provided.\n   * @type {String}\n   */\n  srsName: _propTypes[\"default\"].string,\n\n  /**\n   * The output format of the response.\n   * @type {String}\n   */\n  outputFormat: _propTypes[\"default\"].string,\n\n  /**\n   * Maximum number of features to fetch.\n   * @type {Number}\n   */\n  maxFeatures: _propTypes[\"default\"].number,\n\n  /**\n   * Geometry name to use in a BBOX filter.\n   * @type {String}\n   */\n  geometryName: _propTypes[\"default\"].string,\n\n  /**\n   * Optional list of property names to serialize.\n   * @type {String[]}\n   */\n  propertyNames: _propTypes[\"default\"].arrayOf(_propTypes[\"default\"].string),\n\n  /**\n   * Filter condition. See https://openlayers.org/en/latest/apidoc/module-ol_format_filter.html\n   * for more information.\n   * @type {Object}\n   */\n  filter: _propTypes[\"default\"].object,\n\n  /**\n   * The ol.map to interact with on selection.\n   *\n   * @type {ol.Map}\n   */\n  map: _propTypes[\"default\"].instanceOf(_Map[\"default\"]),\n\n  /**\n   * The minimal amount of characters entered in the input to start a search.\n   * @type {Number}\n   */\n  minChars: _propTypes[\"default\"].number,\n\n  /**\n   * A render function which gets called with the selected item as it is\n   * returned by the server. It must return an `AutoComplete.Option` with\n   * `key={feature.id}`.\n   * The default will display the property `name` if existing or the\n   * property defined in `props.idProperty` (default is to `id`).\n   * @type {Function}\n   */\n  renderOption: _propTypes[\"default\"].func,\n\n  /**\n   * An onSelect function which gets called with the selected feature as it is\n   * returned by server.\n   * The default function will create a searchlayer, adds the feature and will\n   * zoom to its extend.\n   * @type {Function}\n   */\n  onSelect: _propTypes[\"default\"].func,\n\n  /**\n   * An onChange function which gets called with the current value of the\n   * field.\n   * @type {Function}\n   */\n  onChange: _propTypes[\"default\"].func,\n\n  /**\n    * Optional callback function, that will be called before WFS search starts.\n    * Can be useful if input value manipulation is needed (e.g. umlaut\n    * replacement `ä => oa` etc.)\n    * @type {Function}\n    */\n  onBeforeSearch: _propTypes[\"default\"].func,\n\n  /**\n   * Options which are added to the fetch-POST-request. credentials is set to\n   * 'same-origin' as default but can be overwritten. See also\n   * https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/fetch\n   * @type {Object}\n   */\n  additionalFetchOptions: _propTypes[\"default\"].object,\n\n  /**\n   * Options which are passed to the constructor of the ol.format.WFS.\n   * compare: https://openlayers.org/en/latest/apidoc/module-ol_format_WFS.html\n   * @type {Object}\n   */\n  wfsFormatOptions: _propTypes[\"default\"].object,\n\n  /**\n   * Which prop value of option will render as content of select.\n   * @type {String}\n   */\n  displayValue: _propTypes[\"default\"].string,\n\n  /**\n   * The id property of the feature. Default is to `id`.\n   * @type {String}\n   */\n  idProperty: _propTypes[\"default\"].string,\n\n  /**\n   * Delay in ms before actually sending requests.\n   * @type {Number}\n   */\n  delay: _propTypes[\"default\"].number\n});\n\n_defineProperty(WfsSearch, \"defaultProps\", {\n  srsName: 'EPSG:3857',\n  outputFormat: 'application/json',\n  minChars: 3,\n  additionalFetchOptions: {},\n  displayValue: 'name',\n  idProperty: 'id',\n  attributeDetails: {},\n  delay: 300,\n\n  /**\n   * Create an AutoComplete.Option from the given data.\n   *\n   * @param {Object} feature The feature as returned by the server.\n   * @param {Object} props The current props of the component.\n   * @return {AutoComplete.Option} The AutoComplete.Option that will be\n   * rendered for each feature.\n   */\n  renderOption: function renderOption(feature, props) {\n    var displayValue = props.displayValue,\n        idProperty = props.idProperty;\n    var display = feature.properties[displayValue] ? feature.properties[displayValue] : feature[idProperty];\n    return _react[\"default\"].createElement(Option, {\n      value: display,\n      key: feature[idProperty],\n      title: display\n    }, display);\n  },\n\n  /**\n   * The default onSelect method if no onSelect prop is given. It zooms to the\n   * selected item.\n   *\n   * @param {object} feature The selected feature as returned by the server.\n   * @param {ol.map} olMap The openlayers map that was passed via prop.\n   */\n  onSelect: function onSelect(feature, olMap) {\n    if (feature) {\n      var olView = olMap.getView();\n      var geoJsonFormat = new _GeoJSON[\"default\"]();\n      var olFeature = geoJsonFormat.readFeature(feature);\n      var geometry = olFeature.getGeometry();\n\n      if (geometry) {\n        olView.fit(geometry, {\n          duration: 500\n        });\n      }\n    }\n  },\n  style: {\n    width: 200\n  }\n  /**\n   * Create the WfsSearch.\n   *\n   * @param {Object} props The initial props.\n   * @constructs WfsSearch\n   */\n\n});\n\nvar _default = WfsSearch;\nexports[\"default\"] = _default;","map":null,"metadata":{},"sourceType":"script"}