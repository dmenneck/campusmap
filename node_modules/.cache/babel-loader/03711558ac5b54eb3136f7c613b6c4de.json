{"ast":null,"code":"/**\n * @module ol/size\n */\n\n/**\n * An array of numbers representing a size: `[width, height]`.\n * @typedef {Array<number>} Size\n * @api\n */\n\n/**\n * Returns a buffered size.\n * @param {Size} size Size.\n * @param {number} num The amount by which to buffer.\n * @param {Size=} opt_size Optional reusable size array.\n * @return {Size} The buffered size.\n */\nexport function buffer(size, num, opt_size) {\n  if (opt_size === undefined) {\n    opt_size = [0, 0];\n  }\n\n  opt_size[0] = size[0] + 2 * num;\n  opt_size[1] = size[1] + 2 * num;\n  return opt_size;\n}\n/**\n * Determines if a size has a positive area.\n * @param {Size} size The size to test.\n * @return {boolean} The size has a positive area.\n */\n\nexport function hasArea(size) {\n  return size[0] > 0 && size[1] > 0;\n}\n/**\n * Returns a size scaled by a ratio. The result will be an array of integers.\n * @param {Size} size Size.\n * @param {number} ratio Ratio.\n * @param {Size=} opt_size Optional reusable size array.\n * @return {Size} The scaled size.\n */\n\nexport function scale(size, ratio, opt_size) {\n  if (opt_size === undefined) {\n    opt_size = [0, 0];\n  }\n\n  opt_size[0] = size[0] * ratio + 0.5 | 0;\n  opt_size[1] = size[1] * ratio + 0.5 | 0;\n  return opt_size;\n}\n/**\n * Returns an `Size` array for the passed in number (meaning: square) or\n * `Size` array.\n * (meaning: non-square),\n * @param {number|Size} size Width and height.\n * @param {Size=} opt_size Optional reusable size array.\n * @return {Size} Size.\n * @api\n */\n\nexport function toSize(size, opt_size) {\n  if (Array.isArray(size)) {\n    return size;\n  } else {\n    if (opt_size === undefined) {\n      opt_size = [size, size];\n    } else {\n      opt_size[0] = opt_size[1] =\n      /** @type {number} */\n      size;\n    }\n\n    return opt_size;\n  }\n}","map":{"version":3,"sources":["../../src/ol/size.js"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;;;AAmBA,OAAO,SAAS,MAAT,CAAgB,IAAhB,EAAsB,GAAtB,EAA2B,QAA3B,EAAqC;AAC1C,MAAI,QAAQ,KAAK,SAAjB,EAA4B;AAC1B,IAAA,QAAQ,GAAG,CAAC,CAAD,EAAI,CAAJ,CAAX;AACD;;AACD,EAAA,QAAQ,CAAC,CAAD,CAAR,GAAc,IAAI,CAAC,CAAD,CAAJ,GAAU,IAAI,GAA5B;AACA,EAAA,QAAQ,CAAC,CAAD,CAAR,GAAc,IAAI,CAAC,CAAD,CAAJ,GAAU,IAAI,GAA5B;AACA,SAAO,QAAP;AACD;;;;;;;AAQD,OAAO,SAAS,OAAT,CAAiB,IAAjB,EAAuB;AAC5B,SAAO,IAAI,CAAC,CAAD,CAAJ,GAAU,CAAV,IAAe,IAAI,CAAC,CAAD,CAAJ,GAAU,CAAhC;AACD;;;;;;;;;AAUD,OAAO,SAAS,KAAT,CAAe,IAAf,EAAqB,KAArB,EAA4B,QAA5B,EAAsC;AAC3C,MAAI,QAAQ,KAAK,SAAjB,EAA4B;AAC1B,IAAA,QAAQ,GAAG,CAAC,CAAD,EAAI,CAAJ,CAAX;AACD;;AACD,EAAA,QAAQ,CAAC,CAAD,CAAR,GAAe,IAAI,CAAC,CAAD,CAAJ,GAAU,KAAV,GAAkB,GAAnB,GAA0B,CAAxC;AACA,EAAA,QAAQ,CAAC,CAAD,CAAR,GAAe,IAAI,CAAC,CAAD,CAAJ,GAAU,KAAV,GAAkB,GAAnB,GAA0B,CAAxC;AACA,SAAO,QAAP;AACD;;;;;;;;;;;AAYD,OAAO,SAAS,MAAT,CAAgB,IAAhB,EAAsB,QAAtB,EAAgC;AACrC,MAAI,KAAK,CAAC,OAAN,CAAc,IAAd,CAAJ,EAAyB;AACvB,WAAO,IAAP;AACD,GAFD,MAEO;AACL,QAAI,QAAQ,KAAK,SAAjB,EAA4B;AAC1B,MAAA,QAAQ,GAAG,CAAC,IAAD,EAAO,IAAP,CAAX;AACD,KAFD,MAEO;AACL,MAAA,QAAQ,CAAC,CAAD,CAAR,GAAc,QAAQ,CAAC,CAAD,CAAR;AAAW;AAA0B,MAAA,IAAnD;AACD;;AACD,WAAO,QAAP;AACD;AACF","sourcesContent":["/**\n * @module ol/size\n */\n\n\n/**\n * An array of numbers representing a size: `[width, height]`.\n * @typedef {Array<number>} Size\n * @api\n */\n\n\n/**\n * Returns a buffered size.\n * @param {Size} size Size.\n * @param {number} num The amount by which to buffer.\n * @param {Size=} opt_size Optional reusable size array.\n * @return {Size} The buffered size.\n */\nexport function buffer(size, num, opt_size) {\n  if (opt_size === undefined) {\n    opt_size = [0, 0];\n  }\n  opt_size[0] = size[0] + 2 * num;\n  opt_size[1] = size[1] + 2 * num;\n  return opt_size;\n}\n\n\n/**\n * Determines if a size has a positive area.\n * @param {Size} size The size to test.\n * @return {boolean} The size has a positive area.\n */\nexport function hasArea(size) {\n  return size[0] > 0 && size[1] > 0;\n}\n\n\n/**\n * Returns a size scaled by a ratio. The result will be an array of integers.\n * @param {Size} size Size.\n * @param {number} ratio Ratio.\n * @param {Size=} opt_size Optional reusable size array.\n * @return {Size} The scaled size.\n */\nexport function scale(size, ratio, opt_size) {\n  if (opt_size === undefined) {\n    opt_size = [0, 0];\n  }\n  opt_size[0] = (size[0] * ratio + 0.5) | 0;\n  opt_size[1] = (size[1] * ratio + 0.5) | 0;\n  return opt_size;\n}\n\n\n/**\n * Returns an `Size` array for the passed in number (meaning: square) or\n * `Size` array.\n * (meaning: non-square),\n * @param {number|Size} size Width and height.\n * @param {Size=} opt_size Optional reusable size array.\n * @return {Size} Size.\n * @api\n */\nexport function toSize(size, opt_size) {\n  if (Array.isArray(size)) {\n    return size;\n  } else {\n    if (opt_size === undefined) {\n      opt_size = [size, size];\n    } else {\n      opt_size[0] = opt_size[1] = /** @type {number} */ (size);\n    }\n    return opt_size;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}