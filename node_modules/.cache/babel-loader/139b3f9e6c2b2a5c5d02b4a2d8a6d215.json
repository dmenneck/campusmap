{"ast":null,"code":"/**\n * @module ol/control/MousePosition\n */\nimport { listen } from '../events.js';\nimport EventType from '../events/EventType.js';\nimport { getChangeEventType } from '../Object.js';\nimport Control from './Control.js';\nimport { getTransformFromProjections, identityTransform, get as getProjection } from '../proj.js';\n/**\n * @type {string}\n */\n\nvar PROJECTION = 'projection';\n/**\n * @type {string}\n */\n\nvar COORDINATE_FORMAT = 'coordinateFormat';\n/**\n * @typedef {Object} Options\n * @property {string} [className='ol-mouse-position'] CSS class name.\n * @property {import(\"../coordinate.js\").CoordinateFormat} [coordinateFormat] Coordinate format.\n * @property {import(\"../proj.js\").ProjectionLike} [projection] Projection. Default is the view projection.\n * @property {function(import(\"../MapEvent.js\").default)} [render] Function called when the\n * control should be re-rendered. This is called in a `requestAnimationFrame`\n * callback.\n * @property {HTMLElement|string} [target] Specify a target if you want the\n * control to be rendered outside of the map's viewport.\n * @property {string} [undefinedHTML='&#160;'] Markup to show when coordinates are not\n * available (e.g. when the pointer leaves the map viewport).  By default, the last position\n * will be replaced with `'&#160;'` (`&nbsp;`) when the pointer leaves the viewport.  To\n * retain the last rendered position, set this option to something falsey (like an empty\n * string `''`).\n */\n\n/**\n * @classdesc\n * A control to show the 2D coordinates of the mouse cursor. By default, these\n * are in the view projection, but can be in any supported projection.\n * By default the control is shown in the top right corner of the map, but this\n * can be changed by using the css selector `.ol-mouse-position`.\n *\n * On touch devices, which usually do not have a mouse cursor, the coordinates\n * of the currently touched position are shown.\n *\n * @api\n */\n\nvar MousePosition =\n/*@__PURE__*/\nfunction (Control) {\n  function MousePosition(opt_options) {\n    var options = opt_options ? opt_options : {};\n    var element = document.createElement('div');\n    element.className = options.className !== undefined ? options.className : 'ol-mouse-position';\n    Control.call(this, {\n      element: element,\n      render: options.render || render,\n      target: options.target\n    });\n    listen(this, getChangeEventType(PROJECTION), this.handleProjectionChanged_, this);\n\n    if (options.coordinateFormat) {\n      this.setCoordinateFormat(options.coordinateFormat);\n    }\n\n    if (options.projection) {\n      this.setProjection(options.projection);\n    }\n    /**\n     * @private\n     * @type {string}\n     */\n\n\n    this.undefinedHTML_ = options.undefinedHTML !== undefined ? options.undefinedHTML : '&#160;';\n    /**\n     * @private\n     * @type {boolean}\n     */\n\n    this.renderOnMouseOut_ = !!this.undefinedHTML_;\n    /**\n     * @private\n     * @type {string}\n     */\n\n    this.renderedHTML_ = element.innerHTML;\n    /**\n     * @private\n     * @type {import(\"../proj/Projection.js\").default}\n     */\n\n    this.mapProjection_ = null;\n    /**\n     * @private\n     * @type {?import(\"../proj.js\").TransformFunction}\n     */\n\n    this.transform_ = null;\n    /**\n     * @private\n     * @type {import(\"../pixel.js\").Pixel}\n     */\n\n    this.lastMouseMovePixel_ = null;\n  }\n\n  if (Control) MousePosition.__proto__ = Control;\n  MousePosition.prototype = Object.create(Control && Control.prototype);\n  MousePosition.prototype.constructor = MousePosition;\n  /**\n   * @private\n   */\n\n  MousePosition.prototype.handleProjectionChanged_ = function handleProjectionChanged_() {\n    this.transform_ = null;\n  };\n  /**\n   * Return the coordinate format type used to render the current position or\n   * undefined.\n   * @return {import(\"../coordinate.js\").CoordinateFormat|undefined} The format to render the current\n   *     position in.\n   * @observable\n   * @api\n   */\n\n\n  MousePosition.prototype.getCoordinateFormat = function getCoordinateFormat() {\n    return (\n      /** @type {import(\"../coordinate.js\").CoordinateFormat|undefined} */\n      this.get(COORDINATE_FORMAT)\n    );\n  };\n  /**\n   * Return the projection that is used to report the mouse position.\n   * @return {import(\"../proj/Projection.js\").default|undefined} The projection to report mouse\n   *     position in.\n   * @observable\n   * @api\n   */\n\n\n  MousePosition.prototype.getProjection = function getProjection() {\n    return (\n      /** @type {import(\"../proj/Projection.js\").default|undefined} */\n      this.get(PROJECTION)\n    );\n  };\n  /**\n   * @param {Event} event Browser event.\n   * @protected\n   */\n\n\n  MousePosition.prototype.handleMouseMove = function handleMouseMove(event) {\n    var map = this.getMap();\n    this.lastMouseMovePixel_ = map.getEventPixel(event);\n    this.updateHTML_(this.lastMouseMovePixel_);\n  };\n  /**\n   * @param {Event} event Browser event.\n   * @protected\n   */\n\n\n  MousePosition.prototype.handleMouseOut = function handleMouseOut(event) {\n    this.updateHTML_(null);\n    this.lastMouseMovePixel_ = null;\n  };\n  /**\n   * @inheritDoc\n   * @api\n   */\n\n\n  MousePosition.prototype.setMap = function setMap(map) {\n    Control.prototype.setMap.call(this, map);\n\n    if (map) {\n      var viewport = map.getViewport();\n      this.listenerKeys.push(listen(viewport, EventType.MOUSEMOVE, this.handleMouseMove, this), listen(viewport, EventType.TOUCHSTART, this.handleMouseMove, this));\n\n      if (this.renderOnMouseOut_) {\n        this.listenerKeys.push(listen(viewport, EventType.MOUSEOUT, this.handleMouseOut, this), listen(viewport, EventType.TOUCHEND, this.handleMouseOut, this));\n      }\n    }\n  };\n  /**\n   * Set the coordinate format type used to render the current position.\n   * @param {import(\"../coordinate.js\").CoordinateFormat} format The format to render the current\n   *     position in.\n   * @observable\n   * @api\n   */\n\n\n  MousePosition.prototype.setCoordinateFormat = function setCoordinateFormat(format) {\n    this.set(COORDINATE_FORMAT, format);\n  };\n  /**\n   * Set the projection that is used to report the mouse position.\n   * @param {import(\"../proj.js\").ProjectionLike} projection The projection to report mouse\n   *     position in.\n   * @observable\n   * @api\n   */\n\n\n  MousePosition.prototype.setProjection = function setProjection(projection) {\n    this.set(PROJECTION, getProjection(projection));\n  };\n  /**\n   * @param {?import(\"../pixel.js\").Pixel} pixel Pixel.\n   * @private\n   */\n\n\n  MousePosition.prototype.updateHTML_ = function updateHTML_(pixel) {\n    var html = this.undefinedHTML_;\n\n    if (pixel && this.mapProjection_) {\n      if (!this.transform_) {\n        var projection = this.getProjection();\n\n        if (projection) {\n          this.transform_ = getTransformFromProjections(this.mapProjection_, projection);\n        } else {\n          this.transform_ = identityTransform;\n        }\n      }\n\n      var map = this.getMap();\n      var coordinate = map.getCoordinateFromPixel(pixel);\n\n      if (coordinate) {\n        this.transform_(coordinate, coordinate);\n        var coordinateFormat = this.getCoordinateFormat();\n\n        if (coordinateFormat) {\n          html = coordinateFormat(coordinate);\n        } else {\n          html = coordinate.toString();\n        }\n      }\n    }\n\n    if (!this.renderedHTML_ || html !== this.renderedHTML_) {\n      this.element.innerHTML = html;\n      this.renderedHTML_ = html;\n    }\n  };\n\n  return MousePosition;\n}(Control);\n/**\n * Update the projection. Rendering of the coordinates is done in\n * `handleMouseMove` and `handleMouseUp`.\n * @param {import(\"../MapEvent.js\").default} mapEvent Map event.\n * @this {MousePosition}\n * @api\n */\n\n\nexport function render(mapEvent) {\n  var frameState = mapEvent.frameState;\n\n  if (!frameState) {\n    this.mapProjection_ = null;\n  } else {\n    if (this.mapProjection_ != frameState.viewState.projection) {\n      this.mapProjection_ = frameState.viewState.projection;\n      this.transform_ = null;\n    }\n  }\n}\nexport default MousePosition;","map":{"version":3,"sources":["../../../src/ol/control/MousePosition.js"],"names":["const","super","let"],"mappings":"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","sourcesContent":["/**\n * @module ol/control/MousePosition\n */\nimport {listen} from '../events.js';\nimport EventType from '../events/EventType.js';\nimport {getChangeEventType} from '../Object.js';\nimport Control from './Control.js';\nimport {getTransformFromProjections, identityTransform, get as getProjection} from '../proj.js';\n\n\n/**\n * @type {string}\n */\nconst PROJECTION = 'projection';\n\n/**\n * @type {string}\n */\nconst COORDINATE_FORMAT = 'coordinateFormat';\n\n\n/**\n * @typedef {Object} Options\n * @property {string} [className='ol-mouse-position'] CSS class name.\n * @property {import(\"../coordinate.js\").CoordinateFormat} [coordinateFormat] Coordinate format.\n * @property {import(\"../proj.js\").ProjectionLike} [projection] Projection. Default is the view projection.\n * @property {function(import(\"../MapEvent.js\").default)} [render] Function called when the\n * control should be re-rendered. This is called in a `requestAnimationFrame`\n * callback.\n * @property {HTMLElement|string} [target] Specify a target if you want the\n * control to be rendered outside of the map's viewport.\n * @property {string} [undefinedHTML='&#160;'] Markup to show when coordinates are not\n * available (e.g. when the pointer leaves the map viewport).  By default, the last position\n * will be replaced with `'&#160;'` (`&nbsp;`) when the pointer leaves the viewport.  To\n * retain the last rendered position, set this option to something falsey (like an empty\n * string `''`).\n */\n\n\n/**\n * @classdesc\n * A control to show the 2D coordinates of the mouse cursor. By default, these\n * are in the view projection, but can be in any supported projection.\n * By default the control is shown in the top right corner of the map, but this\n * can be changed by using the css selector `.ol-mouse-position`.\n *\n * On touch devices, which usually do not have a mouse cursor, the coordinates\n * of the currently touched position are shown.\n *\n * @api\n */\nclass MousePosition extends Control {\n\n  /**\n   * @param {Options=} opt_options Mouse position options.\n   */\n  constructor(opt_options) {\n\n    const options = opt_options ? opt_options : {};\n\n    const element = document.createElement('div');\n    element.className = options.className !== undefined ? options.className : 'ol-mouse-position';\n\n    super({\n      element: element,\n      render: options.render || render,\n      target: options.target\n    });\n\n    listen(this,\n      getChangeEventType(PROJECTION),\n      this.handleProjectionChanged_, this);\n\n    if (options.coordinateFormat) {\n      this.setCoordinateFormat(options.coordinateFormat);\n    }\n    if (options.projection) {\n      this.setProjection(options.projection);\n    }\n\n    /**\n     * @private\n     * @type {string}\n     */\n    this.undefinedHTML_ = options.undefinedHTML !== undefined ? options.undefinedHTML : '&#160;';\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.renderOnMouseOut_ = !!this.undefinedHTML_;\n\n    /**\n     * @private\n     * @type {string}\n     */\n    this.renderedHTML_ = element.innerHTML;\n\n    /**\n     * @private\n     * @type {import(\"../proj/Projection.js\").default}\n     */\n    this.mapProjection_ = null;\n\n    /**\n     * @private\n     * @type {?import(\"../proj.js\").TransformFunction}\n     */\n    this.transform_ = null;\n\n    /**\n     * @private\n     * @type {import(\"../pixel.js\").Pixel}\n     */\n    this.lastMouseMovePixel_ = null;\n\n  }\n\n  /**\n   * @private\n   */\n  handleProjectionChanged_() {\n    this.transform_ = null;\n  }\n\n  /**\n   * Return the coordinate format type used to render the current position or\n   * undefined.\n   * @return {import(\"../coordinate.js\").CoordinateFormat|undefined} The format to render the current\n   *     position in.\n   * @observable\n   * @api\n   */\n  getCoordinateFormat() {\n    return (\n      /** @type {import(\"../coordinate.js\").CoordinateFormat|undefined} */ (this.get(COORDINATE_FORMAT))\n    );\n  }\n\n  /**\n   * Return the projection that is used to report the mouse position.\n   * @return {import(\"../proj/Projection.js\").default|undefined} The projection to report mouse\n   *     position in.\n   * @observable\n   * @api\n   */\n  getProjection() {\n    return (\n      /** @type {import(\"../proj/Projection.js\").default|undefined} */ (this.get(PROJECTION))\n    );\n  }\n\n  /**\n   * @param {Event} event Browser event.\n   * @protected\n   */\n  handleMouseMove(event) {\n    const map = this.getMap();\n    this.lastMouseMovePixel_ = map.getEventPixel(event);\n    this.updateHTML_(this.lastMouseMovePixel_);\n  }\n\n  /**\n   * @param {Event} event Browser event.\n   * @protected\n   */\n  handleMouseOut(event) {\n    this.updateHTML_(null);\n    this.lastMouseMovePixel_ = null;\n  }\n\n  /**\n   * @inheritDoc\n   * @api\n   */\n  setMap(map) {\n    super.setMap(map);\n    if (map) {\n      const viewport = map.getViewport();\n      this.listenerKeys.push(\n        listen(viewport, EventType.MOUSEMOVE, this.handleMouseMove, this),\n        listen(viewport, EventType.TOUCHSTART, this.handleMouseMove, this)\n      );\n      if (this.renderOnMouseOut_) {\n        this.listenerKeys.push(\n          listen(viewport, EventType.MOUSEOUT, this.handleMouseOut, this),\n          listen(viewport, EventType.TOUCHEND, this.handleMouseOut, this)\n        );\n      }\n    }\n  }\n\n  /**\n   * Set the coordinate format type used to render the current position.\n   * @param {import(\"../coordinate.js\").CoordinateFormat} format The format to render the current\n   *     position in.\n   * @observable\n   * @api\n   */\n  setCoordinateFormat(format) {\n    this.set(COORDINATE_FORMAT, format);\n  }\n\n  /**\n   * Set the projection that is used to report the mouse position.\n   * @param {import(\"../proj.js\").ProjectionLike} projection The projection to report mouse\n   *     position in.\n   * @observable\n   * @api\n   */\n  setProjection(projection) {\n    this.set(PROJECTION, getProjection(projection));\n  }\n\n  /**\n   * @param {?import(\"../pixel.js\").Pixel} pixel Pixel.\n   * @private\n   */\n  updateHTML_(pixel) {\n    let html = this.undefinedHTML_;\n    if (pixel && this.mapProjection_) {\n      if (!this.transform_) {\n        const projection = this.getProjection();\n        if (projection) {\n          this.transform_ = getTransformFromProjections(\n            this.mapProjection_, projection);\n        } else {\n          this.transform_ = identityTransform;\n        }\n      }\n      const map = this.getMap();\n      const coordinate = map.getCoordinateFromPixel(pixel);\n      if (coordinate) {\n        this.transform_(coordinate, coordinate);\n        const coordinateFormat = this.getCoordinateFormat();\n        if (coordinateFormat) {\n          html = coordinateFormat(coordinate);\n        } else {\n          html = coordinate.toString();\n        }\n      }\n    }\n    if (!this.renderedHTML_ || html !== this.renderedHTML_) {\n      this.element.innerHTML = html;\n      this.renderedHTML_ = html;\n    }\n  }\n}\n\n\n/**\n * Update the projection. Rendering of the coordinates is done in\n * `handleMouseMove` and `handleMouseUp`.\n * @param {import(\"../MapEvent.js\").default} mapEvent Map event.\n * @this {MousePosition}\n * @api\n */\nexport function render(mapEvent) {\n  const frameState = mapEvent.frameState;\n  if (!frameState) {\n    this.mapProjection_ = null;\n  } else {\n    if (this.mapProjection_ != frameState.viewState.projection) {\n      this.mapProjection_ = frameState.viewState.projection;\n      this.transform_ = null;\n    }\n  }\n}\n\n\nexport default MousePosition;\n"]},"metadata":{},"sourceType":"module"}