{"ast":null,"code":"/**\n * @module ol/geom/SimpleGeometry\n */\nimport { inherits } from '../util.js';\nimport { FALSE } from '../functions.js';\nimport { createOrUpdateFromFlatCoordinates, getCenter } from '../extent.js';\nimport Geometry from '../geom/Geometry.js';\nimport GeometryLayout from '../geom/GeometryLayout.js';\nimport { rotate, scale, translate, transform2D } from '../geom/flat/transform.js';\nimport { clear } from '../obj.js';\n/**\n * @classdesc\n * Abstract base class; only used for creating subclasses; do not instantiate\n * in apps, as cannot be rendered.\n *\n * @constructor\n * @abstract\n * @extends {module:ol/geom/Geometry}\n * @api\n */\n\nconst SimpleGeometry = function () {\n  Geometry.call(this);\n  /**\n   * @protected\n   * @type {module:ol/geom/GeometryLayout}\n   */\n\n  this.layout = GeometryLayout.XY;\n  /**\n   * @protected\n   * @type {number}\n   */\n\n  this.stride = 2;\n  /**\n   * @protected\n   * @type {Array.<number>}\n   */\n\n  this.flatCoordinates = null;\n};\n\ninherits(SimpleGeometry, Geometry);\n/**\n * @param {number} stride Stride.\n * @return {module:ol/geom/GeometryLayout} layout Layout.\n */\n\nfunction getLayoutForStride(stride) {\n  let layout;\n\n  if (stride == 2) {\n    layout = GeometryLayout.XY;\n  } else if (stride == 3) {\n    layout = GeometryLayout.XYZ;\n  } else if (stride == 4) {\n    layout = GeometryLayout.XYZM;\n  }\n\n  return (\n    /** @type {module:ol/geom/GeometryLayout} */\n    layout\n  );\n}\n/**\n * @param {module:ol/geom/GeometryLayout} layout Layout.\n * @return {number} Stride.\n */\n\n\nexport function getStrideForLayout(layout) {\n  let stride;\n\n  if (layout == GeometryLayout.XY) {\n    stride = 2;\n  } else if (layout == GeometryLayout.XYZ || layout == GeometryLayout.XYM) {\n    stride = 3;\n  } else if (layout == GeometryLayout.XYZM) {\n    stride = 4;\n  }\n\n  return (\n    /** @type {number} */\n    stride\n  );\n}\n/**\n * @inheritDoc\n */\n\nSimpleGeometry.prototype.containsXY = FALSE;\n/**\n * @inheritDoc\n */\n\nSimpleGeometry.prototype.computeExtent = function (extent) {\n  return createOrUpdateFromFlatCoordinates(this.flatCoordinates, 0, this.flatCoordinates.length, this.stride, extent);\n};\n/**\n * @abstract\n * @return {Array} Coordinates.\n */\n\n\nSimpleGeometry.prototype.getCoordinates = function () {};\n/**\n * Return the first coordinate of the geometry.\n * @return {module:ol/coordinate~Coordinate} First coordinate.\n * @api\n */\n\n\nSimpleGeometry.prototype.getFirstCoordinate = function () {\n  return this.flatCoordinates.slice(0, this.stride);\n};\n/**\n * @return {Array.<number>} Flat coordinates.\n */\n\n\nSimpleGeometry.prototype.getFlatCoordinates = function () {\n  return this.flatCoordinates;\n};\n/**\n * Return the last coordinate of the geometry.\n * @return {module:ol/coordinate~Coordinate} Last point.\n * @api\n */\n\n\nSimpleGeometry.prototype.getLastCoordinate = function () {\n  return this.flatCoordinates.slice(this.flatCoordinates.length - this.stride);\n};\n/**\n * Return the {@link module:ol/geom/GeometryLayout~GeometryLayout layout} of the geometry.\n * @return {module:ol/geom/GeometryLayout} Layout.\n * @api\n */\n\n\nSimpleGeometry.prototype.getLayout = function () {\n  return this.layout;\n};\n/**\n * @inheritDoc\n */\n\n\nSimpleGeometry.prototype.getSimplifiedGeometry = function (squaredTolerance) {\n  if (this.simplifiedGeometryRevision != this.getRevision()) {\n    clear(this.simplifiedGeometryCache);\n    this.simplifiedGeometryMaxMinSquaredTolerance = 0;\n    this.simplifiedGeometryRevision = this.getRevision();\n  } // If squaredTolerance is negative or if we know that simplification will not\n  // have any effect then just return this.\n\n\n  if (squaredTolerance < 0 || this.simplifiedGeometryMaxMinSquaredTolerance !== 0 && squaredTolerance <= this.simplifiedGeometryMaxMinSquaredTolerance) {\n    return this;\n  }\n\n  const key = squaredTolerance.toString();\n\n  if (this.simplifiedGeometryCache.hasOwnProperty(key)) {\n    return this.simplifiedGeometryCache[key];\n  } else {\n    const simplifiedGeometry = this.getSimplifiedGeometryInternal(squaredTolerance);\n    const simplifiedFlatCoordinates = simplifiedGeometry.getFlatCoordinates();\n\n    if (simplifiedFlatCoordinates.length < this.flatCoordinates.length) {\n      this.simplifiedGeometryCache[key] = simplifiedGeometry;\n      return simplifiedGeometry;\n    } else {\n      // Simplification did not actually remove any coordinates.  We now know\n      // that any calls to getSimplifiedGeometry with a squaredTolerance less\n      // than or equal to the current squaredTolerance will also not have any\n      // effect.  This allows us to short circuit simplification (saving CPU\n      // cycles) and prevents the cache of simplified geometries from filling\n      // up with useless identical copies of this geometry (saving memory).\n      this.simplifiedGeometryMaxMinSquaredTolerance = squaredTolerance;\n      return this;\n    }\n  }\n};\n/**\n * @param {number} squaredTolerance Squared tolerance.\n * @return {module:ol/geom/SimpleGeometry} Simplified geometry.\n * @protected\n */\n\n\nSimpleGeometry.prototype.getSimplifiedGeometryInternal = function (squaredTolerance) {\n  return this;\n};\n/**\n * @return {number} Stride.\n */\n\n\nSimpleGeometry.prototype.getStride = function () {\n  return this.stride;\n};\n/**\n * @param {module:ol/geom/GeometryLayout} layout Layout.\n * @param {Array.<number>} flatCoordinates Flat coordinates.\n * @protected\n */\n\n\nSimpleGeometry.prototype.setFlatCoordinatesInternal = function (layout, flatCoordinates) {\n  this.stride = getStrideForLayout(layout);\n  this.layout = layout;\n  this.flatCoordinates = flatCoordinates;\n};\n/**\n * @abstract\n * @param {Array} coordinates Coordinates.\n * @param {module:ol/geom/GeometryLayout=} opt_layout Layout.\n */\n\n\nSimpleGeometry.prototype.setCoordinates = function (coordinates, opt_layout) {};\n/**\n * @param {module:ol/geom/GeometryLayout|undefined} layout Layout.\n * @param {Array} coordinates Coordinates.\n * @param {number} nesting Nesting.\n * @protected\n */\n\n\nSimpleGeometry.prototype.setLayout = function (layout, coordinates, nesting) {\n  /** @type {number} */\n  let stride;\n\n  if (layout) {\n    stride = getStrideForLayout(layout);\n  } else {\n    for (let i = 0; i < nesting; ++i) {\n      if (coordinates.length === 0) {\n        this.layout = GeometryLayout.XY;\n        this.stride = 2;\n        return;\n      } else {\n        coordinates =\n        /** @type {Array} */\n        coordinates[0];\n      }\n    }\n\n    stride = coordinates.length;\n    layout = getLayoutForStride(stride);\n  }\n\n  this.layout = layout;\n  this.stride = stride;\n};\n/**\n * @inheritDoc\n * @api\n */\n\n\nSimpleGeometry.prototype.applyTransform = function (transformFn) {\n  if (this.flatCoordinates) {\n    transformFn(this.flatCoordinates, this.flatCoordinates, this.stride);\n    this.changed();\n  }\n};\n/**\n * @inheritDoc\n * @api\n */\n\n\nSimpleGeometry.prototype.rotate = function (angle, anchor) {\n  const flatCoordinates = this.getFlatCoordinates();\n\n  if (flatCoordinates) {\n    const stride = this.getStride();\n    rotate(flatCoordinates, 0, flatCoordinates.length, stride, angle, anchor, flatCoordinates);\n    this.changed();\n  }\n};\n/**\n * @inheritDoc\n * @api\n */\n\n\nSimpleGeometry.prototype.scale = function (sx, opt_sy, opt_anchor) {\n  let sy = opt_sy;\n\n  if (sy === undefined) {\n    sy = sx;\n  }\n\n  let anchor = opt_anchor;\n\n  if (!anchor) {\n    anchor = getCenter(this.getExtent());\n  }\n\n  const flatCoordinates = this.getFlatCoordinates();\n\n  if (flatCoordinates) {\n    const stride = this.getStride();\n    scale(flatCoordinates, 0, flatCoordinates.length, stride, sx, sy, anchor, flatCoordinates);\n    this.changed();\n  }\n};\n/**\n * @inheritDoc\n * @api\n */\n\n\nSimpleGeometry.prototype.translate = function (deltaX, deltaY) {\n  const flatCoordinates = this.getFlatCoordinates();\n\n  if (flatCoordinates) {\n    const stride = this.getStride();\n    translate(flatCoordinates, 0, flatCoordinates.length, stride, deltaX, deltaY, flatCoordinates);\n    this.changed();\n  }\n};\n/**\n * @param {module:ol/geom/SimpleGeometry} simpleGeometry Simple geometry.\n * @param {module:ol/transform~Transform} transform Transform.\n * @param {Array.<number>=} opt_dest Destination.\n * @return {Array.<number>} Transformed flat coordinates.\n */\n\n\nexport function transformGeom2D(simpleGeometry, transform, opt_dest) {\n  const flatCoordinates = simpleGeometry.getFlatCoordinates();\n\n  if (!flatCoordinates) {\n    return null;\n  } else {\n    const stride = simpleGeometry.getStride();\n    return transform2D(flatCoordinates, 0, flatCoordinates.length, stride, transform, opt_dest);\n  }\n}\nexport default SimpleGeometry;","map":null,"metadata":{},"sourceType":"module"}