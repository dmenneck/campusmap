{"ast":null,"code":"/**\n * @module ol/geom/flat/interpolate\n */\nimport { binarySearch } from '../../array.js';\nimport { lerp } from '../../math.js';\n/**\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {number} end End.\n * @param {number} stride Stride.\n * @param {number} fraction Fraction.\n * @param {Array<number>=} opt_dest Destination.\n * @return {Array<number>} Destination.\n */\n\nexport function interpolatePoint(flatCoordinates, offset, end, stride, fraction, opt_dest) {\n  var pointX = NaN;\n  var pointY = NaN;\n  var n = (end - offset) / stride;\n\n  if (n === 1) {\n    pointX = flatCoordinates[offset];\n    pointY = flatCoordinates[offset + 1];\n  } else if (n == 2) {\n    pointX = (1 - fraction) * flatCoordinates[offset] + fraction * flatCoordinates[offset + stride];\n    pointY = (1 - fraction) * flatCoordinates[offset + 1] + fraction * flatCoordinates[offset + stride + 1];\n  } else if (n !== 0) {\n    var x1 = flatCoordinates[offset];\n    var y1 = flatCoordinates[offset + 1];\n    var length = 0;\n    var cumulativeLengths = [0];\n\n    for (var i = offset + stride; i < end; i += stride) {\n      var x2 = flatCoordinates[i];\n      var y2 = flatCoordinates[i + 1];\n      length += Math.sqrt((x2 - x1) * (x2 - x1) + (y2 - y1) * (y2 - y1));\n      cumulativeLengths.push(length);\n      x1 = x2;\n      y1 = y2;\n    }\n\n    var target = fraction * length;\n    var index = binarySearch(cumulativeLengths, target);\n\n    if (index < 0) {\n      var t = (target - cumulativeLengths[-index - 2]) / (cumulativeLengths[-index - 1] - cumulativeLengths[-index - 2]);\n      var o = offset + (-index - 2) * stride;\n      pointX = lerp(flatCoordinates[o], flatCoordinates[o + stride], t);\n      pointY = lerp(flatCoordinates[o + 1], flatCoordinates[o + stride + 1], t);\n    } else {\n      pointX = flatCoordinates[offset + index * stride];\n      pointY = flatCoordinates[offset + index * stride + 1];\n    }\n  }\n\n  if (opt_dest) {\n    opt_dest[0] = pointX;\n    opt_dest[1] = pointY;\n    return opt_dest;\n  } else {\n    return [pointX, pointY];\n  }\n}\n/**\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {number} end End.\n * @param {number} stride Stride.\n * @param {number} m M.\n * @param {boolean} extrapolate Extrapolate.\n * @return {import(\"../../coordinate.js\").Coordinate} Coordinate.\n */\n\nexport function lineStringCoordinateAtM(flatCoordinates, offset, end, stride, m, extrapolate) {\n  if (end == offset) {\n    return null;\n  }\n\n  var coordinate;\n\n  if (m < flatCoordinates[offset + stride - 1]) {\n    if (extrapolate) {\n      coordinate = flatCoordinates.slice(offset, offset + stride);\n      coordinate[stride - 1] = m;\n      return coordinate;\n    } else {\n      return null;\n    }\n  } else if (flatCoordinates[end - 1] < m) {\n    if (extrapolate) {\n      coordinate = flatCoordinates.slice(end - stride, end);\n      coordinate[stride - 1] = m;\n      return coordinate;\n    } else {\n      return null;\n    }\n  } // FIXME use O(1) search\n\n\n  if (m == flatCoordinates[offset + stride - 1]) {\n    return flatCoordinates.slice(offset, offset + stride);\n  }\n\n  var lo = offset / stride;\n  var hi = end / stride;\n\n  while (lo < hi) {\n    var mid = lo + hi >> 1;\n\n    if (m < flatCoordinates[(mid + 1) * stride - 1]) {\n      hi = mid;\n    } else {\n      lo = mid + 1;\n    }\n  }\n\n  var m0 = flatCoordinates[lo * stride - 1];\n\n  if (m == m0) {\n    return flatCoordinates.slice((lo - 1) * stride, (lo - 1) * stride + stride);\n  }\n\n  var m1 = flatCoordinates[(lo + 1) * stride - 1];\n  var t = (m - m0) / (m1 - m0);\n  coordinate = [];\n\n  for (var i = 0; i < stride - 1; ++i) {\n    coordinate.push(lerp(flatCoordinates[(lo - 1) * stride + i], flatCoordinates[lo * stride + i], t));\n  }\n\n  coordinate.push(m);\n  return coordinate;\n}\n/**\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {Array<number>} ends Ends.\n * @param {number} stride Stride.\n * @param {number} m M.\n * @param {boolean} extrapolate Extrapolate.\n * @param {boolean} interpolate Interpolate.\n * @return {import(\"../../coordinate.js\").Coordinate} Coordinate.\n */\n\nexport function lineStringsCoordinateAtM(flatCoordinates, offset, ends, stride, m, extrapolate, interpolate) {\n  if (interpolate) {\n    return lineStringCoordinateAtM(flatCoordinates, offset, ends[ends.length - 1], stride, m, extrapolate);\n  }\n\n  var coordinate;\n\n  if (m < flatCoordinates[stride - 1]) {\n    if (extrapolate) {\n      coordinate = flatCoordinates.slice(0, stride);\n      coordinate[stride - 1] = m;\n      return coordinate;\n    } else {\n      return null;\n    }\n  }\n\n  if (flatCoordinates[flatCoordinates.length - 1] < m) {\n    if (extrapolate) {\n      coordinate = flatCoordinates.slice(flatCoordinates.length - stride);\n      coordinate[stride - 1] = m;\n      return coordinate;\n    } else {\n      return null;\n    }\n  }\n\n  for (var i = 0, ii = ends.length; i < ii; ++i) {\n    var end = ends[i];\n\n    if (offset == end) {\n      continue;\n    }\n\n    if (m < flatCoordinates[offset + stride - 1]) {\n      return null;\n    } else if (m <= flatCoordinates[end - 1]) {\n      return lineStringCoordinateAtM(flatCoordinates, offset, end, stride, m, false);\n    }\n\n    offset = end;\n  }\n\n  return null;\n}","map":{"version":3,"sources":["../../../../src/ol/geom/flat/interpolate.js"],"names":["let","const"],"mappings":"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","sourcesContent":["/**\n * @module ol/geom/flat/interpolate\n */\nimport {binarySearch} from '../../array.js';\nimport {lerp} from '../../math.js';\n\n\n/**\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {number} end End.\n * @param {number} stride Stride.\n * @param {number} fraction Fraction.\n * @param {Array<number>=} opt_dest Destination.\n * @return {Array<number>} Destination.\n */\nexport function interpolatePoint(flatCoordinates, offset, end, stride, fraction, opt_dest) {\n  let pointX = NaN;\n  let pointY = NaN;\n  const n = (end - offset) / stride;\n  if (n === 1) {\n    pointX = flatCoordinates[offset];\n    pointY = flatCoordinates[offset + 1];\n  } else if (n == 2) {\n    pointX = (1 - fraction) * flatCoordinates[offset] +\n        fraction * flatCoordinates[offset + stride];\n    pointY = (1 - fraction) * flatCoordinates[offset + 1] +\n        fraction * flatCoordinates[offset + stride + 1];\n  } else if (n !== 0) {\n    let x1 = flatCoordinates[offset];\n    let y1 = flatCoordinates[offset + 1];\n    let length = 0;\n    const cumulativeLengths = [0];\n    for (let i = offset + stride; i < end; i += stride) {\n      const x2 = flatCoordinates[i];\n      const y2 = flatCoordinates[i + 1];\n      length += Math.sqrt((x2 - x1) * (x2 - x1) + (y2 - y1) * (y2 - y1));\n      cumulativeLengths.push(length);\n      x1 = x2;\n      y1 = y2;\n    }\n    const target = fraction * length;\n    const index = binarySearch(cumulativeLengths, target);\n    if (index < 0) {\n      const t = (target - cumulativeLengths[-index - 2]) /\n          (cumulativeLengths[-index - 1] - cumulativeLengths[-index - 2]);\n      const o = offset + (-index - 2) * stride;\n      pointX = lerp(\n        flatCoordinates[o], flatCoordinates[o + stride], t);\n      pointY = lerp(\n        flatCoordinates[o + 1], flatCoordinates[o + stride + 1], t);\n    } else {\n      pointX = flatCoordinates[offset + index * stride];\n      pointY = flatCoordinates[offset + index * stride + 1];\n    }\n  }\n  if (opt_dest) {\n    opt_dest[0] = pointX;\n    opt_dest[1] = pointY;\n    return opt_dest;\n  } else {\n    return [pointX, pointY];\n  }\n}\n\n\n/**\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {number} end End.\n * @param {number} stride Stride.\n * @param {number} m M.\n * @param {boolean} extrapolate Extrapolate.\n * @return {import(\"../../coordinate.js\").Coordinate} Coordinate.\n */\nexport function lineStringCoordinateAtM(flatCoordinates, offset, end, stride, m, extrapolate) {\n  if (end == offset) {\n    return null;\n  }\n  let coordinate;\n  if (m < flatCoordinates[offset + stride - 1]) {\n    if (extrapolate) {\n      coordinate = flatCoordinates.slice(offset, offset + stride);\n      coordinate[stride - 1] = m;\n      return coordinate;\n    } else {\n      return null;\n    }\n  } else if (flatCoordinates[end - 1] < m) {\n    if (extrapolate) {\n      coordinate = flatCoordinates.slice(end - stride, end);\n      coordinate[stride - 1] = m;\n      return coordinate;\n    } else {\n      return null;\n    }\n  }\n  // FIXME use O(1) search\n  if (m == flatCoordinates[offset + stride - 1]) {\n    return flatCoordinates.slice(offset, offset + stride);\n  }\n  let lo = offset / stride;\n  let hi = end / stride;\n  while (lo < hi) {\n    const mid = (lo + hi) >> 1;\n    if (m < flatCoordinates[(mid + 1) * stride - 1]) {\n      hi = mid;\n    } else {\n      lo = mid + 1;\n    }\n  }\n  const m0 = flatCoordinates[lo * stride - 1];\n  if (m == m0) {\n    return flatCoordinates.slice((lo - 1) * stride, (lo - 1) * stride + stride);\n  }\n  const m1 = flatCoordinates[(lo + 1) * stride - 1];\n  const t = (m - m0) / (m1 - m0);\n  coordinate = [];\n  for (let i = 0; i < stride - 1; ++i) {\n    coordinate.push(lerp(flatCoordinates[(lo - 1) * stride + i],\n      flatCoordinates[lo * stride + i], t));\n  }\n  coordinate.push(m);\n  return coordinate;\n}\n\n\n/**\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {Array<number>} ends Ends.\n * @param {number} stride Stride.\n * @param {number} m M.\n * @param {boolean} extrapolate Extrapolate.\n * @param {boolean} interpolate Interpolate.\n * @return {import(\"../../coordinate.js\").Coordinate} Coordinate.\n */\nexport function lineStringsCoordinateAtM(\n  flatCoordinates, offset, ends, stride, m, extrapolate, interpolate) {\n  if (interpolate) {\n    return lineStringCoordinateAtM(\n      flatCoordinates, offset, ends[ends.length - 1], stride, m, extrapolate);\n  }\n  let coordinate;\n  if (m < flatCoordinates[stride - 1]) {\n    if (extrapolate) {\n      coordinate = flatCoordinates.slice(0, stride);\n      coordinate[stride - 1] = m;\n      return coordinate;\n    } else {\n      return null;\n    }\n  }\n  if (flatCoordinates[flatCoordinates.length - 1] < m) {\n    if (extrapolate) {\n      coordinate = flatCoordinates.slice(flatCoordinates.length - stride);\n      coordinate[stride - 1] = m;\n      return coordinate;\n    } else {\n      return null;\n    }\n  }\n  for (let i = 0, ii = ends.length; i < ii; ++i) {\n    const end = ends[i];\n    if (offset == end) {\n      continue;\n    }\n    if (m < flatCoordinates[offset + stride - 1]) {\n      return null;\n    } else if (m <= flatCoordinates[end - 1]) {\n      return lineStringCoordinateAtM(\n        flatCoordinates, offset, end, stride, m, false);\n    }\n    offset = end;\n  }\n  return null;\n}\n"]},"metadata":{},"sourceType":"module"}