{"ast":null,"code":"/**\n * ag-grid-community - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components\n * @version v21.2.2\n * @link http://www.ag-grid.com/\n * @license MIT\n */\n\"use strict\";\n\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nvar __metadata = this && this.__metadata || function (k, v) {\n  if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar gridOptionsWrapper_1 = require(\"../../gridOptionsWrapper\");\n\nvar context_1 = require(\"../../context/context\");\n\nvar rowNodeBlock_1 = require(\"../cache/rowNodeBlock\");\n\nvar rowRenderer_1 = require(\"../../rendering/rowRenderer\");\n\nvar utils_1 = require(\"../../utils\");\n\nvar InfiniteBlock =\n/** @class */\nfunction (_super) {\n  __extends(InfiniteBlock, _super);\n\n  function InfiniteBlock(pageNumber, params) {\n    var _this = _super.call(this, pageNumber, params) || this;\n\n    _this.cacheParams = params;\n    return _this;\n  }\n\n  InfiniteBlock.prototype.createBlankRowNode = function (rowIndex) {\n    var rowNode = _super.prototype.createBlankRowNode.call(this, rowIndex);\n\n    rowNode.uiLevel = 0;\n    this.setIndexAndTopOnRowNode(rowNode, rowIndex);\n    return rowNode;\n  };\n\n  InfiniteBlock.prototype.setDataAndId = function (rowNode, data, index) {\n    if (utils_1._.exists(data)) {\n      // this means if the user is not providing id's we just use the\n      // index for the row. this will allow selection to work (that is based\n      // on index) as long user is not inserting or deleting rows,\n      // or wanting to keep selection between server side sorting or filtering\n      rowNode.setDataAndId(data, index.toString());\n    } else {\n      rowNode.setDataAndId(undefined, undefined);\n    }\n  };\n\n  InfiniteBlock.prototype.setRowNode = function (rowIndex, rowNode) {\n    _super.prototype.setRowNode.call(this, rowIndex, rowNode);\n\n    this.setIndexAndTopOnRowNode(rowNode, rowIndex);\n  };\n\n  InfiniteBlock.prototype.init = function () {\n    _super.prototype.init.call(this, {\n      context: this.getContext(),\n      rowRenderer: this.rowRenderer\n    });\n  };\n\n  InfiniteBlock.prototype.getNodeIdPrefix = function () {\n    return null;\n  };\n\n  InfiniteBlock.prototype.getRow = function (displayIndex) {\n    return this.getRowUsingLocalIndex(displayIndex);\n  };\n\n  InfiniteBlock.prototype.setIndexAndTopOnRowNode = function (rowNode, rowIndex) {\n    rowNode.setRowIndex(rowIndex);\n    rowNode.rowTop = this.cacheParams.rowHeight * rowIndex;\n  };\n\n  InfiniteBlock.prototype.loadFromDatasource = function () {\n    var _this = this; // PROBLEM . . . . when the user sets sort via colDef.sort, then this code\n    // is executing before the sort is set up, so server is not getting the sort\n    // model. need to change with regards order - so the server side request is\n    // AFTER thus it gets the right sort model.\n\n\n    var params = {\n      startRow: this.getStartRow(),\n      endRow: this.getEndRow(),\n      successCallback: this.pageLoaded.bind(this, this.getVersion()),\n      failCallback: this.pageLoadFailed.bind(this),\n      sortModel: this.cacheParams.sortModel,\n      filterModel: this.cacheParams.filterModel,\n      context: this.gridOptionsWrapper.getContext()\n    };\n\n    if (utils_1._.missing(this.cacheParams.datasource.getRows)) {\n      console.warn(\"ag-Grid: datasource is missing getRows method\");\n      return;\n    } // check if old version of datasource used\n\n\n    var getRowsParams = utils_1._.getFunctionParameters(this.cacheParams.datasource.getRows);\n\n    if (getRowsParams.length > 1) {\n      console.warn('ag-grid: It looks like your paging datasource is of the old type, taking more than one parameter.');\n      console.warn('ag-grid: From ag-grid 1.9.0, now the getRows takes one parameter. See the documentation for details.');\n    } // put in timeout, to force result to be async\n\n\n    window.setTimeout(function () {\n      _this.cacheParams.datasource.getRows(params);\n    }, 0);\n  };\n\n  __decorate([context_1.Autowired('gridOptionsWrapper'), __metadata(\"design:type\", gridOptionsWrapper_1.GridOptionsWrapper)], InfiniteBlock.prototype, \"gridOptionsWrapper\", void 0);\n\n  __decorate([context_1.Autowired('rowRenderer'), __metadata(\"design:type\", rowRenderer_1.RowRenderer)], InfiniteBlock.prototype, \"rowRenderer\", void 0);\n\n  __decorate([context_1.PostConstruct, __metadata(\"design:type\", Function), __metadata(\"design:paramtypes\", []), __metadata(\"design:returntype\", void 0)], InfiniteBlock.prototype, \"init\", null);\n\n  return InfiniteBlock;\n}(rowNodeBlock_1.RowNodeBlock);\n\nexports.InfiniteBlock = InfiniteBlock;","map":{"version":3,"sources":["/Users/dirkmennecke77/Desktop/Lageplan/node_modules/ag-grid-community/dist/lib/rowModels/infinite/infiniteBlock.js"],"names":["__extends","extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__","constructor","prototype","create","__decorate","decorators","target","key","desc","c","arguments","length","r","getOwnPropertyDescriptor","Reflect","decorate","i","defineProperty","__metadata","k","v","metadata","exports","value","gridOptionsWrapper_1","require","context_1","rowNodeBlock_1","rowRenderer_1","utils_1","InfiniteBlock","_super","pageNumber","params","_this","call","cacheParams","createBlankRowNode","rowIndex","rowNode","uiLevel","setIndexAndTopOnRowNode","setDataAndId","data","index","_","exists","toString","undefined","setRowNode","init","context","getContext","rowRenderer","getNodeIdPrefix","getRow","displayIndex","getRowUsingLocalIndex","setRowIndex","rowTop","rowHeight","loadFromDatasource","startRow","getStartRow","endRow","getEndRow","successCallback","pageLoaded","bind","getVersion","failCallback","pageLoadFailed","sortModel","filterModel","gridOptionsWrapper","missing","datasource","getRows","console","warn","getRowsParams","getFunctionParameters","window","setTimeout","Autowired","GridOptionsWrapper","RowRenderer","PostConstruct","Function","RowNodeBlock"],"mappings":"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","sourcesContent":["/**\n * ag-grid-community - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components\n * @version v21.2.2\n * @link http://www.ag-grid.com/\n * @license MIT\n */\n\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __metadata = (this && this.__metadata) || function (k, v) {\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar gridOptionsWrapper_1 = require(\"../../gridOptionsWrapper\");\nvar context_1 = require(\"../../context/context\");\nvar rowNodeBlock_1 = require(\"../cache/rowNodeBlock\");\nvar rowRenderer_1 = require(\"../../rendering/rowRenderer\");\nvar utils_1 = require(\"../../utils\");\nvar InfiniteBlock = /** @class */ (function (_super) {\n    __extends(InfiniteBlock, _super);\n    function InfiniteBlock(pageNumber, params) {\n        var _this = _super.call(this, pageNumber, params) || this;\n        _this.cacheParams = params;\n        return _this;\n    }\n    InfiniteBlock.prototype.createBlankRowNode = function (rowIndex) {\n        var rowNode = _super.prototype.createBlankRowNode.call(this, rowIndex);\n        rowNode.uiLevel = 0;\n        this.setIndexAndTopOnRowNode(rowNode, rowIndex);\n        return rowNode;\n    };\n    InfiniteBlock.prototype.setDataAndId = function (rowNode, data, index) {\n        if (utils_1._.exists(data)) {\n            // this means if the user is not providing id's we just use the\n            // index for the row. this will allow selection to work (that is based\n            // on index) as long user is not inserting or deleting rows,\n            // or wanting to keep selection between server side sorting or filtering\n            rowNode.setDataAndId(data, index.toString());\n        }\n        else {\n            rowNode.setDataAndId(undefined, undefined);\n        }\n    };\n    InfiniteBlock.prototype.setRowNode = function (rowIndex, rowNode) {\n        _super.prototype.setRowNode.call(this, rowIndex, rowNode);\n        this.setIndexAndTopOnRowNode(rowNode, rowIndex);\n    };\n    InfiniteBlock.prototype.init = function () {\n        _super.prototype.init.call(this, {\n            context: this.getContext(),\n            rowRenderer: this.rowRenderer\n        });\n    };\n    InfiniteBlock.prototype.getNodeIdPrefix = function () {\n        return null;\n    };\n    InfiniteBlock.prototype.getRow = function (displayIndex) {\n        return this.getRowUsingLocalIndex(displayIndex);\n    };\n    InfiniteBlock.prototype.setIndexAndTopOnRowNode = function (rowNode, rowIndex) {\n        rowNode.setRowIndex(rowIndex);\n        rowNode.rowTop = this.cacheParams.rowHeight * rowIndex;\n    };\n    InfiniteBlock.prototype.loadFromDatasource = function () {\n        var _this = this;\n        // PROBLEM . . . . when the user sets sort via colDef.sort, then this code\n        // is executing before the sort is set up, so server is not getting the sort\n        // model. need to change with regards order - so the server side request is\n        // AFTER thus it gets the right sort model.\n        var params = {\n            startRow: this.getStartRow(),\n            endRow: this.getEndRow(),\n            successCallback: this.pageLoaded.bind(this, this.getVersion()),\n            failCallback: this.pageLoadFailed.bind(this),\n            sortModel: this.cacheParams.sortModel,\n            filterModel: this.cacheParams.filterModel,\n            context: this.gridOptionsWrapper.getContext()\n        };\n        if (utils_1._.missing(this.cacheParams.datasource.getRows)) {\n            console.warn(\"ag-Grid: datasource is missing getRows method\");\n            return;\n        }\n        // check if old version of datasource used\n        var getRowsParams = utils_1._.getFunctionParameters(this.cacheParams.datasource.getRows);\n        if (getRowsParams.length > 1) {\n            console.warn('ag-grid: It looks like your paging datasource is of the old type, taking more than one parameter.');\n            console.warn('ag-grid: From ag-grid 1.9.0, now the getRows takes one parameter. See the documentation for details.');\n        }\n        // put in timeout, to force result to be async\n        window.setTimeout(function () {\n            _this.cacheParams.datasource.getRows(params);\n        }, 0);\n    };\n    __decorate([\n        context_1.Autowired('gridOptionsWrapper'),\n        __metadata(\"design:type\", gridOptionsWrapper_1.GridOptionsWrapper)\n    ], InfiniteBlock.prototype, \"gridOptionsWrapper\", void 0);\n    __decorate([\n        context_1.Autowired('rowRenderer'),\n        __metadata(\"design:type\", rowRenderer_1.RowRenderer)\n    ], InfiniteBlock.prototype, \"rowRenderer\", void 0);\n    __decorate([\n        context_1.PostConstruct,\n        __metadata(\"design:type\", Function),\n        __metadata(\"design:paramtypes\", []),\n        __metadata(\"design:returntype\", void 0)\n    ], InfiniteBlock.prototype, \"init\", null);\n    return InfiniteBlock;\n}(rowNodeBlock_1.RowNodeBlock));\nexports.InfiniteBlock = InfiniteBlock;\n"]},"metadata":{},"sourceType":"script"}