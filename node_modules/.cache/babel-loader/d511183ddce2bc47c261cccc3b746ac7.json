{"ast":null,"code":"/**\n * ag-grid-community - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components\n * @version v21.2.2\n * @link http://www.ag-grid.com/\n * @license MIT\n */\n\"use strict\";\n\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nvar __metadata = this && this.__metadata || function (k, v) {\n  if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar context_1 = require(\"../../context/context\");\n\nvar constants_1 = require(\"../../constants\");\n\nvar gridOptionsWrapper_1 = require(\"../../gridOptionsWrapper\");\n\nvar utils_1 = require(\"../../utils\");\n\nvar ImmutableService =\n/** @class */\nfunction () {\n  function ImmutableService() {}\n\n  ImmutableService.prototype.postConstruct = function () {\n    if (this.rowModel.getType() === constants_1.Constants.ROW_MODEL_TYPE_CLIENT_SIDE) {\n      this.clientSideRowModel = this.rowModel;\n    }\n  }; // converts the setRowData() command to a transaction\n\n\n  ImmutableService.prototype.createTransactionForRowData = function (data) {\n    if (utils_1._.missing(this.clientSideRowModel)) {\n      console.error('ag-Grid: ImmutableService only works with ClientSideRowModel');\n      return;\n    }\n\n    var getRowNodeIdFunc = this.gridOptionsWrapper.getRowNodeIdFunc();\n\n    if (!getRowNodeIdFunc || utils_1._.missing(getRowNodeIdFunc)) {\n      console.error('ag-Grid: ImmutableService requires getRowNodeId() callback to be implemented, your row data need IDs!');\n      return;\n    } // convert the data into a transaction object by working out adds, removes and updates\n\n\n    var transaction = {\n      remove: [],\n      update: [],\n      add: []\n    };\n    var existingNodesMap = this.clientSideRowModel.getCopyOfNodesMap();\n    var suppressSortOrder = this.gridOptionsWrapper.isSuppressMaintainUnsortedOrder();\n    var orderMap = suppressSortOrder ? null : {};\n\n    if (utils_1._.exists(data)) {\n      // split all the new data in the following:\n      // if new, push to 'add'\n      // if update, push to 'update'\n      // if not changed, do not include in the transaction\n      data.forEach(function (dataItem, index) {\n        var id = getRowNodeIdFunc(dataItem);\n        var existingNode = existingNodesMap[id];\n\n        if (orderMap) {\n          orderMap[id] = index;\n        }\n\n        if (existingNode) {\n          var dataHasChanged = existingNode.data !== dataItem;\n\n          if (dataHasChanged) {\n            transaction.update.push(dataItem);\n          } // otherwise, if data not changed, we just don't include it anywhere, as it's not a delta\n          // remove from list, so we know the item is not to be removed\n\n\n          existingNodesMap[id] = undefined;\n        } else {\n          transaction.add.push(dataItem);\n        }\n      });\n    } // at this point, all rows that are left, should be removed\n\n\n    utils_1._.iterateObject(existingNodesMap, function (id, rowNode) {\n      if (rowNode) {\n        transaction.remove.push(rowNode.data);\n      }\n    });\n\n    return [transaction, orderMap];\n  };\n\n  __decorate([context_1.Autowired('rowModel'), __metadata(\"design:type\", Object)], ImmutableService.prototype, \"rowModel\", void 0);\n\n  __decorate([context_1.Autowired('gridOptionsWrapper'), __metadata(\"design:type\", gridOptionsWrapper_1.GridOptionsWrapper)], ImmutableService.prototype, \"gridOptionsWrapper\", void 0);\n\n  __decorate([context_1.PostConstruct, __metadata(\"design:type\", Function), __metadata(\"design:paramtypes\", []), __metadata(\"design:returntype\", void 0)], ImmutableService.prototype, \"postConstruct\", null);\n\n  ImmutableService = __decorate([context_1.Bean('immutableService')], ImmutableService);\n  return ImmutableService;\n}();\n\nexports.ImmutableService = ImmutableService;","map":{"version":3,"sources":["/Users/dirkmennecke77/Desktop/Lageplan/node_modules/ag-grid-community/dist/lib/rowModels/clientSide/immutableService.js"],"names":["__decorate","decorators","target","key","desc","c","arguments","length","r","Object","getOwnPropertyDescriptor","d","Reflect","decorate","i","defineProperty","__metadata","k","v","metadata","exports","value","context_1","require","constants_1","gridOptionsWrapper_1","utils_1","ImmutableService","prototype","postConstruct","rowModel","getType","Constants","ROW_MODEL_TYPE_CLIENT_SIDE","clientSideRowModel","createTransactionForRowData","data","_","missing","console","error","getRowNodeIdFunc","gridOptionsWrapper","transaction","remove","update","add","existingNodesMap","getCopyOfNodesMap","suppressSortOrder","isSuppressMaintainUnsortedOrder","orderMap","exists","forEach","dataItem","index","id","existingNode","dataHasChanged","push","undefined","iterateObject","rowNode","Autowired","GridOptionsWrapper","PostConstruct","Function","Bean"],"mappings":"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","sourcesContent":["/**\n * ag-grid-community - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components\n * @version v21.2.2\n * @link http://www.ag-grid.com/\n * @license MIT\n */\n\"use strict\";\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __metadata = (this && this.__metadata) || function (k, v) {\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar context_1 = require(\"../../context/context\");\nvar constants_1 = require(\"../../constants\");\nvar gridOptionsWrapper_1 = require(\"../../gridOptionsWrapper\");\nvar utils_1 = require(\"../../utils\");\nvar ImmutableService = /** @class */ (function () {\n    function ImmutableService() {\n    }\n    ImmutableService.prototype.postConstruct = function () {\n        if (this.rowModel.getType() === constants_1.Constants.ROW_MODEL_TYPE_CLIENT_SIDE) {\n            this.clientSideRowModel = this.rowModel;\n        }\n    };\n    // converts the setRowData() command to a transaction\n    ImmutableService.prototype.createTransactionForRowData = function (data) {\n        if (utils_1._.missing(this.clientSideRowModel)) {\n            console.error('ag-Grid: ImmutableService only works with ClientSideRowModel');\n            return;\n        }\n        var getRowNodeIdFunc = this.gridOptionsWrapper.getRowNodeIdFunc();\n        if (!getRowNodeIdFunc || utils_1._.missing(getRowNodeIdFunc)) {\n            console.error('ag-Grid: ImmutableService requires getRowNodeId() callback to be implemented, your row data need IDs!');\n            return;\n        }\n        // convert the data into a transaction object by working out adds, removes and updates\n        var transaction = {\n            remove: [],\n            update: [],\n            add: []\n        };\n        var existingNodesMap = this.clientSideRowModel.getCopyOfNodesMap();\n        var suppressSortOrder = this.gridOptionsWrapper.isSuppressMaintainUnsortedOrder();\n        var orderMap = suppressSortOrder ? null : {};\n        if (utils_1._.exists(data)) {\n            // split all the new data in the following:\n            // if new, push to 'add'\n            // if update, push to 'update'\n            // if not changed, do not include in the transaction\n            data.forEach(function (dataItem, index) {\n                var id = getRowNodeIdFunc(dataItem);\n                var existingNode = existingNodesMap[id];\n                if (orderMap) {\n                    orderMap[id] = index;\n                }\n                if (existingNode) {\n                    var dataHasChanged = existingNode.data !== dataItem;\n                    if (dataHasChanged) {\n                        transaction.update.push(dataItem);\n                    }\n                    // otherwise, if data not changed, we just don't include it anywhere, as it's not a delta\n                    // remove from list, so we know the item is not to be removed\n                    existingNodesMap[id] = undefined;\n                }\n                else {\n                    transaction.add.push(dataItem);\n                }\n            });\n        }\n        // at this point, all rows that are left, should be removed\n        utils_1._.iterateObject(existingNodesMap, function (id, rowNode) {\n            if (rowNode) {\n                transaction.remove.push(rowNode.data);\n            }\n        });\n        return [transaction, orderMap];\n    };\n    __decorate([\n        context_1.Autowired('rowModel'),\n        __metadata(\"design:type\", Object)\n    ], ImmutableService.prototype, \"rowModel\", void 0);\n    __decorate([\n        context_1.Autowired('gridOptionsWrapper'),\n        __metadata(\"design:type\", gridOptionsWrapper_1.GridOptionsWrapper)\n    ], ImmutableService.prototype, \"gridOptionsWrapper\", void 0);\n    __decorate([\n        context_1.PostConstruct,\n        __metadata(\"design:type\", Function),\n        __metadata(\"design:paramtypes\", []),\n        __metadata(\"design:returntype\", void 0)\n    ], ImmutableService.prototype, \"postConstruct\", null);\n    ImmutableService = __decorate([\n        context_1.Bean('immutableService')\n    ], ImmutableService);\n    return ImmutableService;\n}());\nexports.ImmutableService = ImmutableService;\n"]},"metadata":{},"sourceType":"script"}