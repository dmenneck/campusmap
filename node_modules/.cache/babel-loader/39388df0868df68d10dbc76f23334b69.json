{"ast":null,"code":"/**\n * ag-grid-community - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components\n * @version v21.2.2\n * @link http://www.ag-grid.com/\n * @license MIT\n */\n\"use strict\";\n\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nvar __metadata = this && this.__metadata || function (k, v) {\n  if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar column_1 = require(\"./column\");\n\nvar eventService_1 = require(\"../eventService\");\n\nvar context_1 = require(\"../context/context\");\n\nvar gridOptionsWrapper_1 = require(\"../gridOptionsWrapper\");\n\nvar utils_1 = require(\"../utils\");\n\nvar ColumnGroup =\n/** @class */\nfunction () {\n  function ColumnGroup(originalColumnGroup, groupId, instanceId, pinned) {\n    // depends on the open/closed state of the group, only displaying columns are stored here\n    this.displayedChildren = [];\n    this.localEventService = new eventService_1.EventService();\n    this.groupId = groupId;\n    this.instanceId = instanceId;\n    this.originalColumnGroup = originalColumnGroup;\n    this.pinned = pinned;\n  } // this is static, a it is used outside of this class\n\n\n  ColumnGroup.createUniqueId = function (groupId, instanceId) {\n    return groupId + '_' + instanceId;\n  }; // as the user is adding and removing columns, the groups are recalculated.\n  // this reset clears out all children, ready for children to be added again\n\n\n  ColumnGroup.prototype.reset = function () {\n    this.parent = null;\n    this.children = null;\n    this.displayedChildren = null;\n  };\n\n  ColumnGroup.prototype.getParent = function () {\n    return this.parent;\n  };\n\n  ColumnGroup.prototype.setParent = function (parent) {\n    this.parent = parent;\n  };\n\n  ColumnGroup.prototype.getUniqueId = function () {\n    return ColumnGroup.createUniqueId(this.groupId, this.instanceId);\n  };\n\n  ColumnGroup.prototype.isEmptyGroup = function () {\n    return this.displayedChildren.length === 0;\n  };\n\n  ColumnGroup.prototype.isMoving = function () {\n    var allLeafColumns = this.getOriginalColumnGroup().getLeafColumns();\n\n    if (!allLeafColumns || allLeafColumns.length === 0) {\n      return false;\n    }\n\n    var allMoving = true;\n    allLeafColumns.forEach(function (col) {\n      if (!col.isMoving()) {\n        allMoving = false;\n      }\n    });\n    return allMoving;\n  };\n\n  ColumnGroup.prototype.checkLeft = function () {\n    // first get all children to setLeft, as it impacts our decision below\n    this.displayedChildren.forEach(function (child) {\n      if (child instanceof ColumnGroup) {\n        child.checkLeft();\n      }\n    }); // set our left based on first displayed column\n\n    if (this.displayedChildren.length > 0) {\n      if (this.gridOptionsWrapper.isEnableRtl()) {\n        var lastChild = utils_1._.last(this.displayedChildren);\n\n        var lastChildLeft = lastChild.getLeft();\n        this.setLeft(lastChildLeft);\n      } else {\n        var firstChildLeft = this.displayedChildren[0].getLeft();\n        this.setLeft(firstChildLeft);\n      }\n    } else {\n      // this should never happen, as if we have no displayed columns, then\n      // this groups should not even exist.\n      this.setLeft(null);\n    }\n  };\n\n  ColumnGroup.prototype.getLeft = function () {\n    return this.left;\n  };\n\n  ColumnGroup.prototype.getOldLeft = function () {\n    return this.oldLeft;\n  };\n\n  ColumnGroup.prototype.setLeft = function (left) {\n    this.oldLeft = left;\n\n    if (this.left !== left) {\n      this.left = left;\n      this.localEventService.dispatchEvent(this.createAgEvent(ColumnGroup.EVENT_LEFT_CHANGED));\n    }\n  };\n\n  ColumnGroup.prototype.getPinned = function () {\n    return this.pinned;\n  };\n\n  ColumnGroup.prototype.createAgEvent = function (type) {\n    return {\n      type: type\n    };\n  };\n\n  ColumnGroup.prototype.addEventListener = function (eventType, listener) {\n    this.localEventService.addEventListener(eventType, listener);\n  };\n\n  ColumnGroup.prototype.removeEventListener = function (eventType, listener) {\n    this.localEventService.removeEventListener(eventType, listener);\n  };\n\n  ColumnGroup.prototype.getGroupId = function () {\n    return this.groupId;\n  };\n\n  ColumnGroup.prototype.getInstanceId = function () {\n    return this.instanceId;\n  };\n\n  ColumnGroup.prototype.isChildInThisGroupDeepSearch = function (wantedChild) {\n    var result = false;\n    this.children.forEach(function (foundChild) {\n      if (wantedChild === foundChild) {\n        result = true;\n      }\n\n      if (foundChild instanceof ColumnGroup) {\n        if (foundChild.isChildInThisGroupDeepSearch(wantedChild)) {\n          result = true;\n        }\n      }\n    });\n    return result;\n  };\n\n  ColumnGroup.prototype.getActualWidth = function () {\n    var groupActualWidth = 0;\n\n    if (this.displayedChildren) {\n      this.displayedChildren.forEach(function (child) {\n        groupActualWidth += child.getActualWidth();\n      });\n    }\n\n    return groupActualWidth;\n  };\n\n  ColumnGroup.prototype.isResizable = function () {\n    if (!this.displayedChildren) {\n      return false;\n    } // if at least one child is resizable, then the group is resizable\n\n\n    var result = false;\n    this.displayedChildren.forEach(function (child) {\n      if (child.isResizable()) {\n        result = true;\n      }\n    });\n    return result;\n  };\n\n  ColumnGroup.prototype.getMinWidth = function () {\n    var result = 0;\n    this.displayedChildren.forEach(function (groupChild) {\n      result += groupChild.getMinWidth();\n    });\n    return result;\n  };\n\n  ColumnGroup.prototype.addChild = function (child) {\n    if (!this.children) {\n      this.children = [];\n    }\n\n    this.children.push(child);\n  };\n\n  ColumnGroup.prototype.getDisplayedChildren = function () {\n    return this.displayedChildren;\n  };\n\n  ColumnGroup.prototype.getLeafColumns = function () {\n    var result = [];\n    this.addLeafColumns(result);\n    return result;\n  };\n\n  ColumnGroup.prototype.getDisplayedLeafColumns = function () {\n    var result = [];\n    this.addDisplayedLeafColumns(result);\n    return result;\n  }; // why two methods here doing the same thing?\n\n\n  ColumnGroup.prototype.getDefinition = function () {\n    return this.originalColumnGroup.getColGroupDef();\n  };\n\n  ColumnGroup.prototype.getColGroupDef = function () {\n    return this.originalColumnGroup.getColGroupDef();\n  };\n\n  ColumnGroup.prototype.isPadding = function () {\n    return this.originalColumnGroup.isPadding();\n  };\n\n  ColumnGroup.prototype.isExpandable = function () {\n    return this.originalColumnGroup.isExpandable();\n  };\n\n  ColumnGroup.prototype.isExpanded = function () {\n    return this.originalColumnGroup.isExpanded();\n  };\n\n  ColumnGroup.prototype.setExpanded = function (expanded) {\n    this.originalColumnGroup.setExpanded(expanded);\n  };\n\n  ColumnGroup.prototype.addDisplayedLeafColumns = function (leafColumns) {\n    this.displayedChildren.forEach(function (child) {\n      if (child instanceof column_1.Column) {\n        leafColumns.push(child);\n      } else if (child instanceof ColumnGroup) {\n        child.addDisplayedLeafColumns(leafColumns);\n      }\n    });\n  };\n\n  ColumnGroup.prototype.addLeafColumns = function (leafColumns) {\n    this.children.forEach(function (child) {\n      if (child instanceof column_1.Column) {\n        leafColumns.push(child);\n      } else if (child instanceof ColumnGroup) {\n        child.addLeafColumns(leafColumns);\n      }\n    });\n  };\n\n  ColumnGroup.prototype.getChildren = function () {\n    return this.children;\n  };\n\n  ColumnGroup.prototype.getColumnGroupShow = function () {\n    return this.originalColumnGroup.getColumnGroupShow();\n  };\n\n  ColumnGroup.prototype.getOriginalColumnGroup = function () {\n    return this.originalColumnGroup;\n  };\n\n  ColumnGroup.prototype.calculateDisplayedColumns = function () {\n    var _this = this; // clear out last time we calculated\n\n\n    this.displayedChildren = [];\n    var topLevelGroup = this; // find the column group that is controlling expandable. this is relevant when we have padding (empty)\n    // groups, where the expandable is actually the first parent that is not a padding group.\n\n    if (this.isPadding()) {\n      while (topLevelGroup.getParent() && topLevelGroup.isPadding()) {\n        topLevelGroup = topLevelGroup.getParent();\n      }\n    }\n\n    var isExpandable = topLevelGroup.originalColumnGroup.isExpandable(); // it not expandable, everything is visible\n\n    if (!isExpandable) {\n      this.displayedChildren = this.children;\n    } else {\n      // Add cols based on columnGroupShow\n      // Note - the below also adds padding groups, these are always added because they never have\n      // colDef.columnGroupShow set.\n      this.children.forEach(function (abstractColumn) {\n        var headerGroupShow = abstractColumn.getColumnGroupShow();\n\n        switch (headerGroupShow) {\n          case ColumnGroup.HEADER_GROUP_SHOW_OPEN:\n            // when set to open, only show col if group is open\n            if (topLevelGroup.originalColumnGroup.isExpanded()) {\n              _this.displayedChildren.push(abstractColumn);\n            }\n\n            break;\n\n          case ColumnGroup.HEADER_GROUP_SHOW_CLOSED:\n            // when set to open, only show col if group is open\n            if (!topLevelGroup.originalColumnGroup.isExpanded()) {\n              _this.displayedChildren.push(abstractColumn);\n            }\n\n            break;\n\n          default:\n            // default is always show the column\n            _this.displayedChildren.push(abstractColumn);\n\n            break;\n        }\n      });\n    }\n\n    this.localEventService.dispatchEvent(this.createAgEvent(ColumnGroup.EVENT_DISPLAYED_CHILDREN_CHANGED));\n  };\n\n  ColumnGroup.HEADER_GROUP_SHOW_OPEN = 'open';\n  ColumnGroup.HEADER_GROUP_SHOW_CLOSED = 'closed';\n  ColumnGroup.HEADER_GROUP_PADDING = 'padding';\n  ColumnGroup.EVENT_LEFT_CHANGED = 'leftChanged';\n  ColumnGroup.EVENT_DISPLAYED_CHILDREN_CHANGED = 'displayedChildrenChanged';\n\n  __decorate([context_1.Autowired('gridOptionsWrapper'), __metadata(\"design:type\", gridOptionsWrapper_1.GridOptionsWrapper)], ColumnGroup.prototype, \"gridOptionsWrapper\", void 0);\n\n  return ColumnGroup;\n}();\n\nexports.ColumnGroup = ColumnGroup;","map":{"version":3,"sources":["/Users/dirkmennecke77/Desktop/Lageplan/node_modules/ag-grid-community/dist/lib/entities/columnGroup.js"],"names":["__decorate","decorators","target","key","desc","c","arguments","length","r","Object","getOwnPropertyDescriptor","d","Reflect","decorate","i","defineProperty","__metadata","k","v","metadata","exports","value","column_1","require","eventService_1","context_1","gridOptionsWrapper_1","utils_1","ColumnGroup","originalColumnGroup","groupId","instanceId","pinned","displayedChildren","localEventService","EventService","createUniqueId","prototype","reset","parent","children","getParent","setParent","getUniqueId","isEmptyGroup","isMoving","allLeafColumns","getOriginalColumnGroup","getLeafColumns","allMoving","forEach","col","checkLeft","child","gridOptionsWrapper","isEnableRtl","lastChild","_","last","lastChildLeft","getLeft","setLeft","firstChildLeft","left","getOldLeft","oldLeft","dispatchEvent","createAgEvent","EVENT_LEFT_CHANGED","getPinned","type","addEventListener","eventType","listener","removeEventListener","getGroupId","getInstanceId","isChildInThisGroupDeepSearch","wantedChild","result","foundChild","getActualWidth","groupActualWidth","isResizable","getMinWidth","groupChild","addChild","push","getDisplayedChildren","addLeafColumns","getDisplayedLeafColumns","addDisplayedLeafColumns","getDefinition","getColGroupDef","isPadding","isExpandable","isExpanded","setExpanded","expanded","leafColumns","Column","getChildren","getColumnGroupShow","calculateDisplayedColumns","_this","topLevelGroup","abstractColumn","headerGroupShow","HEADER_GROUP_SHOW_OPEN","HEADER_GROUP_SHOW_CLOSED","EVENT_DISPLAYED_CHILDREN_CHANGED","HEADER_GROUP_PADDING","Autowired","GridOptionsWrapper"],"mappings":"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","sourcesContent":["/**\n * ag-grid-community - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components\n * @version v21.2.2\n * @link http://www.ag-grid.com/\n * @license MIT\n */\n\"use strict\";\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __metadata = (this && this.__metadata) || function (k, v) {\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar column_1 = require(\"./column\");\nvar eventService_1 = require(\"../eventService\");\nvar context_1 = require(\"../context/context\");\nvar gridOptionsWrapper_1 = require(\"../gridOptionsWrapper\");\nvar utils_1 = require(\"../utils\");\nvar ColumnGroup = /** @class */ (function () {\n    function ColumnGroup(originalColumnGroup, groupId, instanceId, pinned) {\n        // depends on the open/closed state of the group, only displaying columns are stored here\n        this.displayedChildren = [];\n        this.localEventService = new eventService_1.EventService();\n        this.groupId = groupId;\n        this.instanceId = instanceId;\n        this.originalColumnGroup = originalColumnGroup;\n        this.pinned = pinned;\n    }\n    // this is static, a it is used outside of this class\n    ColumnGroup.createUniqueId = function (groupId, instanceId) {\n        return groupId + '_' + instanceId;\n    };\n    // as the user is adding and removing columns, the groups are recalculated.\n    // this reset clears out all children, ready for children to be added again\n    ColumnGroup.prototype.reset = function () {\n        this.parent = null;\n        this.children = null;\n        this.displayedChildren = null;\n    };\n    ColumnGroup.prototype.getParent = function () {\n        return this.parent;\n    };\n    ColumnGroup.prototype.setParent = function (parent) {\n        this.parent = parent;\n    };\n    ColumnGroup.prototype.getUniqueId = function () {\n        return ColumnGroup.createUniqueId(this.groupId, this.instanceId);\n    };\n    ColumnGroup.prototype.isEmptyGroup = function () {\n        return this.displayedChildren.length === 0;\n    };\n    ColumnGroup.prototype.isMoving = function () {\n        var allLeafColumns = this.getOriginalColumnGroup().getLeafColumns();\n        if (!allLeafColumns || allLeafColumns.length === 0) {\n            return false;\n        }\n        var allMoving = true;\n        allLeafColumns.forEach(function (col) {\n            if (!col.isMoving()) {\n                allMoving = false;\n            }\n        });\n        return allMoving;\n    };\n    ColumnGroup.prototype.checkLeft = function () {\n        // first get all children to setLeft, as it impacts our decision below\n        this.displayedChildren.forEach(function (child) {\n            if (child instanceof ColumnGroup) {\n                child.checkLeft();\n            }\n        });\n        // set our left based on first displayed column\n        if (this.displayedChildren.length > 0) {\n            if (this.gridOptionsWrapper.isEnableRtl()) {\n                var lastChild = utils_1._.last(this.displayedChildren);\n                var lastChildLeft = lastChild.getLeft();\n                this.setLeft(lastChildLeft);\n            }\n            else {\n                var firstChildLeft = this.displayedChildren[0].getLeft();\n                this.setLeft(firstChildLeft);\n            }\n        }\n        else {\n            // this should never happen, as if we have no displayed columns, then\n            // this groups should not even exist.\n            this.setLeft(null);\n        }\n    };\n    ColumnGroup.prototype.getLeft = function () {\n        return this.left;\n    };\n    ColumnGroup.prototype.getOldLeft = function () {\n        return this.oldLeft;\n    };\n    ColumnGroup.prototype.setLeft = function (left) {\n        this.oldLeft = left;\n        if (this.left !== left) {\n            this.left = left;\n            this.localEventService.dispatchEvent(this.createAgEvent(ColumnGroup.EVENT_LEFT_CHANGED));\n        }\n    };\n    ColumnGroup.prototype.getPinned = function () {\n        return this.pinned;\n    };\n    ColumnGroup.prototype.createAgEvent = function (type) {\n        return {\n            type: type,\n        };\n    };\n    ColumnGroup.prototype.addEventListener = function (eventType, listener) {\n        this.localEventService.addEventListener(eventType, listener);\n    };\n    ColumnGroup.prototype.removeEventListener = function (eventType, listener) {\n        this.localEventService.removeEventListener(eventType, listener);\n    };\n    ColumnGroup.prototype.getGroupId = function () {\n        return this.groupId;\n    };\n    ColumnGroup.prototype.getInstanceId = function () {\n        return this.instanceId;\n    };\n    ColumnGroup.prototype.isChildInThisGroupDeepSearch = function (wantedChild) {\n        var result = false;\n        this.children.forEach(function (foundChild) {\n            if (wantedChild === foundChild) {\n                result = true;\n            }\n            if (foundChild instanceof ColumnGroup) {\n                if (foundChild.isChildInThisGroupDeepSearch(wantedChild)) {\n                    result = true;\n                }\n            }\n        });\n        return result;\n    };\n    ColumnGroup.prototype.getActualWidth = function () {\n        var groupActualWidth = 0;\n        if (this.displayedChildren) {\n            this.displayedChildren.forEach(function (child) {\n                groupActualWidth += child.getActualWidth();\n            });\n        }\n        return groupActualWidth;\n    };\n    ColumnGroup.prototype.isResizable = function () {\n        if (!this.displayedChildren) {\n            return false;\n        }\n        // if at least one child is resizable, then the group is resizable\n        var result = false;\n        this.displayedChildren.forEach(function (child) {\n            if (child.isResizable()) {\n                result = true;\n            }\n        });\n        return result;\n    };\n    ColumnGroup.prototype.getMinWidth = function () {\n        var result = 0;\n        this.displayedChildren.forEach(function (groupChild) {\n            result += groupChild.getMinWidth();\n        });\n        return result;\n    };\n    ColumnGroup.prototype.addChild = function (child) {\n        if (!this.children) {\n            this.children = [];\n        }\n        this.children.push(child);\n    };\n    ColumnGroup.prototype.getDisplayedChildren = function () {\n        return this.displayedChildren;\n    };\n    ColumnGroup.prototype.getLeafColumns = function () {\n        var result = [];\n        this.addLeafColumns(result);\n        return result;\n    };\n    ColumnGroup.prototype.getDisplayedLeafColumns = function () {\n        var result = [];\n        this.addDisplayedLeafColumns(result);\n        return result;\n    };\n    // why two methods here doing the same thing?\n    ColumnGroup.prototype.getDefinition = function () {\n        return this.originalColumnGroup.getColGroupDef();\n    };\n    ColumnGroup.prototype.getColGroupDef = function () {\n        return this.originalColumnGroup.getColGroupDef();\n    };\n    ColumnGroup.prototype.isPadding = function () {\n        return this.originalColumnGroup.isPadding();\n    };\n    ColumnGroup.prototype.isExpandable = function () {\n        return this.originalColumnGroup.isExpandable();\n    };\n    ColumnGroup.prototype.isExpanded = function () {\n        return this.originalColumnGroup.isExpanded();\n    };\n    ColumnGroup.prototype.setExpanded = function (expanded) {\n        this.originalColumnGroup.setExpanded(expanded);\n    };\n    ColumnGroup.prototype.addDisplayedLeafColumns = function (leafColumns) {\n        this.displayedChildren.forEach(function (child) {\n            if (child instanceof column_1.Column) {\n                leafColumns.push(child);\n            }\n            else if (child instanceof ColumnGroup) {\n                child.addDisplayedLeafColumns(leafColumns);\n            }\n        });\n    };\n    ColumnGroup.prototype.addLeafColumns = function (leafColumns) {\n        this.children.forEach(function (child) {\n            if (child instanceof column_1.Column) {\n                leafColumns.push(child);\n            }\n            else if (child instanceof ColumnGroup) {\n                child.addLeafColumns(leafColumns);\n            }\n        });\n    };\n    ColumnGroup.prototype.getChildren = function () {\n        return this.children;\n    };\n    ColumnGroup.prototype.getColumnGroupShow = function () {\n        return this.originalColumnGroup.getColumnGroupShow();\n    };\n    ColumnGroup.prototype.getOriginalColumnGroup = function () {\n        return this.originalColumnGroup;\n    };\n    ColumnGroup.prototype.calculateDisplayedColumns = function () {\n        var _this = this;\n        // clear out last time we calculated\n        this.displayedChildren = [];\n        var topLevelGroup = this;\n        // find the column group that is controlling expandable. this is relevant when we have padding (empty)\n        // groups, where the expandable is actually the first parent that is not a padding group.\n        if (this.isPadding()) {\n            while (topLevelGroup.getParent() && topLevelGroup.isPadding()) {\n                topLevelGroup = topLevelGroup.getParent();\n            }\n        }\n        var isExpandable = topLevelGroup.originalColumnGroup.isExpandable();\n        // it not expandable, everything is visible\n        if (!isExpandable) {\n            this.displayedChildren = this.children;\n        }\n        else {\n            // Add cols based on columnGroupShow\n            // Note - the below also adds padding groups, these are always added because they never have\n            // colDef.columnGroupShow set.\n            this.children.forEach(function (abstractColumn) {\n                var headerGroupShow = abstractColumn.getColumnGroupShow();\n                switch (headerGroupShow) {\n                    case ColumnGroup.HEADER_GROUP_SHOW_OPEN:\n                        // when set to open, only show col if group is open\n                        if (topLevelGroup.originalColumnGroup.isExpanded()) {\n                            _this.displayedChildren.push(abstractColumn);\n                        }\n                        break;\n                    case ColumnGroup.HEADER_GROUP_SHOW_CLOSED:\n                        // when set to open, only show col if group is open\n                        if (!topLevelGroup.originalColumnGroup.isExpanded()) {\n                            _this.displayedChildren.push(abstractColumn);\n                        }\n                        break;\n                    default:\n                        // default is always show the column\n                        _this.displayedChildren.push(abstractColumn);\n                        break;\n                }\n            });\n        }\n        this.localEventService.dispatchEvent(this.createAgEvent(ColumnGroup.EVENT_DISPLAYED_CHILDREN_CHANGED));\n    };\n    ColumnGroup.HEADER_GROUP_SHOW_OPEN = 'open';\n    ColumnGroup.HEADER_GROUP_SHOW_CLOSED = 'closed';\n    ColumnGroup.HEADER_GROUP_PADDING = 'padding';\n    ColumnGroup.EVENT_LEFT_CHANGED = 'leftChanged';\n    ColumnGroup.EVENT_DISPLAYED_CHILDREN_CHANGED = 'displayedChildrenChanged';\n    __decorate([\n        context_1.Autowired('gridOptionsWrapper'),\n        __metadata(\"design:type\", gridOptionsWrapper_1.GridOptionsWrapper)\n    ], ColumnGroup.prototype, \"gridOptionsWrapper\", void 0);\n    return ColumnGroup;\n}());\nexports.ColumnGroup = ColumnGroup;\n"]},"metadata":{},"sourceType":"script"}