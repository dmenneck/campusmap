{"ast":null,"code":"/**\n * @module ol/geom/Point\n */\nimport { inherits } from '../util.js';\nimport { createOrUpdateFromCoordinate, containsXY } from '../extent.js';\nimport GeometryLayout from '../geom/GeometryLayout.js';\nimport GeometryType from '../geom/GeometryType.js';\nimport SimpleGeometry from '../geom/SimpleGeometry.js';\nimport { deflateCoordinate } from '../geom/flat/deflate.js';\nimport { squaredDistance as squaredDx } from '../math.js';\n/**\n * @classdesc\n * Point geometry.\n *\n * @constructor\n * @extends {module:ol/geom/SimpleGeometry}\n * @param {module:ol/coordinate~Coordinate} coordinates Coordinates.\n * @param {module:ol/geom/GeometryLayout=} opt_layout Layout.\n * @api\n */\n\nconst Point = function (coordinates, opt_layout) {\n  SimpleGeometry.call(this);\n  this.setCoordinates(coordinates, opt_layout);\n};\n\ninherits(Point, SimpleGeometry);\n/**\n * Make a complete copy of the geometry.\n * @return {!module:ol/geom/Point} Clone.\n * @override\n * @api\n */\n\nPoint.prototype.clone = function () {\n  const point = new Point(null);\n  point.setFlatCoordinates(this.layout, this.flatCoordinates.slice());\n  return point;\n};\n/**\n * @inheritDoc\n */\n\n\nPoint.prototype.closestPointXY = function (x, y, closestPoint, minSquaredDistance) {\n  const flatCoordinates = this.flatCoordinates;\n  const squaredDistance = squaredDx(x, y, flatCoordinates[0], flatCoordinates[1]);\n\n  if (squaredDistance < minSquaredDistance) {\n    const stride = this.stride;\n\n    for (let i = 0; i < stride; ++i) {\n      closestPoint[i] = flatCoordinates[i];\n    }\n\n    closestPoint.length = stride;\n    return squaredDistance;\n  } else {\n    return minSquaredDistance;\n  }\n};\n/**\n * Return the coordinate of the point.\n * @return {module:ol/coordinate~Coordinate} Coordinates.\n * @override\n * @api\n */\n\n\nPoint.prototype.getCoordinates = function () {\n  return !this.flatCoordinates ? [] : this.flatCoordinates.slice();\n};\n/**\n * @inheritDoc\n */\n\n\nPoint.prototype.computeExtent = function (extent) {\n  return createOrUpdateFromCoordinate(this.flatCoordinates, extent);\n};\n/**\n * @inheritDoc\n * @api\n */\n\n\nPoint.prototype.getType = function () {\n  return GeometryType.POINT;\n};\n/**\n * @inheritDoc\n * @api\n */\n\n\nPoint.prototype.intersectsExtent = function (extent) {\n  return containsXY(extent, this.flatCoordinates[0], this.flatCoordinates[1]);\n};\n/**\n * @inheritDoc\n * @api\n */\n\n\nPoint.prototype.setCoordinates = function (coordinates, opt_layout) {\n  if (!coordinates) {\n    this.setFlatCoordinates(GeometryLayout.XY, null);\n  } else {\n    this.setLayout(opt_layout, coordinates, 0);\n\n    if (!this.flatCoordinates) {\n      this.flatCoordinates = [];\n    }\n\n    this.flatCoordinates.length = deflateCoordinate(this.flatCoordinates, 0, coordinates, this.stride);\n    this.changed();\n  }\n};\n/**\n * @param {module:ol/geom/GeometryLayout} layout Layout.\n * @param {Array.<number>} flatCoordinates Flat coordinates.\n */\n\n\nPoint.prototype.setFlatCoordinates = function (layout, flatCoordinates) {\n  this.setFlatCoordinatesInternal(layout, flatCoordinates);\n  this.changed();\n};\n\nexport default Point;","map":null,"metadata":{},"sourceType":"module"}