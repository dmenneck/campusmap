{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n/**\n * @module ol/format/filter/IsLike\n */\n\n\nimport Comparison from './Comparison.js';\n/**\n * @classdesc\n * Represents a `<PropertyIsLike>` comparison operator.\n * @api\n */\n\nvar IsLike =\n/** @class */\nfunction (_super) {\n  __extends(IsLike, _super);\n  /**\n   * [constructor description]\n   * @param {!string} propertyName Name of the context property to compare.\n   * @param {!string} pattern Text pattern.\n   * @param {string=} opt_wildCard Pattern character which matches any sequence of\n   *    zero or more string characters. Default is '*'.\n   * @param {string=} opt_singleChar pattern character which matches any single\n   *    string character. Default is '.'.\n   * @param {string=} opt_escapeChar Escape character which can be used to escape\n   *    the pattern characters. Default is '!'.\n   * @param {boolean=} opt_matchCase Case-sensitive?\n   */\n\n\n  function IsLike(propertyName, pattern, opt_wildCard, opt_singleChar, opt_escapeChar, opt_matchCase) {\n    var _this = _super.call(this, 'PropertyIsLike', propertyName) || this;\n    /**\n     * @type {!string}\n     */\n\n\n    _this.pattern = pattern;\n    /**\n     * @type {!string}\n     */\n\n    _this.wildCard = opt_wildCard !== undefined ? opt_wildCard : '*';\n    /**\n     * @type {!string}\n     */\n\n    _this.singleChar = opt_singleChar !== undefined ? opt_singleChar : '.';\n    /**\n     * @type {!string}\n     */\n\n    _this.escapeChar = opt_escapeChar !== undefined ? opt_escapeChar : '!';\n    /**\n     * @type {boolean|undefined}\n     */\n\n    _this.matchCase = opt_matchCase;\n    return _this;\n  }\n\n  return IsLike;\n}(Comparison);\n\nexport default IsLike;","map":null,"metadata":{},"sourceType":"module"}