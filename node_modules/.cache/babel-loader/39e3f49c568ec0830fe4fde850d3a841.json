{"ast":null,"code":"/**\n * @module ol/Geolocation\n */\nimport BaseObject, { getChangeEventType } from './Object.js';\nimport { listen } from './events.js';\nimport Event from './events/Event.js';\nimport EventType from './events/EventType.js';\nimport { circular as circularPolygon } from './geom/Polygon.js';\nimport { GEOLOCATION } from './has.js';\nimport { toRadians } from './math.js';\nimport { get as getProjection, getTransformFromProjections, identityTransform } from './proj.js';\n/**\n * @enum {string}\n */\n\nvar Property = {\n  ACCURACY: 'accuracy',\n  ACCURACY_GEOMETRY: 'accuracyGeometry',\n  ALTITUDE: 'altitude',\n  ALTITUDE_ACCURACY: 'altitudeAccuracy',\n  HEADING: 'heading',\n  POSITION: 'position',\n  PROJECTION: 'projection',\n  SPEED: 'speed',\n  TRACKING: 'tracking',\n  TRACKING_OPTIONS: 'trackingOptions'\n};\n/**\n * @classdesc\n * Events emitted on Geolocation error.\n */\n\nvar GeolocationError =\n/*@__PURE__*/\nfunction (Event) {\n  function GeolocationError(error) {\n    Event.call(this, EventType.ERROR);\n    /**\n     * @type {number}\n     */\n\n    this.code = error.code;\n    /**\n     * @type {string}\n     */\n\n    this.message = error.message;\n  }\n\n  if (Event) GeolocationError.__proto__ = Event;\n  GeolocationError.prototype = Object.create(Event && Event.prototype);\n  GeolocationError.prototype.constructor = GeolocationError;\n  return GeolocationError;\n}(Event);\n/**\n * @typedef {Object} Options\n * @property {boolean} [tracking=false] Start Tracking right after\n * instantiation.\n * @property {PositionOptions} [trackingOptions] Tracking options.\n * See http://www.w3.org/TR/geolocation-API/#position_options_interface.\n * @property {import(\"./proj.js\").ProjectionLike} [projection] The projection the position\n * is reported in.\n */\n\n/**\n * @classdesc\n * Helper class for providing HTML5 Geolocation capabilities.\n * The [Geolocation API](http://www.w3.org/TR/geolocation-API/)\n * is used to locate a user's position.\n *\n * To get notified of position changes, register a listener for the generic\n * `change` event on your instance of {@link module:ol/Geolocation~Geolocation}.\n *\n * Example:\n *\n *     var geolocation = new Geolocation({\n *       // take the projection to use from the map's view\n *       projection: view.getProjection()\n *     });\n *     // listen to changes in position\n *     geolocation.on('change', function(evt) {\n *       window.console.log(geolocation.getPosition());\n *     });\n *\n * @fires error\n * @api\n */\n\n\nvar Geolocation =\n/*@__PURE__*/\nfunction (BaseObject) {\n  function Geolocation(opt_options) {\n    BaseObject.call(this);\n    var options = opt_options || {};\n    /**\n     * The unprojected (EPSG:4326) device position.\n     * @private\n     * @type {import(\"./coordinate.js\").Coordinate}\n     */\n\n    this.position_ = null;\n    /**\n     * @private\n     * @type {import(\"./proj.js\").TransformFunction}\n     */\n\n    this.transform_ = identityTransform;\n    /**\n     * @private\n     * @type {number|undefined}\n     */\n\n    this.watchId_ = undefined;\n    listen(this, getChangeEventType(Property.PROJECTION), this.handleProjectionChanged_, this);\n    listen(this, getChangeEventType(Property.TRACKING), this.handleTrackingChanged_, this);\n\n    if (options.projection !== undefined) {\n      this.setProjection(options.projection);\n    }\n\n    if (options.trackingOptions !== undefined) {\n      this.setTrackingOptions(options.trackingOptions);\n    }\n\n    this.setTracking(options.tracking !== undefined ? options.tracking : false);\n  }\n\n  if (BaseObject) Geolocation.__proto__ = BaseObject;\n  Geolocation.prototype = Object.create(BaseObject && BaseObject.prototype);\n  Geolocation.prototype.constructor = Geolocation;\n  /**\n   * @inheritDoc\n   */\n\n  Geolocation.prototype.disposeInternal = function disposeInternal() {\n    this.setTracking(false);\n    BaseObject.prototype.disposeInternal.call(this);\n  };\n  /**\n   * @private\n   */\n\n\n  Geolocation.prototype.handleProjectionChanged_ = function handleProjectionChanged_() {\n    var projection = this.getProjection();\n\n    if (projection) {\n      this.transform_ = getTransformFromProjections(getProjection('EPSG:4326'), projection);\n\n      if (this.position_) {\n        this.set(Property.POSITION, this.transform_(this.position_));\n      }\n    }\n  };\n  /**\n   * @private\n   */\n\n\n  Geolocation.prototype.handleTrackingChanged_ = function handleTrackingChanged_() {\n    if (GEOLOCATION) {\n      var tracking = this.getTracking();\n\n      if (tracking && this.watchId_ === undefined) {\n        this.watchId_ = navigator.geolocation.watchPosition(this.positionChange_.bind(this), this.positionError_.bind(this), this.getTrackingOptions());\n      } else if (!tracking && this.watchId_ !== undefined) {\n        navigator.geolocation.clearWatch(this.watchId_);\n        this.watchId_ = undefined;\n      }\n    }\n  };\n  /**\n   * @private\n   * @param {Position} position position event.\n   */\n\n\n  Geolocation.prototype.positionChange_ = function positionChange_(position) {\n    var coords = position.coords;\n    this.set(Property.ACCURACY, coords.accuracy);\n    this.set(Property.ALTITUDE, coords.altitude === null ? undefined : coords.altitude);\n    this.set(Property.ALTITUDE_ACCURACY, coords.altitudeAccuracy === null ? undefined : coords.altitudeAccuracy);\n    this.set(Property.HEADING, coords.heading === null ? undefined : toRadians(coords.heading));\n\n    if (!this.position_) {\n      this.position_ = [coords.longitude, coords.latitude];\n    } else {\n      this.position_[0] = coords.longitude;\n      this.position_[1] = coords.latitude;\n    }\n\n    var projectedPosition = this.transform_(this.position_);\n    this.set(Property.POSITION, projectedPosition);\n    this.set(Property.SPEED, coords.speed === null ? undefined : coords.speed);\n    var geometry = circularPolygon(this.position_, coords.accuracy);\n    geometry.applyTransform(this.transform_);\n    this.set(Property.ACCURACY_GEOMETRY, geometry);\n    this.changed();\n  };\n  /**\n   * Triggered when the Geolocation returns an error.\n   * @event error\n   * @api\n   */\n\n  /**\n   * @private\n   * @param {PositionError} error error object.\n   */\n\n\n  Geolocation.prototype.positionError_ = function positionError_(error) {\n    this.setTracking(false);\n    this.dispatchEvent(new GeolocationError(error));\n  };\n  /**\n   * Get the accuracy of the position in meters.\n   * @return {number|undefined} The accuracy of the position measurement in\n   *     meters.\n   * @observable\n   * @api\n   */\n\n\n  Geolocation.prototype.getAccuracy = function getAccuracy() {\n    return (\n      /** @type {number|undefined} */\n      this.get(Property.ACCURACY)\n    );\n  };\n  /**\n   * Get a geometry of the position accuracy.\n   * @return {?import(\"./geom/Polygon.js\").default} A geometry of the position accuracy.\n   * @observable\n   * @api\n   */\n\n\n  Geolocation.prototype.getAccuracyGeometry = function getAccuracyGeometry() {\n    return (\n      /** @type {?import(\"./geom/Polygon.js\").default} */\n      this.get(Property.ACCURACY_GEOMETRY) || null\n    );\n  };\n  /**\n   * Get the altitude associated with the position.\n   * @return {number|undefined} The altitude of the position in meters above mean\n   *     sea level.\n   * @observable\n   * @api\n   */\n\n\n  Geolocation.prototype.getAltitude = function getAltitude() {\n    return (\n      /** @type {number|undefined} */\n      this.get(Property.ALTITUDE)\n    );\n  };\n  /**\n   * Get the altitude accuracy of the position.\n   * @return {number|undefined} The accuracy of the altitude measurement in\n   *     meters.\n   * @observable\n   * @api\n   */\n\n\n  Geolocation.prototype.getAltitudeAccuracy = function getAltitudeAccuracy() {\n    return (\n      /** @type {number|undefined} */\n      this.get(Property.ALTITUDE_ACCURACY)\n    );\n  };\n  /**\n   * Get the heading as radians clockwise from North.\n   * Note: depending on the browser, the heading is only defined if the `enableHighAccuracy`\n   * is set to `true` in the tracking options.\n   * @return {number|undefined} The heading of the device in radians from north.\n   * @observable\n   * @api\n   */\n\n\n  Geolocation.prototype.getHeading = function getHeading() {\n    return (\n      /** @type {number|undefined} */\n      this.get(Property.HEADING)\n    );\n  };\n  /**\n   * Get the position of the device.\n   * @return {import(\"./coordinate.js\").Coordinate|undefined} The current position of the device reported\n   *     in the current projection.\n   * @observable\n   * @api\n   */\n\n\n  Geolocation.prototype.getPosition = function getPosition() {\n    return (\n      /** @type {import(\"./coordinate.js\").Coordinate|undefined} */\n      this.get(Property.POSITION)\n    );\n  };\n  /**\n   * Get the projection associated with the position.\n   * @return {import(\"./proj/Projection.js\").default|undefined} The projection the position is\n   *     reported in.\n   * @observable\n   * @api\n   */\n\n\n  Geolocation.prototype.getProjection = function getProjection() {\n    return (\n      /** @type {import(\"./proj/Projection.js\").default|undefined} */\n      this.get(Property.PROJECTION)\n    );\n  };\n  /**\n   * Get the speed in meters per second.\n   * @return {number|undefined} The instantaneous speed of the device in meters\n   *     per second.\n   * @observable\n   * @api\n   */\n\n\n  Geolocation.prototype.getSpeed = function getSpeed() {\n    return (\n      /** @type {number|undefined} */\n      this.get(Property.SPEED)\n    );\n  };\n  /**\n   * Determine if the device location is being tracked.\n   * @return {boolean} The device location is being tracked.\n   * @observable\n   * @api\n   */\n\n\n  Geolocation.prototype.getTracking = function getTracking() {\n    return (\n      /** @type {boolean} */\n      this.get(Property.TRACKING)\n    );\n  };\n  /**\n   * Get the tracking options.\n   * See http://www.w3.org/TR/geolocation-API/#position-options.\n   * @return {PositionOptions|undefined} PositionOptions as defined by\n   *     the [HTML5 Geolocation spec\n   *     ](http://www.w3.org/TR/geolocation-API/#position_options_interface).\n   * @observable\n   * @api\n   */\n\n\n  Geolocation.prototype.getTrackingOptions = function getTrackingOptions() {\n    return (\n      /** @type {PositionOptions|undefined} */\n      this.get(Property.TRACKING_OPTIONS)\n    );\n  };\n  /**\n   * Set the projection to use for transforming the coordinates.\n   * @param {import(\"./proj.js\").ProjectionLike} projection The projection the position is\n   *     reported in.\n   * @observable\n   * @api\n   */\n\n\n  Geolocation.prototype.setProjection = function setProjection(projection) {\n    this.set(Property.PROJECTION, getProjection(projection));\n  };\n  /**\n   * Enable or disable tracking.\n   * @param {boolean} tracking Enable tracking.\n   * @observable\n   * @api\n   */\n\n\n  Geolocation.prototype.setTracking = function setTracking(tracking) {\n    this.set(Property.TRACKING, tracking);\n  };\n  /**\n   * Set the tracking options.\n   * See http://www.w3.org/TR/geolocation-API/#position-options.\n   * @param {PositionOptions} options PositionOptions as defined by the\n   *     [HTML5 Geolocation spec\n   *     ](http://www.w3.org/TR/geolocation-API/#position_options_interface).\n   * @observable\n   * @api\n   */\n\n\n  Geolocation.prototype.setTrackingOptions = function setTrackingOptions(options) {\n    this.set(Property.TRACKING_OPTIONS, options);\n  };\n\n  return Geolocation;\n}(BaseObject);\n\nexport default Geolocation;","map":{"version":3,"sources":["../../src/ol/Geolocation.js"],"names":["const","super"],"mappings":"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","sourcesContent":["/**\n * @module ol/Geolocation\n */\nimport BaseObject, {getChangeEventType} from './Object.js';\nimport {listen} from './events.js';\nimport Event from './events/Event.js';\nimport EventType from './events/EventType.js';\nimport {circular as circularPolygon} from './geom/Polygon.js';\nimport {GEOLOCATION} from './has.js';\nimport {toRadians} from './math.js';\nimport {get as getProjection, getTransformFromProjections, identityTransform} from './proj.js';\n\n\n/**\n * @enum {string}\n */\nconst Property = {\n  ACCURACY: 'accuracy',\n  ACCURACY_GEOMETRY: 'accuracyGeometry',\n  ALTITUDE: 'altitude',\n  ALTITUDE_ACCURACY: 'altitudeAccuracy',\n  HEADING: 'heading',\n  POSITION: 'position',\n  PROJECTION: 'projection',\n  SPEED: 'speed',\n  TRACKING: 'tracking',\n  TRACKING_OPTIONS: 'trackingOptions'\n};\n\n\n/**\n * @classdesc\n * Events emitted on Geolocation error.\n */\nclass GeolocationError extends Event {\n  /**\n   * @param {PositionError} error error object.\n   */\n  constructor(error) {\n    super(EventType.ERROR);\n\n    /**\n     * @type {number}\n     */\n    this.code = error.code;\n\n    /**\n     * @type {string}\n     */\n    this.message = error.message;\n  }\n}\n\n\n/**\n * @typedef {Object} Options\n * @property {boolean} [tracking=false] Start Tracking right after\n * instantiation.\n * @property {PositionOptions} [trackingOptions] Tracking options.\n * See http://www.w3.org/TR/geolocation-API/#position_options_interface.\n * @property {import(\"./proj.js\").ProjectionLike} [projection] The projection the position\n * is reported in.\n */\n\n\n/**\n * @classdesc\n * Helper class for providing HTML5 Geolocation capabilities.\n * The [Geolocation API](http://www.w3.org/TR/geolocation-API/)\n * is used to locate a user's position.\n *\n * To get notified of position changes, register a listener for the generic\n * `change` event on your instance of {@link module:ol/Geolocation~Geolocation}.\n *\n * Example:\n *\n *     var geolocation = new Geolocation({\n *       // take the projection to use from the map's view\n *       projection: view.getProjection()\n *     });\n *     // listen to changes in position\n *     geolocation.on('change', function(evt) {\n *       window.console.log(geolocation.getPosition());\n *     });\n *\n * @fires error\n * @api\n */\nclass Geolocation extends BaseObject {\n\n  /**\n   * @param {Options=} opt_options Options.\n   */\n  constructor(opt_options) {\n\n    super();\n\n    const options = opt_options || {};\n\n    /**\n     * The unprojected (EPSG:4326) device position.\n     * @private\n     * @type {import(\"./coordinate.js\").Coordinate}\n     */\n    this.position_ = null;\n\n    /**\n     * @private\n     * @type {import(\"./proj.js\").TransformFunction}\n     */\n    this.transform_ = identityTransform;\n\n    /**\n     * @private\n     * @type {number|undefined}\n     */\n    this.watchId_ = undefined;\n\n    listen(\n      this, getChangeEventType(Property.PROJECTION),\n      this.handleProjectionChanged_, this);\n    listen(\n      this, getChangeEventType(Property.TRACKING),\n      this.handleTrackingChanged_, this);\n\n    if (options.projection !== undefined) {\n      this.setProjection(options.projection);\n    }\n    if (options.trackingOptions !== undefined) {\n      this.setTrackingOptions(options.trackingOptions);\n    }\n\n    this.setTracking(options.tracking !== undefined ? options.tracking : false);\n\n  }\n\n  /**\n   * @inheritDoc\n   */\n  disposeInternal() {\n    this.setTracking(false);\n    super.disposeInternal();\n  }\n\n  /**\n   * @private\n   */\n  handleProjectionChanged_() {\n    const projection = this.getProjection();\n    if (projection) {\n      this.transform_ = getTransformFromProjections(\n        getProjection('EPSG:4326'), projection);\n      if (this.position_) {\n        this.set(Property.POSITION, this.transform_(this.position_));\n      }\n    }\n  }\n\n  /**\n   * @private\n   */\n  handleTrackingChanged_() {\n    if (GEOLOCATION) {\n      const tracking = this.getTracking();\n      if (tracking && this.watchId_ === undefined) {\n        this.watchId_ = navigator.geolocation.watchPosition(\n          this.positionChange_.bind(this),\n          this.positionError_.bind(this),\n          this.getTrackingOptions());\n      } else if (!tracking && this.watchId_ !== undefined) {\n        navigator.geolocation.clearWatch(this.watchId_);\n        this.watchId_ = undefined;\n      }\n    }\n  }\n\n  /**\n   * @private\n   * @param {Position} position position event.\n   */\n  positionChange_(position) {\n    const coords = position.coords;\n    this.set(Property.ACCURACY, coords.accuracy);\n    this.set(Property.ALTITUDE,\n      coords.altitude === null ? undefined : coords.altitude);\n    this.set(Property.ALTITUDE_ACCURACY,\n      coords.altitudeAccuracy === null ?\n        undefined : coords.altitudeAccuracy);\n    this.set(Property.HEADING, coords.heading === null ?\n      undefined : toRadians(coords.heading));\n    if (!this.position_) {\n      this.position_ = [coords.longitude, coords.latitude];\n    } else {\n      this.position_[0] = coords.longitude;\n      this.position_[1] = coords.latitude;\n    }\n    const projectedPosition = this.transform_(this.position_);\n    this.set(Property.POSITION, projectedPosition);\n    this.set(Property.SPEED,\n      coords.speed === null ? undefined : coords.speed);\n    const geometry = circularPolygon(this.position_, coords.accuracy);\n    geometry.applyTransform(this.transform_);\n    this.set(Property.ACCURACY_GEOMETRY, geometry);\n    this.changed();\n  }\n\n  /**\n   * Triggered when the Geolocation returns an error.\n   * @event error\n   * @api\n   */\n\n  /**\n   * @private\n   * @param {PositionError} error error object.\n   */\n  positionError_(error) {\n    this.setTracking(false);\n    this.dispatchEvent(new GeolocationError(error));\n  }\n\n  /**\n   * Get the accuracy of the position in meters.\n   * @return {number|undefined} The accuracy of the position measurement in\n   *     meters.\n   * @observable\n   * @api\n   */\n  getAccuracy() {\n    return /** @type {number|undefined} */ (this.get(Property.ACCURACY));\n  }\n\n  /**\n   * Get a geometry of the position accuracy.\n   * @return {?import(\"./geom/Polygon.js\").default} A geometry of the position accuracy.\n   * @observable\n   * @api\n   */\n  getAccuracyGeometry() {\n    return (\n      /** @type {?import(\"./geom/Polygon.js\").default} */ (this.get(Property.ACCURACY_GEOMETRY) || null)\n    );\n  }\n\n  /**\n   * Get the altitude associated with the position.\n   * @return {number|undefined} The altitude of the position in meters above mean\n   *     sea level.\n   * @observable\n   * @api\n   */\n  getAltitude() {\n    return /** @type {number|undefined} */ (this.get(Property.ALTITUDE));\n  }\n\n  /**\n   * Get the altitude accuracy of the position.\n   * @return {number|undefined} The accuracy of the altitude measurement in\n   *     meters.\n   * @observable\n   * @api\n   */\n  getAltitudeAccuracy() {\n    return /** @type {number|undefined} */ (this.get(Property.ALTITUDE_ACCURACY));\n  }\n\n  /**\n   * Get the heading as radians clockwise from North.\n   * Note: depending on the browser, the heading is only defined if the `enableHighAccuracy`\n   * is set to `true` in the tracking options.\n   * @return {number|undefined} The heading of the device in radians from north.\n   * @observable\n   * @api\n   */\n  getHeading() {\n    return /** @type {number|undefined} */ (this.get(Property.HEADING));\n  }\n\n  /**\n   * Get the position of the device.\n   * @return {import(\"./coordinate.js\").Coordinate|undefined} The current position of the device reported\n   *     in the current projection.\n   * @observable\n   * @api\n   */\n  getPosition() {\n    return (\n      /** @type {import(\"./coordinate.js\").Coordinate|undefined} */ (this.get(Property.POSITION))\n    );\n  }\n\n  /**\n   * Get the projection associated with the position.\n   * @return {import(\"./proj/Projection.js\").default|undefined} The projection the position is\n   *     reported in.\n   * @observable\n   * @api\n   */\n  getProjection() {\n    return (\n      /** @type {import(\"./proj/Projection.js\").default|undefined} */ (this.get(Property.PROJECTION))\n    );\n  }\n\n  /**\n   * Get the speed in meters per second.\n   * @return {number|undefined} The instantaneous speed of the device in meters\n   *     per second.\n   * @observable\n   * @api\n   */\n  getSpeed() {\n    return /** @type {number|undefined} */ (this.get(Property.SPEED));\n  }\n\n  /**\n   * Determine if the device location is being tracked.\n   * @return {boolean} The device location is being tracked.\n   * @observable\n   * @api\n   */\n  getTracking() {\n    return /** @type {boolean} */ (this.get(Property.TRACKING));\n  }\n\n  /**\n   * Get the tracking options.\n   * See http://www.w3.org/TR/geolocation-API/#position-options.\n   * @return {PositionOptions|undefined} PositionOptions as defined by\n   *     the [HTML5 Geolocation spec\n   *     ](http://www.w3.org/TR/geolocation-API/#position_options_interface).\n   * @observable\n   * @api\n   */\n  getTrackingOptions() {\n    return /** @type {PositionOptions|undefined} */ (this.get(Property.TRACKING_OPTIONS));\n  }\n\n  /**\n   * Set the projection to use for transforming the coordinates.\n   * @param {import(\"./proj.js\").ProjectionLike} projection The projection the position is\n   *     reported in.\n   * @observable\n   * @api\n   */\n  setProjection(projection) {\n    this.set(Property.PROJECTION, getProjection(projection));\n  }\n\n  /**\n   * Enable or disable tracking.\n   * @param {boolean} tracking Enable tracking.\n   * @observable\n   * @api\n   */\n  setTracking(tracking) {\n    this.set(Property.TRACKING, tracking);\n  }\n\n  /**\n   * Set the tracking options.\n   * See http://www.w3.org/TR/geolocation-API/#position-options.\n   * @param {PositionOptions} options PositionOptions as defined by the\n   *     [HTML5 Geolocation spec\n   *     ](http://www.w3.org/TR/geolocation-API/#position_options_interface).\n   * @observable\n   * @api\n   */\n  setTrackingOptions(options) {\n    this.set(Property.TRACKING_OPTIONS, options);\n  }\n}\n\n\nexport default Geolocation;\n"]},"metadata":{},"sourceType":"module"}