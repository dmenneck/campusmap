{"ast":null,"code":"'use strict';\n\nvar StringReader = require('./stringReader');\n\nvar utils = require('./utils');\n\nvar CompressedObject = require('./compressedObject');\n\nvar jszipProto = require('./object');\n\nvar support = require('./support');\n\nvar MADE_BY_DOS = 0x00;\nvar MADE_BY_UNIX = 0x03; // class ZipEntry {{{\n\n/**\n * An entry in the zip file.\n * @constructor\n * @param {Object} options Options of the current file.\n * @param {Object} loadOptions Options for loading the stream.\n */\n\nfunction ZipEntry(options, loadOptions) {\n  this.options = options;\n  this.loadOptions = loadOptions;\n}\n\nZipEntry.prototype = {\n  /**\n   * say if the file is encrypted.\n   * @return {boolean} true if the file is encrypted, false otherwise.\n   */\n  isEncrypted: function () {\n    // bit 1 is set\n    return (this.bitFlag & 0x0001) === 0x0001;\n  },\n\n  /**\n   * say if the file has utf-8 filename/comment.\n   * @return {boolean} true if the filename/comment is in utf-8, false otherwise.\n   */\n  useUTF8: function () {\n    // bit 11 is set\n    return (this.bitFlag & 0x0800) === 0x0800;\n  },\n\n  /**\n   * Prepare the function used to generate the compressed content from this ZipFile.\n   * @param {DataReader} reader the reader to use.\n   * @param {number} from the offset from where we should read the data.\n   * @param {number} length the length of the data to read.\n   * @return {Function} the callback to get the compressed content (the type depends of the DataReader class).\n   */\n  prepareCompressedContent: function (reader, from, length) {\n    return function () {\n      var previousIndex = reader.index;\n      reader.setIndex(from);\n      var compressedFileData = reader.readData(length);\n      reader.setIndex(previousIndex);\n      return compressedFileData;\n    };\n  },\n\n  /**\n   * Prepare the function used to generate the uncompressed content from this ZipFile.\n   * @param {DataReader} reader the reader to use.\n   * @param {number} from the offset from where we should read the data.\n   * @param {number} length the length of the data to read.\n   * @param {JSZip.compression} compression the compression used on this file.\n   * @param {number} uncompressedSize the uncompressed size to expect.\n   * @return {Function} the callback to get the uncompressed content (the type depends of the DataReader class).\n   */\n  prepareContent: function (reader, from, length, compression, uncompressedSize) {\n    return function () {\n      var compressedFileData = utils.transformTo(compression.uncompressInputType, this.getCompressedContent());\n      var uncompressedFileData = compression.uncompress(compressedFileData);\n\n      if (uncompressedFileData.length !== uncompressedSize) {\n        throw new Error(\"Bug : uncompressed data size mismatch\");\n      }\n\n      return uncompressedFileData;\n    };\n  },\n\n  /**\n   * Read the local part of a zip file and add the info in this object.\n   * @param {DataReader} reader the reader to use.\n   */\n  readLocalPart: function (reader) {\n    var compression, localExtraFieldsLength; // we already know everything from the central dir !\n    // If the central dir data are false, we are doomed.\n    // On the bright side, the local part is scary  : zip64, data descriptors, both, etc.\n    // The less data we get here, the more reliable this should be.\n    // Let's skip the whole header and dash to the data !\n\n    reader.skip(22); // in some zip created on windows, the filename stored in the central dir contains \\ instead of /.\n    // Strangely, the filename here is OK.\n    // I would love to treat these zip files as corrupted (see http://www.info-zip.org/FAQ.html#backslashes\n    // or APPNOTE#4.4.17.1, \"All slashes MUST be forward slashes '/'\") but there are a lot of bad zip generators...\n    // Search \"unzip mismatching \"local\" filename continuing with \"central\" filename version\" on\n    // the internet.\n    //\n    // I think I see the logic here : the central directory is used to display\n    // content and the local directory is used to extract the files. Mixing / and \\\n    // may be used to display \\ to windows users and use / when extracting the files.\n    // Unfortunately, this lead also to some issues : http://seclists.org/fulldisclosure/2009/Sep/394\n\n    this.fileNameLength = reader.readInt(2);\n    localExtraFieldsLength = reader.readInt(2); // can't be sure this will be the same as the central dir\n\n    this.fileName = reader.readData(this.fileNameLength);\n    reader.skip(localExtraFieldsLength);\n\n    if (this.compressedSize == -1 || this.uncompressedSize == -1) {\n      throw new Error(\"Bug or corrupted zip : didn't get enough informations from the central directory \" + \"(compressedSize == -1 || uncompressedSize == -1)\");\n    }\n\n    compression = utils.findCompression(this.compressionMethod);\n\n    if (compression === null) {\n      // no compression found\n      throw new Error(\"Corrupted zip : compression \" + utils.pretty(this.compressionMethod) + \" unknown (inner file : \" + utils.transformTo(\"string\", this.fileName) + \")\");\n    }\n\n    this.decompressed = new CompressedObject();\n    this.decompressed.compressedSize = this.compressedSize;\n    this.decompressed.uncompressedSize = this.uncompressedSize;\n    this.decompressed.crc32 = this.crc32;\n    this.decompressed.compressionMethod = this.compressionMethod;\n    this.decompressed.getCompressedContent = this.prepareCompressedContent(reader, reader.index, this.compressedSize, compression);\n    this.decompressed.getContent = this.prepareContent(reader, reader.index, this.compressedSize, compression, this.uncompressedSize); // we need to compute the crc32...\n\n    if (this.loadOptions.checkCRC32) {\n      this.decompressed = utils.transformTo(\"string\", this.decompressed.getContent());\n\n      if (jszipProto.crc32(this.decompressed) !== this.crc32) {\n        throw new Error(\"Corrupted zip : CRC32 mismatch\");\n      }\n    }\n  },\n\n  /**\n   * Read the central part of a zip file and add the info in this object.\n   * @param {DataReader} reader the reader to use.\n   */\n  readCentralPart: function (reader) {\n    this.versionMadeBy = reader.readInt(2);\n    this.versionNeeded = reader.readInt(2);\n    this.bitFlag = reader.readInt(2);\n    this.compressionMethod = reader.readString(2);\n    this.date = reader.readDate();\n    this.crc32 = reader.readInt(4);\n    this.compressedSize = reader.readInt(4);\n    this.uncompressedSize = reader.readInt(4);\n    this.fileNameLength = reader.readInt(2);\n    this.extraFieldsLength = reader.readInt(2);\n    this.fileCommentLength = reader.readInt(2);\n    this.diskNumberStart = reader.readInt(2);\n    this.internalFileAttributes = reader.readInt(2);\n    this.externalFileAttributes = reader.readInt(4);\n    this.localHeaderOffset = reader.readInt(4);\n\n    if (this.isEncrypted()) {\n      throw new Error(\"Encrypted zip are not supported\");\n    }\n\n    this.fileName = reader.readData(this.fileNameLength);\n    this.readExtraFields(reader);\n    this.parseZIP64ExtraField(reader);\n    this.fileComment = reader.readData(this.fileCommentLength);\n  },\n\n  /**\n   * Parse the external file attributes and get the unix/dos permissions.\n   */\n  processAttributes: function () {\n    this.unixPermissions = null;\n    this.dosPermissions = null;\n    var madeBy = this.versionMadeBy >> 8; // Check if we have the DOS directory flag set.\n    // We look for it in the DOS and UNIX permissions\n    // but some unknown platform could set it as a compatibility flag.\n\n    this.dir = this.externalFileAttributes & 0x0010 ? true : false;\n\n    if (madeBy === MADE_BY_DOS) {\n      // first 6 bits (0 to 5)\n      this.dosPermissions = this.externalFileAttributes & 0x3F;\n    }\n\n    if (madeBy === MADE_BY_UNIX) {\n      this.unixPermissions = this.externalFileAttributes >> 16 & 0xFFFF; // the octal permissions are in (this.unixPermissions & 0x01FF).toString(8);\n    } // fail safe : if the name ends with a / it probably means a folder\n\n\n    if (!this.dir && this.fileNameStr.slice(-1) === '/') {\n      this.dir = true;\n    }\n  },\n\n  /**\n   * Parse the ZIP64 extra field and merge the info in the current ZipEntry.\n   * @param {DataReader} reader the reader to use.\n   */\n  parseZIP64ExtraField: function (reader) {\n    if (!this.extraFields[0x0001]) {\n      return;\n    } // should be something, preparing the extra reader\n\n\n    var extraReader = new StringReader(this.extraFields[0x0001].value); // I really hope that these 64bits integer can fit in 32 bits integer, because js\n    // won't let us have more.\n\n    if (this.uncompressedSize === utils.MAX_VALUE_32BITS) {\n      this.uncompressedSize = extraReader.readInt(8);\n    }\n\n    if (this.compressedSize === utils.MAX_VALUE_32BITS) {\n      this.compressedSize = extraReader.readInt(8);\n    }\n\n    if (this.localHeaderOffset === utils.MAX_VALUE_32BITS) {\n      this.localHeaderOffset = extraReader.readInt(8);\n    }\n\n    if (this.diskNumberStart === utils.MAX_VALUE_32BITS) {\n      this.diskNumberStart = extraReader.readInt(4);\n    }\n  },\n\n  /**\n   * Read the central part of a zip file and add the info in this object.\n   * @param {DataReader} reader the reader to use.\n   */\n  readExtraFields: function (reader) {\n    var start = reader.index,\n        extraFieldId,\n        extraFieldLength,\n        extraFieldValue;\n    this.extraFields = this.extraFields || {};\n\n    while (reader.index < start + this.extraFieldsLength) {\n      extraFieldId = reader.readInt(2);\n      extraFieldLength = reader.readInt(2);\n      extraFieldValue = reader.readString(extraFieldLength);\n      this.extraFields[extraFieldId] = {\n        id: extraFieldId,\n        length: extraFieldLength,\n        value: extraFieldValue\n      };\n    }\n  },\n\n  /**\n   * Apply an UTF8 transformation if needed.\n   */\n  handleUTF8: function () {\n    var decodeParamType = support.uint8array ? \"uint8array\" : \"array\";\n\n    if (this.useUTF8()) {\n      this.fileNameStr = jszipProto.utf8decode(this.fileName);\n      this.fileCommentStr = jszipProto.utf8decode(this.fileComment);\n    } else {\n      var upath = this.findExtraFieldUnicodePath();\n\n      if (upath !== null) {\n        this.fileNameStr = upath;\n      } else {\n        var fileNameByteArray = utils.transformTo(decodeParamType, this.fileName);\n        this.fileNameStr = this.loadOptions.decodeFileName(fileNameByteArray);\n      }\n\n      var ucomment = this.findExtraFieldUnicodeComment();\n\n      if (ucomment !== null) {\n        this.fileCommentStr = ucomment;\n      } else {\n        var commentByteArray = utils.transformTo(decodeParamType, this.fileComment);\n        this.fileCommentStr = this.loadOptions.decodeFileName(commentByteArray);\n      }\n    }\n  },\n\n  /**\n   * Find the unicode path declared in the extra field, if any.\n   * @return {String} the unicode path, null otherwise.\n   */\n  findExtraFieldUnicodePath: function () {\n    var upathField = this.extraFields[0x7075];\n\n    if (upathField) {\n      var extraReader = new StringReader(upathField.value); // wrong version\n\n      if (extraReader.readInt(1) !== 1) {\n        return null;\n      } // the crc of the filename changed, this field is out of date.\n\n\n      if (jszipProto.crc32(this.fileName) !== extraReader.readInt(4)) {\n        return null;\n      }\n\n      return jszipProto.utf8decode(extraReader.readString(upathField.length - 5));\n    }\n\n    return null;\n  },\n\n  /**\n   * Find the unicode comment declared in the extra field, if any.\n   * @return {String} the unicode comment, null otherwise.\n   */\n  findExtraFieldUnicodeComment: function () {\n    var ucommentField = this.extraFields[0x6375];\n\n    if (ucommentField) {\n      var extraReader = new StringReader(ucommentField.value); // wrong version\n\n      if (extraReader.readInt(1) !== 1) {\n        return null;\n      } // the crc of the comment changed, this field is out of date.\n\n\n      if (jszipProto.crc32(this.fileComment) !== extraReader.readInt(4)) {\n        return null;\n      }\n\n      return jszipProto.utf8decode(extraReader.readString(ucommentField.length - 5));\n    }\n\n    return null;\n  }\n};\nmodule.exports = ZipEntry;","map":{"version":3,"sources":["/Users/dirkmennecke77/Desktop/Lageplan/node_modules/jszip/lib/zipEntry.js"],"names":["StringReader","require","utils","CompressedObject","jszipProto","support","MADE_BY_DOS","MADE_BY_UNIX","ZipEntry","options","loadOptions","prototype","isEncrypted","bitFlag","useUTF8","prepareCompressedContent","reader","from","length","previousIndex","index","setIndex","compressedFileData","readData","prepareContent","compression","uncompressedSize","transformTo","uncompressInputType","getCompressedContent","uncompressedFileData","uncompress","Error","readLocalPart","localExtraFieldsLength","skip","fileNameLength","readInt","fileName","compressedSize","findCompression","compressionMethod","pretty","decompressed","crc32","getContent","checkCRC32","readCentralPart","versionMadeBy","versionNeeded","readString","date","readDate","extraFieldsLength","fileCommentLength","diskNumberStart","internalFileAttributes","externalFileAttributes","localHeaderOffset","readExtraFields","parseZIP64ExtraField","fileComment","processAttributes","unixPermissions","dosPermissions","madeBy","dir","fileNameStr","slice","extraFields","extraReader","value","MAX_VALUE_32BITS","start","extraFieldId","extraFieldLength","extraFieldValue","id","handleUTF8","decodeParamType","uint8array","utf8decode","fileCommentStr","upath","findExtraFieldUnicodePath","fileNameByteArray","decodeFileName","ucomment","findExtraFieldUnicodeComment","commentByteArray","upathField","ucommentField","module","exports"],"mappings":"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","sourcesContent":["'use strict';\nvar StringReader = require('./stringReader');\nvar utils = require('./utils');\nvar CompressedObject = require('./compressedObject');\nvar jszipProto = require('./object');\nvar support = require('./support');\n\nvar MADE_BY_DOS = 0x00;\nvar MADE_BY_UNIX = 0x03;\n\n// class ZipEntry {{{\n/**\n * An entry in the zip file.\n * @constructor\n * @param {Object} options Options of the current file.\n * @param {Object} loadOptions Options for loading the stream.\n */\nfunction ZipEntry(options, loadOptions) {\n    this.options = options;\n    this.loadOptions = loadOptions;\n}\nZipEntry.prototype = {\n    /**\n     * say if the file is encrypted.\n     * @return {boolean} true if the file is encrypted, false otherwise.\n     */\n    isEncrypted: function() {\n        // bit 1 is set\n        return (this.bitFlag & 0x0001) === 0x0001;\n    },\n    /**\n     * say if the file has utf-8 filename/comment.\n     * @return {boolean} true if the filename/comment is in utf-8, false otherwise.\n     */\n    useUTF8: function() {\n        // bit 11 is set\n        return (this.bitFlag & 0x0800) === 0x0800;\n    },\n    /**\n     * Prepare the function used to generate the compressed content from this ZipFile.\n     * @param {DataReader} reader the reader to use.\n     * @param {number} from the offset from where we should read the data.\n     * @param {number} length the length of the data to read.\n     * @return {Function} the callback to get the compressed content (the type depends of the DataReader class).\n     */\n    prepareCompressedContent: function(reader, from, length) {\n        return function() {\n            var previousIndex = reader.index;\n            reader.setIndex(from);\n            var compressedFileData = reader.readData(length);\n            reader.setIndex(previousIndex);\n\n            return compressedFileData;\n        };\n    },\n    /**\n     * Prepare the function used to generate the uncompressed content from this ZipFile.\n     * @param {DataReader} reader the reader to use.\n     * @param {number} from the offset from where we should read the data.\n     * @param {number} length the length of the data to read.\n     * @param {JSZip.compression} compression the compression used on this file.\n     * @param {number} uncompressedSize the uncompressed size to expect.\n     * @return {Function} the callback to get the uncompressed content (the type depends of the DataReader class).\n     */\n    prepareContent: function(reader, from, length, compression, uncompressedSize) {\n        return function() {\n\n            var compressedFileData = utils.transformTo(compression.uncompressInputType, this.getCompressedContent());\n            var uncompressedFileData = compression.uncompress(compressedFileData);\n\n            if (uncompressedFileData.length !== uncompressedSize) {\n                throw new Error(\"Bug : uncompressed data size mismatch\");\n            }\n\n            return uncompressedFileData;\n        };\n    },\n    /**\n     * Read the local part of a zip file and add the info in this object.\n     * @param {DataReader} reader the reader to use.\n     */\n    readLocalPart: function(reader) {\n        var compression, localExtraFieldsLength;\n\n        // we already know everything from the central dir !\n        // If the central dir data are false, we are doomed.\n        // On the bright side, the local part is scary  : zip64, data descriptors, both, etc.\n        // The less data we get here, the more reliable this should be.\n        // Let's skip the whole header and dash to the data !\n        reader.skip(22);\n        // in some zip created on windows, the filename stored in the central dir contains \\ instead of /.\n        // Strangely, the filename here is OK.\n        // I would love to treat these zip files as corrupted (see http://www.info-zip.org/FAQ.html#backslashes\n        // or APPNOTE#4.4.17.1, \"All slashes MUST be forward slashes '/'\") but there are a lot of bad zip generators...\n        // Search \"unzip mismatching \"local\" filename continuing with \"central\" filename version\" on\n        // the internet.\n        //\n        // I think I see the logic here : the central directory is used to display\n        // content and the local directory is used to extract the files. Mixing / and \\\n        // may be used to display \\ to windows users and use / when extracting the files.\n        // Unfortunately, this lead also to some issues : http://seclists.org/fulldisclosure/2009/Sep/394\n        this.fileNameLength = reader.readInt(2);\n        localExtraFieldsLength = reader.readInt(2); // can't be sure this will be the same as the central dir\n        this.fileName = reader.readData(this.fileNameLength);\n        reader.skip(localExtraFieldsLength);\n\n        if (this.compressedSize == -1 || this.uncompressedSize == -1) {\n            throw new Error(\"Bug or corrupted zip : didn't get enough informations from the central directory \" + \"(compressedSize == -1 || uncompressedSize == -1)\");\n        }\n\n        compression = utils.findCompression(this.compressionMethod);\n        if (compression === null) { // no compression found\n            throw new Error(\"Corrupted zip : compression \" + utils.pretty(this.compressionMethod) + \" unknown (inner file : \" +  utils.transformTo(\"string\", this.fileName) + \")\");\n        }\n        this.decompressed = new CompressedObject();\n        this.decompressed.compressedSize = this.compressedSize;\n        this.decompressed.uncompressedSize = this.uncompressedSize;\n        this.decompressed.crc32 = this.crc32;\n        this.decompressed.compressionMethod = this.compressionMethod;\n        this.decompressed.getCompressedContent = this.prepareCompressedContent(reader, reader.index, this.compressedSize, compression);\n        this.decompressed.getContent = this.prepareContent(reader, reader.index, this.compressedSize, compression, this.uncompressedSize);\n\n        // we need to compute the crc32...\n        if (this.loadOptions.checkCRC32) {\n            this.decompressed = utils.transformTo(\"string\", this.decompressed.getContent());\n            if (jszipProto.crc32(this.decompressed) !== this.crc32) {\n                throw new Error(\"Corrupted zip : CRC32 mismatch\");\n            }\n        }\n    },\n\n    /**\n     * Read the central part of a zip file and add the info in this object.\n     * @param {DataReader} reader the reader to use.\n     */\n    readCentralPart: function(reader) {\n        this.versionMadeBy = reader.readInt(2);\n        this.versionNeeded = reader.readInt(2);\n        this.bitFlag = reader.readInt(2);\n        this.compressionMethod = reader.readString(2);\n        this.date = reader.readDate();\n        this.crc32 = reader.readInt(4);\n        this.compressedSize = reader.readInt(4);\n        this.uncompressedSize = reader.readInt(4);\n        this.fileNameLength = reader.readInt(2);\n        this.extraFieldsLength = reader.readInt(2);\n        this.fileCommentLength = reader.readInt(2);\n        this.diskNumberStart = reader.readInt(2);\n        this.internalFileAttributes = reader.readInt(2);\n        this.externalFileAttributes = reader.readInt(4);\n        this.localHeaderOffset = reader.readInt(4);\n\n        if (this.isEncrypted()) {\n            throw new Error(\"Encrypted zip are not supported\");\n        }\n\n        this.fileName = reader.readData(this.fileNameLength);\n        this.readExtraFields(reader);\n        this.parseZIP64ExtraField(reader);\n        this.fileComment = reader.readData(this.fileCommentLength);\n    },\n\n    /**\n     * Parse the external file attributes and get the unix/dos permissions.\n     */\n    processAttributes: function () {\n        this.unixPermissions = null;\n        this.dosPermissions = null;\n        var madeBy = this.versionMadeBy >> 8;\n\n        // Check if we have the DOS directory flag set.\n        // We look for it in the DOS and UNIX permissions\n        // but some unknown platform could set it as a compatibility flag.\n        this.dir = this.externalFileAttributes & 0x0010 ? true : false;\n\n        if(madeBy === MADE_BY_DOS) {\n            // first 6 bits (0 to 5)\n            this.dosPermissions = this.externalFileAttributes & 0x3F;\n        }\n\n        if(madeBy === MADE_BY_UNIX) {\n            this.unixPermissions = (this.externalFileAttributes >> 16) & 0xFFFF;\n            // the octal permissions are in (this.unixPermissions & 0x01FF).toString(8);\n        }\n\n        // fail safe : if the name ends with a / it probably means a folder\n        if (!this.dir && this.fileNameStr.slice(-1) === '/') {\n            this.dir = true;\n        }\n    },\n\n    /**\n     * Parse the ZIP64 extra field and merge the info in the current ZipEntry.\n     * @param {DataReader} reader the reader to use.\n     */\n    parseZIP64ExtraField: function(reader) {\n\n        if (!this.extraFields[0x0001]) {\n            return;\n        }\n\n        // should be something, preparing the extra reader\n        var extraReader = new StringReader(this.extraFields[0x0001].value);\n\n        // I really hope that these 64bits integer can fit in 32 bits integer, because js\n        // won't let us have more.\n        if (this.uncompressedSize === utils.MAX_VALUE_32BITS) {\n            this.uncompressedSize = extraReader.readInt(8);\n        }\n        if (this.compressedSize === utils.MAX_VALUE_32BITS) {\n            this.compressedSize = extraReader.readInt(8);\n        }\n        if (this.localHeaderOffset === utils.MAX_VALUE_32BITS) {\n            this.localHeaderOffset = extraReader.readInt(8);\n        }\n        if (this.diskNumberStart === utils.MAX_VALUE_32BITS) {\n            this.diskNumberStart = extraReader.readInt(4);\n        }\n    },\n    /**\n     * Read the central part of a zip file and add the info in this object.\n     * @param {DataReader} reader the reader to use.\n     */\n    readExtraFields: function(reader) {\n        var start = reader.index,\n            extraFieldId,\n            extraFieldLength,\n            extraFieldValue;\n\n        this.extraFields = this.extraFields || {};\n\n        while (reader.index < start + this.extraFieldsLength) {\n            extraFieldId = reader.readInt(2);\n            extraFieldLength = reader.readInt(2);\n            extraFieldValue = reader.readString(extraFieldLength);\n\n            this.extraFields[extraFieldId] = {\n                id: extraFieldId,\n                length: extraFieldLength,\n                value: extraFieldValue\n            };\n        }\n    },\n    /**\n     * Apply an UTF8 transformation if needed.\n     */\n    handleUTF8: function() {\n        var decodeParamType = support.uint8array ? \"uint8array\" : \"array\";\n        if (this.useUTF8()) {\n            this.fileNameStr = jszipProto.utf8decode(this.fileName);\n            this.fileCommentStr = jszipProto.utf8decode(this.fileComment);\n        } else {\n            var upath = this.findExtraFieldUnicodePath();\n            if (upath !== null) {\n                this.fileNameStr = upath;\n            } else {\n                var fileNameByteArray =  utils.transformTo(decodeParamType, this.fileName);\n                this.fileNameStr = this.loadOptions.decodeFileName(fileNameByteArray);\n            }\n\n            var ucomment = this.findExtraFieldUnicodeComment();\n            if (ucomment !== null) {\n                this.fileCommentStr = ucomment;\n            } else {\n                var commentByteArray =  utils.transformTo(decodeParamType, this.fileComment);\n                this.fileCommentStr = this.loadOptions.decodeFileName(commentByteArray);\n            }\n        }\n    },\n\n    /**\n     * Find the unicode path declared in the extra field, if any.\n     * @return {String} the unicode path, null otherwise.\n     */\n    findExtraFieldUnicodePath: function() {\n        var upathField = this.extraFields[0x7075];\n        if (upathField) {\n            var extraReader = new StringReader(upathField.value);\n\n            // wrong version\n            if (extraReader.readInt(1) !== 1) {\n                return null;\n            }\n\n            // the crc of the filename changed, this field is out of date.\n            if (jszipProto.crc32(this.fileName) !== extraReader.readInt(4)) {\n                return null;\n            }\n\n            return jszipProto.utf8decode(extraReader.readString(upathField.length - 5));\n        }\n        return null;\n    },\n\n    /**\n     * Find the unicode comment declared in the extra field, if any.\n     * @return {String} the unicode comment, null otherwise.\n     */\n    findExtraFieldUnicodeComment: function() {\n        var ucommentField = this.extraFields[0x6375];\n        if (ucommentField) {\n            var extraReader = new StringReader(ucommentField.value);\n\n            // wrong version\n            if (extraReader.readInt(1) !== 1) {\n                return null;\n            }\n\n            // the crc of the comment changed, this field is out of date.\n            if (jszipProto.crc32(this.fileComment) !== extraReader.readInt(4)) {\n                return null;\n            }\n\n            return jszipProto.utf8decode(extraReader.readString(ucommentField.length - 5));\n        }\n        return null;\n    }\n};\nmodule.exports = ZipEntry;\n"]},"metadata":{},"sourceType":"script"}