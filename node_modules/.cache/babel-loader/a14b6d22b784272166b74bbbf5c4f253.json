{"ast":null,"code":"/**\n * @module ol/Kinetic\n */\n\n/**\n * @classdesc\n * Implementation of inertial deceleration for map movement.\n *\n * @api\n */\nvar Kinetic = function Kinetic(decay, minVelocity, delay) {\n  /**\n   * @private\n   * @type {number}\n   */\n  this.decay_ = decay;\n  /**\n   * @private\n   * @type {number}\n   */\n\n  this.minVelocity_ = minVelocity;\n  /**\n   * @private\n   * @type {number}\n   */\n\n  this.delay_ = delay;\n  /**\n   * @private\n   * @type {Array<number>}\n   */\n\n  this.points_ = [];\n  /**\n   * @private\n   * @type {number}\n   */\n\n  this.angle_ = 0;\n  /**\n   * @private\n   * @type {number}\n   */\n\n  this.initialVelocity_ = 0;\n};\n/**\n * FIXME empty description for jsdoc\n */\n\n\nKinetic.prototype.begin = function begin() {\n  this.points_.length = 0;\n  this.angle_ = 0;\n  this.initialVelocity_ = 0;\n};\n/**\n * @param {number} x X.\n * @param {number} y Y.\n */\n\n\nKinetic.prototype.update = function update(x, y) {\n  this.points_.push(x, y, Date.now());\n};\n/**\n * @return {boolean} Whether we should do kinetic animation.\n */\n\n\nKinetic.prototype.end = function end() {\n  if (this.points_.length < 6) {\n    // at least 2 points are required (i.e. there must be at least 6 elements\n    // in the array)\n    return false;\n  }\n\n  var delay = Date.now() - this.delay_;\n  var lastIndex = this.points_.length - 3;\n\n  if (this.points_[lastIndex + 2] < delay) {\n    // the last tracked point is too old, which means that the user stopped\n    // panning before releasing the map\n    return false;\n  } // get the first point which still falls into the delay time\n\n\n  var firstIndex = lastIndex - 3;\n\n  while (firstIndex > 0 && this.points_[firstIndex + 2] > delay) {\n    firstIndex -= 3;\n  }\n\n  var duration = this.points_[lastIndex + 2] - this.points_[firstIndex + 2]; // we don't want a duration of 0 (divide by zero)\n  // we also make sure the user panned for a duration of at least one frame\n  // (1/60s) to compute sane displacement values\n\n  if (duration < 1000 / 60) {\n    return false;\n  }\n\n  var dx = this.points_[lastIndex] - this.points_[firstIndex];\n  var dy = this.points_[lastIndex + 1] - this.points_[firstIndex + 1];\n  this.angle_ = Math.atan2(dy, dx);\n  this.initialVelocity_ = Math.sqrt(dx * dx + dy * dy) / duration;\n  return this.initialVelocity_ > this.minVelocity_;\n};\n/**\n * @return {number} Total distance travelled (pixels).\n */\n\n\nKinetic.prototype.getDistance = function getDistance() {\n  return (this.minVelocity_ - this.initialVelocity_) / this.decay_;\n};\n/**\n * @return {number} Angle of the kinetic panning animation (radians).\n */\n\n\nKinetic.prototype.getAngle = function getAngle() {\n  return this.angle_;\n};\n\nexport default Kinetic;","map":{"version":3,"sources":["../../src/ol/Kinetic.js"],"names":["const","let"],"mappings":"AAAA;;;;;;;;;;AAUA,IAAM,OAAO,GAQX,SAAA,OAAA,CAAY,KAAZ,EAAmB,WAAnB,EAAgC,KAAhC,EAAuC;AAErC;;;;AAIA,OAAK,MAAL,GAAc,KAAd;AAEA;;;;;AAIA,OAAK,YAAL,GAAoB,WAApB;AAEA;;;;;AAIA,OAAK,MAAL,GAAc,KAAd;AAEA;;;;;AAIA,OAAK,OAAL,GAAe,EAAf;AAEA;;;;;AAIA,OAAK,MAAL,GAAc,CAAd;AAEA;;;;;AAIA,OAAK,gBAAL,GAAwB,CAAxB;AACF,CA7CF;AA+CE;;;;;AAGF,OAAA,CAAA,SAAA,CAAE,KAAF,GAAE,SAAA,KAAA,GAAQ;AACN,OAAK,OAAL,CAAa,MAAb,GAAsB,CAAtB;AACA,OAAK,MAAL,GAAc,CAAd;AACA,OAAK,gBAAL,GAAwB,CAAxB;AACF,CAJF;AAME;;;;;;AAIF,OAAA,CAAA,SAAA,CAAE,MAAF,GAAE,SAAA,MAAA,CAAO,CAAP,EAAU,CAAV,EAAa;AACX,OAAK,OAAL,CAAa,IAAb,CAAkB,CAAlB,EAAqB,CAArB,EAAwB,IAAI,CAAC,GAAL,EAAxB;AACF,CAFF;AAIE;;;;;AAGF,OAAA,CAAA,SAAA,CAAE,GAAF,GAAE,SAAA,GAAA,GAAM;AACJ,MAAI,KAAK,OAAL,CAAa,MAAb,GAAsB,CAA1B,EAA6B;AAC3B;AACA;AACA,WAAO,KAAP;AACD;;AACDA,MAAM,KAAK,GAAG,IAAI,CAAC,GAAL,KAAa,KAAK,MAAhCA;AACAA,MAAM,SAAS,GAAG,KAAK,OAAL,CAAa,MAAb,GAAsB,CAAxCA;;AACA,MAAI,KAAK,OAAL,CAAa,SAAS,GAAG,CAAzB,IAA8B,KAAlC,EAAyC;AACvC;AACA;AACA,WAAO,KAAP;AACD,GAZG,CAcJ;;;AACAC,MAAI,UAAU,GAAG,SAAS,GAAG,CAA7BA;;AACA,SAAO,UAAU,GAAG,CAAb,IAAkB,KAAK,OAAL,CAAa,UAAU,GAAG,CAA1B,IAA+B,KAAxD,EAA+D;AAC7D,IAAA,UAAU,IAAI,CAAd;AACD;;AAEDD,MAAM,QAAQ,GAAG,KAAK,OAAL,CAAa,SAAS,GAAG,CAAzB,IAA8B,KAAK,OAAL,CAAa,UAAU,GAAG,CAA1B,CAA/CA,CApBI,CAqBJ;AACA;AACA;;AACA,MAAI,QAAQ,GAAG,OAAO,EAAtB,EAA0B;AACxB,WAAO,KAAP;AACD;;AAEDA,MAAM,EAAE,GAAG,KAAK,OAAL,CAAa,SAAb,IAA0B,KAAK,OAAL,CAAa,UAAb,CAArCA;AACAA,MAAM,EAAE,GAAG,KAAK,OAAL,CAAa,SAAS,GAAG,CAAzB,IAA8B,KAAK,OAAL,CAAa,UAAU,GAAG,CAA1B,CAAzCA;AACA,OAAK,MAAL,GAAc,IAAI,CAAC,KAAL,CAAW,EAAX,EAAe,EAAf,CAAd;AACA,OAAK,gBAAL,GAAwB,IAAI,CAAC,IAAL,CAAU,EAAE,GAAG,EAAL,GAAU,EAAE,GAAG,EAAzB,IAA+B,QAAvD;AACA,SAAO,KAAK,gBAAL,GAAwB,KAAK,YAApC;AACF,CAjCF;AAmCE;;;;;AAGF,OAAA,CAAA,SAAA,CAAE,WAAF,GAAE,SAAA,WAAA,GAAc;AACZ,SAAO,CAAC,KAAK,YAAL,GAAoB,KAAK,gBAA1B,IAA8C,KAAK,MAA1D;AACF,CAFF;AAIE;;;;;AAGF,OAAA,CAAA,SAAA,CAAE,QAAF,GAAE,SAAA,QAAA,GAAW;AACT,SAAO,KAAK,MAAZ;AACD,CAFH;;AAKA,eAAe,OAAf","sourcesContent":["/**\n * @module ol/Kinetic\n */\n\n/**\n * @classdesc\n * Implementation of inertial deceleration for map movement.\n *\n * @api\n */\nclass Kinetic {\n\n  /**\n   * @param {number} decay Rate of decay (must be negative).\n   * @param {number} minVelocity Minimum velocity (pixels/millisecond).\n   * @param {number} delay Delay to consider to calculate the kinetic\n   *     initial values (milliseconds).\n   */\n  constructor(decay, minVelocity, delay) {\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.decay_ = decay;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.minVelocity_ = minVelocity;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.delay_ = delay;\n\n    /**\n     * @private\n     * @type {Array<number>}\n     */\n    this.points_ = [];\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.angle_ = 0;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.initialVelocity_ = 0;\n  }\n\n  /**\n   * FIXME empty description for jsdoc\n   */\n  begin() {\n    this.points_.length = 0;\n    this.angle_ = 0;\n    this.initialVelocity_ = 0;\n  }\n\n  /**\n   * @param {number} x X.\n   * @param {number} y Y.\n   */\n  update(x, y) {\n    this.points_.push(x, y, Date.now());\n  }\n\n  /**\n   * @return {boolean} Whether we should do kinetic animation.\n   */\n  end() {\n    if (this.points_.length < 6) {\n      // at least 2 points are required (i.e. there must be at least 6 elements\n      // in the array)\n      return false;\n    }\n    const delay = Date.now() - this.delay_;\n    const lastIndex = this.points_.length - 3;\n    if (this.points_[lastIndex + 2] < delay) {\n      // the last tracked point is too old, which means that the user stopped\n      // panning before releasing the map\n      return false;\n    }\n\n    // get the first point which still falls into the delay time\n    let firstIndex = lastIndex - 3;\n    while (firstIndex > 0 && this.points_[firstIndex + 2] > delay) {\n      firstIndex -= 3;\n    }\n\n    const duration = this.points_[lastIndex + 2] - this.points_[firstIndex + 2];\n    // we don't want a duration of 0 (divide by zero)\n    // we also make sure the user panned for a duration of at least one frame\n    // (1/60s) to compute sane displacement values\n    if (duration < 1000 / 60) {\n      return false;\n    }\n\n    const dx = this.points_[lastIndex] - this.points_[firstIndex];\n    const dy = this.points_[lastIndex + 1] - this.points_[firstIndex + 1];\n    this.angle_ = Math.atan2(dy, dx);\n    this.initialVelocity_ = Math.sqrt(dx * dx + dy * dy) / duration;\n    return this.initialVelocity_ > this.minVelocity_;\n  }\n\n  /**\n   * @return {number} Total distance travelled (pixels).\n   */\n  getDistance() {\n    return (this.minVelocity_ - this.initialVelocity_) / this.decay_;\n  }\n\n  /**\n   * @return {number} Angle of the kinetic panning animation (radians).\n   */\n  getAngle() {\n    return this.angle_;\n  }\n}\n\nexport default Kinetic;\n"]},"metadata":{},"sourceType":"module"}