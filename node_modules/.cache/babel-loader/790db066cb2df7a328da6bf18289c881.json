{"ast":null,"code":"/**\n * ag-grid-community - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components\n * @version v21.2.2\n * @link http://www.ag-grid.com/\n * @license MIT\n */\n\"use strict\";\n\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nvar __metadata = this && this.__metadata || function (k, v) {\n  if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar context_1 = require(\"../context/context\");\n\nvar column_1 = require(\"../entities/column\");\n\nvar gridOptionsWrapper_1 = require(\"../gridOptionsWrapper\");\n\nvar columnController_1 = require(\"./columnController\");\n\nvar columnFactory_1 = require(\"./columnFactory\");\n\nvar constants_1 = require(\"../constants\");\n\nvar utils_1 = require(\"../utils\");\n\nvar AutoGroupColService =\n/** @class */\nfunction () {\n  function AutoGroupColService() {}\n\n  AutoGroupColService_1 = AutoGroupColService;\n\n  AutoGroupColService.prototype.createAutoGroupColumns = function (rowGroupColumns) {\n    var _this = this;\n\n    var groupAutoColumns = [];\n    var doingTreeData = this.gridOptionsWrapper.isTreeData();\n    var doingMultiAutoColumn = this.gridOptionsWrapper.isGroupMultiAutoColumn();\n\n    if (doingTreeData && doingMultiAutoColumn) {\n      console.warn('ag-Grid: you cannot mix groupMultiAutoColumn with treeData, only one column can be used to display groups when doing tree data');\n      doingMultiAutoColumn = false;\n    } // if doing groupMultiAutoColumn, then we call the method multiple times, once\n    // for each column we are grouping by\n\n\n    if (doingMultiAutoColumn) {\n      rowGroupColumns.forEach(function (rowGroupCol, index) {\n        groupAutoColumns.push(_this.createOneAutoGroupColumn(rowGroupCol, index));\n      });\n    } else {\n      groupAutoColumns.push(this.createOneAutoGroupColumn());\n    }\n\n    return groupAutoColumns;\n  }; // rowGroupCol and index are missing if groupMultiAutoColumn=false\n\n\n  AutoGroupColService.prototype.createOneAutoGroupColumn = function (rowGroupCol, index) {\n    // if one provided by user, use it, otherwise create one\n    var defaultAutoColDef = this.generateDefaultColDef(rowGroupCol); // if doing multi, set the field\n\n    var colId;\n\n    if (rowGroupCol) {\n      colId = constants_1.Constants.GROUP_AUTO_COLUMN_ID + \"-\" + rowGroupCol.getId();\n    } else {\n      colId = AutoGroupColService_1.GROUP_AUTO_COLUMN_BUNDLE_ID;\n    }\n\n    var userAutoColDef = this.gridOptionsWrapper.getAutoGroupColumnDef();\n\n    utils_1._.mergeDeep(defaultAutoColDef, userAutoColDef);\n\n    defaultAutoColDef = this.columnFactory.mergeColDefs(defaultAutoColDef);\n    defaultAutoColDef.colId = colId; // For tree data the filter is always allowed\n\n    if (!this.gridOptionsWrapper.isTreeData()) {\n      // we would only allow filter if the user has provided field or value getter. otherwise the filter\n      // would not be able to work.\n      var noFieldOrValueGetter = utils_1._.missing(defaultAutoColDef.field) && utils_1._.missing(defaultAutoColDef.valueGetter) && utils_1._.missing(defaultAutoColDef.filterValueGetter);\n\n      if (noFieldOrValueGetter) {\n        defaultAutoColDef.filter = false;\n      }\n    } // if showing many cols, we don't want to show more than one with a checkbox for selection\n\n\n    if (index && index > 0) {\n      defaultAutoColDef.headerCheckboxSelection = false;\n    }\n\n    var newCol = new column_1.Column(defaultAutoColDef, null, colId, true);\n    this.context.wireBean(newCol);\n    return newCol;\n  };\n\n  AutoGroupColService.prototype.generateDefaultColDef = function (rowGroupCol) {\n    var userAutoColDef = this.gridOptionsWrapper.getAutoGroupColumnDef();\n    var localeTextFunc = this.gridOptionsWrapper.getLocaleTextFunc();\n    var defaultAutoColDef = {\n      headerName: localeTextFunc('group', 'Group')\n    };\n    var userHasProvidedGroupCellRenderer = userAutoColDef && (userAutoColDef.cellRenderer || userAutoColDef.cellRendererFramework); // only add the default group cell renderer if user hasn't provided one\n\n    if (!userHasProvidedGroupCellRenderer) {\n      defaultAutoColDef.cellRenderer = 'agGroupCellRenderer';\n    } // we never allow moving the group column\n    // defaultAutoColDef.suppressMovable = true;\n\n\n    if (rowGroupCol) {\n      var rowGroupColDef = rowGroupCol.getColDef();\n\n      utils_1._.assign(defaultAutoColDef, {\n        // cellRendererParams.groupKey: colDefToCopy.field;\n        headerName: this.columnController.getDisplayNameForColumn(rowGroupCol, 'header'),\n        headerValueGetter: rowGroupColDef.headerValueGetter\n      });\n\n      if (rowGroupColDef.cellRenderer) {\n        utils_1._.assign(defaultAutoColDef, {\n          cellRendererParams: {\n            innerRenderer: rowGroupColDef.cellRenderer,\n            innerRendererParams: rowGroupColDef.cellRendererParams\n          }\n        });\n      }\n\n      defaultAutoColDef.showRowGroup = rowGroupCol.getColId();\n    } else {\n      defaultAutoColDef.showRowGroup = true;\n    }\n\n    return defaultAutoColDef;\n  };\n\n  var AutoGroupColService_1;\n  AutoGroupColService.GROUP_AUTO_COLUMN_BUNDLE_ID = constants_1.Constants.GROUP_AUTO_COLUMN_ID;\n\n  __decorate([context_1.Autowired('gridOptionsWrapper'), __metadata(\"design:type\", gridOptionsWrapper_1.GridOptionsWrapper)], AutoGroupColService.prototype, \"gridOptionsWrapper\", void 0);\n\n  __decorate([context_1.Autowired('context'), __metadata(\"design:type\", context_1.Context)], AutoGroupColService.prototype, \"context\", void 0);\n\n  __decorate([context_1.Autowired('columnController'), __metadata(\"design:type\", columnController_1.ColumnController)], AutoGroupColService.prototype, \"columnController\", void 0);\n\n  __decorate([context_1.Autowired('columnFactory'), __metadata(\"design:type\", columnFactory_1.ColumnFactory)], AutoGroupColService.prototype, \"columnFactory\", void 0);\n\n  AutoGroupColService = AutoGroupColService_1 = __decorate([context_1.Bean('autoGroupColService')], AutoGroupColService);\n  return AutoGroupColService;\n}();\n\nexports.AutoGroupColService = AutoGroupColService;","map":{"version":3,"sources":["/Users/dirkmennecke77/Desktop/Lageplan/node_modules/ag-grid-community/dist/lib/columnController/autoGroupColService.js"],"names":["__decorate","decorators","target","key","desc","c","arguments","length","r","Object","getOwnPropertyDescriptor","d","Reflect","decorate","i","defineProperty","__metadata","k","v","metadata","exports","value","context_1","require","column_1","gridOptionsWrapper_1","columnController_1","columnFactory_1","constants_1","utils_1","AutoGroupColService","AutoGroupColService_1","prototype","createAutoGroupColumns","rowGroupColumns","_this","groupAutoColumns","doingTreeData","gridOptionsWrapper","isTreeData","doingMultiAutoColumn","isGroupMultiAutoColumn","console","warn","forEach","rowGroupCol","index","push","createOneAutoGroupColumn","defaultAutoColDef","generateDefaultColDef","colId","Constants","GROUP_AUTO_COLUMN_ID","getId","GROUP_AUTO_COLUMN_BUNDLE_ID","userAutoColDef","getAutoGroupColumnDef","_","mergeDeep","columnFactory","mergeColDefs","noFieldOrValueGetter","missing","field","valueGetter","filterValueGetter","filter","headerCheckboxSelection","newCol","Column","context","wireBean","localeTextFunc","getLocaleTextFunc","headerName","userHasProvidedGroupCellRenderer","cellRenderer","cellRendererFramework","rowGroupColDef","getColDef","assign","columnController","getDisplayNameForColumn","headerValueGetter","cellRendererParams","innerRenderer","innerRendererParams","showRowGroup","getColId","Autowired","GridOptionsWrapper","Context","ColumnController","ColumnFactory","Bean"],"mappings":"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","sourcesContent":["/**\n * ag-grid-community - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components\n * @version v21.2.2\n * @link http://www.ag-grid.com/\n * @license MIT\n */\n\"use strict\";\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __metadata = (this && this.__metadata) || function (k, v) {\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar context_1 = require(\"../context/context\");\nvar column_1 = require(\"../entities/column\");\nvar gridOptionsWrapper_1 = require(\"../gridOptionsWrapper\");\nvar columnController_1 = require(\"./columnController\");\nvar columnFactory_1 = require(\"./columnFactory\");\nvar constants_1 = require(\"../constants\");\nvar utils_1 = require(\"../utils\");\nvar AutoGroupColService = /** @class */ (function () {\n    function AutoGroupColService() {\n    }\n    AutoGroupColService_1 = AutoGroupColService;\n    AutoGroupColService.prototype.createAutoGroupColumns = function (rowGroupColumns) {\n        var _this = this;\n        var groupAutoColumns = [];\n        var doingTreeData = this.gridOptionsWrapper.isTreeData();\n        var doingMultiAutoColumn = this.gridOptionsWrapper.isGroupMultiAutoColumn();\n        if (doingTreeData && doingMultiAutoColumn) {\n            console.warn('ag-Grid: you cannot mix groupMultiAutoColumn with treeData, only one column can be used to display groups when doing tree data');\n            doingMultiAutoColumn = false;\n        }\n        // if doing groupMultiAutoColumn, then we call the method multiple times, once\n        // for each column we are grouping by\n        if (doingMultiAutoColumn) {\n            rowGroupColumns.forEach(function (rowGroupCol, index) {\n                groupAutoColumns.push(_this.createOneAutoGroupColumn(rowGroupCol, index));\n            });\n        }\n        else {\n            groupAutoColumns.push(this.createOneAutoGroupColumn());\n        }\n        return groupAutoColumns;\n    };\n    // rowGroupCol and index are missing if groupMultiAutoColumn=false\n    AutoGroupColService.prototype.createOneAutoGroupColumn = function (rowGroupCol, index) {\n        // if one provided by user, use it, otherwise create one\n        var defaultAutoColDef = this.generateDefaultColDef(rowGroupCol);\n        // if doing multi, set the field\n        var colId;\n        if (rowGroupCol) {\n            colId = constants_1.Constants.GROUP_AUTO_COLUMN_ID + \"-\" + rowGroupCol.getId();\n        }\n        else {\n            colId = AutoGroupColService_1.GROUP_AUTO_COLUMN_BUNDLE_ID;\n        }\n        var userAutoColDef = this.gridOptionsWrapper.getAutoGroupColumnDef();\n        utils_1._.mergeDeep(defaultAutoColDef, userAutoColDef);\n        defaultAutoColDef = this.columnFactory.mergeColDefs(defaultAutoColDef);\n        defaultAutoColDef.colId = colId;\n        // For tree data the filter is always allowed\n        if (!this.gridOptionsWrapper.isTreeData()) {\n            // we would only allow filter if the user has provided field or value getter. otherwise the filter\n            // would not be able to work.\n            var noFieldOrValueGetter = utils_1._.missing(defaultAutoColDef.field) && utils_1._.missing(defaultAutoColDef.valueGetter) && utils_1._.missing(defaultAutoColDef.filterValueGetter);\n            if (noFieldOrValueGetter) {\n                defaultAutoColDef.filter = false;\n            }\n        }\n        // if showing many cols, we don't want to show more than one with a checkbox for selection\n        if (index && index > 0) {\n            defaultAutoColDef.headerCheckboxSelection = false;\n        }\n        var newCol = new column_1.Column(defaultAutoColDef, null, colId, true);\n        this.context.wireBean(newCol);\n        return newCol;\n    };\n    AutoGroupColService.prototype.generateDefaultColDef = function (rowGroupCol) {\n        var userAutoColDef = this.gridOptionsWrapper.getAutoGroupColumnDef();\n        var localeTextFunc = this.gridOptionsWrapper.getLocaleTextFunc();\n        var defaultAutoColDef = {\n            headerName: localeTextFunc('group', 'Group')\n        };\n        var userHasProvidedGroupCellRenderer = userAutoColDef && (userAutoColDef.cellRenderer || userAutoColDef.cellRendererFramework);\n        // only add the default group cell renderer if user hasn't provided one\n        if (!userHasProvidedGroupCellRenderer) {\n            defaultAutoColDef.cellRenderer = 'agGroupCellRenderer';\n        }\n        // we never allow moving the group column\n        // defaultAutoColDef.suppressMovable = true;\n        if (rowGroupCol) {\n            var rowGroupColDef = rowGroupCol.getColDef();\n            utils_1._.assign(defaultAutoColDef, {\n                // cellRendererParams.groupKey: colDefToCopy.field;\n                headerName: this.columnController.getDisplayNameForColumn(rowGroupCol, 'header'),\n                headerValueGetter: rowGroupColDef.headerValueGetter\n            });\n            if (rowGroupColDef.cellRenderer) {\n                utils_1._.assign(defaultAutoColDef, {\n                    cellRendererParams: {\n                        innerRenderer: rowGroupColDef.cellRenderer,\n                        innerRendererParams: rowGroupColDef.cellRendererParams\n                    }\n                });\n            }\n            defaultAutoColDef.showRowGroup = rowGroupCol.getColId();\n        }\n        else {\n            defaultAutoColDef.showRowGroup = true;\n        }\n        return defaultAutoColDef;\n    };\n    var AutoGroupColService_1;\n    AutoGroupColService.GROUP_AUTO_COLUMN_BUNDLE_ID = constants_1.Constants.GROUP_AUTO_COLUMN_ID;\n    __decorate([\n        context_1.Autowired('gridOptionsWrapper'),\n        __metadata(\"design:type\", gridOptionsWrapper_1.GridOptionsWrapper)\n    ], AutoGroupColService.prototype, \"gridOptionsWrapper\", void 0);\n    __decorate([\n        context_1.Autowired('context'),\n        __metadata(\"design:type\", context_1.Context)\n    ], AutoGroupColService.prototype, \"context\", void 0);\n    __decorate([\n        context_1.Autowired('columnController'),\n        __metadata(\"design:type\", columnController_1.ColumnController)\n    ], AutoGroupColService.prototype, \"columnController\", void 0);\n    __decorate([\n        context_1.Autowired('columnFactory'),\n        __metadata(\"design:type\", columnFactory_1.ColumnFactory)\n    ], AutoGroupColService.prototype, \"columnFactory\", void 0);\n    AutoGroupColService = AutoGroupColService_1 = __decorate([\n        context_1.Bean('autoGroupColService')\n    ], AutoGroupColService);\n    return AutoGroupColService;\n}());\nexports.AutoGroupColService = AutoGroupColService;\n"]},"metadata":{},"sourceType":"script"}