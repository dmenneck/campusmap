{"ast":null,"code":"/**\n * @module ol/Overlay\n */\nimport { inherits } from './util.js';\nimport MapEventType from './MapEventType.js';\nimport BaseObject, { getChangeEventType } from './Object.js';\nimport OverlayPositioning from './OverlayPositioning.js';\nimport { CLASS_SELECTABLE } from './css.js';\nimport { removeNode, removeChildren, outerWidth, outerHeight } from './dom.js';\nimport { listen, unlistenByKey } from './events.js';\nimport { containsExtent } from './extent.js';\n/**\n * @typedef {Object} Options\n * @property {number|string} [id] Set the overlay id. The overlay id can be used\n * with the {@link module:ol/Map~Map#getOverlayById} method.\n * @property {Element} [element] The overlay element.\n * @property {Array.<number>} [offset=[0, 0]] Offsets in pixels used when positioning\n * the overlay. The first element in the\n * array is the horizontal offset. A positive value shifts the overlay right.\n * The second element in the array is the vertical offset. A positive value\n * shifts the overlay down.\n * @property {module:ol/coordinate~Coordinate} [position] The overlay position\n * in map projection.\n * @property {module:ol/OverlayPositioning} [positioning='top-left'] Defines how\n * the overlay is actually positioned with respect to its `position` property.\n * Possible values are `'bottom-left'`, `'bottom-center'`, `'bottom-right'`,\n * `'center-left'`, `'center-center'`, `'center-right'`, `'top-left'`,\n * `'top-center'`, and `'top-right'`.\n * @property {boolean} [stopEvent=true] Whether event propagation to the map\n * viewport should be stopped. If `true` the overlay is placed in the same\n * container as that of the controls (CSS class name\n * `ol-overlaycontainer-stopevent`); if `false` it is placed in the container\n * with CSS class name specified by the `className` property.\n * @property {boolean} [insertFirst=true] Whether the overlay is inserted first\n * in the overlay container, or appended. If the overlay is placed in the same\n * container as that of the controls (see the `stopEvent` option) you will\n * probably set `insertFirst` to `true` so the overlay is displayed below the\n * controls.\n * @property {boolean} [autoPan=false] If set to `true` the map is panned when\n * calling `setPosition`, so that the overlay is entirely visible in the current\n * viewport.\n * @property {module:ol/Overlay~PanOptions} [autoPanAnimation] The\n * animation options used to pan the overlay into view. This animation is only\n * used when `autoPan` is enabled. A `duration` and `easing` may be provided to\n * customize the animation.\n * @property {number} [autoPanMargin=20] The margin (in pixels) between the\n * overlay and the borders of the map when autopanning.\n * @property {string} [className='ol-overlay-container ol-selectable'] CSS class\n * name.\n */\n\n/**\n * @typedef {Object} PanOptions\n * @property {number} [duration=1000] The duration of the animation in\n * milliseconds.\n * @property {function(number):number} [easing] The easing function to use. Can\n * be one from {@link module:ol/easing} or a custom function.\n * Default is {@link module:ol/easing~inAndOut}.\n */\n\n/**\n * @enum {string}\n * @protected\n */\n\nconst Property = {\n  ELEMENT: 'element',\n  MAP: 'map',\n  OFFSET: 'offset',\n  POSITION: 'position',\n  POSITIONING: 'positioning'\n};\n/**\n * @classdesc\n * An element to be displayed over the map and attached to a single map\n * location.  Like {@link module:ol/control/Control~Control}, Overlays are\n * visible widgets. Unlike Controls, they are not in a fixed position on the\n * screen, but are tied to a geographical coordinate, so panning the map will\n * move an Overlay but not a Control.\n *\n * Example:\n *\n *     import Overlay from 'ol/Overlay';\n *\n *     var popup = new Overlay({\n *       element: document.getElementById('popup')\n *     });\n *     popup.setPosition(coordinate);\n *     map.addOverlay(popup);\n *\n * @constructor\n * @extends {module:ol/Object}\n * @param {module:ol/Overlay~Options} options Overlay options.\n * @api\n */\n\nconst Overlay = function (options) {\n  BaseObject.call(this);\n  /**\n   * @protected\n   * @type {module:ol/Overlay~Options}\n   */\n\n  this.options = options;\n  /**\n   * @protected\n   * @type {number|string|undefined}\n   */\n\n  this.id = options.id;\n  /**\n   * @protected\n   * @type {boolean}\n   */\n\n  this.insertFirst = options.insertFirst !== undefined ? options.insertFirst : true;\n  /**\n   * @protected\n   * @type {boolean}\n   */\n\n  this.stopEvent = options.stopEvent !== undefined ? options.stopEvent : true;\n  /**\n   * @protected\n   * @type {Element}\n   */\n\n  this.element = document.createElement('DIV');\n  this.element.className = options.className !== undefined ? options.className : 'ol-overlay-container ' + CLASS_SELECTABLE;\n  this.element.style.position = 'absolute';\n  /**\n   * @protected\n   * @type {boolean}\n   */\n\n  this.autoPan = options.autoPan !== undefined ? options.autoPan : false;\n  /**\n   * @protected\n   * @type {module:ol/Overlay~PanOptions}\n   */\n\n  this.autoPanAnimation = options.autoPanAnimation ||\n  /** @type {module:ol/Overlay~PanOptions} */\n  {};\n  /**\n   * @protected\n   * @type {number}\n   */\n\n  this.autoPanMargin = options.autoPanMargin !== undefined ? options.autoPanMargin : 20;\n  /**\n   * @protected\n   * @type {{bottom_: string,\n   *         left_: string,\n   *         right_: string,\n   *         top_: string,\n   *         visible: boolean}}\n   */\n\n  this.rendered = {\n    bottom_: '',\n    left_: '',\n    right_: '',\n    top_: '',\n    visible: true\n  };\n  /**\n   * @protected\n   * @type {?module:ol/events~EventsKey}\n   */\n\n  this.mapPostrenderListenerKey = null;\n  listen(this, getChangeEventType(Property.ELEMENT), this.handleElementChanged, this);\n  listen(this, getChangeEventType(Property.MAP), this.handleMapChanged, this);\n  listen(this, getChangeEventType(Property.OFFSET), this.handleOffsetChanged, this);\n  listen(this, getChangeEventType(Property.POSITION), this.handlePositionChanged, this);\n  listen(this, getChangeEventType(Property.POSITIONING), this.handlePositioningChanged, this);\n\n  if (options.element !== undefined) {\n    this.setElement(options.element);\n  }\n\n  this.setOffset(options.offset !== undefined ? options.offset : [0, 0]);\n  this.setPositioning(options.positioning !== undefined ?\n  /** @type {module:ol/OverlayPositioning} */\n  options.positioning : OverlayPositioning.TOP_LEFT);\n\n  if (options.position !== undefined) {\n    this.setPosition(options.position);\n  }\n};\n\ninherits(Overlay, BaseObject);\n/**\n * Get the DOM element of this overlay.\n * @return {Element|undefined} The Element containing the overlay.\n * @observable\n * @api\n */\n\nOverlay.prototype.getElement = function () {\n  return (\n    /** @type {Element|undefined} */\n    this.get(Property.ELEMENT)\n  );\n};\n/**\n * Get the overlay identifier which is set on constructor.\n * @return {number|string|undefined} Id.\n * @api\n */\n\n\nOverlay.prototype.getId = function () {\n  return this.id;\n};\n/**\n * Get the map associated with this overlay.\n * @return {module:ol/PluggableMap|undefined} The map that the\n * overlay is part of.\n * @observable\n * @api\n */\n\n\nOverlay.prototype.getMap = function () {\n  return (\n    /** @type {module:ol/PluggableMap|undefined} */\n    this.get(Property.MAP)\n  );\n};\n/**\n * Get the offset of this overlay.\n * @return {Array.<number>} The offset.\n * @observable\n * @api\n */\n\n\nOverlay.prototype.getOffset = function () {\n  return (\n    /** @type {Array.<number>} */\n    this.get(Property.OFFSET)\n  );\n};\n/**\n * Get the current position of this overlay.\n * @return {module:ol/coordinate~Coordinate|undefined} The spatial point that the overlay is\n *     anchored at.\n * @observable\n * @api\n */\n\n\nOverlay.prototype.getPosition = function () {\n  return (\n    /** @type {module:ol/coordinate~Coordinate|undefined} */\n    this.get(Property.POSITION)\n  );\n};\n/**\n * Get the current positioning of this overlay.\n * @return {module:ol/OverlayPositioning} How the overlay is positioned\n *     relative to its point on the map.\n * @observable\n * @api\n */\n\n\nOverlay.prototype.getPositioning = function () {\n  return (\n    /** @type {module:ol/OverlayPositioning} */\n    this.get(Property.POSITIONING)\n  );\n};\n/**\n * @protected\n */\n\n\nOverlay.prototype.handleElementChanged = function () {\n  removeChildren(this.element);\n  const element = this.getElement();\n\n  if (element) {\n    this.element.appendChild(element);\n  }\n};\n/**\n * @protected\n */\n\n\nOverlay.prototype.handleMapChanged = function () {\n  if (this.mapPostrenderListenerKey) {\n    removeNode(this.element);\n    unlistenByKey(this.mapPostrenderListenerKey);\n    this.mapPostrenderListenerKey = null;\n  }\n\n  const map = this.getMap();\n\n  if (map) {\n    this.mapPostrenderListenerKey = listen(map, MapEventType.POSTRENDER, this.render, this);\n    this.updatePixelPosition();\n    const container = this.stopEvent ? map.getOverlayContainerStopEvent() : map.getOverlayContainer();\n\n    if (this.insertFirst) {\n      container.insertBefore(this.element, container.childNodes[0] || null);\n    } else {\n      container.appendChild(this.element);\n    }\n  }\n};\n/**\n * @protected\n */\n\n\nOverlay.prototype.render = function () {\n  this.updatePixelPosition();\n};\n/**\n * @protected\n */\n\n\nOverlay.prototype.handleOffsetChanged = function () {\n  this.updatePixelPosition();\n};\n/**\n * @protected\n */\n\n\nOverlay.prototype.handlePositionChanged = function () {\n  this.updatePixelPosition();\n\n  if (this.get(Property.POSITION) && this.autoPan) {\n    this.panIntoView();\n  }\n};\n/**\n * @protected\n */\n\n\nOverlay.prototype.handlePositioningChanged = function () {\n  this.updatePixelPosition();\n};\n/**\n * Set the DOM element to be associated with this overlay.\n * @param {Element|undefined} element The Element containing the overlay.\n * @observable\n * @api\n */\n\n\nOverlay.prototype.setElement = function (element) {\n  this.set(Property.ELEMENT, element);\n};\n/**\n * Set the map to be associated with this overlay.\n * @param {module:ol/PluggableMap|undefined} map The map that the\n * overlay is part of.\n * @observable\n * @api\n */\n\n\nOverlay.prototype.setMap = function (map) {\n  this.set(Property.MAP, map);\n};\n/**\n * Set the offset for this overlay.\n * @param {Array.<number>} offset Offset.\n * @observable\n * @api\n */\n\n\nOverlay.prototype.setOffset = function (offset) {\n  this.set(Property.OFFSET, offset);\n};\n/**\n * Set the position for this overlay. If the position is `undefined` the\n * overlay is hidden.\n * @param {module:ol/coordinate~Coordinate|undefined} position The spatial point that the overlay\n *     is anchored at.\n * @observable\n * @api\n */\n\n\nOverlay.prototype.setPosition = function (position) {\n  this.set(Property.POSITION, position);\n};\n/**\n * Pan the map so that the overlay is entirely visible in the current viewport\n * (if necessary).\n * @protected\n */\n\n\nOverlay.prototype.panIntoView = function () {\n  const map = this.getMap();\n\n  if (!map || !map.getTargetElement()) {\n    return;\n  }\n\n  const mapRect = this.getRect(map.getTargetElement(), map.getSize());\n  const element =\n  /** @type {!Element} */\n  this.getElement();\n  const overlayRect = this.getRect(element, [outerWidth(element), outerHeight(element)]);\n  const margin = this.autoPanMargin;\n\n  if (!containsExtent(mapRect, overlayRect)) {\n    // the overlay is not completely inside the viewport, so pan the map\n    const offsetLeft = overlayRect[0] - mapRect[0];\n    const offsetRight = mapRect[2] - overlayRect[2];\n    const offsetTop = overlayRect[1] - mapRect[1];\n    const offsetBottom = mapRect[3] - overlayRect[3];\n    const delta = [0, 0];\n\n    if (offsetLeft < 0) {\n      // move map to the left\n      delta[0] = offsetLeft - margin;\n    } else if (offsetRight < 0) {\n      // move map to the right\n      delta[0] = Math.abs(offsetRight) + margin;\n    }\n\n    if (offsetTop < 0) {\n      // move map up\n      delta[1] = offsetTop - margin;\n    } else if (offsetBottom < 0) {\n      // move map down\n      delta[1] = Math.abs(offsetBottom) + margin;\n    }\n\n    if (delta[0] !== 0 || delta[1] !== 0) {\n      const center =\n      /** @type {module:ol/coordinate~Coordinate} */\n      map.getView().getCenter();\n      const centerPx = map.getPixelFromCoordinate(center);\n      const newCenterPx = [centerPx[0] + delta[0], centerPx[1] + delta[1]];\n      map.getView().animate({\n        center: map.getCoordinateFromPixel(newCenterPx),\n        duration: this.autoPanAnimation.duration,\n        easing: this.autoPanAnimation.easing\n      });\n    }\n  }\n};\n/**\n * Get the extent of an element relative to the document\n * @param {Element|undefined} element The element.\n * @param {module:ol/size~Size|undefined} size The size of the element.\n * @return {module:ol/extent~Extent} The extent.\n * @protected\n */\n\n\nOverlay.prototype.getRect = function (element, size) {\n  const box = element.getBoundingClientRect();\n  const offsetX = box.left + window.pageXOffset;\n  const offsetY = box.top + window.pageYOffset;\n  return [offsetX, offsetY, offsetX + size[0], offsetY + size[1]];\n};\n/**\n * Set the positioning for this overlay.\n * @param {module:ol/OverlayPositioning} positioning how the overlay is\n *     positioned relative to its point on the map.\n * @observable\n * @api\n */\n\n\nOverlay.prototype.setPositioning = function (positioning) {\n  this.set(Property.POSITIONING, positioning);\n};\n/**\n * Modify the visibility of the element.\n * @param {boolean} visible Element visibility.\n * @protected\n */\n\n\nOverlay.prototype.setVisible = function (visible) {\n  if (this.rendered.visible !== visible) {\n    this.element.style.display = visible ? '' : 'none';\n    this.rendered.visible = visible;\n  }\n};\n/**\n * Update pixel position.\n * @protected\n */\n\n\nOverlay.prototype.updatePixelPosition = function () {\n  const map = this.getMap();\n  const position = this.getPosition();\n\n  if (!map || !map.isRendered() || !position) {\n    this.setVisible(false);\n    return;\n  }\n\n  const pixel = map.getPixelFromCoordinate(position);\n  const mapSize = map.getSize();\n  this.updateRenderedPosition(pixel, mapSize);\n};\n/**\n * @param {module:ol~Pixel} pixel The pixel location.\n * @param {module:ol/size~Size|undefined} mapSize The map size.\n * @protected\n */\n\n\nOverlay.prototype.updateRenderedPosition = function (pixel, mapSize) {\n  const style = this.element.style;\n  const offset = this.getOffset();\n  const positioning = this.getPositioning();\n  this.setVisible(true);\n  let offsetX = offset[0];\n  let offsetY = offset[1];\n\n  if (positioning == OverlayPositioning.BOTTOM_RIGHT || positioning == OverlayPositioning.CENTER_RIGHT || positioning == OverlayPositioning.TOP_RIGHT) {\n    if (this.rendered.left_ !== '') {\n      this.rendered.left_ = style.left = '';\n    }\n\n    const right = Math.round(mapSize[0] - pixel[0] - offsetX) + 'px';\n\n    if (this.rendered.right_ != right) {\n      this.rendered.right_ = style.right = right;\n    }\n  } else {\n    if (this.rendered.right_ !== '') {\n      this.rendered.right_ = style.right = '';\n    }\n\n    if (positioning == OverlayPositioning.BOTTOM_CENTER || positioning == OverlayPositioning.CENTER_CENTER || positioning == OverlayPositioning.TOP_CENTER) {\n      offsetX -= this.element.offsetWidth / 2;\n    }\n\n    const left = Math.round(pixel[0] + offsetX) + 'px';\n\n    if (this.rendered.left_ != left) {\n      this.rendered.left_ = style.left = left;\n    }\n  }\n\n  if (positioning == OverlayPositioning.BOTTOM_LEFT || positioning == OverlayPositioning.BOTTOM_CENTER || positioning == OverlayPositioning.BOTTOM_RIGHT) {\n    if (this.rendered.top_ !== '') {\n      this.rendered.top_ = style.top = '';\n    }\n\n    const bottom = Math.round(mapSize[1] - pixel[1] - offsetY) + 'px';\n\n    if (this.rendered.bottom_ != bottom) {\n      this.rendered.bottom_ = style.bottom = bottom;\n    }\n  } else {\n    if (this.rendered.bottom_ !== '') {\n      this.rendered.bottom_ = style.bottom = '';\n    }\n\n    if (positioning == OverlayPositioning.CENTER_LEFT || positioning == OverlayPositioning.CENTER_CENTER || positioning == OverlayPositioning.CENTER_RIGHT) {\n      offsetY -= this.element.offsetHeight / 2;\n    }\n\n    const top = Math.round(pixel[1] + offsetY) + 'px';\n\n    if (this.rendered.top_ != top) {\n      this.rendered.top_ = style.top = top;\n    }\n  }\n};\n/**\n * returns the options this Overlay has been created with\n * @return {module:ol/Overlay~Options} overlay options\n */\n\n\nOverlay.prototype.getOptions = function () {\n  return this.options;\n};\n\nexport default Overlay;","map":null,"metadata":{},"sourceType":"module"}