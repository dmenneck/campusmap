{"ast":null,"code":"/**\n * @module ol/style/Image\n */\n\n/**\n * @typedef {Object} Options\n * @property {number} opacity\n * @property {boolean} rotateWithView\n * @property {number} rotation\n * @property {number} scale\n * @property {boolean} snapToPixel\n */\n\n/**\n * @classdesc\n * A base class used for creating subclasses and not instantiated in\n * apps. Base class for {@link module:ol/style/Icon~Icon}, {@link module:ol/style/Circle~CircleStyle} and\n * {@link module:ol/style/RegularShape~RegularShape}.\n *\n * @constructor\n * @abstract\n * @param {module:ol/style/Image~Options} options Options.\n * @api\n */\nconst ImageStyle = function (options) {\n  /**\n   * @private\n   * @type {number}\n   */\n  this.opacity_ = options.opacity;\n  /**\n   * @private\n   * @type {boolean}\n   */\n\n  this.rotateWithView_ = options.rotateWithView;\n  /**\n   * @private\n   * @type {number}\n   */\n\n  this.rotation_ = options.rotation;\n  /**\n   * @private\n   * @type {number}\n   */\n\n  this.scale_ = options.scale;\n  /**\n   * @private\n   * @type {boolean}\n   */\n\n  this.snapToPixel_ = options.snapToPixel;\n};\n/**\n * Get the symbolizer opacity.\n * @return {number} Opacity.\n * @api\n */\n\n\nImageStyle.prototype.getOpacity = function () {\n  return this.opacity_;\n};\n/**\n * Determine whether the symbolizer rotates with the map.\n * @return {boolean} Rotate with map.\n * @api\n */\n\n\nImageStyle.prototype.getRotateWithView = function () {\n  return this.rotateWithView_;\n};\n/**\n * Get the symoblizer rotation.\n * @return {number} Rotation.\n * @api\n */\n\n\nImageStyle.prototype.getRotation = function () {\n  return this.rotation_;\n};\n/**\n * Get the symbolizer scale.\n * @return {number} Scale.\n * @api\n */\n\n\nImageStyle.prototype.getScale = function () {\n  return this.scale_;\n};\n/**\n * Determine whether the symbolizer should be snapped to a pixel.\n * @return {boolean} The symbolizer should snap to a pixel.\n * @api\n */\n\n\nImageStyle.prototype.getSnapToPixel = function () {\n  return this.snapToPixel_;\n};\n/**\n * Get the anchor point in pixels. The anchor determines the center point for the\n * symbolizer.\n * @abstract\n * @return {Array.<number>} Anchor.\n */\n\n\nImageStyle.prototype.getAnchor = function () {};\n/**\n * Get the image element for the symbolizer.\n * @abstract\n * @param {number} pixelRatio Pixel ratio.\n * @return {HTMLCanvasElement|HTMLVideoElement|Image} Image element.\n */\n\n\nImageStyle.prototype.getImage = function (pixelRatio) {};\n/**\n * @abstract\n * @param {number} pixelRatio Pixel ratio.\n * @return {HTMLCanvasElement|HTMLVideoElement|Image} Image element.\n */\n\n\nImageStyle.prototype.getHitDetectionImage = function (pixelRatio) {};\n/**\n * @abstract\n * @return {module:ol/ImageState} Image state.\n */\n\n\nImageStyle.prototype.getImageState = function () {};\n/**\n * @abstract\n * @return {module:ol/size~Size} Image size.\n */\n\n\nImageStyle.prototype.getImageSize = function () {};\n/**\n * @abstract\n * @return {module:ol/size~Size} Size of the hit-detection image.\n */\n\n\nImageStyle.prototype.getHitDetectionImageSize = function () {};\n/**\n * Get the origin of the symbolizer.\n * @abstract\n * @return {Array.<number>} Origin.\n */\n\n\nImageStyle.prototype.getOrigin = function () {};\n/**\n * Get the size of the symbolizer (in pixels).\n * @abstract\n * @return {module:ol/size~Size} Size.\n */\n\n\nImageStyle.prototype.getSize = function () {};\n/**\n * Set the opacity.\n *\n * @param {number} opacity Opacity.\n * @api\n */\n\n\nImageStyle.prototype.setOpacity = function (opacity) {\n  this.opacity_ = opacity;\n};\n/**\n * Set whether to rotate the style with the view.\n *\n * @param {boolean} rotateWithView Rotate with map.\n * @api\n */\n\n\nImageStyle.prototype.setRotateWithView = function (rotateWithView) {\n  this.rotateWithView_ = rotateWithView;\n};\n/**\n * Set the rotation.\n *\n * @param {number} rotation Rotation.\n * @api\n */\n\n\nImageStyle.prototype.setRotation = function (rotation) {\n  this.rotation_ = rotation;\n};\n/**\n * Set the scale.\n *\n * @param {number} scale Scale.\n * @api\n */\n\n\nImageStyle.prototype.setScale = function (scale) {\n  this.scale_ = scale;\n};\n/**\n * Set whether to snap the image to the closest pixel.\n *\n * @param {boolean} snapToPixel Snap to pixel?\n * @api\n */\n\n\nImageStyle.prototype.setSnapToPixel = function (snapToPixel) {\n  this.snapToPixel_ = snapToPixel;\n};\n/**\n * @abstract\n * @param {function(this: T, module:ol/events/Event)} listener Listener function.\n * @param {T} thisArg Value to use as `this` when executing `listener`.\n * @return {module:ol/events~EventsKey|undefined} Listener key.\n * @template T\n */\n\n\nImageStyle.prototype.listenImageChange = function (listener, thisArg) {};\n/**\n * Load not yet loaded URI.\n * @abstract\n */\n\n\nImageStyle.prototype.load = function () {};\n/**\n * @abstract\n * @param {function(this: T, module:ol/events/Event)} listener Listener function.\n * @param {T} thisArg Value to use as `this` when executing `listener`.\n * @template T\n */\n\n\nImageStyle.prototype.unlistenImageChange = function (listener, thisArg) {};\n\nexport default ImageStyle;","map":null,"metadata":{},"sourceType":"module"}