{"ast":null,"code":"/**\n * @module ol/renderer/vector\n */\nimport { getUid } from '../util.js';\nimport ImageState from '../ImageState.js';\nimport GeometryType from '../geom/GeometryType.js';\nimport ReplayType from '../render/ReplayType.js';\n/**\n * Tolerance for geometry simplification in device pixels.\n * @type {number}\n */\n\nvar SIMPLIFY_TOLERANCE = 0.5;\n/**\n * @const\n * @type {Object<import(\"../geom/GeometryType.js\").default,\n *                function(import(\"../render/ReplayGroup.js\").default, import(\"../geom/Geometry.js\").default,\n *                         import(\"../style/Style.js\").default, Object)>}\n */\n\nvar GEOMETRY_RENDERERS = {\n  'Point': renderPointGeometry,\n  'LineString': renderLineStringGeometry,\n  'Polygon': renderPolygonGeometry,\n  'MultiPoint': renderMultiPointGeometry,\n  'MultiLineString': renderMultiLineStringGeometry,\n  'MultiPolygon': renderMultiPolygonGeometry,\n  'GeometryCollection': renderGeometryCollectionGeometry,\n  'Circle': renderCircleGeometry\n};\n/**\n * @param {import(\"../Feature.js\").FeatureLike} feature1 Feature 1.\n * @param {import(\"../Feature.js\").FeatureLike} feature2 Feature 2.\n * @return {number} Order.\n */\n\nexport function defaultOrder(feature1, feature2) {\n  return parseInt(getUid(feature1), 10) - parseInt(getUid(feature2), 10);\n}\n/**\n * @param {number} resolution Resolution.\n * @param {number} pixelRatio Pixel ratio.\n * @return {number} Squared pixel tolerance.\n */\n\nexport function getSquaredTolerance(resolution, pixelRatio) {\n  var tolerance = getTolerance(resolution, pixelRatio);\n  return tolerance * tolerance;\n}\n/**\n * @param {number} resolution Resolution.\n * @param {number} pixelRatio Pixel ratio.\n * @return {number} Pixel tolerance.\n */\n\nexport function getTolerance(resolution, pixelRatio) {\n  return SIMPLIFY_TOLERANCE * resolution / pixelRatio;\n}\n/**\n * @param {import(\"../render/ReplayGroup.js\").default} replayGroup Replay group.\n * @param {import(\"../geom/Circle.js\").default} geometry Geometry.\n * @param {import(\"../style/Style.js\").default} style Style.\n * @param {import(\"../Feature.js\").default} feature Feature.\n */\n\nfunction renderCircleGeometry(replayGroup, geometry, style, feature) {\n  var fillStyle = style.getFill();\n  var strokeStyle = style.getStroke();\n\n  if (fillStyle || strokeStyle) {\n    var circleReplay = replayGroup.getReplay(style.getZIndex(), ReplayType.CIRCLE);\n    circleReplay.setFillStrokeStyle(fillStyle, strokeStyle);\n    circleReplay.drawCircle(geometry, feature);\n  }\n\n  var textStyle = style.getText();\n\n  if (textStyle) {\n    var textReplay = replayGroup.getReplay(style.getZIndex(), ReplayType.TEXT);\n    textReplay.setTextStyle(textStyle, replayGroup.addDeclutter(false));\n    textReplay.drawText(geometry, feature);\n  }\n}\n/**\n * @param {import(\"../render/ReplayGroup.js\").default} replayGroup Replay group.\n * @param {import(\"../Feature.js\").FeatureLike} feature Feature.\n * @param {import(\"../style/Style.js\").default} style Style.\n * @param {number} squaredTolerance Squared tolerance.\n * @param {function(this: T, import(\"../events/Event.js\").default)} listener Listener function.\n * @param {T} thisArg Value to use as `this` when executing `listener`.\n * @return {boolean} `true` if style is loading.\n * @template T\n */\n\n\nexport function renderFeature(replayGroup, feature, style, squaredTolerance, listener, thisArg) {\n  var loading = false;\n  var imageStyle = style.getImage();\n\n  if (imageStyle) {\n    var imageState = imageStyle.getImageState();\n\n    if (imageState == ImageState.LOADED || imageState == ImageState.ERROR) {\n      imageStyle.unlistenImageChange(listener, thisArg);\n    } else {\n      if (imageState == ImageState.IDLE) {\n        imageStyle.load();\n      }\n\n      imageState = imageStyle.getImageState();\n      imageStyle.listenImageChange(listener, thisArg);\n      loading = true;\n    }\n  }\n\n  renderFeatureInternal(replayGroup, feature, style, squaredTolerance);\n  return loading;\n}\n/**\n * @param {import(\"../render/ReplayGroup.js\").default} replayGroup Replay group.\n * @param {import(\"../Feature.js\").FeatureLike} feature Feature.\n * @param {import(\"../style/Style.js\").default} style Style.\n * @param {number} squaredTolerance Squared tolerance.\n */\n\nfunction renderFeatureInternal(replayGroup, feature, style, squaredTolerance) {\n  var geometry = style.getGeometryFunction()(feature);\n\n  if (!geometry) {\n    return;\n  }\n\n  var simplifiedGeometry = geometry.getSimplifiedGeometry(squaredTolerance);\n  var renderer = style.getRenderer();\n\n  if (renderer) {\n    renderGeometry(replayGroup, simplifiedGeometry, style, feature);\n  } else {\n    var geometryRenderer = GEOMETRY_RENDERERS[simplifiedGeometry.getType()];\n    geometryRenderer(replayGroup, simplifiedGeometry, style, feature);\n  }\n}\n/**\n * @param {import(\"../render/ReplayGroup.js\").default} replayGroup Replay group.\n * @param {import(\"../geom/Geometry.js\").default|import(\"../render/Feature.js\").default} geometry Geometry.\n * @param {import(\"../style/Style.js\").default} style Style.\n * @param {import(\"../Feature.js\").FeatureLike} feature Feature.\n */\n\n\nfunction renderGeometry(replayGroup, geometry, style, feature) {\n  if (geometry.getType() == GeometryType.GEOMETRY_COLLECTION) {\n    var geometries =\n    /** @type {import(\"../geom/GeometryCollection.js\").default} */\n    geometry.getGeometries();\n\n    for (var i = 0, ii = geometries.length; i < ii; ++i) {\n      renderGeometry(replayGroup, geometries[i], style, feature);\n    }\n\n    return;\n  }\n\n  var replay = replayGroup.getReplay(style.getZIndex(), ReplayType.DEFAULT);\n  replay.drawCustom(\n  /** @type {import(\"../geom/SimpleGeometry.js\").default} */\n  geometry, feature, style.getRenderer());\n}\n/**\n * @param {import(\"../render/ReplayGroup.js\").default} replayGroup Replay group.\n * @param {import(\"../geom/GeometryCollection.js\").default} geometry Geometry.\n * @param {import(\"../style/Style.js\").default} style Style.\n * @param {import(\"../Feature.js\").default} feature Feature.\n */\n\n\nfunction renderGeometryCollectionGeometry(replayGroup, geometry, style, feature) {\n  var geometries = geometry.getGeometriesArray();\n  var i, ii;\n\n  for (i = 0, ii = geometries.length; i < ii; ++i) {\n    var geometryRenderer = GEOMETRY_RENDERERS[geometries[i].getType()];\n    geometryRenderer(replayGroup, geometries[i], style, feature);\n  }\n}\n/**\n * @param {import(\"../render/ReplayGroup.js\").default} replayGroup Replay group.\n * @param {import(\"../geom/LineString.js\").default|import(\"../render/Feature.js\").default} geometry Geometry.\n * @param {import(\"../style/Style.js\").default} style Style.\n * @param {import(\"../Feature.js\").FeatureLike} feature Feature.\n */\n\n\nfunction renderLineStringGeometry(replayGroup, geometry, style, feature) {\n  var strokeStyle = style.getStroke();\n\n  if (strokeStyle) {\n    var lineStringReplay = replayGroup.getReplay(style.getZIndex(), ReplayType.LINE_STRING);\n    lineStringReplay.setFillStrokeStyle(null, strokeStyle);\n    lineStringReplay.drawLineString(geometry, feature);\n  }\n\n  var textStyle = style.getText();\n\n  if (textStyle) {\n    var textReplay = replayGroup.getReplay(style.getZIndex(), ReplayType.TEXT);\n    textReplay.setTextStyle(textStyle, replayGroup.addDeclutter(false));\n    textReplay.drawText(geometry, feature);\n  }\n}\n/**\n * @param {import(\"../render/ReplayGroup.js\").default} replayGroup Replay group.\n * @param {import(\"../geom/MultiLineString.js\").default|import(\"../render/Feature.js\").default} geometry Geometry.\n * @param {import(\"../style/Style.js\").default} style Style.\n * @param {import(\"../Feature.js\").FeatureLike} feature Feature.\n */\n\n\nfunction renderMultiLineStringGeometry(replayGroup, geometry, style, feature) {\n  var strokeStyle = style.getStroke();\n\n  if (strokeStyle) {\n    var lineStringReplay = replayGroup.getReplay(style.getZIndex(), ReplayType.LINE_STRING);\n    lineStringReplay.setFillStrokeStyle(null, strokeStyle);\n    lineStringReplay.drawMultiLineString(geometry, feature);\n  }\n\n  var textStyle = style.getText();\n\n  if (textStyle) {\n    var textReplay = replayGroup.getReplay(style.getZIndex(), ReplayType.TEXT);\n    textReplay.setTextStyle(textStyle, replayGroup.addDeclutter(false));\n    textReplay.drawText(geometry, feature);\n  }\n}\n/**\n * @param {import(\"../render/ReplayGroup.js\").default} replayGroup Replay group.\n * @param {import(\"../geom/MultiPolygon.js\").default} geometry Geometry.\n * @param {import(\"../style/Style.js\").default} style Style.\n * @param {import(\"../Feature.js\").default} feature Feature.\n */\n\n\nfunction renderMultiPolygonGeometry(replayGroup, geometry, style, feature) {\n  var fillStyle = style.getFill();\n  var strokeStyle = style.getStroke();\n\n  if (strokeStyle || fillStyle) {\n    var polygonReplay = replayGroup.getReplay(style.getZIndex(), ReplayType.POLYGON);\n    polygonReplay.setFillStrokeStyle(fillStyle, strokeStyle);\n    polygonReplay.drawMultiPolygon(geometry, feature);\n  }\n\n  var textStyle = style.getText();\n\n  if (textStyle) {\n    var textReplay = replayGroup.getReplay(style.getZIndex(), ReplayType.TEXT);\n    textReplay.setTextStyle(textStyle, replayGroup.addDeclutter(false));\n    textReplay.drawText(geometry, feature);\n  }\n}\n/**\n * @param {import(\"../render/ReplayGroup.js\").default} replayGroup Replay group.\n * @param {import(\"../geom/Point.js\").default|import(\"../render/Feature.js\").default} geometry Geometry.\n * @param {import(\"../style/Style.js\").default} style Style.\n * @param {import(\"../Feature.js\").FeatureLike} feature Feature.\n */\n\n\nfunction renderPointGeometry(replayGroup, geometry, style, feature) {\n  var imageStyle = style.getImage();\n\n  if (imageStyle) {\n    if (imageStyle.getImageState() != ImageState.LOADED) {\n      return;\n    }\n\n    var imageReplay = replayGroup.getReplay(style.getZIndex(), ReplayType.IMAGE);\n    imageReplay.setImageStyle(imageStyle, replayGroup.addDeclutter(false));\n    imageReplay.drawPoint(geometry, feature);\n  }\n\n  var textStyle = style.getText();\n\n  if (textStyle) {\n    var textReplay = replayGroup.getReplay(style.getZIndex(), ReplayType.TEXT);\n    textReplay.setTextStyle(textStyle, replayGroup.addDeclutter(!!imageStyle));\n    textReplay.drawText(geometry, feature);\n  }\n}\n/**\n * @param {import(\"../render/ReplayGroup.js\").default} replayGroup Replay group.\n * @param {import(\"../geom/MultiPoint.js\").default|import(\"../render/Feature.js\").default} geometry Geometry.\n * @param {import(\"../style/Style.js\").default} style Style.\n * @param {import(\"../Feature.js\").FeatureLike} feature Feature.\n */\n\n\nfunction renderMultiPointGeometry(replayGroup, geometry, style, feature) {\n  var imageStyle = style.getImage();\n\n  if (imageStyle) {\n    if (imageStyle.getImageState() != ImageState.LOADED) {\n      return;\n    }\n\n    var imageReplay = replayGroup.getReplay(style.getZIndex(), ReplayType.IMAGE);\n    imageReplay.setImageStyle(imageStyle, replayGroup.addDeclutter(false));\n    imageReplay.drawMultiPoint(geometry, feature);\n  }\n\n  var textStyle = style.getText();\n\n  if (textStyle) {\n    var textReplay = replayGroup.getReplay(style.getZIndex(), ReplayType.TEXT);\n    textReplay.setTextStyle(textStyle, replayGroup.addDeclutter(!!imageStyle));\n    textReplay.drawText(geometry, feature);\n  }\n}\n/**\n * @param {import(\"../render/ReplayGroup.js\").default} replayGroup Replay group.\n * @param {import(\"../geom/Polygon.js\").default|import(\"../render/Feature.js\").default} geometry Geometry.\n * @param {import(\"../style/Style.js\").default} style Style.\n * @param {import(\"../Feature.js\").FeatureLike} feature Feature.\n */\n\n\nfunction renderPolygonGeometry(replayGroup, geometry, style, feature) {\n  var fillStyle = style.getFill();\n  var strokeStyle = style.getStroke();\n\n  if (fillStyle || strokeStyle) {\n    var polygonReplay = replayGroup.getReplay(style.getZIndex(), ReplayType.POLYGON);\n    polygonReplay.setFillStrokeStyle(fillStyle, strokeStyle);\n    polygonReplay.drawPolygon(geometry, feature);\n  }\n\n  var textStyle = style.getText();\n\n  if (textStyle) {\n    var textReplay = replayGroup.getReplay(style.getZIndex(), ReplayType.TEXT);\n    textReplay.setTextStyle(textStyle, replayGroup.addDeclutter(false));\n    textReplay.drawText(geometry, feature);\n  }\n}","map":{"version":3,"sources":["../../../src/ol/renderer/vector.js"],"names":["const","let"],"mappings":"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","sourcesContent":["/**\n * @module ol/renderer/vector\n */\nimport {getUid} from '../util.js';\nimport ImageState from '../ImageState.js';\nimport GeometryType from '../geom/GeometryType.js';\nimport ReplayType from '../render/ReplayType.js';\n\n\n/**\n * Tolerance for geometry simplification in device pixels.\n * @type {number}\n */\nconst SIMPLIFY_TOLERANCE = 0.5;\n\n\n/**\n * @const\n * @type {Object<import(\"../geom/GeometryType.js\").default,\n *                function(import(\"../render/ReplayGroup.js\").default, import(\"../geom/Geometry.js\").default,\n *                         import(\"../style/Style.js\").default, Object)>}\n */\nconst GEOMETRY_RENDERERS = {\n  'Point': renderPointGeometry,\n  'LineString': renderLineStringGeometry,\n  'Polygon': renderPolygonGeometry,\n  'MultiPoint': renderMultiPointGeometry,\n  'MultiLineString': renderMultiLineStringGeometry,\n  'MultiPolygon': renderMultiPolygonGeometry,\n  'GeometryCollection': renderGeometryCollectionGeometry,\n  'Circle': renderCircleGeometry\n};\n\n\n/**\n * @param {import(\"../Feature.js\").FeatureLike} feature1 Feature 1.\n * @param {import(\"../Feature.js\").FeatureLike} feature2 Feature 2.\n * @return {number} Order.\n */\nexport function defaultOrder(feature1, feature2) {\n  return parseInt(getUid(feature1), 10) - parseInt(getUid(feature2), 10);\n}\n\n\n/**\n * @param {number} resolution Resolution.\n * @param {number} pixelRatio Pixel ratio.\n * @return {number} Squared pixel tolerance.\n */\nexport function getSquaredTolerance(resolution, pixelRatio) {\n  const tolerance = getTolerance(resolution, pixelRatio);\n  return tolerance * tolerance;\n}\n\n\n/**\n * @param {number} resolution Resolution.\n * @param {number} pixelRatio Pixel ratio.\n * @return {number} Pixel tolerance.\n */\nexport function getTolerance(resolution, pixelRatio) {\n  return SIMPLIFY_TOLERANCE * resolution / pixelRatio;\n}\n\n\n/**\n * @param {import(\"../render/ReplayGroup.js\").default} replayGroup Replay group.\n * @param {import(\"../geom/Circle.js\").default} geometry Geometry.\n * @param {import(\"../style/Style.js\").default} style Style.\n * @param {import(\"../Feature.js\").default} feature Feature.\n */\nfunction renderCircleGeometry(replayGroup, geometry, style, feature) {\n  const fillStyle = style.getFill();\n  const strokeStyle = style.getStroke();\n  if (fillStyle || strokeStyle) {\n    const circleReplay = replayGroup.getReplay(style.getZIndex(), ReplayType.CIRCLE);\n    circleReplay.setFillStrokeStyle(fillStyle, strokeStyle);\n    circleReplay.drawCircle(geometry, feature);\n  }\n  const textStyle = style.getText();\n  if (textStyle) {\n    const textReplay = replayGroup.getReplay(style.getZIndex(), ReplayType.TEXT);\n    textReplay.setTextStyle(textStyle, replayGroup.addDeclutter(false));\n    textReplay.drawText(geometry, feature);\n  }\n}\n\n\n/**\n * @param {import(\"../render/ReplayGroup.js\").default} replayGroup Replay group.\n * @param {import(\"../Feature.js\").FeatureLike} feature Feature.\n * @param {import(\"../style/Style.js\").default} style Style.\n * @param {number} squaredTolerance Squared tolerance.\n * @param {function(this: T, import(\"../events/Event.js\").default)} listener Listener function.\n * @param {T} thisArg Value to use as `this` when executing `listener`.\n * @return {boolean} `true` if style is loading.\n * @template T\n */\nexport function renderFeature(replayGroup, feature, style, squaredTolerance, listener, thisArg) {\n  let loading = false;\n  const imageStyle = style.getImage();\n  if (imageStyle) {\n    let imageState = imageStyle.getImageState();\n    if (imageState == ImageState.LOADED || imageState == ImageState.ERROR) {\n      imageStyle.unlistenImageChange(listener, thisArg);\n    } else {\n      if (imageState == ImageState.IDLE) {\n        imageStyle.load();\n      }\n      imageState = imageStyle.getImageState();\n      imageStyle.listenImageChange(listener, thisArg);\n      loading = true;\n    }\n  }\n  renderFeatureInternal(replayGroup, feature, style, squaredTolerance);\n\n  return loading;\n}\n\n\n/**\n * @param {import(\"../render/ReplayGroup.js\").default} replayGroup Replay group.\n * @param {import(\"../Feature.js\").FeatureLike} feature Feature.\n * @param {import(\"../style/Style.js\").default} style Style.\n * @param {number} squaredTolerance Squared tolerance.\n */\nfunction renderFeatureInternal(replayGroup, feature, style, squaredTolerance) {\n  const geometry = style.getGeometryFunction()(feature);\n  if (!geometry) {\n    return;\n  }\n  const simplifiedGeometry = geometry.getSimplifiedGeometry(squaredTolerance);\n  const renderer = style.getRenderer();\n  if (renderer) {\n    renderGeometry(replayGroup, simplifiedGeometry, style, feature);\n  } else {\n    const geometryRenderer = GEOMETRY_RENDERERS[simplifiedGeometry.getType()];\n    geometryRenderer(replayGroup, simplifiedGeometry, style, feature);\n  }\n}\n\n\n/**\n * @param {import(\"../render/ReplayGroup.js\").default} replayGroup Replay group.\n * @param {import(\"../geom/Geometry.js\").default|import(\"../render/Feature.js\").default} geometry Geometry.\n * @param {import(\"../style/Style.js\").default} style Style.\n * @param {import(\"../Feature.js\").FeatureLike} feature Feature.\n */\nfunction renderGeometry(replayGroup, geometry, style, feature) {\n  if (geometry.getType() == GeometryType.GEOMETRY_COLLECTION) {\n    const geometries = /** @type {import(\"../geom/GeometryCollection.js\").default} */ (geometry).getGeometries();\n    for (let i = 0, ii = geometries.length; i < ii; ++i) {\n      renderGeometry(replayGroup, geometries[i], style, feature);\n    }\n    return;\n  }\n  const replay = replayGroup.getReplay(style.getZIndex(), ReplayType.DEFAULT);\n  replay.drawCustom(/** @type {import(\"../geom/SimpleGeometry.js\").default} */ (geometry), feature, style.getRenderer());\n}\n\n\n/**\n * @param {import(\"../render/ReplayGroup.js\").default} replayGroup Replay group.\n * @param {import(\"../geom/GeometryCollection.js\").default} geometry Geometry.\n * @param {import(\"../style/Style.js\").default} style Style.\n * @param {import(\"../Feature.js\").default} feature Feature.\n */\nfunction renderGeometryCollectionGeometry(replayGroup, geometry, style, feature) {\n  const geometries = geometry.getGeometriesArray();\n  let i, ii;\n  for (i = 0, ii = geometries.length; i < ii; ++i) {\n    const geometryRenderer =\n        GEOMETRY_RENDERERS[geometries[i].getType()];\n    geometryRenderer(replayGroup, geometries[i], style, feature);\n  }\n}\n\n\n/**\n * @param {import(\"../render/ReplayGroup.js\").default} replayGroup Replay group.\n * @param {import(\"../geom/LineString.js\").default|import(\"../render/Feature.js\").default} geometry Geometry.\n * @param {import(\"../style/Style.js\").default} style Style.\n * @param {import(\"../Feature.js\").FeatureLike} feature Feature.\n */\nfunction renderLineStringGeometry(replayGroup, geometry, style, feature) {\n  const strokeStyle = style.getStroke();\n  if (strokeStyle) {\n    const lineStringReplay = replayGroup.getReplay(style.getZIndex(), ReplayType.LINE_STRING);\n    lineStringReplay.setFillStrokeStyle(null, strokeStyle);\n    lineStringReplay.drawLineString(geometry, feature);\n  }\n  const textStyle = style.getText();\n  if (textStyle) {\n    const textReplay = replayGroup.getReplay(style.getZIndex(), ReplayType.TEXT);\n    textReplay.setTextStyle(textStyle, replayGroup.addDeclutter(false));\n    textReplay.drawText(geometry, feature);\n  }\n}\n\n\n/**\n * @param {import(\"../render/ReplayGroup.js\").default} replayGroup Replay group.\n * @param {import(\"../geom/MultiLineString.js\").default|import(\"../render/Feature.js\").default} geometry Geometry.\n * @param {import(\"../style/Style.js\").default} style Style.\n * @param {import(\"../Feature.js\").FeatureLike} feature Feature.\n */\nfunction renderMultiLineStringGeometry(replayGroup, geometry, style, feature) {\n  const strokeStyle = style.getStroke();\n  if (strokeStyle) {\n    const lineStringReplay = replayGroup.getReplay(style.getZIndex(), ReplayType.LINE_STRING);\n    lineStringReplay.setFillStrokeStyle(null, strokeStyle);\n    lineStringReplay.drawMultiLineString(geometry, feature);\n  }\n  const textStyle = style.getText();\n  if (textStyle) {\n    const textReplay = replayGroup.getReplay(style.getZIndex(), ReplayType.TEXT);\n    textReplay.setTextStyle(textStyle, replayGroup.addDeclutter(false));\n    textReplay.drawText(geometry, feature);\n  }\n}\n\n\n/**\n * @param {import(\"../render/ReplayGroup.js\").default} replayGroup Replay group.\n * @param {import(\"../geom/MultiPolygon.js\").default} geometry Geometry.\n * @param {import(\"../style/Style.js\").default} style Style.\n * @param {import(\"../Feature.js\").default} feature Feature.\n */\nfunction renderMultiPolygonGeometry(replayGroup, geometry, style, feature) {\n  const fillStyle = style.getFill();\n  const strokeStyle = style.getStroke();\n  if (strokeStyle || fillStyle) {\n    const polygonReplay = replayGroup.getReplay(style.getZIndex(), ReplayType.POLYGON);\n    polygonReplay.setFillStrokeStyle(fillStyle, strokeStyle);\n    polygonReplay.drawMultiPolygon(geometry, feature);\n  }\n  const textStyle = style.getText();\n  if (textStyle) {\n    const textReplay = replayGroup.getReplay(style.getZIndex(), ReplayType.TEXT);\n    textReplay.setTextStyle(textStyle, replayGroup.addDeclutter(false));\n    textReplay.drawText(geometry, feature);\n  }\n}\n\n\n/**\n * @param {import(\"../render/ReplayGroup.js\").default} replayGroup Replay group.\n * @param {import(\"../geom/Point.js\").default|import(\"../render/Feature.js\").default} geometry Geometry.\n * @param {import(\"../style/Style.js\").default} style Style.\n * @param {import(\"../Feature.js\").FeatureLike} feature Feature.\n */\nfunction renderPointGeometry(replayGroup, geometry, style, feature) {\n  const imageStyle = style.getImage();\n  if (imageStyle) {\n    if (imageStyle.getImageState() != ImageState.LOADED) {\n      return;\n    }\n    const imageReplay = replayGroup.getReplay(style.getZIndex(), ReplayType.IMAGE);\n    imageReplay.setImageStyle(imageStyle, replayGroup.addDeclutter(false));\n    imageReplay.drawPoint(geometry, feature);\n  }\n  const textStyle = style.getText();\n  if (textStyle) {\n    const textReplay = replayGroup.getReplay(style.getZIndex(), ReplayType.TEXT);\n    textReplay.setTextStyle(textStyle, replayGroup.addDeclutter(!!imageStyle));\n    textReplay.drawText(geometry, feature);\n  }\n}\n\n\n/**\n * @param {import(\"../render/ReplayGroup.js\").default} replayGroup Replay group.\n * @param {import(\"../geom/MultiPoint.js\").default|import(\"../render/Feature.js\").default} geometry Geometry.\n * @param {import(\"../style/Style.js\").default} style Style.\n * @param {import(\"../Feature.js\").FeatureLike} feature Feature.\n */\nfunction renderMultiPointGeometry(replayGroup, geometry, style, feature) {\n  const imageStyle = style.getImage();\n  if (imageStyle) {\n    if (imageStyle.getImageState() != ImageState.LOADED) {\n      return;\n    }\n    const imageReplay = replayGroup.getReplay(style.getZIndex(), ReplayType.IMAGE);\n    imageReplay.setImageStyle(imageStyle, replayGroup.addDeclutter(false));\n    imageReplay.drawMultiPoint(geometry, feature);\n  }\n  const textStyle = style.getText();\n  if (textStyle) {\n    const textReplay = replayGroup.getReplay(style.getZIndex(), ReplayType.TEXT);\n    textReplay.setTextStyle(textStyle, replayGroup.addDeclutter(!!imageStyle));\n    textReplay.drawText(geometry, feature);\n  }\n}\n\n\n/**\n * @param {import(\"../render/ReplayGroup.js\").default} replayGroup Replay group.\n * @param {import(\"../geom/Polygon.js\").default|import(\"../render/Feature.js\").default} geometry Geometry.\n * @param {import(\"../style/Style.js\").default} style Style.\n * @param {import(\"../Feature.js\").FeatureLike} feature Feature.\n */\nfunction renderPolygonGeometry(replayGroup, geometry, style, feature) {\n  const fillStyle = style.getFill();\n  const strokeStyle = style.getStroke();\n  if (fillStyle || strokeStyle) {\n    const polygonReplay = replayGroup.getReplay(style.getZIndex(), ReplayType.POLYGON);\n    polygonReplay.setFillStrokeStyle(fillStyle, strokeStyle);\n    polygonReplay.drawPolygon(geometry, feature);\n  }\n  const textStyle = style.getText();\n  if (textStyle) {\n    const textReplay = replayGroup.getReplay(style.getZIndex(), ReplayType.TEXT);\n    textReplay.setTextStyle(textStyle, replayGroup.addDeclutter(false));\n    textReplay.drawText(geometry, feature);\n  }\n}\n"]},"metadata":{},"sourceType":"module"}