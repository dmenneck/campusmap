{"ast":null,"code":"/**\n * ag-grid-community - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components\n * @version v21.2.2\n * @link http://www.ag-grid.com/\n * @license MIT\n */\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nfunction QuerySelector(selector) {\n  return querySelectorFunc.bind(this, selector);\n}\n\nexports.QuerySelector = QuerySelector;\n\nfunction RefSelector(ref) {\n  return querySelectorFunc.bind(this, \"[ref=\" + ref + \"]\");\n}\n\nexports.RefSelector = RefSelector;\n\nfunction querySelectorFunc(selector, classPrototype, methodOrAttributeName, index) {\n  if (selector === null) {\n    console.error(\"ag-Grid: QuerySelector selector should not be null\");\n    return;\n  }\n\n  if (typeof index === \"number\") {\n    console.error(\"ag-Grid: QuerySelector should be on an attribute\");\n    return;\n  }\n\n  addToObjectProps(classPrototype, 'querySelectors', {\n    attributeName: methodOrAttributeName,\n    querySelector: selector\n  });\n} // think we should take this out, put property bindings on the\n\n\nfunction Listener(eventName) {\n  return listenerFunc.bind(this, eventName);\n}\n\nexports.Listener = Listener;\n\nfunction listenerFunc(eventName, target, methodName) {\n  if (eventName === null) {\n    console.error(\"ag-Grid: EventListener eventName should not be null\");\n    return;\n  }\n\n  addToObjectProps(target, 'listenerMethods', {\n    methodName: methodName,\n    eventName: eventName\n  });\n} // think we should take this out, put property bindings on the\n\n\nfunction Method(eventName) {\n  return methodFunc.bind(this, eventName);\n}\n\nexports.Method = Method;\n\nfunction methodFunc(alias, target, methodName) {\n  if (alias === null) {\n    console.error(\"ag-Grid: EventListener eventName should not be null\");\n    return;\n  }\n\n  addToObjectProps(target, 'methods', {\n    methodName: methodName,\n    alias: alias\n  });\n}\n\nfunction addToObjectProps(target, key, value) {\n  // it's an attribute on the class\n  var props = getOrCreateProps(target, target.constructor.name);\n\n  if (!props[key]) {\n    props[key] = [];\n  }\n\n  props[key].push(value);\n}\n\nfunction getOrCreateProps(target, instanceName) {\n  if (!target.__agComponentMetaData) {\n    target.__agComponentMetaData = {};\n  }\n\n  if (!target.__agComponentMetaData[instanceName]) {\n    target.__agComponentMetaData[instanceName] = {};\n  }\n\n  return target.__agComponentMetaData[instanceName];\n}","map":{"version":3,"sources":["/Users/dirkmennecke77/Desktop/Lageplan/node_modules/ag-grid-community/dist/lib/widgets/componentAnnotations.js"],"names":["Object","defineProperty","exports","value","QuerySelector","selector","querySelectorFunc","bind","RefSelector","ref","classPrototype","methodOrAttributeName","index","console","error","addToObjectProps","attributeName","querySelector","Listener","eventName","listenerFunc","target","methodName","Method","methodFunc","alias","key","props","getOrCreateProps","constructor","name","push","instanceName","__agComponentMetaData"],"mappings":"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","sourcesContent":["/**\n * ag-grid-community - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components\n * @version v21.2.2\n * @link http://www.ag-grid.com/\n * @license MIT\n */\n\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nfunction QuerySelector(selector) {\n    return querySelectorFunc.bind(this, selector);\n}\nexports.QuerySelector = QuerySelector;\nfunction RefSelector(ref) {\n    return querySelectorFunc.bind(this, \"[ref=\" + ref + \"]\");\n}\nexports.RefSelector = RefSelector;\nfunction querySelectorFunc(selector, classPrototype, methodOrAttributeName, index) {\n    if (selector === null) {\n        console.error(\"ag-Grid: QuerySelector selector should not be null\");\n        return;\n    }\n    if (typeof index === \"number\") {\n        console.error(\"ag-Grid: QuerySelector should be on an attribute\");\n        return;\n    }\n    addToObjectProps(classPrototype, 'querySelectors', {\n        attributeName: methodOrAttributeName,\n        querySelector: selector\n    });\n}\n// think we should take this out, put property bindings on the\nfunction Listener(eventName) {\n    return listenerFunc.bind(this, eventName);\n}\nexports.Listener = Listener;\nfunction listenerFunc(eventName, target, methodName) {\n    if (eventName === null) {\n        console.error(\"ag-Grid: EventListener eventName should not be null\");\n        return;\n    }\n    addToObjectProps(target, 'listenerMethods', {\n        methodName: methodName,\n        eventName: eventName\n    });\n}\n// think we should take this out, put property bindings on the\nfunction Method(eventName) {\n    return methodFunc.bind(this, eventName);\n}\nexports.Method = Method;\nfunction methodFunc(alias, target, methodName) {\n    if (alias === null) {\n        console.error(\"ag-Grid: EventListener eventName should not be null\");\n        return;\n    }\n    addToObjectProps(target, 'methods', {\n        methodName: methodName,\n        alias: alias\n    });\n}\nfunction addToObjectProps(target, key, value) {\n    // it's an attribute on the class\n    var props = getOrCreateProps(target, target.constructor.name);\n    if (!props[key]) {\n        props[key] = [];\n    }\n    props[key].push(value);\n}\nfunction getOrCreateProps(target, instanceName) {\n    if (!target.__agComponentMetaData) {\n        target.__agComponentMetaData = {};\n    }\n    if (!target.__agComponentMetaData[instanceName]) {\n        target.__agComponentMetaData[instanceName] = {};\n    }\n    return target.__agComponentMetaData[instanceName];\n}\n"]},"metadata":{},"sourceType":"script"}