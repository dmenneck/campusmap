{"ast":null,"code":"/**\n * @module ol/control/Attribution\n */\nimport { equals } from '../array.js';\nimport Control from './Control.js';\nimport { CLASS_CONTROL, CLASS_UNSELECTABLE, CLASS_COLLAPSED } from '../css.js';\nimport { removeChildren, replaceNode } from '../dom.js';\nimport { listen } from '../events.js';\nimport EventType from '../events/EventType.js';\nimport { visibleAtResolution } from '../layer/Layer.js';\n/**\n * @typedef {Object} Options\n * @property {string} [className='ol-attribution'] CSS class name.\n * @property {HTMLElement|string} [target] Specify a target if you\n * want the control to be rendered outside of the map's\n * viewport.\n * @property {boolean} [collapsible] Specify if attributions can\n * be collapsed. If not specified, sources control this behavior with their\n * `attributionsCollapsible` setting.\n * @property {boolean} [collapsed=true] Specify if attributions should\n * be collapsed at startup.\n * @property {string} [tipLabel='Attributions'] Text label to use for the button tip.\n * @property {string} [label='i'] Text label to use for the\n * collapsed attributions button.\n * Instead of text, also an element (e.g. a `span` element) can be used.\n * @property {string|HTMLElement} [collapseLabel='Â»'] Text label to use\n * for the expanded attributions button.\n * Instead of text, also an element (e.g. a `span` element) can be used.\n * @property {function(import(\"../MapEvent.js\").default)} [render] Function called when\n * the control should be re-rendered. This is called in a `requestAnimationFrame`\n * callback.\n */\n\n/**\n * @classdesc\n * Control to show all the attributions associated with the layer sources\n * in the map. This control is one of the default controls included in maps.\n * By default it will show in the bottom right portion of the map, but this can\n * be changed by using a css selector for `.ol-attribution`.\n *\n * @api\n */\n\nvar Attribution =\n/*@__PURE__*/\nfunction (Control) {\n  function Attribution(opt_options) {\n    var options = opt_options ? opt_options : {};\n    Control.call(this, {\n      element: document.createElement('div'),\n      render: options.render || render,\n      target: options.target\n    });\n    /**\n     * @private\n     * @type {HTMLElement}\n     */\n\n    this.ulElement_ = document.createElement('ul');\n    /**\n     * @private\n     * @type {boolean}\n     */\n\n    this.collapsed_ = options.collapsed !== undefined ? options.collapsed : true;\n    /**\n     * @private\n     * @type {boolean}\n     */\n\n    this.overrideCollapsible_ = options.collapsible !== undefined;\n    /**\n     * @private\n     * @type {boolean}\n     */\n\n    this.collapsible_ = options.collapsible !== undefined ? options.collapsible : true;\n\n    if (!this.collapsible_) {\n      this.collapsed_ = false;\n    }\n\n    var className = options.className !== undefined ? options.className : 'ol-attribution';\n    var tipLabel = options.tipLabel !== undefined ? options.tipLabel : 'Attributions';\n    var collapseLabel = options.collapseLabel !== undefined ? options.collapseLabel : '\\u00BB';\n\n    if (typeof collapseLabel === 'string') {\n      /**\n       * @private\n       * @type {HTMLElement}\n       */\n      this.collapseLabel_ = document.createElement('span');\n      this.collapseLabel_.textContent = collapseLabel;\n    } else {\n      this.collapseLabel_ = collapseLabel;\n    }\n\n    var label = options.label !== undefined ? options.label : 'i';\n\n    if (typeof label === 'string') {\n      /**\n       * @private\n       * @type {HTMLElement}\n       */\n      this.label_ = document.createElement('span');\n      this.label_.textContent = label;\n    } else {\n      this.label_ = label;\n    }\n\n    var activeLabel = this.collapsible_ && !this.collapsed_ ? this.collapseLabel_ : this.label_;\n    var button = document.createElement('button');\n    button.setAttribute('type', 'button');\n    button.title = tipLabel;\n    button.appendChild(activeLabel);\n    listen(button, EventType.CLICK, this.handleClick_, this);\n    var cssClasses = className + ' ' + CLASS_UNSELECTABLE + ' ' + CLASS_CONTROL + (this.collapsed_ && this.collapsible_ ? ' ' + CLASS_COLLAPSED : '') + (this.collapsible_ ? '' : ' ol-uncollapsible');\n    var element = this.element;\n    element.className = cssClasses;\n    element.appendChild(this.ulElement_);\n    element.appendChild(button);\n    /**\n     * A list of currently rendered resolutions.\n     * @type {Array<string>}\n     * @private\n     */\n\n    this.renderedAttributions_ = [];\n    /**\n     * @private\n     * @type {boolean}\n     */\n\n    this.renderedVisible_ = true;\n  }\n\n  if (Control) Attribution.__proto__ = Control;\n  Attribution.prototype = Object.create(Control && Control.prototype);\n  Attribution.prototype.constructor = Attribution;\n  /**\n   * Collect a list of visible attributions and set the collapsible state.\n   * @param {import(\"../PluggableMap.js\").FrameState} frameState Frame state.\n   * @return {Array<string>} Attributions.\n   * @private\n   */\n\n  Attribution.prototype.collectSourceAttributions_ = function collectSourceAttributions_(frameState) {\n    /**\n     * Used to determine if an attribution already exists.\n     * @type {!Object<string, boolean>}\n     */\n    var lookup = {};\n    /**\n     * A list of visible attributions.\n     * @type {Array<string>}\n     */\n\n    var visibleAttributions = [];\n    var layerStatesArray = frameState.layerStatesArray;\n    var resolution = frameState.viewState.resolution;\n\n    for (var i = 0, ii = layerStatesArray.length; i < ii; ++i) {\n      var layerState = layerStatesArray[i];\n\n      if (!visibleAtResolution(layerState, resolution)) {\n        continue;\n      }\n\n      var source =\n      /** @type {import(\"../layer/Layer.js\").default} */\n      layerState.layer.getSource();\n\n      if (!source) {\n        continue;\n      }\n\n      var attributionGetter = source.getAttributions();\n\n      if (!attributionGetter) {\n        continue;\n      }\n\n      var attributions = attributionGetter(frameState);\n\n      if (!attributions) {\n        continue;\n      }\n\n      if (!this.overrideCollapsible_ && source.getAttributionsCollapsible() === false) {\n        this.setCollapsible(false);\n      }\n\n      if (Array.isArray(attributions)) {\n        for (var j = 0, jj = attributions.length; j < jj; ++j) {\n          if (!(attributions[j] in lookup)) {\n            visibleAttributions.push(attributions[j]);\n            lookup[attributions[j]] = true;\n          }\n        }\n      } else {\n        if (!(attributions in lookup)) {\n          visibleAttributions.push(attributions);\n          lookup[attributions] = true;\n        }\n      }\n    }\n\n    return visibleAttributions;\n  };\n  /**\n   * @private\n   * @param {?import(\"../PluggableMap.js\").FrameState} frameState Frame state.\n   */\n\n\n  Attribution.prototype.updateElement_ = function updateElement_(frameState) {\n    if (!frameState) {\n      if (this.renderedVisible_) {\n        this.element.style.display = 'none';\n        this.renderedVisible_ = false;\n      }\n\n      return;\n    }\n\n    var attributions = this.collectSourceAttributions_(frameState);\n    var visible = attributions.length > 0;\n\n    if (this.renderedVisible_ != visible) {\n      this.element.style.display = visible ? '' : 'none';\n      this.renderedVisible_ = visible;\n    }\n\n    if (equals(attributions, this.renderedAttributions_)) {\n      return;\n    }\n\n    removeChildren(this.ulElement_); // append the attributions\n\n    for (var i = 0, ii = attributions.length; i < ii; ++i) {\n      var element = document.createElement('li');\n      element.innerHTML = attributions[i];\n      this.ulElement_.appendChild(element);\n    }\n\n    this.renderedAttributions_ = attributions;\n  };\n  /**\n   * @param {MouseEvent} event The event to handle\n   * @private\n   */\n\n\n  Attribution.prototype.handleClick_ = function handleClick_(event) {\n    event.preventDefault();\n    this.handleToggle_();\n  };\n  /**\n   * @private\n   */\n\n\n  Attribution.prototype.handleToggle_ = function handleToggle_() {\n    this.element.classList.toggle(CLASS_COLLAPSED);\n\n    if (this.collapsed_) {\n      replaceNode(this.collapseLabel_, this.label_);\n    } else {\n      replaceNode(this.label_, this.collapseLabel_);\n    }\n\n    this.collapsed_ = !this.collapsed_;\n  };\n  /**\n   * Return `true` if the attribution is collapsible, `false` otherwise.\n   * @return {boolean} True if the widget is collapsible.\n   * @api\n   */\n\n\n  Attribution.prototype.getCollapsible = function getCollapsible() {\n    return this.collapsible_;\n  };\n  /**\n   * Set whether the attribution should be collapsible.\n   * @param {boolean} collapsible True if the widget is collapsible.\n   * @api\n   */\n\n\n  Attribution.prototype.setCollapsible = function setCollapsible(collapsible) {\n    if (this.collapsible_ === collapsible) {\n      return;\n    }\n\n    this.collapsible_ = collapsible;\n    this.element.classList.toggle('ol-uncollapsible');\n\n    if (!collapsible && this.collapsed_) {\n      this.handleToggle_();\n    }\n  };\n  /**\n   * Collapse or expand the attribution according to the passed parameter. Will\n   * not do anything if the attribution isn't collapsible or if the current\n   * collapsed state is already the one requested.\n   * @param {boolean} collapsed True if the widget is collapsed.\n   * @api\n   */\n\n\n  Attribution.prototype.setCollapsed = function setCollapsed(collapsed) {\n    if (!this.collapsible_ || this.collapsed_ === collapsed) {\n      return;\n    }\n\n    this.handleToggle_();\n  };\n  /**\n   * Return `true` when the attribution is currently collapsed or `false`\n   * otherwise.\n   * @return {boolean} True if the widget is collapsed.\n   * @api\n   */\n\n\n  Attribution.prototype.getCollapsed = function getCollapsed() {\n    return this.collapsed_;\n  };\n\n  return Attribution;\n}(Control);\n/**\n * Update the attribution element.\n * @param {import(\"../MapEvent.js\").default} mapEvent Map event.\n * @this {Attribution}\n * @api\n */\n\n\nexport function render(mapEvent) {\n  this.updateElement_(mapEvent.frameState);\n}\nexport default Attribution;","map":{"version":3,"sources":["../../../src/ol/control/Attribution.js"],"names":["const","super","let"],"mappings":"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","sourcesContent":["/**\n * @module ol/control/Attribution\n */\nimport {equals} from '../array.js';\nimport Control from './Control.js';\nimport {CLASS_CONTROL, CLASS_UNSELECTABLE, CLASS_COLLAPSED} from '../css.js';\nimport {removeChildren, replaceNode} from '../dom.js';\nimport {listen} from '../events.js';\nimport EventType from '../events/EventType.js';\nimport {visibleAtResolution} from '../layer/Layer.js';\n\n\n/**\n * @typedef {Object} Options\n * @property {string} [className='ol-attribution'] CSS class name.\n * @property {HTMLElement|string} [target] Specify a target if you\n * want the control to be rendered outside of the map's\n * viewport.\n * @property {boolean} [collapsible] Specify if attributions can\n * be collapsed. If not specified, sources control this behavior with their\n * `attributionsCollapsible` setting.\n * @property {boolean} [collapsed=true] Specify if attributions should\n * be collapsed at startup.\n * @property {string} [tipLabel='Attributions'] Text label to use for the button tip.\n * @property {string} [label='i'] Text label to use for the\n * collapsed attributions button.\n * Instead of text, also an element (e.g. a `span` element) can be used.\n * @property {string|HTMLElement} [collapseLabel='Â»'] Text label to use\n * for the expanded attributions button.\n * Instead of text, also an element (e.g. a `span` element) can be used.\n * @property {function(import(\"../MapEvent.js\").default)} [render] Function called when\n * the control should be re-rendered. This is called in a `requestAnimationFrame`\n * callback.\n */\n\n\n/**\n * @classdesc\n * Control to show all the attributions associated with the layer sources\n * in the map. This control is one of the default controls included in maps.\n * By default it will show in the bottom right portion of the map, but this can\n * be changed by using a css selector for `.ol-attribution`.\n *\n * @api\n */\nclass Attribution extends Control {\n\n  /**\n   * @param {Options=} opt_options Attribution options.\n   */\n  constructor(opt_options) {\n\n    const options = opt_options ? opt_options : {};\n\n    super({\n      element: document.createElement('div'),\n      render: options.render || render,\n      target: options.target\n    });\n\n    /**\n     * @private\n     * @type {HTMLElement}\n     */\n    this.ulElement_ = document.createElement('ul');\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.collapsed_ = options.collapsed !== undefined ? options.collapsed : true;\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.overrideCollapsible_ = options.collapsible !== undefined;\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.collapsible_ = options.collapsible !== undefined ?\n      options.collapsible : true;\n\n    if (!this.collapsible_) {\n      this.collapsed_ = false;\n    }\n\n    const className = options.className !== undefined ? options.className : 'ol-attribution';\n\n    const tipLabel = options.tipLabel !== undefined ? options.tipLabel : 'Attributions';\n\n    const collapseLabel = options.collapseLabel !== undefined ? options.collapseLabel : '\\u00BB';\n\n    if (typeof collapseLabel === 'string') {\n      /**\n       * @private\n       * @type {HTMLElement}\n       */\n      this.collapseLabel_ = document.createElement('span');\n      this.collapseLabel_.textContent = collapseLabel;\n    } else {\n      this.collapseLabel_ = collapseLabel;\n    }\n\n    const label = options.label !== undefined ? options.label : 'i';\n\n    if (typeof label === 'string') {\n      /**\n       * @private\n       * @type {HTMLElement}\n       */\n      this.label_ = document.createElement('span');\n      this.label_.textContent = label;\n    } else {\n      this.label_ = label;\n    }\n\n\n    const activeLabel = (this.collapsible_ && !this.collapsed_) ?\n      this.collapseLabel_ : this.label_;\n    const button = document.createElement('button');\n    button.setAttribute('type', 'button');\n    button.title = tipLabel;\n    button.appendChild(activeLabel);\n\n    listen(button, EventType.CLICK, this.handleClick_, this);\n\n    const cssClasses = className + ' ' + CLASS_UNSELECTABLE + ' ' + CLASS_CONTROL +\n        (this.collapsed_ && this.collapsible_ ? ' ' + CLASS_COLLAPSED : '') +\n        (this.collapsible_ ? '' : ' ol-uncollapsible');\n    const element = this.element;\n    element.className = cssClasses;\n    element.appendChild(this.ulElement_);\n    element.appendChild(button);\n\n    /**\n     * A list of currently rendered resolutions.\n     * @type {Array<string>}\n     * @private\n     */\n    this.renderedAttributions_ = [];\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.renderedVisible_ = true;\n\n  }\n\n  /**\n   * Collect a list of visible attributions and set the collapsible state.\n   * @param {import(\"../PluggableMap.js\").FrameState} frameState Frame state.\n   * @return {Array<string>} Attributions.\n   * @private\n   */\n  collectSourceAttributions_(frameState) {\n    /**\n     * Used to determine if an attribution already exists.\n     * @type {!Object<string, boolean>}\n     */\n    const lookup = {};\n\n    /**\n     * A list of visible attributions.\n     * @type {Array<string>}\n     */\n    const visibleAttributions = [];\n\n    const layerStatesArray = frameState.layerStatesArray;\n    const resolution = frameState.viewState.resolution;\n    for (let i = 0, ii = layerStatesArray.length; i < ii; ++i) {\n      const layerState = layerStatesArray[i];\n      if (!visibleAtResolution(layerState, resolution)) {\n        continue;\n      }\n\n      const source = /** @type {import(\"../layer/Layer.js\").default} */ (layerState.layer).getSource();\n      if (!source) {\n        continue;\n      }\n\n      const attributionGetter = source.getAttributions();\n      if (!attributionGetter) {\n        continue;\n      }\n\n      const attributions = attributionGetter(frameState);\n      if (!attributions) {\n        continue;\n      }\n\n      if (!this.overrideCollapsible_ && source.getAttributionsCollapsible() === false) {\n        this.setCollapsible(false);\n      }\n\n      if (Array.isArray(attributions)) {\n        for (let j = 0, jj = attributions.length; j < jj; ++j) {\n          if (!(attributions[j] in lookup)) {\n            visibleAttributions.push(attributions[j]);\n            lookup[attributions[j]] = true;\n          }\n        }\n      } else {\n        if (!(attributions in lookup)) {\n          visibleAttributions.push(attributions);\n          lookup[attributions] = true;\n        }\n      }\n    }\n    return visibleAttributions;\n  }\n\n  /**\n   * @private\n   * @param {?import(\"../PluggableMap.js\").FrameState} frameState Frame state.\n   */\n  updateElement_(frameState) {\n    if (!frameState) {\n      if (this.renderedVisible_) {\n        this.element.style.display = 'none';\n        this.renderedVisible_ = false;\n      }\n      return;\n    }\n\n    const attributions = this.collectSourceAttributions_(frameState);\n\n    const visible = attributions.length > 0;\n    if (this.renderedVisible_ != visible) {\n      this.element.style.display = visible ? '' : 'none';\n      this.renderedVisible_ = visible;\n    }\n\n    if (equals(attributions, this.renderedAttributions_)) {\n      return;\n    }\n\n    removeChildren(this.ulElement_);\n\n    // append the attributions\n    for (let i = 0, ii = attributions.length; i < ii; ++i) {\n      const element = document.createElement('li');\n      element.innerHTML = attributions[i];\n      this.ulElement_.appendChild(element);\n    }\n\n    this.renderedAttributions_ = attributions;\n  }\n\n  /**\n   * @param {MouseEvent} event The event to handle\n   * @private\n   */\n  handleClick_(event) {\n    event.preventDefault();\n    this.handleToggle_();\n  }\n\n  /**\n   * @private\n   */\n  handleToggle_() {\n    this.element.classList.toggle(CLASS_COLLAPSED);\n    if (this.collapsed_) {\n      replaceNode(this.collapseLabel_, this.label_);\n    } else {\n      replaceNode(this.label_, this.collapseLabel_);\n    }\n    this.collapsed_ = !this.collapsed_;\n  }\n\n  /**\n   * Return `true` if the attribution is collapsible, `false` otherwise.\n   * @return {boolean} True if the widget is collapsible.\n   * @api\n   */\n  getCollapsible() {\n    return this.collapsible_;\n  }\n\n  /**\n   * Set whether the attribution should be collapsible.\n   * @param {boolean} collapsible True if the widget is collapsible.\n   * @api\n   */\n  setCollapsible(collapsible) {\n    if (this.collapsible_ === collapsible) {\n      return;\n    }\n    this.collapsible_ = collapsible;\n    this.element.classList.toggle('ol-uncollapsible');\n    if (!collapsible && this.collapsed_) {\n      this.handleToggle_();\n    }\n  }\n\n  /**\n   * Collapse or expand the attribution according to the passed parameter. Will\n   * not do anything if the attribution isn't collapsible or if the current\n   * collapsed state is already the one requested.\n   * @param {boolean} collapsed True if the widget is collapsed.\n   * @api\n   */\n  setCollapsed(collapsed) {\n    if (!this.collapsible_ || this.collapsed_ === collapsed) {\n      return;\n    }\n    this.handleToggle_();\n  }\n\n  /**\n   * Return `true` when the attribution is currently collapsed or `false`\n   * otherwise.\n   * @return {boolean} True if the widget is collapsed.\n   * @api\n   */\n  getCollapsed() {\n    return this.collapsed_;\n  }\n}\n\n\n/**\n * Update the attribution element.\n * @param {import(\"../MapEvent.js\").default} mapEvent Map event.\n * @this {Attribution}\n * @api\n */\nexport function render(mapEvent) {\n  this.updateElement_(mapEvent.frameState);\n}\n\n\nexport default Attribution;\n"]},"metadata":{},"sourceType":"module"}