{"ast":null,"code":"var _jsxFileName = \"/Users/dirkmennecke77/Desktop/Lageplan/src/App.js\";\nimport React, { Component } from \"react\";\nimport \"./App.css\";\nimport \"ol/ol.css\";\nimport \"antd/dist/antd.css\";\nimport \"./react-geo.css\";\nimport OlMap from \"ol/Map\";\nimport OlView from \"ol/View\";\nimport OlLayerTile from \"ol/layer/Tile\";\nimport OlSourceOsm from \"ol/source/OSM\";\nimport OlSourceTileJson from \"ol/source/TileJSON\";\nimport OlLayerGroup from \"ol/layer/Group\";\nimport { Drawer } from \"antd\";\nimport { SimpleButton, MapComponent, NominatimSearch, MeasureButton, LayerTree, MapProvider, mappify, onDropAware } from \"@terrestris/react-geo\";\nconst MappifiedNominatimSearch = mappify(NominatimSearch);\nconst MappifiedMeasureButton = mappify(MeasureButton);\nconst MappifiedLayerTree = mappify(LayerTree);\nconst Map = mappify(onDropAware(MapComponent));\nconst layer = new OlLayerTile({\n  source: new OlSourceOsm(),\n  name: \"OSM\"\n});\nconst layerGroup = new OlLayerGroup({\n  name: \"Layergroup\",\n  layers: [new OlLayerTile({\n    name: \"Food insecurity layer\",\n    minResolution: 200,\n    maxResolution: 2000,\n    source: new OlSourceTileJson({\n      url: \"https://api.tiles.mapbox.com/v3/mapbox.20110804-hoa-foodinsecurity-3month.json?secure\",\n      crossOrigin: \"anonymous\"\n    })\n  }), new OlLayerTile({\n    name: \"World borders layer\",\n    minResolution: 2000,\n    maxResolution: 20000,\n    source: new OlSourceTileJson({\n      url: \"https://api.tiles.mapbox.com/v3/mapbox.world-borders-light.json?secure\",\n      crossOrigin: \"anonymous\"\n    })\n  })]\n});\nconst center = [788453.4890155146, 6573085.729161344];\nconst map = new OlMap({\n  view: new OlView({\n    center: center,\n    zoom: 16\n  }),\n  layers: [layer, layerGroup]\n});\nmap.on(\"postcompose\", map.updateSize);\n\nclass App extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      visible: false\n    };\n\n    this.toggleDrawer = () => {\n      this.setState({\n        visible: !this.state.visible\n      });\n    };\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"App\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84\n      },\n      __self: this\n    }, React.createElement(MapProvider, {\n      map: map,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85\n      },\n      __self: this\n    }, React.createElement(Map, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86\n      },\n      __self: this\n    }), React.createElement(Drawer, {\n      title: \"react-geo-application\",\n      placement: \"right\",\n      onClose: this.toggleDrawer,\n      visible: this.state.visible,\n      mask: false,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87\n      },\n      __self: this\n    }, React.createElement(MappifiedNominatimSearch, {\n      key: \"search\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94\n      },\n      __self: this\n    }), React.createElement(MappifiedMeasureButton, {\n      key: \"measureButton\",\n      name: \"line\",\n      measureType: \"line\",\n      icon: \"pencil\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95\n      },\n      __self: this\n    }, \"Strecke messen\"), React.createElement(MappifiedLayerTree, {\n      layerGroup: layerGroup,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103\n      },\n      __self: this\n    })), React.createElement(SimpleButton, {\n      style: {\n        position: \"fixed\",\n        top: \"30px\",\n        right: \"30px\"\n      },\n      onClick: this.toggleDrawer,\n      icon: \"bars\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105\n      },\n      __self: this\n    })));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/dirkmennecke77/Desktop/Lageplan/src/App.js"],"names":["React","Component","OlMap","OlView","OlLayerTile","OlSourceOsm","OlSourceTileJson","OlLayerGroup","Drawer","SimpleButton","MapComponent","NominatimSearch","MeasureButton","LayerTree","MapProvider","mappify","onDropAware","MappifiedNominatimSearch","MappifiedMeasureButton","MappifiedLayerTree","Map","layer","source","name","layerGroup","layers","minResolution","maxResolution","url","crossOrigin","center","map","view","zoom","on","updateSize","App","state","visible","toggleDrawer","setState","render","position","top","right"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\n\nimport \"./App.css\";\nimport \"ol/ol.css\";\nimport \"antd/dist/antd.css\";\nimport \"./react-geo.css\";\n\nimport OlMap from \"ol/Map\";\nimport OlView from \"ol/View\";\nimport OlLayerTile from \"ol/layer/Tile\";\nimport OlSourceOsm from \"ol/source/OSM\";\nimport OlSourceTileJson from \"ol/source/TileJSON\";\nimport OlLayerGroup from \"ol/layer/Group\";\n\nimport { Drawer } from \"antd\";\nimport {\n  SimpleButton,\n  MapComponent,\n  NominatimSearch,\n  MeasureButton,\n  LayerTree,\n  MapProvider,\n  mappify,\n  onDropAware\n} from \"@terrestris/react-geo\";\n\nconst MappifiedNominatimSearch = mappify(NominatimSearch);\nconst MappifiedMeasureButton = mappify(MeasureButton);\nconst MappifiedLayerTree = mappify(LayerTree);\nconst Map = mappify(onDropAware(MapComponent));\n\nconst layer = new OlLayerTile({\n  source: new OlSourceOsm(),\n  name: \"OSM\"\n});\n\nconst layerGroup = new OlLayerGroup({\n  name: \"Layergroup\",\n  layers: [\n    new OlLayerTile({\n      name: \"Food insecurity layer\",\n      minResolution: 200,\n      maxResolution: 2000,\n      source: new OlSourceTileJson({\n        url:\n          \"https://api.tiles.mapbox.com/v3/mapbox.20110804-hoa-foodinsecurity-3month.json?secure\",\n        crossOrigin: \"anonymous\"\n      })\n    }),\n    new OlLayerTile({\n      name: \"World borders layer\",\n      minResolution: 2000,\n      maxResolution: 20000,\n      source: new OlSourceTileJson({\n        url:\n          \"https://api.tiles.mapbox.com/v3/mapbox.world-borders-light.json?secure\",\n        crossOrigin: \"anonymous\"\n      })\n    })\n  ]\n});\n\nconst center = [788453.4890155146, 6573085.729161344];\n\nconst map = new OlMap({\n  view: new OlView({\n    center: center,\n    zoom: 16\n  }),\n  layers: [layer, layerGroup]\n});\n\nmap.on(\"postcompose\", map.updateSize);\n\nclass App extends Component {\n  state = { visible: false };\n\n  toggleDrawer = () => {\n    this.setState({ visible: !this.state.visible });\n  };\n\n  render() {\n    return (\n      <div className=\"App\">\n        <MapProvider map={map}>\n          <Map />\n          <Drawer\n            title=\"react-geo-application\"\n            placement=\"right\"\n            onClose={this.toggleDrawer}\n            visible={this.state.visible}\n            mask={false}\n          >\n            <MappifiedNominatimSearch key=\"search\" />\n            <MappifiedMeasureButton\n              key=\"measureButton\"\n              name=\"line\"\n              measureType=\"line\"\n              icon=\"pencil\"\n            >\n              Strecke messen\n            </MappifiedMeasureButton>\n            <MappifiedLayerTree layerGroup={layerGroup} />\n          </Drawer>\n          <SimpleButton\n            style={{ position: \"fixed\", top: \"30px\", right: \"30px\" }}\n            onClick={this.toggleDrawer}\n            icon=\"bars\"\n          />\n        </MapProvider>\n      </div>\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}