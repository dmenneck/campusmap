{"ast":null,"code":"/**\n * @module ol/source/TileImage\n */\nimport { ENABLE_RASTER_REPROJECTION } from '../reproj/common.js';\nimport { getUid, inherits } from '../util.js';\nimport ImageTile from '../ImageTile.js';\nimport TileCache from '../TileCache.js';\nimport TileState from '../TileState.js';\nimport { listen } from '../events.js';\nimport EventType from '../events/EventType.js';\nimport { equivalent, get as getProjection } from '../proj.js';\nimport ReprojTile from '../reproj/Tile.js';\nimport UrlTile from '../source/UrlTile.js';\nimport { getKey, getKeyZXY } from '../tilecoord.js';\nimport { getForProjection as getTileGridForProjection } from '../tilegrid.js';\n/**\n * @typedef {Object} Options\n * @property {module:ol/source/Source~AttributionLike} [attributions] Attributions.\n * @property {number} [cacheSize=2048] Cache size.\n * @property {null|string} [crossOrigin] The `crossOrigin` attribute for loaded images.  Note that\n * you must provide a `crossOrigin` value if you are using the WebGL renderer or if you want to\n * access pixel data with the Canvas renderer.  See\n * {@link https://developer.mozilla.org/en-US/docs/Web/HTML/CORS_enabled_image} for more detail.\n * @property {boolean} [opaque=true] Whether the layer is opaque.\n * @property {module:ol/proj~ProjectionLike} projection Projection.\n * @property {boolean} [reprojectionErrorThreshold=0.5] Maximum allowed reprojection error (in pixels).\n * Higher values can increase reprojection performance, but decrease precision.\n * @property {module:ol/source/State} [state] Source state.\n * @property {module:ol/ImageTile~TileClass} [tileClass] Class used to instantiate image tiles.\n * Default is {@link module:ol/ImageTile~ImageTile}.\n * @property {module:ol/tilegrid/TileGrid} [tileGrid] Tile grid.\n * @property {module:ol/Tile~LoadFunction} [tileLoadFunction] Optional function to load a tile given a URL. The default is\n * ```js\n * function(imageTile, src) {\n *   imageTile.getImage().src = src;\n * };\n * ```\n * @property {number} [tilePixelRatio=1] The pixel ratio used by the tile service. For example, if the tile\n * service advertizes 256px by 256px tiles but actually sends 512px\n * by 512px images (for retina/hidpi devices) then `tilePixelRatio`\n * should be set to `2`.\n * @property {module:ol/Tile~UrlFunction} [tileUrlFunction] Optional function to get tile URL given a tile coordinate and the projection.\n * @property {string} [url] URL template. Must include `{x}`, `{y}` or `{-y}`, and `{z}` placeholders.\n * A `{?-?}` template pattern, for example `subdomain{a-f}.domain.com`, may be\n * used instead of defining each one separately in the `urls` option.\n * @property {Array.<string>} [urls] An array of URL templates.\n * @property {boolean} [wrapX] Whether to wrap the world horizontally. The default, is to\n * request out-of-bounds tiles from the server. When set to `false`, only one\n * world will be rendered. When set to `true`, tiles will be requested for one\n * world only, but they will be wrapped horizontally to render multiple worlds.\n * @property {number} [transition] Duration of the opacity transition for rendering.\n * To disable the opacity transition, pass `transition: 0`.\n */\n\n/**\n * @classdesc\n * Base class for sources providing images divided into a tile grid.\n *\n * @constructor\n * @fires module:ol/source/Tile~TileSourceEvent\n * @extends {module:ol/source/UrlTile}\n * @param {module:ol/source/TileImage~Options=} options Image tile options.\n * @api\n */\n\nconst TileImage = function (options) {\n  UrlTile.call(this, {\n    attributions: options.attributions,\n    cacheSize: options.cacheSize,\n    extent: options.extent,\n    opaque: options.opaque,\n    projection: options.projection,\n    state: options.state,\n    tileGrid: options.tileGrid,\n    tileLoadFunction: options.tileLoadFunction ? options.tileLoadFunction : defaultTileLoadFunction,\n    tilePixelRatio: options.tilePixelRatio,\n    tileUrlFunction: options.tileUrlFunction,\n    url: options.url,\n    urls: options.urls,\n    wrapX: options.wrapX,\n    transition: options.transition\n  });\n  /**\n   * @protected\n   * @type {?string}\n   */\n\n  this.crossOrigin = options.crossOrigin !== undefined ? options.crossOrigin : null;\n  /**\n   * @protected\n   * @type {function(new: module:ol/ImageTile, module:ol/tilecoord~TileCoord, module:ol/TileState, string,\n   *        ?string, module:ol/Tile~LoadFunction, module:ol/Tile~Options=)}\n   */\n\n  this.tileClass = options.tileClass !== undefined ? options.tileClass : ImageTile;\n  /**\n   * @protected\n   * @type {!Object.<string, module:ol/TileCache>}\n   */\n\n  this.tileCacheForProjection = {};\n  /**\n   * @protected\n   * @type {!Object.<string, module:ol/tilegrid/TileGrid>}\n   */\n\n  this.tileGridForProjection = {};\n  /**\n   * @private\n   * @type {number|undefined}\n   */\n\n  this.reprojectionErrorThreshold_ = options.reprojectionErrorThreshold;\n  /**\n   * @private\n   * @type {boolean}\n   */\n\n  this.renderReprojectionEdges_ = false;\n};\n\ninherits(TileImage, UrlTile);\n/**\n * @inheritDoc\n */\n\nTileImage.prototype.canExpireCache = function () {\n  if (!ENABLE_RASTER_REPROJECTION) {\n    return UrlTile.prototype.canExpireCache.call(this);\n  }\n\n  if (this.tileCache.canExpireCache()) {\n    return true;\n  } else {\n    for (const key in this.tileCacheForProjection) {\n      if (this.tileCacheForProjection[key].canExpireCache()) {\n        return true;\n      }\n    }\n  }\n\n  return false;\n};\n/**\n * @inheritDoc\n */\n\n\nTileImage.prototype.expireCache = function (projection, usedTiles) {\n  if (!ENABLE_RASTER_REPROJECTION) {\n    UrlTile.prototype.expireCache.call(this, projection, usedTiles);\n    return;\n  }\n\n  const usedTileCache = this.getTileCacheForProjection(projection);\n  this.tileCache.expireCache(this.tileCache == usedTileCache ? usedTiles : {});\n\n  for (const id in this.tileCacheForProjection) {\n    const tileCache = this.tileCacheForProjection[id];\n    tileCache.expireCache(tileCache == usedTileCache ? usedTiles : {});\n  }\n};\n/**\n * @inheritDoc\n */\n\n\nTileImage.prototype.getGutter = function (projection) {\n  if (ENABLE_RASTER_REPROJECTION && this.getProjection() && projection && !equivalent(this.getProjection(), projection)) {\n    return 0;\n  } else {\n    return this.getGutterInternal();\n  }\n};\n/**\n * @protected\n * @return {number} Gutter.\n */\n\n\nTileImage.prototype.getGutterInternal = function () {\n  return 0;\n};\n/**\n * @inheritDoc\n */\n\n\nTileImage.prototype.getOpaque = function (projection) {\n  if (ENABLE_RASTER_REPROJECTION && this.getProjection() && projection && !equivalent(this.getProjection(), projection)) {\n    return false;\n  } else {\n    return UrlTile.prototype.getOpaque.call(this, projection);\n  }\n};\n/**\n * @inheritDoc\n */\n\n\nTileImage.prototype.getTileGridForProjection = function (projection) {\n  if (!ENABLE_RASTER_REPROJECTION) {\n    return UrlTile.prototype.getTileGridForProjection.call(this, projection);\n  }\n\n  const thisProj = this.getProjection();\n\n  if (this.tileGrid && (!thisProj || equivalent(thisProj, projection))) {\n    return this.tileGrid;\n  } else {\n    const projKey = getUid(projection).toString();\n\n    if (!(projKey in this.tileGridForProjection)) {\n      this.tileGridForProjection[projKey] = getTileGridForProjection(projection);\n    }\n\n    return (\n      /** @type {!module:ol/tilegrid/TileGrid} */\n      this.tileGridForProjection[projKey]\n    );\n  }\n};\n/**\n * @inheritDoc\n */\n\n\nTileImage.prototype.getTileCacheForProjection = function (projection) {\n  if (!ENABLE_RASTER_REPROJECTION) {\n    return UrlTile.prototype.getTileCacheForProjection.call(this, projection);\n  }\n\n  const thisProj = this.getProjection();\n\n  if (!thisProj || equivalent(thisProj, projection)) {\n    return this.tileCache;\n  } else {\n    const projKey = getUid(projection).toString();\n\n    if (!(projKey in this.tileCacheForProjection)) {\n      this.tileCacheForProjection[projKey] = new TileCache(this.tileCache.highWaterMark);\n    }\n\n    return this.tileCacheForProjection[projKey];\n  }\n};\n/**\n * @param {number} z Tile coordinate z.\n * @param {number} x Tile coordinate x.\n * @param {number} y Tile coordinate y.\n * @param {number} pixelRatio Pixel ratio.\n * @param {module:ol/proj/Projection} projection Projection.\n * @param {string} key The key set on the tile.\n * @return {!module:ol/Tile} Tile.\n * @private\n */\n\n\nTileImage.prototype.createTile_ = function (z, x, y, pixelRatio, projection, key) {\n  const tileCoord = [z, x, y];\n  const urlTileCoord = this.getTileCoordForTileUrlFunction(tileCoord, projection);\n  const tileUrl = urlTileCoord ? this.tileUrlFunction(urlTileCoord, pixelRatio, projection) : undefined;\n  const tile = new this.tileClass(tileCoord, tileUrl !== undefined ? TileState.IDLE : TileState.EMPTY, tileUrl !== undefined ? tileUrl : '', this.crossOrigin, this.tileLoadFunction, this.tileOptions);\n  tile.key = key;\n  listen(tile, EventType.CHANGE, this.handleTileChange, this);\n  return tile;\n};\n/**\n * @inheritDoc\n */\n\n\nTileImage.prototype.getTile = function (z, x, y, pixelRatio, projection) {\n  const sourceProjection =\n  /** @type {!module:ol/proj/Projection} */\n  this.getProjection();\n\n  if (!ENABLE_RASTER_REPROJECTION || !sourceProjection || !projection || equivalent(sourceProjection, projection)) {\n    return this.getTileInternal(z, x, y, pixelRatio, sourceProjection || projection);\n  } else {\n    const cache = this.getTileCacheForProjection(projection);\n    const tileCoord = [z, x, y];\n    let tile;\n    const tileCoordKey = getKey(tileCoord);\n\n    if (cache.containsKey(tileCoordKey)) {\n      tile =\n      /** @type {!module:ol/Tile} */\n      cache.get(tileCoordKey);\n    }\n\n    const key = this.getKey();\n\n    if (tile && tile.key == key) {\n      return tile;\n    } else {\n      const sourceTileGrid = this.getTileGridForProjection(sourceProjection);\n      const targetTileGrid = this.getTileGridForProjection(projection);\n      const wrappedTileCoord = this.getTileCoordForTileUrlFunction(tileCoord, projection);\n      const newTile = new ReprojTile(sourceProjection, sourceTileGrid, projection, targetTileGrid, tileCoord, wrappedTileCoord, this.getTilePixelRatio(pixelRatio), this.getGutterInternal(), function (z, x, y, pixelRatio) {\n        return this.getTileInternal(z, x, y, pixelRatio, sourceProjection);\n      }.bind(this), this.reprojectionErrorThreshold_, this.renderReprojectionEdges_);\n      newTile.key = key;\n\n      if (tile) {\n        newTile.interimTile = tile;\n        newTile.refreshInterimChain();\n        cache.replace(tileCoordKey, newTile);\n      } else {\n        cache.set(tileCoordKey, newTile);\n      }\n\n      return newTile;\n    }\n  }\n};\n/**\n * @param {number} z Tile coordinate z.\n * @param {number} x Tile coordinate x.\n * @param {number} y Tile coordinate y.\n * @param {number} pixelRatio Pixel ratio.\n * @param {!module:ol/proj/Projection} projection Projection.\n * @return {!module:ol/Tile} Tile.\n * @protected\n */\n\n\nTileImage.prototype.getTileInternal = function (z, x, y, pixelRatio, projection) {\n  let tile = null;\n  const tileCoordKey = getKeyZXY(z, x, y);\n  const key = this.getKey();\n\n  if (!this.tileCache.containsKey(tileCoordKey)) {\n    tile = this.createTile_(z, x, y, pixelRatio, projection, key);\n    this.tileCache.set(tileCoordKey, tile);\n  } else {\n    tile = this.tileCache.get(tileCoordKey);\n\n    if (tile.key != key) {\n      // The source's params changed. If the tile has an interim tile and if we\n      // can use it then we use it. Otherwise we create a new tile.  In both\n      // cases we attempt to assign an interim tile to the new tile.\n      const interimTile = tile;\n      tile = this.createTile_(z, x, y, pixelRatio, projection, key); //make the new tile the head of the list,\n\n      if (interimTile.getState() == TileState.IDLE) {\n        //the old tile hasn't begun loading yet, and is now outdated, so we can simply discard it\n        tile.interimTile = interimTile.interimTile;\n      } else {\n        tile.interimTile = interimTile;\n      }\n\n      tile.refreshInterimChain();\n      this.tileCache.replace(tileCoordKey, tile);\n    }\n  }\n\n  return tile;\n};\n/**\n * Sets whether to render reprojection edges or not (usually for debugging).\n * @param {boolean} render Render the edges.\n * @api\n */\n\n\nTileImage.prototype.setRenderReprojectionEdges = function (render) {\n  if (!ENABLE_RASTER_REPROJECTION || this.renderReprojectionEdges_ == render) {\n    return;\n  }\n\n  this.renderReprojectionEdges_ = render;\n\n  for (const id in this.tileCacheForProjection) {\n    this.tileCacheForProjection[id].clear();\n  }\n\n  this.changed();\n};\n/**\n * Sets the tile grid to use when reprojecting the tiles to the given\n * projection instead of the default tile grid for the projection.\n *\n * This can be useful when the default tile grid cannot be created\n * (e.g. projection has no extent defined) or\n * for optimization reasons (custom tile size, resolutions, ...).\n *\n * @param {module:ol/proj~ProjectionLike} projection Projection.\n * @param {module:ol/tilegrid/TileGrid} tilegrid Tile grid to use for the projection.\n * @api\n */\n\n\nTileImage.prototype.setTileGridForProjection = function (projection, tilegrid) {\n  if (ENABLE_RASTER_REPROJECTION) {\n    const proj = getProjection(projection);\n\n    if (proj) {\n      const projKey = getUid(proj).toString();\n\n      if (!(projKey in this.tileGridForProjection)) {\n        this.tileGridForProjection[projKey] = tilegrid;\n      }\n    }\n  }\n};\n/**\n * @param {module:ol/ImageTile} imageTile Image tile.\n * @param {string} src Source.\n */\n\n\nfunction defaultTileLoadFunction(imageTile, src) {\n  imageTile.getImage().src = src;\n}\n\nexport default TileImage;","map":null,"metadata":{},"sourceType":"module"}