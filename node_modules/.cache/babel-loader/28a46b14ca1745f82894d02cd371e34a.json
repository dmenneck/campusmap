{"ast":null,"code":"/**\n * ag-grid-community - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components\n * @version v21.2.2\n * @link http://www.ag-grid.com/\n * @license MIT\n */\n\"use strict\";\n\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nvar __metadata = this && this.__metadata || function (k, v) {\n  if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar column_1 = require(\"../entities/column\");\n\nvar context_1 = require(\"../context/context\");\n\nvar gridOptionsWrapper_1 = require(\"../gridOptionsWrapper\");\n/**\n * For Master Detail, it is required to keep components between expanding & collapsing parents.\n * For example a user expands row A (and shows a detail grid for this row), then when row A\n * is closed, we want to keep the detail grid, so next time row A is expanded the detail grid\n * is showed with it's context intact, eg if user sorted in the detail grid, that sort should\n * still be applied after the detail grid is shown for the second time.\n */\n\n\nvar DetailRowCompCache =\n/** @class */\nfunction () {\n  function DetailRowCompCache() {\n    this.cacheItems = [];\n  }\n\n  DetailRowCompCache.prototype.postConstruct = function () {\n    this.active = this.gridOptionsWrapper.isKeepDetailRows();\n    this.maxCacheSize = this.gridOptionsWrapper.getKeepDetailRowsCount();\n  };\n\n  DetailRowCompCache.prototype.addOrDestroy = function (rowNode, pinned, comp) {\n    // only accept detail rows\n    var doNotUseCache = !this.active || !rowNode.detail;\n\n    if (doNotUseCache) {\n      this.destroyFullWidthRow(comp);\n      return;\n    }\n\n    var item = this.getCacheItem(rowNode, true); // put the comp in the right location of the item.\n    // we also destroy any previous comp - this should never happen\n    // as the logic outside of this class shouldn't be adding same item to the\n    // cache twice, however we cater for it in case in future releases code\n    // outside of this class is changed and this could happen.\n\n    switch (pinned) {\n      case column_1.Column.PINNED_LEFT:\n        this.destroyFullWidthRow(item.left);\n        item.left = comp;\n        break;\n\n      case column_1.Column.PINNED_RIGHT:\n        this.destroyFullWidthRow(item.right);\n        item.right = comp;\n        break;\n\n      default:\n        this.destroyFullWidthRow(item.center);\n        item.center = comp;\n        break;\n    }\n\n    this.cacheItems.sort(function (a, b) {\n      return b.lastAccessedTime - a.lastAccessedTime;\n    });\n    this.purgeCache(this.maxCacheSize);\n  };\n\n  DetailRowCompCache.prototype.getCacheItem = function (rowNode, autoCreate) {\n    if (autoCreate === void 0) {\n      autoCreate = false;\n    }\n\n    var res;\n\n    for (var i = 0; i < this.cacheItems.length; i++) {\n      var item = this.cacheItems[i];\n\n      if (item.rowNode === rowNode) {\n        res = item;\n        break;\n      }\n    }\n\n    if (!res && autoCreate) {\n      res = {\n        rowNode: rowNode\n      };\n      this.cacheItems.push(res);\n    }\n\n    if (res) {\n      this.stampCacheItem(res);\n    }\n\n    return res;\n  };\n\n  DetailRowCompCache.prototype.stampCacheItem = function (item) {\n    item.lastAccessedTime = new Date().getTime();\n  };\n\n  DetailRowCompCache.prototype.destroyFullWidthRow = function (comp) {\n    if (comp && comp.destroy) {\n      comp.destroy();\n    }\n  };\n\n  DetailRowCompCache.prototype.purgeCache = function (startIndex) {\n    // delete all rows past the index of interest\n    for (var i = startIndex; i < this.cacheItems.length; i++) {\n      var item = this.cacheItems[i];\n      this.destroyFullWidthRow(item.center);\n      this.destroyFullWidthRow(item.left);\n      this.destroyFullWidthRow(item.right);\n    } // change the length of the array so it no longer contains the deleted items\n\n\n    if (this.cacheItems.length > startIndex) {\n      this.cacheItems.length = startIndex;\n    }\n  };\n\n  DetailRowCompCache.prototype.get = function (rowNode, pinned) {\n    if (!rowNode.detail) {\n      return undefined;\n    }\n\n    var item = this.getCacheItem(rowNode);\n    var res;\n\n    if (item) {\n      switch (pinned) {\n        case column_1.Column.PINNED_LEFT:\n          if (item.left) {\n            res = item.left;\n            item.left = undefined;\n          }\n\n          break;\n\n        case column_1.Column.PINNED_RIGHT:\n          if (item.right) {\n            res = item.right;\n            item.right = undefined;\n          }\n\n          break;\n\n        default:\n          if (item.center) {\n            res = item.center;\n            item.center = undefined;\n          }\n\n          break;\n      }\n    }\n\n    return res;\n  };\n\n  DetailRowCompCache.prototype.destroy = function () {\n    this.purgeCache(0);\n  };\n\n  __decorate([context_1.Autowired('gridOptionsWrapper'), __metadata(\"design:type\", gridOptionsWrapper_1.GridOptionsWrapper)], DetailRowCompCache.prototype, \"gridOptionsWrapper\", void 0);\n\n  __decorate([context_1.PostConstruct, __metadata(\"design:type\", Function), __metadata(\"design:paramtypes\", []), __metadata(\"design:returntype\", void 0)], DetailRowCompCache.prototype, \"postConstruct\", null);\n\n  __decorate([context_1.PreDestroy, __metadata(\"design:type\", Function), __metadata(\"design:paramtypes\", []), __metadata(\"design:returntype\", void 0)], DetailRowCompCache.prototype, \"destroy\", null);\n\n  DetailRowCompCache = __decorate([context_1.Bean('detailRowCompCache')], DetailRowCompCache);\n  return DetailRowCompCache;\n}();\n\nexports.DetailRowCompCache = DetailRowCompCache;","map":{"version":3,"sources":["/Users/dirkmennecke77/Desktop/Lageplan/node_modules/ag-grid-community/dist/lib/rendering/detailRowCompCache.js"],"names":["__decorate","decorators","target","key","desc","c","arguments","length","r","Object","getOwnPropertyDescriptor","d","Reflect","decorate","i","defineProperty","__metadata","k","v","metadata","exports","value","column_1","require","context_1","gridOptionsWrapper_1","DetailRowCompCache","cacheItems","prototype","postConstruct","active","gridOptionsWrapper","isKeepDetailRows","maxCacheSize","getKeepDetailRowsCount","addOrDestroy","rowNode","pinned","comp","doNotUseCache","detail","destroyFullWidthRow","item","getCacheItem","Column","PINNED_LEFT","left","PINNED_RIGHT","right","center","sort","a","b","lastAccessedTime","purgeCache","autoCreate","res","push","stampCacheItem","Date","getTime","destroy","startIndex","get","undefined","Autowired","GridOptionsWrapper","PostConstruct","Function","PreDestroy","Bean"],"mappings":"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","sourcesContent":["/**\n * ag-grid-community - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components\n * @version v21.2.2\n * @link http://www.ag-grid.com/\n * @license MIT\n */\n\"use strict\";\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __metadata = (this && this.__metadata) || function (k, v) {\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar column_1 = require(\"../entities/column\");\nvar context_1 = require(\"../context/context\");\nvar gridOptionsWrapper_1 = require(\"../gridOptionsWrapper\");\n/**\n * For Master Detail, it is required to keep components between expanding & collapsing parents.\n * For example a user expands row A (and shows a detail grid for this row), then when row A\n * is closed, we want to keep the detail grid, so next time row A is expanded the detail grid\n * is showed with it's context intact, eg if user sorted in the detail grid, that sort should\n * still be applied after the detail grid is shown for the second time.\n */\nvar DetailRowCompCache = /** @class */ (function () {\n    function DetailRowCompCache() {\n        this.cacheItems = [];\n    }\n    DetailRowCompCache.prototype.postConstruct = function () {\n        this.active = this.gridOptionsWrapper.isKeepDetailRows();\n        this.maxCacheSize = this.gridOptionsWrapper.getKeepDetailRowsCount();\n    };\n    DetailRowCompCache.prototype.addOrDestroy = function (rowNode, pinned, comp) {\n        // only accept detail rows\n        var doNotUseCache = !this.active || !rowNode.detail;\n        if (doNotUseCache) {\n            this.destroyFullWidthRow(comp);\n            return;\n        }\n        var item = this.getCacheItem(rowNode, true);\n        // put the comp in the right location of the item.\n        // we also destroy any previous comp - this should never happen\n        // as the logic outside of this class shouldn't be adding same item to the\n        // cache twice, however we cater for it in case in future releases code\n        // outside of this class is changed and this could happen.\n        switch (pinned) {\n            case column_1.Column.PINNED_LEFT:\n                this.destroyFullWidthRow(item.left);\n                item.left = comp;\n                break;\n            case column_1.Column.PINNED_RIGHT:\n                this.destroyFullWidthRow(item.right);\n                item.right = comp;\n                break;\n            default:\n                this.destroyFullWidthRow(item.center);\n                item.center = comp;\n                break;\n        }\n        this.cacheItems.sort(function (a, b) {\n            return b.lastAccessedTime - a.lastAccessedTime;\n        });\n        this.purgeCache(this.maxCacheSize);\n    };\n    DetailRowCompCache.prototype.getCacheItem = function (rowNode, autoCreate) {\n        if (autoCreate === void 0) { autoCreate = false; }\n        var res;\n        for (var i = 0; i < this.cacheItems.length; i++) {\n            var item = this.cacheItems[i];\n            if (item.rowNode === rowNode) {\n                res = item;\n                break;\n            }\n        }\n        if (!res && autoCreate) {\n            res = {\n                rowNode: rowNode\n            };\n            this.cacheItems.push(res);\n        }\n        if (res) {\n            this.stampCacheItem(res);\n        }\n        return res;\n    };\n    DetailRowCompCache.prototype.stampCacheItem = function (item) {\n        item.lastAccessedTime = new Date().getTime();\n    };\n    DetailRowCompCache.prototype.destroyFullWidthRow = function (comp) {\n        if (comp && comp.destroy) {\n            comp.destroy();\n        }\n    };\n    DetailRowCompCache.prototype.purgeCache = function (startIndex) {\n        // delete all rows past the index of interest\n        for (var i = startIndex; i < this.cacheItems.length; i++) {\n            var item = this.cacheItems[i];\n            this.destroyFullWidthRow(item.center);\n            this.destroyFullWidthRow(item.left);\n            this.destroyFullWidthRow(item.right);\n        }\n        // change the length of the array so it no longer contains the deleted items\n        if (this.cacheItems.length > startIndex) {\n            this.cacheItems.length = startIndex;\n        }\n    };\n    DetailRowCompCache.prototype.get = function (rowNode, pinned) {\n        if (!rowNode.detail) {\n            return undefined;\n        }\n        var item = this.getCacheItem(rowNode);\n        var res;\n        if (item) {\n            switch (pinned) {\n                case column_1.Column.PINNED_LEFT:\n                    if (item.left) {\n                        res = item.left;\n                        item.left = undefined;\n                    }\n                    break;\n                case column_1.Column.PINNED_RIGHT:\n                    if (item.right) {\n                        res = item.right;\n                        item.right = undefined;\n                    }\n                    break;\n                default:\n                    if (item.center) {\n                        res = item.center;\n                        item.center = undefined;\n                    }\n                    break;\n            }\n        }\n        return res;\n    };\n    DetailRowCompCache.prototype.destroy = function () {\n        this.purgeCache(0);\n    };\n    __decorate([\n        context_1.Autowired('gridOptionsWrapper'),\n        __metadata(\"design:type\", gridOptionsWrapper_1.GridOptionsWrapper)\n    ], DetailRowCompCache.prototype, \"gridOptionsWrapper\", void 0);\n    __decorate([\n        context_1.PostConstruct,\n        __metadata(\"design:type\", Function),\n        __metadata(\"design:paramtypes\", []),\n        __metadata(\"design:returntype\", void 0)\n    ], DetailRowCompCache.prototype, \"postConstruct\", null);\n    __decorate([\n        context_1.PreDestroy,\n        __metadata(\"design:type\", Function),\n        __metadata(\"design:paramtypes\", []),\n        __metadata(\"design:returntype\", void 0)\n    ], DetailRowCompCache.prototype, \"destroy\", null);\n    DetailRowCompCache = __decorate([\n        context_1.Bean('detailRowCompCache')\n    ], DetailRowCompCache);\n    return DetailRowCompCache;\n}());\nexports.DetailRowCompCache = DetailRowCompCache;\n"]},"metadata":{},"sourceType":"script"}