{"ast":null,"code":"/**\n * ag-grid-community - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components\n * @version v21.2.2\n * @link http://www.ag-grid.com/\n * @license MIT\n */\n\"use strict\";\n\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nvar __metadata = this && this.__metadata || function (k, v) {\n  if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar constants_1 = require(\"../../constants\");\n\nvar gridOptionsWrapper_1 = require(\"../../gridOptionsWrapper\");\n\nvar columnApi_1 = require(\"../../columnController/columnApi\");\n\nvar columnController_1 = require(\"../../columnController/columnController\");\n\nvar filterManager_1 = require(\"../../filter/filterManager\");\n\nvar rowNode_1 = require(\"../../entities/rowNode\");\n\nvar eventService_1 = require(\"../../eventService\");\n\nvar events_1 = require(\"../../events\");\n\nvar context_1 = require(\"../../context/context\");\n\nvar selectionController_1 = require(\"../../selectionController\");\n\nvar clientSideNodeManager_1 = require(\"./clientSideNodeManager\");\n\nvar changedPath_1 = require(\"./changedPath\");\n\nvar valueService_1 = require(\"../../valueService/valueService\");\n\nvar valueCache_1 = require(\"../../valueService/valueCache\");\n\nvar gridApi_1 = require(\"../../gridApi\");\n\nvar utils_1 = require(\"../../utils\");\n\nvar RecursionType;\n\n(function (RecursionType) {\n  RecursionType[RecursionType[\"Normal\"] = 0] = \"Normal\";\n  RecursionType[RecursionType[\"AfterFilter\"] = 1] = \"AfterFilter\";\n  RecursionType[RecursionType[\"AfterFilterAndSort\"] = 2] = \"AfterFilterAndSort\";\n  RecursionType[RecursionType[\"PivotNodes\"] = 3] = \"PivotNodes\";\n})(RecursionType || (RecursionType = {}));\n\nvar ClientSideRowModel =\n/** @class */\nfunction () {\n  function ClientSideRowModel() {}\n\n  ClientSideRowModel.prototype.init = function () {\n    var refreshEverythingFunc = this.refreshModel.bind(this, {\n      step: constants_1.Constants.STEP_EVERYTHING\n    });\n    var refreshEverythingAfterColsChangedFunc = this.refreshModel.bind(this, {\n      step: constants_1.Constants.STEP_EVERYTHING,\n      afterColumnsChanged: true\n    });\n    this.eventService.addModalPriorityEventListener(events_1.Events.EVENT_COLUMN_EVERYTHING_CHANGED, refreshEverythingAfterColsChangedFunc);\n    this.eventService.addModalPriorityEventListener(events_1.Events.EVENT_COLUMN_ROW_GROUP_CHANGED, refreshEverythingFunc);\n    this.eventService.addModalPriorityEventListener(events_1.Events.EVENT_COLUMN_VALUE_CHANGED, this.onValueChanged.bind(this));\n    this.eventService.addModalPriorityEventListener(events_1.Events.EVENT_COLUMN_PIVOT_CHANGED, this.refreshModel.bind(this, {\n      step: constants_1.Constants.STEP_PIVOT\n    }));\n    this.eventService.addModalPriorityEventListener(events_1.Events.EVENT_ROW_GROUP_OPENED, this.onRowGroupOpened.bind(this));\n    this.eventService.addModalPriorityEventListener(events_1.Events.EVENT_FILTER_CHANGED, this.onFilterChanged.bind(this));\n    this.eventService.addModalPriorityEventListener(events_1.Events.EVENT_SORT_CHANGED, this.onSortChanged.bind(this));\n    this.eventService.addModalPriorityEventListener(events_1.Events.EVENT_COLUMN_PIVOT_MODE_CHANGED, refreshEverythingFunc);\n    var refreshMapFunc = this.refreshModel.bind(this, {\n      step: constants_1.Constants.STEP_MAP,\n      keepRenderedRows: true,\n      animate: true\n    });\n    this.gridOptionsWrapper.addEventListener(gridOptionsWrapper_1.GridOptionsWrapper.PROP_GROUP_REMOVE_SINGLE_CHILDREN, refreshMapFunc);\n    this.gridOptionsWrapper.addEventListener(gridOptionsWrapper_1.GridOptionsWrapper.PROP_GROUP_REMOVE_LOWEST_SINGLE_CHILDREN, refreshMapFunc);\n    this.rootNode = new rowNode_1.RowNode();\n    this.nodeManager = new clientSideNodeManager_1.ClientSideNodeManager(this.rootNode, this.gridOptionsWrapper, this.context, this.eventService, this.columnController, this.gridApi, this.columnApi, this.selectionController);\n    this.context.wireBean(this.rootNode);\n  };\n\n  ClientSideRowModel.prototype.ensureRowHeightsValid = function (startPixel, endPixel, startLimitIndex, endLimitIndex) {\n    var atLeastOneChange;\n    var res = false; // we do this multiple times as changing the row heights can also change the first and last rows,\n    // so the first pass can make lots of rows smaller, which means the second pass we end up changing\n    // more rows.\n\n    do {\n      atLeastOneChange = false;\n      var rowAtStartPixel = this.getRowIndexAtPixel(startPixel);\n      var rowAtEndPixel = this.getRowIndexAtPixel(endPixel); // keep check to current page if doing pagination\n\n      var firstRow = Math.max(rowAtStartPixel, startLimitIndex);\n      var lastRow = Math.min(rowAtEndPixel, endLimitIndex);\n\n      for (var rowIndex = firstRow; rowIndex <= lastRow; rowIndex++) {\n        var rowNode = this.getRow(rowIndex);\n\n        if (rowNode.rowHeightEstimated) {\n          var rowHeight = this.gridOptionsWrapper.getRowHeightForNode(rowNode);\n          rowNode.setRowHeight(rowHeight.height);\n          atLeastOneChange = true;\n          res = true;\n        }\n      }\n\n      if (atLeastOneChange) {\n        this.setRowTops();\n      }\n    } while (atLeastOneChange);\n\n    return res;\n  };\n\n  ClientSideRowModel.prototype.setRowTops = function () {\n    var nextRowTop = 0;\n\n    for (var i = 0; i < this.rowsToDisplay.length; i++) {\n      // we don't estimate if doing fullHeight or autoHeight, as all rows get rendered all the time\n      // with these two layouts.\n      var allowEstimate = this.gridOptionsWrapper.getDomLayout() === constants_1.Constants.DOM_LAYOUT_NORMAL;\n      var rowNode = this.rowsToDisplay[i];\n\n      if (utils_1._.missing(rowNode.rowHeight)) {\n        var rowHeight = this.gridOptionsWrapper.getRowHeightForNode(rowNode, allowEstimate);\n        rowNode.setRowHeight(rowHeight.height, rowHeight.estimated);\n      }\n\n      rowNode.setRowTop(nextRowTop);\n      rowNode.setRowIndex(i);\n      nextRowTop += rowNode.rowHeight;\n    }\n  };\n\n  ClientSideRowModel.prototype.resetRowTops = function (rowNode, changedPath) {\n    rowNode.clearRowTop();\n\n    if (rowNode.hasChildren()) {\n      if (rowNode.childrenAfterGroup) {\n        // if a changedPath is active, it means we are here because of a transaction update or\n        // a change detection. neither of these impacts the open/closed state of groups. so if\n        // a group is not open this time, it was not open last time. so we know all closed groups\n        // already have their top positions cleared. so there is no need to traverse all the way\n        // when changedPath is active and the rowNode is not expanded.\n        var skipChildren = changedPath.isActive() && !rowNode.expanded;\n\n        if (!skipChildren) {\n          for (var i = 0; i < rowNode.childrenAfterGroup.length; i++) {\n            this.resetRowTops(rowNode.childrenAfterGroup[i], changedPath);\n          }\n        }\n      }\n\n      if (rowNode.sibling) {\n        rowNode.sibling.clearRowTop();\n      }\n    }\n\n    if (rowNode.detailNode) {\n      rowNode.detailNode.clearRowTop();\n    }\n  }; // returns false if row was moved, otherwise true\n\n\n  ClientSideRowModel.prototype.ensureRowAtPixel = function (rowNode, pixel) {\n    var indexAtPixelNow = this.getRowIndexAtPixel(pixel);\n    var rowNodeAtPixelNow = this.getRow(indexAtPixelNow);\n\n    if (rowNodeAtPixelNow === rowNode) {\n      return false;\n    }\n\n    utils_1._.removeFromArray(this.rootNode.allLeafChildren, rowNode);\n\n    utils_1._.insertIntoArray(this.rootNode.allLeafChildren, rowNode, indexAtPixelNow);\n\n    this.refreshModel({\n      step: constants_1.Constants.STEP_EVERYTHING,\n      keepRenderedRows: true,\n      animate: true,\n      keepEditingRows: true\n    });\n    return true;\n  };\n\n  ClientSideRowModel.prototype.isLastRowFound = function () {\n    return true;\n  };\n\n  ClientSideRowModel.prototype.getRowCount = function () {\n    if (this.rowsToDisplay) {\n      return this.rowsToDisplay.length;\n    } else {\n      return 0;\n    }\n  };\n\n  ClientSideRowModel.prototype.getTopLevelRowCount = function () {\n    var showingRootNode = this.rowsToDisplay && this.rowsToDisplay[0] === this.rootNode;\n\n    if (showingRootNode) {\n      return 1;\n    } else {\n      return this.rootNode.childrenAfterFilter ? this.rootNode.childrenAfterFilter.length : 0;\n    }\n  };\n\n  ClientSideRowModel.prototype.getTopLevelRowDisplayedIndex = function (topLevelIndex) {\n    var showingRootNode = this.rowsToDisplay && this.rowsToDisplay[0] === this.rootNode;\n\n    if (showingRootNode) {\n      return topLevelIndex;\n    } else {\n      var rowNode = this.rootNode.childrenAfterSort[topLevelIndex];\n\n      if (this.gridOptionsWrapper.isGroupHideOpenParents()) {\n        // if hideOpenParents, and this row open, then this row is now displayed at this index, first child is\n        while (rowNode.expanded && rowNode.childrenAfterSort && rowNode.childrenAfterSort.length > 0) {\n          rowNode = rowNode.childrenAfterSort[0];\n        }\n      }\n\n      return rowNode.rowIndex;\n    }\n  };\n\n  ClientSideRowModel.prototype.getRowBounds = function (index) {\n    if (utils_1._.missing(this.rowsToDisplay)) {\n      return null;\n    }\n\n    var rowNode = this.rowsToDisplay[index];\n\n    if (rowNode) {\n      return {\n        rowTop: rowNode.rowTop,\n        rowHeight: rowNode.rowHeight\n      };\n    } else {\n      return null;\n    }\n  };\n\n  ClientSideRowModel.prototype.onRowGroupOpened = function () {\n    var animate = this.gridOptionsWrapper.isAnimateRows();\n    this.refreshModel({\n      step: constants_1.Constants.STEP_MAP,\n      keepRenderedRows: true,\n      animate: animate\n    });\n  };\n\n  ClientSideRowModel.prototype.onFilterChanged = function () {\n    var animate = this.gridOptionsWrapper.isAnimateRows();\n    this.refreshModel({\n      step: constants_1.Constants.STEP_FILTER,\n      keepRenderedRows: true,\n      animate: animate\n    });\n  };\n\n  ClientSideRowModel.prototype.onSortChanged = function () {\n    var animate = this.gridOptionsWrapper.isAnimateRows();\n    this.refreshModel({\n      step: constants_1.Constants.STEP_SORT,\n      keepRenderedRows: true,\n      animate: animate,\n      keepEditingRows: true\n    });\n  };\n\n  ClientSideRowModel.prototype.getType = function () {\n    return constants_1.Constants.ROW_MODEL_TYPE_CLIENT_SIDE;\n  };\n\n  ClientSideRowModel.prototype.onValueChanged = function () {\n    if (this.columnController.isPivotActive()) {\n      this.refreshModel({\n        step: constants_1.Constants.STEP_PIVOT\n      });\n    } else {\n      this.refreshModel({\n        step: constants_1.Constants.STEP_AGGREGATE\n      });\n    }\n  };\n\n  ClientSideRowModel.prototype.createChangePath = function (rowNodeTransactions) {\n    // for updates, if the row is updated at all, then we re-calc all the values\n    // in that row. we could compare each value to each old value, however if we\n    // did this, we would be calling the valueService twice, once on the old value\n    // and once on the new value. so it's less valueGetter calls if we just assume\n    // each column is different. that way the changedPath is used so that only\n    // the impacted parent rows are recalculated, parents who's children have\n    // not changed are not impacted.\n    var noTransactions = utils_1._.missingOrEmpty(rowNodeTransactions);\n\n    var changedPath = new changedPath_1.ChangedPath(false, this.rootNode);\n\n    if (noTransactions || this.gridOptionsWrapper.isTreeData()) {\n      changedPath.setInactive();\n    }\n\n    return changedPath;\n  };\n\n  ClientSideRowModel.prototype.refreshModel = function (params) {\n    // this goes through the pipeline of stages. what's in my head is similar\n    // to the diagram on this page:\n    // http://commons.apache.org/sandbox/commons-pipeline/pipeline_basics.html\n    // however we want to keep the results of each stage, hence we manually call\n    // each step rather than have them chain each other.\n    var _this = this; // fallthrough in below switch is on purpose,\n    // eg if STEP_FILTER, then all steps below this\n    // step get done\n    // let start: number;\n    // console.log('======= start =======');\n\n\n    var changedPath = this.createChangePath(params.rowNodeTransactions);\n\n    switch (params.step) {\n      case constants_1.Constants.STEP_EVERYTHING:\n        // start = new Date().getTime();\n        this.doRowGrouping(params.groupState, params.rowNodeTransactions, params.rowNodeOrder, changedPath, params.afterColumnsChanged);\n      // console.log('rowGrouping = ' + (new Date().getTime() - start));\n\n      case constants_1.Constants.STEP_FILTER:\n        // start = new Date().getTime();\n        this.doFilter(changedPath);\n      // console.log('filter = ' + (new Date().getTime() - start));\n\n      case constants_1.Constants.STEP_PIVOT:\n        this.doPivot(changedPath);\n\n      case constants_1.Constants.STEP_AGGREGATE:\n        // depends on agg fields\n        // start = new Date().getTime();\n        this.doAggregate(changedPath);\n      // console.log('aggregation = ' + (new Date().getTime() - start));\n\n      case constants_1.Constants.STEP_SORT:\n        // start = new Date().getTime();\n        this.doSort(params.rowNodeTransactions, changedPath);\n      // console.log('sort = ' + (new Date().getTime() - start));\n\n      case constants_1.Constants.STEP_MAP:\n        // start = new Date().getTime();\n        this.doRowsToDisplay();\n      // console.log('rowsToDisplay = ' + (new Date().getTime() - start));\n    } // set all row tops to null, then set row tops on all visible rows. if we don't\n    // do this, then the algorithm below only sets row tops, old row tops from old rows\n    // will still lie around\n\n\n    this.resetRowTops(this.rootNode, changedPath);\n    this.setRowTops();\n    var event = {\n      type: events_1.Events.EVENT_MODEL_UPDATED,\n      api: this.gridApi,\n      columnApi: this.columnApi,\n      animate: params.animate,\n      keepRenderedRows: params.keepRenderedRows,\n      newData: params.newData,\n      newPage: false\n    };\n    this.eventService.dispatchEvent(event);\n\n    if (this.$scope) {\n      window.setTimeout(function () {\n        _this.$scope.$apply();\n      }, 0);\n    }\n  };\n\n  ClientSideRowModel.prototype.isEmpty = function () {\n    var rowsMissing;\n\n    var doingLegacyTreeData = utils_1._.exists(this.gridOptionsWrapper.getNodeChildDetailsFunc());\n\n    if (doingLegacyTreeData) {\n      rowsMissing = utils_1._.missing(this.rootNode.childrenAfterGroup) || this.rootNode.childrenAfterGroup.length === 0;\n    } else {\n      rowsMissing = utils_1._.missing(this.rootNode.allLeafChildren) || this.rootNode.allLeafChildren.length === 0;\n    }\n\n    var empty = utils_1._.missing(this.rootNode) || rowsMissing || !this.columnController.isReady();\n    return empty;\n  };\n\n  ClientSideRowModel.prototype.isRowsToRender = function () {\n    return utils_1._.exists(this.rowsToDisplay) && this.rowsToDisplay.length > 0;\n  };\n\n  ClientSideRowModel.prototype.getNodesInRangeForSelection = function (firstInRange, lastInRange) {\n    // if lastSelectedNode is missing, we start at the first row\n    var firstRowHit = !lastInRange;\n    var lastRowHit = false;\n    var lastRow;\n    var result = [];\n    var groupsSelectChildren = this.gridOptionsWrapper.isGroupSelectsChildren();\n    this.forEachNodeAfterFilterAndSort(function (rowNode) {\n      var lookingForLastRow = firstRowHit && !lastRowHit; // check if we need to flip the select switch\n\n      if (!firstRowHit) {\n        if (rowNode === lastInRange || rowNode === firstInRange) {\n          firstRowHit = true;\n        }\n      }\n\n      var skipThisGroupNode = rowNode.group && groupsSelectChildren;\n\n      if (!skipThisGroupNode) {\n        var inRange = firstRowHit && !lastRowHit;\n        var childOfLastRow = rowNode.isParentOfNode(lastRow);\n\n        if (inRange || childOfLastRow) {\n          result.push(rowNode);\n        }\n      }\n\n      if (lookingForLastRow) {\n        if (rowNode === lastInRange || rowNode === firstInRange) {\n          lastRowHit = true;\n\n          if (rowNode === lastInRange) {\n            lastRow = lastInRange;\n          } else {\n            lastRow = firstInRange;\n          }\n        }\n      }\n    });\n    return result;\n  };\n\n  ClientSideRowModel.prototype.setDatasource = function (datasource) {\n    console.error('ag-Grid: should never call setDatasource on clientSideRowController');\n  };\n\n  ClientSideRowModel.prototype.getTopLevelNodes = function () {\n    return this.rootNode ? this.rootNode.childrenAfterGroup : null;\n  };\n\n  ClientSideRowModel.prototype.getRootNode = function () {\n    return this.rootNode;\n  };\n\n  ClientSideRowModel.prototype.getRow = function (index) {\n    return this.rowsToDisplay[index];\n  };\n\n  ClientSideRowModel.prototype.isRowPresent = function (rowNode) {\n    return this.rowsToDisplay.indexOf(rowNode) >= 0;\n  };\n\n  ClientSideRowModel.prototype.getRowIndexAtPixel = function (pixelToMatch) {\n    if (this.isEmpty()) {\n      return -1;\n    } // do binary search of tree\n    // http://oli.me.uk/2013/06/08/searching-javascript-arrays-with-a-binary-search/\n\n\n    var bottomPointer = 0;\n    var topPointer = this.rowsToDisplay.length - 1; // quick check, if the pixel is out of bounds, then return last row\n\n    if (pixelToMatch <= 0) {\n      // if pixel is less than or equal zero, it's always the first row\n      return 0;\n    }\n\n    var lastNode = utils_1._.last(this.rowsToDisplay);\n\n    if (lastNode.rowTop <= pixelToMatch) {\n      return this.rowsToDisplay.length - 1;\n    }\n\n    while (true) {\n      var midPointer = Math.floor((bottomPointer + topPointer) / 2);\n      var currentRowNode = this.rowsToDisplay[midPointer];\n\n      if (this.isRowInPixel(currentRowNode, pixelToMatch)) {\n        return midPointer;\n      } else if (currentRowNode.rowTop < pixelToMatch) {\n        bottomPointer = midPointer + 1;\n      } else if (currentRowNode.rowTop > pixelToMatch) {\n        topPointer = midPointer - 1;\n      }\n    }\n  };\n\n  ClientSideRowModel.prototype.isRowInPixel = function (rowNode, pixelToMatch) {\n    var topPixel = rowNode.rowTop;\n    var bottomPixel = rowNode.rowTop + rowNode.rowHeight;\n    var pixelInRow = topPixel <= pixelToMatch && bottomPixel > pixelToMatch;\n    return pixelInRow;\n  };\n\n  ClientSideRowModel.prototype.getCurrentPageHeight = function () {\n    if (this.rowsToDisplay && this.rowsToDisplay.length > 0) {\n      var lastRow = utils_1._.last(this.rowsToDisplay);\n\n      var lastPixel = lastRow.rowTop + lastRow.rowHeight;\n      return lastPixel;\n    } else {\n      return 0;\n    }\n  };\n\n  ClientSideRowModel.prototype.forEachLeafNode = function (callback) {\n    if (this.rootNode.allLeafChildren) {\n      this.rootNode.allLeafChildren.forEach(function (rowNode, index) {\n        return callback(rowNode, index);\n      });\n    }\n  };\n\n  ClientSideRowModel.prototype.forEachNode = function (callback) {\n    this.recursivelyWalkNodesAndCallback(this.rootNode.childrenAfterGroup, callback, RecursionType.Normal, 0);\n  };\n\n  ClientSideRowModel.prototype.forEachNodeAfterFilter = function (callback) {\n    this.recursivelyWalkNodesAndCallback(this.rootNode.childrenAfterFilter, callback, RecursionType.AfterFilter, 0);\n  };\n\n  ClientSideRowModel.prototype.forEachNodeAfterFilterAndSort = function (callback) {\n    this.recursivelyWalkNodesAndCallback(this.rootNode.childrenAfterSort, callback, RecursionType.AfterFilterAndSort, 0);\n  };\n\n  ClientSideRowModel.prototype.forEachPivotNode = function (callback) {\n    this.recursivelyWalkNodesAndCallback([this.rootNode], callback, RecursionType.PivotNodes, 0);\n  }; // iterates through each item in memory, and calls the callback function\n  // nodes - the rowNodes to traverse\n  // callback - the user provided callback\n  // recursion type - need this to know what child nodes to recurse, eg if looking at all nodes, or filtered notes etc\n  // index - works similar to the index in forEach in javascript's array function\n\n\n  ClientSideRowModel.prototype.recursivelyWalkNodesAndCallback = function (nodes, callback, recursionType, index) {\n    if (nodes) {\n      for (var i = 0; i < nodes.length; i++) {\n        var node = nodes[i];\n        callback(node, index++); // go to the next level if it is a group\n\n        if (node.hasChildren()) {\n          // depending on the recursion type, we pick a difference set of children\n          var nodeChildren = null;\n\n          switch (recursionType) {\n            case RecursionType.Normal:\n              nodeChildren = node.childrenAfterGroup;\n              break;\n\n            case RecursionType.AfterFilter:\n              nodeChildren = node.childrenAfterFilter;\n              break;\n\n            case RecursionType.AfterFilterAndSort:\n              nodeChildren = node.childrenAfterSort;\n              break;\n\n            case RecursionType.PivotNodes:\n              // for pivot, we don't go below leafGroup levels\n              nodeChildren = !node.leafGroup ? node.childrenAfterSort : null;\n              break;\n          }\n\n          if (nodeChildren) {\n            index = this.recursivelyWalkNodesAndCallback(nodeChildren, callback, recursionType, index);\n          }\n        }\n      }\n    }\n\n    return index;\n  }; // it's possible to recompute the aggregate without doing the other parts\n  // + gridApi.recomputeAggregates()\n\n\n  ClientSideRowModel.prototype.doAggregate = function (changedPath) {\n    if (this.aggregationStage) {\n      this.aggregationStage.execute({\n        rowNode: this.rootNode,\n        changedPath: changedPath\n      });\n    }\n  }; // + gridApi.expandAll()\n  // + gridApi.collapseAll()\n\n\n  ClientSideRowModel.prototype.expandOrCollapseAll = function (expand) {\n    var usingTreeData = this.gridOptionsWrapper.isTreeData();\n\n    if (this.rootNode) {\n      recursiveExpandOrCollapse(this.rootNode.childrenAfterGroup);\n    }\n\n    function recursiveExpandOrCollapse(rowNodes) {\n      if (!rowNodes) {\n        return;\n      }\n\n      rowNodes.forEach(function (rowNode) {\n        var shouldExpandOrCollapse = usingTreeData ? utils_1._.exists(rowNode.childrenAfterGroup) : rowNode.group;\n\n        if (shouldExpandOrCollapse) {\n          rowNode.expanded = expand;\n          recursiveExpandOrCollapse(rowNode.childrenAfterGroup);\n        }\n      });\n    }\n\n    this.refreshModel({\n      step: constants_1.Constants.STEP_MAP\n    });\n    var eventSource = expand ? 'expandAll' : 'collapseAll';\n    var event = {\n      api: this.gridApi,\n      columnApi: this.columnApi,\n      type: events_1.Events.EVENT_EXPAND_COLLAPSE_ALL,\n      source: eventSource\n    };\n    this.eventService.dispatchEvent(event);\n  };\n\n  ClientSideRowModel.prototype.doSort = function (rowNodeTransactions, changedPath) {\n    this.sortStage.execute({\n      rowNode: this.rootNode,\n      rowNodeTransactions: rowNodeTransactions,\n      changedPath: changedPath\n    });\n  };\n\n  ClientSideRowModel.prototype.doRowGrouping = function (groupState, rowNodeTransactions, rowNodeOrder, changedPath, afterColumnsChanged) {\n    var _this = this; // grouping is enterprise only, so if service missing, skip the step\n\n\n    var doingLegacyTreeData = utils_1._.exists(this.gridOptionsWrapper.getNodeChildDetailsFunc());\n\n    if (doingLegacyTreeData) {\n      return;\n    }\n\n    if (this.groupStage) {\n      if (rowNodeTransactions && utils_1._.exists(rowNodeTransactions)) {\n        rowNodeTransactions.forEach(function (tran) {\n          _this.groupStage.execute({\n            rowNode: _this.rootNode,\n            rowNodeTransaction: tran,\n            rowNodeOrder: rowNodeOrder,\n            changedPath: changedPath\n          });\n        });\n      } else {\n        // groups are about to get disposed, so need to deselect any that are selected\n        this.selectionController.removeGroupsFromSelection();\n        this.groupStage.execute({\n          rowNode: this.rootNode,\n          changedPath: changedPath,\n          afterColumnsChanged: afterColumnsChanged\n        }); // set open/closed state on groups\n\n        this.restoreGroupState(groupState);\n      }\n\n      if (this.gridOptionsWrapper.isGroupSelectsChildren()) {\n        this.selectionController.updateGroupsFromChildrenSelections(changedPath);\n      }\n    } else {\n      this.rootNode.childrenAfterGroup = this.rootNode.allLeafChildren;\n    }\n  };\n\n  ClientSideRowModel.prototype.restoreGroupState = function (groupState) {\n    if (!groupState) {\n      return;\n    }\n\n    utils_1._.traverseNodesWithKey(this.rootNode.childrenAfterGroup, function (node, key) {\n      // if the group was open last time, then open it this time. however\n      // if was not open last time, then don't touch the group, so the 'groupDefaultExpanded'\n      // setting will take effect.\n      if (typeof groupState[key] === 'boolean') {\n        node.expanded = groupState[key];\n      }\n    });\n  };\n\n  ClientSideRowModel.prototype.doFilter = function (changedPath) {\n    this.filterStage.execute({\n      rowNode: this.rootNode,\n      changedPath: changedPath\n    });\n  };\n\n  ClientSideRowModel.prototype.doPivot = function (changedPath) {\n    if (this.pivotStage) {\n      this.pivotStage.execute({\n        rowNode: this.rootNode,\n        changedPath: changedPath\n      });\n    }\n  };\n\n  ClientSideRowModel.prototype.getGroupState = function () {\n    if (!this.rootNode.childrenAfterGroup || !this.gridOptionsWrapper.isRememberGroupStateWhenNewData()) {\n      return null;\n    }\n\n    var result = {};\n\n    utils_1._.traverseNodesWithKey(this.rootNode.childrenAfterGroup, function (node, key) {\n      return result[key] = node.expanded;\n    });\n\n    return result;\n  };\n\n  ClientSideRowModel.prototype.getCopyOfNodesMap = function () {\n    return this.nodeManager.getCopyOfNodesMap();\n  };\n\n  ClientSideRowModel.prototype.getRowNode = function (id) {\n    return this.nodeManager.getRowNode(id);\n  }; // rows: the rows to put into the model\n\n\n  ClientSideRowModel.prototype.setRowData = function (rowData) {\n    // no need to invalidate cache, as the cache is stored on the rowNode,\n    // so new rowNodes means the cache is wiped anyway.\n    // remember group state, so we can expand groups that should be expanded\n    var groupState = this.getGroupState();\n    this.nodeManager.setRowData(rowData); // this event kicks off:\n    // - clears selection\n    // - updates filters\n    // - shows 'no rows' overlay if needed\n\n    var rowDataChangedEvent = {\n      type: events_1.Events.EVENT_ROW_DATA_CHANGED,\n      api: this.gridApi,\n      columnApi: this.columnApi\n    };\n    this.eventService.dispatchEvent(rowDataChangedEvent);\n    this.refreshModel({\n      step: constants_1.Constants.STEP_EVERYTHING,\n      groupState: groupState,\n      newData: true\n    });\n  };\n\n  ClientSideRowModel.prototype.batchUpdateRowData = function (rowDataTransaction, callback) {\n    var _this = this;\n\n    if (!this.rowDataTransactionBatch) {\n      this.rowDataTransactionBatch = [];\n      var waitMillis = this.gridOptionsWrapper.getBatchUpdateWaitMillis();\n      window.setTimeout(function () {\n        _this.executeBatchUpdateRowData();\n\n        _this.rowDataTransactionBatch = null;\n      }, waitMillis);\n    }\n\n    this.rowDataTransactionBatch.push({\n      rowDataTransaction: rowDataTransaction,\n      callback: callback\n    });\n  };\n\n  ClientSideRowModel.prototype.executeBatchUpdateRowData = function () {\n    var _this = this;\n\n    this.valueCache.onDataChanged();\n    var callbackFuncsBound = [];\n    var rowNodeTrans = [];\n\n    if (this.rowDataTransactionBatch) {\n      this.rowDataTransactionBatch.forEach(function (tranItem) {\n        var rowNodeTran = _this.nodeManager.updateRowData(tranItem.rowDataTransaction, null);\n\n        rowNodeTrans.push(rowNodeTran);\n\n        if (tranItem.callback) {\n          callbackFuncsBound.push(tranItem.callback.bind(null, rowNodeTran));\n        }\n      });\n    }\n\n    this.commonUpdateRowData(rowNodeTrans); // do callbacks in next VM turn so it's async\n\n    if (callbackFuncsBound.length > 0) {\n      window.setTimeout(function () {\n        callbackFuncsBound.forEach(function (func) {\n          return func();\n        });\n      }, 0);\n    }\n  };\n\n  ClientSideRowModel.prototype.updateRowData = function (rowDataTran, rowNodeOrder) {\n    this.valueCache.onDataChanged();\n    var rowNodeTran = this.nodeManager.updateRowData(rowDataTran, rowNodeOrder);\n    this.commonUpdateRowData([rowNodeTran], rowNodeOrder);\n    return rowNodeTran;\n  }; // common to updateRowData and batchUpdateRowData\n\n\n  ClientSideRowModel.prototype.commonUpdateRowData = function (rowNodeTrans, rowNodeOrder) {\n    this.refreshModel({\n      step: constants_1.Constants.STEP_EVERYTHING,\n      rowNodeTransactions: rowNodeTrans,\n      rowNodeOrder: rowNodeOrder,\n      keepRenderedRows: true,\n      animate: true,\n      keepEditingRows: true\n    });\n    var event = {\n      type: events_1.Events.EVENT_ROW_DATA_UPDATED,\n      api: this.gridApi,\n      columnApi: this.columnApi\n    };\n    this.eventService.dispatchEvent(event);\n  };\n\n  ClientSideRowModel.prototype.doRowsToDisplay = function () {\n    this.rowsToDisplay = this.flattenStage.execute({\n      rowNode: this.rootNode\n    });\n  };\n\n  ClientSideRowModel.prototype.onRowHeightChanged = function () {\n    this.refreshModel({\n      step: constants_1.Constants.STEP_MAP,\n      keepRenderedRows: true,\n      keepEditingRows: true\n    });\n  };\n\n  ClientSideRowModel.prototype.resetRowHeights = function () {\n    this.forEachNode(function (rowNode) {\n      return rowNode.setRowHeight(null);\n    });\n    this.onRowHeightChanged();\n  };\n\n  __decorate([context_1.Autowired('gridOptionsWrapper'), __metadata(\"design:type\", gridOptionsWrapper_1.GridOptionsWrapper)], ClientSideRowModel.prototype, \"gridOptionsWrapper\", void 0);\n\n  __decorate([context_1.Autowired('columnController'), __metadata(\"design:type\", columnController_1.ColumnController)], ClientSideRowModel.prototype, \"columnController\", void 0);\n\n  __decorate([context_1.Autowired('filterManager'), __metadata(\"design:type\", filterManager_1.FilterManager)], ClientSideRowModel.prototype, \"filterManager\", void 0);\n\n  __decorate([context_1.Autowired('$scope'), __metadata(\"design:type\", Object)], ClientSideRowModel.prototype, \"$scope\", void 0);\n\n  __decorate([context_1.Autowired('selectionController'), __metadata(\"design:type\", selectionController_1.SelectionController)], ClientSideRowModel.prototype, \"selectionController\", void 0);\n\n  __decorate([context_1.Autowired('eventService'), __metadata(\"design:type\", eventService_1.EventService)], ClientSideRowModel.prototype, \"eventService\", void 0);\n\n  __decorate([context_1.Autowired('context'), __metadata(\"design:type\", context_1.Context)], ClientSideRowModel.prototype, \"context\", void 0);\n\n  __decorate([context_1.Autowired('valueService'), __metadata(\"design:type\", valueService_1.ValueService)], ClientSideRowModel.prototype, \"valueService\", void 0);\n\n  __decorate([context_1.Autowired('valueCache'), __metadata(\"design:type\", valueCache_1.ValueCache)], ClientSideRowModel.prototype, \"valueCache\", void 0);\n\n  __decorate([context_1.Autowired('columnApi'), __metadata(\"design:type\", columnApi_1.ColumnApi)], ClientSideRowModel.prototype, \"columnApi\", void 0);\n\n  __decorate([context_1.Autowired('gridApi'), __metadata(\"design:type\", gridApi_1.GridApi)], ClientSideRowModel.prototype, \"gridApi\", void 0);\n\n  __decorate([context_1.Autowired('filterStage'), __metadata(\"design:type\", Object)], ClientSideRowModel.prototype, \"filterStage\", void 0);\n\n  __decorate([context_1.Autowired('sortStage'), __metadata(\"design:type\", Object)], ClientSideRowModel.prototype, \"sortStage\", void 0);\n\n  __decorate([context_1.Autowired('flattenStage'), __metadata(\"design:type\", Object)], ClientSideRowModel.prototype, \"flattenStage\", void 0);\n\n  __decorate([context_1.Optional('groupStage'), __metadata(\"design:type\", Object)], ClientSideRowModel.prototype, \"groupStage\", void 0);\n\n  __decorate([context_1.Optional('aggregationStage'), __metadata(\"design:type\", Object)], ClientSideRowModel.prototype, \"aggregationStage\", void 0);\n\n  __decorate([context_1.Optional('pivotStage'), __metadata(\"design:type\", Object)], ClientSideRowModel.prototype, \"pivotStage\", void 0);\n\n  __decorate([context_1.PostConstruct, __metadata(\"design:type\", Function), __metadata(\"design:paramtypes\", []), __metadata(\"design:returntype\", void 0)], ClientSideRowModel.prototype, \"init\", null);\n\n  ClientSideRowModel = __decorate([context_1.Bean('rowModel')], ClientSideRowModel);\n  return ClientSideRowModel;\n}();\n\nexports.ClientSideRowModel = ClientSideRowModel;","map":{"version":3,"sources":["/Users/dirkmennecke77/Desktop/Lageplan/node_modules/ag-grid-community/dist/lib/rowModels/clientSide/clientSideRowModel.js"],"names":["__decorate","decorators","target","key","desc","c","arguments","length","r","Object","getOwnPropertyDescriptor","d","Reflect","decorate","i","defineProperty","__metadata","k","v","metadata","exports","value","constants_1","require","gridOptionsWrapper_1","columnApi_1","columnController_1","filterManager_1","rowNode_1","eventService_1","events_1","context_1","selectionController_1","clientSideNodeManager_1","changedPath_1","valueService_1","valueCache_1","gridApi_1","utils_1","RecursionType","ClientSideRowModel","prototype","init","refreshEverythingFunc","refreshModel","bind","step","Constants","STEP_EVERYTHING","refreshEverythingAfterColsChangedFunc","afterColumnsChanged","eventService","addModalPriorityEventListener","Events","EVENT_COLUMN_EVERYTHING_CHANGED","EVENT_COLUMN_ROW_GROUP_CHANGED","EVENT_COLUMN_VALUE_CHANGED","onValueChanged","EVENT_COLUMN_PIVOT_CHANGED","STEP_PIVOT","EVENT_ROW_GROUP_OPENED","onRowGroupOpened","EVENT_FILTER_CHANGED","onFilterChanged","EVENT_SORT_CHANGED","onSortChanged","EVENT_COLUMN_PIVOT_MODE_CHANGED","refreshMapFunc","STEP_MAP","keepRenderedRows","animate","gridOptionsWrapper","addEventListener","GridOptionsWrapper","PROP_GROUP_REMOVE_SINGLE_CHILDREN","PROP_GROUP_REMOVE_LOWEST_SINGLE_CHILDREN","rootNode","RowNode","nodeManager","ClientSideNodeManager","context","columnController","gridApi","columnApi","selectionController","wireBean","ensureRowHeightsValid","startPixel","endPixel","startLimitIndex","endLimitIndex","atLeastOneChange","res","rowAtStartPixel","getRowIndexAtPixel","rowAtEndPixel","firstRow","Math","max","lastRow","min","rowIndex","rowNode","getRow","rowHeightEstimated","rowHeight","getRowHeightForNode","setRowHeight","height","setRowTops","nextRowTop","rowsToDisplay","allowEstimate","getDomLayout","DOM_LAYOUT_NORMAL","_","missing","estimated","setRowTop","setRowIndex","resetRowTops","changedPath","clearRowTop","hasChildren","childrenAfterGroup","skipChildren","isActive","expanded","sibling","detailNode","ensureRowAtPixel","pixel","indexAtPixelNow","rowNodeAtPixelNow","removeFromArray","allLeafChildren","insertIntoArray","keepEditingRows","isLastRowFound","getRowCount","getTopLevelRowCount","showingRootNode","childrenAfterFilter","getTopLevelRowDisplayedIndex","topLevelIndex","childrenAfterSort","isGroupHideOpenParents","getRowBounds","index","rowTop","isAnimateRows","STEP_FILTER","STEP_SORT","getType","ROW_MODEL_TYPE_CLIENT_SIDE","isPivotActive","STEP_AGGREGATE","createChangePath","rowNodeTransactions","noTransactions","missingOrEmpty","ChangedPath","isTreeData","setInactive","params","_this","doRowGrouping","groupState","rowNodeOrder","doFilter","doPivot","doAggregate","doSort","doRowsToDisplay","event","type","EVENT_MODEL_UPDATED","api","newData","newPage","dispatchEvent","$scope","window","setTimeout","$apply","isEmpty","rowsMissing","doingLegacyTreeData","exists","getNodeChildDetailsFunc","empty","isReady","isRowsToRender","getNodesInRangeForSelection","firstInRange","lastInRange","firstRowHit","lastRowHit","result","groupsSelectChildren","isGroupSelectsChildren","forEachNodeAfterFilterAndSort","lookingForLastRow","skipThisGroupNode","group","inRange","childOfLastRow","isParentOfNode","push","setDatasource","datasource","console","error","getTopLevelNodes","getRootNode","isRowPresent","indexOf","pixelToMatch","bottomPointer","topPointer","lastNode","last","midPointer","floor","currentRowNode","isRowInPixel","topPixel","bottomPixel","pixelInRow","getCurrentPageHeight","lastPixel","forEachLeafNode","callback","forEach","forEachNode","recursivelyWalkNodesAndCallback","Normal","forEachNodeAfterFilter","AfterFilter","AfterFilterAndSort","forEachPivotNode","PivotNodes","nodes","recursionType","node","nodeChildren","leafGroup","aggregationStage","execute","expandOrCollapseAll","expand","usingTreeData","recursiveExpandOrCollapse","rowNodes","shouldExpandOrCollapse","eventSource","EVENT_EXPAND_COLLAPSE_ALL","source","sortStage","groupStage","tran","rowNodeTransaction","removeGroupsFromSelection","restoreGroupState","updateGroupsFromChildrenSelections","traverseNodesWithKey","filterStage","pivotStage","getGroupState","isRememberGroupStateWhenNewData","getCopyOfNodesMap","getRowNode","id","setRowData","rowData","rowDataChangedEvent","EVENT_ROW_DATA_CHANGED","batchUpdateRowData","rowDataTransaction","rowDataTransactionBatch","waitMillis","getBatchUpdateWaitMillis","executeBatchUpdateRowData","valueCache","onDataChanged","callbackFuncsBound","rowNodeTrans","tranItem","rowNodeTran","updateRowData","commonUpdateRowData","func","rowDataTran","EVENT_ROW_DATA_UPDATED","flattenStage","onRowHeightChanged","resetRowHeights","Autowired","ColumnController","FilterManager","SelectionController","EventService","Context","ValueService","ValueCache","ColumnApi","GridApi","Optional","PostConstruct","Function","Bean"],"mappings":"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","sourcesContent":["/**\n * ag-grid-community - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components\n * @version v21.2.2\n * @link http://www.ag-grid.com/\n * @license MIT\n */\n\"use strict\";\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __metadata = (this && this.__metadata) || function (k, v) {\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar constants_1 = require(\"../../constants\");\nvar gridOptionsWrapper_1 = require(\"../../gridOptionsWrapper\");\nvar columnApi_1 = require(\"../../columnController/columnApi\");\nvar columnController_1 = require(\"../../columnController/columnController\");\nvar filterManager_1 = require(\"../../filter/filterManager\");\nvar rowNode_1 = require(\"../../entities/rowNode\");\nvar eventService_1 = require(\"../../eventService\");\nvar events_1 = require(\"../../events\");\nvar context_1 = require(\"../../context/context\");\nvar selectionController_1 = require(\"../../selectionController\");\nvar clientSideNodeManager_1 = require(\"./clientSideNodeManager\");\nvar changedPath_1 = require(\"./changedPath\");\nvar valueService_1 = require(\"../../valueService/valueService\");\nvar valueCache_1 = require(\"../../valueService/valueCache\");\nvar gridApi_1 = require(\"../../gridApi\");\nvar utils_1 = require(\"../../utils\");\nvar RecursionType;\n(function (RecursionType) {\n    RecursionType[RecursionType[\"Normal\"] = 0] = \"Normal\";\n    RecursionType[RecursionType[\"AfterFilter\"] = 1] = \"AfterFilter\";\n    RecursionType[RecursionType[\"AfterFilterAndSort\"] = 2] = \"AfterFilterAndSort\";\n    RecursionType[RecursionType[\"PivotNodes\"] = 3] = \"PivotNodes\";\n})(RecursionType || (RecursionType = {}));\nvar ClientSideRowModel = /** @class */ (function () {\n    function ClientSideRowModel() {\n    }\n    ClientSideRowModel.prototype.init = function () {\n        var refreshEverythingFunc = this.refreshModel.bind(this, { step: constants_1.Constants.STEP_EVERYTHING });\n        var refreshEverythingAfterColsChangedFunc = this.refreshModel.bind(this, { step: constants_1.Constants.STEP_EVERYTHING, afterColumnsChanged: true });\n        this.eventService.addModalPriorityEventListener(events_1.Events.EVENT_COLUMN_EVERYTHING_CHANGED, refreshEverythingAfterColsChangedFunc);\n        this.eventService.addModalPriorityEventListener(events_1.Events.EVENT_COLUMN_ROW_GROUP_CHANGED, refreshEverythingFunc);\n        this.eventService.addModalPriorityEventListener(events_1.Events.EVENT_COLUMN_VALUE_CHANGED, this.onValueChanged.bind(this));\n        this.eventService.addModalPriorityEventListener(events_1.Events.EVENT_COLUMN_PIVOT_CHANGED, this.refreshModel.bind(this, { step: constants_1.Constants.STEP_PIVOT }));\n        this.eventService.addModalPriorityEventListener(events_1.Events.EVENT_ROW_GROUP_OPENED, this.onRowGroupOpened.bind(this));\n        this.eventService.addModalPriorityEventListener(events_1.Events.EVENT_FILTER_CHANGED, this.onFilterChanged.bind(this));\n        this.eventService.addModalPriorityEventListener(events_1.Events.EVENT_SORT_CHANGED, this.onSortChanged.bind(this));\n        this.eventService.addModalPriorityEventListener(events_1.Events.EVENT_COLUMN_PIVOT_MODE_CHANGED, refreshEverythingFunc);\n        var refreshMapFunc = this.refreshModel.bind(this, {\n            step: constants_1.Constants.STEP_MAP,\n            keepRenderedRows: true,\n            animate: true\n        });\n        this.gridOptionsWrapper.addEventListener(gridOptionsWrapper_1.GridOptionsWrapper.PROP_GROUP_REMOVE_SINGLE_CHILDREN, refreshMapFunc);\n        this.gridOptionsWrapper.addEventListener(gridOptionsWrapper_1.GridOptionsWrapper.PROP_GROUP_REMOVE_LOWEST_SINGLE_CHILDREN, refreshMapFunc);\n        this.rootNode = new rowNode_1.RowNode();\n        this.nodeManager = new clientSideNodeManager_1.ClientSideNodeManager(this.rootNode, this.gridOptionsWrapper, this.context, this.eventService, this.columnController, this.gridApi, this.columnApi, this.selectionController);\n        this.context.wireBean(this.rootNode);\n    };\n    ClientSideRowModel.prototype.ensureRowHeightsValid = function (startPixel, endPixel, startLimitIndex, endLimitIndex) {\n        var atLeastOneChange;\n        var res = false;\n        // we do this multiple times as changing the row heights can also change the first and last rows,\n        // so the first pass can make lots of rows smaller, which means the second pass we end up changing\n        // more rows.\n        do {\n            atLeastOneChange = false;\n            var rowAtStartPixel = this.getRowIndexAtPixel(startPixel);\n            var rowAtEndPixel = this.getRowIndexAtPixel(endPixel);\n            // keep check to current page if doing pagination\n            var firstRow = Math.max(rowAtStartPixel, startLimitIndex);\n            var lastRow = Math.min(rowAtEndPixel, endLimitIndex);\n            for (var rowIndex = firstRow; rowIndex <= lastRow; rowIndex++) {\n                var rowNode = this.getRow(rowIndex);\n                if (rowNode.rowHeightEstimated) {\n                    var rowHeight = this.gridOptionsWrapper.getRowHeightForNode(rowNode);\n                    rowNode.setRowHeight(rowHeight.height);\n                    atLeastOneChange = true;\n                    res = true;\n                }\n            }\n            if (atLeastOneChange) {\n                this.setRowTops();\n            }\n        } while (atLeastOneChange);\n        return res;\n    };\n    ClientSideRowModel.prototype.setRowTops = function () {\n        var nextRowTop = 0;\n        for (var i = 0; i < this.rowsToDisplay.length; i++) {\n            // we don't estimate if doing fullHeight or autoHeight, as all rows get rendered all the time\n            // with these two layouts.\n            var allowEstimate = this.gridOptionsWrapper.getDomLayout() === constants_1.Constants.DOM_LAYOUT_NORMAL;\n            var rowNode = this.rowsToDisplay[i];\n            if (utils_1._.missing(rowNode.rowHeight)) {\n                var rowHeight = this.gridOptionsWrapper.getRowHeightForNode(rowNode, allowEstimate);\n                rowNode.setRowHeight(rowHeight.height, rowHeight.estimated);\n            }\n            rowNode.setRowTop(nextRowTop);\n            rowNode.setRowIndex(i);\n            nextRowTop += rowNode.rowHeight;\n        }\n    };\n    ClientSideRowModel.prototype.resetRowTops = function (rowNode, changedPath) {\n        rowNode.clearRowTop();\n        if (rowNode.hasChildren()) {\n            if (rowNode.childrenAfterGroup) {\n                // if a changedPath is active, it means we are here because of a transaction update or\n                // a change detection. neither of these impacts the open/closed state of groups. so if\n                // a group is not open this time, it was not open last time. so we know all closed groups\n                // already have their top positions cleared. so there is no need to traverse all the way\n                // when changedPath is active and the rowNode is not expanded.\n                var skipChildren = changedPath.isActive() && !rowNode.expanded;\n                if (!skipChildren) {\n                    for (var i = 0; i < rowNode.childrenAfterGroup.length; i++) {\n                        this.resetRowTops(rowNode.childrenAfterGroup[i], changedPath);\n                    }\n                }\n            }\n            if (rowNode.sibling) {\n                rowNode.sibling.clearRowTop();\n            }\n        }\n        if (rowNode.detailNode) {\n            rowNode.detailNode.clearRowTop();\n        }\n    };\n    // returns false if row was moved, otherwise true\n    ClientSideRowModel.prototype.ensureRowAtPixel = function (rowNode, pixel) {\n        var indexAtPixelNow = this.getRowIndexAtPixel(pixel);\n        var rowNodeAtPixelNow = this.getRow(indexAtPixelNow);\n        if (rowNodeAtPixelNow === rowNode) {\n            return false;\n        }\n        utils_1._.removeFromArray(this.rootNode.allLeafChildren, rowNode);\n        utils_1._.insertIntoArray(this.rootNode.allLeafChildren, rowNode, indexAtPixelNow);\n        this.refreshModel({\n            step: constants_1.Constants.STEP_EVERYTHING,\n            keepRenderedRows: true,\n            animate: true,\n            keepEditingRows: true\n        });\n        return true;\n    };\n    ClientSideRowModel.prototype.isLastRowFound = function () {\n        return true;\n    };\n    ClientSideRowModel.prototype.getRowCount = function () {\n        if (this.rowsToDisplay) {\n            return this.rowsToDisplay.length;\n        }\n        else {\n            return 0;\n        }\n    };\n    ClientSideRowModel.prototype.getTopLevelRowCount = function () {\n        var showingRootNode = this.rowsToDisplay && this.rowsToDisplay[0] === this.rootNode;\n        if (showingRootNode) {\n            return 1;\n        }\n        else {\n            return this.rootNode.childrenAfterFilter ? this.rootNode.childrenAfterFilter.length : 0;\n        }\n    };\n    ClientSideRowModel.prototype.getTopLevelRowDisplayedIndex = function (topLevelIndex) {\n        var showingRootNode = this.rowsToDisplay && this.rowsToDisplay[0] === this.rootNode;\n        if (showingRootNode) {\n            return topLevelIndex;\n        }\n        else {\n            var rowNode = this.rootNode.childrenAfterSort[topLevelIndex];\n            if (this.gridOptionsWrapper.isGroupHideOpenParents()) {\n                // if hideOpenParents, and this row open, then this row is now displayed at this index, first child is\n                while (rowNode.expanded && rowNode.childrenAfterSort && rowNode.childrenAfterSort.length > 0) {\n                    rowNode = rowNode.childrenAfterSort[0];\n                }\n            }\n            return rowNode.rowIndex;\n        }\n    };\n    ClientSideRowModel.prototype.getRowBounds = function (index) {\n        if (utils_1._.missing(this.rowsToDisplay)) {\n            return null;\n        }\n        var rowNode = this.rowsToDisplay[index];\n        if (rowNode) {\n            return {\n                rowTop: rowNode.rowTop,\n                rowHeight: rowNode.rowHeight\n            };\n        }\n        else {\n            return null;\n        }\n    };\n    ClientSideRowModel.prototype.onRowGroupOpened = function () {\n        var animate = this.gridOptionsWrapper.isAnimateRows();\n        this.refreshModel({ step: constants_1.Constants.STEP_MAP, keepRenderedRows: true, animate: animate });\n    };\n    ClientSideRowModel.prototype.onFilterChanged = function () {\n        var animate = this.gridOptionsWrapper.isAnimateRows();\n        this.refreshModel({ step: constants_1.Constants.STEP_FILTER, keepRenderedRows: true, animate: animate });\n    };\n    ClientSideRowModel.prototype.onSortChanged = function () {\n        var animate = this.gridOptionsWrapper.isAnimateRows();\n        this.refreshModel({ step: constants_1.Constants.STEP_SORT, keepRenderedRows: true, animate: animate, keepEditingRows: true });\n    };\n    ClientSideRowModel.prototype.getType = function () {\n        return constants_1.Constants.ROW_MODEL_TYPE_CLIENT_SIDE;\n    };\n    ClientSideRowModel.prototype.onValueChanged = function () {\n        if (this.columnController.isPivotActive()) {\n            this.refreshModel({ step: constants_1.Constants.STEP_PIVOT });\n        }\n        else {\n            this.refreshModel({ step: constants_1.Constants.STEP_AGGREGATE });\n        }\n    };\n    ClientSideRowModel.prototype.createChangePath = function (rowNodeTransactions) {\n        // for updates, if the row is updated at all, then we re-calc all the values\n        // in that row. we could compare each value to each old value, however if we\n        // did this, we would be calling the valueService twice, once on the old value\n        // and once on the new value. so it's less valueGetter calls if we just assume\n        // each column is different. that way the changedPath is used so that only\n        // the impacted parent rows are recalculated, parents who's children have\n        // not changed are not impacted.\n        var noTransactions = utils_1._.missingOrEmpty(rowNodeTransactions);\n        var changedPath = new changedPath_1.ChangedPath(false, this.rootNode);\n        if (noTransactions || this.gridOptionsWrapper.isTreeData()) {\n            changedPath.setInactive();\n        }\n        return changedPath;\n    };\n    ClientSideRowModel.prototype.refreshModel = function (params) {\n        // this goes through the pipeline of stages. what's in my head is similar\n        // to the diagram on this page:\n        // http://commons.apache.org/sandbox/commons-pipeline/pipeline_basics.html\n        // however we want to keep the results of each stage, hence we manually call\n        // each step rather than have them chain each other.\n        var _this = this;\n        // fallthrough in below switch is on purpose,\n        // eg if STEP_FILTER, then all steps below this\n        // step get done\n        // let start: number;\n        // console.log('======= start =======');\n        var changedPath = this.createChangePath(params.rowNodeTransactions);\n        switch (params.step) {\n            case constants_1.Constants.STEP_EVERYTHING:\n                // start = new Date().getTime();\n                this.doRowGrouping(params.groupState, params.rowNodeTransactions, params.rowNodeOrder, changedPath, params.afterColumnsChanged);\n            // console.log('rowGrouping = ' + (new Date().getTime() - start));\n            case constants_1.Constants.STEP_FILTER:\n                // start = new Date().getTime();\n                this.doFilter(changedPath);\n            // console.log('filter = ' + (new Date().getTime() - start));\n            case constants_1.Constants.STEP_PIVOT:\n                this.doPivot(changedPath);\n            case constants_1.Constants.STEP_AGGREGATE: // depends on agg fields\n                // start = new Date().getTime();\n                this.doAggregate(changedPath);\n            // console.log('aggregation = ' + (new Date().getTime() - start));\n            case constants_1.Constants.STEP_SORT:\n                // start = new Date().getTime();\n                this.doSort(params.rowNodeTransactions, changedPath);\n            // console.log('sort = ' + (new Date().getTime() - start));\n            case constants_1.Constants.STEP_MAP:\n                // start = new Date().getTime();\n                this.doRowsToDisplay();\n            // console.log('rowsToDisplay = ' + (new Date().getTime() - start));\n        }\n        // set all row tops to null, then set row tops on all visible rows. if we don't\n        // do this, then the algorithm below only sets row tops, old row tops from old rows\n        // will still lie around\n        this.resetRowTops(this.rootNode, changedPath);\n        this.setRowTops();\n        var event = {\n            type: events_1.Events.EVENT_MODEL_UPDATED,\n            api: this.gridApi,\n            columnApi: this.columnApi,\n            animate: params.animate,\n            keepRenderedRows: params.keepRenderedRows,\n            newData: params.newData,\n            newPage: false\n        };\n        this.eventService.dispatchEvent(event);\n        if (this.$scope) {\n            window.setTimeout(function () {\n                _this.$scope.$apply();\n            }, 0);\n        }\n    };\n    ClientSideRowModel.prototype.isEmpty = function () {\n        var rowsMissing;\n        var doingLegacyTreeData = utils_1._.exists(this.gridOptionsWrapper.getNodeChildDetailsFunc());\n        if (doingLegacyTreeData) {\n            rowsMissing = utils_1._.missing(this.rootNode.childrenAfterGroup) || this.rootNode.childrenAfterGroup.length === 0;\n        }\n        else {\n            rowsMissing = utils_1._.missing(this.rootNode.allLeafChildren) || this.rootNode.allLeafChildren.length === 0;\n        }\n        var empty = utils_1._.missing(this.rootNode) || rowsMissing || !this.columnController.isReady();\n        return empty;\n    };\n    ClientSideRowModel.prototype.isRowsToRender = function () {\n        return utils_1._.exists(this.rowsToDisplay) && this.rowsToDisplay.length > 0;\n    };\n    ClientSideRowModel.prototype.getNodesInRangeForSelection = function (firstInRange, lastInRange) {\n        // if lastSelectedNode is missing, we start at the first row\n        var firstRowHit = !lastInRange;\n        var lastRowHit = false;\n        var lastRow;\n        var result = [];\n        var groupsSelectChildren = this.gridOptionsWrapper.isGroupSelectsChildren();\n        this.forEachNodeAfterFilterAndSort(function (rowNode) {\n            var lookingForLastRow = firstRowHit && !lastRowHit;\n            // check if we need to flip the select switch\n            if (!firstRowHit) {\n                if (rowNode === lastInRange || rowNode === firstInRange) {\n                    firstRowHit = true;\n                }\n            }\n            var skipThisGroupNode = rowNode.group && groupsSelectChildren;\n            if (!skipThisGroupNode) {\n                var inRange = firstRowHit && !lastRowHit;\n                var childOfLastRow = rowNode.isParentOfNode(lastRow);\n                if (inRange || childOfLastRow) {\n                    result.push(rowNode);\n                }\n            }\n            if (lookingForLastRow) {\n                if (rowNode === lastInRange || rowNode === firstInRange) {\n                    lastRowHit = true;\n                    if (rowNode === lastInRange) {\n                        lastRow = lastInRange;\n                    }\n                    else {\n                        lastRow = firstInRange;\n                    }\n                }\n            }\n        });\n        return result;\n    };\n    ClientSideRowModel.prototype.setDatasource = function (datasource) {\n        console.error('ag-Grid: should never call setDatasource on clientSideRowController');\n    };\n    ClientSideRowModel.prototype.getTopLevelNodes = function () {\n        return this.rootNode ? this.rootNode.childrenAfterGroup : null;\n    };\n    ClientSideRowModel.prototype.getRootNode = function () {\n        return this.rootNode;\n    };\n    ClientSideRowModel.prototype.getRow = function (index) {\n        return this.rowsToDisplay[index];\n    };\n    ClientSideRowModel.prototype.isRowPresent = function (rowNode) {\n        return this.rowsToDisplay.indexOf(rowNode) >= 0;\n    };\n    ClientSideRowModel.prototype.getRowIndexAtPixel = function (pixelToMatch) {\n        if (this.isEmpty()) {\n            return -1;\n        }\n        // do binary search of tree\n        // http://oli.me.uk/2013/06/08/searching-javascript-arrays-with-a-binary-search/\n        var bottomPointer = 0;\n        var topPointer = this.rowsToDisplay.length - 1;\n        // quick check, if the pixel is out of bounds, then return last row\n        if (pixelToMatch <= 0) {\n            // if pixel is less than or equal zero, it's always the first row\n            return 0;\n        }\n        var lastNode = utils_1._.last(this.rowsToDisplay);\n        if (lastNode.rowTop <= pixelToMatch) {\n            return this.rowsToDisplay.length - 1;\n        }\n        while (true) {\n            var midPointer = Math.floor((bottomPointer + topPointer) / 2);\n            var currentRowNode = this.rowsToDisplay[midPointer];\n            if (this.isRowInPixel(currentRowNode, pixelToMatch)) {\n                return midPointer;\n            }\n            else if (currentRowNode.rowTop < pixelToMatch) {\n                bottomPointer = midPointer + 1;\n            }\n            else if (currentRowNode.rowTop > pixelToMatch) {\n                topPointer = midPointer - 1;\n            }\n        }\n    };\n    ClientSideRowModel.prototype.isRowInPixel = function (rowNode, pixelToMatch) {\n        var topPixel = rowNode.rowTop;\n        var bottomPixel = rowNode.rowTop + rowNode.rowHeight;\n        var pixelInRow = topPixel <= pixelToMatch && bottomPixel > pixelToMatch;\n        return pixelInRow;\n    };\n    ClientSideRowModel.prototype.getCurrentPageHeight = function () {\n        if (this.rowsToDisplay && this.rowsToDisplay.length > 0) {\n            var lastRow = utils_1._.last(this.rowsToDisplay);\n            var lastPixel = lastRow.rowTop + lastRow.rowHeight;\n            return lastPixel;\n        }\n        else {\n            return 0;\n        }\n    };\n    ClientSideRowModel.prototype.forEachLeafNode = function (callback) {\n        if (this.rootNode.allLeafChildren) {\n            this.rootNode.allLeafChildren.forEach(function (rowNode, index) { return callback(rowNode, index); });\n        }\n    };\n    ClientSideRowModel.prototype.forEachNode = function (callback) {\n        this.recursivelyWalkNodesAndCallback(this.rootNode.childrenAfterGroup, callback, RecursionType.Normal, 0);\n    };\n    ClientSideRowModel.prototype.forEachNodeAfterFilter = function (callback) {\n        this.recursivelyWalkNodesAndCallback(this.rootNode.childrenAfterFilter, callback, RecursionType.AfterFilter, 0);\n    };\n    ClientSideRowModel.prototype.forEachNodeAfterFilterAndSort = function (callback) {\n        this.recursivelyWalkNodesAndCallback(this.rootNode.childrenAfterSort, callback, RecursionType.AfterFilterAndSort, 0);\n    };\n    ClientSideRowModel.prototype.forEachPivotNode = function (callback) {\n        this.recursivelyWalkNodesAndCallback([this.rootNode], callback, RecursionType.PivotNodes, 0);\n    };\n    // iterates through each item in memory, and calls the callback function\n    // nodes - the rowNodes to traverse\n    // callback - the user provided callback\n    // recursion type - need this to know what child nodes to recurse, eg if looking at all nodes, or filtered notes etc\n    // index - works similar to the index in forEach in javascript's array function\n    ClientSideRowModel.prototype.recursivelyWalkNodesAndCallback = function (nodes, callback, recursionType, index) {\n        if (nodes) {\n            for (var i = 0; i < nodes.length; i++) {\n                var node = nodes[i];\n                callback(node, index++);\n                // go to the next level if it is a group\n                if (node.hasChildren()) {\n                    // depending on the recursion type, we pick a difference set of children\n                    var nodeChildren = null;\n                    switch (recursionType) {\n                        case RecursionType.Normal:\n                            nodeChildren = node.childrenAfterGroup;\n                            break;\n                        case RecursionType.AfterFilter:\n                            nodeChildren = node.childrenAfterFilter;\n                            break;\n                        case RecursionType.AfterFilterAndSort:\n                            nodeChildren = node.childrenAfterSort;\n                            break;\n                        case RecursionType.PivotNodes:\n                            // for pivot, we don't go below leafGroup levels\n                            nodeChildren = !node.leafGroup ? node.childrenAfterSort : null;\n                            break;\n                    }\n                    if (nodeChildren) {\n                        index = this.recursivelyWalkNodesAndCallback(nodeChildren, callback, recursionType, index);\n                    }\n                }\n            }\n        }\n        return index;\n    };\n    // it's possible to recompute the aggregate without doing the other parts\n    // + gridApi.recomputeAggregates()\n    ClientSideRowModel.prototype.doAggregate = function (changedPath) {\n        if (this.aggregationStage) {\n            this.aggregationStage.execute({ rowNode: this.rootNode, changedPath: changedPath });\n        }\n    };\n    // + gridApi.expandAll()\n    // + gridApi.collapseAll()\n    ClientSideRowModel.prototype.expandOrCollapseAll = function (expand) {\n        var usingTreeData = this.gridOptionsWrapper.isTreeData();\n        if (this.rootNode) {\n            recursiveExpandOrCollapse(this.rootNode.childrenAfterGroup);\n        }\n        function recursiveExpandOrCollapse(rowNodes) {\n            if (!rowNodes) {\n                return;\n            }\n            rowNodes.forEach(function (rowNode) {\n                var shouldExpandOrCollapse = usingTreeData ? utils_1._.exists(rowNode.childrenAfterGroup) : rowNode.group;\n                if (shouldExpandOrCollapse) {\n                    rowNode.expanded = expand;\n                    recursiveExpandOrCollapse(rowNode.childrenAfterGroup);\n                }\n            });\n        }\n        this.refreshModel({ step: constants_1.Constants.STEP_MAP });\n        var eventSource = expand ? 'expandAll' : 'collapseAll';\n        var event = {\n            api: this.gridApi,\n            columnApi: this.columnApi,\n            type: events_1.Events.EVENT_EXPAND_COLLAPSE_ALL,\n            source: eventSource\n        };\n        this.eventService.dispatchEvent(event);\n    };\n    ClientSideRowModel.prototype.doSort = function (rowNodeTransactions, changedPath) {\n        this.sortStage.execute({\n            rowNode: this.rootNode,\n            rowNodeTransactions: rowNodeTransactions,\n            changedPath: changedPath\n        });\n    };\n    ClientSideRowModel.prototype.doRowGrouping = function (groupState, rowNodeTransactions, rowNodeOrder, changedPath, afterColumnsChanged) {\n        var _this = this;\n        // grouping is enterprise only, so if service missing, skip the step\n        var doingLegacyTreeData = utils_1._.exists(this.gridOptionsWrapper.getNodeChildDetailsFunc());\n        if (doingLegacyTreeData) {\n            return;\n        }\n        if (this.groupStage) {\n            if (rowNodeTransactions && utils_1._.exists(rowNodeTransactions)) {\n                rowNodeTransactions.forEach(function (tran) {\n                    _this.groupStage.execute({\n                        rowNode: _this.rootNode,\n                        rowNodeTransaction: tran,\n                        rowNodeOrder: rowNodeOrder,\n                        changedPath: changedPath\n                    });\n                });\n            }\n            else {\n                // groups are about to get disposed, so need to deselect any that are selected\n                this.selectionController.removeGroupsFromSelection();\n                this.groupStage.execute({\n                    rowNode: this.rootNode,\n                    changedPath: changedPath,\n                    afterColumnsChanged: afterColumnsChanged\n                });\n                // set open/closed state on groups\n                this.restoreGroupState(groupState);\n            }\n            if (this.gridOptionsWrapper.isGroupSelectsChildren()) {\n                this.selectionController.updateGroupsFromChildrenSelections(changedPath);\n            }\n        }\n        else {\n            this.rootNode.childrenAfterGroup = this.rootNode.allLeafChildren;\n        }\n    };\n    ClientSideRowModel.prototype.restoreGroupState = function (groupState) {\n        if (!groupState) {\n            return;\n        }\n        utils_1._.traverseNodesWithKey(this.rootNode.childrenAfterGroup, function (node, key) {\n            // if the group was open last time, then open it this time. however\n            // if was not open last time, then don't touch the group, so the 'groupDefaultExpanded'\n            // setting will take effect.\n            if (typeof groupState[key] === 'boolean') {\n                node.expanded = groupState[key];\n            }\n        });\n    };\n    ClientSideRowModel.prototype.doFilter = function (changedPath) {\n        this.filterStage.execute({ rowNode: this.rootNode, changedPath: changedPath });\n    };\n    ClientSideRowModel.prototype.doPivot = function (changedPath) {\n        if (this.pivotStage) {\n            this.pivotStage.execute({ rowNode: this.rootNode, changedPath: changedPath });\n        }\n    };\n    ClientSideRowModel.prototype.getGroupState = function () {\n        if (!this.rootNode.childrenAfterGroup || !this.gridOptionsWrapper.isRememberGroupStateWhenNewData()) {\n            return null;\n        }\n        var result = {};\n        utils_1._.traverseNodesWithKey(this.rootNode.childrenAfterGroup, function (node, key) { return result[key] = node.expanded; });\n        return result;\n    };\n    ClientSideRowModel.prototype.getCopyOfNodesMap = function () {\n        return this.nodeManager.getCopyOfNodesMap();\n    };\n    ClientSideRowModel.prototype.getRowNode = function (id) {\n        return this.nodeManager.getRowNode(id);\n    };\n    // rows: the rows to put into the model\n    ClientSideRowModel.prototype.setRowData = function (rowData) {\n        // no need to invalidate cache, as the cache is stored on the rowNode,\n        // so new rowNodes means the cache is wiped anyway.\n        // remember group state, so we can expand groups that should be expanded\n        var groupState = this.getGroupState();\n        this.nodeManager.setRowData(rowData);\n        // this event kicks off:\n        // - clears selection\n        // - updates filters\n        // - shows 'no rows' overlay if needed\n        var rowDataChangedEvent = {\n            type: events_1.Events.EVENT_ROW_DATA_CHANGED,\n            api: this.gridApi,\n            columnApi: this.columnApi\n        };\n        this.eventService.dispatchEvent(rowDataChangedEvent);\n        this.refreshModel({\n            step: constants_1.Constants.STEP_EVERYTHING,\n            groupState: groupState,\n            newData: true\n        });\n    };\n    ClientSideRowModel.prototype.batchUpdateRowData = function (rowDataTransaction, callback) {\n        var _this = this;\n        if (!this.rowDataTransactionBatch) {\n            this.rowDataTransactionBatch = [];\n            var waitMillis = this.gridOptionsWrapper.getBatchUpdateWaitMillis();\n            window.setTimeout(function () {\n                _this.executeBatchUpdateRowData();\n                _this.rowDataTransactionBatch = null;\n            }, waitMillis);\n        }\n        this.rowDataTransactionBatch.push({ rowDataTransaction: rowDataTransaction, callback: callback });\n    };\n    ClientSideRowModel.prototype.executeBatchUpdateRowData = function () {\n        var _this = this;\n        this.valueCache.onDataChanged();\n        var callbackFuncsBound = [];\n        var rowNodeTrans = [];\n        if (this.rowDataTransactionBatch) {\n            this.rowDataTransactionBatch.forEach(function (tranItem) {\n                var rowNodeTran = _this.nodeManager.updateRowData(tranItem.rowDataTransaction, null);\n                rowNodeTrans.push(rowNodeTran);\n                if (tranItem.callback) {\n                    callbackFuncsBound.push(tranItem.callback.bind(null, rowNodeTran));\n                }\n            });\n        }\n        this.commonUpdateRowData(rowNodeTrans);\n        // do callbacks in next VM turn so it's async\n        if (callbackFuncsBound.length > 0) {\n            window.setTimeout(function () {\n                callbackFuncsBound.forEach(function (func) { return func(); });\n            }, 0);\n        }\n    };\n    ClientSideRowModel.prototype.updateRowData = function (rowDataTran, rowNodeOrder) {\n        this.valueCache.onDataChanged();\n        var rowNodeTran = this.nodeManager.updateRowData(rowDataTran, rowNodeOrder);\n        this.commonUpdateRowData([rowNodeTran], rowNodeOrder);\n        return rowNodeTran;\n    };\n    // common to updateRowData and batchUpdateRowData\n    ClientSideRowModel.prototype.commonUpdateRowData = function (rowNodeTrans, rowNodeOrder) {\n        this.refreshModel({\n            step: constants_1.Constants.STEP_EVERYTHING,\n            rowNodeTransactions: rowNodeTrans,\n            rowNodeOrder: rowNodeOrder,\n            keepRenderedRows: true,\n            animate: true,\n            keepEditingRows: true\n        });\n        var event = {\n            type: events_1.Events.EVENT_ROW_DATA_UPDATED,\n            api: this.gridApi,\n            columnApi: this.columnApi\n        };\n        this.eventService.dispatchEvent(event);\n    };\n    ClientSideRowModel.prototype.doRowsToDisplay = function () {\n        this.rowsToDisplay = this.flattenStage.execute({ rowNode: this.rootNode });\n    };\n    ClientSideRowModel.prototype.onRowHeightChanged = function () {\n        this.refreshModel({ step: constants_1.Constants.STEP_MAP, keepRenderedRows: true, keepEditingRows: true });\n    };\n    ClientSideRowModel.prototype.resetRowHeights = function () {\n        this.forEachNode(function (rowNode) { return rowNode.setRowHeight(null); });\n        this.onRowHeightChanged();\n    };\n    __decorate([\n        context_1.Autowired('gridOptionsWrapper'),\n        __metadata(\"design:type\", gridOptionsWrapper_1.GridOptionsWrapper)\n    ], ClientSideRowModel.prototype, \"gridOptionsWrapper\", void 0);\n    __decorate([\n        context_1.Autowired('columnController'),\n        __metadata(\"design:type\", columnController_1.ColumnController)\n    ], ClientSideRowModel.prototype, \"columnController\", void 0);\n    __decorate([\n        context_1.Autowired('filterManager'),\n        __metadata(\"design:type\", filterManager_1.FilterManager)\n    ], ClientSideRowModel.prototype, \"filterManager\", void 0);\n    __decorate([\n        context_1.Autowired('$scope'),\n        __metadata(\"design:type\", Object)\n    ], ClientSideRowModel.prototype, \"$scope\", void 0);\n    __decorate([\n        context_1.Autowired('selectionController'),\n        __metadata(\"design:type\", selectionController_1.SelectionController)\n    ], ClientSideRowModel.prototype, \"selectionController\", void 0);\n    __decorate([\n        context_1.Autowired('eventService'),\n        __metadata(\"design:type\", eventService_1.EventService)\n    ], ClientSideRowModel.prototype, \"eventService\", void 0);\n    __decorate([\n        context_1.Autowired('context'),\n        __metadata(\"design:type\", context_1.Context)\n    ], ClientSideRowModel.prototype, \"context\", void 0);\n    __decorate([\n        context_1.Autowired('valueService'),\n        __metadata(\"design:type\", valueService_1.ValueService)\n    ], ClientSideRowModel.prototype, \"valueService\", void 0);\n    __decorate([\n        context_1.Autowired('valueCache'),\n        __metadata(\"design:type\", valueCache_1.ValueCache)\n    ], ClientSideRowModel.prototype, \"valueCache\", void 0);\n    __decorate([\n        context_1.Autowired('columnApi'),\n        __metadata(\"design:type\", columnApi_1.ColumnApi)\n    ], ClientSideRowModel.prototype, \"columnApi\", void 0);\n    __decorate([\n        context_1.Autowired('gridApi'),\n        __metadata(\"design:type\", gridApi_1.GridApi)\n    ], ClientSideRowModel.prototype, \"gridApi\", void 0);\n    __decorate([\n        context_1.Autowired('filterStage'),\n        __metadata(\"design:type\", Object)\n    ], ClientSideRowModel.prototype, \"filterStage\", void 0);\n    __decorate([\n        context_1.Autowired('sortStage'),\n        __metadata(\"design:type\", Object)\n    ], ClientSideRowModel.prototype, \"sortStage\", void 0);\n    __decorate([\n        context_1.Autowired('flattenStage'),\n        __metadata(\"design:type\", Object)\n    ], ClientSideRowModel.prototype, \"flattenStage\", void 0);\n    __decorate([\n        context_1.Optional('groupStage'),\n        __metadata(\"design:type\", Object)\n    ], ClientSideRowModel.prototype, \"groupStage\", void 0);\n    __decorate([\n        context_1.Optional('aggregationStage'),\n        __metadata(\"design:type\", Object)\n    ], ClientSideRowModel.prototype, \"aggregationStage\", void 0);\n    __decorate([\n        context_1.Optional('pivotStage'),\n        __metadata(\"design:type\", Object)\n    ], ClientSideRowModel.prototype, \"pivotStage\", void 0);\n    __decorate([\n        context_1.PostConstruct,\n        __metadata(\"design:type\", Function),\n        __metadata(\"design:paramtypes\", []),\n        __metadata(\"design:returntype\", void 0)\n    ], ClientSideRowModel.prototype, \"init\", null);\n    ClientSideRowModel = __decorate([\n        context_1.Bean('rowModel')\n    ], ClientSideRowModel);\n    return ClientSideRowModel;\n}());\nexports.ClientSideRowModel = ClientSideRowModel;\n"]},"metadata":{},"sourceType":"script"}