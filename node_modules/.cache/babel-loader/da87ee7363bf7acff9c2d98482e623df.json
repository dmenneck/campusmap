{"ast":null,"code":"/**\n * @module ol/style/Stroke\n */\nimport { getUid } from '../util.js';\n/**\n * @typedef {Object} Options\n * @property {import(\"../color.js\").Color|import(\"../colorlike.js\").ColorLike} [color] A color, gradient or pattern.\n * See {@link module:ol/color~Color} and {@link module:ol/colorlike~ColorLike} for possible formats.\n * Default null; if null, the Canvas/renderer default black will be used.\n * @property {string} [lineCap='round'] Line cap style: `butt`, `round`, or `square`.\n * @property {string} [lineJoin='round'] Line join style: `bevel`, `round`, or `miter`.\n * @property {Array<number>} [lineDash] Line dash pattern. Default is `undefined` (no dash).\n * Please note that Internet Explorer 10 and lower do not support the `setLineDash` method on\n * the `CanvasRenderingContext2D` and therefore this option will have no visual effect in these browsers.\n * @property {number} [lineDashOffset=0] Line dash offset.\n * @property {number} [miterLimit=10] Miter limit.\n * @property {number} [width] Width.\n */\n\n/**\n * @classdesc\n * Set stroke style for vector features.\n * Note that the defaults given are the Canvas defaults, which will be used if\n * option is not defined. The `get` functions return whatever was entered in\n * the options; they will not return the default.\n * @api\n */\n\nvar Stroke = function Stroke(opt_options) {\n  var options = opt_options || {};\n  /**\n   * @private\n   * @type {import(\"../color.js\").Color|import(\"../colorlike.js\").ColorLike}\n   */\n\n  this.color_ = options.color !== undefined ? options.color : null;\n  /**\n   * @private\n   * @type {string|undefined}\n   */\n\n  this.lineCap_ = options.lineCap;\n  /**\n   * @private\n   * @type {Array<number>}\n   */\n\n  this.lineDash_ = options.lineDash !== undefined ? options.lineDash : null;\n  /**\n   * @private\n   * @type {number|undefined}\n   */\n\n  this.lineDashOffset_ = options.lineDashOffset;\n  /**\n   * @private\n   * @type {string|undefined}\n   */\n\n  this.lineJoin_ = options.lineJoin;\n  /**\n   * @private\n   * @type {number|undefined}\n   */\n\n  this.miterLimit_ = options.miterLimit;\n  /**\n   * @private\n   * @type {number|undefined}\n   */\n\n  this.width_ = options.width;\n  /**\n   * @private\n   * @type {string|undefined}\n   */\n\n  this.checksum_ = undefined;\n};\n/**\n * Clones the style.\n * @return {Stroke} The cloned style.\n * @api\n */\n\n\nStroke.prototype.clone = function clone() {\n  var color = this.getColor();\n  return new Stroke({\n    color: Array.isArray(color) ? color.slice() : color || undefined,\n    lineCap: this.getLineCap(),\n    lineDash: this.getLineDash() ? this.getLineDash().slice() : undefined,\n    lineDashOffset: this.getLineDashOffset(),\n    lineJoin: this.getLineJoin(),\n    miterLimit: this.getMiterLimit(),\n    width: this.getWidth()\n  });\n};\n/**\n * Get the stroke color.\n * @return {import(\"../color.js\").Color|import(\"../colorlike.js\").ColorLike} Color.\n * @api\n */\n\n\nStroke.prototype.getColor = function getColor() {\n  return this.color_;\n};\n/**\n * Get the line cap type for the stroke.\n * @return {string|undefined} Line cap.\n * @api\n */\n\n\nStroke.prototype.getLineCap = function getLineCap() {\n  return this.lineCap_;\n};\n/**\n * Get the line dash style for the stroke.\n * @return {Array<number>} Line dash.\n * @api\n */\n\n\nStroke.prototype.getLineDash = function getLineDash() {\n  return this.lineDash_;\n};\n/**\n * Get the line dash offset for the stroke.\n * @return {number|undefined} Line dash offset.\n * @api\n */\n\n\nStroke.prototype.getLineDashOffset = function getLineDashOffset() {\n  return this.lineDashOffset_;\n};\n/**\n * Get the line join type for the stroke.\n * @return {string|undefined} Line join.\n * @api\n */\n\n\nStroke.prototype.getLineJoin = function getLineJoin() {\n  return this.lineJoin_;\n};\n/**\n * Get the miter limit for the stroke.\n * @return {number|undefined} Miter limit.\n * @api\n */\n\n\nStroke.prototype.getMiterLimit = function getMiterLimit() {\n  return this.miterLimit_;\n};\n/**\n * Get the stroke width.\n * @return {number|undefined} Width.\n * @api\n */\n\n\nStroke.prototype.getWidth = function getWidth() {\n  return this.width_;\n};\n/**\n * Set the color.\n *\n * @param {import(\"../color.js\").Color|import(\"../colorlike.js\").ColorLike} color Color.\n * @api\n */\n\n\nStroke.prototype.setColor = function setColor(color) {\n  this.color_ = color;\n  this.checksum_ = undefined;\n};\n/**\n * Set the line cap.\n *\n * @param {string|undefined} lineCap Line cap.\n * @api\n */\n\n\nStroke.prototype.setLineCap = function setLineCap(lineCap) {\n  this.lineCap_ = lineCap;\n  this.checksum_ = undefined;\n};\n/**\n * Set the line dash.\n *\n * Please note that Internet Explorer 10 and lower [do not support][mdn] the\n * `setLineDash` method on the `CanvasRenderingContext2D` and therefore this\n * property will have no visual effect in these browsers.\n *\n * [mdn]: https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/setLineDash#Browser_compatibility\n *\n * @param {Array<number>} lineDash Line dash.\n * @api\n */\n\n\nStroke.prototype.setLineDash = function setLineDash(lineDash) {\n  this.lineDash_ = lineDash;\n  this.checksum_ = undefined;\n};\n/**\n * Set the line dash offset.\n *\n * @param {number|undefined} lineDashOffset Line dash offset.\n * @api\n */\n\n\nStroke.prototype.setLineDashOffset = function setLineDashOffset(lineDashOffset) {\n  this.lineDashOffset_ = lineDashOffset;\n  this.checksum_ = undefined;\n};\n/**\n * Set the line join.\n *\n * @param {string|undefined} lineJoin Line join.\n * @api\n */\n\n\nStroke.prototype.setLineJoin = function setLineJoin(lineJoin) {\n  this.lineJoin_ = lineJoin;\n  this.checksum_ = undefined;\n};\n/**\n * Set the miter limit.\n *\n * @param {number|undefined} miterLimit Miter limit.\n * @api\n */\n\n\nStroke.prototype.setMiterLimit = function setMiterLimit(miterLimit) {\n  this.miterLimit_ = miterLimit;\n  this.checksum_ = undefined;\n};\n/**\n * Set the width.\n *\n * @param {number|undefined} width Width.\n * @api\n */\n\n\nStroke.prototype.setWidth = function setWidth(width) {\n  this.width_ = width;\n  this.checksum_ = undefined;\n};\n/**\n * @return {string} The checksum.\n */\n\n\nStroke.prototype.getChecksum = function getChecksum() {\n  if (this.checksum_ === undefined) {\n    this.checksum_ = 's';\n\n    if (this.color_) {\n      if (typeof this.color_ === 'string') {\n        this.checksum_ += this.color_;\n      } else {\n        this.checksum_ += getUid(this.color_);\n      }\n    } else {\n      this.checksum_ += '-';\n    }\n\n    this.checksum_ += ',' + (this.lineCap_ !== undefined ? this.lineCap_.toString() : '-') + ',' + (this.lineDash_ ? this.lineDash_.toString() : '-') + ',' + (this.lineDashOffset_ !== undefined ? this.lineDashOffset_ : '-') + ',' + (this.lineJoin_ !== undefined ? this.lineJoin_ : '-') + ',' + (this.miterLimit_ !== undefined ? this.miterLimit_.toString() : '-') + ',' + (this.width_ !== undefined ? this.width_.toString() : '-');\n  }\n\n  return this.checksum_;\n};\n\nexport default Stroke;","map":{"version":3,"sources":["../../../src/ol/style/Stroke.js"],"names":["const"],"mappings":"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","sourcesContent":["/**\n * @module ol/style/Stroke\n */\nimport {getUid} from '../util.js';\n\n\n/**\n * @typedef {Object} Options\n * @property {import(\"../color.js\").Color|import(\"../colorlike.js\").ColorLike} [color] A color, gradient or pattern.\n * See {@link module:ol/color~Color} and {@link module:ol/colorlike~ColorLike} for possible formats.\n * Default null; if null, the Canvas/renderer default black will be used.\n * @property {string} [lineCap='round'] Line cap style: `butt`, `round`, or `square`.\n * @property {string} [lineJoin='round'] Line join style: `bevel`, `round`, or `miter`.\n * @property {Array<number>} [lineDash] Line dash pattern. Default is `undefined` (no dash).\n * Please note that Internet Explorer 10 and lower do not support the `setLineDash` method on\n * the `CanvasRenderingContext2D` and therefore this option will have no visual effect in these browsers.\n * @property {number} [lineDashOffset=0] Line dash offset.\n * @property {number} [miterLimit=10] Miter limit.\n * @property {number} [width] Width.\n */\n\n\n/**\n * @classdesc\n * Set stroke style for vector features.\n * Note that the defaults given are the Canvas defaults, which will be used if\n * option is not defined. The `get` functions return whatever was entered in\n * the options; they will not return the default.\n * @api\n */\nclass Stroke {\n  /**\n   * @param {Options=} opt_options Options.\n   */\n  constructor(opt_options) {\n\n    const options = opt_options || {};\n\n    /**\n     * @private\n     * @type {import(\"../color.js\").Color|import(\"../colorlike.js\").ColorLike}\n     */\n    this.color_ = options.color !== undefined ? options.color : null;\n\n    /**\n     * @private\n     * @type {string|undefined}\n     */\n    this.lineCap_ = options.lineCap;\n\n    /**\n     * @private\n     * @type {Array<number>}\n     */\n    this.lineDash_ = options.lineDash !== undefined ? options.lineDash : null;\n\n    /**\n     * @private\n     * @type {number|undefined}\n     */\n    this.lineDashOffset_ = options.lineDashOffset;\n\n    /**\n     * @private\n     * @type {string|undefined}\n     */\n    this.lineJoin_ = options.lineJoin;\n\n    /**\n     * @private\n     * @type {number|undefined}\n     */\n    this.miterLimit_ = options.miterLimit;\n\n    /**\n     * @private\n     * @type {number|undefined}\n     */\n    this.width_ = options.width;\n\n    /**\n     * @private\n     * @type {string|undefined}\n     */\n    this.checksum_ = undefined;\n  }\n\n  /**\n   * Clones the style.\n   * @return {Stroke} The cloned style.\n   * @api\n   */\n  clone() {\n    const color = this.getColor();\n    return new Stroke({\n      color: Array.isArray(color) ? color.slice() : color || undefined,\n      lineCap: this.getLineCap(),\n      lineDash: this.getLineDash() ? this.getLineDash().slice() : undefined,\n      lineDashOffset: this.getLineDashOffset(),\n      lineJoin: this.getLineJoin(),\n      miterLimit: this.getMiterLimit(),\n      width: this.getWidth()\n    });\n  }\n\n  /**\n   * Get the stroke color.\n   * @return {import(\"../color.js\").Color|import(\"../colorlike.js\").ColorLike} Color.\n   * @api\n   */\n  getColor() {\n    return this.color_;\n  }\n\n  /**\n   * Get the line cap type for the stroke.\n   * @return {string|undefined} Line cap.\n   * @api\n   */\n  getLineCap() {\n    return this.lineCap_;\n  }\n\n  /**\n   * Get the line dash style for the stroke.\n   * @return {Array<number>} Line dash.\n   * @api\n   */\n  getLineDash() {\n    return this.lineDash_;\n  }\n\n  /**\n   * Get the line dash offset for the stroke.\n   * @return {number|undefined} Line dash offset.\n   * @api\n   */\n  getLineDashOffset() {\n    return this.lineDashOffset_;\n  }\n\n  /**\n   * Get the line join type for the stroke.\n   * @return {string|undefined} Line join.\n   * @api\n   */\n  getLineJoin() {\n    return this.lineJoin_;\n  }\n\n  /**\n   * Get the miter limit for the stroke.\n   * @return {number|undefined} Miter limit.\n   * @api\n   */\n  getMiterLimit() {\n    return this.miterLimit_;\n  }\n\n  /**\n   * Get the stroke width.\n   * @return {number|undefined} Width.\n   * @api\n   */\n  getWidth() {\n    return this.width_;\n  }\n\n  /**\n   * Set the color.\n   *\n   * @param {import(\"../color.js\").Color|import(\"../colorlike.js\").ColorLike} color Color.\n   * @api\n   */\n  setColor(color) {\n    this.color_ = color;\n    this.checksum_ = undefined;\n  }\n\n  /**\n   * Set the line cap.\n   *\n   * @param {string|undefined} lineCap Line cap.\n   * @api\n   */\n  setLineCap(lineCap) {\n    this.lineCap_ = lineCap;\n    this.checksum_ = undefined;\n  }\n\n  /**\n   * Set the line dash.\n   *\n   * Please note that Internet Explorer 10 and lower [do not support][mdn] the\n   * `setLineDash` method on the `CanvasRenderingContext2D` and therefore this\n   * property will have no visual effect in these browsers.\n   *\n   * [mdn]: https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/setLineDash#Browser_compatibility\n   *\n   * @param {Array<number>} lineDash Line dash.\n   * @api\n   */\n  setLineDash(lineDash) {\n    this.lineDash_ = lineDash;\n    this.checksum_ = undefined;\n  }\n\n  /**\n   * Set the line dash offset.\n   *\n   * @param {number|undefined} lineDashOffset Line dash offset.\n   * @api\n   */\n  setLineDashOffset(lineDashOffset) {\n    this.lineDashOffset_ = lineDashOffset;\n    this.checksum_ = undefined;\n  }\n\n  /**\n   * Set the line join.\n   *\n   * @param {string|undefined} lineJoin Line join.\n   * @api\n   */\n  setLineJoin(lineJoin) {\n    this.lineJoin_ = lineJoin;\n    this.checksum_ = undefined;\n  }\n\n  /**\n   * Set the miter limit.\n   *\n   * @param {number|undefined} miterLimit Miter limit.\n   * @api\n   */\n  setMiterLimit(miterLimit) {\n    this.miterLimit_ = miterLimit;\n    this.checksum_ = undefined;\n  }\n\n  /**\n   * Set the width.\n   *\n   * @param {number|undefined} width Width.\n   * @api\n   */\n  setWidth(width) {\n    this.width_ = width;\n    this.checksum_ = undefined;\n  }\n\n  /**\n   * @return {string} The checksum.\n   */\n  getChecksum() {\n    if (this.checksum_ === undefined) {\n      this.checksum_ = 's';\n      if (this.color_) {\n        if (typeof this.color_ === 'string') {\n          this.checksum_ += this.color_;\n        } else {\n          this.checksum_ += getUid(this.color_);\n        }\n      } else {\n        this.checksum_ += '-';\n      }\n      this.checksum_ += ',' +\n          (this.lineCap_ !== undefined ?\n            this.lineCap_.toString() : '-') + ',' +\n          (this.lineDash_ ?\n            this.lineDash_.toString() : '-') + ',' +\n          (this.lineDashOffset_ !== undefined ?\n            this.lineDashOffset_ : '-') + ',' +\n          (this.lineJoin_ !== undefined ?\n            this.lineJoin_ : '-') + ',' +\n          (this.miterLimit_ !== undefined ?\n            this.miterLimit_.toString() : '-') + ',' +\n          (this.width_ !== undefined ?\n            this.width_.toString() : '-');\n    }\n\n    return this.checksum_;\n  }\n}\n\nexport default Stroke;\n"]},"metadata":{},"sourceType":"module"}