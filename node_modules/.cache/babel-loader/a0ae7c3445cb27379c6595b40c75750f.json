{"ast":null,"code":"/**\n * @module ol/source/UrlTile\n */\nimport { getUid } from '../util.js';\nimport TileState from '../TileState.js';\nimport { expandUrl, createFromTemplates, nullTileUrlFunction } from '../tileurlfunction.js';\nimport TileSource, { TileSourceEvent } from './Tile.js';\nimport TileEventType from './TileEventType.js';\nimport { getKeyZXY } from '../tilecoord.js';\n/**\n * @typedef {Object} Options\n * @property {import(\"./Source.js\").AttributionLike} [attributions]\n * @property {boolean} [attributionsCollapsible=true] Attributions are collapsible.\n * @property {number} [cacheSize]\n * @property {boolean} [opaque]\n * @property {import(\"../proj.js\").ProjectionLike} [projection]\n * @property {import(\"./State.js\").default} [state]\n * @property {import(\"../tilegrid/TileGrid.js\").default} [tileGrid]\n * @property {import(\"../Tile.js\").LoadFunction} tileLoadFunction\n * @property {number} [tilePixelRatio]\n * @property {import(\"../Tile.js\").UrlFunction} [tileUrlFunction]\n * @property {string} [url]\n * @property {Array<string>} [urls]\n * @property {boolean} [wrapX=true]\n * @property {number} [transition]\n * @property {string} [key]\n */\n\n/**\n * @classdesc\n * Base class for sources providing tiles divided into a tile grid over http.\n *\n * @fires import(\"./Tile.js\").TileSourceEvent\n */\n\nvar UrlTile =\n/*@__PURE__*/\nfunction (TileSource) {\n  function UrlTile(options) {\n    TileSource.call(this, {\n      attributions: options.attributions,\n      cacheSize: options.cacheSize,\n      opaque: options.opaque,\n      projection: options.projection,\n      state: options.state,\n      tileGrid: options.tileGrid,\n      tilePixelRatio: options.tilePixelRatio,\n      wrapX: options.wrapX,\n      transition: options.transition,\n      key: options.key,\n      attributionsCollapsible: options.attributionsCollapsible\n    });\n    /**\n     * @private\n     * @type {boolean}\n     */\n\n    this.generateTileUrlFunction_ = !options.tileUrlFunction;\n    /**\n     * @protected\n     * @type {import(\"../Tile.js\").LoadFunction}\n     */\n\n    this.tileLoadFunction = options.tileLoadFunction;\n    /**\n     * @protected\n     * @type {import(\"../Tile.js\").UrlFunction}\n     */\n\n    this.tileUrlFunction = options.tileUrlFunction ? options.tileUrlFunction.bind(this) : nullTileUrlFunction;\n    /**\n     * @protected\n     * @type {!Array<string>|null}\n     */\n\n    this.urls = null;\n\n    if (options.urls) {\n      this.setUrls(options.urls);\n    } else if (options.url) {\n      this.setUrl(options.url);\n    }\n\n    if (options.tileUrlFunction) {\n      this.setTileUrlFunction(options.tileUrlFunction, this.key_);\n    }\n    /**\n     * @private\n     * @type {!Object<string, boolean>}\n     */\n\n\n    this.tileLoadingKeys_ = {};\n  }\n\n  if (TileSource) UrlTile.__proto__ = TileSource;\n  UrlTile.prototype = Object.create(TileSource && TileSource.prototype);\n  UrlTile.prototype.constructor = UrlTile;\n  /**\n   * Return the tile load function of the source.\n   * @return {import(\"../Tile.js\").LoadFunction} TileLoadFunction\n   * @api\n   */\n\n  UrlTile.prototype.getTileLoadFunction = function getTileLoadFunction() {\n    return this.tileLoadFunction;\n  };\n  /**\n   * Return the tile URL function of the source.\n   * @return {import(\"../Tile.js\").UrlFunction} TileUrlFunction\n   * @api\n   */\n\n\n  UrlTile.prototype.getTileUrlFunction = function getTileUrlFunction() {\n    return this.tileUrlFunction;\n  };\n  /**\n   * Return the URLs used for this source.\n   * When a tileUrlFunction is used instead of url or urls,\n   * null will be returned.\n   * @return {!Array<string>|null} URLs.\n   * @api\n   */\n\n\n  UrlTile.prototype.getUrls = function getUrls() {\n    return this.urls;\n  };\n  /**\n   * Handle tile change events.\n   * @param {import(\"../events/Event.js\").default} event Event.\n   * @protected\n   */\n\n\n  UrlTile.prototype.handleTileChange = function handleTileChange(event) {\n    var tile =\n    /** @type {import(\"../Tile.js\").default} */\n    event.target;\n    var uid = getUid(tile);\n    var tileState = tile.getState();\n    var type;\n\n    if (tileState == TileState.LOADING) {\n      this.tileLoadingKeys_[uid] = true;\n      type = TileEventType.TILELOADSTART;\n    } else if (uid in this.tileLoadingKeys_) {\n      delete this.tileLoadingKeys_[uid];\n      type = tileState == TileState.ERROR ? TileEventType.TILELOADERROR : tileState == TileState.LOADED || tileState == TileState.ABORT ? TileEventType.TILELOADEND : undefined;\n    }\n\n    if (type != undefined) {\n      this.dispatchEvent(new TileSourceEvent(type, tile));\n    }\n  };\n  /**\n   * Set the tile load function of the source.\n   * @param {import(\"../Tile.js\").LoadFunction} tileLoadFunction Tile load function.\n   * @api\n   */\n\n\n  UrlTile.prototype.setTileLoadFunction = function setTileLoadFunction(tileLoadFunction) {\n    this.tileCache.clear();\n    this.tileLoadFunction = tileLoadFunction;\n    this.changed();\n  };\n  /**\n   * Set the tile URL function of the source.\n   * @param {import(\"../Tile.js\").UrlFunction} tileUrlFunction Tile URL function.\n   * @param {string=} key Optional new tile key for the source.\n   * @api\n   */\n\n\n  UrlTile.prototype.setTileUrlFunction = function setTileUrlFunction(tileUrlFunction, key) {\n    this.tileUrlFunction = tileUrlFunction;\n    this.tileCache.pruneExceptNewestZ();\n\n    if (typeof key !== 'undefined') {\n      this.setKey(key);\n    } else {\n      this.changed();\n    }\n  };\n  /**\n   * Set the URL to use for requests.\n   * @param {string} url URL.\n   * @api\n   */\n\n\n  UrlTile.prototype.setUrl = function setUrl(url) {\n    var urls = this.urls = expandUrl(url);\n    this.setUrls(urls);\n  };\n  /**\n   * Set the URLs to use for requests.\n   * @param {Array<string>} urls URLs.\n   * @api\n   */\n\n\n  UrlTile.prototype.setUrls = function setUrls(urls) {\n    this.urls = urls;\n    var key = urls.join('\\n');\n\n    if (this.generateTileUrlFunction_) {\n      this.setTileUrlFunction(createFromTemplates(urls, this.tileGrid), key);\n    } else {\n      this.setKey(key);\n    }\n  };\n  /**\n   * @inheritDoc\n   */\n\n\n  UrlTile.prototype.useTile = function useTile(z, x, y) {\n    var tileCoordKey = getKeyZXY(z, x, y);\n\n    if (this.tileCache.containsKey(tileCoordKey)) {\n      this.tileCache.get(tileCoordKey);\n    }\n  };\n\n  return UrlTile;\n}(TileSource);\n\nexport default UrlTile;","map":{"version":3,"sources":["../../../src/ol/source/UrlTile.js"],"names":["super","const","let"],"mappings":"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","sourcesContent":["/**\n * @module ol/source/UrlTile\n */\nimport {getUid} from '../util.js';\nimport TileState from '../TileState.js';\nimport {expandUrl, createFromTemplates, nullTileUrlFunction} from '../tileurlfunction.js';\nimport TileSource, {TileSourceEvent} from './Tile.js';\nimport TileEventType from './TileEventType.js';\nimport {getKeyZXY} from '../tilecoord.js';\n\n/**\n * @typedef {Object} Options\n * @property {import(\"./Source.js\").AttributionLike} [attributions]\n * @property {boolean} [attributionsCollapsible=true] Attributions are collapsible.\n * @property {number} [cacheSize]\n * @property {boolean} [opaque]\n * @property {import(\"../proj.js\").ProjectionLike} [projection]\n * @property {import(\"./State.js\").default} [state]\n * @property {import(\"../tilegrid/TileGrid.js\").default} [tileGrid]\n * @property {import(\"../Tile.js\").LoadFunction} tileLoadFunction\n * @property {number} [tilePixelRatio]\n * @property {import(\"../Tile.js\").UrlFunction} [tileUrlFunction]\n * @property {string} [url]\n * @property {Array<string>} [urls]\n * @property {boolean} [wrapX=true]\n * @property {number} [transition]\n * @property {string} [key]\n */\n\n\n/**\n * @classdesc\n * Base class for sources providing tiles divided into a tile grid over http.\n *\n * @fires import(\"./Tile.js\").TileSourceEvent\n */\nclass UrlTile extends TileSource {\n  /**\n   * @param {Options} options Image tile options.\n   */\n  constructor(options) {\n\n    super({\n      attributions: options.attributions,\n      cacheSize: options.cacheSize,\n      opaque: options.opaque,\n      projection: options.projection,\n      state: options.state,\n      tileGrid: options.tileGrid,\n      tilePixelRatio: options.tilePixelRatio,\n      wrapX: options.wrapX,\n      transition: options.transition,\n      key: options.key,\n      attributionsCollapsible: options.attributionsCollapsible\n    });\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.generateTileUrlFunction_ = !options.tileUrlFunction;\n\n    /**\n     * @protected\n     * @type {import(\"../Tile.js\").LoadFunction}\n     */\n    this.tileLoadFunction = options.tileLoadFunction;\n\n    /**\n     * @protected\n     * @type {import(\"../Tile.js\").UrlFunction}\n     */\n    this.tileUrlFunction = options.tileUrlFunction ? options.tileUrlFunction.bind(this) : nullTileUrlFunction;\n\n    /**\n     * @protected\n     * @type {!Array<string>|null}\n     */\n    this.urls = null;\n\n    if (options.urls) {\n      this.setUrls(options.urls);\n    } else if (options.url) {\n      this.setUrl(options.url);\n    }\n\n    if (options.tileUrlFunction) {\n      this.setTileUrlFunction(options.tileUrlFunction, this.key_);\n    }\n\n    /**\n     * @private\n     * @type {!Object<string, boolean>}\n     */\n    this.tileLoadingKeys_ = {};\n\n  }\n\n  /**\n   * Return the tile load function of the source.\n   * @return {import(\"../Tile.js\").LoadFunction} TileLoadFunction\n   * @api\n   */\n  getTileLoadFunction() {\n    return this.tileLoadFunction;\n  }\n\n  /**\n   * Return the tile URL function of the source.\n   * @return {import(\"../Tile.js\").UrlFunction} TileUrlFunction\n   * @api\n   */\n  getTileUrlFunction() {\n    return this.tileUrlFunction;\n  }\n\n  /**\n   * Return the URLs used for this source.\n   * When a tileUrlFunction is used instead of url or urls,\n   * null will be returned.\n   * @return {!Array<string>|null} URLs.\n   * @api\n   */\n  getUrls() {\n    return this.urls;\n  }\n\n  /**\n   * Handle tile change events.\n   * @param {import(\"../events/Event.js\").default} event Event.\n   * @protected\n   */\n  handleTileChange(event) {\n    const tile = /** @type {import(\"../Tile.js\").default} */ (event.target);\n    const uid = getUid(tile);\n    const tileState = tile.getState();\n    let type;\n    if (tileState == TileState.LOADING) {\n      this.tileLoadingKeys_[uid] = true;\n      type = TileEventType.TILELOADSTART;\n    } else if (uid in this.tileLoadingKeys_) {\n      delete this.tileLoadingKeys_[uid];\n      type = tileState == TileState.ERROR ? TileEventType.TILELOADERROR :\n        (tileState == TileState.LOADED || tileState == TileState.ABORT) ?\n          TileEventType.TILELOADEND : undefined;\n    }\n    if (type != undefined) {\n      this.dispatchEvent(new TileSourceEvent(type, tile));\n    }\n  }\n\n  /**\n   * Set the tile load function of the source.\n   * @param {import(\"../Tile.js\").LoadFunction} tileLoadFunction Tile load function.\n   * @api\n   */\n  setTileLoadFunction(tileLoadFunction) {\n    this.tileCache.clear();\n    this.tileLoadFunction = tileLoadFunction;\n    this.changed();\n  }\n\n  /**\n   * Set the tile URL function of the source.\n   * @param {import(\"../Tile.js\").UrlFunction} tileUrlFunction Tile URL function.\n   * @param {string=} key Optional new tile key for the source.\n   * @api\n   */\n  setTileUrlFunction(tileUrlFunction, key) {\n    this.tileUrlFunction = tileUrlFunction;\n    this.tileCache.pruneExceptNewestZ();\n    if (typeof key !== 'undefined') {\n      this.setKey(key);\n    } else {\n      this.changed();\n    }\n  }\n\n  /**\n   * Set the URL to use for requests.\n   * @param {string} url URL.\n   * @api\n   */\n  setUrl(url) {\n    const urls = this.urls = expandUrl(url);\n    this.setUrls(urls);\n  }\n\n  /**\n   * Set the URLs to use for requests.\n   * @param {Array<string>} urls URLs.\n   * @api\n   */\n  setUrls(urls) {\n    this.urls = urls;\n    const key = urls.join('\\n');\n    if (this.generateTileUrlFunction_) {\n      this.setTileUrlFunction(createFromTemplates(urls, this.tileGrid), key);\n    } else {\n      this.setKey(key);\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  useTile(z, x, y) {\n    const tileCoordKey = getKeyZXY(z, x, y);\n    if (this.tileCache.containsKey(tileCoordKey)) {\n      this.tileCache.get(tileCoordKey);\n    }\n  }\n}\n\n\nexport default UrlTile;\n"]},"metadata":{},"sourceType":"module"}