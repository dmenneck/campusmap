{"ast":null,"code":"/**\n * ag-grid-community - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components\n * @version v21.2.2\n * @link http://www.ag-grid.com/\n * @license MIT\n */\n\"use strict\";\n\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nvar __metadata = this && this.__metadata || function (k, v) {\n  if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar gridOptionsWrapper_1 = require(\"../../gridOptionsWrapper\");\n\nvar context_1 = require(\"../../context/context\");\n\nvar eventService_1 = require(\"../../eventService\");\n\nvar selectionController_1 = require(\"../../selectionController\");\n\nvar events_1 = require(\"../../events\");\n\nvar sortController_1 = require(\"../../sortController\");\n\nvar filterManager_1 = require(\"../../filter/filterManager\");\n\nvar constants_1 = require(\"../../constants\");\n\nvar infiniteCache_1 = require(\"./infiniteCache\");\n\nvar beanStub_1 = require(\"../../context/beanStub\");\n\nvar rowNodeCache_1 = require(\"../cache/rowNodeCache\");\n\nvar rowNodeBlockLoader_1 = require(\"../cache/rowNodeBlockLoader\");\n\nvar gridApi_1 = require(\"../../gridApi\");\n\nvar columnApi_1 = require(\"../../columnController/columnApi\");\n\nvar utils_1 = require(\"../../utils\");\n\nvar rowRenderer_1 = require(\"../../rendering/rowRenderer\");\n\nvar InfiniteRowModel =\n/** @class */\nfunction (_super) {\n  __extends(InfiniteRowModel, _super);\n\n  function InfiniteRowModel() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  InfiniteRowModel.prototype.getRowBounds = function (index) {\n    return {\n      rowHeight: this.rowHeight,\n      rowTop: this.rowHeight * index\n    };\n  }; // we don't implement as lazy row heights is not supported in this row model\n\n\n  InfiniteRowModel.prototype.ensureRowHeightsValid = function (startPixel, endPixel, startLimitIndex, endLimitIndex) {\n    return false;\n  };\n\n  InfiniteRowModel.prototype.init = function () {\n    var _this = this;\n\n    if (!this.gridOptionsWrapper.isRowModelInfinite()) {\n      return;\n    }\n\n    this.rowHeight = this.gridOptionsWrapper.getRowHeightAsNumber();\n    this.addEventListeners();\n    this.setDatasource(this.gridOptionsWrapper.getDatasource());\n    this.addDestroyFunc(function () {\n      return _this.destroyCache();\n    });\n  };\n\n  InfiniteRowModel.prototype.destroyDatasource = function () {\n    if (this.datasource) {\n      if (this.datasource.destroy) {\n        this.datasource.destroy();\n      }\n\n      this.rowRenderer.datasourceChanged();\n      this.datasource = null;\n    }\n  };\n\n  InfiniteRowModel.prototype.isLastRowFound = function () {\n    return this.infiniteCache ? this.infiniteCache.isMaxRowFound() : false;\n  };\n\n  InfiniteRowModel.prototype.addEventListeners = function () {\n    this.addDestroyableEventListener(this.eventService, events_1.Events.EVENT_FILTER_CHANGED, this.onFilterChanged.bind(this));\n    this.addDestroyableEventListener(this.eventService, events_1.Events.EVENT_SORT_CHANGED, this.onSortChanged.bind(this));\n    this.addDestroyableEventListener(this.eventService, events_1.Events.EVENT_COLUMN_EVERYTHING_CHANGED, this.onColumnEverything.bind(this));\n  };\n\n  InfiniteRowModel.prototype.onFilterChanged = function () {\n    this.reset();\n  };\n\n  InfiniteRowModel.prototype.onSortChanged = function () {\n    this.reset();\n  };\n\n  InfiniteRowModel.prototype.onColumnEverything = function () {\n    var resetRequired; // if cache params, we require reset only if sort model has changed. we don't need to check\n    // for filter model, as the filter manager will fire an event when columns change that result\n    // in the filter changing.\n\n    if (this.cacheParams) {\n      resetRequired = this.isSortModelDifferent();\n    } else {\n      // if no cacheParams, means first time creating the cache, so always create one\n      resetRequired = true;\n    }\n\n    if (resetRequired) {\n      this.reset();\n    }\n  };\n\n  InfiniteRowModel.prototype.isSortModelDifferent = function () {\n    return !utils_1._.jsonEquals(this.cacheParams.sortModel, this.sortController.getSortModel());\n  };\n\n  InfiniteRowModel.prototype.getType = function () {\n    return constants_1.Constants.ROW_MODEL_TYPE_INFINITE;\n  };\n\n  InfiniteRowModel.prototype.setDatasource = function (datasource) {\n    this.destroyDatasource();\n    this.datasource = datasource; // only reset if we have a valid datasource to working with\n\n    if (datasource) {\n      this.checkForDeprecated();\n      this.reset();\n    }\n  };\n\n  InfiniteRowModel.prototype.checkForDeprecated = function () {\n    var ds = this.datasource; // the number of concurrent loads we are allowed to the server\n\n    if (utils_1._.exists(ds.maxConcurrentRequests)) {\n      console.error('ag-Grid: since version 5.1.x, maxConcurrentRequests is replaced with grid property maxConcurrentDatasourceRequests');\n    }\n\n    if (utils_1._.exists(ds.maxPagesInCache)) {\n      console.error('ag-Grid: since version 5.1.x, maxPagesInCache is replaced with grid property maxPagesInPaginationCache');\n    }\n\n    if (utils_1._.exists(ds.overflowSize)) {\n      console.error('ag-Grid: since version 5.1.x, overflowSize is replaced with grid property paginationOverflowSize');\n    }\n\n    if (utils_1._.exists(ds.blockSize)) {\n      console.error('ag-Grid: since version 5.1.x, pageSize/blockSize is replaced with grid property infinitePageSize');\n    }\n  };\n\n  InfiniteRowModel.prototype.isEmpty = function () {\n    return utils_1._.missing(this.infiniteCache);\n  };\n\n  InfiniteRowModel.prototype.isRowsToRender = function () {\n    return utils_1._.exists(this.infiniteCache);\n  };\n\n  InfiniteRowModel.prototype.getNodesInRangeForSelection = function (firstInRange, lastInRange) {\n    return this.infiniteCache ? this.infiniteCache.getRowNodesInRange(firstInRange, lastInRange) : [];\n  };\n\n  InfiniteRowModel.prototype.reset = function () {\n    // important to return here, as the user could be setting filter or sort before\n    // data-source is set\n    if (utils_1._.missing(this.datasource)) {\n      return;\n    } // if user is providing id's, then this means we can keep the selection between datasource hits,\n    // as the rows will keep their unique id's even if, for example, server side sorting or filtering\n    // is done.\n\n\n    var userGeneratingIds = utils_1._.exists(this.gridOptionsWrapper.getRowNodeIdFunc());\n\n    if (!userGeneratingIds) {\n      this.selectionController.reset();\n    }\n\n    this.resetCache();\n    var event = this.createModelUpdatedEvent();\n    this.eventService.dispatchEvent(event);\n  };\n\n  InfiniteRowModel.prototype.createModelUpdatedEvent = function () {\n    return {\n      type: events_1.Events.EVENT_MODEL_UPDATED,\n      api: this.gridApi,\n      columnApi: this.columnApi,\n      // not sure if these should all be false - noticed if after implementing,\n      // maybe they should be true?\n      newPage: false,\n      newData: false,\n      keepRenderedRows: false,\n      animate: false\n    };\n  };\n\n  InfiniteRowModel.prototype.resetCache = function () {\n    // if not first time creating a cache, need to destroy the old one\n    this.destroyCache();\n    var maxConcurrentRequests = this.gridOptionsWrapper.getMaxConcurrentDatasourceRequests();\n    var blockLoadDebounceMillis = this.gridOptionsWrapper.getBlockLoadDebounceMillis(); // there is a bi-directional dependency between the loader and the cache,\n    // so we create loader here, and then pass dependencies in setDependencies() method later\n\n    this.rowNodeBlockLoader = new rowNodeBlockLoader_1.RowNodeBlockLoader(maxConcurrentRequests, blockLoadDebounceMillis);\n    this.getContext().wireBean(this.rowNodeBlockLoader);\n    this.cacheParams = {\n      // the user provided datasource\n      datasource: this.datasource,\n      // sort and filter model\n      filterModel: this.filterManager.getFilterModel(),\n      sortModel: this.sortController.getSortModel(),\n      rowNodeBlockLoader: this.rowNodeBlockLoader,\n      // properties - this way we take a snapshot of them, so if user changes any, they will be\n      // used next time we create a new cache, which is generally after a filter or sort change,\n      // or a new datasource is set\n      maxConcurrentRequests: maxConcurrentRequests,\n      overflowSize: this.gridOptionsWrapper.getCacheOverflowSize(),\n      initialRowCount: this.gridOptionsWrapper.getInfiniteInitialRowCount(),\n      maxBlocksInCache: this.gridOptionsWrapper.getMaxBlocksInCache(),\n      blockSize: this.gridOptionsWrapper.getCacheBlockSize(),\n      rowHeight: this.gridOptionsWrapper.getRowHeightAsNumber(),\n      // the cache could create this, however it is also used by the pages, so handy to create it\n      // here as the settings are also passed to the pages\n      lastAccessedSequence: new utils_1.NumberSequence()\n    }; // set defaults\n\n    if (!this.cacheParams.maxConcurrentRequests || !(this.cacheParams.maxConcurrentRequests >= 1)) {\n      this.cacheParams.maxConcurrentRequests = 2;\n    } // page size needs to be 1 or greater. having it at 1 would be silly, as you would be hitting the\n    // server for one page at a time. so the default if not specified is 100.\n\n\n    if (!this.cacheParams.blockSize || !(this.cacheParams.blockSize >= 1)) {\n      this.cacheParams.blockSize = 100;\n    } // if user doesn't give initial rows to display, we assume zero\n\n\n    if (!(this.cacheParams.initialRowCount >= 1)) {\n      this.cacheParams.initialRowCount = 0;\n    } // if user doesn't provide overflow, we use default overflow of 1, so user can scroll past\n    // the current page and request first row of next page\n\n\n    if (!(this.cacheParams.overflowSize >= 1)) {\n      this.cacheParams.overflowSize = 1;\n    }\n\n    this.infiniteCache = new infiniteCache_1.InfiniteCache(this.cacheParams);\n    this.getContext().wireBean(this.infiniteCache);\n    this.infiniteCache.addEventListener(rowNodeCache_1.RowNodeCache.EVENT_CACHE_UPDATED, this.onCacheUpdated.bind(this));\n  };\n\n  InfiniteRowModel.prototype.destroyCache = function () {\n    if (this.infiniteCache) {\n      this.infiniteCache.destroy();\n      this.infiniteCache = null;\n    }\n\n    if (this.rowNodeBlockLoader) {\n      this.rowNodeBlockLoader.destroy();\n      this.rowNodeBlockLoader = null;\n    }\n  };\n\n  InfiniteRowModel.prototype.onCacheUpdated = function () {\n    var event = this.createModelUpdatedEvent();\n    this.eventService.dispatchEvent(event);\n  };\n\n  InfiniteRowModel.prototype.getRow = function (rowIndex) {\n    return this.infiniteCache ? this.infiniteCache.getRow(rowIndex) : null;\n  };\n\n  InfiniteRowModel.prototype.getRowNode = function (id) {\n    var result = null;\n    this.forEachNode(function (rowNode) {\n      if (rowNode.id === id) {\n        result = rowNode;\n      }\n    });\n    return result;\n  };\n\n  InfiniteRowModel.prototype.forEachNode = function (callback) {\n    if (this.infiniteCache) {\n      this.infiniteCache.forEachNodeDeep(callback, new utils_1.NumberSequence());\n    }\n  };\n\n  InfiniteRowModel.prototype.getCurrentPageHeight = function () {\n    return this.getRowCount() * this.rowHeight;\n  };\n\n  InfiniteRowModel.prototype.getTopLevelRowCount = function () {\n    return this.getRowCount();\n  };\n\n  InfiniteRowModel.prototype.getTopLevelRowDisplayedIndex = function (topLevelIndex) {\n    return topLevelIndex;\n  };\n\n  InfiniteRowModel.prototype.getRowIndexAtPixel = function (pixel) {\n    if (this.rowHeight !== 0) {\n      // avoid divide by zero error\n      var rowIndexForPixel = Math.floor(pixel / this.rowHeight);\n      var lastRowIndex = this.getRowCount() - 1;\n\n      if (rowIndexForPixel > lastRowIndex) {\n        return lastRowIndex;\n      } else {\n        return rowIndexForPixel;\n      }\n    } else {\n      return 0;\n    }\n  };\n\n  InfiniteRowModel.prototype.getRowCount = function () {\n    return this.infiniteCache ? this.infiniteCache.getVirtualRowCount() : 0;\n  };\n\n  InfiniteRowModel.prototype.updateRowData = function (transaction) {\n    if (utils_1._.exists(transaction.remove) || utils_1._.exists(transaction.update)) {\n      console.warn('ag-Grid: updateRowData for InfiniteRowModel does not support remove or update, only add');\n      return;\n    }\n\n    if (utils_1._.missing(transaction.addIndex)) {\n      console.warn('ag-Grid: updateRowData for InfiniteRowModel requires add and addIndex to be set');\n      return;\n    }\n\n    if (this.infiniteCache) {\n      this.infiniteCache.insertItemsAtIndex(transaction.addIndex, transaction.add);\n    }\n  };\n\n  InfiniteRowModel.prototype.isRowPresent = function (rowNode) {\n    return false;\n  };\n\n  InfiniteRowModel.prototype.refreshCache = function () {\n    if (this.infiniteCache) {\n      this.infiniteCache.refreshCache();\n    }\n  };\n\n  InfiniteRowModel.prototype.purgeCache = function () {\n    if (this.infiniteCache) {\n      this.infiniteCache.purgeCache();\n    }\n  };\n\n  InfiniteRowModel.prototype.getVirtualRowCount = function () {\n    if (this.infiniteCache) {\n      return this.infiniteCache.getVirtualRowCount();\n    } else {\n      return null;\n    }\n  };\n\n  InfiniteRowModel.prototype.isMaxRowFound = function () {\n    if (this.infiniteCache) {\n      return this.infiniteCache.isMaxRowFound();\n    }\n  };\n\n  InfiniteRowModel.prototype.setVirtualRowCount = function (rowCount, maxRowFound) {\n    if (this.infiniteCache) {\n      this.infiniteCache.setVirtualRowCount(rowCount, maxRowFound);\n    }\n  };\n\n  InfiniteRowModel.prototype.getBlockState = function () {\n    if (this.rowNodeBlockLoader) {\n      return this.rowNodeBlockLoader.getBlockState();\n    } else {\n      return null;\n    }\n  };\n\n  __decorate([context_1.Autowired('gridOptionsWrapper'), __metadata(\"design:type\", gridOptionsWrapper_1.GridOptionsWrapper)], InfiniteRowModel.prototype, \"gridOptionsWrapper\", void 0);\n\n  __decorate([context_1.Autowired('filterManager'), __metadata(\"design:type\", filterManager_1.FilterManager)], InfiniteRowModel.prototype, \"filterManager\", void 0);\n\n  __decorate([context_1.Autowired('sortController'), __metadata(\"design:type\", sortController_1.SortController)], InfiniteRowModel.prototype, \"sortController\", void 0);\n\n  __decorate([context_1.Autowired('selectionController'), __metadata(\"design:type\", selectionController_1.SelectionController)], InfiniteRowModel.prototype, \"selectionController\", void 0);\n\n  __decorate([context_1.Autowired('eventService'), __metadata(\"design:type\", eventService_1.EventService)], InfiniteRowModel.prototype, \"eventService\", void 0);\n\n  __decorate([context_1.Autowired('gridApi'), __metadata(\"design:type\", gridApi_1.GridApi)], InfiniteRowModel.prototype, \"gridApi\", void 0);\n\n  __decorate([context_1.Autowired('columnApi'), __metadata(\"design:type\", columnApi_1.ColumnApi)], InfiniteRowModel.prototype, \"columnApi\", void 0);\n\n  __decorate([context_1.Autowired('rowRenderer'), __metadata(\"design:type\", rowRenderer_1.RowRenderer)], InfiniteRowModel.prototype, \"rowRenderer\", void 0);\n\n  __decorate([context_1.PostConstruct, __metadata(\"design:type\", Function), __metadata(\"design:paramtypes\", []), __metadata(\"design:returntype\", void 0)], InfiniteRowModel.prototype, \"init\", null);\n\n  __decorate([context_1.PreDestroy, __metadata(\"design:type\", Function), __metadata(\"design:paramtypes\", []), __metadata(\"design:returntype\", void 0)], InfiniteRowModel.prototype, \"destroyDatasource\", null);\n\n  InfiniteRowModel = __decorate([context_1.Bean('rowModel')], InfiniteRowModel);\n  return InfiniteRowModel;\n}(beanStub_1.BeanStub);\n\nexports.InfiniteRowModel = InfiniteRowModel;","map":{"version":3,"sources":["/Users/dirkmennecke77/Desktop/Lageplan/node_modules/ag-grid-community/dist/lib/rowModels/infinite/infiniteRowModel.js"],"names":["__extends","extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__","constructor","prototype","create","__decorate","decorators","target","key","desc","c","arguments","length","r","getOwnPropertyDescriptor","Reflect","decorate","i","defineProperty","__metadata","k","v","metadata","exports","value","gridOptionsWrapper_1","require","context_1","eventService_1","selectionController_1","events_1","sortController_1","filterManager_1","constants_1","infiniteCache_1","beanStub_1","rowNodeCache_1","rowNodeBlockLoader_1","gridApi_1","columnApi_1","utils_1","rowRenderer_1","InfiniteRowModel","_super","apply","getRowBounds","index","rowHeight","rowTop","ensureRowHeightsValid","startPixel","endPixel","startLimitIndex","endLimitIndex","init","_this","gridOptionsWrapper","isRowModelInfinite","getRowHeightAsNumber","addEventListeners","setDatasource","getDatasource","addDestroyFunc","destroyCache","destroyDatasource","datasource","destroy","rowRenderer","datasourceChanged","isLastRowFound","infiniteCache","isMaxRowFound","addDestroyableEventListener","eventService","Events","EVENT_FILTER_CHANGED","onFilterChanged","bind","EVENT_SORT_CHANGED","onSortChanged","EVENT_COLUMN_EVERYTHING_CHANGED","onColumnEverything","reset","resetRequired","cacheParams","isSortModelDifferent","_","jsonEquals","sortModel","sortController","getSortModel","getType","Constants","ROW_MODEL_TYPE_INFINITE","checkForDeprecated","ds","exists","maxConcurrentRequests","console","error","maxPagesInCache","overflowSize","blockSize","isEmpty","missing","isRowsToRender","getNodesInRangeForSelection","firstInRange","lastInRange","getRowNodesInRange","userGeneratingIds","getRowNodeIdFunc","selectionController","resetCache","event","createModelUpdatedEvent","dispatchEvent","type","EVENT_MODEL_UPDATED","api","gridApi","columnApi","newPage","newData","keepRenderedRows","animate","getMaxConcurrentDatasourceRequests","blockLoadDebounceMillis","getBlockLoadDebounceMillis","rowNodeBlockLoader","RowNodeBlockLoader","getContext","wireBean","filterModel","filterManager","getFilterModel","getCacheOverflowSize","initialRowCount","getInfiniteInitialRowCount","maxBlocksInCache","getMaxBlocksInCache","getCacheBlockSize","lastAccessedSequence","NumberSequence","InfiniteCache","addEventListener","RowNodeCache","EVENT_CACHE_UPDATED","onCacheUpdated","getRow","rowIndex","getRowNode","id","result","forEachNode","rowNode","callback","forEachNodeDeep","getCurrentPageHeight","getRowCount","getTopLevelRowCount","getTopLevelRowDisplayedIndex","topLevelIndex","getRowIndexAtPixel","pixel","rowIndexForPixel","Math","floor","lastRowIndex","getVirtualRowCount","updateRowData","transaction","remove","update","warn","addIndex","insertItemsAtIndex","add","isRowPresent","refreshCache","purgeCache","setVirtualRowCount","rowCount","maxRowFound","getBlockState","Autowired","GridOptionsWrapper","FilterManager","SortController","SelectionController","EventService","GridApi","ColumnApi","RowRenderer","PostConstruct","Function","PreDestroy","Bean","BeanStub"],"mappings":"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","sourcesContent":["/**\n * ag-grid-community - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components\n * @version v21.2.2\n * @link http://www.ag-grid.com/\n * @license MIT\n */\n\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __metadata = (this && this.__metadata) || function (k, v) {\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar gridOptionsWrapper_1 = require(\"../../gridOptionsWrapper\");\nvar context_1 = require(\"../../context/context\");\nvar eventService_1 = require(\"../../eventService\");\nvar selectionController_1 = require(\"../../selectionController\");\nvar events_1 = require(\"../../events\");\nvar sortController_1 = require(\"../../sortController\");\nvar filterManager_1 = require(\"../../filter/filterManager\");\nvar constants_1 = require(\"../../constants\");\nvar infiniteCache_1 = require(\"./infiniteCache\");\nvar beanStub_1 = require(\"../../context/beanStub\");\nvar rowNodeCache_1 = require(\"../cache/rowNodeCache\");\nvar rowNodeBlockLoader_1 = require(\"../cache/rowNodeBlockLoader\");\nvar gridApi_1 = require(\"../../gridApi\");\nvar columnApi_1 = require(\"../../columnController/columnApi\");\nvar utils_1 = require(\"../../utils\");\nvar rowRenderer_1 = require(\"../../rendering/rowRenderer\");\nvar InfiniteRowModel = /** @class */ (function (_super) {\n    __extends(InfiniteRowModel, _super);\n    function InfiniteRowModel() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    InfiniteRowModel.prototype.getRowBounds = function (index) {\n        return {\n            rowHeight: this.rowHeight,\n            rowTop: this.rowHeight * index\n        };\n    };\n    // we don't implement as lazy row heights is not supported in this row model\n    InfiniteRowModel.prototype.ensureRowHeightsValid = function (startPixel, endPixel, startLimitIndex, endLimitIndex) { return false; };\n    InfiniteRowModel.prototype.init = function () {\n        var _this = this;\n        if (!this.gridOptionsWrapper.isRowModelInfinite()) {\n            return;\n        }\n        this.rowHeight = this.gridOptionsWrapper.getRowHeightAsNumber();\n        this.addEventListeners();\n        this.setDatasource(this.gridOptionsWrapper.getDatasource());\n        this.addDestroyFunc(function () { return _this.destroyCache(); });\n    };\n    InfiniteRowModel.prototype.destroyDatasource = function () {\n        if (this.datasource) {\n            if (this.datasource.destroy) {\n                this.datasource.destroy();\n            }\n            this.rowRenderer.datasourceChanged();\n            this.datasource = null;\n        }\n    };\n    InfiniteRowModel.prototype.isLastRowFound = function () {\n        return this.infiniteCache ? this.infiniteCache.isMaxRowFound() : false;\n    };\n    InfiniteRowModel.prototype.addEventListeners = function () {\n        this.addDestroyableEventListener(this.eventService, events_1.Events.EVENT_FILTER_CHANGED, this.onFilterChanged.bind(this));\n        this.addDestroyableEventListener(this.eventService, events_1.Events.EVENT_SORT_CHANGED, this.onSortChanged.bind(this));\n        this.addDestroyableEventListener(this.eventService, events_1.Events.EVENT_COLUMN_EVERYTHING_CHANGED, this.onColumnEverything.bind(this));\n    };\n    InfiniteRowModel.prototype.onFilterChanged = function () {\n        this.reset();\n    };\n    InfiniteRowModel.prototype.onSortChanged = function () {\n        this.reset();\n    };\n    InfiniteRowModel.prototype.onColumnEverything = function () {\n        var resetRequired;\n        // if cache params, we require reset only if sort model has changed. we don't need to check\n        // for filter model, as the filter manager will fire an event when columns change that result\n        // in the filter changing.\n        if (this.cacheParams) {\n            resetRequired = this.isSortModelDifferent();\n        }\n        else {\n            // if no cacheParams, means first time creating the cache, so always create one\n            resetRequired = true;\n        }\n        if (resetRequired) {\n            this.reset();\n        }\n    };\n    InfiniteRowModel.prototype.isSortModelDifferent = function () {\n        return !utils_1._.jsonEquals(this.cacheParams.sortModel, this.sortController.getSortModel());\n    };\n    InfiniteRowModel.prototype.getType = function () {\n        return constants_1.Constants.ROW_MODEL_TYPE_INFINITE;\n    };\n    InfiniteRowModel.prototype.setDatasource = function (datasource) {\n        this.destroyDatasource();\n        this.datasource = datasource;\n        // only reset if we have a valid datasource to working with\n        if (datasource) {\n            this.checkForDeprecated();\n            this.reset();\n        }\n    };\n    InfiniteRowModel.prototype.checkForDeprecated = function () {\n        var ds = this.datasource;\n        // the number of concurrent loads we are allowed to the server\n        if (utils_1._.exists(ds.maxConcurrentRequests)) {\n            console.error('ag-Grid: since version 5.1.x, maxConcurrentRequests is replaced with grid property maxConcurrentDatasourceRequests');\n        }\n        if (utils_1._.exists(ds.maxPagesInCache)) {\n            console.error('ag-Grid: since version 5.1.x, maxPagesInCache is replaced with grid property maxPagesInPaginationCache');\n        }\n        if (utils_1._.exists(ds.overflowSize)) {\n            console.error('ag-Grid: since version 5.1.x, overflowSize is replaced with grid property paginationOverflowSize');\n        }\n        if (utils_1._.exists(ds.blockSize)) {\n            console.error('ag-Grid: since version 5.1.x, pageSize/blockSize is replaced with grid property infinitePageSize');\n        }\n    };\n    InfiniteRowModel.prototype.isEmpty = function () {\n        return utils_1._.missing(this.infiniteCache);\n    };\n    InfiniteRowModel.prototype.isRowsToRender = function () {\n        return utils_1._.exists(this.infiniteCache);\n    };\n    InfiniteRowModel.prototype.getNodesInRangeForSelection = function (firstInRange, lastInRange) {\n        return this.infiniteCache ? this.infiniteCache.getRowNodesInRange(firstInRange, lastInRange) : [];\n    };\n    InfiniteRowModel.prototype.reset = function () {\n        // important to return here, as the user could be setting filter or sort before\n        // data-source is set\n        if (utils_1._.missing(this.datasource)) {\n            return;\n        }\n        // if user is providing id's, then this means we can keep the selection between datasource hits,\n        // as the rows will keep their unique id's even if, for example, server side sorting or filtering\n        // is done.\n        var userGeneratingIds = utils_1._.exists(this.gridOptionsWrapper.getRowNodeIdFunc());\n        if (!userGeneratingIds) {\n            this.selectionController.reset();\n        }\n        this.resetCache();\n        var event = this.createModelUpdatedEvent();\n        this.eventService.dispatchEvent(event);\n    };\n    InfiniteRowModel.prototype.createModelUpdatedEvent = function () {\n        return {\n            type: events_1.Events.EVENT_MODEL_UPDATED,\n            api: this.gridApi,\n            columnApi: this.columnApi,\n            // not sure if these should all be false - noticed if after implementing,\n            // maybe they should be true?\n            newPage: false,\n            newData: false,\n            keepRenderedRows: false,\n            animate: false\n        };\n    };\n    InfiniteRowModel.prototype.resetCache = function () {\n        // if not first time creating a cache, need to destroy the old one\n        this.destroyCache();\n        var maxConcurrentRequests = this.gridOptionsWrapper.getMaxConcurrentDatasourceRequests();\n        var blockLoadDebounceMillis = this.gridOptionsWrapper.getBlockLoadDebounceMillis();\n        // there is a bi-directional dependency between the loader and the cache,\n        // so we create loader here, and then pass dependencies in setDependencies() method later\n        this.rowNodeBlockLoader = new rowNodeBlockLoader_1.RowNodeBlockLoader(maxConcurrentRequests, blockLoadDebounceMillis);\n        this.getContext().wireBean(this.rowNodeBlockLoader);\n        this.cacheParams = {\n            // the user provided datasource\n            datasource: this.datasource,\n            // sort and filter model\n            filterModel: this.filterManager.getFilterModel(),\n            sortModel: this.sortController.getSortModel(),\n            rowNodeBlockLoader: this.rowNodeBlockLoader,\n            // properties - this way we take a snapshot of them, so if user changes any, they will be\n            // used next time we create a new cache, which is generally after a filter or sort change,\n            // or a new datasource is set\n            maxConcurrentRequests: maxConcurrentRequests,\n            overflowSize: this.gridOptionsWrapper.getCacheOverflowSize(),\n            initialRowCount: this.gridOptionsWrapper.getInfiniteInitialRowCount(),\n            maxBlocksInCache: this.gridOptionsWrapper.getMaxBlocksInCache(),\n            blockSize: this.gridOptionsWrapper.getCacheBlockSize(),\n            rowHeight: this.gridOptionsWrapper.getRowHeightAsNumber(),\n            // the cache could create this, however it is also used by the pages, so handy to create it\n            // here as the settings are also passed to the pages\n            lastAccessedSequence: new utils_1.NumberSequence()\n        };\n        // set defaults\n        if (!this.cacheParams.maxConcurrentRequests || !(this.cacheParams.maxConcurrentRequests >= 1)) {\n            this.cacheParams.maxConcurrentRequests = 2;\n        }\n        // page size needs to be 1 or greater. having it at 1 would be silly, as you would be hitting the\n        // server for one page at a time. so the default if not specified is 100.\n        if (!this.cacheParams.blockSize || !(this.cacheParams.blockSize >= 1)) {\n            this.cacheParams.blockSize = 100;\n        }\n        // if user doesn't give initial rows to display, we assume zero\n        if (!(this.cacheParams.initialRowCount >= 1)) {\n            this.cacheParams.initialRowCount = 0;\n        }\n        // if user doesn't provide overflow, we use default overflow of 1, so user can scroll past\n        // the current page and request first row of next page\n        if (!(this.cacheParams.overflowSize >= 1)) {\n            this.cacheParams.overflowSize = 1;\n        }\n        this.infiniteCache = new infiniteCache_1.InfiniteCache(this.cacheParams);\n        this.getContext().wireBean(this.infiniteCache);\n        this.infiniteCache.addEventListener(rowNodeCache_1.RowNodeCache.EVENT_CACHE_UPDATED, this.onCacheUpdated.bind(this));\n    };\n    InfiniteRowModel.prototype.destroyCache = function () {\n        if (this.infiniteCache) {\n            this.infiniteCache.destroy();\n            this.infiniteCache = null;\n        }\n        if (this.rowNodeBlockLoader) {\n            this.rowNodeBlockLoader.destroy();\n            this.rowNodeBlockLoader = null;\n        }\n    };\n    InfiniteRowModel.prototype.onCacheUpdated = function () {\n        var event = this.createModelUpdatedEvent();\n        this.eventService.dispatchEvent(event);\n    };\n    InfiniteRowModel.prototype.getRow = function (rowIndex) {\n        return this.infiniteCache ? this.infiniteCache.getRow(rowIndex) : null;\n    };\n    InfiniteRowModel.prototype.getRowNode = function (id) {\n        var result = null;\n        this.forEachNode(function (rowNode) {\n            if (rowNode.id === id) {\n                result = rowNode;\n            }\n        });\n        return result;\n    };\n    InfiniteRowModel.prototype.forEachNode = function (callback) {\n        if (this.infiniteCache) {\n            this.infiniteCache.forEachNodeDeep(callback, new utils_1.NumberSequence());\n        }\n    };\n    InfiniteRowModel.prototype.getCurrentPageHeight = function () {\n        return this.getRowCount() * this.rowHeight;\n    };\n    InfiniteRowModel.prototype.getTopLevelRowCount = function () {\n        return this.getRowCount();\n    };\n    InfiniteRowModel.prototype.getTopLevelRowDisplayedIndex = function (topLevelIndex) {\n        return topLevelIndex;\n    };\n    InfiniteRowModel.prototype.getRowIndexAtPixel = function (pixel) {\n        if (this.rowHeight !== 0) { // avoid divide by zero error\n            var rowIndexForPixel = Math.floor(pixel / this.rowHeight);\n            var lastRowIndex = this.getRowCount() - 1;\n            if (rowIndexForPixel > lastRowIndex) {\n                return lastRowIndex;\n            }\n            else {\n                return rowIndexForPixel;\n            }\n        }\n        else {\n            return 0;\n        }\n    };\n    InfiniteRowModel.prototype.getRowCount = function () {\n        return this.infiniteCache ? this.infiniteCache.getVirtualRowCount() : 0;\n    };\n    InfiniteRowModel.prototype.updateRowData = function (transaction) {\n        if (utils_1._.exists(transaction.remove) || utils_1._.exists(transaction.update)) {\n            console.warn('ag-Grid: updateRowData for InfiniteRowModel does not support remove or update, only add');\n            return;\n        }\n        if (utils_1._.missing(transaction.addIndex)) {\n            console.warn('ag-Grid: updateRowData for InfiniteRowModel requires add and addIndex to be set');\n            return;\n        }\n        if (this.infiniteCache) {\n            this.infiniteCache.insertItemsAtIndex(transaction.addIndex, transaction.add);\n        }\n    };\n    InfiniteRowModel.prototype.isRowPresent = function (rowNode) {\n        return false;\n    };\n    InfiniteRowModel.prototype.refreshCache = function () {\n        if (this.infiniteCache) {\n            this.infiniteCache.refreshCache();\n        }\n    };\n    InfiniteRowModel.prototype.purgeCache = function () {\n        if (this.infiniteCache) {\n            this.infiniteCache.purgeCache();\n        }\n    };\n    InfiniteRowModel.prototype.getVirtualRowCount = function () {\n        if (this.infiniteCache) {\n            return this.infiniteCache.getVirtualRowCount();\n        }\n        else {\n            return null;\n        }\n    };\n    InfiniteRowModel.prototype.isMaxRowFound = function () {\n        if (this.infiniteCache) {\n            return this.infiniteCache.isMaxRowFound();\n        }\n    };\n    InfiniteRowModel.prototype.setVirtualRowCount = function (rowCount, maxRowFound) {\n        if (this.infiniteCache) {\n            this.infiniteCache.setVirtualRowCount(rowCount, maxRowFound);\n        }\n    };\n    InfiniteRowModel.prototype.getBlockState = function () {\n        if (this.rowNodeBlockLoader) {\n            return this.rowNodeBlockLoader.getBlockState();\n        }\n        else {\n            return null;\n        }\n    };\n    __decorate([\n        context_1.Autowired('gridOptionsWrapper'),\n        __metadata(\"design:type\", gridOptionsWrapper_1.GridOptionsWrapper)\n    ], InfiniteRowModel.prototype, \"gridOptionsWrapper\", void 0);\n    __decorate([\n        context_1.Autowired('filterManager'),\n        __metadata(\"design:type\", filterManager_1.FilterManager)\n    ], InfiniteRowModel.prototype, \"filterManager\", void 0);\n    __decorate([\n        context_1.Autowired('sortController'),\n        __metadata(\"design:type\", sortController_1.SortController)\n    ], InfiniteRowModel.prototype, \"sortController\", void 0);\n    __decorate([\n        context_1.Autowired('selectionController'),\n        __metadata(\"design:type\", selectionController_1.SelectionController)\n    ], InfiniteRowModel.prototype, \"selectionController\", void 0);\n    __decorate([\n        context_1.Autowired('eventService'),\n        __metadata(\"design:type\", eventService_1.EventService)\n    ], InfiniteRowModel.prototype, \"eventService\", void 0);\n    __decorate([\n        context_1.Autowired('gridApi'),\n        __metadata(\"design:type\", gridApi_1.GridApi)\n    ], InfiniteRowModel.prototype, \"gridApi\", void 0);\n    __decorate([\n        context_1.Autowired('columnApi'),\n        __metadata(\"design:type\", columnApi_1.ColumnApi)\n    ], InfiniteRowModel.prototype, \"columnApi\", void 0);\n    __decorate([\n        context_1.Autowired('rowRenderer'),\n        __metadata(\"design:type\", rowRenderer_1.RowRenderer)\n    ], InfiniteRowModel.prototype, \"rowRenderer\", void 0);\n    __decorate([\n        context_1.PostConstruct,\n        __metadata(\"design:type\", Function),\n        __metadata(\"design:paramtypes\", []),\n        __metadata(\"design:returntype\", void 0)\n    ], InfiniteRowModel.prototype, \"init\", null);\n    __decorate([\n        context_1.PreDestroy,\n        __metadata(\"design:type\", Function),\n        __metadata(\"design:paramtypes\", []),\n        __metadata(\"design:returntype\", void 0)\n    ], InfiniteRowModel.prototype, \"destroyDatasource\", null);\n    InfiniteRowModel = __decorate([\n        context_1.Bean('rowModel')\n    ], InfiniteRowModel);\n    return InfiniteRowModel;\n}(beanStub_1.BeanStub));\nexports.InfiniteRowModel = InfiniteRowModel;\n"]},"metadata":{},"sourceType":"script"}