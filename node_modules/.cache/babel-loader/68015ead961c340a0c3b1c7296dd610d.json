{"ast":null,"code":"/**\n * @module ol/format/XMLFeature\n */\nimport { abstract } from '../util.js';\nimport { extend } from '../array.js';\nimport FeatureFormat from '../format/Feature.js';\nimport FormatType from '../format/FormatType.js';\nimport { isDocument, parse } from '../xml.js';\n/**\n * @classdesc\n * Abstract base class; normally only used for creating subclasses and not\n * instantiated in apps.\n * Base class for XML feature formats.\n *\n * @abstract\n */\n\nvar XMLFeature =\n/*@__PURE__*/\nfunction (FeatureFormat) {\n  function XMLFeature() {\n    FeatureFormat.call(this);\n    /**\n     * @type {XMLSerializer}\n     * @private\n     */\n\n    this.xmlSerializer_ = new XMLSerializer();\n  }\n\n  if (FeatureFormat) XMLFeature.__proto__ = FeatureFormat;\n  XMLFeature.prototype = Object.create(FeatureFormat && FeatureFormat.prototype);\n  XMLFeature.prototype.constructor = XMLFeature;\n  /**\n   * @inheritDoc\n   */\n\n  XMLFeature.prototype.getType = function getType() {\n    return FormatType.XML;\n  };\n  /**\n   * Read a single feature.\n   *\n   * @param {Document|Node|Object|string} source Source.\n   * @param {import(\"./Feature.js\").ReadOptions=} opt_options Read options.\n   * @return {import(\"../Feature.js\").default} Feature.\n   * @api\n   */\n\n\n  XMLFeature.prototype.readFeature = function readFeature(source, opt_options) {\n    if (!source) {\n      return null;\n    } else if (typeof source === 'string') {\n      var doc = parse(source);\n      return this.readFeatureFromDocument(doc, opt_options);\n    } else if (isDocument(source)) {\n      return this.readFeatureFromDocument(\n      /** @type {Document} */\n      source, opt_options);\n    } else {\n      return this.readFeatureFromNode(\n      /** @type {Node} */\n      source, opt_options);\n    }\n  };\n  /**\n   * @param {Document} doc Document.\n   * @param {import(\"./Feature.js\").ReadOptions=} opt_options Options.\n   * @return {import(\"../Feature.js\").default} Feature.\n   */\n\n\n  XMLFeature.prototype.readFeatureFromDocument = function readFeatureFromDocument(doc, opt_options) {\n    var features = this.readFeaturesFromDocument(doc, opt_options);\n\n    if (features.length > 0) {\n      return features[0];\n    } else {\n      return null;\n    }\n  };\n  /**\n   * @param {Node} node Node.\n   * @param {import(\"./Feature.js\").ReadOptions=} opt_options Options.\n   * @return {import(\"../Feature.js\").default} Feature.\n   */\n\n\n  XMLFeature.prototype.readFeatureFromNode = function readFeatureFromNode(node, opt_options) {\n    return null; // not implemented\n  };\n  /**\n   * Read all features from a feature collection.\n   *\n   * @param {Document|Node|Object|string} source Source.\n   * @param {import(\"./Feature.js\").ReadOptions=} opt_options Options.\n   * @return {Array<import(\"../Feature.js\").default>} Features.\n   * @api\n   */\n\n\n  XMLFeature.prototype.readFeatures = function readFeatures(source, opt_options) {\n    if (!source) {\n      return [];\n    } else if (typeof source === 'string') {\n      var doc = parse(source);\n      return this.readFeaturesFromDocument(doc, opt_options);\n    } else if (isDocument(source)) {\n      return this.readFeaturesFromDocument(\n      /** @type {Document} */\n      source, opt_options);\n    } else {\n      return this.readFeaturesFromNode(\n      /** @type {Node} */\n      source, opt_options);\n    }\n  };\n  /**\n   * @param {Document} doc Document.\n   * @param {import(\"./Feature.js\").ReadOptions=} opt_options Options.\n   * @protected\n   * @return {Array<import(\"../Feature.js\").default>} Features.\n   */\n\n\n  XMLFeature.prototype.readFeaturesFromDocument = function readFeaturesFromDocument(doc, opt_options) {\n    /** @type {Array<import(\"../Feature.js\").default>} */\n    var features = [];\n\n    for (var n =\n    /** @type {Node} */\n    doc.firstChild; n; n = n.nextSibling) {\n      if (n.nodeType == Node.ELEMENT_NODE) {\n        extend(features, this.readFeaturesFromNode(n, opt_options));\n      }\n    }\n\n    return features;\n  };\n  /**\n   * @abstract\n   * @param {Node} node Node.\n   * @param {import(\"./Feature.js\").ReadOptions=} opt_options Options.\n   * @protected\n   * @return {Array<import(\"../Feature.js\").default>} Features.\n   */\n\n\n  XMLFeature.prototype.readFeaturesFromNode = function readFeaturesFromNode(node, opt_options) {\n    return abstract();\n  };\n  /**\n   * @inheritDoc\n   */\n\n\n  XMLFeature.prototype.readGeometry = function readGeometry(source, opt_options) {\n    if (!source) {\n      return null;\n    } else if (typeof source === 'string') {\n      var doc = parse(source);\n      return this.readGeometryFromDocument(doc, opt_options);\n    } else if (isDocument(source)) {\n      return this.readGeometryFromDocument(\n      /** @type {Document} */\n      source, opt_options);\n    } else {\n      return this.readGeometryFromNode(\n      /** @type {Node} */\n      source, opt_options);\n    }\n  };\n  /**\n   * @param {Document} doc Document.\n   * @param {import(\"./Feature.js\").ReadOptions=} opt_options Options.\n   * @protected\n   * @return {import(\"../geom/Geometry.js\").default} Geometry.\n   */\n\n\n  XMLFeature.prototype.readGeometryFromDocument = function readGeometryFromDocument(doc, opt_options) {\n    return null; // not implemented\n  };\n  /**\n   * @param {Node} node Node.\n   * @param {import(\"./Feature.js\").ReadOptions=} opt_options Options.\n   * @protected\n   * @return {import(\"../geom/Geometry.js\").default} Geometry.\n   */\n\n\n  XMLFeature.prototype.readGeometryFromNode = function readGeometryFromNode(node, opt_options) {\n    return null; // not implemented\n  };\n  /**\n   * Read the projection from the source.\n   *\n   * @param {Document|Node|Object|string} source Source.\n   * @return {import(\"../proj/Projection.js\").default} Projection.\n   * @api\n   */\n\n\n  XMLFeature.prototype.readProjection = function readProjection(source) {\n    if (!source) {\n      return null;\n    } else if (typeof source === 'string') {\n      var doc = parse(source);\n      return this.readProjectionFromDocument(doc);\n    } else if (isDocument(source)) {\n      return this.readProjectionFromDocument(\n      /** @type {Document} */\n      source);\n    } else {\n      return this.readProjectionFromNode(\n      /** @type {Node} */\n      source);\n    }\n  };\n  /**\n   * @param {Document} doc Document.\n   * @protected\n   * @return {import(\"../proj/Projection.js\").default} Projection.\n   */\n\n\n  XMLFeature.prototype.readProjectionFromDocument = function readProjectionFromDocument(doc) {\n    return this.dataProjection;\n  };\n  /**\n   * @param {Node} node Node.\n   * @protected\n   * @return {import(\"../proj/Projection.js\").default} Projection.\n   */\n\n\n  XMLFeature.prototype.readProjectionFromNode = function readProjectionFromNode(node) {\n    return this.dataProjection;\n  };\n  /**\n   * @inheritDoc\n   */\n\n\n  XMLFeature.prototype.writeFeature = function writeFeature(feature, opt_options) {\n    var node = this.writeFeatureNode(feature, opt_options);\n    return this.xmlSerializer_.serializeToString(node);\n  };\n  /**\n   * @param {import(\"../Feature.js\").default} feature Feature.\n   * @param {import(\"./Feature.js\").WriteOptions=} opt_options Options.\n   * @protected\n   * @return {Node} Node.\n   */\n\n\n  XMLFeature.prototype.writeFeatureNode = function writeFeatureNode(feature, opt_options) {\n    return null; // not implemented\n  };\n  /**\n   * Encode an array of features as string.\n   *\n   * @param {Array<import(\"../Feature.js\").default>} features Features.\n   * @param {import(\"./Feature.js\").WriteOptions=} opt_options Write options.\n   * @return {string} Result.\n   * @api\n   */\n\n\n  XMLFeature.prototype.writeFeatures = function writeFeatures(features, opt_options) {\n    var node = this.writeFeaturesNode(features, opt_options);\n    return this.xmlSerializer_.serializeToString(node);\n  };\n  /**\n   * @param {Array<import(\"../Feature.js\").default>} features Features.\n   * @param {import(\"./Feature.js\").WriteOptions=} opt_options Options.\n   * @return {Node} Node.\n   */\n\n\n  XMLFeature.prototype.writeFeaturesNode = function writeFeaturesNode(features, opt_options) {\n    return null; // not implemented\n  };\n  /**\n   * @inheritDoc\n   */\n\n\n  XMLFeature.prototype.writeGeometry = function writeGeometry(geometry, opt_options) {\n    var node = this.writeGeometryNode(geometry, opt_options);\n    return this.xmlSerializer_.serializeToString(node);\n  };\n  /**\n   * @param {import(\"../geom/Geometry.js\").default} geometry Geometry.\n   * @param {import(\"./Feature.js\").WriteOptions=} opt_options Options.\n   * @return {Node} Node.\n   */\n\n\n  XMLFeature.prototype.writeGeometryNode = function writeGeometryNode(geometry, opt_options) {\n    return null; // not implemented\n  };\n\n  return XMLFeature;\n}(FeatureFormat);\n\nexport default XMLFeature;","map":null,"metadata":{},"sourceType":"module"}