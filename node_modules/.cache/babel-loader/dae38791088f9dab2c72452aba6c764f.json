{"ast":null,"code":"/**\n * @module ol/interaction/Modify\n */\nimport { getUid } from '../util.js';\nimport Collection from '../Collection.js';\nimport CollectionEventType from '../CollectionEventType.js';\nimport Feature from '../Feature.js';\nimport MapBrowserEventType from '../MapBrowserEventType.js';\nimport { equals } from '../array.js';\nimport { equals as coordinatesEqual, distance as coordinateDistance, squaredDistance as squaredCoordinateDistance, squaredDistanceToSegment, closestOnSegment } from '../coordinate.js';\nimport { listen, unlisten } from '../events.js';\nimport Event from '../events/Event.js';\nimport EventType from '../events/EventType.js';\nimport { always, primaryAction, altKeyOnly, singleClick } from '../events/condition.js';\nimport { boundingExtent, buffer, createOrUpdateFromCoordinate } from '../extent.js';\nimport GeometryType from '../geom/GeometryType.js';\nimport Point from '../geom/Point.js';\nimport PointerInteraction from './Pointer.js';\nimport VectorLayer from '../layer/Vector.js';\nimport VectorSource from '../source/Vector.js';\nimport VectorEventType from '../source/VectorEventType.js';\nimport RBush from '../structs/RBush.js';\nimport { createEditingStyle } from '../style/Style.js';\n/**\n * The segment index assigned to a circle's center when\n * breaking up a circle into ModifySegmentDataType segments.\n * @type {number}\n */\n\nvar CIRCLE_CENTER_INDEX = 0;\n/**\n * The segment index assigned to a circle's circumference when\n * breaking up a circle into ModifySegmentDataType segments.\n * @type {number}\n */\n\nvar CIRCLE_CIRCUMFERENCE_INDEX = 1;\n/**\n * @enum {string}\n */\n\nvar ModifyEventType = {\n  /**\n   * Triggered upon feature modification start\n   * @event ModifyEvent#modifystart\n   * @api\n   */\n  MODIFYSTART: 'modifystart',\n\n  /**\n   * Triggered upon feature modification end\n   * @event ModifyEvent#modifyend\n   * @api\n   */\n  MODIFYEND: 'modifyend'\n};\n/**\n * @typedef {Object} SegmentData\n * @property {Array<number>} [depth]\n * @property {Feature} feature\n * @property {import(\"../geom/SimpleGeometry.js\").default} geometry\n * @property {number} [index]\n * @property {Array<import(\"../extent.js\").Extent>} segment\n * @property {Array<SegmentData>} [featureSegments]\n */\n\n/**\n * @typedef {Object} Options\n * @property {import(\"../events/condition.js\").Condition} [condition] A function that\n * takes an {@link module:ol/MapBrowserEvent~MapBrowserEvent} and returns a\n * boolean to indicate whether that event will be considered to add or move a\n * vertex to the sketch. Default is\n * {@link module:ol/events/condition~primaryAction}.\n * @property {import(\"../events/condition.js\").Condition} [deleteCondition] A function\n * that takes an {@link module:ol/MapBrowserEvent~MapBrowserEvent} and returns a\n * boolean to indicate whether that event should be handled. By default,\n * {@link module:ol/events/condition~singleClick} with\n * {@link module:ol/events/condition~altKeyOnly} results in a vertex deletion.\n * @property {import(\"../events/condition.js\").Condition} [insertVertexCondition] A\n * function that takes an {@link module:ol/MapBrowserEvent~MapBrowserEvent} and\n * returns a boolean to indicate whether a new vertex can be added to the sketch\n * features. Default is {@link module:ol/events/condition~always}.\n * @property {number} [pixelTolerance=10] Pixel tolerance for considering the\n * pointer close enough to a segment or vertex for editing.\n * @property {import(\"../style/Style.js\").StyleLike} [style]\n * Style used for the features being modified. By default the default edit\n * style is used (see {@link module:ol/style}).\n * @property {VectorSource} [source] The vector source with\n * features to modify.  If a vector source is not provided, a feature collection\n * must be provided with the features option.\n * @property {Collection<Feature>} [features]\n * The features the interaction works on.  If a feature collection is not\n * provided, a vector source must be provided with the source option.\n * @property {boolean} [wrapX=false] Wrap the world horizontally on the sketch\n * overlay.\n */\n\n/**\n * @classdesc\n * Events emitted by {@link module:ol/interaction/Modify~Modify} instances are\n * instances of this type.\n */\n\nexport var ModifyEvent =\n/*@__PURE__*/\nfunction (Event) {\n  function ModifyEvent(type, features, mapBrowserPointerEvent) {\n    Event.call(this, type);\n    /**\n     * The features being modified.\n     * @type {Collection<Feature>}\n     * @api\n     */\n\n    this.features = features;\n    /**\n     * Associated {@link module:ol/MapBrowserEvent}.\n     * @type {import(\"../MapBrowserEvent.js\").default}\n     * @api\n     */\n\n    this.mapBrowserEvent = mapBrowserPointerEvent;\n  }\n\n  if (Event) ModifyEvent.__proto__ = Event;\n  ModifyEvent.prototype = Object.create(Event && Event.prototype);\n  ModifyEvent.prototype.constructor = ModifyEvent;\n  return ModifyEvent;\n}(Event);\n/**\n * @classdesc\n * Interaction for modifying feature geometries.  To modify features that have\n * been added to an existing source, construct the modify interaction with the\n * `source` option.  If you want to modify features in a collection (for example,\n * the collection used by a select interaction), construct the interaction with\n * the `features` option.  The interaction must be constructed with either a\n * `source` or `features` option.\n *\n * By default, the interaction will allow deletion of vertices when the `alt`\n * key is pressed.  To configure the interaction with a different condition\n * for deletion, use the `deleteCondition` option.\n * @fires ModifyEvent\n * @api\n */\n\nvar Modify =\n/*@__PURE__*/\nfunction (PointerInteraction) {\n  function Modify(options) {\n    PointerInteraction.call(\n    /** @type {import(\"./Pointer.js\").Options} */\n    this, options);\n    /**\n     * @private\n     * @type {import(\"../events/condition.js\").Condition}\n     */\n\n    this.condition_ = options.condition ? options.condition : primaryAction;\n    /**\n     * @private\n     * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Browser event.\n     * @return {boolean} Combined condition result.\n     */\n\n    this.defaultDeleteCondition_ = function (mapBrowserEvent) {\n      return altKeyOnly(mapBrowserEvent) && singleClick(mapBrowserEvent);\n    };\n    /**\n     * @type {import(\"../events/condition.js\").Condition}\n     * @private\n     */\n\n\n    this.deleteCondition_ = options.deleteCondition ? options.deleteCondition : this.defaultDeleteCondition_;\n    /**\n     * @type {import(\"../events/condition.js\").Condition}\n     * @private\n     */\n\n    this.insertVertexCondition_ = options.insertVertexCondition ? options.insertVertexCondition : always;\n    /**\n     * Editing vertex.\n     * @type {Feature}\n     * @private\n     */\n\n    this.vertexFeature_ = null;\n    /**\n     * Segments intersecting {@link this.vertexFeature_} by segment uid.\n     * @type {Object<string, boolean>}\n     * @private\n     */\n\n    this.vertexSegments_ = null;\n    /**\n     * @type {import(\"../pixel.js\").Pixel}\n     * @private\n     */\n\n    this.lastPixel_ = [0, 0];\n    /**\n     * Tracks if the next `singleclick` event should be ignored to prevent\n     * accidental deletion right after vertex creation.\n     * @type {boolean}\n     * @private\n     */\n\n    this.ignoreNextSingleClick_ = false;\n    /**\n     * @type {boolean}\n     * @private\n     */\n\n    this.modified_ = false;\n    /**\n     * Segment RTree for each layer\n     * @type {RBush<SegmentData>}\n     * @private\n     */\n\n    this.rBush_ = new RBush();\n    /**\n     * @type {number}\n     * @private\n     */\n\n    this.pixelTolerance_ = options.pixelTolerance !== undefined ? options.pixelTolerance : 10;\n    /**\n     * @type {boolean}\n     * @private\n     */\n\n    this.snappedToVertex_ = false;\n    /**\n     * Indicate whether the interaction is currently changing a feature's\n     * coordinates.\n     * @type {boolean}\n     * @private\n     */\n\n    this.changingFeature_ = false;\n    /**\n     * @type {Array}\n     * @private\n     */\n\n    this.dragSegments_ = [];\n    /**\n     * Draw overlay where sketch features are drawn.\n     * @type {VectorLayer}\n     * @private\n     */\n\n    this.overlay_ = new VectorLayer({\n      source: new VectorSource({\n        useSpatialIndex: false,\n        wrapX: !!options.wrapX\n      }),\n      style: options.style ? options.style : getDefaultStyleFunction(),\n      updateWhileAnimating: true,\n      updateWhileInteracting: true\n    });\n    /**\n     * @const\n     * @private\n     * @type {!Object<string, function(Feature, import(\"../geom/Geometry.js\").default)>}\n     */\n\n    this.SEGMENT_WRITERS_ = {\n      'Point': this.writePointGeometry_,\n      'LineString': this.writeLineStringGeometry_,\n      'LinearRing': this.writeLineStringGeometry_,\n      'Polygon': this.writePolygonGeometry_,\n      'MultiPoint': this.writeMultiPointGeometry_,\n      'MultiLineString': this.writeMultiLineStringGeometry_,\n      'MultiPolygon': this.writeMultiPolygonGeometry_,\n      'Circle': this.writeCircleGeometry_,\n      'GeometryCollection': this.writeGeometryCollectionGeometry_\n    };\n    /**\n     * @type {VectorSource}\n     * @private\n     */\n\n    this.source_ = null;\n    var features;\n\n    if (options.source) {\n      this.source_ = options.source;\n      features = new Collection(this.source_.getFeatures());\n      listen(this.source_, VectorEventType.ADDFEATURE, this.handleSourceAdd_, this);\n      listen(this.source_, VectorEventType.REMOVEFEATURE, this.handleSourceRemove_, this);\n    } else {\n      features = options.features;\n    }\n\n    if (!features) {\n      throw new Error('The modify interaction requires features or a source');\n    }\n    /**\n     * @type {Collection<Feature>}\n     * @private\n     */\n\n\n    this.features_ = features;\n    this.features_.forEach(this.addFeature_.bind(this));\n    listen(this.features_, CollectionEventType.ADD, this.handleFeatureAdd_, this);\n    listen(this.features_, CollectionEventType.REMOVE, this.handleFeatureRemove_, this);\n    /**\n     * @type {import(\"../MapBrowserPointerEvent.js\").default}\n     * @private\n     */\n\n    this.lastPointerEvent_ = null;\n  }\n\n  if (PointerInteraction) Modify.__proto__ = PointerInteraction;\n  Modify.prototype = Object.create(PointerInteraction && PointerInteraction.prototype);\n  Modify.prototype.constructor = Modify;\n  /**\n   * @param {Feature} feature Feature.\n   * @private\n   */\n\n  Modify.prototype.addFeature_ = function addFeature_(feature) {\n    var geometry = feature.getGeometry();\n\n    if (geometry && geometry.getType() in this.SEGMENT_WRITERS_) {\n      this.SEGMENT_WRITERS_[geometry.getType()].call(this, feature, geometry);\n    }\n\n    var map = this.getMap();\n\n    if (map && map.isRendered() && this.getActive()) {\n      this.handlePointerAtPixel_(this.lastPixel_, map);\n    }\n\n    listen(feature, EventType.CHANGE, this.handleFeatureChange_, this);\n  };\n  /**\n   * @param {import(\"../MapBrowserPointerEvent.js\").default} evt Map browser event\n   * @private\n   */\n\n\n  Modify.prototype.willModifyFeatures_ = function willModifyFeatures_(evt) {\n    if (!this.modified_) {\n      this.modified_ = true;\n      this.dispatchEvent(new ModifyEvent(ModifyEventType.MODIFYSTART, this.features_, evt));\n    }\n  };\n  /**\n   * @param {Feature} feature Feature.\n   * @private\n   */\n\n\n  Modify.prototype.removeFeature_ = function removeFeature_(feature) {\n    this.removeFeatureSegmentData_(feature); // Remove the vertex feature if the collection of canditate features\n    // is empty.\n\n    if (this.vertexFeature_ && this.features_.getLength() === 0) {\n      /** @type {VectorSource} */\n      this.overlay_.getSource().removeFeature(this.vertexFeature_);\n      this.vertexFeature_ = null;\n    }\n\n    unlisten(feature, EventType.CHANGE, this.handleFeatureChange_, this);\n  };\n  /**\n   * @param {Feature} feature Feature.\n   * @private\n   */\n\n\n  Modify.prototype.removeFeatureSegmentData_ = function removeFeatureSegmentData_(feature) {\n    var rBush = this.rBush_;\n    var\n    /** @type {Array<SegmentData>} */\n    nodesToRemove = [];\n    rBush.forEach(\n    /**\n     * @param {SegmentData} node RTree node.\n     */\n    function (node) {\n      if (feature === node.feature) {\n        nodesToRemove.push(node);\n      }\n    });\n\n    for (var i = nodesToRemove.length - 1; i >= 0; --i) {\n      rBush.remove(nodesToRemove[i]);\n    }\n  };\n  /**\n   * @inheritDoc\n   */\n\n\n  Modify.prototype.setActive = function setActive(active) {\n    if (this.vertexFeature_ && !active) {\n      /** @type {VectorSource} */\n      this.overlay_.getSource().removeFeature(this.vertexFeature_);\n      this.vertexFeature_ = null;\n    }\n\n    PointerInteraction.prototype.setActive.call(this, active);\n  };\n  /**\n   * @inheritDoc\n   */\n\n\n  Modify.prototype.setMap = function setMap(map) {\n    this.overlay_.setMap(map);\n    PointerInteraction.prototype.setMap.call(this, map);\n  };\n  /**\n   * Get the overlay layer that this interaction renders sketch features to.\n   * @return {VectorLayer} Overlay layer.\n   * @api\n   */\n\n\n  Modify.prototype.getOverlay = function getOverlay() {\n    return this.overlay_;\n  };\n  /**\n   * @param {import(\"../source/Vector.js\").VectorSourceEvent} event Event.\n   * @private\n   */\n\n\n  Modify.prototype.handleSourceAdd_ = function handleSourceAdd_(event) {\n    if (event.feature) {\n      this.features_.push(event.feature);\n    }\n  };\n  /**\n   * @param {import(\"../source/Vector.js\").VectorSourceEvent} event Event.\n   * @private\n   */\n\n\n  Modify.prototype.handleSourceRemove_ = function handleSourceRemove_(event) {\n    if (event.feature) {\n      this.features_.remove(event.feature);\n    }\n  };\n  /**\n   * @param {import(\"../Collection.js\").CollectionEvent} evt Event.\n   * @private\n   */\n\n\n  Modify.prototype.handleFeatureAdd_ = function handleFeatureAdd_(evt) {\n    this.addFeature_(\n    /** @type {Feature} */\n    evt.element);\n  };\n  /**\n   * @param {import(\"../events/Event.js\").default} evt Event.\n   * @private\n   */\n\n\n  Modify.prototype.handleFeatureChange_ = function handleFeatureChange_(evt) {\n    if (!this.changingFeature_) {\n      var feature =\n      /** @type {Feature} */\n      evt.target;\n      this.removeFeature_(feature);\n      this.addFeature_(feature);\n    }\n  };\n  /**\n   * @param {import(\"../Collection.js\").CollectionEvent} evt Event.\n   * @private\n   */\n\n\n  Modify.prototype.handleFeatureRemove_ = function handleFeatureRemove_(evt) {\n    var feature =\n    /** @type {Feature} */\n    evt.element;\n    this.removeFeature_(feature);\n  };\n  /**\n   * @param {Feature} feature Feature\n   * @param {Point} geometry Geometry.\n   * @private\n   */\n\n\n  Modify.prototype.writePointGeometry_ = function writePointGeometry_(feature, geometry) {\n    var coordinates = geometry.getCoordinates();\n    var segmentData =\n    /** @type {SegmentData} */\n    {\n      feature: feature,\n      geometry: geometry,\n      segment: [coordinates, coordinates]\n    };\n    this.rBush_.insert(geometry.getExtent(), segmentData);\n  };\n  /**\n   * @param {Feature} feature Feature\n   * @param {import(\"../geom/MultiPoint.js\").default} geometry Geometry.\n   * @private\n   */\n\n\n  Modify.prototype.writeMultiPointGeometry_ = function writeMultiPointGeometry_(feature, geometry) {\n    var points = geometry.getCoordinates();\n\n    for (var i = 0, ii = points.length; i < ii; ++i) {\n      var coordinates = points[i];\n      var segmentData =\n      /** @type {SegmentData} */\n      {\n        feature: feature,\n        geometry: geometry,\n        depth: [i],\n        index: i,\n        segment: [coordinates, coordinates]\n      };\n      this.rBush_.insert(geometry.getExtent(), segmentData);\n    }\n  };\n  /**\n   * @param {Feature} feature Feature\n   * @param {import(\"../geom/LineString.js\").default} geometry Geometry.\n   * @private\n   */\n\n\n  Modify.prototype.writeLineStringGeometry_ = function writeLineStringGeometry_(feature, geometry) {\n    var coordinates = geometry.getCoordinates();\n\n    for (var i = 0, ii = coordinates.length - 1; i < ii; ++i) {\n      var segment = coordinates.slice(i, i + 2);\n      var segmentData =\n      /** @type {SegmentData} */\n      {\n        feature: feature,\n        geometry: geometry,\n        index: i,\n        segment: segment\n      };\n      this.rBush_.insert(boundingExtent(segment), segmentData);\n    }\n  };\n  /**\n   * @param {Feature} feature Feature\n   * @param {import(\"../geom/MultiLineString.js\").default} geometry Geometry.\n   * @private\n   */\n\n\n  Modify.prototype.writeMultiLineStringGeometry_ = function writeMultiLineStringGeometry_(feature, geometry) {\n    var lines = geometry.getCoordinates();\n\n    for (var j = 0, jj = lines.length; j < jj; ++j) {\n      var coordinates = lines[j];\n\n      for (var i = 0, ii = coordinates.length - 1; i < ii; ++i) {\n        var segment = coordinates.slice(i, i + 2);\n        var segmentData =\n        /** @type {SegmentData} */\n        {\n          feature: feature,\n          geometry: geometry,\n          depth: [j],\n          index: i,\n          segment: segment\n        };\n        this.rBush_.insert(boundingExtent(segment), segmentData);\n      }\n    }\n  };\n  /**\n   * @param {Feature} feature Feature\n   * @param {import(\"../geom/Polygon.js\").default} geometry Geometry.\n   * @private\n   */\n\n\n  Modify.prototype.writePolygonGeometry_ = function writePolygonGeometry_(feature, geometry) {\n    var rings = geometry.getCoordinates();\n\n    for (var j = 0, jj = rings.length; j < jj; ++j) {\n      var coordinates = rings[j];\n\n      for (var i = 0, ii = coordinates.length - 1; i < ii; ++i) {\n        var segment = coordinates.slice(i, i + 2);\n        var segmentData =\n        /** @type {SegmentData} */\n        {\n          feature: feature,\n          geometry: geometry,\n          depth: [j],\n          index: i,\n          segment: segment\n        };\n        this.rBush_.insert(boundingExtent(segment), segmentData);\n      }\n    }\n  };\n  /**\n   * @param {Feature} feature Feature\n   * @param {import(\"../geom/MultiPolygon.js\").default} geometry Geometry.\n   * @private\n   */\n\n\n  Modify.prototype.writeMultiPolygonGeometry_ = function writeMultiPolygonGeometry_(feature, geometry) {\n    var polygons = geometry.getCoordinates();\n\n    for (var k = 0, kk = polygons.length; k < kk; ++k) {\n      var rings = polygons[k];\n\n      for (var j = 0, jj = rings.length; j < jj; ++j) {\n        var coordinates = rings[j];\n\n        for (var i = 0, ii = coordinates.length - 1; i < ii; ++i) {\n          var segment = coordinates.slice(i, i + 2);\n          var segmentData =\n          /** @type {SegmentData} */\n          {\n            feature: feature,\n            geometry: geometry,\n            depth: [j, k],\n            index: i,\n            segment: segment\n          };\n          this.rBush_.insert(boundingExtent(segment), segmentData);\n        }\n      }\n    }\n  };\n  /**\n   * We convert a circle into two segments.  The segment at index\n   * {@link CIRCLE_CENTER_INDEX} is the\n   * circle's center (a point).  The segment at index\n   * {@link CIRCLE_CIRCUMFERENCE_INDEX} is\n   * the circumference, and is not a line segment.\n   *\n   * @param {Feature} feature Feature.\n   * @param {import(\"../geom/Circle.js\").default} geometry Geometry.\n   * @private\n   */\n\n\n  Modify.prototype.writeCircleGeometry_ = function writeCircleGeometry_(feature, geometry) {\n    var coordinates = geometry.getCenter();\n    var centerSegmentData =\n    /** @type {SegmentData} */\n    {\n      feature: feature,\n      geometry: geometry,\n      index: CIRCLE_CENTER_INDEX,\n      segment: [coordinates, coordinates]\n    };\n    var circumferenceSegmentData =\n    /** @type {SegmentData} */\n    {\n      feature: feature,\n      geometry: geometry,\n      index: CIRCLE_CIRCUMFERENCE_INDEX,\n      segment: [coordinates, coordinates]\n    };\n    var featureSegments = [centerSegmentData, circumferenceSegmentData];\n    centerSegmentData.featureSegments = circumferenceSegmentData.featureSegments = featureSegments;\n    this.rBush_.insert(createOrUpdateFromCoordinate(coordinates), centerSegmentData);\n    this.rBush_.insert(geometry.getExtent(), circumferenceSegmentData);\n  };\n  /**\n   * @param {Feature} feature Feature\n   * @param {import(\"../geom/GeometryCollection.js\").default} geometry Geometry.\n   * @private\n   */\n\n\n  Modify.prototype.writeGeometryCollectionGeometry_ = function writeGeometryCollectionGeometry_(feature, geometry) {\n    var geometries = geometry.getGeometriesArray();\n\n    for (var i = 0; i < geometries.length; ++i) {\n      this.SEGMENT_WRITERS_[geometries[i].getType()].call(this, feature, geometries[i]);\n    }\n  };\n  /**\n   * @param {import(\"../coordinate.js\").Coordinate} coordinates Coordinates.\n   * @return {Feature} Vertex feature.\n   * @private\n   */\n\n\n  Modify.prototype.createOrUpdateVertexFeature_ = function createOrUpdateVertexFeature_(coordinates) {\n    var vertexFeature = this.vertexFeature_;\n\n    if (!vertexFeature) {\n      vertexFeature = new Feature(new Point(coordinates));\n      this.vertexFeature_ = vertexFeature;\n      /** @type {VectorSource} */\n\n      this.overlay_.getSource().addFeature(vertexFeature);\n    } else {\n      var geometry =\n      /** @type {Point} */\n      vertexFeature.getGeometry();\n      geometry.setCoordinates(coordinates);\n    }\n\n    return vertexFeature;\n  };\n  /**\n   * Handles the {@link module:ol/MapBrowserEvent map browser event} and may modify the geometry.\n   * @override\n   */\n\n\n  Modify.prototype.handleEvent = function handleEvent(mapBrowserEvent) {\n    if (!\n    /** @type {import(\"../MapBrowserPointerEvent.js\").default} */\n    mapBrowserEvent.pointerEvent) {\n      return true;\n    }\n\n    this.lastPointerEvent_ = mapBrowserEvent;\n    var handled;\n\n    if (!mapBrowserEvent.map.getView().getInteracting() && mapBrowserEvent.type == MapBrowserEventType.POINTERMOVE && !this.handlingDownUpSequence) {\n      this.handlePointerMove_(mapBrowserEvent);\n    }\n\n    if (this.vertexFeature_ && this.deleteCondition_(mapBrowserEvent)) {\n      if (mapBrowserEvent.type != MapBrowserEventType.SINGLECLICK || !this.ignoreNextSingleClick_) {\n        handled = this.removePoint();\n      } else {\n        handled = true;\n      }\n    }\n\n    if (mapBrowserEvent.type == MapBrowserEventType.SINGLECLICK) {\n      this.ignoreNextSingleClick_ = false;\n    }\n\n    return PointerInteraction.prototype.handleEvent.call(this, mapBrowserEvent) && !handled;\n  };\n  /**\n   * @inheritDoc\n   */\n\n\n  Modify.prototype.handleDragEvent = function handleDragEvent(evt) {\n    this.ignoreNextSingleClick_ = false;\n    this.willModifyFeatures_(evt);\n    var vertex = evt.coordinate;\n\n    for (var i = 0, ii = this.dragSegments_.length; i < ii; ++i) {\n      var dragSegment = this.dragSegments_[i];\n      var segmentData = dragSegment[0];\n      var depth = segmentData.depth;\n      var geometry = segmentData.geometry;\n      var coordinates = void 0;\n      var segment = segmentData.segment;\n      var index = dragSegment[1];\n\n      while (vertex.length < geometry.getStride()) {\n        vertex.push(segment[index][vertex.length]);\n      }\n\n      switch (geometry.getType()) {\n        case GeometryType.POINT:\n          coordinates = vertex;\n          segment[0] = segment[1] = vertex;\n          break;\n\n        case GeometryType.MULTI_POINT:\n          coordinates = geometry.getCoordinates();\n          coordinates[segmentData.index] = vertex;\n          segment[0] = segment[1] = vertex;\n          break;\n\n        case GeometryType.LINE_STRING:\n          coordinates = geometry.getCoordinates();\n          coordinates[segmentData.index + index] = vertex;\n          segment[index] = vertex;\n          break;\n\n        case GeometryType.MULTI_LINE_STRING:\n          coordinates = geometry.getCoordinates();\n          coordinates[depth[0]][segmentData.index + index] = vertex;\n          segment[index] = vertex;\n          break;\n\n        case GeometryType.POLYGON:\n          coordinates = geometry.getCoordinates();\n          coordinates[depth[0]][segmentData.index + index] = vertex;\n          segment[index] = vertex;\n          break;\n\n        case GeometryType.MULTI_POLYGON:\n          coordinates = geometry.getCoordinates();\n          coordinates[depth[1]][depth[0]][segmentData.index + index] = vertex;\n          segment[index] = vertex;\n          break;\n\n        case GeometryType.CIRCLE:\n          segment[0] = segment[1] = vertex;\n\n          if (segmentData.index === CIRCLE_CENTER_INDEX) {\n            this.changingFeature_ = true;\n            geometry.setCenter(vertex);\n            this.changingFeature_ = false;\n          } else {\n            // We're dragging the circle's circumference:\n            this.changingFeature_ = true;\n            geometry.setRadius(coordinateDistance(geometry.getCenter(), vertex));\n            this.changingFeature_ = false;\n          }\n\n          break;\n\n        default: // pass\n\n      }\n\n      if (coordinates) {\n        this.setGeometryCoordinates_(geometry, coordinates);\n      }\n    }\n\n    this.createOrUpdateVertexFeature_(vertex);\n  };\n  /**\n   * @inheritDoc\n   */\n\n\n  Modify.prototype.handleDownEvent = function handleDownEvent(evt) {\n    if (!this.condition_(evt)) {\n      return false;\n    }\n\n    this.handlePointerAtPixel_(evt.pixel, evt.map);\n    var pixelCoordinate = evt.map.getCoordinateFromPixel(evt.pixel);\n    this.dragSegments_.length = 0;\n    this.modified_ = false;\n    var vertexFeature = this.vertexFeature_;\n\n    if (vertexFeature) {\n      var insertVertices = [];\n      var geometry =\n      /** @type {Point} */\n      vertexFeature.getGeometry();\n      var vertex = geometry.getCoordinates();\n      var vertexExtent = boundingExtent([vertex]);\n      var segmentDataMatches = this.rBush_.getInExtent(vertexExtent);\n      var componentSegments = {};\n      segmentDataMatches.sort(compareIndexes);\n\n      for (var i = 0, ii = segmentDataMatches.length; i < ii; ++i) {\n        var segmentDataMatch = segmentDataMatches[i];\n        var segment = segmentDataMatch.segment;\n        var uid = getUid(segmentDataMatch.feature);\n        var depth = segmentDataMatch.depth;\n\n        if (depth) {\n          uid += '-' + depth.join('-'); // separate feature components\n        }\n\n        if (!componentSegments[uid]) {\n          componentSegments[uid] = new Array(2);\n        }\n\n        if (segmentDataMatch.geometry.getType() === GeometryType.CIRCLE && segmentDataMatch.index === CIRCLE_CIRCUMFERENCE_INDEX) {\n          var closestVertex = closestOnSegmentData(pixelCoordinate, segmentDataMatch);\n\n          if (coordinatesEqual(closestVertex, vertex) && !componentSegments[uid][0]) {\n            this.dragSegments_.push([segmentDataMatch, 0]);\n            componentSegments[uid][0] = segmentDataMatch;\n          }\n        } else if (coordinatesEqual(segment[0], vertex) && !componentSegments[uid][0]) {\n          this.dragSegments_.push([segmentDataMatch, 0]);\n          componentSegments[uid][0] = segmentDataMatch;\n        } else if (coordinatesEqual(segment[1], vertex) && !componentSegments[uid][1]) {\n          // prevent dragging closed linestrings by the connecting node\n          if ((segmentDataMatch.geometry.getType() === GeometryType.LINE_STRING || segmentDataMatch.geometry.getType() === GeometryType.MULTI_LINE_STRING) && componentSegments[uid][0] && componentSegments[uid][0].index === 0) {\n            continue;\n          }\n\n          this.dragSegments_.push([segmentDataMatch, 1]);\n          componentSegments[uid][1] = segmentDataMatch;\n        } else if (this.insertVertexCondition_(evt) && getUid(segment) in this.vertexSegments_ && !componentSegments[uid][0] && !componentSegments[uid][1]) {\n          insertVertices.push([segmentDataMatch, vertex]);\n        }\n      }\n\n      if (insertVertices.length) {\n        this.willModifyFeatures_(evt);\n      }\n\n      for (var j = insertVertices.length - 1; j >= 0; --j) {\n        this.insertVertex_.apply(this, insertVertices[j]);\n      }\n    }\n\n    return !!this.vertexFeature_;\n  };\n  /**\n   * @inheritDoc\n   */\n\n\n  Modify.prototype.handleUpEvent = function handleUpEvent(evt) {\n    for (var i = this.dragSegments_.length - 1; i >= 0; --i) {\n      var segmentData = this.dragSegments_[i][0];\n      var geometry = segmentData.geometry;\n\n      if (geometry.getType() === GeometryType.CIRCLE) {\n        // Update a circle object in the R* bush:\n        var coordinates = geometry.getCenter();\n        var centerSegmentData = segmentData.featureSegments[0];\n        var circumferenceSegmentData = segmentData.featureSegments[1];\n        centerSegmentData.segment[0] = centerSegmentData.segment[1] = coordinates;\n        circumferenceSegmentData.segment[0] = circumferenceSegmentData.segment[1] = coordinates;\n        this.rBush_.update(createOrUpdateFromCoordinate(coordinates), centerSegmentData);\n        this.rBush_.update(geometry.getExtent(), circumferenceSegmentData);\n      } else {\n        this.rBush_.update(boundingExtent(segmentData.segment), segmentData);\n      }\n    }\n\n    if (this.modified_) {\n      this.dispatchEvent(new ModifyEvent(ModifyEventType.MODIFYEND, this.features_, evt));\n      this.modified_ = false;\n    }\n\n    return false;\n  };\n  /**\n   * @param {import(\"../MapBrowserEvent.js\").default} evt Event.\n   * @private\n   */\n\n\n  Modify.prototype.handlePointerMove_ = function handlePointerMove_(evt) {\n    this.lastPixel_ = evt.pixel;\n    this.handlePointerAtPixel_(evt.pixel, evt.map);\n  };\n  /**\n   * @param {import(\"../pixel.js\").Pixel} pixel Pixel\n   * @param {import(\"../PluggableMap.js\").default} map Map.\n   * @private\n   */\n\n\n  Modify.prototype.handlePointerAtPixel_ = function handlePointerAtPixel_(pixel, map) {\n    var pixelCoordinate = map.getCoordinateFromPixel(pixel);\n\n    var sortByDistance = function (a, b) {\n      return pointDistanceToSegmentDataSquared(pixelCoordinate, a) - pointDistanceToSegmentDataSquared(pixelCoordinate, b);\n    };\n\n    var box = buffer(createOrUpdateFromCoordinate(pixelCoordinate), map.getView().getResolution() * this.pixelTolerance_);\n    var rBush = this.rBush_;\n    var nodes = rBush.getInExtent(box);\n\n    if (nodes.length > 0) {\n      nodes.sort(sortByDistance);\n      var node = nodes[0];\n      var closestSegment = node.segment;\n      var vertex = closestOnSegmentData(pixelCoordinate, node);\n      var vertexPixel = map.getPixelFromCoordinate(vertex);\n      var dist = coordinateDistance(pixel, vertexPixel);\n\n      if (dist <= this.pixelTolerance_) {\n        /** @type {Object<string, boolean>} */\n        var vertexSegments = {};\n\n        if (node.geometry.getType() === GeometryType.CIRCLE && node.index === CIRCLE_CIRCUMFERENCE_INDEX) {\n          this.snappedToVertex_ = true;\n          this.createOrUpdateVertexFeature_(vertex);\n        } else {\n          var pixel1 = map.getPixelFromCoordinate(closestSegment[0]);\n          var pixel2 = map.getPixelFromCoordinate(closestSegment[1]);\n          var squaredDist1 = squaredCoordinateDistance(vertexPixel, pixel1);\n          var squaredDist2 = squaredCoordinateDistance(vertexPixel, pixel2);\n          dist = Math.sqrt(Math.min(squaredDist1, squaredDist2));\n          this.snappedToVertex_ = dist <= this.pixelTolerance_;\n\n          if (this.snappedToVertex_) {\n            vertex = squaredDist1 > squaredDist2 ? closestSegment[1] : closestSegment[0];\n          }\n\n          this.createOrUpdateVertexFeature_(vertex);\n\n          for (var i = 1, ii = nodes.length; i < ii; ++i) {\n            var segment = nodes[i].segment;\n\n            if (coordinatesEqual(closestSegment[0], segment[0]) && coordinatesEqual(closestSegment[1], segment[1]) || coordinatesEqual(closestSegment[0], segment[1]) && coordinatesEqual(closestSegment[1], segment[0])) {\n              vertexSegments[getUid(segment)] = true;\n            } else {\n              break;\n            }\n          }\n        }\n\n        vertexSegments[getUid(closestSegment)] = true;\n        this.vertexSegments_ = vertexSegments;\n        return;\n      }\n    }\n\n    if (this.vertexFeature_) {\n      /** @type {VectorSource} */\n      this.overlay_.getSource().removeFeature(this.vertexFeature_);\n      this.vertexFeature_ = null;\n    }\n  };\n  /**\n   * @param {SegmentData} segmentData Segment data.\n   * @param {import(\"../coordinate.js\").Coordinate} vertex Vertex.\n   * @private\n   */\n\n\n  Modify.prototype.insertVertex_ = function insertVertex_(segmentData, vertex) {\n    var segment = segmentData.segment;\n    var feature = segmentData.feature;\n    var geometry = segmentData.geometry;\n    var depth = segmentData.depth;\n    var index =\n    /** @type {number} */\n    segmentData.index;\n    var coordinates;\n\n    while (vertex.length < geometry.getStride()) {\n      vertex.push(0);\n    }\n\n    switch (geometry.getType()) {\n      case GeometryType.MULTI_LINE_STRING:\n        coordinates = geometry.getCoordinates();\n        coordinates[depth[0]].splice(index + 1, 0, vertex);\n        break;\n\n      case GeometryType.POLYGON:\n        coordinates = geometry.getCoordinates();\n        coordinates[depth[0]].splice(index + 1, 0, vertex);\n        break;\n\n      case GeometryType.MULTI_POLYGON:\n        coordinates = geometry.getCoordinates();\n        coordinates[depth[1]][depth[0]].splice(index + 1, 0, vertex);\n        break;\n\n      case GeometryType.LINE_STRING:\n        coordinates = geometry.getCoordinates();\n        coordinates.splice(index + 1, 0, vertex);\n        break;\n\n      default:\n        return;\n    }\n\n    this.setGeometryCoordinates_(geometry, coordinates);\n    var rTree = this.rBush_;\n    rTree.remove(segmentData);\n    this.updateSegmentIndices_(geometry, index, depth, 1);\n    var newSegmentData =\n    /** @type {SegmentData} */\n    {\n      segment: [segment[0], vertex],\n      feature: feature,\n      geometry: geometry,\n      depth: depth,\n      index: index\n    };\n    rTree.insert(boundingExtent(newSegmentData.segment), newSegmentData);\n    this.dragSegments_.push([newSegmentData, 1]);\n    var newSegmentData2 =\n    /** @type {SegmentData} */\n    {\n      segment: [vertex, segment[1]],\n      feature: feature,\n      geometry: geometry,\n      depth: depth,\n      index: index + 1\n    };\n    rTree.insert(boundingExtent(newSegmentData2.segment), newSegmentData2);\n    this.dragSegments_.push([newSegmentData2, 0]);\n    this.ignoreNextSingleClick_ = true;\n  };\n  /**\n   * Removes the vertex currently being pointed.\n   * @return {boolean} True when a vertex was removed.\n   * @api\n   */\n\n\n  Modify.prototype.removePoint = function removePoint() {\n    if (this.lastPointerEvent_ && this.lastPointerEvent_.type != MapBrowserEventType.POINTERDRAG) {\n      var evt = this.lastPointerEvent_;\n      this.willModifyFeatures_(evt);\n      this.removeVertex_();\n      this.dispatchEvent(new ModifyEvent(ModifyEventType.MODIFYEND, this.features_, evt));\n      this.modified_ = false;\n      return true;\n    }\n\n    return false;\n  };\n  /**\n   * Removes a vertex from all matching features.\n   * @return {boolean} True when a vertex was removed.\n   * @private\n   */\n\n\n  Modify.prototype.removeVertex_ = function removeVertex_() {\n    var dragSegments = this.dragSegments_;\n    var segmentsByFeature = {};\n    var deleted = false;\n    var component, coordinates, dragSegment, geometry, i, index, left;\n    var newIndex, right, segmentData, uid;\n\n    for (i = dragSegments.length - 1; i >= 0; --i) {\n      dragSegment = dragSegments[i];\n      segmentData = dragSegment[0];\n      uid = getUid(segmentData.feature);\n\n      if (segmentData.depth) {\n        // separate feature components\n        uid += '-' + segmentData.depth.join('-');\n      }\n\n      if (!(uid in segmentsByFeature)) {\n        segmentsByFeature[uid] = {};\n      }\n\n      if (dragSegment[1] === 0) {\n        segmentsByFeature[uid].right = segmentData;\n        segmentsByFeature[uid].index = segmentData.index;\n      } else if (dragSegment[1] == 1) {\n        segmentsByFeature[uid].left = segmentData;\n        segmentsByFeature[uid].index = segmentData.index + 1;\n      }\n    }\n\n    for (uid in segmentsByFeature) {\n      right = segmentsByFeature[uid].right;\n      left = segmentsByFeature[uid].left;\n      index = segmentsByFeature[uid].index;\n      newIndex = index - 1;\n\n      if (left !== undefined) {\n        segmentData = left;\n      } else {\n        segmentData = right;\n      }\n\n      if (newIndex < 0) {\n        newIndex = 0;\n      }\n\n      geometry = segmentData.geometry;\n      coordinates = geometry.getCoordinates();\n      component = coordinates;\n      deleted = false;\n\n      switch (geometry.getType()) {\n        case GeometryType.MULTI_LINE_STRING:\n          if (coordinates[segmentData.depth[0]].length > 2) {\n            coordinates[segmentData.depth[0]].splice(index, 1);\n            deleted = true;\n          }\n\n          break;\n\n        case GeometryType.LINE_STRING:\n          if (coordinates.length > 2) {\n            coordinates.splice(index, 1);\n            deleted = true;\n          }\n\n          break;\n\n        case GeometryType.MULTI_POLYGON:\n          component = component[segmentData.depth[1]];\n\n        /* falls through */\n\n        case GeometryType.POLYGON:\n          component = component[segmentData.depth[0]];\n\n          if (component.length > 4) {\n            if (index == component.length - 1) {\n              index = 0;\n            }\n\n            component.splice(index, 1);\n            deleted = true;\n\n            if (index === 0) {\n              // close the ring again\n              component.pop();\n              component.push(component[0]);\n              newIndex = component.length - 1;\n            }\n          }\n\n          break;\n\n        default: // pass\n\n      }\n\n      if (deleted) {\n        this.setGeometryCoordinates_(geometry, coordinates);\n        var segments = [];\n\n        if (left !== undefined) {\n          this.rBush_.remove(left);\n          segments.push(left.segment[0]);\n        }\n\n        if (right !== undefined) {\n          this.rBush_.remove(right);\n          segments.push(right.segment[1]);\n        }\n\n        if (left !== undefined && right !== undefined) {\n          var newSegmentData =\n          /** @type {SegmentData} */\n          {\n            depth: segmentData.depth,\n            feature: segmentData.feature,\n            geometry: segmentData.geometry,\n            index: newIndex,\n            segment: segments\n          };\n          this.rBush_.insert(boundingExtent(newSegmentData.segment), newSegmentData);\n        }\n\n        this.updateSegmentIndices_(geometry, index, segmentData.depth, -1);\n\n        if (this.vertexFeature_) {\n          /** @type {VectorSource} */\n          this.overlay_.getSource().removeFeature(this.vertexFeature_);\n          this.vertexFeature_ = null;\n        }\n\n        dragSegments.length = 0;\n      }\n    }\n\n    return deleted;\n  };\n  /**\n   * @param {import(\"../geom/SimpleGeometry.js\").default} geometry Geometry.\n   * @param {Array} coordinates Coordinates.\n   * @private\n   */\n\n\n  Modify.prototype.setGeometryCoordinates_ = function setGeometryCoordinates_(geometry, coordinates) {\n    this.changingFeature_ = true;\n    geometry.setCoordinates(coordinates);\n    this.changingFeature_ = false;\n  };\n  /**\n   * @param {import(\"../geom/SimpleGeometry.js\").default} geometry Geometry.\n   * @param {number} index Index.\n   * @param {Array<number>|undefined} depth Depth.\n   * @param {number} delta Delta (1 or -1).\n   * @private\n   */\n\n\n  Modify.prototype.updateSegmentIndices_ = function updateSegmentIndices_(geometry, index, depth, delta) {\n    this.rBush_.forEachInExtent(geometry.getExtent(), function (segmentDataMatch) {\n      if (segmentDataMatch.geometry === geometry && (depth === undefined || segmentDataMatch.depth === undefined || equals(segmentDataMatch.depth, depth)) && segmentDataMatch.index > index) {\n        segmentDataMatch.index += delta;\n      }\n    });\n  };\n\n  return Modify;\n}(PointerInteraction);\n/**\n * @param {SegmentData} a The first segment data.\n * @param {SegmentData} b The second segment data.\n * @return {number} The difference in indexes.\n */\n\n\nfunction compareIndexes(a, b) {\n  return a.index - b.index;\n}\n/**\n * Returns the distance from a point to a line segment.\n *\n * @param {import(\"../coordinate.js\").Coordinate} pointCoordinates The coordinates of the point from\n *        which to calculate the distance.\n * @param {SegmentData} segmentData The object describing the line\n *        segment we are calculating the distance to.\n * @return {number} The square of the distance between a point and a line segment.\n */\n\n\nfunction pointDistanceToSegmentDataSquared(pointCoordinates, segmentData) {\n  var geometry = segmentData.geometry;\n\n  if (geometry.getType() === GeometryType.CIRCLE) {\n    var circleGeometry =\n    /** @type {import(\"../geom/Circle.js\").default} */\n    geometry;\n\n    if (segmentData.index === CIRCLE_CIRCUMFERENCE_INDEX) {\n      var distanceToCenterSquared = squaredCoordinateDistance(circleGeometry.getCenter(), pointCoordinates);\n      var distanceToCircumference = Math.sqrt(distanceToCenterSquared) - circleGeometry.getRadius();\n      return distanceToCircumference * distanceToCircumference;\n    }\n  }\n\n  return squaredDistanceToSegment(pointCoordinates, segmentData.segment);\n}\n/**\n * Returns the point closest to a given line segment.\n *\n * @param {import(\"../coordinate.js\").Coordinate} pointCoordinates The point to which a closest point\n *        should be found.\n * @param {SegmentData} segmentData The object describing the line\n *        segment which should contain the closest point.\n * @return {import(\"../coordinate.js\").Coordinate} The point closest to the specified line segment.\n */\n\n\nfunction closestOnSegmentData(pointCoordinates, segmentData) {\n  var geometry = segmentData.geometry;\n\n  if (geometry.getType() === GeometryType.CIRCLE && segmentData.index === CIRCLE_CIRCUMFERENCE_INDEX) {\n    return geometry.getClosestPoint(pointCoordinates);\n  }\n\n  return closestOnSegment(pointCoordinates, segmentData.segment);\n}\n/**\n * @return {import(\"../style/Style.js\").StyleFunction} Styles.\n */\n\n\nfunction getDefaultStyleFunction() {\n  var style = createEditingStyle();\n  return function (feature, resolution) {\n    return style[GeometryType.POINT];\n  };\n}\n\nexport default Modify;","map":{"version":3,"sources":["../../../src/ol/interaction/Modify.js"],"names":["const","super","let"],"mappings":"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","sourcesContent":["/**\n * @module ol/interaction/Modify\n */\nimport {getUid} from '../util.js';\nimport Collection from '../Collection.js';\nimport CollectionEventType from '../CollectionEventType.js';\nimport Feature from '../Feature.js';\nimport MapBrowserEventType from '../MapBrowserEventType.js';\nimport {equals} from '../array.js';\nimport {equals as coordinatesEqual, distance as coordinateDistance, squaredDistance as squaredCoordinateDistance, squaredDistanceToSegment, closestOnSegment} from '../coordinate.js';\nimport {listen, unlisten} from '../events.js';\nimport Event from '../events/Event.js';\nimport EventType from '../events/EventType.js';\nimport {always, primaryAction, altKeyOnly, singleClick} from '../events/condition.js';\nimport {boundingExtent, buffer, createOrUpdateFromCoordinate} from '../extent.js';\nimport GeometryType from '../geom/GeometryType.js';\nimport Point from '../geom/Point.js';\nimport PointerInteraction from './Pointer.js';\nimport VectorLayer from '../layer/Vector.js';\nimport VectorSource from '../source/Vector.js';\nimport VectorEventType from '../source/VectorEventType.js';\nimport RBush from '../structs/RBush.js';\nimport {createEditingStyle} from '../style/Style.js';\n\n\n/**\n * The segment index assigned to a circle's center when\n * breaking up a circle into ModifySegmentDataType segments.\n * @type {number}\n */\nconst CIRCLE_CENTER_INDEX = 0;\n\n/**\n * The segment index assigned to a circle's circumference when\n * breaking up a circle into ModifySegmentDataType segments.\n * @type {number}\n */\nconst CIRCLE_CIRCUMFERENCE_INDEX = 1;\n\n\n/**\n * @enum {string}\n */\nconst ModifyEventType = {\n  /**\n   * Triggered upon feature modification start\n   * @event ModifyEvent#modifystart\n   * @api\n   */\n  MODIFYSTART: 'modifystart',\n  /**\n   * Triggered upon feature modification end\n   * @event ModifyEvent#modifyend\n   * @api\n   */\n  MODIFYEND: 'modifyend'\n};\n\n\n/**\n * @typedef {Object} SegmentData\n * @property {Array<number>} [depth]\n * @property {Feature} feature\n * @property {import(\"../geom/SimpleGeometry.js\").default} geometry\n * @property {number} [index]\n * @property {Array<import(\"../extent.js\").Extent>} segment\n * @property {Array<SegmentData>} [featureSegments]\n */\n\n\n/**\n * @typedef {Object} Options\n * @property {import(\"../events/condition.js\").Condition} [condition] A function that\n * takes an {@link module:ol/MapBrowserEvent~MapBrowserEvent} and returns a\n * boolean to indicate whether that event will be considered to add or move a\n * vertex to the sketch. Default is\n * {@link module:ol/events/condition~primaryAction}.\n * @property {import(\"../events/condition.js\").Condition} [deleteCondition] A function\n * that takes an {@link module:ol/MapBrowserEvent~MapBrowserEvent} and returns a\n * boolean to indicate whether that event should be handled. By default,\n * {@link module:ol/events/condition~singleClick} with\n * {@link module:ol/events/condition~altKeyOnly} results in a vertex deletion.\n * @property {import(\"../events/condition.js\").Condition} [insertVertexCondition] A\n * function that takes an {@link module:ol/MapBrowserEvent~MapBrowserEvent} and\n * returns a boolean to indicate whether a new vertex can be added to the sketch\n * features. Default is {@link module:ol/events/condition~always}.\n * @property {number} [pixelTolerance=10] Pixel tolerance for considering the\n * pointer close enough to a segment or vertex for editing.\n * @property {import(\"../style/Style.js\").StyleLike} [style]\n * Style used for the features being modified. By default the default edit\n * style is used (see {@link module:ol/style}).\n * @property {VectorSource} [source] The vector source with\n * features to modify.  If a vector source is not provided, a feature collection\n * must be provided with the features option.\n * @property {Collection<Feature>} [features]\n * The features the interaction works on.  If a feature collection is not\n * provided, a vector source must be provided with the source option.\n * @property {boolean} [wrapX=false] Wrap the world horizontally on the sketch\n * overlay.\n */\n\n\n/**\n * @classdesc\n * Events emitted by {@link module:ol/interaction/Modify~Modify} instances are\n * instances of this type.\n */\nexport class ModifyEvent extends Event {\n  /**\n   * @param {ModifyEventType} type Type.\n   * @param {Collection<Feature>} features\n   * The features modified.\n   * @param {import(\"../MapBrowserPointerEvent.js\").default} mapBrowserPointerEvent\n   * Associated {@link module:ol/MapBrowserPointerEvent}.\n   */\n  constructor(type, features, mapBrowserPointerEvent) {\n    super(type);\n\n    /**\n     * The features being modified.\n     * @type {Collection<Feature>}\n     * @api\n     */\n    this.features = features;\n\n    /**\n     * Associated {@link module:ol/MapBrowserEvent}.\n     * @type {import(\"../MapBrowserEvent.js\").default}\n     * @api\n     */\n    this.mapBrowserEvent = mapBrowserPointerEvent;\n\n  }\n\n}\n\n\n/**\n * @classdesc\n * Interaction for modifying feature geometries.  To modify features that have\n * been added to an existing source, construct the modify interaction with the\n * `source` option.  If you want to modify features in a collection (for example,\n * the collection used by a select interaction), construct the interaction with\n * the `features` option.  The interaction must be constructed with either a\n * `source` or `features` option.\n *\n * By default, the interaction will allow deletion of vertices when the `alt`\n * key is pressed.  To configure the interaction with a different condition\n * for deletion, use the `deleteCondition` option.\n * @fires ModifyEvent\n * @api\n */\nclass Modify extends PointerInteraction {\n  /**\n   * @param {Options} options Options.\n   */\n  constructor(options) {\n\n    super(/** @type {import(\"./Pointer.js\").Options} */ (options));\n\n    /**\n     * @private\n     * @type {import(\"../events/condition.js\").Condition}\n     */\n    this.condition_ = options.condition ? options.condition : primaryAction;\n\n    /**\n     * @private\n     * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Browser event.\n     * @return {boolean} Combined condition result.\n     */\n    this.defaultDeleteCondition_ = function(mapBrowserEvent) {\n      return altKeyOnly(mapBrowserEvent) && singleClick(mapBrowserEvent);\n    };\n\n    /**\n     * @type {import(\"../events/condition.js\").Condition}\n     * @private\n     */\n    this.deleteCondition_ = options.deleteCondition ?\n      options.deleteCondition : this.defaultDeleteCondition_;\n\n    /**\n     * @type {import(\"../events/condition.js\").Condition}\n     * @private\n     */\n    this.insertVertexCondition_ = options.insertVertexCondition ?\n      options.insertVertexCondition : always;\n\n    /**\n     * Editing vertex.\n     * @type {Feature}\n     * @private\n     */\n    this.vertexFeature_ = null;\n\n    /**\n     * Segments intersecting {@link this.vertexFeature_} by segment uid.\n     * @type {Object<string, boolean>}\n     * @private\n     */\n    this.vertexSegments_ = null;\n\n    /**\n     * @type {import(\"../pixel.js\").Pixel}\n     * @private\n     */\n    this.lastPixel_ = [0, 0];\n\n    /**\n     * Tracks if the next `singleclick` event should be ignored to prevent\n     * accidental deletion right after vertex creation.\n     * @type {boolean}\n     * @private\n     */\n    this.ignoreNextSingleClick_ = false;\n\n    /**\n     * @type {boolean}\n     * @private\n     */\n    this.modified_ = false;\n\n    /**\n     * Segment RTree for each layer\n     * @type {RBush<SegmentData>}\n     * @private\n     */\n    this.rBush_ = new RBush();\n\n    /**\n     * @type {number}\n     * @private\n     */\n    this.pixelTolerance_ = options.pixelTolerance !== undefined ?\n      options.pixelTolerance : 10;\n\n    /**\n     * @type {boolean}\n     * @private\n     */\n    this.snappedToVertex_ = false;\n\n    /**\n     * Indicate whether the interaction is currently changing a feature's\n     * coordinates.\n     * @type {boolean}\n     * @private\n     */\n    this.changingFeature_ = false;\n\n    /**\n     * @type {Array}\n     * @private\n     */\n    this.dragSegments_ = [];\n\n    /**\n     * Draw overlay where sketch features are drawn.\n     * @type {VectorLayer}\n     * @private\n     */\n    this.overlay_ = new VectorLayer({\n      source: new VectorSource({\n        useSpatialIndex: false,\n        wrapX: !!options.wrapX\n      }),\n      style: options.style ? options.style :\n        getDefaultStyleFunction(),\n      updateWhileAnimating: true,\n      updateWhileInteracting: true\n    });\n\n    /**\n     * @const\n     * @private\n     * @type {!Object<string, function(Feature, import(\"../geom/Geometry.js\").default)>}\n     */\n    this.SEGMENT_WRITERS_ = {\n      'Point': this.writePointGeometry_,\n      'LineString': this.writeLineStringGeometry_,\n      'LinearRing': this.writeLineStringGeometry_,\n      'Polygon': this.writePolygonGeometry_,\n      'MultiPoint': this.writeMultiPointGeometry_,\n      'MultiLineString': this.writeMultiLineStringGeometry_,\n      'MultiPolygon': this.writeMultiPolygonGeometry_,\n      'Circle': this.writeCircleGeometry_,\n      'GeometryCollection': this.writeGeometryCollectionGeometry_\n    };\n\n\n    /**\n     * @type {VectorSource}\n     * @private\n     */\n    this.source_ = null;\n\n    let features;\n    if (options.source) {\n      this.source_ = options.source;\n      features = new Collection(this.source_.getFeatures());\n      listen(this.source_, VectorEventType.ADDFEATURE,\n        this.handleSourceAdd_, this);\n      listen(this.source_, VectorEventType.REMOVEFEATURE,\n        this.handleSourceRemove_, this);\n    } else {\n      features = options.features;\n    }\n    if (!features) {\n      throw new Error('The modify interaction requires features or a source');\n    }\n\n    /**\n     * @type {Collection<Feature>}\n     * @private\n     */\n    this.features_ = features;\n\n    this.features_.forEach(this.addFeature_.bind(this));\n    listen(this.features_, CollectionEventType.ADD,\n      this.handleFeatureAdd_, this);\n    listen(this.features_, CollectionEventType.REMOVE,\n      this.handleFeatureRemove_, this);\n\n    /**\n     * @type {import(\"../MapBrowserPointerEvent.js\").default}\n     * @private\n     */\n    this.lastPointerEvent_ = null;\n\n  }\n\n  /**\n   * @param {Feature} feature Feature.\n   * @private\n   */\n  addFeature_(feature) {\n    const geometry = feature.getGeometry();\n    if (geometry && geometry.getType() in this.SEGMENT_WRITERS_) {\n      this.SEGMENT_WRITERS_[geometry.getType()].call(this, feature, geometry);\n    }\n    const map = this.getMap();\n    if (map && map.isRendered() && this.getActive()) {\n      this.handlePointerAtPixel_(this.lastPixel_, map);\n    }\n    listen(feature, EventType.CHANGE,\n      this.handleFeatureChange_, this);\n  }\n\n  /**\n   * @param {import(\"../MapBrowserPointerEvent.js\").default} evt Map browser event\n   * @private\n   */\n  willModifyFeatures_(evt) {\n    if (!this.modified_) {\n      this.modified_ = true;\n      this.dispatchEvent(new ModifyEvent(\n        ModifyEventType.MODIFYSTART, this.features_, evt));\n    }\n  }\n\n  /**\n   * @param {Feature} feature Feature.\n   * @private\n   */\n  removeFeature_(feature) {\n    this.removeFeatureSegmentData_(feature);\n    // Remove the vertex feature if the collection of canditate features\n    // is empty.\n    if (this.vertexFeature_ && this.features_.getLength() === 0) {\n      /** @type {VectorSource} */ (this.overlay_.getSource()).removeFeature(this.vertexFeature_);\n      this.vertexFeature_ = null;\n    }\n    unlisten(feature, EventType.CHANGE,\n      this.handleFeatureChange_, this);\n  }\n\n  /**\n   * @param {Feature} feature Feature.\n   * @private\n   */\n  removeFeatureSegmentData_(feature) {\n    const rBush = this.rBush_;\n    const /** @type {Array<SegmentData>} */ nodesToRemove = [];\n    rBush.forEach(\n      /**\n       * @param {SegmentData} node RTree node.\n       */\n      function(node) {\n        if (feature === node.feature) {\n          nodesToRemove.push(node);\n        }\n      });\n    for (let i = nodesToRemove.length - 1; i >= 0; --i) {\n      rBush.remove(nodesToRemove[i]);\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  setActive(active) {\n    if (this.vertexFeature_ && !active) {\n      /** @type {VectorSource} */ (this.overlay_.getSource()).removeFeature(this.vertexFeature_);\n      this.vertexFeature_ = null;\n    }\n    super.setActive(active);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  setMap(map) {\n    this.overlay_.setMap(map);\n    super.setMap(map);\n  }\n\n  /**\n   * Get the overlay layer that this interaction renders sketch features to.\n   * @return {VectorLayer} Overlay layer.\n   * @api\n   */\n  getOverlay() {\n    return this.overlay_;\n  }\n\n  /**\n   * @param {import(\"../source/Vector.js\").VectorSourceEvent} event Event.\n   * @private\n   */\n  handleSourceAdd_(event) {\n    if (event.feature) {\n      this.features_.push(event.feature);\n    }\n  }\n\n  /**\n   * @param {import(\"../source/Vector.js\").VectorSourceEvent} event Event.\n   * @private\n   */\n  handleSourceRemove_(event) {\n    if (event.feature) {\n      this.features_.remove(event.feature);\n    }\n  }\n\n  /**\n   * @param {import(\"../Collection.js\").CollectionEvent} evt Event.\n   * @private\n   */\n  handleFeatureAdd_(evt) {\n    this.addFeature_(/** @type {Feature} */ (evt.element));\n  }\n\n  /**\n   * @param {import(\"../events/Event.js\").default} evt Event.\n   * @private\n   */\n  handleFeatureChange_(evt) {\n    if (!this.changingFeature_) {\n      const feature = /** @type {Feature} */ (evt.target);\n      this.removeFeature_(feature);\n      this.addFeature_(feature);\n    }\n  }\n\n  /**\n   * @param {import(\"../Collection.js\").CollectionEvent} evt Event.\n   * @private\n   */\n  handleFeatureRemove_(evt) {\n    const feature = /** @type {Feature} */ (evt.element);\n    this.removeFeature_(feature);\n  }\n\n  /**\n   * @param {Feature} feature Feature\n   * @param {Point} geometry Geometry.\n   * @private\n   */\n  writePointGeometry_(feature, geometry) {\n    const coordinates = geometry.getCoordinates();\n    const segmentData = /** @type {SegmentData} */ ({\n      feature: feature,\n      geometry: geometry,\n      segment: [coordinates, coordinates]\n    });\n    this.rBush_.insert(geometry.getExtent(), segmentData);\n  }\n\n  /**\n   * @param {Feature} feature Feature\n   * @param {import(\"../geom/MultiPoint.js\").default} geometry Geometry.\n   * @private\n   */\n  writeMultiPointGeometry_(feature, geometry) {\n    const points = geometry.getCoordinates();\n    for (let i = 0, ii = points.length; i < ii; ++i) {\n      const coordinates = points[i];\n      const segmentData = /** @type {SegmentData} */ ({\n        feature: feature,\n        geometry: geometry,\n        depth: [i],\n        index: i,\n        segment: [coordinates, coordinates]\n      });\n      this.rBush_.insert(geometry.getExtent(), segmentData);\n    }\n  }\n\n  /**\n   * @param {Feature} feature Feature\n   * @param {import(\"../geom/LineString.js\").default} geometry Geometry.\n   * @private\n   */\n  writeLineStringGeometry_(feature, geometry) {\n    const coordinates = geometry.getCoordinates();\n    for (let i = 0, ii = coordinates.length - 1; i < ii; ++i) {\n      const segment = coordinates.slice(i, i + 2);\n      const segmentData = /** @type {SegmentData} */ ({\n        feature: feature,\n        geometry: geometry,\n        index: i,\n        segment: segment\n      });\n      this.rBush_.insert(boundingExtent(segment), segmentData);\n    }\n  }\n\n  /**\n   * @param {Feature} feature Feature\n   * @param {import(\"../geom/MultiLineString.js\").default} geometry Geometry.\n   * @private\n   */\n  writeMultiLineStringGeometry_(feature, geometry) {\n    const lines = geometry.getCoordinates();\n    for (let j = 0, jj = lines.length; j < jj; ++j) {\n      const coordinates = lines[j];\n      for (let i = 0, ii = coordinates.length - 1; i < ii; ++i) {\n        const segment = coordinates.slice(i, i + 2);\n        const segmentData = /** @type {SegmentData} */ ({\n          feature: feature,\n          geometry: geometry,\n          depth: [j],\n          index: i,\n          segment: segment\n        });\n        this.rBush_.insert(boundingExtent(segment), segmentData);\n      }\n    }\n  }\n\n  /**\n   * @param {Feature} feature Feature\n   * @param {import(\"../geom/Polygon.js\").default} geometry Geometry.\n   * @private\n   */\n  writePolygonGeometry_(feature, geometry) {\n    const rings = geometry.getCoordinates();\n    for (let j = 0, jj = rings.length; j < jj; ++j) {\n      const coordinates = rings[j];\n      for (let i = 0, ii = coordinates.length - 1; i < ii; ++i) {\n        const segment = coordinates.slice(i, i + 2);\n        const segmentData = /** @type {SegmentData} */ ({\n          feature: feature,\n          geometry: geometry,\n          depth: [j],\n          index: i,\n          segment: segment\n        });\n        this.rBush_.insert(boundingExtent(segment), segmentData);\n      }\n    }\n  }\n\n  /**\n   * @param {Feature} feature Feature\n   * @param {import(\"../geom/MultiPolygon.js\").default} geometry Geometry.\n   * @private\n   */\n  writeMultiPolygonGeometry_(feature, geometry) {\n    const polygons = geometry.getCoordinates();\n    for (let k = 0, kk = polygons.length; k < kk; ++k) {\n      const rings = polygons[k];\n      for (let j = 0, jj = rings.length; j < jj; ++j) {\n        const coordinates = rings[j];\n        for (let i = 0, ii = coordinates.length - 1; i < ii; ++i) {\n          const segment = coordinates.slice(i, i + 2);\n          const segmentData = /** @type {SegmentData} */ ({\n            feature: feature,\n            geometry: geometry,\n            depth: [j, k],\n            index: i,\n            segment: segment\n          });\n          this.rBush_.insert(boundingExtent(segment), segmentData);\n        }\n      }\n    }\n  }\n\n  /**\n   * We convert a circle into two segments.  The segment at index\n   * {@link CIRCLE_CENTER_INDEX} is the\n   * circle's center (a point).  The segment at index\n   * {@link CIRCLE_CIRCUMFERENCE_INDEX} is\n   * the circumference, and is not a line segment.\n   *\n   * @param {Feature} feature Feature.\n   * @param {import(\"../geom/Circle.js\").default} geometry Geometry.\n   * @private\n   */\n  writeCircleGeometry_(feature, geometry) {\n    const coordinates = geometry.getCenter();\n    const centerSegmentData = /** @type {SegmentData} */ ({\n      feature: feature,\n      geometry: geometry,\n      index: CIRCLE_CENTER_INDEX,\n      segment: [coordinates, coordinates]\n    });\n    const circumferenceSegmentData = /** @type {SegmentData} */ ({\n      feature: feature,\n      geometry: geometry,\n      index: CIRCLE_CIRCUMFERENCE_INDEX,\n      segment: [coordinates, coordinates]\n    });\n    const featureSegments = [centerSegmentData, circumferenceSegmentData];\n    centerSegmentData.featureSegments = circumferenceSegmentData.featureSegments = featureSegments;\n    this.rBush_.insert(createOrUpdateFromCoordinate(coordinates), centerSegmentData);\n    this.rBush_.insert(geometry.getExtent(), circumferenceSegmentData);\n  }\n\n  /**\n   * @param {Feature} feature Feature\n   * @param {import(\"../geom/GeometryCollection.js\").default} geometry Geometry.\n   * @private\n   */\n  writeGeometryCollectionGeometry_(feature, geometry) {\n    const geometries = geometry.getGeometriesArray();\n    for (let i = 0; i < geometries.length; ++i) {\n      this.SEGMENT_WRITERS_[geometries[i].getType()].call(this, feature, geometries[i]);\n    }\n  }\n\n  /**\n   * @param {import(\"../coordinate.js\").Coordinate} coordinates Coordinates.\n   * @return {Feature} Vertex feature.\n   * @private\n   */\n  createOrUpdateVertexFeature_(coordinates) {\n    let vertexFeature = this.vertexFeature_;\n    if (!vertexFeature) {\n      vertexFeature = new Feature(new Point(coordinates));\n      this.vertexFeature_ = vertexFeature;\n      /** @type {VectorSource} */ (this.overlay_.getSource()).addFeature(vertexFeature);\n    } else {\n      const geometry = /** @type {Point} */ (vertexFeature.getGeometry());\n      geometry.setCoordinates(coordinates);\n    }\n    return vertexFeature;\n  }\n\n  /**\n   * Handles the {@link module:ol/MapBrowserEvent map browser event} and may modify the geometry.\n   * @override\n   */\n  handleEvent(mapBrowserEvent) {\n    if (!(/** @type {import(\"../MapBrowserPointerEvent.js\").default} */ (mapBrowserEvent).pointerEvent)) {\n      return true;\n    }\n    this.lastPointerEvent_ = mapBrowserEvent;\n\n    let handled;\n    if (!mapBrowserEvent.map.getView().getInteracting() &&\n        mapBrowserEvent.type == MapBrowserEventType.POINTERMOVE &&\n        !this.handlingDownUpSequence) {\n      this.handlePointerMove_(mapBrowserEvent);\n    }\n    if (this.vertexFeature_ && this.deleteCondition_(mapBrowserEvent)) {\n      if (mapBrowserEvent.type != MapBrowserEventType.SINGLECLICK || !this.ignoreNextSingleClick_) {\n        handled = this.removePoint();\n      } else {\n        handled = true;\n      }\n    }\n\n    if (mapBrowserEvent.type == MapBrowserEventType.SINGLECLICK) {\n      this.ignoreNextSingleClick_ = false;\n    }\n\n    return super.handleEvent(mapBrowserEvent) && !handled;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  handleDragEvent(evt) {\n    this.ignoreNextSingleClick_ = false;\n    this.willModifyFeatures_(evt);\n\n    const vertex = evt.coordinate;\n    for (let i = 0, ii = this.dragSegments_.length; i < ii; ++i) {\n      const dragSegment = this.dragSegments_[i];\n      const segmentData = dragSegment[0];\n      const depth = segmentData.depth;\n      const geometry = segmentData.geometry;\n      let coordinates;\n      const segment = segmentData.segment;\n      const index = dragSegment[1];\n\n      while (vertex.length < geometry.getStride()) {\n        vertex.push(segment[index][vertex.length]);\n      }\n\n      switch (geometry.getType()) {\n        case GeometryType.POINT:\n          coordinates = vertex;\n          segment[0] = segment[1] = vertex;\n          break;\n        case GeometryType.MULTI_POINT:\n          coordinates = geometry.getCoordinates();\n          coordinates[segmentData.index] = vertex;\n          segment[0] = segment[1] = vertex;\n          break;\n        case GeometryType.LINE_STRING:\n          coordinates = geometry.getCoordinates();\n          coordinates[segmentData.index + index] = vertex;\n          segment[index] = vertex;\n          break;\n        case GeometryType.MULTI_LINE_STRING:\n          coordinates = geometry.getCoordinates();\n          coordinates[depth[0]][segmentData.index + index] = vertex;\n          segment[index] = vertex;\n          break;\n        case GeometryType.POLYGON:\n          coordinates = geometry.getCoordinates();\n          coordinates[depth[0]][segmentData.index + index] = vertex;\n          segment[index] = vertex;\n          break;\n        case GeometryType.MULTI_POLYGON:\n          coordinates = geometry.getCoordinates();\n          coordinates[depth[1]][depth[0]][segmentData.index + index] = vertex;\n          segment[index] = vertex;\n          break;\n        case GeometryType.CIRCLE:\n          segment[0] = segment[1] = vertex;\n          if (segmentData.index === CIRCLE_CENTER_INDEX) {\n            this.changingFeature_ = true;\n            geometry.setCenter(vertex);\n            this.changingFeature_ = false;\n          } else { // We're dragging the circle's circumference:\n            this.changingFeature_ = true;\n            geometry.setRadius(coordinateDistance(geometry.getCenter(), vertex));\n            this.changingFeature_ = false;\n          }\n          break;\n        default:\n          // pass\n      }\n\n      if (coordinates) {\n        this.setGeometryCoordinates_(geometry, coordinates);\n      }\n    }\n    this.createOrUpdateVertexFeature_(vertex);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  handleDownEvent(evt) {\n    if (!this.condition_(evt)) {\n      return false;\n    }\n    this.handlePointerAtPixel_(evt.pixel, evt.map);\n    const pixelCoordinate = evt.map.getCoordinateFromPixel(evt.pixel);\n    this.dragSegments_.length = 0;\n    this.modified_ = false;\n    const vertexFeature = this.vertexFeature_;\n    if (vertexFeature) {\n      const insertVertices = [];\n      const geometry = /** @type {Point} */ (vertexFeature.getGeometry());\n      const vertex = geometry.getCoordinates();\n      const vertexExtent = boundingExtent([vertex]);\n      const segmentDataMatches = this.rBush_.getInExtent(vertexExtent);\n      const componentSegments = {};\n      segmentDataMatches.sort(compareIndexes);\n      for (let i = 0, ii = segmentDataMatches.length; i < ii; ++i) {\n        const segmentDataMatch = segmentDataMatches[i];\n        const segment = segmentDataMatch.segment;\n        let uid = getUid(segmentDataMatch.feature);\n        const depth = segmentDataMatch.depth;\n        if (depth) {\n          uid += '-' + depth.join('-'); // separate feature components\n        }\n        if (!componentSegments[uid]) {\n          componentSegments[uid] = new Array(2);\n        }\n        if (segmentDataMatch.geometry.getType() === GeometryType.CIRCLE &&\n        segmentDataMatch.index === CIRCLE_CIRCUMFERENCE_INDEX) {\n\n          const closestVertex = closestOnSegmentData(pixelCoordinate, segmentDataMatch);\n          if (coordinatesEqual(closestVertex, vertex) && !componentSegments[uid][0]) {\n            this.dragSegments_.push([segmentDataMatch, 0]);\n            componentSegments[uid][0] = segmentDataMatch;\n          }\n        } else if (coordinatesEqual(segment[0], vertex) &&\n            !componentSegments[uid][0]) {\n          this.dragSegments_.push([segmentDataMatch, 0]);\n          componentSegments[uid][0] = segmentDataMatch;\n        } else if (coordinatesEqual(segment[1], vertex) &&\n            !componentSegments[uid][1]) {\n\n          // prevent dragging closed linestrings by the connecting node\n          if ((segmentDataMatch.geometry.getType() ===\n              GeometryType.LINE_STRING ||\n              segmentDataMatch.geometry.getType() ===\n              GeometryType.MULTI_LINE_STRING) &&\n              componentSegments[uid][0] &&\n              componentSegments[uid][0].index === 0) {\n            continue;\n          }\n\n          this.dragSegments_.push([segmentDataMatch, 1]);\n          componentSegments[uid][1] = segmentDataMatch;\n        } else if (this.insertVertexCondition_(evt) && getUid(segment) in this.vertexSegments_ &&\n            (!componentSegments[uid][0] && !componentSegments[uid][1])) {\n          insertVertices.push([segmentDataMatch, vertex]);\n        }\n      }\n      if (insertVertices.length) {\n        this.willModifyFeatures_(evt);\n      }\n      for (let j = insertVertices.length - 1; j >= 0; --j) {\n        this.insertVertex_.apply(this, insertVertices[j]);\n      }\n    }\n    return !!this.vertexFeature_;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  handleUpEvent(evt) {\n    for (let i = this.dragSegments_.length - 1; i >= 0; --i) {\n      const segmentData = this.dragSegments_[i][0];\n      const geometry = segmentData.geometry;\n      if (geometry.getType() === GeometryType.CIRCLE) {\n        // Update a circle object in the R* bush:\n        const coordinates = geometry.getCenter();\n        const centerSegmentData = segmentData.featureSegments[0];\n        const circumferenceSegmentData = segmentData.featureSegments[1];\n        centerSegmentData.segment[0] = centerSegmentData.segment[1] = coordinates;\n        circumferenceSegmentData.segment[0] = circumferenceSegmentData.segment[1] = coordinates;\n        this.rBush_.update(createOrUpdateFromCoordinate(coordinates), centerSegmentData);\n        this.rBush_.update(geometry.getExtent(), circumferenceSegmentData);\n      } else {\n        this.rBush_.update(boundingExtent(segmentData.segment), segmentData);\n      }\n    }\n    if (this.modified_) {\n      this.dispatchEvent(new ModifyEvent(ModifyEventType.MODIFYEND, this.features_, evt));\n      this.modified_ = false;\n    }\n    return false;\n  }\n\n  /**\n   * @param {import(\"../MapBrowserEvent.js\").default} evt Event.\n   * @private\n   */\n  handlePointerMove_(evt) {\n    this.lastPixel_ = evt.pixel;\n    this.handlePointerAtPixel_(evt.pixel, evt.map);\n  }\n\n  /**\n   * @param {import(\"../pixel.js\").Pixel} pixel Pixel\n   * @param {import(\"../PluggableMap.js\").default} map Map.\n   * @private\n   */\n  handlePointerAtPixel_(pixel, map) {\n    const pixelCoordinate = map.getCoordinateFromPixel(pixel);\n    const sortByDistance = function(a, b) {\n      return pointDistanceToSegmentDataSquared(pixelCoordinate, a) -\n          pointDistanceToSegmentDataSquared(pixelCoordinate, b);\n    };\n\n    const box = buffer(createOrUpdateFromCoordinate(pixelCoordinate),\n      map.getView().getResolution() * this.pixelTolerance_);\n\n    const rBush = this.rBush_;\n    const nodes = rBush.getInExtent(box);\n    if (nodes.length > 0) {\n      nodes.sort(sortByDistance);\n      const node = nodes[0];\n      const closestSegment = node.segment;\n      let vertex = closestOnSegmentData(pixelCoordinate, node);\n      const vertexPixel = map.getPixelFromCoordinate(vertex);\n      let dist = coordinateDistance(pixel, vertexPixel);\n      if (dist <= this.pixelTolerance_) {\n        /** @type {Object<string, boolean>} */\n        const vertexSegments = {};\n\n        if (node.geometry.getType() === GeometryType.CIRCLE &&\n        node.index === CIRCLE_CIRCUMFERENCE_INDEX) {\n\n          this.snappedToVertex_ = true;\n          this.createOrUpdateVertexFeature_(vertex);\n        } else {\n          const pixel1 = map.getPixelFromCoordinate(closestSegment[0]);\n          const pixel2 = map.getPixelFromCoordinate(closestSegment[1]);\n          const squaredDist1 = squaredCoordinateDistance(vertexPixel, pixel1);\n          const squaredDist2 = squaredCoordinateDistance(vertexPixel, pixel2);\n          dist = Math.sqrt(Math.min(squaredDist1, squaredDist2));\n          this.snappedToVertex_ = dist <= this.pixelTolerance_;\n          if (this.snappedToVertex_) {\n            vertex = squaredDist1 > squaredDist2 ? closestSegment[1] : closestSegment[0];\n          }\n          this.createOrUpdateVertexFeature_(vertex);\n          for (let i = 1, ii = nodes.length; i < ii; ++i) {\n            const segment = nodes[i].segment;\n            if ((coordinatesEqual(closestSegment[0], segment[0]) &&\n                coordinatesEqual(closestSegment[1], segment[1]) ||\n                (coordinatesEqual(closestSegment[0], segment[1]) &&\n                coordinatesEqual(closestSegment[1], segment[0])))) {\n              vertexSegments[getUid(segment)] = true;\n            } else {\n              break;\n            }\n          }\n        }\n\n        vertexSegments[getUid(closestSegment)] = true;\n        this.vertexSegments_ = vertexSegments;\n        return;\n      }\n    }\n    if (this.vertexFeature_) {\n      /** @type {VectorSource} */ (this.overlay_.getSource()).removeFeature(this.vertexFeature_);\n      this.vertexFeature_ = null;\n    }\n  }\n\n  /**\n   * @param {SegmentData} segmentData Segment data.\n   * @param {import(\"../coordinate.js\").Coordinate} vertex Vertex.\n   * @private\n   */\n  insertVertex_(segmentData, vertex) {\n    const segment = segmentData.segment;\n    const feature = segmentData.feature;\n    const geometry = segmentData.geometry;\n    const depth = segmentData.depth;\n    const index = /** @type {number} */ (segmentData.index);\n    let coordinates;\n\n    while (vertex.length < geometry.getStride()) {\n      vertex.push(0);\n    }\n\n    switch (geometry.getType()) {\n      case GeometryType.MULTI_LINE_STRING:\n        coordinates = geometry.getCoordinates();\n        coordinates[depth[0]].splice(index + 1, 0, vertex);\n        break;\n      case GeometryType.POLYGON:\n        coordinates = geometry.getCoordinates();\n        coordinates[depth[0]].splice(index + 1, 0, vertex);\n        break;\n      case GeometryType.MULTI_POLYGON:\n        coordinates = geometry.getCoordinates();\n        coordinates[depth[1]][depth[0]].splice(index + 1, 0, vertex);\n        break;\n      case GeometryType.LINE_STRING:\n        coordinates = geometry.getCoordinates();\n        coordinates.splice(index + 1, 0, vertex);\n        break;\n      default:\n        return;\n    }\n\n    this.setGeometryCoordinates_(geometry, coordinates);\n    const rTree = this.rBush_;\n    rTree.remove(segmentData);\n    this.updateSegmentIndices_(geometry, index, depth, 1);\n    const newSegmentData = /** @type {SegmentData} */ ({\n      segment: [segment[0], vertex],\n      feature: feature,\n      geometry: geometry,\n      depth: depth,\n      index: index\n    });\n    rTree.insert(boundingExtent(newSegmentData.segment),\n      newSegmentData);\n    this.dragSegments_.push([newSegmentData, 1]);\n\n    const newSegmentData2 = /** @type {SegmentData} */ ({\n      segment: [vertex, segment[1]],\n      feature: feature,\n      geometry: geometry,\n      depth: depth,\n      index: index + 1\n    });\n    rTree.insert(boundingExtent(newSegmentData2.segment), newSegmentData2);\n    this.dragSegments_.push([newSegmentData2, 0]);\n    this.ignoreNextSingleClick_ = true;\n  }\n\n  /**\n   * Removes the vertex currently being pointed.\n   * @return {boolean} True when a vertex was removed.\n   * @api\n   */\n  removePoint() {\n    if (this.lastPointerEvent_ && this.lastPointerEvent_.type != MapBrowserEventType.POINTERDRAG) {\n      const evt = this.lastPointerEvent_;\n      this.willModifyFeatures_(evt);\n      this.removeVertex_();\n      this.dispatchEvent(new ModifyEvent(ModifyEventType.MODIFYEND, this.features_, evt));\n      this.modified_ = false;\n      return true;\n    }\n    return false;\n  }\n\n  /**\n   * Removes a vertex from all matching features.\n   * @return {boolean} True when a vertex was removed.\n   * @private\n   */\n  removeVertex_() {\n    const dragSegments = this.dragSegments_;\n    const segmentsByFeature = {};\n    let deleted = false;\n    let component, coordinates, dragSegment, geometry, i, index, left;\n    let newIndex, right, segmentData, uid;\n    for (i = dragSegments.length - 1; i >= 0; --i) {\n      dragSegment = dragSegments[i];\n      segmentData = dragSegment[0];\n      uid = getUid(segmentData.feature);\n      if (segmentData.depth) {\n        // separate feature components\n        uid += '-' + segmentData.depth.join('-');\n      }\n      if (!(uid in segmentsByFeature)) {\n        segmentsByFeature[uid] = {};\n      }\n      if (dragSegment[1] === 0) {\n        segmentsByFeature[uid].right = segmentData;\n        segmentsByFeature[uid].index = segmentData.index;\n      } else if (dragSegment[1] == 1) {\n        segmentsByFeature[uid].left = segmentData;\n        segmentsByFeature[uid].index = segmentData.index + 1;\n      }\n\n    }\n    for (uid in segmentsByFeature) {\n      right = segmentsByFeature[uid].right;\n      left = segmentsByFeature[uid].left;\n      index = segmentsByFeature[uid].index;\n      newIndex = index - 1;\n      if (left !== undefined) {\n        segmentData = left;\n      } else {\n        segmentData = right;\n      }\n      if (newIndex < 0) {\n        newIndex = 0;\n      }\n      geometry = segmentData.geometry;\n      coordinates = geometry.getCoordinates();\n      component = coordinates;\n      deleted = false;\n      switch (geometry.getType()) {\n        case GeometryType.MULTI_LINE_STRING:\n          if (coordinates[segmentData.depth[0]].length > 2) {\n            coordinates[segmentData.depth[0]].splice(index, 1);\n            deleted = true;\n          }\n          break;\n        case GeometryType.LINE_STRING:\n          if (coordinates.length > 2) {\n            coordinates.splice(index, 1);\n            deleted = true;\n          }\n          break;\n        case GeometryType.MULTI_POLYGON:\n          component = component[segmentData.depth[1]];\n          /* falls through */\n        case GeometryType.POLYGON:\n          component = component[segmentData.depth[0]];\n          if (component.length > 4) {\n            if (index == component.length - 1) {\n              index = 0;\n            }\n            component.splice(index, 1);\n            deleted = true;\n            if (index === 0) {\n              // close the ring again\n              component.pop();\n              component.push(component[0]);\n              newIndex = component.length - 1;\n            }\n          }\n          break;\n        default:\n          // pass\n      }\n\n      if (deleted) {\n        this.setGeometryCoordinates_(geometry, coordinates);\n        const segments = [];\n        if (left !== undefined) {\n          this.rBush_.remove(left);\n          segments.push(left.segment[0]);\n        }\n        if (right !== undefined) {\n          this.rBush_.remove(right);\n          segments.push(right.segment[1]);\n        }\n        if (left !== undefined && right !== undefined) {\n          const newSegmentData = /** @type {SegmentData} */ ({\n            depth: segmentData.depth,\n            feature: segmentData.feature,\n            geometry: segmentData.geometry,\n            index: newIndex,\n            segment: segments\n          });\n          this.rBush_.insert(boundingExtent(newSegmentData.segment),\n            newSegmentData);\n        }\n        this.updateSegmentIndices_(geometry, index, segmentData.depth, -1);\n        if (this.vertexFeature_) {\n          /** @type {VectorSource} */ (this.overlay_.getSource()).removeFeature(this.vertexFeature_);\n          this.vertexFeature_ = null;\n        }\n        dragSegments.length = 0;\n      }\n\n    }\n    return deleted;\n  }\n\n  /**\n   * @param {import(\"../geom/SimpleGeometry.js\").default} geometry Geometry.\n   * @param {Array} coordinates Coordinates.\n   * @private\n   */\n  setGeometryCoordinates_(geometry, coordinates) {\n    this.changingFeature_ = true;\n    geometry.setCoordinates(coordinates);\n    this.changingFeature_ = false;\n  }\n\n  /**\n   * @param {import(\"../geom/SimpleGeometry.js\").default} geometry Geometry.\n   * @param {number} index Index.\n   * @param {Array<number>|undefined} depth Depth.\n   * @param {number} delta Delta (1 or -1).\n   * @private\n   */\n  updateSegmentIndices_(geometry, index, depth, delta) {\n    this.rBush_.forEachInExtent(geometry.getExtent(), function(segmentDataMatch) {\n      if (segmentDataMatch.geometry === geometry &&\n          (depth === undefined || segmentDataMatch.depth === undefined ||\n          equals(segmentDataMatch.depth, depth)) &&\n          segmentDataMatch.index > index) {\n        segmentDataMatch.index += delta;\n      }\n    });\n  }\n}\n\n\n/**\n * @param {SegmentData} a The first segment data.\n * @param {SegmentData} b The second segment data.\n * @return {number} The difference in indexes.\n */\nfunction compareIndexes(a, b) {\n  return a.index - b.index;\n}\n\n\n/**\n * Returns the distance from a point to a line segment.\n *\n * @param {import(\"../coordinate.js\").Coordinate} pointCoordinates The coordinates of the point from\n *        which to calculate the distance.\n * @param {SegmentData} segmentData The object describing the line\n *        segment we are calculating the distance to.\n * @return {number} The square of the distance between a point and a line segment.\n */\nfunction pointDistanceToSegmentDataSquared(pointCoordinates, segmentData) {\n  const geometry = segmentData.geometry;\n\n  if (geometry.getType() === GeometryType.CIRCLE) {\n    const circleGeometry = /** @type {import(\"../geom/Circle.js\").default} */ (geometry);\n\n    if (segmentData.index === CIRCLE_CIRCUMFERENCE_INDEX) {\n      const distanceToCenterSquared =\n            squaredCoordinateDistance(circleGeometry.getCenter(), pointCoordinates);\n      const distanceToCircumference =\n            Math.sqrt(distanceToCenterSquared) - circleGeometry.getRadius();\n      return distanceToCircumference * distanceToCircumference;\n    }\n  }\n  return squaredDistanceToSegment(pointCoordinates, segmentData.segment);\n}\n\n/**\n * Returns the point closest to a given line segment.\n *\n * @param {import(\"../coordinate.js\").Coordinate} pointCoordinates The point to which a closest point\n *        should be found.\n * @param {SegmentData} segmentData The object describing the line\n *        segment which should contain the closest point.\n * @return {import(\"../coordinate.js\").Coordinate} The point closest to the specified line segment.\n */\nfunction closestOnSegmentData(pointCoordinates, segmentData) {\n  const geometry = segmentData.geometry;\n\n  if (geometry.getType() === GeometryType.CIRCLE &&\n  segmentData.index === CIRCLE_CIRCUMFERENCE_INDEX) {\n    return geometry.getClosestPoint(pointCoordinates);\n  }\n  return closestOnSegment(pointCoordinates, segmentData.segment);\n}\n\n\n/**\n * @return {import(\"../style/Style.js\").StyleFunction} Styles.\n */\nfunction getDefaultStyleFunction() {\n  const style = createEditingStyle();\n  return function(feature, resolution) {\n    return style[GeometryType.POINT];\n  };\n}\n\n\nexport default Modify;\n"]},"metadata":{},"sourceType":"module"}