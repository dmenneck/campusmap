{"ast":null,"code":"/**\n * @module ol/PluggableMap\n */\nimport { getUid, inherits } from './util.js';\nimport Collection from './Collection.js';\nimport CollectionEventType from './CollectionEventType.js';\nimport MapBrowserEvent from './MapBrowserEvent.js';\nimport MapBrowserEventHandler from './MapBrowserEventHandler.js';\nimport MapBrowserEventType from './MapBrowserEventType.js';\nimport MapEvent from './MapEvent.js';\nimport MapEventType from './MapEventType.js';\nimport MapProperty from './MapProperty.js';\nimport BaseObject, { getChangeEventType } from './Object.js';\nimport ObjectEventType from './ObjectEventType.js';\nimport TileQueue from './TileQueue.js';\nimport View from './View.js';\nimport ViewHint from './ViewHint.js';\nimport { assert } from './asserts.js';\nimport { removeNode } from './dom.js';\nimport { listen, unlistenByKey, unlisten } from './events.js';\nimport { stopPropagation } from './events/Event.js';\nimport EventType from './events/EventType.js';\nimport { createEmpty, clone, createOrUpdateEmpty, equals, getForViewAndSize, isEmpty } from './extent.js';\nimport { TRUE } from './functions.js';\nimport { DEVICE_PIXEL_RATIO, TOUCH } from './has.js';\nimport LayerGroup from './layer/Group.js';\nimport { hasArea } from './size.js';\nimport { DROP } from './structs/PriorityQueue.js';\nimport { create as createTransform, apply as applyTransform } from './transform.js';\n/**\n * State of the current frame. Only `pixelRatio`, `time` and `viewState` should\n * be used in applications.\n * @typedef {Object} FrameState\n * @property {number} pixelRatio The pixel ratio of the frame.\n * @property {number} time The time when rendering of the frame was requested.\n * @property {module:ol/View~State} viewState The state of the current view.\n * @property {boolean} animate\n * @property {module:ol/transform~Transform} coordinateToPixelTransform\n * @property {null|module:ol/extent~Extent} extent\n * @property {module:ol/coordinate~Coordinate} focus\n * @property {number} index\n * @property {Object.<number, module:ol/layer/Layer~State>} layerStates\n * @property {Array.<module:ol/layer/Layer~State>} layerStatesArray\n * @property {module:ol/transform~Transform} pixelToCoordinateTransform\n * @property {Array.<module:ol/PluggableMap~PostRenderFunction>} postRenderFunctions\n * @property {module:ol/size~Size} size\n * @property {!Object.<string, boolean>} skippedFeatureUids\n * @property {module:ol/TileQueue} tileQueue\n * @property {Object.<string, Object.<string, module:ol/TileRange>>} usedTiles\n * @property {Array.<number>} viewHints\n * @property {!Object.<string, Object.<string, boolean>>} wantedTiles\n */\n\n/**\n * @typedef {function(module:ol/PluggableMap, ?module:ol/PluggableMap~FrameState): boolean} PostRenderFunction\n */\n\n/**\n * @typedef {Object} AtPixelOptions\n * @property {((function(module:ol/layer/Layer): boolean)|undefined)} layerFilter Layer filter\n * function. The filter function will receive one argument, the\n * {@link module:ol/layer/Layer layer-candidate} and it should return a boolean value.\n * Only layers which are visible and for which this function returns `true`\n * will be tested for features. By default, all visible layers will be tested.\n * @property {number} [hitTolerance=0] Hit-detection tolerance in pixels. Pixels\n * inside the radius around the given position will be checked for features. This only\n * works for the canvas renderer and not for WebGL.\n */\n\n/**\n * @typedef {Object} MapOptionsInternal\n * @property {module:ol/Collection.<module:ol/control/Control>} [controls]\n * @property {module:ol/Collection.<module:ol/interaction/Interaction>} [interactions]\n * @property {Element|Document} keyboardEventTarget\n * @property {module:ol/Collection.<module:ol/Overlay>} overlays\n * @property {Object.<string, *>} values\n */\n\n/**\n * Object literal with config options for the map.\n * @typedef {Object} MapOptions\n * @property {module:ol/Collection.<module:ol/control/Control>|Array.<module:ol/control/Control>} [controls]\n * Controls initially added to the map. If not specified,\n * {@link module:ol/control/util~defaults} is used.\n * @property {number} [pixelRatio=window.devicePixelRatio] The ratio between\n * physical pixels and device-independent pixels (dips) on the device.\n * @property {module:ol/Collection.<module:ol/interaction/Interaction>|Array.<module:ol/interaction/Interaction>} [interactions]\n * Interactions that are initially added to the map. If not specified,\n * {@link module:ol/interaction~defaults} is used.\n * @property {Element|Document|string} [keyboardEventTarget] The element to\n * listen to keyboard events on. This determines when the `KeyboardPan` and\n * `KeyboardZoom` interactions trigger. For example, if this option is set to\n * `document` the keyboard interactions will always trigger. If this option is\n * not specified, the element the library listens to keyboard events on is the\n * map target (i.e. the user-provided div for the map). If this is not\n * `document`, the target element needs to be focused for key events to be\n * emitted, requiring that the target element has a `tabindex` attribute.\n * @property {Array.<module:ol/layer/Base>|module:ol/Collection.<module:ol/layer/Base>} [layers]\n * Layers. If this is not defined, a map with no layers will be rendered. Note\n * that layers are rendered in the order supplied, so if you want, for example,\n * a vector layer to appear on top of a tile layer, it must come after the tile\n * layer.\n * @property {number} [maxTilesLoading=16] Maximum number tiles to load\n * simultaneously.\n * @property {boolean} [loadTilesWhileAnimating=false] When set to `true`, tiles\n * will be loaded during animations. This may improve the user experience, but\n * can also make animations stutter on devices with slow memory.\n * @property {boolean} [loadTilesWhileInteracting=false] When set to `true`,\n * tiles will be loaded while interacting with the map. This may improve the\n * user experience, but can also make map panning and zooming choppy on devices\n * with slow memory.\n * @property {number} [moveTolerance=1] The minimum distance in pixels the\n * cursor must move to be detected as a map move event instead of a click.\n * Increasing this value can make it easier to click on the map.\n * @property {module:ol/Collection.<module:ol/Overlay>|Array.<module:ol/Overlay>} [overlays]\n * Overlays initially added to the map. By default, no overlays are added.\n * @property {Element|string} [target] The container for the map, either the\n * element itself or the `id` of the element. If not specified at construction\n * time, {@link module:ol/Map~Map#setTarget} must be called for the map to be\n * rendered.\n * @property {module:ol/View} [view] The map's view.  No layer sources will be\n * fetched unless this is specified at construction time or through\n * {@link module:ol/Map~Map#setView}.\n */\n\n/**\n * @constructor\n * @extends {module:ol/Object}\n * @param {module:ol/PluggableMap~MapOptions} options Map options.\n * @fires module:ol/MapBrowserEvent~MapBrowserEvent\n * @fires module:ol/MapEvent~MapEvent\n * @fires module:ol/render/Event~RenderEvent#postcompose\n * @fires module:ol/render/Event~RenderEvent#precompose\n * @api\n */\n\nconst PluggableMap = function (options) {\n  BaseObject.call(this);\n  const optionsInternal = createOptionsInternal(options);\n  /**\n   * @type {number}\n   * @private\n   */\n\n  this.maxTilesLoading_ = options.maxTilesLoading !== undefined ? options.maxTilesLoading : 16;\n  /**\n   * @type {boolean}\n   * @private\n   */\n\n  this.loadTilesWhileAnimating_ = options.loadTilesWhileAnimating !== undefined ? options.loadTilesWhileAnimating : false;\n  /**\n   * @type {boolean}\n   * @private\n   */\n\n  this.loadTilesWhileInteracting_ = options.loadTilesWhileInteracting !== undefined ? options.loadTilesWhileInteracting : false;\n  /**\n   * @private\n   * @type {number}\n   */\n\n  this.pixelRatio_ = options.pixelRatio !== undefined ? options.pixelRatio : DEVICE_PIXEL_RATIO;\n  /**\n   * @private\n   * @type {number|undefined}\n   */\n\n  this.animationDelayKey_;\n  /**\n   * @private\n   */\n\n  this.animationDelay_ = function () {\n    this.animationDelayKey_ = undefined;\n    this.renderFrame_.call(this, Date.now());\n  }.bind(this);\n  /**\n   * @private\n   * @type {module:ol/transform~Transform}\n   */\n\n\n  this.coordinateToPixelTransform_ = createTransform();\n  /**\n   * @private\n   * @type {module:ol/transform~Transform}\n   */\n\n  this.pixelToCoordinateTransform_ = createTransform();\n  /**\n   * @private\n   * @type {number}\n   */\n\n  this.frameIndex_ = 0;\n  /**\n   * @private\n   * @type {?module:ol/PluggableMap~FrameState}\n   */\n\n  this.frameState_ = null;\n  /**\n   * The extent at the previous 'moveend' event.\n   * @private\n   * @type {module:ol/extent~Extent}\n   */\n\n  this.previousExtent_ = null;\n  /**\n   * @private\n   * @type {?module:ol/events~EventsKey}\n   */\n\n  this.viewPropertyListenerKey_ = null;\n  /**\n   * @private\n   * @type {?module:ol/events~EventsKey}\n   */\n\n  this.viewChangeListenerKey_ = null;\n  /**\n   * @private\n   * @type {Array.<module:ol/events~EventsKey>}\n   */\n\n  this.layerGroupPropertyListenerKeys_ = null;\n  /**\n   * @private\n   * @type {Element}\n   */\n\n  this.viewport_ = document.createElement('DIV');\n  this.viewport_.className = 'ol-viewport' + (TOUCH ? ' ol-touch' : '');\n  this.viewport_.style.position = 'relative';\n  this.viewport_.style.overflow = 'hidden';\n  this.viewport_.style.width = '100%';\n  this.viewport_.style.height = '100%'; // prevent page zoom on IE >= 10 browsers\n\n  this.viewport_.style.msTouchAction = 'none';\n  this.viewport_.style.touchAction = 'none';\n  /**\n   * @private\n   * @type {!Element}\n   */\n\n  this.overlayContainer_ = document.createElement('DIV');\n  this.overlayContainer_.className = 'ol-overlaycontainer';\n  this.viewport_.appendChild(this.overlayContainer_);\n  /**\n   * @private\n   * @type {!Element}\n   */\n\n  this.overlayContainerStopEvent_ = document.createElement('DIV');\n  this.overlayContainerStopEvent_.className = 'ol-overlaycontainer-stopevent';\n  const overlayEvents = [EventType.CLICK, EventType.DBLCLICK, EventType.MOUSEDOWN, EventType.TOUCHSTART, EventType.MSPOINTERDOWN, MapBrowserEventType.POINTERDOWN, EventType.MOUSEWHEEL, EventType.WHEEL];\n\n  for (let i = 0, ii = overlayEvents.length; i < ii; ++i) {\n    listen(this.overlayContainerStopEvent_, overlayEvents[i], stopPropagation);\n  }\n\n  this.viewport_.appendChild(this.overlayContainerStopEvent_);\n  /**\n   * @private\n   * @type {module:ol/MapBrowserEventHandler}\n   */\n\n  this.mapBrowserEventHandler_ = new MapBrowserEventHandler(this, options.moveTolerance);\n\n  for (const key in MapBrowserEventType) {\n    listen(this.mapBrowserEventHandler_, MapBrowserEventType[key], this.handleMapBrowserEvent, this);\n  }\n  /**\n   * @private\n   * @type {Element|Document}\n   */\n\n\n  this.keyboardEventTarget_ = optionsInternal.keyboardEventTarget;\n  /**\n   * @private\n   * @type {Array.<module:ol/events~EventsKey>}\n   */\n\n  this.keyHandlerKeys_ = null;\n  listen(this.viewport_, EventType.CONTEXTMENU, this.handleBrowserEvent, this);\n  listen(this.viewport_, EventType.WHEEL, this.handleBrowserEvent, this);\n  listen(this.viewport_, EventType.MOUSEWHEEL, this.handleBrowserEvent, this);\n  /**\n   * @type {module:ol/Collection.<module:ol/control/Control>}\n   * @protected\n   */\n\n  this.controls = optionsInternal.controls || new Collection();\n  /**\n   * @type {module:ol/Collection.<module:ol/interaction/Interaction>}\n   * @protected\n   */\n\n  this.interactions = optionsInternal.interactions || new Collection();\n  /**\n   * @type {module:ol/Collection.<module:ol/Overlay>}\n   * @private\n   */\n\n  this.overlays_ = optionsInternal.overlays;\n  /**\n   * A lookup of overlays by id.\n   * @private\n   * @type {Object.<string, module:ol/Overlay>}\n   */\n\n  this.overlayIdIndex_ = {};\n  /**\n   * @type {module:ol/renderer/Map}\n   * @private\n   */\n\n  this.renderer_ = this.createRenderer();\n  /**\n   * @type {function(Event)|undefined}\n   * @private\n   */\n\n  this.handleResize_;\n  /**\n   * @private\n   * @type {module:ol/coordinate~Coordinate}\n   */\n\n  this.focus_ = null;\n  /**\n   * @private\n   * @type {!Array.<module:ol/PluggableMap~PostRenderFunction>}\n   */\n\n  this.postRenderFunctions_ = [];\n  /**\n   * @private\n   * @type {module:ol/TileQueue}\n   */\n\n  this.tileQueue_ = new TileQueue(this.getTilePriority.bind(this), this.handleTileChange_.bind(this));\n  /**\n   * Uids of features to skip at rendering time.\n   * @type {Object.<string, boolean>}\n   * @private\n   */\n\n  this.skippedFeatureUids_ = {};\n  listen(this, getChangeEventType(MapProperty.LAYERGROUP), this.handleLayerGroupChanged_, this);\n  listen(this, getChangeEventType(MapProperty.VIEW), this.handleViewChanged_, this);\n  listen(this, getChangeEventType(MapProperty.SIZE), this.handleSizeChanged_, this);\n  listen(this, getChangeEventType(MapProperty.TARGET), this.handleTargetChanged_, this); // setProperties will trigger the rendering of the map if the map\n  // is \"defined\" already.\n\n  this.setProperties(optionsInternal.values);\n  this.controls.forEach(\n  /**\n   * @param {module:ol/control/Control} control Control.\n   * @this {module:ol/PluggableMap}\n   */\n  function (control) {\n    control.setMap(this);\n  }.bind(this));\n  listen(this.controls, CollectionEventType.ADD,\n  /**\n   * @param {module:ol/Collection~CollectionEvent} event CollectionEvent.\n   */\n  function (event) {\n    event.element.setMap(this);\n  }, this);\n  listen(this.controls, CollectionEventType.REMOVE,\n  /**\n   * @param {module:ol/Collection~CollectionEvent} event CollectionEvent.\n   */\n  function (event) {\n    event.element.setMap(null);\n  }, this);\n  this.interactions.forEach(\n  /**\n   * @param {module:ol/interaction/Interaction} interaction Interaction.\n   * @this {module:ol/PluggableMap}\n   */\n  function (interaction) {\n    interaction.setMap(this);\n  }.bind(this));\n  listen(this.interactions, CollectionEventType.ADD,\n  /**\n   * @param {module:ol/Collection~CollectionEvent} event CollectionEvent.\n   */\n  function (event) {\n    event.element.setMap(this);\n  }, this);\n  listen(this.interactions, CollectionEventType.REMOVE,\n  /**\n   * @param {module:ol/Collection~CollectionEvent} event CollectionEvent.\n   */\n  function (event) {\n    event.element.setMap(null);\n  }, this);\n  this.overlays_.forEach(this.addOverlayInternal_.bind(this));\n  listen(this.overlays_, CollectionEventType.ADD,\n  /**\n   * @param {module:ol/Collection~CollectionEvent} event CollectionEvent.\n   */\n  function (event) {\n    this.addOverlayInternal_(\n    /** @type {module:ol/Overlay} */\n    event.element);\n  }, this);\n  listen(this.overlays_, CollectionEventType.REMOVE,\n  /**\n   * @param {module:ol/Collection~CollectionEvent} event CollectionEvent.\n   */\n  function (event) {\n    const overlay =\n    /** @type {module:ol/Overlay} */\n    event.element;\n    const id = overlay.getId();\n\n    if (id !== undefined) {\n      delete this.overlayIdIndex_[id.toString()];\n    }\n\n    event.element.setMap(null);\n  }, this);\n};\n\ninherits(PluggableMap, BaseObject);\n\nPluggableMap.prototype.createRenderer = function () {\n  throw new Error('Use a map type that has a createRenderer method');\n};\n/**\n * Add the given control to the map.\n * @param {module:ol/control/Control} control Control.\n * @api\n */\n\n\nPluggableMap.prototype.addControl = function (control) {\n  this.getControls().push(control);\n};\n/**\n * Add the given interaction to the map.\n * @param {module:ol/interaction/Interaction} interaction Interaction to add.\n * @api\n */\n\n\nPluggableMap.prototype.addInteraction = function (interaction) {\n  this.getInteractions().push(interaction);\n};\n/**\n * Adds the given layer to the top of this map. If you want to add a layer\n * elsewhere in the stack, use `getLayers()` and the methods available on\n * {@link module:ol/Collection~Collection}.\n * @param {module:ol/layer/Base} layer Layer.\n * @api\n */\n\n\nPluggableMap.prototype.addLayer = function (layer) {\n  const layers = this.getLayerGroup().getLayers();\n  layers.push(layer);\n};\n/**\n * Add the given overlay to the map.\n * @param {module:ol/Overlay} overlay Overlay.\n * @api\n */\n\n\nPluggableMap.prototype.addOverlay = function (overlay) {\n  this.getOverlays().push(overlay);\n};\n/**\n * This deals with map's overlay collection changes.\n * @param {module:ol/Overlay} overlay Overlay.\n * @private\n */\n\n\nPluggableMap.prototype.addOverlayInternal_ = function (overlay) {\n  const id = overlay.getId();\n\n  if (id !== undefined) {\n    this.overlayIdIndex_[id.toString()] = overlay;\n  }\n\n  overlay.setMap(this);\n};\n/**\n *\n * @inheritDoc\n */\n\n\nPluggableMap.prototype.disposeInternal = function () {\n  this.mapBrowserEventHandler_.dispose();\n  unlisten(this.viewport_, EventType.CONTEXTMENU, this.handleBrowserEvent, this);\n  unlisten(this.viewport_, EventType.WHEEL, this.handleBrowserEvent, this);\n  unlisten(this.viewport_, EventType.MOUSEWHEEL, this.handleBrowserEvent, this);\n\n  if (this.handleResize_ !== undefined) {\n    removeEventListener(EventType.RESIZE, this.handleResize_, false);\n    this.handleResize_ = undefined;\n  }\n\n  if (this.animationDelayKey_) {\n    cancelAnimationFrame(this.animationDelayKey_);\n    this.animationDelayKey_ = undefined;\n  }\n\n  this.setTarget(null);\n  BaseObject.prototype.disposeInternal.call(this);\n};\n/**\n * Detect features that intersect a pixel on the viewport, and execute a\n * callback with each intersecting feature. Layers included in the detection can\n * be configured through the `layerFilter` option in `opt_options`.\n * @param {module:ol~Pixel} pixel Pixel.\n * @param {function(this: S, (module:ol/Feature|module:ol/render/Feature),\n *     module:ol/layer/Layer): T} callback Feature callback. The callback will be\n *     called with two arguments. The first argument is one\n *     {@link module:ol/Feature feature} or\n *     {@link module:ol/render/Feature render feature} at the pixel, the second is\n *     the {@link module:ol/layer/Layer layer} of the feature and will be null for\n *     unmanaged layers. To stop detection, callback functions can return a\n *     truthy value.\n * @param {module:ol/PluggableMap~AtPixelOptions=} opt_options Optional options.\n * @return {T|undefined} Callback result, i.e. the return value of last\n * callback execution, or the first truthy callback return value.\n * @template S,T\n * @api\n */\n\n\nPluggableMap.prototype.forEachFeatureAtPixel = function (pixel, callback, opt_options) {\n  if (!this.frameState_) {\n    return;\n  }\n\n  const coordinate = this.getCoordinateFromPixel(pixel);\n  opt_options = opt_options !== undefined ? opt_options : {};\n  const hitTolerance = opt_options.hitTolerance !== undefined ? opt_options.hitTolerance * this.frameState_.pixelRatio : 0;\n  const layerFilter = opt_options.layerFilter !== undefined ? opt_options.layerFilter : TRUE;\n  return this.renderer_.forEachFeatureAtCoordinate(coordinate, this.frameState_, hitTolerance, callback, null, layerFilter, null);\n};\n/**\n * Get all features that intersect a pixel on the viewport.\n * @param {module:ol~Pixel} pixel Pixel.\n * @param {module:ol/PluggableMap~AtPixelOptions=} opt_options Optional options.\n * @return {Array.<module:ol/Feature|module:ol/render/Feature>} The detected features or\n * `null` if none were found.\n * @api\n */\n\n\nPluggableMap.prototype.getFeaturesAtPixel = function (pixel, opt_options) {\n  let features = null;\n  this.forEachFeatureAtPixel(pixel, function (feature) {\n    if (!features) {\n      features = [];\n    }\n\n    features.push(feature);\n  }, opt_options);\n  return features;\n};\n/**\n * Detect layers that have a color value at a pixel on the viewport, and\n * execute a callback with each matching layer. Layers included in the\n * detection can be configured through `opt_layerFilter`.\n * @param {module:ol~Pixel} pixel Pixel.\n * @param {function(this: S, module:ol/layer/Layer, (Uint8ClampedArray|Uint8Array)): T} callback\n *     Layer callback. This callback will receive two arguments: first is the\n *     {@link module:ol/layer/Layer layer}, second argument is an array representing\n *     [R, G, B, A] pixel values (0 - 255) and will be `null` for layer types\n *     that do not currently support this argument. To stop detection, callback\n *     functions can return a truthy value.\n * @param {module:ol/PluggableMap~AtPixelOptions=} opt_options Configuration options.\n * @return {T|undefined} Callback result, i.e. the return value of last\n * callback execution, or the first truthy callback return value.\n * @template S,T\n * @api\n */\n\n\nPluggableMap.prototype.forEachLayerAtPixel = function (pixel, callback, opt_options) {\n  if (!this.frameState_) {\n    return;\n  }\n\n  const options = opt_options || {};\n  const hitTolerance = options.hitTolerance !== undefined ? opt_options.hitTolerance * this.frameState_.pixelRatio : 0;\n  const layerFilter = options.layerFilter || TRUE;\n  return this.renderer_.forEachLayerAtPixel(pixel, this.frameState_, hitTolerance, callback, null, layerFilter, null);\n};\n/**\n * Detect if features intersect a pixel on the viewport. Layers included in the\n * detection can be configured through `opt_layerFilter`.\n * @param {module:ol~Pixel} pixel Pixel.\n * @param {module:ol/PluggableMap~AtPixelOptions=} opt_options Optional options.\n * @return {boolean} Is there a feature at the given pixel?\n * @template U\n * @api\n */\n\n\nPluggableMap.prototype.hasFeatureAtPixel = function (pixel, opt_options) {\n  if (!this.frameState_) {\n    return false;\n  }\n\n  const coordinate = this.getCoordinateFromPixel(pixel);\n  opt_options = opt_options !== undefined ? opt_options : {};\n  const layerFilter = opt_options.layerFilter !== undefined ? opt_options.layerFilter : TRUE;\n  const hitTolerance = opt_options.hitTolerance !== undefined ? opt_options.hitTolerance * this.frameState_.pixelRatio : 0;\n  return this.renderer_.hasFeatureAtCoordinate(coordinate, this.frameState_, hitTolerance, layerFilter, null);\n};\n/**\n * Returns the coordinate in view projection for a browser event.\n * @param {Event} event Event.\n * @return {module:ol/coordinate~Coordinate} Coordinate.\n * @api\n */\n\n\nPluggableMap.prototype.getEventCoordinate = function (event) {\n  return this.getCoordinateFromPixel(this.getEventPixel(event));\n};\n/**\n * Returns the map pixel position for a browser event relative to the viewport.\n * @param {Event} event Event.\n * @return {module:ol~Pixel} Pixel.\n * @api\n */\n\n\nPluggableMap.prototype.getEventPixel = function (event) {\n  const viewportPosition = this.viewport_.getBoundingClientRect();\n  const eventPosition = event.changedTouches ? event.changedTouches[0] : event;\n  return [eventPosition.clientX - viewportPosition.left, eventPosition.clientY - viewportPosition.top];\n};\n/**\n * Get the target in which this map is rendered.\n * Note that this returns what is entered as an option or in setTarget:\n * if that was an element, it returns an element; if a string, it returns that.\n * @return {Element|string|undefined} The Element or id of the Element that the\n *     map is rendered in.\n * @observable\n * @api\n */\n\n\nPluggableMap.prototype.getTarget = function () {\n  return (\n    /** @type {Element|string|undefined} */\n    this.get(MapProperty.TARGET)\n  );\n};\n/**\n * Get the DOM element into which this map is rendered. In contrast to\n * `getTarget` this method always return an `Element`, or `null` if the\n * map has no target.\n * @return {Element} The element that the map is rendered in.\n * @api\n */\n\n\nPluggableMap.prototype.getTargetElement = function () {\n  const target = this.getTarget();\n\n  if (target !== undefined) {\n    return typeof target === 'string' ? document.getElementById(target) : target;\n  } else {\n    return null;\n  }\n};\n/**\n * Get the coordinate for a given pixel.  This returns a coordinate in the\n * map view projection.\n * @param {module:ol~Pixel} pixel Pixel position in the map viewport.\n * @return {module:ol/coordinate~Coordinate} The coordinate for the pixel position.\n * @api\n */\n\n\nPluggableMap.prototype.getCoordinateFromPixel = function (pixel) {\n  const frameState = this.frameState_;\n\n  if (!frameState) {\n    return null;\n  } else {\n    return applyTransform(frameState.pixelToCoordinateTransform, pixel.slice());\n  }\n};\n/**\n * Get the map controls. Modifying this collection changes the controls\n * associated with the map.\n * @return {module:ol/Collection.<module:ol/control/Control>} Controls.\n * @api\n */\n\n\nPluggableMap.prototype.getControls = function () {\n  return this.controls;\n};\n/**\n * Get the map overlays. Modifying this collection changes the overlays\n * associated with the map.\n * @return {module:ol/Collection.<module:ol/Overlay>} Overlays.\n * @api\n */\n\n\nPluggableMap.prototype.getOverlays = function () {\n  return this.overlays_;\n};\n/**\n * Get an overlay by its identifier (the value returned by overlay.getId()).\n * Note that the index treats string and numeric identifiers as the same. So\n * `map.getOverlayById(2)` will return an overlay with id `'2'` or `2`.\n * @param {string|number} id Overlay identifier.\n * @return {module:ol/Overlay} Overlay.\n * @api\n */\n\n\nPluggableMap.prototype.getOverlayById = function (id) {\n  const overlay = this.overlayIdIndex_[id.toString()];\n  return overlay !== undefined ? overlay : null;\n};\n/**\n * Get the map interactions. Modifying this collection changes the interactions\n * associated with the map.\n *\n * Interactions are used for e.g. pan, zoom and rotate.\n * @return {module:ol/Collection.<module:ol/interaction/Interaction>} Interactions.\n * @api\n */\n\n\nPluggableMap.prototype.getInteractions = function () {\n  return this.interactions;\n};\n/**\n * Get the layergroup associated with this map.\n * @return {module:ol/layer/Group} A layer group containing the layers in this map.\n * @observable\n * @api\n */\n\n\nPluggableMap.prototype.getLayerGroup = function () {\n  return (\n    /** @type {module:ol/layer/Group} */\n    this.get(MapProperty.LAYERGROUP)\n  );\n};\n/**\n * Get the collection of layers associated with this map.\n * @return {!module:ol/Collection.<module:ol/layer/Base>} Layers.\n * @api\n */\n\n\nPluggableMap.prototype.getLayers = function () {\n  const layers = this.getLayerGroup().getLayers();\n  return layers;\n};\n/**\n * Get the pixel for a coordinate.  This takes a coordinate in the map view\n * projection and returns the corresponding pixel.\n * @param {module:ol/coordinate~Coordinate} coordinate A map coordinate.\n * @return {module:ol~Pixel} A pixel position in the map viewport.\n * @api\n */\n\n\nPluggableMap.prototype.getPixelFromCoordinate = function (coordinate) {\n  const frameState = this.frameState_;\n\n  if (!frameState) {\n    return null;\n  } else {\n    return applyTransform(frameState.coordinateToPixelTransform, coordinate.slice(0, 2));\n  }\n};\n/**\n * Get the map renderer.\n * @return {module:ol/renderer/Map} Renderer\n */\n\n\nPluggableMap.prototype.getRenderer = function () {\n  return this.renderer_;\n};\n/**\n * Get the size of this map.\n * @return {module:ol/size~Size|undefined} The size in pixels of the map in the DOM.\n * @observable\n * @api\n */\n\n\nPluggableMap.prototype.getSize = function () {\n  return (\n    /** @type {module:ol/size~Size|undefined} */\n    this.get(MapProperty.SIZE)\n  );\n};\n/**\n * Get the view associated with this map. A view manages properties such as\n * center and resolution.\n * @return {module:ol/View} The view that controls this map.\n * @observable\n * @api\n */\n\n\nPluggableMap.prototype.getView = function () {\n  return (\n    /** @type {module:ol/View} */\n    this.get(MapProperty.VIEW)\n  );\n};\n/**\n * Get the element that serves as the map viewport.\n * @return {Element} Viewport.\n * @api\n */\n\n\nPluggableMap.prototype.getViewport = function () {\n  return this.viewport_;\n};\n/**\n * Get the element that serves as the container for overlays.  Elements added to\n * this container will let mousedown and touchstart events through to the map,\n * so clicks and gestures on an overlay will trigger {@link module:ol/MapBrowserEvent~MapBrowserEvent}\n * events.\n * @return {!Element} The map's overlay container.\n */\n\n\nPluggableMap.prototype.getOverlayContainer = function () {\n  return this.overlayContainer_;\n};\n/**\n * Get the element that serves as a container for overlays that don't allow\n * event propagation. Elements added to this container won't let mousedown and\n * touchstart events through to the map, so clicks and gestures on an overlay\n * don't trigger any {@link module:ol/MapBrowserEvent~MapBrowserEvent}.\n * @return {!Element} The map's overlay container that stops events.\n */\n\n\nPluggableMap.prototype.getOverlayContainerStopEvent = function () {\n  return this.overlayContainerStopEvent_;\n};\n/**\n * @param {module:ol/Tile} tile Tile.\n * @param {string} tileSourceKey Tile source key.\n * @param {module:ol/coordinate~Coordinate} tileCenter Tile center.\n * @param {number} tileResolution Tile resolution.\n * @return {number} Tile priority.\n */\n\n\nPluggableMap.prototype.getTilePriority = function (tile, tileSourceKey, tileCenter, tileResolution) {\n  // Filter out tiles at higher zoom levels than the current zoom level, or that\n  // are outside the visible extent.\n  const frameState = this.frameState_;\n\n  if (!frameState || !(tileSourceKey in frameState.wantedTiles)) {\n    return DROP;\n  }\n\n  if (!frameState.wantedTiles[tileSourceKey][tile.getKey()]) {\n    return DROP;\n  } // Prioritize the highest zoom level tiles closest to the focus.\n  // Tiles at higher zoom levels are prioritized using Math.log(tileResolution).\n  // Within a zoom level, tiles are prioritized by the distance in pixels\n  // between the center of the tile and the focus.  The factor of 65536 means\n  // that the prioritization should behave as desired for tiles up to\n  // 65536 * Math.log(2) = 45426 pixels from the focus.\n\n\n  const deltaX = tileCenter[0] - frameState.focus[0];\n  const deltaY = tileCenter[1] - frameState.focus[1];\n  return 65536 * Math.log(tileResolution) + Math.sqrt(deltaX * deltaX + deltaY * deltaY) / tileResolution;\n};\n/**\n * @param {Event} browserEvent Browser event.\n * @param {string=} opt_type Type.\n */\n\n\nPluggableMap.prototype.handleBrowserEvent = function (browserEvent, opt_type) {\n  const type = opt_type || browserEvent.type;\n  const mapBrowserEvent = new MapBrowserEvent(type, this, browserEvent);\n  this.handleMapBrowserEvent(mapBrowserEvent);\n};\n/**\n * @param {module:ol/MapBrowserEvent} mapBrowserEvent The event to handle.\n */\n\n\nPluggableMap.prototype.handleMapBrowserEvent = function (mapBrowserEvent) {\n  if (!this.frameState_) {\n    // With no view defined, we cannot translate pixels into geographical\n    // coordinates so interactions cannot be used.\n    return;\n  }\n\n  this.focus_ = mapBrowserEvent.coordinate;\n  mapBrowserEvent.frameState = this.frameState_;\n  const interactionsArray = this.getInteractions().getArray();\n\n  if (this.dispatchEvent(mapBrowserEvent) !== false) {\n    for (let i = interactionsArray.length - 1; i >= 0; i--) {\n      const interaction = interactionsArray[i];\n\n      if (!interaction.getActive()) {\n        continue;\n      }\n\n      const cont = interaction.handleEvent(mapBrowserEvent);\n\n      if (!cont) {\n        break;\n      }\n    }\n  }\n};\n/**\n * @protected\n */\n\n\nPluggableMap.prototype.handlePostRender = function () {\n  const frameState = this.frameState_; // Manage the tile queue\n  // Image loads are expensive and a limited resource, so try to use them\n  // efficiently:\n  // * When the view is static we allow a large number of parallel tile loads\n  //   to complete the frame as quickly as possible.\n  // * When animating or interacting, image loads can cause janks, so we reduce\n  //   the maximum number of loads per frame and limit the number of parallel\n  //   tile loads to remain reactive to view changes and to reduce the chance of\n  //   loading tiles that will quickly disappear from view.\n\n  const tileQueue = this.tileQueue_;\n\n  if (!tileQueue.isEmpty()) {\n    let maxTotalLoading = this.maxTilesLoading_;\n    let maxNewLoads = maxTotalLoading;\n\n    if (frameState) {\n      const hints = frameState.viewHints;\n\n      if (hints[ViewHint.ANIMATING]) {\n        maxTotalLoading = this.loadTilesWhileAnimating_ ? 8 : 0;\n        maxNewLoads = 2;\n      }\n\n      if (hints[ViewHint.INTERACTING]) {\n        maxTotalLoading = this.loadTilesWhileInteracting_ ? 8 : 0;\n        maxNewLoads = 2;\n      }\n    }\n\n    if (tileQueue.getTilesLoading() < maxTotalLoading) {\n      tileQueue.reprioritize(); // FIXME only call if view has changed\n\n      tileQueue.loadMoreTiles(maxTotalLoading, maxNewLoads);\n    }\n  }\n\n  const postRenderFunctions = this.postRenderFunctions_;\n\n  for (let i = 0, ii = postRenderFunctions.length; i < ii; ++i) {\n    postRenderFunctions[i](this, frameState);\n  }\n\n  postRenderFunctions.length = 0;\n};\n/**\n * @private\n */\n\n\nPluggableMap.prototype.handleSizeChanged_ = function () {\n  this.render();\n};\n/**\n * @private\n */\n\n\nPluggableMap.prototype.handleTargetChanged_ = function () {\n  // target may be undefined, null, a string or an Element.\n  // If it's a string we convert it to an Element before proceeding.\n  // If it's not now an Element we remove the viewport from the DOM.\n  // If it's an Element we append the viewport element to it.\n  let targetElement;\n\n  if (this.getTarget()) {\n    targetElement = this.getTargetElement();\n  }\n\n  if (this.keyHandlerKeys_) {\n    for (let i = 0, ii = this.keyHandlerKeys_.length; i < ii; ++i) {\n      unlistenByKey(this.keyHandlerKeys_[i]);\n    }\n\n    this.keyHandlerKeys_ = null;\n  }\n\n  if (!targetElement) {\n    this.renderer_.removeLayerRenderers();\n    removeNode(this.viewport_);\n\n    if (this.handleResize_ !== undefined) {\n      removeEventListener(EventType.RESIZE, this.handleResize_, false);\n      this.handleResize_ = undefined;\n    }\n  } else {\n    targetElement.appendChild(this.viewport_);\n    const keyboardEventTarget = !this.keyboardEventTarget_ ? targetElement : this.keyboardEventTarget_;\n    this.keyHandlerKeys_ = [listen(keyboardEventTarget, EventType.KEYDOWN, this.handleBrowserEvent, this), listen(keyboardEventTarget, EventType.KEYPRESS, this.handleBrowserEvent, this)];\n\n    if (!this.handleResize_) {\n      this.handleResize_ = this.updateSize.bind(this);\n      addEventListener(EventType.RESIZE, this.handleResize_, false);\n    }\n  }\n\n  this.updateSize(); // updateSize calls setSize, so no need to call this.render\n  // ourselves here.\n};\n/**\n * @private\n */\n\n\nPluggableMap.prototype.handleTileChange_ = function () {\n  this.render();\n};\n/**\n * @private\n */\n\n\nPluggableMap.prototype.handleViewPropertyChanged_ = function () {\n  this.render();\n};\n/**\n * @private\n */\n\n\nPluggableMap.prototype.handleViewChanged_ = function () {\n  if (this.viewPropertyListenerKey_) {\n    unlistenByKey(this.viewPropertyListenerKey_);\n    this.viewPropertyListenerKey_ = null;\n  }\n\n  if (this.viewChangeListenerKey_) {\n    unlistenByKey(this.viewChangeListenerKey_);\n    this.viewChangeListenerKey_ = null;\n  }\n\n  const view = this.getView();\n\n  if (view) {\n    this.viewport_.setAttribute('data-view', getUid(view));\n    this.viewPropertyListenerKey_ = listen(view, ObjectEventType.PROPERTYCHANGE, this.handleViewPropertyChanged_, this);\n    this.viewChangeListenerKey_ = listen(view, EventType.CHANGE, this.handleViewPropertyChanged_, this);\n  }\n\n  this.render();\n};\n/**\n * @private\n */\n\n\nPluggableMap.prototype.handleLayerGroupChanged_ = function () {\n  if (this.layerGroupPropertyListenerKeys_) {\n    this.layerGroupPropertyListenerKeys_.forEach(unlistenByKey);\n    this.layerGroupPropertyListenerKeys_ = null;\n  }\n\n  const layerGroup = this.getLayerGroup();\n\n  if (layerGroup) {\n    this.layerGroupPropertyListenerKeys_ = [listen(layerGroup, ObjectEventType.PROPERTYCHANGE, this.render, this), listen(layerGroup, EventType.CHANGE, this.render, this)];\n  }\n\n  this.render();\n};\n/**\n * @return {boolean} Is rendered.\n */\n\n\nPluggableMap.prototype.isRendered = function () {\n  return !!this.frameState_;\n};\n/**\n * Requests an immediate render in a synchronous manner.\n * @api\n */\n\n\nPluggableMap.prototype.renderSync = function () {\n  if (this.animationDelayKey_) {\n    cancelAnimationFrame(this.animationDelayKey_);\n  }\n\n  this.animationDelay_();\n};\n/**\n * Request a map rendering (at the next animation frame).\n * @api\n */\n\n\nPluggableMap.prototype.render = function () {\n  if (this.animationDelayKey_ === undefined) {\n    this.animationDelayKey_ = requestAnimationFrame(this.animationDelay_);\n  }\n};\n/**\n * Remove the given control from the map.\n * @param {module:ol/control/Control} control Control.\n * @return {module:ol/control/Control|undefined} The removed control (or undefined\n *     if the control was not found).\n * @api\n */\n\n\nPluggableMap.prototype.removeControl = function (control) {\n  return this.getControls().remove(control);\n};\n/**\n * Remove the given interaction from the map.\n * @param {module:ol/interaction/Interaction} interaction Interaction to remove.\n * @return {module:ol/interaction/Interaction|undefined} The removed interaction (or\n *     undefined if the interaction was not found).\n * @api\n */\n\n\nPluggableMap.prototype.removeInteraction = function (interaction) {\n  return this.getInteractions().remove(interaction);\n};\n/**\n * Removes the given layer from the map.\n * @param {module:ol/layer/Base} layer Layer.\n * @return {module:ol/layer/Base|undefined} The removed layer (or undefined if the\n *     layer was not found).\n * @api\n */\n\n\nPluggableMap.prototype.removeLayer = function (layer) {\n  const layers = this.getLayerGroup().getLayers();\n  return layers.remove(layer);\n};\n/**\n * Remove the given overlay from the map.\n * @param {module:ol/Overlay} overlay Overlay.\n * @return {module:ol/Overlay|undefined} The removed overlay (or undefined\n *     if the overlay was not found).\n * @api\n */\n\n\nPluggableMap.prototype.removeOverlay = function (overlay) {\n  return this.getOverlays().remove(overlay);\n};\n/**\n * @param {number} time Time.\n * @private\n */\n\n\nPluggableMap.prototype.renderFrame_ = function (time) {\n  let viewState;\n  const size = this.getSize();\n  const view = this.getView();\n  const extent = createEmpty();\n  const previousFrameState = this.frameState_;\n  /** @type {?module:ol/PluggableMap~FrameState} */\n\n  let frameState = null;\n\n  if (size !== undefined && hasArea(size) && view && view.isDef()) {\n    const viewHints = view.getHints(this.frameState_ ? this.frameState_.viewHints : undefined);\n    const layerStatesArray = this.getLayerGroup().getLayerStatesArray();\n    const layerStates = {};\n\n    for (let i = 0, ii = layerStatesArray.length; i < ii; ++i) {\n      layerStates[getUid(layerStatesArray[i].layer)] = layerStatesArray[i];\n    }\n\n    viewState = view.getState();\n    let focus = this.focus_;\n\n    if (!focus) {\n      focus = viewState.center;\n      const pixelResolution = viewState.resolution / this.pixelRatio_;\n      focus[0] = Math.round(focus[0] / pixelResolution) * pixelResolution;\n      focus[1] = Math.round(focus[1] / pixelResolution) * pixelResolution;\n    }\n\n    frameState =\n    /** @type {module:ol/PluggableMap~FrameState} */\n    {\n      animate: false,\n      coordinateToPixelTransform: this.coordinateToPixelTransform_,\n      extent: extent,\n      focus: focus,\n      index: this.frameIndex_++,\n      layerStates: layerStates,\n      layerStatesArray: layerStatesArray,\n      pixelRatio: this.pixelRatio_,\n      pixelToCoordinateTransform: this.pixelToCoordinateTransform_,\n      postRenderFunctions: [],\n      size: size,\n      skippedFeatureUids: this.skippedFeatureUids_,\n      tileQueue: this.tileQueue_,\n      time: time,\n      usedTiles: {},\n      viewState: viewState,\n      viewHints: viewHints,\n      wantedTiles: {}\n    };\n  }\n\n  if (frameState) {\n    frameState.extent = getForViewAndSize(viewState.center, viewState.resolution, viewState.rotation, frameState.size, extent);\n  }\n\n  this.frameState_ = frameState;\n  this.renderer_.renderFrame(frameState);\n\n  if (frameState) {\n    if (frameState.animate) {\n      this.render();\n    }\n\n    Array.prototype.push.apply(this.postRenderFunctions_, frameState.postRenderFunctions);\n\n    if (previousFrameState) {\n      const moveStart = !this.previousExtent_ || !isEmpty(this.previousExtent_) && !equals(frameState.extent, this.previousExtent_);\n\n      if (moveStart) {\n        this.dispatchEvent(new MapEvent(MapEventType.MOVESTART, this, previousFrameState));\n        this.previousExtent_ = createOrUpdateEmpty(this.previousExtent_);\n      }\n    }\n\n    const idle = this.previousExtent_ && !frameState.viewHints[ViewHint.ANIMATING] && !frameState.viewHints[ViewHint.INTERACTING] && !equals(frameState.extent, this.previousExtent_);\n\n    if (idle) {\n      this.dispatchEvent(new MapEvent(MapEventType.MOVEEND, this, frameState));\n      clone(frameState.extent, this.previousExtent_);\n    }\n  }\n\n  this.dispatchEvent(new MapEvent(MapEventType.POSTRENDER, this, frameState));\n  setTimeout(this.handlePostRender.bind(this), 0);\n};\n/**\n * Sets the layergroup of this map.\n * @param {module:ol/layer/Group} layerGroup A layer group containing the layers in this map.\n * @observable\n * @api\n */\n\n\nPluggableMap.prototype.setLayerGroup = function (layerGroup) {\n  this.set(MapProperty.LAYERGROUP, layerGroup);\n};\n/**\n * Set the size of this map.\n * @param {module:ol/size~Size|undefined} size The size in pixels of the map in the DOM.\n * @observable\n * @api\n */\n\n\nPluggableMap.prototype.setSize = function (size) {\n  this.set(MapProperty.SIZE, size);\n};\n/**\n * Set the target element to render this map into.\n * @param {Element|string|undefined} target The Element or id of the Element\n *     that the map is rendered in.\n * @observable\n * @api\n */\n\n\nPluggableMap.prototype.setTarget = function (target) {\n  this.set(MapProperty.TARGET, target);\n};\n/**\n * Set the view for this map.\n * @param {module:ol/View} view The view that controls this map.\n * @observable\n * @api\n */\n\n\nPluggableMap.prototype.setView = function (view) {\n  this.set(MapProperty.VIEW, view);\n};\n/**\n * @param {module:ol/Feature} feature Feature.\n */\n\n\nPluggableMap.prototype.skipFeature = function (feature) {\n  const featureUid = getUid(feature).toString();\n  this.skippedFeatureUids_[featureUid] = true;\n  this.render();\n};\n/**\n * Force a recalculation of the map viewport size.  This should be called when\n * third-party code changes the size of the map viewport.\n * @api\n */\n\n\nPluggableMap.prototype.updateSize = function () {\n  const targetElement = this.getTargetElement();\n\n  if (!targetElement) {\n    this.setSize(undefined);\n  } else {\n    const computedStyle = getComputedStyle(targetElement);\n    this.setSize([targetElement.offsetWidth - parseFloat(computedStyle['borderLeftWidth']) - parseFloat(computedStyle['paddingLeft']) - parseFloat(computedStyle['paddingRight']) - parseFloat(computedStyle['borderRightWidth']), targetElement.offsetHeight - parseFloat(computedStyle['borderTopWidth']) - parseFloat(computedStyle['paddingTop']) - parseFloat(computedStyle['paddingBottom']) - parseFloat(computedStyle['borderBottomWidth'])]);\n  }\n};\n/**\n * @param {module:ol/Feature} feature Feature.\n */\n\n\nPluggableMap.prototype.unskipFeature = function (feature) {\n  const featureUid = getUid(feature).toString();\n  delete this.skippedFeatureUids_[featureUid];\n  this.render();\n};\n/**\n * @param {MapOptions} options Map options.\n * @return {module:ol/PluggableMap~MapOptionsInternal} Internal map options.\n */\n\n\nfunction createOptionsInternal(options) {\n  /**\n   * @type {Element|Document}\n   */\n  let keyboardEventTarget = null;\n\n  if (options.keyboardEventTarget !== undefined) {\n    keyboardEventTarget = typeof options.keyboardEventTarget === 'string' ? document.getElementById(options.keyboardEventTarget) : options.keyboardEventTarget;\n  }\n  /**\n   * @type {Object.<string, *>}\n   */\n\n\n  const values = {};\n  const layerGroup = options.layers instanceof LayerGroup ? options.layers : new LayerGroup({\n    layers: options.layers\n  });\n  values[MapProperty.LAYERGROUP] = layerGroup;\n  values[MapProperty.TARGET] = options.target;\n  values[MapProperty.VIEW] = options.view !== undefined ? options.view : new View();\n  let controls;\n\n  if (options.controls !== undefined) {\n    if (Array.isArray(options.controls)) {\n      controls = new Collection(options.controls.slice());\n    } else {\n      assert(options.controls instanceof Collection, 47); // Expected `controls` to be an array or an `module:ol/Collection~Collection`\n\n      controls = options.controls;\n    }\n  }\n\n  let interactions;\n\n  if (options.interactions !== undefined) {\n    if (Array.isArray(options.interactions)) {\n      interactions = new Collection(options.interactions.slice());\n    } else {\n      assert(options.interactions instanceof Collection, 48); // Expected `interactions` to be an array or an `module:ol/Collection~Collection`\n\n      interactions = options.interactions;\n    }\n  }\n\n  let overlays;\n\n  if (options.overlays !== undefined) {\n    if (Array.isArray(options.overlays)) {\n      overlays = new Collection(options.overlays.slice());\n    } else {\n      assert(options.overlays instanceof Collection, 49); // Expected `overlays` to be an array or an `module:ol/Collection~Collection`\n\n      overlays = options.overlays;\n    }\n  } else {\n    overlays = new Collection();\n  }\n\n  return {\n    controls: controls,\n    interactions: interactions,\n    keyboardEventTarget: keyboardEventTarget,\n    overlays: overlays,\n    values: values\n  };\n}\n\nexport default PluggableMap;","map":null,"metadata":{},"sourceType":"module"}