{"ast":null,"code":"/**\n * @module ol/ImageCanvas\n */\nimport { inherits } from './util.js';\nimport ImageBase from './ImageBase.js';\nimport ImageState from './ImageState.js';\n/**\n * A function that is called to trigger asynchronous canvas drawing.  It is\n * called with a \"done\" callback that should be called when drawing is done.\n * If any error occurs during drawing, the \"done\" callback should be called with\n * that error.\n *\n * @typedef {function(function(Error))} Loader\n */\n\n/**\n * @constructor\n * @extends {module:ol/ImageBase}\n * @param {module:ol/extent~Extent} extent Extent.\n * @param {number} resolution Resolution.\n * @param {number} pixelRatio Pixel ratio.\n * @param {HTMLCanvasElement} canvas Canvas.\n * @param {module:ol/ImageCanvas~Loader=} opt_loader Optional loader function to\n *     support asynchronous canvas drawing.\n */\n\nconst ImageCanvas = function (extent, resolution, pixelRatio, canvas, opt_loader) {\n  /**\n   * Optional canvas loader function.\n   * @type {?module:ol/ImageCanvas~Loader}\n   * @private\n   */\n  this.loader_ = opt_loader !== undefined ? opt_loader : null;\n  const state = opt_loader !== undefined ? ImageState.IDLE : ImageState.LOADED;\n  ImageBase.call(this, extent, resolution, pixelRatio, state);\n  /**\n   * @private\n   * @type {HTMLCanvasElement}\n   */\n\n  this.canvas_ = canvas;\n  /**\n   * @private\n   * @type {Error}\n   */\n\n  this.error_ = null;\n};\n\ninherits(ImageCanvas, ImageBase);\n/**\n * Get any error associated with asynchronous rendering.\n * @return {Error} Any error that occurred during rendering.\n */\n\nImageCanvas.prototype.getError = function () {\n  return this.error_;\n};\n/**\n * Handle async drawing complete.\n * @param {Error} err Any error during drawing.\n * @private\n */\n\n\nImageCanvas.prototype.handleLoad_ = function (err) {\n  if (err) {\n    this.error_ = err;\n    this.state = ImageState.ERROR;\n  } else {\n    this.state = ImageState.LOADED;\n  }\n\n  this.changed();\n};\n/**\n * @inheritDoc\n */\n\n\nImageCanvas.prototype.load = function () {\n  if (this.state == ImageState.IDLE) {\n    this.state = ImageState.LOADING;\n    this.changed();\n    this.loader_(this.handleLoad_.bind(this));\n  }\n};\n/**\n * @return {HTMLCanvasElement} Canvas element.\n */\n\n\nImageCanvas.prototype.getImage = function () {\n  return this.canvas_;\n};\n\nexport default ImageCanvas;","map":null,"metadata":{},"sourceType":"module"}