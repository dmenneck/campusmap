{"ast":null,"code":"/**\n * ag-grid-community - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components\n * @version v21.2.2\n * @link http://www.ag-grid.com/\n * @license MIT\n */\n\"use strict\";\n\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar simpleFilter_1 = require(\"./simpleFilter\");\n\nvar ScalerFilter =\n/** @class */\nfunction (_super) {\n  __extends(ScalerFilter, _super);\n\n  function ScalerFilter() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  ScalerFilter.prototype.setParams = function (params) {\n    _super.prototype.setParams.call(this, params);\n\n    this.scalarFilterParams = params;\n    this.checkDeprecatedParams();\n  };\n\n  ScalerFilter.prototype.checkDeprecatedParams = function () {\n    if (this.scalarFilterParams.nullComparator) {\n      console.warn('ag-Grid: Since v21.0, the property filterParams.nullComparator is deprecated. ' + 'Please use filterParams.includeBlanksInEquals, filterParams.includeBlanksInLessThan and ' + 'filterParams.includeBlanksInGreaterThan instead.');\n      this.scalarFilterParams.includeBlanksInEquals = this.scalarFilterParams.nullComparator.equals;\n      this.scalarFilterParams.includeBlanksInLessThan = this.scalarFilterParams.nullComparator.lessThan;\n      this.scalarFilterParams.includeBlanksInGreaterThan = this.scalarFilterParams.nullComparator.greaterThan;\n    }\n  };\n\n  ScalerFilter.prototype.nullComparator = function (selectedOption, filterValue, gridValue) {\n    if (gridValue == null) {\n      var nullValue = this.canNullsPassFilter(selectedOption);\n\n      if (selectedOption === ScalerFilter.EMPTY) {\n        return 0;\n      }\n\n      if (selectedOption === ScalerFilter.EQUALS) {\n        return nullValue ? 0 : 1;\n      }\n\n      if (selectedOption === ScalerFilter.GREATER_THAN) {\n        return nullValue ? 1 : -1;\n      }\n\n      if (selectedOption === ScalerFilter.GREATER_THAN_OR_EQUAL) {\n        return nullValue ? 1 : -1;\n      }\n\n      if (selectedOption === ScalerFilter.LESS_THAN_OR_EQUAL) {\n        return nullValue ? -1 : 1;\n      }\n\n      if (selectedOption === ScalerFilter.LESS_THAN) {\n        return nullValue ? -1 : 1;\n      }\n\n      if (selectedOption === ScalerFilter.NOT_EQUAL) {\n        return nullValue ? 1 : 0;\n      }\n    }\n\n    var actualComparator = this.comparator();\n    return actualComparator(filterValue, gridValue);\n  };\n\n  ScalerFilter.prototype.canNullsPassFilter = function (type) {\n    switch (type) {\n      case simpleFilter_1.SimpleFilter.GREATER_THAN:\n      case simpleFilter_1.SimpleFilter.GREATER_THAN_OR_EQUAL:\n        return this.scalarFilterParams.includeBlanksInGreaterThan;\n\n      case simpleFilter_1.SimpleFilter.LESS_THAN:\n      case simpleFilter_1.SimpleFilter.LESS_THAN_OR_EQUAL:\n        return this.scalarFilterParams.includeBlanksInLessThan;\n\n      case simpleFilter_1.SimpleFilter.EQUALS:\n        return this.scalarFilterParams.includeBlanksInEquals;\n    }\n  };\n\n  ScalerFilter.prototype.individualConditionPasses = function (params, filterModel) {\n    var cellValue = this.scalarFilterParams.valueGetter(params.node);\n    var range = this.mapRangeFromModel(filterModel);\n    var filterValue = range.from;\n    var filterValueTo = range.to;\n    var filterType = filterModel.type;\n    var customFilterOption = this.optionsFactory.getCustomOption(filterType);\n\n    if (customFilterOption) {\n      // only execute the custom filter if a value exists or a value isn't required, i.e. input is hidden\n      if (filterValue != null || customFilterOption.hideFilterInput) {\n        return customFilterOption.test(filterValue, cellValue);\n      }\n    } // why this? looks like logic that should be in parent class????\n    // if (filterValue == null) {\n    //     return type === FilterConditionType.MAIN ? true : this.conditionValue === 'AND';\n    // }\n\n\n    var compareResult = this.nullComparator(filterType, filterValue, cellValue);\n\n    if (filterType === ScalerFilter.EQUALS) {\n      return compareResult === 0;\n    }\n\n    if (filterType === ScalerFilter.GREATER_THAN) {\n      return compareResult > 0;\n    }\n\n    if (filterType === ScalerFilter.GREATER_THAN_OR_EQUAL) {\n      return compareResult >= 0;\n    }\n\n    if (filterType === ScalerFilter.LESS_THAN_OR_EQUAL) {\n      return compareResult <= 0;\n    }\n\n    if (filterType === ScalerFilter.LESS_THAN) {\n      return compareResult < 0;\n    }\n\n    if (filterType === ScalerFilter.NOT_EQUAL) {\n      return compareResult != 0;\n    } // From now on the type is a range and rawFilterValues must be an array!\n\n\n    var compareToResult = this.nullComparator(filterType, filterValueTo, cellValue);\n\n    if (filterType === ScalerFilter.IN_RANGE) {\n      if (!this.scalarFilterParams.inRangeInclusive) {\n        return compareResult > 0 && compareToResult < 0;\n      } else {\n        return compareResult >= 0 && compareToResult <= 0;\n      }\n    }\n\n    throw new Error('Unexpected type of filter: ' + filterType);\n  };\n\n  ScalerFilter.DEFAULT_NULL_COMPARATOR = {\n    equals: false,\n    lessThan: false,\n    greaterThan: false\n  };\n  return ScalerFilter;\n}(simpleFilter_1.SimpleFilter);\n\nexports.ScalerFilter = ScalerFilter;","map":{"version":3,"sources":["/Users/dirkmennecke77/Desktop/Lageplan/node_modules/ag-grid-community/dist/lib/filter/provided/scalerFilter.js"],"names":["__extends","extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__","constructor","prototype","create","defineProperty","exports","value","simpleFilter_1","require","ScalerFilter","_super","apply","arguments","setParams","params","call","scalarFilterParams","checkDeprecatedParams","nullComparator","console","warn","includeBlanksInEquals","equals","includeBlanksInLessThan","lessThan","includeBlanksInGreaterThan","greaterThan","selectedOption","filterValue","gridValue","nullValue","canNullsPassFilter","EMPTY","EQUALS","GREATER_THAN","GREATER_THAN_OR_EQUAL","LESS_THAN_OR_EQUAL","LESS_THAN","NOT_EQUAL","actualComparator","comparator","type","SimpleFilter","individualConditionPasses","filterModel","cellValue","valueGetter","node","range","mapRangeFromModel","from","filterValueTo","to","filterType","customFilterOption","optionsFactory","getCustomOption","hideFilterInput","test","compareResult","compareToResult","IN_RANGE","inRangeInclusive","Error","DEFAULT_NULL_COMPARATOR"],"mappings":"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","sourcesContent":["/**\n * ag-grid-community - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components\n * @version v21.2.2\n * @link http://www.ag-grid.com/\n * @license MIT\n */\n\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar simpleFilter_1 = require(\"./simpleFilter\");\nvar ScalerFilter = /** @class */ (function (_super) {\n    __extends(ScalerFilter, _super);\n    function ScalerFilter() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    ScalerFilter.prototype.setParams = function (params) {\n        _super.prototype.setParams.call(this, params);\n        this.scalarFilterParams = params;\n        this.checkDeprecatedParams();\n    };\n    ScalerFilter.prototype.checkDeprecatedParams = function () {\n        if (this.scalarFilterParams.nullComparator) {\n            console.warn('ag-Grid: Since v21.0, the property filterParams.nullComparator is deprecated. ' +\n                'Please use filterParams.includeBlanksInEquals, filterParams.includeBlanksInLessThan and ' +\n                'filterParams.includeBlanksInGreaterThan instead.');\n            this.scalarFilterParams.includeBlanksInEquals = this.scalarFilterParams.nullComparator.equals;\n            this.scalarFilterParams.includeBlanksInLessThan = this.scalarFilterParams.nullComparator.lessThan;\n            this.scalarFilterParams.includeBlanksInGreaterThan = this.scalarFilterParams.nullComparator.greaterThan;\n        }\n    };\n    ScalerFilter.prototype.nullComparator = function (selectedOption, filterValue, gridValue) {\n        if (gridValue == null) {\n            var nullValue = this.canNullsPassFilter(selectedOption);\n            if (selectedOption === ScalerFilter.EMPTY) {\n                return 0;\n            }\n            if (selectedOption === ScalerFilter.EQUALS) {\n                return nullValue ? 0 : 1;\n            }\n            if (selectedOption === ScalerFilter.GREATER_THAN) {\n                return nullValue ? 1 : -1;\n            }\n            if (selectedOption === ScalerFilter.GREATER_THAN_OR_EQUAL) {\n                return nullValue ? 1 : -1;\n            }\n            if (selectedOption === ScalerFilter.LESS_THAN_OR_EQUAL) {\n                return nullValue ? -1 : 1;\n            }\n            if (selectedOption === ScalerFilter.LESS_THAN) {\n                return nullValue ? -1 : 1;\n            }\n            if (selectedOption === ScalerFilter.NOT_EQUAL) {\n                return nullValue ? 1 : 0;\n            }\n        }\n        var actualComparator = this.comparator();\n        return actualComparator(filterValue, gridValue);\n    };\n    ScalerFilter.prototype.canNullsPassFilter = function (type) {\n        switch (type) {\n            case simpleFilter_1.SimpleFilter.GREATER_THAN:\n            case simpleFilter_1.SimpleFilter.GREATER_THAN_OR_EQUAL:\n                return this.scalarFilterParams.includeBlanksInGreaterThan;\n            case simpleFilter_1.SimpleFilter.LESS_THAN:\n            case simpleFilter_1.SimpleFilter.LESS_THAN_OR_EQUAL:\n                return this.scalarFilterParams.includeBlanksInLessThan;\n            case simpleFilter_1.SimpleFilter.EQUALS:\n                return this.scalarFilterParams.includeBlanksInEquals;\n        }\n    };\n    ScalerFilter.prototype.individualConditionPasses = function (params, filterModel) {\n        var cellValue = this.scalarFilterParams.valueGetter(params.node);\n        var range = this.mapRangeFromModel(filterModel);\n        var filterValue = range.from;\n        var filterValueTo = range.to;\n        var filterType = filterModel.type;\n        var customFilterOption = this.optionsFactory.getCustomOption(filterType);\n        if (customFilterOption) {\n            // only execute the custom filter if a value exists or a value isn't required, i.e. input is hidden\n            if (filterValue != null || customFilterOption.hideFilterInput) {\n                return customFilterOption.test(filterValue, cellValue);\n            }\n        }\n        // why this? looks like logic that should be in parent class????\n        // if (filterValue == null) {\n        //     return type === FilterConditionType.MAIN ? true : this.conditionValue === 'AND';\n        // }\n        var compareResult = this.nullComparator(filterType, filterValue, cellValue);\n        if (filterType === ScalerFilter.EQUALS) {\n            return compareResult === 0;\n        }\n        if (filterType === ScalerFilter.GREATER_THAN) {\n            return compareResult > 0;\n        }\n        if (filterType === ScalerFilter.GREATER_THAN_OR_EQUAL) {\n            return compareResult >= 0;\n        }\n        if (filterType === ScalerFilter.LESS_THAN_OR_EQUAL) {\n            return compareResult <= 0;\n        }\n        if (filterType === ScalerFilter.LESS_THAN) {\n            return compareResult < 0;\n        }\n        if (filterType === ScalerFilter.NOT_EQUAL) {\n            return compareResult != 0;\n        }\n        // From now on the type is a range and rawFilterValues must be an array!\n        var compareToResult = this.nullComparator(filterType, filterValueTo, cellValue);\n        if (filterType === ScalerFilter.IN_RANGE) {\n            if (!this.scalarFilterParams.inRangeInclusive) {\n                return compareResult > 0 && compareToResult < 0;\n            }\n            else {\n                return compareResult >= 0 && compareToResult <= 0;\n            }\n        }\n        throw new Error('Unexpected type of filter: ' + filterType);\n    };\n    ScalerFilter.DEFAULT_NULL_COMPARATOR = {\n        equals: false,\n        lessThan: false,\n        greaterThan: false\n    };\n    return ScalerFilter;\n}(simpleFilter_1.SimpleFilter));\nexports.ScalerFilter = ScalerFilter;\n"]},"metadata":{},"sourceType":"script"}