{"ast":null,"code":"/**\n * @module ol/proj/epsg4326\n */\nimport { inherits } from '../util.js';\nimport Projection from '../proj/Projection.js';\nimport Units from '../proj/Units.js';\n/**\n * Semi-major radius of the WGS84 ellipsoid.\n *\n * @const\n * @type {number}\n */\n\nexport const RADIUS = 6378137;\n/**\n * Extent of the EPSG:4326 projection which is the whole world.\n *\n * @const\n * @type {module:ol/extent~Extent}\n */\n\nexport const EXTENT = [-180, -90, 180, 90];\n/**\n * @const\n * @type {number}\n */\n\nexport const METERS_PER_UNIT = Math.PI * RADIUS / 180;\n/**\n * @classdesc\n * Projection object for WGS84 geographic coordinates (EPSG:4326).\n *\n * Note that OpenLayers does not strictly comply with the EPSG definition.\n * The EPSG registry defines 4326 as a CRS for Latitude,Longitude (y,x).\n * OpenLayers treats EPSG:4326 as a pseudo-projection, with x,y coordinates.\n *\n * @constructor\n * @extends {module:ol/proj/Projection}\n * @param {string} code Code.\n * @param {string=} opt_axisOrientation Axis orientation.\n */\n\nfunction EPSG4326Projection(code, opt_axisOrientation) {\n  Projection.call(this, {\n    code: code,\n    units: Units.DEGREES,\n    extent: EXTENT,\n    axisOrientation: opt_axisOrientation,\n    global: true,\n    metersPerUnit: METERS_PER_UNIT,\n    worldExtent: EXTENT\n  });\n}\n\ninherits(EPSG4326Projection, Projection);\n/**\n * Projections equal to EPSG:4326.\n *\n * @const\n * @type {Array.<module:ol/proj/Projection>}\n */\n\nexport const PROJECTIONS = [new EPSG4326Projection('CRS:84'), new EPSG4326Projection('EPSG:4326', 'neu'), new EPSG4326Projection('urn:ogc:def:crs:EPSG::4326', 'neu'), new EPSG4326Projection('urn:ogc:def:crs:EPSG:6.6:4326', 'neu'), new EPSG4326Projection('urn:ogc:def:crs:OGC:1.3:CRS84'), new EPSG4326Projection('urn:ogc:def:crs:OGC:2:84'), new EPSG4326Projection('http://www.opengis.net/gml/srs/epsg.xml#4326', 'neu'), new EPSG4326Projection('urn:x-ogc:def:crs:EPSG:4326', 'neu')];","map":null,"metadata":{},"sourceType":"module"}