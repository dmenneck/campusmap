{"ast":null,"code":"/**\n * @module ol/format/GML3\n */\nimport { extend } from '../array.js';\nimport { createOrUpdate } from '../extent.js';\nimport { transformWithOptions } from './Feature.js';\nimport GMLBase, { GMLNS } from './GMLBase.js';\nimport { readNonNegativeIntegerString, writeStringTextNode } from './xsd.js';\nimport GeometryLayout from '../geom/GeometryLayout.js';\nimport LineString from '../geom/LineString.js';\nimport MultiLineString from '../geom/MultiLineString.js';\nimport MultiPolygon from '../geom/MultiPolygon.js';\nimport Polygon from '../geom/Polygon.js';\nimport { assign } from '../obj.js';\nimport { get as getProjection, transformExtent } from '../proj.js';\nimport { createElementNS, getAllTextContent, makeArrayPusher, makeChildAppender, makeReplacer, makeSimpleNodeFactory, OBJECT_PROPERTY_NODE_FACTORY, parseNode, pushParseAndPop, pushSerializeAndPop, XML_SCHEMA_INSTANCE_URI } from '../xml.js';\n/**\n * @const\n * @type {string}\n * @private\n */\n\nvar schemaLocation = GMLNS + ' http://schemas.opengis.net/gml/3.1.1/profiles/gmlsfProfile/' + '1.0.0/gmlsf.xsd';\n/**\n * @const\n * @type {Object<string, string>}\n */\n\nvar MULTIGEOMETRY_TO_MEMBER_NODENAME = {\n  'MultiLineString': 'lineStringMember',\n  'MultiCurve': 'curveMember',\n  'MultiPolygon': 'polygonMember',\n  'MultiSurface': 'surfaceMember'\n};\n/**\n * @classdesc\n * Feature format for reading and writing data in the GML format\n * version 3.1.1.\n * Currently only supports GML 3.1.1 Simple Features profile.\n *\n * @api\n */\n\nvar GML3 =\n/*@__PURE__*/\nfunction (GMLBase) {\n  function GML3(opt_options) {\n    var options =\n    /** @type {import(\"./GMLBase.js\").Options} */\n    opt_options ? opt_options : {};\n    GMLBase.call(this, options);\n    /**\n     * @private\n     * @type {boolean}\n     */\n\n    this.surface_ = options.surface !== undefined ? options.surface : false;\n    /**\n     * @private\n     * @type {boolean}\n     */\n\n    this.curve_ = options.curve !== undefined ? options.curve : false;\n    /**\n     * @private\n     * @type {boolean}\n     */\n\n    this.multiCurve_ = options.multiCurve !== undefined ? options.multiCurve : true;\n    /**\n     * @private\n     * @type {boolean}\n     */\n\n    this.multiSurface_ = options.multiSurface !== undefined ? options.multiSurface : true;\n    /**\n     * @inheritDoc\n     */\n\n    this.schemaLocation = options.schemaLocation ? options.schemaLocation : schemaLocation;\n    /**\n     * @private\n     * @type {boolean}\n     */\n\n    this.hasZ = options.hasZ !== undefined ? options.hasZ : false;\n  }\n\n  if (GMLBase) GML3.__proto__ = GMLBase;\n  GML3.prototype = Object.create(GMLBase && GMLBase.prototype);\n  GML3.prototype.constructor = GML3;\n  /**\n   * @param {Element} node Node.\n   * @param {Array<*>} objectStack Object stack.\n   * @private\n   * @return {MultiLineString|undefined} MultiLineString.\n   */\n\n  GML3.prototype.readMultiCurve_ = function readMultiCurve_(node, objectStack) {\n    /** @type {Array<LineString>} */\n    var lineStrings = pushParseAndPop([], this.MULTICURVE_PARSERS_, node, objectStack, this);\n\n    if (lineStrings) {\n      var multiLineString = new MultiLineString(lineStrings);\n      return multiLineString;\n    } else {\n      return undefined;\n    }\n  };\n  /**\n   * @param {Element} node Node.\n   * @param {Array<*>} objectStack Object stack.\n   * @private\n   * @return {MultiPolygon|undefined} MultiPolygon.\n   */\n\n\n  GML3.prototype.readMultiSurface_ = function readMultiSurface_(node, objectStack) {\n    /** @type {Array<Polygon>} */\n    var polygons = pushParseAndPop([], this.MULTISURFACE_PARSERS_, node, objectStack, this);\n\n    if (polygons) {\n      return new MultiPolygon(polygons);\n    }\n  };\n  /**\n   * @param {Element} node Node.\n   * @param {Array<*>} objectStack Object stack.\n   * @private\n   */\n\n\n  GML3.prototype.curveMemberParser_ = function curveMemberParser_(node, objectStack) {\n    parseNode(this.CURVEMEMBER_PARSERS_, node, objectStack, this);\n  };\n  /**\n   * @param {Element} node Node.\n   * @param {Array<*>} objectStack Object stack.\n   * @private\n   */\n\n\n  GML3.prototype.surfaceMemberParser_ = function surfaceMemberParser_(node, objectStack) {\n    parseNode(this.SURFACEMEMBER_PARSERS_, node, objectStack, this);\n  };\n  /**\n   * @param {Element} node Node.\n   * @param {Array<*>} objectStack Object stack.\n   * @private\n   * @return {Array<(Array<number>)>|undefined} flat coordinates.\n   */\n\n\n  GML3.prototype.readPatch_ = function readPatch_(node, objectStack) {\n    return pushParseAndPop([null], this.PATCHES_PARSERS_, node, objectStack, this);\n  };\n  /**\n   * @param {Element} node Node.\n   * @param {Array<*>} objectStack Object stack.\n   * @private\n   * @return {Array<number>|undefined} flat coordinates.\n   */\n\n\n  GML3.prototype.readSegment_ = function readSegment_(node, objectStack) {\n    return pushParseAndPop([null], this.SEGMENTS_PARSERS_, node, objectStack, this);\n  };\n  /**\n   * @param {Element} node Node.\n   * @param {Array<*>} objectStack Object stack.\n   * @private\n   * @return {Array<(Array<number>)>|undefined} flat coordinates.\n   */\n\n\n  GML3.prototype.readPolygonPatch_ = function readPolygonPatch_(node, objectStack) {\n    return pushParseAndPop([null], this.FLAT_LINEAR_RINGS_PARSERS, node, objectStack, this);\n  };\n  /**\n   * @param {Element} node Node.\n   * @param {Array<*>} objectStack Object stack.\n   * @private\n   * @return {Array<number>|undefined} flat coordinates.\n   */\n\n\n  GML3.prototype.readLineStringSegment_ = function readLineStringSegment_(node, objectStack) {\n    return pushParseAndPop([null], this.GEOMETRY_FLAT_COORDINATES_PARSERS, node, objectStack, this);\n  };\n  /**\n   * @param {Element} node Node.\n   * @param {Array<*>} objectStack Object stack.\n   * @private\n   */\n\n\n  GML3.prototype.interiorParser_ = function interiorParser_(node, objectStack) {\n    /** @type {Array<number>|undefined} */\n    var flatLinearRing = pushParseAndPop(undefined, this.RING_PARSERS, node, objectStack, this);\n\n    if (flatLinearRing) {\n      var flatLinearRings =\n      /** @type {Array<Array<number>>} */\n      objectStack[objectStack.length - 1];\n      flatLinearRings.push(flatLinearRing);\n    }\n  };\n  /**\n   * @param {Element} node Node.\n   * @param {Array<*>} objectStack Object stack.\n   * @private\n   */\n\n\n  GML3.prototype.exteriorParser_ = function exteriorParser_(node, objectStack) {\n    /** @type {Array<number>|undefined} */\n    var flatLinearRing = pushParseAndPop(undefined, this.RING_PARSERS, node, objectStack, this);\n\n    if (flatLinearRing) {\n      var flatLinearRings =\n      /** @type {Array<Array<number>>} */\n      objectStack[objectStack.length - 1];\n      flatLinearRings[0] = flatLinearRing;\n    }\n  };\n  /**\n   * @param {Element} node Node.\n   * @param {Array<*>} objectStack Object stack.\n   * @private\n   * @return {Polygon|undefined} Polygon.\n   */\n\n\n  GML3.prototype.readSurface_ = function readSurface_(node, objectStack) {\n    /** @type {Array<Array<number>>} */\n    var flatLinearRings = pushParseAndPop([null], this.SURFACE_PARSERS_, node, objectStack, this);\n\n    if (flatLinearRings && flatLinearRings[0]) {\n      var flatCoordinates = flatLinearRings[0];\n      var ends = [flatCoordinates.length];\n      var i, ii;\n\n      for (i = 1, ii = flatLinearRings.length; i < ii; ++i) {\n        extend(flatCoordinates, flatLinearRings[i]);\n        ends.push(flatCoordinates.length);\n      }\n\n      return new Polygon(flatCoordinates, GeometryLayout.XYZ, ends);\n    } else {\n      return undefined;\n    }\n  };\n  /**\n   * @param {Element} node Node.\n   * @param {Array<*>} objectStack Object stack.\n   * @private\n   * @return {LineString|undefined} LineString.\n   */\n\n\n  GML3.prototype.readCurve_ = function readCurve_(node, objectStack) {\n    /** @type {Array<number>} */\n    var flatCoordinates = pushParseAndPop([null], this.CURVE_PARSERS_, node, objectStack, this);\n\n    if (flatCoordinates) {\n      var lineString = new LineString(flatCoordinates, GeometryLayout.XYZ);\n      return lineString;\n    } else {\n      return undefined;\n    }\n  };\n  /**\n   * @param {Element} node Node.\n   * @param {Array<*>} objectStack Object stack.\n   * @private\n   * @return {import(\"../extent.js\").Extent|undefined} Envelope.\n   */\n\n\n  GML3.prototype.readEnvelope_ = function readEnvelope_(node, objectStack) {\n    /** @type {Array<number>} */\n    var flatCoordinates = pushParseAndPop([null], this.ENVELOPE_PARSERS_, node, objectStack, this);\n    return createOrUpdate(flatCoordinates[1][0], flatCoordinates[1][1], flatCoordinates[2][0], flatCoordinates[2][1]);\n  };\n  /**\n   * @param {Node} node Node.\n   * @param {Array<*>} objectStack Object stack.\n   * @private\n   * @return {Array<number>|undefined} Flat coordinates.\n   */\n\n\n  GML3.prototype.readFlatPos_ = function readFlatPos_(node, objectStack) {\n    var s = getAllTextContent(node, false);\n    var re = /^\\s*([+\\-]?\\d*\\.?\\d+(?:[eE][+\\-]?\\d+)?)\\s*/;\n    /** @type {Array<number>} */\n\n    var flatCoordinates = [];\n    var m;\n\n    while (m = re.exec(s)) {\n      flatCoordinates.push(parseFloat(m[1]));\n      s = s.substr(m[0].length);\n    }\n\n    if (s !== '') {\n      return undefined;\n    }\n\n    var context = objectStack[0];\n    var containerSrs = context['srsName'];\n    var axisOrientation = 'enu';\n\n    if (containerSrs) {\n      var proj = getProjection(containerSrs);\n      axisOrientation = proj.getAxisOrientation();\n    }\n\n    if (axisOrientation === 'neu') {\n      var i, ii;\n\n      for (i = 0, ii = flatCoordinates.length; i < ii; i += 3) {\n        var y = flatCoordinates[i];\n        var x = flatCoordinates[i + 1];\n        flatCoordinates[i] = x;\n        flatCoordinates[i + 1] = y;\n      }\n    }\n\n    var len = flatCoordinates.length;\n\n    if (len == 2) {\n      flatCoordinates.push(0);\n    }\n\n    if (len === 0) {\n      return undefined;\n    }\n\n    return flatCoordinates;\n  };\n  /**\n   * @param {Element} node Node.\n   * @param {Array<*>} objectStack Object stack.\n   * @private\n   * @return {Array<number>|undefined} Flat coordinates.\n   */\n\n\n  GML3.prototype.readFlatPosList_ = function readFlatPosList_(node, objectStack) {\n    var s = getAllTextContent(node, false).replace(/^\\s*|\\s*$/g, '');\n    var context = objectStack[0];\n    var containerSrs = context['srsName'];\n    var contextDimension = context['srsDimension'];\n    var axisOrientation = 'enu';\n\n    if (containerSrs) {\n      var proj = getProjection(containerSrs);\n      axisOrientation = proj.getAxisOrientation();\n    }\n\n    var coords = s.split(/\\s+/); // The \"dimension\" attribute is from the GML 3.0.1 spec.\n\n    var dim = 2;\n\n    if (node.getAttribute('srsDimension')) {\n      dim = readNonNegativeIntegerString(node.getAttribute('srsDimension'));\n    } else if (node.getAttribute('dimension')) {\n      dim = readNonNegativeIntegerString(node.getAttribute('dimension'));\n    } else if (\n    /** @type {Element} */\n    node.parentNode.getAttribute('srsDimension')) {\n      dim = readNonNegativeIntegerString(\n      /** @type {Element} */\n      node.parentNode.getAttribute('srsDimension'));\n    } else if (contextDimension) {\n      dim = readNonNegativeIntegerString(contextDimension);\n    }\n\n    var x, y, z;\n    var flatCoordinates = [];\n\n    for (var i = 0, ii = coords.length; i < ii; i += dim) {\n      x = parseFloat(coords[i]);\n      y = parseFloat(coords[i + 1]);\n      z = dim === 3 ? parseFloat(coords[i + 2]) : 0;\n\n      if (axisOrientation.substr(0, 2) === 'en') {\n        flatCoordinates.push(x, y, z);\n      } else {\n        flatCoordinates.push(y, x, z);\n      }\n    }\n\n    return flatCoordinates;\n  };\n  /**\n   * @param {Element} node Node.\n   * @param {import(\"../geom/Point.js\").default} value Point geometry.\n   * @param {Array<*>} objectStack Node stack.\n   * @private\n   */\n\n\n  GML3.prototype.writePos_ = function writePos_(node, value, objectStack) {\n    var context = objectStack[objectStack.length - 1];\n    var hasZ = context['hasZ'];\n    var srsDimension = hasZ ? '3' : '2';\n    node.setAttribute('srsDimension', srsDimension);\n    var srsName = context['srsName'];\n    var axisOrientation = 'enu';\n\n    if (srsName) {\n      axisOrientation = getProjection(srsName).getAxisOrientation();\n    }\n\n    var point = value.getCoordinates();\n    var coords; // only 2d for simple features profile\n\n    if (axisOrientation.substr(0, 2) === 'en') {\n      coords = point[0] + ' ' + point[1];\n    } else {\n      coords = point[1] + ' ' + point[0];\n    }\n\n    if (hasZ) {\n      // For newly created points, Z can be undefined.\n      var z = point[2] || 0;\n      coords += ' ' + z;\n    }\n\n    writeStringTextNode(node, coords);\n  };\n  /**\n   * @param {Array<number>} point Point geometry.\n   * @param {string=} opt_srsName Optional srsName\n   * @param {boolean=} opt_hasZ whether the geometry has a Z coordinate (is 3D) or not.\n   * @return {string} The coords string.\n   * @private\n   */\n\n\n  GML3.prototype.getCoords_ = function getCoords_(point, opt_srsName, opt_hasZ) {\n    var axisOrientation = 'enu';\n\n    if (opt_srsName) {\n      axisOrientation = getProjection(opt_srsName).getAxisOrientation();\n    }\n\n    var coords = axisOrientation.substr(0, 2) === 'en' ? point[0] + ' ' + point[1] : point[1] + ' ' + point[0];\n\n    if (opt_hasZ) {\n      // For newly created points, Z can be undefined.\n      var z = point[2] || 0;\n      coords += ' ' + z;\n    }\n\n    return coords;\n  };\n  /**\n   * @param {Element} node Node.\n   * @param {LineString|import(\"../geom/LinearRing.js\").default} value Geometry.\n   * @param {Array<*>} objectStack Node stack.\n   * @private\n   */\n\n\n  GML3.prototype.writePosList_ = function writePosList_(node, value, objectStack) {\n    var context = objectStack[objectStack.length - 1];\n    var hasZ = context['hasZ'];\n    var srsDimension = hasZ ? '3' : '2';\n    node.setAttribute('srsDimension', srsDimension);\n    var srsName = context['srsName']; // only 2d for simple features profile\n\n    var points = value.getCoordinates();\n    var len = points.length;\n    var parts = new Array(len);\n    var point;\n\n    for (var i = 0; i < len; ++i) {\n      point = points[i];\n      parts[i] = this.getCoords_(point, srsName, hasZ);\n    }\n\n    writeStringTextNode(node, parts.join(' '));\n  };\n  /**\n   * @param {Element} node Node.\n   * @param {import(\"../geom/Point.js\").default} geometry Point geometry.\n   * @param {Array<*>} objectStack Node stack.\n   * @private\n   */\n\n\n  GML3.prototype.writePoint_ = function writePoint_(node, geometry, objectStack) {\n    var context = objectStack[objectStack.length - 1];\n    var srsName = context['srsName'];\n\n    if (srsName) {\n      node.setAttribute('srsName', srsName);\n    }\n\n    var pos = createElementNS(node.namespaceURI, 'pos');\n    node.appendChild(pos);\n    this.writePos_(pos, geometry, objectStack);\n  };\n  /**\n   * @param {Element} node Node.\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @param {Array<*>} objectStack Node stack.\n   */\n\n\n  GML3.prototype.writeEnvelope = function writeEnvelope(node, extent, objectStack) {\n    var context = objectStack[objectStack.length - 1];\n    var srsName = context['srsName'];\n\n    if (srsName) {\n      node.setAttribute('srsName', srsName);\n    }\n\n    var keys = ['lowerCorner', 'upperCorner'];\n    var values = [extent[0] + ' ' + extent[1], extent[2] + ' ' + extent[3]];\n    pushSerializeAndPop(\n    /** @type {import(\"../xml.js\").NodeStackItem} */\n    {\n      node: node\n    }, this.ENVELOPE_SERIALIZERS_, OBJECT_PROPERTY_NODE_FACTORY, values, objectStack, keys, this);\n  };\n  /**\n   * @param {Element} node Node.\n   * @param {import(\"../geom/LinearRing.js\").default} geometry LinearRing geometry.\n   * @param {Array<*>} objectStack Node stack.\n   * @private\n   */\n\n\n  GML3.prototype.writeLinearRing_ = function writeLinearRing_(node, geometry, objectStack) {\n    var context = objectStack[objectStack.length - 1];\n    var srsName = context['srsName'];\n\n    if (srsName) {\n      node.setAttribute('srsName', srsName);\n    }\n\n    var posList = createElementNS(node.namespaceURI, 'posList');\n    node.appendChild(posList);\n    this.writePosList_(posList, geometry, objectStack);\n  };\n  /**\n   * @param {*} value Value.\n   * @param {Array<*>} objectStack Object stack.\n   * @param {string=} opt_nodeName Node name.\n   * @return {Node} Node.\n   * @private\n   */\n\n\n  GML3.prototype.RING_NODE_FACTORY_ = function RING_NODE_FACTORY_(value, objectStack, opt_nodeName) {\n    var context = objectStack[objectStack.length - 1];\n    var parentNode = context.node;\n    var exteriorWritten = context['exteriorWritten'];\n\n    if (exteriorWritten === undefined) {\n      context['exteriorWritten'] = true;\n    }\n\n    return createElementNS(parentNode.namespaceURI, exteriorWritten !== undefined ? 'interior' : 'exterior');\n  };\n  /**\n   * @param {Element} node Node.\n   * @param {Polygon} geometry Polygon geometry.\n   * @param {Array<*>} objectStack Node stack.\n   * @private\n   */\n\n\n  GML3.prototype.writeSurfaceOrPolygon_ = function writeSurfaceOrPolygon_(node, geometry, objectStack) {\n    var context = objectStack[objectStack.length - 1];\n    var hasZ = context['hasZ'];\n    var srsName = context['srsName'];\n\n    if (node.nodeName !== 'PolygonPatch' && srsName) {\n      node.setAttribute('srsName', srsName);\n    }\n\n    if (node.nodeName === 'Polygon' || node.nodeName === 'PolygonPatch') {\n      var rings = geometry.getLinearRings();\n      pushSerializeAndPop({\n        node: node,\n        hasZ: hasZ,\n        srsName: srsName\n      }, this.RING_SERIALIZERS_, this.RING_NODE_FACTORY_, rings, objectStack, undefined, this);\n    } else if (node.nodeName === 'Surface') {\n      var patches = createElementNS(node.namespaceURI, 'patches');\n      node.appendChild(patches);\n      this.writeSurfacePatches_(patches, geometry, objectStack);\n    }\n  };\n  /**\n   * @param {Element} node Node.\n   * @param {LineString} geometry LineString geometry.\n   * @param {Array<*>} objectStack Node stack.\n   * @private\n   */\n\n\n  GML3.prototype.writeCurveOrLineString_ = function writeCurveOrLineString_(node, geometry, objectStack) {\n    var context = objectStack[objectStack.length - 1];\n    var srsName = context['srsName'];\n\n    if (node.nodeName !== 'LineStringSegment' && srsName) {\n      node.setAttribute('srsName', srsName);\n    }\n\n    if (node.nodeName === 'LineString' || node.nodeName === 'LineStringSegment') {\n      var posList = createElementNS(node.namespaceURI, 'posList');\n      node.appendChild(posList);\n      this.writePosList_(posList, geometry, objectStack);\n    } else if (node.nodeName === 'Curve') {\n      var segments = createElementNS(node.namespaceURI, 'segments');\n      node.appendChild(segments);\n      this.writeCurveSegments_(segments, geometry, objectStack);\n    }\n  };\n  /**\n   * @param {Element} node Node.\n   * @param {MultiPolygon} geometry MultiPolygon geometry.\n   * @param {Array<*>} objectStack Node stack.\n   * @private\n   */\n\n\n  GML3.prototype.writeMultiSurfaceOrPolygon_ = function writeMultiSurfaceOrPolygon_(node, geometry, objectStack) {\n    var context = objectStack[objectStack.length - 1];\n    var hasZ = context['hasZ'];\n    var srsName = context['srsName'];\n    var surface = context['surface'];\n\n    if (srsName) {\n      node.setAttribute('srsName', srsName);\n    }\n\n    var polygons = geometry.getPolygons();\n    pushSerializeAndPop({\n      node: node,\n      hasZ: hasZ,\n      srsName: srsName,\n      surface: surface\n    }, this.SURFACEORPOLYGONMEMBER_SERIALIZERS_, this.MULTIGEOMETRY_MEMBER_NODE_FACTORY_, polygons, objectStack, undefined, this);\n  };\n  /**\n   * @param {Element} node Node.\n   * @param {import(\"../geom/MultiPoint.js\").default} geometry MultiPoint geometry.\n   * @param {Array<*>} objectStack Node stack.\n   * @private\n   */\n\n\n  GML3.prototype.writeMultiPoint_ = function writeMultiPoint_(node, geometry, objectStack) {\n    var context = objectStack[objectStack.length - 1];\n    var srsName = context['srsName'];\n    var hasZ = context['hasZ'];\n\n    if (srsName) {\n      node.setAttribute('srsName', srsName);\n    }\n\n    var points = geometry.getPoints();\n    pushSerializeAndPop({\n      node: node,\n      hasZ: hasZ,\n      srsName: srsName\n    }, this.POINTMEMBER_SERIALIZERS_, makeSimpleNodeFactory('pointMember'), points, objectStack, undefined, this);\n  };\n  /**\n   * @param {Element} node Node.\n   * @param {MultiLineString} geometry MultiLineString geometry.\n   * @param {Array<*>} objectStack Node stack.\n   * @private\n   */\n\n\n  GML3.prototype.writeMultiCurveOrLineString_ = function writeMultiCurveOrLineString_(node, geometry, objectStack) {\n    var context = objectStack[objectStack.length - 1];\n    var hasZ = context['hasZ'];\n    var srsName = context['srsName'];\n    var curve = context['curve'];\n\n    if (srsName) {\n      node.setAttribute('srsName', srsName);\n    }\n\n    var lines = geometry.getLineStrings();\n    pushSerializeAndPop({\n      node: node,\n      hasZ: hasZ,\n      srsName: srsName,\n      curve: curve\n    }, this.LINESTRINGORCURVEMEMBER_SERIALIZERS_, this.MULTIGEOMETRY_MEMBER_NODE_FACTORY_, lines, objectStack, undefined, this);\n  };\n  /**\n   * @param {Node} node Node.\n   * @param {import(\"../geom/LinearRing.js\").default} ring LinearRing geometry.\n   * @param {Array<*>} objectStack Node stack.\n   * @private\n   */\n\n\n  GML3.prototype.writeRing_ = function writeRing_(node, ring, objectStack) {\n    var linearRing = createElementNS(node.namespaceURI, 'LinearRing');\n    node.appendChild(linearRing);\n    this.writeLinearRing_(linearRing, ring, objectStack);\n  };\n  /**\n   * @param {Node} node Node.\n   * @param {Polygon} polygon Polygon geometry.\n   * @param {Array<*>} objectStack Node stack.\n   * @private\n   */\n\n\n  GML3.prototype.writeSurfaceOrPolygonMember_ = function writeSurfaceOrPolygonMember_(node, polygon, objectStack) {\n    var child = this.GEOMETRY_NODE_FACTORY_(polygon, objectStack);\n\n    if (child) {\n      node.appendChild(child);\n      this.writeSurfaceOrPolygon_(child, polygon, objectStack);\n    }\n  };\n  /**\n   * @param {Node} node Node.\n   * @param {import(\"../geom/Point.js\").default} point Point geometry.\n   * @param {Array<*>} objectStack Node stack.\n   * @private\n   */\n\n\n  GML3.prototype.writePointMember_ = function writePointMember_(node, point, objectStack) {\n    var child = createElementNS(node.namespaceURI, 'Point');\n    node.appendChild(child);\n    this.writePoint_(child, point, objectStack);\n  };\n  /**\n   * @param {Node} node Node.\n   * @param {LineString} line LineString geometry.\n   * @param {Array<*>} objectStack Node stack.\n   * @private\n   */\n\n\n  GML3.prototype.writeLineStringOrCurveMember_ = function writeLineStringOrCurveMember_(node, line, objectStack) {\n    var child = this.GEOMETRY_NODE_FACTORY_(line, objectStack);\n\n    if (child) {\n      node.appendChild(child);\n      this.writeCurveOrLineString_(child, line, objectStack);\n    }\n  };\n  /**\n   * @param {Node} node Node.\n   * @param {Polygon} polygon Polygon geometry.\n   * @param {Array<*>} objectStack Node stack.\n   * @private\n   */\n\n\n  GML3.prototype.writeSurfacePatches_ = function writeSurfacePatches_(node, polygon, objectStack) {\n    var child = createElementNS(node.namespaceURI, 'PolygonPatch');\n    node.appendChild(child);\n    this.writeSurfaceOrPolygon_(child, polygon, objectStack);\n  };\n  /**\n   * @param {Node} node Node.\n   * @param {LineString} line LineString geometry.\n   * @param {Array<*>} objectStack Node stack.\n   * @private\n   */\n\n\n  GML3.prototype.writeCurveSegments_ = function writeCurveSegments_(node, line, objectStack) {\n    var child = createElementNS(node.namespaceURI, 'LineStringSegment');\n    node.appendChild(child);\n    this.writeCurveOrLineString_(child, line, objectStack);\n  };\n  /**\n   * @param {Node} node Node.\n   * @param {import(\"../geom/Geometry.js\").default|import(\"../extent.js\").Extent} geometry Geometry.\n   * @param {Array<*>} objectStack Node stack.\n   */\n\n\n  GML3.prototype.writeGeometryElement = function writeGeometryElement(node, geometry, objectStack) {\n    var context =\n    /** @type {import(\"./Feature.js\").WriteOptions} */\n    objectStack[objectStack.length - 1];\n    var item = assign({}, context);\n    item['node'] = node;\n    var value;\n\n    if (Array.isArray(geometry)) {\n      if (context.dataProjection) {\n        value = transformExtent(geometry, context.featureProjection, context.dataProjection);\n      } else {\n        value = geometry;\n      }\n    } else {\n      value = transformWithOptions(\n      /** @type {import(\"../geom/Geometry.js\").default} */\n      geometry, true, context);\n    }\n\n    pushSerializeAndPop(\n    /** @type {import(\"../xml.js\").NodeStackItem} */\n    item, this.GEOMETRY_SERIALIZERS_, this.GEOMETRY_NODE_FACTORY_, [value], objectStack, undefined, this);\n  };\n  /**\n   * @param {Element} node Node.\n   * @param {import(\"../Feature.js\").default} feature Feature.\n   * @param {Array<*>} objectStack Node stack.\n   */\n\n\n  GML3.prototype.writeFeatureElement = function writeFeatureElement(node, feature, objectStack) {\n    var fid = feature.getId();\n\n    if (fid) {\n      node.setAttribute('fid',\n      /** @type {string} */\n      fid);\n    }\n\n    var context =\n    /** @type {Object} */\n    objectStack[objectStack.length - 1];\n    var featureNS = context['featureNS'];\n    var geometryName = feature.getGeometryName();\n\n    if (!context.serializers) {\n      context.serializers = {};\n      context.serializers[featureNS] = {};\n    }\n\n    var properties = feature.getProperties();\n    var keys = [];\n    var values = [];\n\n    for (var key in properties) {\n      var value = properties[key];\n\n      if (value !== null) {\n        keys.push(key);\n        values.push(value);\n\n        if (key == geometryName || typeof\n        /** @type {?} */\n        value.getSimplifiedGeometry === 'function') {\n          if (!(key in context.serializers[featureNS])) {\n            context.serializers[featureNS][key] = makeChildAppender(this.writeGeometryElement, this);\n          }\n        } else {\n          if (!(key in context.serializers[featureNS])) {\n            context.serializers[featureNS][key] = makeChildAppender(writeStringTextNode);\n          }\n        }\n      }\n    }\n\n    var item = assign({}, context);\n    item.node = node;\n    pushSerializeAndPop(\n    /** @type {import(\"../xml.js\").NodeStackItem} */\n    item, context.serializers, makeSimpleNodeFactory(undefined, featureNS), values, objectStack, keys);\n  };\n  /**\n   * @param {Node} node Node.\n   * @param {Array<import(\"../Feature.js\").default>} features Features.\n   * @param {Array<*>} objectStack Node stack.\n   * @private\n   */\n\n\n  GML3.prototype.writeFeatureMembers_ = function writeFeatureMembers_(node, features, objectStack) {\n    var context =\n    /** @type {Object} */\n    objectStack[objectStack.length - 1];\n    var featureType = context['featureType'];\n    var featureNS = context['featureNS'];\n    /** @type {Object<string, Object<string, import(\"../xml.js\").Serializer>>} */\n\n    var serializers = {};\n    serializers[featureNS] = {};\n    serializers[featureNS][featureType] = makeChildAppender(this.writeFeatureElement, this);\n    var item = assign({}, context);\n    item.node = node;\n    pushSerializeAndPop(\n    /** @type {import(\"../xml.js\").NodeStackItem} */\n    item, serializers, makeSimpleNodeFactory(featureType, featureNS), features, objectStack);\n  };\n  /**\n   * @const\n   * @param {*} value Value.\n   * @param {Array<*>} objectStack Object stack.\n   * @param {string=} opt_nodeName Node name.\n   * @return {Node|undefined} Node.\n   * @private\n   */\n\n\n  GML3.prototype.MULTIGEOMETRY_MEMBER_NODE_FACTORY_ = function MULTIGEOMETRY_MEMBER_NODE_FACTORY_(value, objectStack, opt_nodeName) {\n    var parentNode = objectStack[objectStack.length - 1].node;\n    return createElementNS(this.namespace, MULTIGEOMETRY_TO_MEMBER_NODENAME[parentNode.nodeName]);\n  };\n  /**\n   * @const\n   * @param {*} value Value.\n   * @param {Array<*>} objectStack Object stack.\n   * @param {string=} opt_nodeName Node name.\n   * @return {Element|undefined} Node.\n   * @private\n   */\n\n\n  GML3.prototype.GEOMETRY_NODE_FACTORY_ = function GEOMETRY_NODE_FACTORY_(value, objectStack, opt_nodeName) {\n    var context = objectStack[objectStack.length - 1];\n    var multiSurface = context['multiSurface'];\n    var surface = context['surface'];\n    var curve = context['curve'];\n    var multiCurve = context['multiCurve'];\n    var nodeName;\n\n    if (!Array.isArray(value)) {\n      nodeName =\n      /** @type {import(\"../geom/Geometry.js\").default} */\n      value.getType();\n\n      if (nodeName === 'MultiPolygon' && multiSurface === true) {\n        nodeName = 'MultiSurface';\n      } else if (nodeName === 'Polygon' && surface === true) {\n        nodeName = 'Surface';\n      } else if (nodeName === 'LineString' && curve === true) {\n        nodeName = 'Curve';\n      } else if (nodeName === 'MultiLineString' && multiCurve === true) {\n        nodeName = 'MultiCurve';\n      }\n    } else {\n      nodeName = 'Envelope';\n    }\n\n    return createElementNS(this.namespace, nodeName);\n  };\n  /**\n   * Encode a geometry in GML 3.1.1 Simple Features.\n   *\n   * @param {import(\"../geom/Geometry.js\").default} geometry Geometry.\n   * @param {import(\"./Feature.js\").WriteOptions=} opt_options Options.\n   * @return {Node} Node.\n   * @override\n   * @api\n   */\n\n\n  GML3.prototype.writeGeometryNode = function writeGeometryNode(geometry, opt_options) {\n    opt_options = this.adaptOptions(opt_options);\n    var geom = createElementNS(this.namespace, 'geom');\n    var context = {\n      node: geom,\n      hasZ: this.hasZ,\n      srsName: this.srsName,\n      curve: this.curve_,\n      surface: this.surface_,\n      multiSurface: this.multiSurface_,\n      multiCurve: this.multiCurve_\n    };\n\n    if (opt_options) {\n      assign(context, opt_options);\n    }\n\n    this.writeGeometryElement(geom, geometry, [context]);\n    return geom;\n  };\n  /**\n   * Encode an array of features in the GML 3.1.1 format as an XML node.\n   *\n   * @param {Array<import(\"../Feature.js\").default>} features Features.\n   * @param {import(\"./Feature.js\").WriteOptions=} opt_options Options.\n   * @return {Element} Node.\n   * @override\n   * @api\n   */\n\n\n  GML3.prototype.writeFeaturesNode = function writeFeaturesNode(features, opt_options) {\n    opt_options = this.adaptOptions(opt_options);\n    var node = createElementNS(this.namespace, 'featureMembers');\n    node.setAttributeNS(XML_SCHEMA_INSTANCE_URI, 'xsi:schemaLocation', this.schemaLocation);\n    var context = {\n      srsName: this.srsName,\n      hasZ: this.hasZ,\n      curve: this.curve_,\n      surface: this.surface_,\n      multiSurface: this.multiSurface_,\n      multiCurve: this.multiCurve_,\n      featureNS: this.featureNS,\n      featureType: this.featureType\n    };\n\n    if (opt_options) {\n      assign(context, opt_options);\n    }\n\n    this.writeFeatureMembers_(node, features, [context]);\n    return node;\n  };\n\n  return GML3;\n}(GMLBase);\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n * @protected\n */\n\n\nGML3.prototype.GEOMETRY_FLAT_COORDINATES_PARSERS = {\n  'http://www.opengis.net/gml': {\n    'pos': makeReplacer(GML3.prototype.readFlatPos_),\n    'posList': makeReplacer(GML3.prototype.readFlatPosList_)\n  }\n};\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n * @protected\n */\n\nGML3.prototype.FLAT_LINEAR_RINGS_PARSERS = {\n  'http://www.opengis.net/gml': {\n    'interior': GML3.prototype.interiorParser_,\n    'exterior': GML3.prototype.exteriorParser_\n  }\n};\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n * @protected\n */\n\nGML3.prototype.GEOMETRY_PARSERS = {\n  'http://www.opengis.net/gml': {\n    'Point': makeReplacer(GMLBase.prototype.readPoint),\n    'MultiPoint': makeReplacer(GMLBase.prototype.readMultiPoint),\n    'LineString': makeReplacer(GMLBase.prototype.readLineString),\n    'MultiLineString': makeReplacer(GMLBase.prototype.readMultiLineString),\n    'LinearRing': makeReplacer(GMLBase.prototype.readLinearRing),\n    'Polygon': makeReplacer(GMLBase.prototype.readPolygon),\n    'MultiPolygon': makeReplacer(GMLBase.prototype.readMultiPolygon),\n    'Surface': makeReplacer(GML3.prototype.readSurface_),\n    'MultiSurface': makeReplacer(GML3.prototype.readMultiSurface_),\n    'Curve': makeReplacer(GML3.prototype.readCurve_),\n    'MultiCurve': makeReplacer(GML3.prototype.readMultiCurve_),\n    'Envelope': makeReplacer(GML3.prototype.readEnvelope_)\n  }\n};\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n * @private\n */\n\nGML3.prototype.MULTICURVE_PARSERS_ = {\n  'http://www.opengis.net/gml': {\n    'curveMember': makeArrayPusher(GML3.prototype.curveMemberParser_),\n    'curveMembers': makeArrayPusher(GML3.prototype.curveMemberParser_)\n  }\n};\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n * @private\n */\n\nGML3.prototype.MULTISURFACE_PARSERS_ = {\n  'http://www.opengis.net/gml': {\n    'surfaceMember': makeArrayPusher(GML3.prototype.surfaceMemberParser_),\n    'surfaceMembers': makeArrayPusher(GML3.prototype.surfaceMemberParser_)\n  }\n};\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n * @private\n */\n\nGML3.prototype.CURVEMEMBER_PARSERS_ = {\n  'http://www.opengis.net/gml': {\n    'LineString': makeArrayPusher(GMLBase.prototype.readLineString),\n    'Curve': makeArrayPusher(GML3.prototype.readCurve_)\n  }\n};\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n * @private\n */\n\nGML3.prototype.SURFACEMEMBER_PARSERS_ = {\n  'http://www.opengis.net/gml': {\n    'Polygon': makeArrayPusher(GMLBase.prototype.readPolygon),\n    'Surface': makeArrayPusher(GML3.prototype.readSurface_)\n  }\n};\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n * @private\n */\n\nGML3.prototype.SURFACE_PARSERS_ = {\n  'http://www.opengis.net/gml': {\n    'patches': makeReplacer(GML3.prototype.readPatch_)\n  }\n};\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n * @private\n */\n\nGML3.prototype.CURVE_PARSERS_ = {\n  'http://www.opengis.net/gml': {\n    'segments': makeReplacer(GML3.prototype.readSegment_)\n  }\n};\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n * @private\n */\n\nGML3.prototype.ENVELOPE_PARSERS_ = {\n  'http://www.opengis.net/gml': {\n    'lowerCorner': makeArrayPusher(GML3.prototype.readFlatPosList_),\n    'upperCorner': makeArrayPusher(GML3.prototype.readFlatPosList_)\n  }\n};\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n * @private\n */\n\nGML3.prototype.PATCHES_PARSERS_ = {\n  'http://www.opengis.net/gml': {\n    'PolygonPatch': makeReplacer(GML3.prototype.readPolygonPatch_)\n  }\n};\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n * @private\n */\n\nGML3.prototype.SEGMENTS_PARSERS_ = {\n  'http://www.opengis.net/gml': {\n    'LineStringSegment': makeReplacer(GML3.prototype.readLineStringSegment_)\n  }\n};\n/**\n * Encode an array of features in GML 3.1.1 Simple Features.\n *\n * @function\n * @param {Array<import(\"../Feature.js\").default>} features Features.\n * @param {import(\"./Feature.js\").WriteOptions=} opt_options Options.\n * @return {string} Result.\n * @api\n */\n\nGML3.prototype.writeFeatures;\n/**\n * @type {Object<string, Object<string, import(\"../xml.js\").Serializer>>}\n * @private\n */\n\nGML3.prototype.RING_SERIALIZERS_ = {\n  'http://www.opengis.net/gml': {\n    'exterior': makeChildAppender(GML3.prototype.writeRing_),\n    'interior': makeChildAppender(GML3.prototype.writeRing_)\n  }\n};\n/**\n * @type {Object<string, Object<string, import(\"../xml.js\").Serializer>>}\n * @private\n */\n\nGML3.prototype.ENVELOPE_SERIALIZERS_ = {\n  'http://www.opengis.net/gml': {\n    'lowerCorner': makeChildAppender(writeStringTextNode),\n    'upperCorner': makeChildAppender(writeStringTextNode)\n  }\n};\n/**\n * @type {Object<string, Object<string, import(\"../xml.js\").Serializer>>}\n * @private\n */\n\nGML3.prototype.SURFACEORPOLYGONMEMBER_SERIALIZERS_ = {\n  'http://www.opengis.net/gml': {\n    'surfaceMember': makeChildAppender(GML3.prototype.writeSurfaceOrPolygonMember_),\n    'polygonMember': makeChildAppender(GML3.prototype.writeSurfaceOrPolygonMember_)\n  }\n};\n/**\n * @type {Object<string, Object<string, import(\"../xml.js\").Serializer>>}\n * @private\n */\n\nGML3.prototype.POINTMEMBER_SERIALIZERS_ = {\n  'http://www.opengis.net/gml': {\n    'pointMember': makeChildAppender(GML3.prototype.writePointMember_)\n  }\n};\n/**\n * @type {Object<string, Object<string, import(\"../xml.js\").Serializer>>}\n * @private\n */\n\nGML3.prototype.LINESTRINGORCURVEMEMBER_SERIALIZERS_ = {\n  'http://www.opengis.net/gml': {\n    'lineStringMember': makeChildAppender(GML3.prototype.writeLineStringOrCurveMember_),\n    'curveMember': makeChildAppender(GML3.prototype.writeLineStringOrCurveMember_)\n  }\n};\n/**\n * @type {Object<string, Object<string, import(\"../xml.js\").Serializer>>}\n * @private\n */\n\nGML3.prototype.GEOMETRY_SERIALIZERS_ = {\n  'http://www.opengis.net/gml': {\n    'Curve': makeChildAppender(GML3.prototype.writeCurveOrLineString_),\n    'MultiCurve': makeChildAppender(GML3.prototype.writeMultiCurveOrLineString_),\n    'Point': makeChildAppender(GML3.prototype.writePoint_),\n    'MultiPoint': makeChildAppender(GML3.prototype.writeMultiPoint_),\n    'LineString': makeChildAppender(GML3.prototype.writeCurveOrLineString_),\n    'MultiLineString': makeChildAppender(GML3.prototype.writeMultiCurveOrLineString_),\n    'LinearRing': makeChildAppender(GML3.prototype.writeLinearRing_),\n    'Polygon': makeChildAppender(GML3.prototype.writeSurfaceOrPolygon_),\n    'MultiPolygon': makeChildAppender(GML3.prototype.writeMultiSurfaceOrPolygon_),\n    'Surface': makeChildAppender(GML3.prototype.writeSurfaceOrPolygon_),\n    'MultiSurface': makeChildAppender(GML3.prototype.writeMultiSurfaceOrPolygon_),\n    'Envelope': makeChildAppender(GML3.prototype.writeEnvelope)\n  }\n};\nexport default GML3;","map":{"version":3,"sources":["../../../src/ol/format/GML3.js"],"names":["const","super","let"],"mappings":"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","sourcesContent":["/**\n * @module ol/format/GML3\n */\nimport {extend} from '../array.js';\nimport {createOrUpdate} from '../extent.js';\nimport {transformWithOptions} from './Feature.js';\nimport GMLBase, {GMLNS} from './GMLBase.js';\nimport {readNonNegativeIntegerString, writeStringTextNode} from './xsd.js';\nimport GeometryLayout from '../geom/GeometryLayout.js';\nimport LineString from '../geom/LineString.js';\nimport MultiLineString from '../geom/MultiLineString.js';\nimport MultiPolygon from '../geom/MultiPolygon.js';\nimport Polygon from '../geom/Polygon.js';\nimport {assign} from '../obj.js';\nimport {get as getProjection, transformExtent} from '../proj.js';\nimport {createElementNS, getAllTextContent, makeArrayPusher, makeChildAppender,\n  makeReplacer, makeSimpleNodeFactory, OBJECT_PROPERTY_NODE_FACTORY, parseNode,\n  pushParseAndPop, pushSerializeAndPop, XML_SCHEMA_INSTANCE_URI} from '../xml.js';\n\n\n/**\n * @const\n * @type {string}\n * @private\n */\nconst schemaLocation = GMLNS +\n    ' http://schemas.opengis.net/gml/3.1.1/profiles/gmlsfProfile/' +\n    '1.0.0/gmlsf.xsd';\n\n\n/**\n * @const\n * @type {Object<string, string>}\n */\nconst MULTIGEOMETRY_TO_MEMBER_NODENAME = {\n  'MultiLineString': 'lineStringMember',\n  'MultiCurve': 'curveMember',\n  'MultiPolygon': 'polygonMember',\n  'MultiSurface': 'surfaceMember'\n};\n\n\n/**\n * @classdesc\n * Feature format for reading and writing data in the GML format\n * version 3.1.1.\n * Currently only supports GML 3.1.1 Simple Features profile.\n *\n * @api\n */\nclass GML3 extends GMLBase {\n\n  /**\n   * @param {import(\"./GMLBase.js\").Options=} opt_options Optional configuration object.\n   */\n  constructor(opt_options) {\n    const options = /** @type {import(\"./GMLBase.js\").Options} */\n        (opt_options ? opt_options : {});\n\n    super(options);\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.surface_ = options.surface !== undefined ? options.surface : false;\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.curve_ = options.curve !== undefined ? options.curve : false;\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.multiCurve_ = options.multiCurve !== undefined ?\n      options.multiCurve : true;\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.multiSurface_ = options.multiSurface !== undefined ?\n      options.multiSurface : true;\n\n    /**\n     * @inheritDoc\n     */\n    this.schemaLocation = options.schemaLocation ?\n      options.schemaLocation : schemaLocation;\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.hasZ = options.hasZ !== undefined ?\n      options.hasZ : false;\n\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @param {Array<*>} objectStack Object stack.\n   * @private\n   * @return {MultiLineString|undefined} MultiLineString.\n   */\n  readMultiCurve_(node, objectStack) {\n    /** @type {Array<LineString>} */\n    const lineStrings = pushParseAndPop([],\n      this.MULTICURVE_PARSERS_, node, objectStack, this);\n    if (lineStrings) {\n      const multiLineString = new MultiLineString(lineStrings);\n      return multiLineString;\n    } else {\n      return undefined;\n    }\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @param {Array<*>} objectStack Object stack.\n   * @private\n   * @return {MultiPolygon|undefined} MultiPolygon.\n   */\n  readMultiSurface_(node, objectStack) {\n    /** @type {Array<Polygon>} */\n    const polygons = pushParseAndPop([],\n      this.MULTISURFACE_PARSERS_, node, objectStack, this);\n    if (polygons) {\n      return new MultiPolygon(polygons);\n    }\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @param {Array<*>} objectStack Object stack.\n   * @private\n   */\n  curveMemberParser_(node, objectStack) {\n    parseNode(this.CURVEMEMBER_PARSERS_, node, objectStack, this);\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @param {Array<*>} objectStack Object stack.\n   * @private\n   */\n  surfaceMemberParser_(node, objectStack) {\n    parseNode(this.SURFACEMEMBER_PARSERS_,\n      node, objectStack, this);\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @param {Array<*>} objectStack Object stack.\n   * @private\n   * @return {Array<(Array<number>)>|undefined} flat coordinates.\n   */\n  readPatch_(node, objectStack) {\n    return pushParseAndPop([null],\n      this.PATCHES_PARSERS_, node, objectStack, this);\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @param {Array<*>} objectStack Object stack.\n   * @private\n   * @return {Array<number>|undefined} flat coordinates.\n   */\n  readSegment_(node, objectStack) {\n    return pushParseAndPop([null],\n      this.SEGMENTS_PARSERS_, node, objectStack, this);\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @param {Array<*>} objectStack Object stack.\n   * @private\n   * @return {Array<(Array<number>)>|undefined} flat coordinates.\n   */\n  readPolygonPatch_(node, objectStack) {\n    return pushParseAndPop([null],\n      this.FLAT_LINEAR_RINGS_PARSERS, node, objectStack, this);\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @param {Array<*>} objectStack Object stack.\n   * @private\n   * @return {Array<number>|undefined} flat coordinates.\n   */\n  readLineStringSegment_(node, objectStack) {\n    return pushParseAndPop([null],\n      this.GEOMETRY_FLAT_COORDINATES_PARSERS,\n      node, objectStack, this);\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @param {Array<*>} objectStack Object stack.\n   * @private\n   */\n  interiorParser_(node, objectStack) {\n    /** @type {Array<number>|undefined} */\n    const flatLinearRing = pushParseAndPop(undefined,\n      this.RING_PARSERS, node, objectStack, this);\n    if (flatLinearRing) {\n      const flatLinearRings = /** @type {Array<Array<number>>} */\n          (objectStack[objectStack.length - 1]);\n      flatLinearRings.push(flatLinearRing);\n    }\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @param {Array<*>} objectStack Object stack.\n   * @private\n   */\n  exteriorParser_(node, objectStack) {\n    /** @type {Array<number>|undefined} */\n    const flatLinearRing = pushParseAndPop(undefined,\n      this.RING_PARSERS, node, objectStack, this);\n    if (flatLinearRing) {\n      const flatLinearRings = /** @type {Array<Array<number>>} */\n          (objectStack[objectStack.length - 1]);\n      flatLinearRings[0] = flatLinearRing;\n    }\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @param {Array<*>} objectStack Object stack.\n   * @private\n   * @return {Polygon|undefined} Polygon.\n   */\n  readSurface_(node, objectStack) {\n    /** @type {Array<Array<number>>} */\n    const flatLinearRings = pushParseAndPop([null],\n      this.SURFACE_PARSERS_, node, objectStack, this);\n    if (flatLinearRings && flatLinearRings[0]) {\n      const flatCoordinates = flatLinearRings[0];\n      const ends = [flatCoordinates.length];\n      let i, ii;\n      for (i = 1, ii = flatLinearRings.length; i < ii; ++i) {\n        extend(flatCoordinates, flatLinearRings[i]);\n        ends.push(flatCoordinates.length);\n      }\n      return new Polygon(flatCoordinates, GeometryLayout.XYZ, ends);\n    } else {\n      return undefined;\n    }\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @param {Array<*>} objectStack Object stack.\n   * @private\n   * @return {LineString|undefined} LineString.\n   */\n  readCurve_(node, objectStack) {\n    /** @type {Array<number>} */\n    const flatCoordinates = pushParseAndPop([null],\n      this.CURVE_PARSERS_, node, objectStack, this);\n    if (flatCoordinates) {\n      const lineString = new LineString(flatCoordinates, GeometryLayout.XYZ);\n      return lineString;\n    } else {\n      return undefined;\n    }\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @param {Array<*>} objectStack Object stack.\n   * @private\n   * @return {import(\"../extent.js\").Extent|undefined} Envelope.\n   */\n  readEnvelope_(node, objectStack) {\n    /** @type {Array<number>} */\n    const flatCoordinates = pushParseAndPop([null],\n      this.ENVELOPE_PARSERS_, node, objectStack, this);\n    return createOrUpdate(flatCoordinates[1][0],\n      flatCoordinates[1][1], flatCoordinates[2][0],\n      flatCoordinates[2][1]);\n  }\n\n  /**\n   * @param {Node} node Node.\n   * @param {Array<*>} objectStack Object stack.\n   * @private\n   * @return {Array<number>|undefined} Flat coordinates.\n   */\n  readFlatPos_(node, objectStack) {\n    let s = getAllTextContent(node, false);\n    const re = /^\\s*([+\\-]?\\d*\\.?\\d+(?:[eE][+\\-]?\\d+)?)\\s*/;\n    /** @type {Array<number>} */\n    const flatCoordinates = [];\n    let m;\n    while ((m = re.exec(s))) {\n      flatCoordinates.push(parseFloat(m[1]));\n      s = s.substr(m[0].length);\n    }\n    if (s !== '') {\n      return undefined;\n    }\n    const context = objectStack[0];\n    const containerSrs = context['srsName'];\n    let axisOrientation = 'enu';\n    if (containerSrs) {\n      const proj = getProjection(containerSrs);\n      axisOrientation = proj.getAxisOrientation();\n    }\n    if (axisOrientation === 'neu') {\n      let i, ii;\n      for (i = 0, ii = flatCoordinates.length; i < ii; i += 3) {\n        const y = flatCoordinates[i];\n        const x = flatCoordinates[i + 1];\n        flatCoordinates[i] = x;\n        flatCoordinates[i + 1] = y;\n      }\n    }\n    const len = flatCoordinates.length;\n    if (len == 2) {\n      flatCoordinates.push(0);\n    }\n    if (len === 0) {\n      return undefined;\n    }\n    return flatCoordinates;\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @param {Array<*>} objectStack Object stack.\n   * @private\n   * @return {Array<number>|undefined} Flat coordinates.\n   */\n  readFlatPosList_(node, objectStack) {\n    const s = getAllTextContent(node, false).replace(/^\\s*|\\s*$/g, '');\n    const context = objectStack[0];\n    const containerSrs = context['srsName'];\n    const contextDimension = context['srsDimension'];\n    let axisOrientation = 'enu';\n    if (containerSrs) {\n      const proj = getProjection(containerSrs);\n      axisOrientation = proj.getAxisOrientation();\n    }\n    const coords = s.split(/\\s+/);\n    // The \"dimension\" attribute is from the GML 3.0.1 spec.\n    let dim = 2;\n    if (node.getAttribute('srsDimension')) {\n      dim = readNonNegativeIntegerString(\n        node.getAttribute('srsDimension'));\n    } else if (node.getAttribute('dimension')) {\n      dim = readNonNegativeIntegerString(\n        node.getAttribute('dimension'));\n    } else if (/** @type {Element} */ (node.parentNode).getAttribute('srsDimension')) {\n      dim = readNonNegativeIntegerString(\n        /** @type {Element} */ (node.parentNode).getAttribute('srsDimension'));\n    } else if (contextDimension) {\n      dim = readNonNegativeIntegerString(contextDimension);\n    }\n    let x, y, z;\n    const flatCoordinates = [];\n    for (let i = 0, ii = coords.length; i < ii; i += dim) {\n      x = parseFloat(coords[i]);\n      y = parseFloat(coords[i + 1]);\n      z = (dim === 3) ? parseFloat(coords[i + 2]) : 0;\n      if (axisOrientation.substr(0, 2) === 'en') {\n        flatCoordinates.push(x, y, z);\n      } else {\n        flatCoordinates.push(y, x, z);\n      }\n    }\n    return flatCoordinates;\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @param {import(\"../geom/Point.js\").default} value Point geometry.\n   * @param {Array<*>} objectStack Node stack.\n   * @private\n   */\n  writePos_(node, value, objectStack) {\n    const context = objectStack[objectStack.length - 1];\n    const hasZ = context['hasZ'];\n    const srsDimension = hasZ ? '3' : '2';\n    node.setAttribute('srsDimension', srsDimension);\n    const srsName = context['srsName'];\n    let axisOrientation = 'enu';\n    if (srsName) {\n      axisOrientation = getProjection(srsName).getAxisOrientation();\n    }\n    const point = value.getCoordinates();\n    let coords;\n    // only 2d for simple features profile\n    if (axisOrientation.substr(0, 2) === 'en') {\n      coords = (point[0] + ' ' + point[1]);\n    } else {\n      coords = (point[1] + ' ' + point[0]);\n    }\n    if (hasZ) {\n      // For newly created points, Z can be undefined.\n      const z = point[2] || 0;\n      coords += ' ' + z;\n    }\n    writeStringTextNode(node, coords);\n  }\n\n  /**\n   * @param {Array<number>} point Point geometry.\n   * @param {string=} opt_srsName Optional srsName\n   * @param {boolean=} opt_hasZ whether the geometry has a Z coordinate (is 3D) or not.\n   * @return {string} The coords string.\n   * @private\n   */\n  getCoords_(point, opt_srsName, opt_hasZ) {\n    let axisOrientation = 'enu';\n    if (opt_srsName) {\n      axisOrientation = getProjection(opt_srsName).getAxisOrientation();\n    }\n    let coords = ((axisOrientation.substr(0, 2) === 'en') ?\n      point[0] + ' ' + point[1] :\n      point[1] + ' ' + point[0]);\n    if (opt_hasZ) {\n      // For newly created points, Z can be undefined.\n      const z = point[2] || 0;\n      coords += ' ' + z;\n    }\n\n    return coords;\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @param {LineString|import(\"../geom/LinearRing.js\").default} value Geometry.\n   * @param {Array<*>} objectStack Node stack.\n   * @private\n   */\n  writePosList_(node, value, objectStack) {\n    const context = objectStack[objectStack.length - 1];\n    const hasZ = context['hasZ'];\n    const srsDimension = hasZ ? '3' : '2';\n    node.setAttribute('srsDimension', srsDimension);\n    const srsName = context['srsName'];\n    // only 2d for simple features profile\n    const points = value.getCoordinates();\n    const len = points.length;\n    const parts = new Array(len);\n    let point;\n    for (let i = 0; i < len; ++i) {\n      point = points[i];\n      parts[i] = this.getCoords_(point, srsName, hasZ);\n    }\n    writeStringTextNode(node, parts.join(' '));\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @param {import(\"../geom/Point.js\").default} geometry Point geometry.\n   * @param {Array<*>} objectStack Node stack.\n   * @private\n   */\n  writePoint_(node, geometry, objectStack) {\n    const context = objectStack[objectStack.length - 1];\n    const srsName = context['srsName'];\n    if (srsName) {\n      node.setAttribute('srsName', srsName);\n    }\n    const pos = createElementNS(node.namespaceURI, 'pos');\n    node.appendChild(pos);\n    this.writePos_(pos, geometry, objectStack);\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @param {Array<*>} objectStack Node stack.\n   */\n  writeEnvelope(node, extent, objectStack) {\n    const context = objectStack[objectStack.length - 1];\n    const srsName = context['srsName'];\n    if (srsName) {\n      node.setAttribute('srsName', srsName);\n    }\n    const keys = ['lowerCorner', 'upperCorner'];\n    const values = [extent[0] + ' ' + extent[1], extent[2] + ' ' + extent[3]];\n    pushSerializeAndPop(/** @type {import(\"../xml.js\").NodeStackItem} */\n      ({node: node}), this.ENVELOPE_SERIALIZERS_,\n      OBJECT_PROPERTY_NODE_FACTORY,\n      values,\n      objectStack, keys, this);\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @param {import(\"../geom/LinearRing.js\").default} geometry LinearRing geometry.\n   * @param {Array<*>} objectStack Node stack.\n   * @private\n   */\n  writeLinearRing_(node, geometry, objectStack) {\n    const context = objectStack[objectStack.length - 1];\n    const srsName = context['srsName'];\n    if (srsName) {\n      node.setAttribute('srsName', srsName);\n    }\n    const posList = createElementNS(node.namespaceURI, 'posList');\n    node.appendChild(posList);\n    this.writePosList_(posList, geometry, objectStack);\n  }\n\n  /**\n   * @param {*} value Value.\n   * @param {Array<*>} objectStack Object stack.\n   * @param {string=} opt_nodeName Node name.\n   * @return {Node} Node.\n   * @private\n   */\n  RING_NODE_FACTORY_(value, objectStack, opt_nodeName) {\n    const context = objectStack[objectStack.length - 1];\n    const parentNode = context.node;\n    const exteriorWritten = context['exteriorWritten'];\n    if (exteriorWritten === undefined) {\n      context['exteriorWritten'] = true;\n    }\n    return createElementNS(parentNode.namespaceURI,\n      exteriorWritten !== undefined ? 'interior' : 'exterior');\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @param {Polygon} geometry Polygon geometry.\n   * @param {Array<*>} objectStack Node stack.\n   * @private\n   */\n  writeSurfaceOrPolygon_(node, geometry, objectStack) {\n    const context = objectStack[objectStack.length - 1];\n    const hasZ = context['hasZ'];\n    const srsName = context['srsName'];\n    if (node.nodeName !== 'PolygonPatch' && srsName) {\n      node.setAttribute('srsName', srsName);\n    }\n    if (node.nodeName === 'Polygon' || node.nodeName === 'PolygonPatch') {\n      const rings = geometry.getLinearRings();\n      pushSerializeAndPop(\n        {node: node, hasZ: hasZ, srsName: srsName},\n        this.RING_SERIALIZERS_,\n        this.RING_NODE_FACTORY_,\n        rings, objectStack, undefined, this);\n    } else if (node.nodeName === 'Surface') {\n      const patches = createElementNS(node.namespaceURI, 'patches');\n      node.appendChild(patches);\n      this.writeSurfacePatches_(\n        patches, geometry, objectStack);\n    }\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @param {LineString} geometry LineString geometry.\n   * @param {Array<*>} objectStack Node stack.\n   * @private\n   */\n  writeCurveOrLineString_(node, geometry, objectStack) {\n    const context = objectStack[objectStack.length - 1];\n    const srsName = context['srsName'];\n    if (node.nodeName !== 'LineStringSegment' && srsName) {\n      node.setAttribute('srsName', srsName);\n    }\n    if (node.nodeName === 'LineString' ||\n        node.nodeName === 'LineStringSegment') {\n      const posList = createElementNS(node.namespaceURI, 'posList');\n      node.appendChild(posList);\n      this.writePosList_(posList, geometry, objectStack);\n    } else if (node.nodeName === 'Curve') {\n      const segments = createElementNS(node.namespaceURI, 'segments');\n      node.appendChild(segments);\n      this.writeCurveSegments_(segments,\n        geometry, objectStack);\n    }\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @param {MultiPolygon} geometry MultiPolygon geometry.\n   * @param {Array<*>} objectStack Node stack.\n   * @private\n   */\n  writeMultiSurfaceOrPolygon_(node, geometry, objectStack) {\n    const context = objectStack[objectStack.length - 1];\n    const hasZ = context['hasZ'];\n    const srsName = context['srsName'];\n    const surface = context['surface'];\n    if (srsName) {\n      node.setAttribute('srsName', srsName);\n    }\n    const polygons = geometry.getPolygons();\n    pushSerializeAndPop({node: node, hasZ: hasZ, srsName: srsName, surface: surface},\n      this.SURFACEORPOLYGONMEMBER_SERIALIZERS_,\n      this.MULTIGEOMETRY_MEMBER_NODE_FACTORY_, polygons,\n      objectStack, undefined, this);\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @param {import(\"../geom/MultiPoint.js\").default} geometry MultiPoint geometry.\n   * @param {Array<*>} objectStack Node stack.\n   * @private\n   */\n  writeMultiPoint_(node, geometry, objectStack) {\n    const context = objectStack[objectStack.length - 1];\n    const srsName = context['srsName'];\n    const hasZ = context['hasZ'];\n    if (srsName) {\n      node.setAttribute('srsName', srsName);\n    }\n    const points = geometry.getPoints();\n    pushSerializeAndPop({node: node, hasZ: hasZ, srsName: srsName},\n      this.POINTMEMBER_SERIALIZERS_,\n      makeSimpleNodeFactory('pointMember'), points,\n      objectStack, undefined, this);\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @param {MultiLineString} geometry MultiLineString geometry.\n   * @param {Array<*>} objectStack Node stack.\n   * @private\n   */\n  writeMultiCurveOrLineString_(node, geometry, objectStack) {\n    const context = objectStack[objectStack.length - 1];\n    const hasZ = context['hasZ'];\n    const srsName = context['srsName'];\n    const curve = context['curve'];\n    if (srsName) {\n      node.setAttribute('srsName', srsName);\n    }\n    const lines = geometry.getLineStrings();\n    pushSerializeAndPop({node: node, hasZ: hasZ, srsName: srsName, curve: curve},\n      this.LINESTRINGORCURVEMEMBER_SERIALIZERS_,\n      this.MULTIGEOMETRY_MEMBER_NODE_FACTORY_, lines,\n      objectStack, undefined, this);\n  }\n\n  /**\n   * @param {Node} node Node.\n   * @param {import(\"../geom/LinearRing.js\").default} ring LinearRing geometry.\n   * @param {Array<*>} objectStack Node stack.\n   * @private\n   */\n  writeRing_(node, ring, objectStack) {\n    const linearRing = createElementNS(node.namespaceURI, 'LinearRing');\n    node.appendChild(linearRing);\n    this.writeLinearRing_(linearRing, ring, objectStack);\n  }\n\n  /**\n   * @param {Node} node Node.\n   * @param {Polygon} polygon Polygon geometry.\n   * @param {Array<*>} objectStack Node stack.\n   * @private\n   */\n  writeSurfaceOrPolygonMember_(node, polygon, objectStack) {\n    const child = this.GEOMETRY_NODE_FACTORY_(\n      polygon, objectStack);\n    if (child) {\n      node.appendChild(child);\n      this.writeSurfaceOrPolygon_(child, polygon, objectStack);\n    }\n  }\n\n  /**\n   * @param {Node} node Node.\n   * @param {import(\"../geom/Point.js\").default} point Point geometry.\n   * @param {Array<*>} objectStack Node stack.\n   * @private\n   */\n  writePointMember_(node, point, objectStack) {\n    const child = createElementNS(node.namespaceURI, 'Point');\n    node.appendChild(child);\n    this.writePoint_(child, point, objectStack);\n  }\n\n  /**\n   * @param {Node} node Node.\n   * @param {LineString} line LineString geometry.\n   * @param {Array<*>} objectStack Node stack.\n   * @private\n   */\n  writeLineStringOrCurveMember_(node, line, objectStack) {\n    const child = this.GEOMETRY_NODE_FACTORY_(line, objectStack);\n    if (child) {\n      node.appendChild(child);\n      this.writeCurveOrLineString_(child, line, objectStack);\n    }\n  }\n\n  /**\n   * @param {Node} node Node.\n   * @param {Polygon} polygon Polygon geometry.\n   * @param {Array<*>} objectStack Node stack.\n   * @private\n   */\n  writeSurfacePatches_(node, polygon, objectStack) {\n    const child = createElementNS(node.namespaceURI, 'PolygonPatch');\n    node.appendChild(child);\n    this.writeSurfaceOrPolygon_(child, polygon, objectStack);\n  }\n\n  /**\n   * @param {Node} node Node.\n   * @param {LineString} line LineString geometry.\n   * @param {Array<*>} objectStack Node stack.\n   * @private\n   */\n  writeCurveSegments_(node, line, objectStack) {\n    const child = createElementNS(node.namespaceURI,\n      'LineStringSegment');\n    node.appendChild(child);\n    this.writeCurveOrLineString_(child, line, objectStack);\n  }\n\n  /**\n   * @param {Node} node Node.\n   * @param {import(\"../geom/Geometry.js\").default|import(\"../extent.js\").Extent} geometry Geometry.\n   * @param {Array<*>} objectStack Node stack.\n   */\n  writeGeometryElement(node, geometry, objectStack) {\n    const context = /** @type {import(\"./Feature.js\").WriteOptions} */ (objectStack[objectStack.length - 1]);\n    const item = assign({}, context);\n    item['node'] = node;\n    let value;\n    if (Array.isArray(geometry)) {\n      if (context.dataProjection) {\n        value = transformExtent(\n          geometry, context.featureProjection, context.dataProjection);\n      } else {\n        value = geometry;\n      }\n    } else {\n      value = transformWithOptions(/** @type {import(\"../geom/Geometry.js\").default} */ (geometry), true, context);\n    }\n    pushSerializeAndPop(/** @type {import(\"../xml.js\").NodeStackItem} */\n      (item), this.GEOMETRY_SERIALIZERS_,\n      this.GEOMETRY_NODE_FACTORY_, [value],\n      objectStack, undefined, this);\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @param {import(\"../Feature.js\").default} feature Feature.\n   * @param {Array<*>} objectStack Node stack.\n   */\n  writeFeatureElement(node, feature, objectStack) {\n    const fid = feature.getId();\n    if (fid) {\n      node.setAttribute('fid', /** @type {string} */ (fid));\n    }\n    const context = /** @type {Object} */ (objectStack[objectStack.length - 1]);\n    const featureNS = context['featureNS'];\n    const geometryName = feature.getGeometryName();\n    if (!context.serializers) {\n      context.serializers = {};\n      context.serializers[featureNS] = {};\n    }\n    const properties = feature.getProperties();\n    const keys = [];\n    const values = [];\n    for (const key in properties) {\n      const value = properties[key];\n      if (value !== null) {\n        keys.push(key);\n        values.push(value);\n        if (key == geometryName || typeof /** @type {?} */ (value).getSimplifiedGeometry === 'function') {\n          if (!(key in context.serializers[featureNS])) {\n            context.serializers[featureNS][key] = makeChildAppender(\n              this.writeGeometryElement, this);\n          }\n        } else {\n          if (!(key in context.serializers[featureNS])) {\n            context.serializers[featureNS][key] = makeChildAppender(writeStringTextNode);\n          }\n        }\n      }\n    }\n    const item = assign({}, context);\n    item.node = node;\n    pushSerializeAndPop(/** @type {import(\"../xml.js\").NodeStackItem} */\n      (item), context.serializers,\n      makeSimpleNodeFactory(undefined, featureNS),\n      values,\n      objectStack, keys);\n  }\n\n  /**\n   * @param {Node} node Node.\n   * @param {Array<import(\"../Feature.js\").default>} features Features.\n   * @param {Array<*>} objectStack Node stack.\n   * @private\n   */\n  writeFeatureMembers_(node, features, objectStack) {\n    const context = /** @type {Object} */ (objectStack[objectStack.length - 1]);\n    const featureType = context['featureType'];\n    const featureNS = context['featureNS'];\n    /** @type {Object<string, Object<string, import(\"../xml.js\").Serializer>>} */\n    const serializers = {};\n    serializers[featureNS] = {};\n    serializers[featureNS][featureType] = makeChildAppender(\n      this.writeFeatureElement, this);\n    const item = assign({}, context);\n    item.node = node;\n    pushSerializeAndPop(/** @type {import(\"../xml.js\").NodeStackItem} */\n      (item),\n      serializers,\n      makeSimpleNodeFactory(featureType, featureNS), features,\n      objectStack);\n  }\n\n  /**\n   * @const\n   * @param {*} value Value.\n   * @param {Array<*>} objectStack Object stack.\n   * @param {string=} opt_nodeName Node name.\n   * @return {Node|undefined} Node.\n   * @private\n   */\n  MULTIGEOMETRY_MEMBER_NODE_FACTORY_(value, objectStack, opt_nodeName) {\n    const parentNode = objectStack[objectStack.length - 1].node;\n    return createElementNS(this.namespace,\n      MULTIGEOMETRY_TO_MEMBER_NODENAME[parentNode.nodeName]);\n  }\n\n  /**\n   * @const\n   * @param {*} value Value.\n   * @param {Array<*>} objectStack Object stack.\n   * @param {string=} opt_nodeName Node name.\n   * @return {Element|undefined} Node.\n   * @private\n   */\n  GEOMETRY_NODE_FACTORY_(value, objectStack, opt_nodeName) {\n    const context = objectStack[objectStack.length - 1];\n    const multiSurface = context['multiSurface'];\n    const surface = context['surface'];\n    const curve = context['curve'];\n    const multiCurve = context['multiCurve'];\n    let nodeName;\n    if (!Array.isArray(value)) {\n      nodeName = /** @type {import(\"../geom/Geometry.js\").default} */ (value).getType();\n      if (nodeName === 'MultiPolygon' && multiSurface === true) {\n        nodeName = 'MultiSurface';\n      } else if (nodeName === 'Polygon' && surface === true) {\n        nodeName = 'Surface';\n      } else if (nodeName === 'LineString' && curve === true) {\n        nodeName = 'Curve';\n      } else if (nodeName === 'MultiLineString' && multiCurve === true) {\n        nodeName = 'MultiCurve';\n      }\n    } else {\n      nodeName = 'Envelope';\n    }\n    return createElementNS(this.namespace,\n      nodeName);\n  }\n\n  /**\n   * Encode a geometry in GML 3.1.1 Simple Features.\n   *\n   * @param {import(\"../geom/Geometry.js\").default} geometry Geometry.\n   * @param {import(\"./Feature.js\").WriteOptions=} opt_options Options.\n   * @return {Node} Node.\n   * @override\n   * @api\n   */\n  writeGeometryNode(geometry, opt_options) {\n    opt_options = this.adaptOptions(opt_options);\n    const geom = createElementNS(this.namespace, 'geom');\n    const context = {node: geom, hasZ: this.hasZ, srsName: this.srsName,\n      curve: this.curve_, surface: this.surface_,\n      multiSurface: this.multiSurface_, multiCurve: this.multiCurve_};\n    if (opt_options) {\n      assign(context, opt_options);\n    }\n    this.writeGeometryElement(geom, geometry, [context]);\n    return geom;\n  }\n\n  /**\n   * Encode an array of features in the GML 3.1.1 format as an XML node.\n   *\n   * @param {Array<import(\"../Feature.js\").default>} features Features.\n   * @param {import(\"./Feature.js\").WriteOptions=} opt_options Options.\n   * @return {Element} Node.\n   * @override\n   * @api\n   */\n  writeFeaturesNode(features, opt_options) {\n    opt_options = this.adaptOptions(opt_options);\n    const node = createElementNS(this.namespace, 'featureMembers');\n    node.setAttributeNS(XML_SCHEMA_INSTANCE_URI, 'xsi:schemaLocation', this.schemaLocation);\n    const context = {\n      srsName: this.srsName,\n      hasZ: this.hasZ,\n      curve: this.curve_,\n      surface: this.surface_,\n      multiSurface: this.multiSurface_,\n      multiCurve: this.multiCurve_,\n      featureNS: this.featureNS,\n      featureType: this.featureType\n    };\n    if (opt_options) {\n      assign(context, opt_options);\n    }\n    this.writeFeatureMembers_(node, features, [context]);\n    return node;\n  }\n}\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n * @protected\n */\nGML3.prototype.GEOMETRY_FLAT_COORDINATES_PARSERS = {\n  'http://www.opengis.net/gml': {\n    'pos': makeReplacer(GML3.prototype.readFlatPos_),\n    'posList': makeReplacer(GML3.prototype.readFlatPosList_)\n  }\n};\n\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n * @protected\n */\nGML3.prototype.FLAT_LINEAR_RINGS_PARSERS = {\n  'http://www.opengis.net/gml': {\n    'interior': GML3.prototype.interiorParser_,\n    'exterior': GML3.prototype.exteriorParser_\n  }\n};\n\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n * @protected\n */\nGML3.prototype.GEOMETRY_PARSERS = {\n  'http://www.opengis.net/gml': {\n    'Point': makeReplacer(GMLBase.prototype.readPoint),\n    'MultiPoint': makeReplacer(\n      GMLBase.prototype.readMultiPoint),\n    'LineString': makeReplacer(\n      GMLBase.prototype.readLineString),\n    'MultiLineString': makeReplacer(\n      GMLBase.prototype.readMultiLineString),\n    'LinearRing': makeReplacer(\n      GMLBase.prototype.readLinearRing),\n    'Polygon': makeReplacer(GMLBase.prototype.readPolygon),\n    'MultiPolygon': makeReplacer(\n      GMLBase.prototype.readMultiPolygon),\n    'Surface': makeReplacer(GML3.prototype.readSurface_),\n    'MultiSurface': makeReplacer(\n      GML3.prototype.readMultiSurface_),\n    'Curve': makeReplacer(GML3.prototype.readCurve_),\n    'MultiCurve': makeReplacer(\n      GML3.prototype.readMultiCurve_),\n    'Envelope': makeReplacer(GML3.prototype.readEnvelope_)\n  }\n};\n\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n * @private\n */\nGML3.prototype.MULTICURVE_PARSERS_ = {\n  'http://www.opengis.net/gml': {\n    'curveMember': makeArrayPusher(\n      GML3.prototype.curveMemberParser_),\n    'curveMembers': makeArrayPusher(\n      GML3.prototype.curveMemberParser_)\n  }\n};\n\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n * @private\n */\nGML3.prototype.MULTISURFACE_PARSERS_ = {\n  'http://www.opengis.net/gml': {\n    'surfaceMember': makeArrayPusher(\n      GML3.prototype.surfaceMemberParser_),\n    'surfaceMembers': makeArrayPusher(\n      GML3.prototype.surfaceMemberParser_)\n  }\n};\n\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n * @private\n */\nGML3.prototype.CURVEMEMBER_PARSERS_ = {\n  'http://www.opengis.net/gml': {\n    'LineString': makeArrayPusher(\n      GMLBase.prototype.readLineString),\n    'Curve': makeArrayPusher(GML3.prototype.readCurve_)\n  }\n};\n\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n * @private\n */\nGML3.prototype.SURFACEMEMBER_PARSERS_ = {\n  'http://www.opengis.net/gml': {\n    'Polygon': makeArrayPusher(GMLBase.prototype.readPolygon),\n    'Surface': makeArrayPusher(GML3.prototype.readSurface_)\n  }\n};\n\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n * @private\n */\nGML3.prototype.SURFACE_PARSERS_ = {\n  'http://www.opengis.net/gml': {\n    'patches': makeReplacer(GML3.prototype.readPatch_)\n  }\n};\n\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n * @private\n */\nGML3.prototype.CURVE_PARSERS_ = {\n  'http://www.opengis.net/gml': {\n    'segments': makeReplacer(GML3.prototype.readSegment_)\n  }\n};\n\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n * @private\n */\nGML3.prototype.ENVELOPE_PARSERS_ = {\n  'http://www.opengis.net/gml': {\n    'lowerCorner': makeArrayPusher(\n      GML3.prototype.readFlatPosList_),\n    'upperCorner': makeArrayPusher(\n      GML3.prototype.readFlatPosList_)\n  }\n};\n\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n * @private\n */\nGML3.prototype.PATCHES_PARSERS_ = {\n  'http://www.opengis.net/gml': {\n    'PolygonPatch': makeReplacer(\n      GML3.prototype.readPolygonPatch_)\n  }\n};\n\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n * @private\n */\nGML3.prototype.SEGMENTS_PARSERS_ = {\n  'http://www.opengis.net/gml': {\n    'LineStringSegment': makeReplacer(\n      GML3.prototype.readLineStringSegment_)\n  }\n};\n\n\n/**\n * Encode an array of features in GML 3.1.1 Simple Features.\n *\n * @function\n * @param {Array<import(\"../Feature.js\").default>} features Features.\n * @param {import(\"./Feature.js\").WriteOptions=} opt_options Options.\n * @return {string} Result.\n * @api\n */\nGML3.prototype.writeFeatures;\n\n\n/**\n * @type {Object<string, Object<string, import(\"../xml.js\").Serializer>>}\n * @private\n */\nGML3.prototype.RING_SERIALIZERS_ = {\n  'http://www.opengis.net/gml': {\n    'exterior': makeChildAppender(GML3.prototype.writeRing_),\n    'interior': makeChildAppender(GML3.prototype.writeRing_)\n  }\n};\n\n\n/**\n * @type {Object<string, Object<string, import(\"../xml.js\").Serializer>>}\n * @private\n */\nGML3.prototype.ENVELOPE_SERIALIZERS_ = {\n  'http://www.opengis.net/gml': {\n    'lowerCorner': makeChildAppender(writeStringTextNode),\n    'upperCorner': makeChildAppender(writeStringTextNode)\n  }\n};\n\n\n/**\n * @type {Object<string, Object<string, import(\"../xml.js\").Serializer>>}\n * @private\n */\nGML3.prototype.SURFACEORPOLYGONMEMBER_SERIALIZERS_ = {\n  'http://www.opengis.net/gml': {\n    'surfaceMember': makeChildAppender(\n      GML3.prototype.writeSurfaceOrPolygonMember_),\n    'polygonMember': makeChildAppender(\n      GML3.prototype.writeSurfaceOrPolygonMember_)\n  }\n};\n\n\n/**\n * @type {Object<string, Object<string, import(\"../xml.js\").Serializer>>}\n * @private\n */\nGML3.prototype.POINTMEMBER_SERIALIZERS_ = {\n  'http://www.opengis.net/gml': {\n    'pointMember': makeChildAppender(\n      GML3.prototype.writePointMember_)\n  }\n};\n\n\n/**\n * @type {Object<string, Object<string, import(\"../xml.js\").Serializer>>}\n * @private\n */\nGML3.prototype.LINESTRINGORCURVEMEMBER_SERIALIZERS_ = {\n  'http://www.opengis.net/gml': {\n    'lineStringMember': makeChildAppender(\n      GML3.prototype.writeLineStringOrCurveMember_),\n    'curveMember': makeChildAppender(\n      GML3.prototype.writeLineStringOrCurveMember_)\n  }\n};\n\n\n/**\n * @type {Object<string, Object<string, import(\"../xml.js\").Serializer>>}\n * @private\n */\nGML3.prototype.GEOMETRY_SERIALIZERS_ = {\n  'http://www.opengis.net/gml': {\n    'Curve': makeChildAppender(\n      GML3.prototype.writeCurveOrLineString_),\n    'MultiCurve': makeChildAppender(\n      GML3.prototype.writeMultiCurveOrLineString_),\n    'Point': makeChildAppender(GML3.prototype.writePoint_),\n    'MultiPoint': makeChildAppender(\n      GML3.prototype.writeMultiPoint_),\n    'LineString': makeChildAppender(\n      GML3.prototype.writeCurveOrLineString_),\n    'MultiLineString': makeChildAppender(\n      GML3.prototype.writeMultiCurveOrLineString_),\n    'LinearRing': makeChildAppender(\n      GML3.prototype.writeLinearRing_),\n    'Polygon': makeChildAppender(\n      GML3.prototype.writeSurfaceOrPolygon_),\n    'MultiPolygon': makeChildAppender(\n      GML3.prototype.writeMultiSurfaceOrPolygon_),\n    'Surface': makeChildAppender(\n      GML3.prototype.writeSurfaceOrPolygon_),\n    'MultiSurface': makeChildAppender(\n      GML3.prototype.writeMultiSurfaceOrPolygon_),\n    'Envelope': makeChildAppender(\n      GML3.prototype.writeEnvelope)\n  }\n};\n\nexport default GML3;\n"]},"metadata":{},"sourceType":"module"}