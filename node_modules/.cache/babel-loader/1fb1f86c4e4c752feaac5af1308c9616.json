{"ast":null,"code":"/**\n * @module ol/source/TileWMS\n */\nimport { DEFAULT_WMS_VERSION } from './common.js';\nimport { assert } from '../asserts.js';\nimport { buffer, createEmpty } from '../extent.js';\nimport { assign } from '../obj.js';\nimport { modulo } from '../math.js';\nimport { get as getProjection, transform, transformExtent } from '../proj.js';\nimport { calculateSourceResolution } from '../reproj.js';\nimport { toSize, buffer as bufferSize, scale as scaleSize } from '../size.js';\nimport TileImage from './TileImage.js';\nimport WMSServerType from './WMSServerType.js';\nimport { hash as tileCoordHash } from '../tilecoord.js';\nimport { compareVersions } from '../string.js';\nimport { appendParams } from '../uri.js';\n/**\n * @typedef {Object} Options\n * @property {import(\"./Source.js\").AttributionLike} [attributions] Attributions.\n * @property {number} [cacheSize=2048] Cache size.\n * @property {null|string} [crossOrigin] The `crossOrigin` attribute for loaded images.  Note that\n * you must provide a `crossOrigin` value if you are using the WebGL renderer or if you want to\n * access pixel data with the Canvas renderer.  See\n * https://developer.mozilla.org/en-US/docs/Web/HTML/CORS_enabled_image for more detail.\n * @property {Object<string,*>} params WMS request parameters.\n * At least a `LAYERS` param is required. `STYLES` is\n * `''` by default. `VERSION` is `1.3.0` by default. `WIDTH`, `HEIGHT`, `BBOX`\n * and `CRS` (`SRS` for WMS version < 1.3.0) will be set dynamically.\n * @property {number} [gutter=0]\n * The size in pixels of the gutter around image tiles to ignore. By setting\n * this property to a non-zero value, images will be requested that are wider\n * and taller than the tile size by a value of `2 x gutter`.\n * Using a non-zero value allows artifacts of rendering at tile edges to be\n * ignored. If you control the WMS service it is recommended to address\n * \"artifacts at tile edges\" issues by properly configuring the WMS service. For\n * example, MapServer has a `tile_map_edge_buffer` configuration parameter for\n * this. See http://mapserver.org/output/tile_mode.html.\n * @property {boolean} [hidpi=true] Use the `ol/Map#pixelRatio` value when requesting\n * the image from the remote server.\n * @property {import(\"../proj.js\").ProjectionLike} projection Projection.\n * @property {number} [reprojectionErrorThreshold=0.5] Maximum allowed reprojection error (in pixels).\n * Higher values can increase reprojection performance, but decrease precision.\n * @property {typeof import(\"../ImageTile.js\").default} [tileClass] Class used to instantiate image tiles.\n * Default is {@link module:ol/ImageTile~ImageTile}.\n * @property {import(\"../tilegrid/TileGrid.js\").default} [tileGrid] Tile grid. Base this on the resolutions,\n * tilesize and extent supported by the server.\n * If this is not defined, a default grid will be used: if there is a projection\n * extent, the grid will be based on that; if not, a grid based on a global\n * extent with origin at 0,0 will be used..\n * @property {import(\"./WMSServerType.js\").default|string} [serverType]\n * The type of the remote WMS server. Currently only used when `hidpi` is\n * `true`.\n * @property {import(\"../Tile.js\").LoadFunction} [tileLoadFunction] Optional function to load a tile given a URL. The default is\n * ```js\n * function(imageTile, src) {\n *   imageTile.getImage().src = src;\n * };\n * ```\n * @property {string} [url] WMS service URL.\n * @property {Array<string>} [urls] WMS service urls.\n * Use this instead of `url` when the WMS supports multiple urls for GetMap requests.\n * @property {boolean} [wrapX=true] Whether to wrap the world horizontally.\n * When set to `false`, only one world\n * will be rendered. When `true`, tiles will be requested for one world only,\n * but they will be wrapped horizontally to render multiple worlds.\n * @property {number} [transition] Duration of the opacity transition for rendering.\n * To disable the opacity transition, pass `transition: 0`.\n */\n\n/**\n * @classdesc\n * Layer source for tile data from WMS servers.\n * @api\n */\n\nvar TileWMS =\n/*@__PURE__*/\nfunction (TileImage) {\n  function TileWMS(opt_options) {\n    var options = opt_options ||\n    /** @type {Options} */\n    {};\n    var params = options.params || {};\n    var transparent = 'TRANSPARENT' in params ? params['TRANSPARENT'] : true;\n    TileImage.call(this, {\n      attributions: options.attributions,\n      cacheSize: options.cacheSize,\n      crossOrigin: options.crossOrigin,\n      opaque: !transparent,\n      projection: options.projection,\n      reprojectionErrorThreshold: options.reprojectionErrorThreshold,\n      tileClass: options.tileClass,\n      tileGrid: options.tileGrid,\n      tileLoadFunction: options.tileLoadFunction,\n      tileUrlFunction: tileUrlFunction,\n      url: options.url,\n      urls: options.urls,\n      wrapX: options.wrapX !== undefined ? options.wrapX : true,\n      transition: options.transition\n    });\n    /**\n     * @private\n     * @type {number}\n     */\n\n    this.gutter_ = options.gutter !== undefined ? options.gutter : 0;\n    /**\n     * @private\n     * @type {!Object}\n     */\n\n    this.params_ = params;\n    /**\n     * @private\n     * @type {boolean}\n     */\n\n    this.v13_ = true;\n    /**\n     * @private\n     * @type {import(\"./WMSServerType.js\").default|undefined}\n     */\n\n    this.serverType_ =\n    /** @type {import(\"./WMSServerType.js\").default|undefined} */\n    options.serverType;\n    /**\n     * @private\n     * @type {boolean}\n     */\n\n    this.hidpi_ = options.hidpi !== undefined ? options.hidpi : true;\n    /**\n     * @private\n     * @type {import(\"../extent.js\").Extent}\n     */\n\n    this.tmpExtent_ = createEmpty();\n    this.updateV13_();\n    this.setKey(this.getKeyForParams_());\n  }\n\n  if (TileImage) TileWMS.__proto__ = TileImage;\n  TileWMS.prototype = Object.create(TileImage && TileImage.prototype);\n  TileWMS.prototype.constructor = TileWMS;\n  /**\n   * Return the GetFeatureInfo URL for the passed coordinate, resolution, and\n   * projection. Return `undefined` if the GetFeatureInfo URL cannot be\n   * constructed.\n   * @param {import(\"../coordinate.js\").Coordinate} coordinate Coordinate.\n   * @param {number} resolution Resolution.\n   * @param {import(\"../proj.js\").ProjectionLike} projection Projection.\n   * @param {!Object} params GetFeatureInfo params. `INFO_FORMAT` at least should\n   *     be provided. If `QUERY_LAYERS` is not provided then the layers specified\n   *     in the `LAYERS` parameter will be used. `VERSION` should not be\n   *     specified here.\n   * @return {string|undefined} GetFeatureInfo URL.\n   * @api\n   */\n\n  TileWMS.prototype.getGetFeatureInfoUrl = function getGetFeatureInfoUrl(coordinate, resolution, projection, params) {\n    var projectionObj = getProjection(projection);\n    var sourceProjectionObj = this.getProjection();\n    var tileGrid = this.getTileGrid();\n\n    if (!tileGrid) {\n      tileGrid = this.getTileGridForProjection(projectionObj);\n    }\n\n    var tileCoord = tileGrid.getTileCoordForCoordAndResolution(coordinate, resolution);\n\n    if (tileGrid.getResolutions().length <= tileCoord[0]) {\n      return undefined;\n    }\n\n    var tileResolution = tileGrid.getResolution(tileCoord[0]);\n    var tileExtent = tileGrid.getTileCoordExtent(tileCoord, this.tmpExtent_);\n    var tileSize = toSize(tileGrid.getTileSize(tileCoord[0]), this.tmpSize);\n    var gutter = this.gutter_;\n\n    if (gutter !== 0) {\n      tileSize = bufferSize(tileSize, gutter, this.tmpSize);\n      tileExtent = buffer(tileExtent, tileResolution * gutter, tileExtent);\n    }\n\n    if (sourceProjectionObj && sourceProjectionObj !== projectionObj) {\n      tileResolution = calculateSourceResolution(sourceProjectionObj, projectionObj, coordinate, tileResolution);\n      tileExtent = transformExtent(tileExtent, projectionObj, sourceProjectionObj);\n      coordinate = transform(coordinate, projectionObj, sourceProjectionObj);\n    }\n\n    var baseParams = {\n      'SERVICE': 'WMS',\n      'VERSION': DEFAULT_WMS_VERSION,\n      'REQUEST': 'GetFeatureInfo',\n      'FORMAT': 'image/png',\n      'TRANSPARENT': true,\n      'QUERY_LAYERS': this.params_['LAYERS']\n    };\n    assign(baseParams, this.params_, params);\n    var x = Math.floor((coordinate[0] - tileExtent[0]) / tileResolution);\n    var y = Math.floor((tileExtent[3] - coordinate[1]) / tileResolution);\n    baseParams[this.v13_ ? 'I' : 'X'] = x;\n    baseParams[this.v13_ ? 'J' : 'Y'] = y;\n    return this.getRequestUrl_(tileCoord, tileSize, tileExtent, 1, sourceProjectionObj || projectionObj, baseParams);\n  };\n  /**\n   * @inheritDoc\n   */\n\n\n  TileWMS.prototype.getGutter = function getGutter() {\n    return this.gutter_;\n  };\n  /**\n   * Get the user-provided params, i.e. those passed to the constructor through\n   * the \"params\" option, and possibly updated using the updateParams method.\n   * @return {Object} Params.\n   * @api\n   */\n\n\n  TileWMS.prototype.getParams = function getParams() {\n    return this.params_;\n  };\n  /**\n   * @param {import(\"../tilecoord.js\").TileCoord} tileCoord Tile coordinate.\n   * @param {import(\"../size.js\").Size} tileSize Tile size.\n   * @param {import(\"../extent.js\").Extent} tileExtent Tile extent.\n   * @param {number} pixelRatio Pixel ratio.\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   * @param {Object} params Params.\n   * @return {string|undefined} Request URL.\n   * @private\n   */\n\n\n  TileWMS.prototype.getRequestUrl_ = function getRequestUrl_(tileCoord, tileSize, tileExtent, pixelRatio, projection, params) {\n    var urls = this.urls;\n\n    if (!urls) {\n      return undefined;\n    }\n\n    params['WIDTH'] = tileSize[0];\n    params['HEIGHT'] = tileSize[1];\n    params[this.v13_ ? 'CRS' : 'SRS'] = projection.getCode();\n\n    if (!('STYLES' in this.params_)) {\n      params['STYLES'] = '';\n    }\n\n    if (pixelRatio != 1) {\n      switch (this.serverType_) {\n        case WMSServerType.GEOSERVER:\n          var dpi = 90 * pixelRatio + 0.5 | 0;\n\n          if ('FORMAT_OPTIONS' in params) {\n            params['FORMAT_OPTIONS'] += ';dpi:' + dpi;\n          } else {\n            params['FORMAT_OPTIONS'] = 'dpi:' + dpi;\n          }\n\n          break;\n\n        case WMSServerType.MAPSERVER:\n          params['MAP_RESOLUTION'] = 90 * pixelRatio;\n          break;\n\n        case WMSServerType.CARMENTA_SERVER:\n        case WMSServerType.QGIS:\n          params['DPI'] = 90 * pixelRatio;\n          break;\n\n        default:\n          assert(false, 52); // Unknown `serverType` configured\n\n          break;\n      }\n    }\n\n    var axisOrientation = projection.getAxisOrientation();\n    var bbox = tileExtent;\n\n    if (this.v13_ && axisOrientation.substr(0, 2) == 'ne') {\n      var tmp;\n      tmp = tileExtent[0];\n      bbox[0] = tileExtent[1];\n      bbox[1] = tmp;\n      tmp = tileExtent[2];\n      bbox[2] = tileExtent[3];\n      bbox[3] = tmp;\n    }\n\n    params['BBOX'] = bbox.join(',');\n    var url;\n\n    if (urls.length == 1) {\n      url = urls[0];\n    } else {\n      var index = modulo(tileCoordHash(tileCoord), urls.length);\n      url = urls[index];\n    }\n\n    return appendParams(url, params);\n  };\n  /**\n   * @inheritDoc\n   */\n\n\n  TileWMS.prototype.getTilePixelRatio = function getTilePixelRatio(pixelRatio) {\n    return !this.hidpi_ || this.serverType_ === undefined ? 1 :\n    /** @type {number} */\n    pixelRatio;\n  };\n  /**\n   * @private\n   * @return {string} The key for the current params.\n   */\n\n\n  TileWMS.prototype.getKeyForParams_ = function getKeyForParams_() {\n    var i = 0;\n    var res = [];\n\n    for (var key in this.params_) {\n      res[i++] = key + '-' + this.params_[key];\n    }\n\n    return res.join('/');\n  };\n  /**\n   * Update the user-provided params.\n   * @param {Object} params Params.\n   * @api\n   */\n\n\n  TileWMS.prototype.updateParams = function updateParams(params) {\n    assign(this.params_, params);\n    this.updateV13_();\n    this.setKey(this.getKeyForParams_());\n  };\n  /**\n   * @private\n   */\n\n\n  TileWMS.prototype.updateV13_ = function updateV13_() {\n    var version = this.params_['VERSION'] || DEFAULT_WMS_VERSION;\n    this.v13_ = compareVersions(version, '1.3') >= 0;\n  };\n\n  return TileWMS;\n}(TileImage);\n/**\n * @param {import(\"../tilecoord.js\").TileCoord} tileCoord The tile coordinate\n * @param {number} pixelRatio The pixel ratio\n * @param {import(\"../proj/Projection.js\").default} projection The projection\n * @return {string|undefined} The tile URL\n * @this {TileWMS}\n */\n\n\nfunction tileUrlFunction(tileCoord, pixelRatio, projection) {\n  var tileGrid = this.getTileGrid();\n\n  if (!tileGrid) {\n    tileGrid = this.getTileGridForProjection(projection);\n  }\n\n  if (tileGrid.getResolutions().length <= tileCoord[0]) {\n    return undefined;\n  }\n\n  if (pixelRatio != 1 && (!this.hidpi_ || this.serverType_ === undefined)) {\n    pixelRatio = 1;\n  }\n\n  var tileResolution = tileGrid.getResolution(tileCoord[0]);\n  var tileExtent = tileGrid.getTileCoordExtent(tileCoord, this.tmpExtent_);\n  var tileSize = toSize(tileGrid.getTileSize(tileCoord[0]), this.tmpSize);\n  var gutter = this.gutter_;\n\n  if (gutter !== 0) {\n    tileSize = bufferSize(tileSize, gutter, this.tmpSize);\n    tileExtent = buffer(tileExtent, tileResolution * gutter, tileExtent);\n  }\n\n  if (pixelRatio != 1) {\n    tileSize = scaleSize(tileSize, pixelRatio, this.tmpSize);\n  }\n\n  var baseParams = {\n    'SERVICE': 'WMS',\n    'VERSION': DEFAULT_WMS_VERSION,\n    'REQUEST': 'GetMap',\n    'FORMAT': 'image/png',\n    'TRANSPARENT': true\n  };\n  assign(baseParams, this.params_);\n  return this.getRequestUrl_(tileCoord, tileSize, tileExtent, pixelRatio, projection, baseParams);\n}\n\nexport default TileWMS;","map":{"version":3,"sources":["../../../src/ol/source/TileWMS.js"],"names":["const","super","let"],"mappings":"AAAA;;;AAIA,SAAQ,mBAAR,QAAkC,aAAlC;AAEA,SAAQ,MAAR,QAAqB,eAArB;AACA,SAAQ,MAAR,EAAgB,WAAhB,QAAkC,cAAlC;AACA,SAAQ,MAAR,QAAqB,WAArB;AACA,SAAQ,MAAR,QAAqB,YAArB;AACA,SAAQ,GAAG,IAAI,aAAf,EAA8B,SAA9B,EAAyC,eAAzC,QAA+D,YAA/D;AACA,SAAQ,yBAAR,QAAwC,cAAxC;AACA,SAAQ,MAAR,EAAgB,MAAM,IAAI,UAA1B,EAAsC,KAAK,IAAI,SAA/C,QAA+D,YAA/D;AACA,OAAO,SAAP,MAAsB,gBAAtB;AACA,OAAO,aAAP,MAA0B,oBAA1B;AACA,SAAQ,IAAI,IAAI,aAAhB,QAAoC,iBAApC;AACA,SAAQ,eAAR,QAA8B,cAA9B;AACA,SAAQ,YAAR,QAA2B,WAA3B;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA6DA,IAAM,OAAO;AAAkB;AAAA,UAAA,SAAA,EAAA;AAI7B,WAAA,OAAA,CAAY,WAAZ,EAAyB;AAEvBA,QAAM,OAAO,GAAG,WAAW;AAAA;AAA4B,MAAvDA;AAEAA,QAAM,MAAM,GAAG,OAAO,CAAC,MAAR,IAAkB,EAAjCA;AAEAA,QAAM,WAAW,GAAG,iBAAiB,MAAjB,GAA0B,MAAM,CAAC,aAAD,CAAhC,GAAkD,IAAtEA;AAEAC,IAAAA,SAAAA,CAAAA,IAAAA,CAAK,IAALA,EAAM;AACJ,MAAA,YAAY,EAAE,OAAO,CAAC,YADlB;AAEJ,MAAA,SAAS,EAAE,OAAO,CAAC,SAFf;AAGJ,MAAA,WAAW,EAAE,OAAO,CAAC,WAHjB;AAIJ,MAAA,MAAM,EAAE,CAAC,WAJL;AAKJ,MAAA,UAAU,EAAE,OAAO,CAAC,UALhB;AAMJ,MAAA,0BAA0B,EAAE,OAAO,CAAC,0BANhC;AAOJ,MAAA,SAAS,EAAE,OAAO,CAAC,SAPf;AAQJ,MAAA,QAAQ,EAAE,OAAO,CAAC,QARd;AASJ,MAAA,gBAAgB,EAAE,OAAO,CAAC,gBATtB;AAUJ,MAAA,eAAe,EAAE,eAVb;AAWJ,MAAA,GAAG,EAAE,OAAO,CAAC,GAXT;AAYJ,MAAA,IAAI,EAAE,OAAO,CAAC,IAZV;AAaJ,MAAA,KAAK,EAAE,OAAO,CAAC,KAAR,KAAkB,SAAlB,GAA8B,OAAO,CAAC,KAAtC,GAA8C,IAbjD;AAcJ,MAAA,UAAU,EAAE,OAAO,CAAC;AAdhB,KAANA;;;;;;AAqBA,SAAK,OAAL,GAAe,OAAO,CAAC,MAAR,KAAmB,SAAnB,GAA+B,OAAO,CAAC,MAAvC,GAAgD,CAA/D;;;;;;AAMA,SAAK,OAAL,GAAe,MAAf;;;;;;AAMA,SAAK,IAAL,GAAY,IAAZ;;;;;;AAMA,SAAK,WAAL;AAAgB;AAAkE,IAAA,OAAO,CAAC,UAA1F;;;;;;AAMA,SAAK,MAAL,GAAc,OAAO,CAAC,KAAR,KAAkB,SAAlB,GAA8B,OAAO,CAAC,KAAtC,GAA8C,IAA5D;;;;;;AAMA,SAAK,UAAL,GAAkB,WAAW,EAA7B;AAEA,SAAK,UAAL;AACA,SAAK,MAAL,CAAY,KAAK,gBAAL,EAAZ;;;;;kCAED,O;;;;;;;;;;;;;;;;oBAgBD,oB,GAAA,SAAA,oBAAA,CAAqB,UAArB,EAAiC,UAAjC,EAA6C,UAA7C,EAAyD,MAAzD,EAAiE;AAC/DD,QAAM,aAAa,GAAG,aAAa,CAAC,UAAD,CAAnCA;AACAA,QAAM,mBAAmB,GAAG,KAAK,aAAL,EAA5BA;AAEAE,QAAI,QAAQ,GAAG,KAAK,WAAL,EAAfA;;AACA,QAAI,CAAC,QAAL,EAAe;AACb,MAAA,QAAQ,GAAG,KAAK,wBAAL,CAA8B,aAA9B,CAAX;AACD;;AAEDF,QAAM,SAAS,GAAG,QAAQ,CAAC,iCAAT,CAA2C,UAA3C,EAAuD,UAAvD,CAAlBA;;AAEA,QAAI,QAAQ,CAAC,cAAT,GAA0B,MAA1B,IAAoC,SAAS,CAAC,CAAD,CAAjD,EAAsD;AACpD,aAAO,SAAP;AACD;;AAEDE,QAAI,cAAc,GAAG,QAAQ,CAAC,aAAT,CAAuB,SAAS,CAAC,CAAD,CAAhC,CAArBA;AACAA,QAAI,UAAU,GAAG,QAAQ,CAAC,kBAAT,CAA4B,SAA5B,EAAuC,KAAK,UAA5C,CAAjBA;AACAA,QAAI,QAAQ,GAAG,MAAM,CAAC,QAAQ,CAAC,WAAT,CAAqB,SAAS,CAAC,CAAD,CAA9B,CAAD,EAAqC,KAAK,OAA1C,CAArBA;AAGAF,QAAM,MAAM,GAAG,KAAK,OAApBA;;AACA,QAAI,MAAM,KAAK,CAAf,EAAkB;AAChB,MAAA,QAAQ,GAAG,UAAU,CAAC,QAAD,EAAW,MAAX,EAAmB,KAAK,OAAxB,CAArB;AACA,MAAA,UAAU,GAAG,MAAM,CAAC,UAAD,EAAa,cAAc,GAAG,MAA9B,EAAsC,UAAtC,CAAnB;AACD;;AAED,QAAI,mBAAmB,IAAI,mBAAmB,KAAK,aAAnD,EAAkE;AAChE,MAAA,cAAc,GAAG,yBAAyB,CAAC,mBAAD,EAAsB,aAAtB,EAAqC,UAArC,EAAiD,cAAjD,CAA1C;AACA,MAAA,UAAU,GAAG,eAAe,CAAC,UAAD,EAAa,aAAb,EAA4B,mBAA5B,CAA5B;AACA,MAAA,UAAU,GAAG,SAAS,CAAC,UAAD,EAAa,aAAb,EAA4B,mBAA5B,CAAtB;AACD;;AAEDA,QAAM,UAAU,GAAG;AACjB,iBAAW,KADM;AAEjB,iBAAW,mBAFM;AAGjB,iBAAW,gBAHM;AAIjB,gBAAU,WAJO;AAKjB,qBAAe,IALE;AAMjB,sBAAgB,KAAK,OAAL,CAAa,QAAb;AANC,KAAnBA;AAQA,IAAA,MAAM,CAAC,UAAD,EAAa,KAAK,OAAlB,EAA2B,MAA3B,CAAN;AAEAA,QAAM,CAAC,GAAG,IAAI,CAAC,KAAL,CAAW,CAAC,UAAU,CAAC,CAAD,CAAV,GAAgB,UAAU,CAAC,CAAD,CAA3B,IAAkC,cAA7C,CAAVA;AACAA,QAAM,CAAC,GAAG,IAAI,CAAC,KAAL,CAAW,CAAC,UAAU,CAAC,CAAD,CAAV,GAAgB,UAAU,CAAC,CAAD,CAA3B,IAAkC,cAA7C,CAAVA;AAEA,IAAA,UAAU,CAAC,KAAK,IAAL,GAAY,GAAZ,GAAkB,GAAnB,CAAV,GAAoC,CAApC;AACA,IAAA,UAAU,CAAC,KAAK,IAAL,GAAY,GAAZ,GAAkB,GAAnB,CAAV,GAAoC,CAApC;AAEA,WAAO,KAAK,cAAL,CAAoB,SAApB,EAA+B,QAA/B,EAAyC,UAAzC,EACL,CADK,EACF,mBAAmB,IAAI,aADrB,EACoC,UADpC,CAAP;AAED,G;;;;;;oBAKD,S,GAAA,SAAA,SAAA,GAAY;AACV,WAAO,KAAK,OAAZ;AACD,G;;;;;;;;;oBAQD,S,GAAA,SAAA,SAAA,GAAY;AACV,WAAO,KAAK,OAAZ;AACD,G;;;;;;;;;;;;;oBAYD,c,GAAA,SAAA,cAAA,CAAe,SAAf,EAA0B,QAA1B,EAAoC,UAApC,EAAgD,UAAhD,EAA4D,UAA5D,EAAwE,MAAxE,EAAgF;AAE9EA,QAAM,IAAI,GAAG,KAAK,IAAlBA;;AACA,QAAI,CAAC,IAAL,EAAW;AACT,aAAO,SAAP;AACD;;AAED,IAAA,MAAM,CAAC,OAAD,CAAN,GAAkB,QAAQ,CAAC,CAAD,CAA1B;AACA,IAAA,MAAM,CAAC,QAAD,CAAN,GAAmB,QAAQ,CAAC,CAAD,CAA3B;AAEA,IAAA,MAAM,CAAC,KAAK,IAAL,GAAY,KAAZ,GAAoB,KAArB,CAAN,GAAoC,UAAU,CAAC,OAAX,EAApC;;AAEA,QAAI,EAAE,YAAY,KAAK,OAAnB,CAAJ,EAAiC;AAC/B,MAAA,MAAM,CAAC,QAAD,CAAN,GAAmB,EAAnB;AACD;;AAED,QAAI,UAAU,IAAI,CAAlB,EAAqB;AACnB,cAAQ,KAAK,WAAb;AACE,aAAK,aAAa,CAAC,SAAnB;AACEA,cAAM,GAAG,GAAI,KAAK,UAAL,GAAkB,GAAnB,GAA0B,CAAtCA;;AACA,cAAI,oBAAoB,MAAxB,EAAgC;AAC9B,YAAA,MAAM,CAAC,gBAAD,CAAN,IAA4B,UAAU,GAAtC;AACD,WAFD,MAEO;AACL,YAAA,MAAM,CAAC,gBAAD,CAAN,GAA2B,SAAS,GAApC;AACD;;AACD;;AACF,aAAK,aAAa,CAAC,SAAnB;AACE,UAAA,MAAM,CAAC,gBAAD,CAAN,GAA2B,KAAK,UAAhC;AACA;;AACF,aAAK,aAAa,CAAC,eAAnB;AACA,aAAK,aAAa,CAAC,IAAnB;AACE,UAAA,MAAM,CAAC,KAAD,CAAN,GAAgB,KAAK,UAArB;AACA;;AACF;AACE,UAAA,MAAM,CAAC,KAAD,EAAQ,EAAR,CAAN,CADF,CACoB;;AAClB;AAlBJ;AAoBD;;AAEDA,QAAM,eAAe,GAAG,UAAU,CAAC,kBAAX,EAAxBA;AACAA,QAAM,IAAI,GAAG,UAAbA;;AACA,QAAI,KAAK,IAAL,IAAa,eAAe,CAAC,MAAhB,CAAuB,CAAvB,EAA0B,CAA1B,KAAgC,IAAjD,EAAuD;AACrDE,UAAI,GAAJA;AACA,MAAA,GAAG,GAAG,UAAU,CAAC,CAAD,CAAhB;AACA,MAAA,IAAI,CAAC,CAAD,CAAJ,GAAU,UAAU,CAAC,CAAD,CAApB;AACA,MAAA,IAAI,CAAC,CAAD,CAAJ,GAAU,GAAV;AACA,MAAA,GAAG,GAAG,UAAU,CAAC,CAAD,CAAhB;AACA,MAAA,IAAI,CAAC,CAAD,CAAJ,GAAU,UAAU,CAAC,CAAD,CAApB;AACA,MAAA,IAAI,CAAC,CAAD,CAAJ,GAAU,GAAV;AACD;;AACD,IAAA,MAAM,CAAC,MAAD,CAAN,GAAiB,IAAI,CAAC,IAAL,CAAU,GAAV,CAAjB;AAEAA,QAAI,GAAJA;;AACA,QAAI,IAAI,CAAC,MAAL,IAAe,CAAnB,EAAsB;AACpB,MAAA,GAAG,GAAG,IAAI,CAAC,CAAD,CAAV;AACD,KAFD,MAEO;AACLF,UAAM,KAAK,GAAG,MAAM,CAAC,aAAa,CAAC,SAAD,CAAd,EAA2B,IAAI,CAAC,MAAhC,CAApBA;AACA,MAAA,GAAG,GAAG,IAAI,CAAC,KAAD,CAAV;AACD;;AACD,WAAO,YAAY,CAAC,GAAD,EAAM,MAAN,CAAnB;AACD,G;;;;;;oBAKD,iB,GAAA,SAAA,iBAAA,CAAkB,UAAlB,EAA8B;AAC5B,WAAQ,CAAC,KAAK,MAAN,IAAgB,KAAK,WAAL,KAAqB,SAAtC,GAAmD,CAAnD;AACe;AAAC,IAAA,UADvB;AAED,G;;;;;;;oBAMD,gB,GAAA,SAAA,gBAAA,GAAmB;AACjBE,QAAI,CAAC,GAAG,CAARA;AACAF,QAAM,GAAG,GAAG,EAAZA;;AACA,SAAKA,IAAM,GAAX,IAAkB,KAAK,OAAvB,EAAgC;AAC9B,MAAA,GAAG,CAAC,CAAC,EAAF,CAAH,GAAW,GAAG,GAAG,GAAN,GAAY,KAAK,OAAL,CAAa,GAAb,CAAvB;AACD;;AACD,WAAO,GAAG,CAAC,IAAJ,CAAS,GAAT,CAAP;AACD,G;;;;;;;;oBAOD,Y,GAAA,SAAA,YAAA,CAAa,MAAb,EAAqB;AACnB,IAAA,MAAM,CAAC,KAAK,OAAN,EAAe,MAAf,CAAN;AACA,SAAK,UAAL;AACA,SAAK,MAAL,CAAY,KAAK,gBAAL,EAAZ;AACD,G;;;;;;oBAKD,U,GAAA,SAAA,UAAA,GAAa;AACXA,QAAM,OAAO,GAAG,KAAK,OAAL,CAAa,SAAb,KAA2B,mBAA3CA;AACA,SAAK,IAAL,GAAY,eAAe,CAAC,OAAD,EAAU,KAAV,CAAf,IAAmC,CAA/C;AACD,G;;;CAvQ4B,CAAT,SAAS,CAA/B;;;;;;;;;;AAiRA,SAAS,eAAT,CAAyB,SAAzB,EAAoC,UAApC,EAAgD,UAAhD,EAA4D;AAE1DE,MAAI,QAAQ,GAAG,KAAK,WAAL,EAAfA;;AACA,MAAI,CAAC,QAAL,EAAe;AACb,IAAA,QAAQ,GAAG,KAAK,wBAAL,CAA8B,UAA9B,CAAX;AACD;;AAED,MAAI,QAAQ,CAAC,cAAT,GAA0B,MAA1B,IAAoC,SAAS,CAAC,CAAD,CAAjD,EAAsD;AACpD,WAAO,SAAP;AACD;;AAED,MAAI,UAAU,IAAI,CAAd,KAAoB,CAAC,KAAK,MAAN,IAAgB,KAAK,WAAL,KAAqB,SAAzD,CAAJ,EAAyE;AACvE,IAAA,UAAU,GAAG,CAAb;AACD;;AAEDF,MAAM,cAAc,GAAG,QAAQ,CAAC,aAAT,CAAuB,SAAS,CAAC,CAAD,CAAhC,CAAvBA;AACAE,MAAI,UAAU,GAAG,QAAQ,CAAC,kBAAT,CAA4B,SAA5B,EAAuC,KAAK,UAA5C,CAAjBA;AACAA,MAAI,QAAQ,GAAG,MAAM,CACnB,QAAQ,CAAC,WAAT,CAAqB,SAAS,CAAC,CAAD,CAA9B,CADmB,EACiB,KAAK,OADtB,CAArBA;AAGAF,MAAM,MAAM,GAAG,KAAK,OAApBA;;AACA,MAAI,MAAM,KAAK,CAAf,EAAkB;AAChB,IAAA,QAAQ,GAAG,UAAU,CAAC,QAAD,EAAW,MAAX,EAAmB,KAAK,OAAxB,CAArB;AACA,IAAA,UAAU,GAAG,MAAM,CAAC,UAAD,EAAa,cAAc,GAAG,MAA9B,EAAsC,UAAtC,CAAnB;AACD;;AAED,MAAI,UAAU,IAAI,CAAlB,EAAqB;AACnB,IAAA,QAAQ,GAAG,SAAS,CAAC,QAAD,EAAW,UAAX,EAAuB,KAAK,OAA5B,CAApB;AACD;;AAEDA,MAAM,UAAU,GAAG;AACjB,eAAW,KADM;AAEjB,eAAW,mBAFM;AAGjB,eAAW,QAHM;AAIjB,cAAU,WAJO;AAKjB,mBAAe;AALE,GAAnBA;AAOA,EAAA,MAAM,CAAC,UAAD,EAAa,KAAK,OAAlB,CAAN;AAEA,SAAO,KAAK,cAAL,CAAoB,SAApB,EAA+B,QAA/B,EAAyC,UAAzC,EACL,UADK,EACO,UADP,EACmB,UADnB,CAAP;AAED;;AAGD,eAAe,OAAf","sourcesContent":["/**\n * @module ol/source/TileWMS\n */\n\nimport {DEFAULT_WMS_VERSION} from './common.js';\n\nimport {assert} from '../asserts.js';\nimport {buffer, createEmpty} from '../extent.js';\nimport {assign} from '../obj.js';\nimport {modulo} from '../math.js';\nimport {get as getProjection, transform, transformExtent} from '../proj.js';\nimport {calculateSourceResolution} from '../reproj.js';\nimport {toSize, buffer as bufferSize, scale as scaleSize} from '../size.js';\nimport TileImage from './TileImage.js';\nimport WMSServerType from './WMSServerType.js';\nimport {hash as tileCoordHash} from '../tilecoord.js';\nimport {compareVersions} from '../string.js';\nimport {appendParams} from '../uri.js';\n\n/**\n * @typedef {Object} Options\n * @property {import(\"./Source.js\").AttributionLike} [attributions] Attributions.\n * @property {number} [cacheSize=2048] Cache size.\n * @property {null|string} [crossOrigin] The `crossOrigin` attribute for loaded images.  Note that\n * you must provide a `crossOrigin` value if you are using the WebGL renderer or if you want to\n * access pixel data with the Canvas renderer.  See\n * https://developer.mozilla.org/en-US/docs/Web/HTML/CORS_enabled_image for more detail.\n * @property {Object<string,*>} params WMS request parameters.\n * At least a `LAYERS` param is required. `STYLES` is\n * `''` by default. `VERSION` is `1.3.0` by default. `WIDTH`, `HEIGHT`, `BBOX`\n * and `CRS` (`SRS` for WMS version < 1.3.0) will be set dynamically.\n * @property {number} [gutter=0]\n * The size in pixels of the gutter around image tiles to ignore. By setting\n * this property to a non-zero value, images will be requested that are wider\n * and taller than the tile size by a value of `2 x gutter`.\n * Using a non-zero value allows artifacts of rendering at tile edges to be\n * ignored. If you control the WMS service it is recommended to address\n * \"artifacts at tile edges\" issues by properly configuring the WMS service. For\n * example, MapServer has a `tile_map_edge_buffer` configuration parameter for\n * this. See http://mapserver.org/output/tile_mode.html.\n * @property {boolean} [hidpi=true] Use the `ol/Map#pixelRatio` value when requesting\n * the image from the remote server.\n * @property {import(\"../proj.js\").ProjectionLike} projection Projection.\n * @property {number} [reprojectionErrorThreshold=0.5] Maximum allowed reprojection error (in pixels).\n * Higher values can increase reprojection performance, but decrease precision.\n * @property {typeof import(\"../ImageTile.js\").default} [tileClass] Class used to instantiate image tiles.\n * Default is {@link module:ol/ImageTile~ImageTile}.\n * @property {import(\"../tilegrid/TileGrid.js\").default} [tileGrid] Tile grid. Base this on the resolutions,\n * tilesize and extent supported by the server.\n * If this is not defined, a default grid will be used: if there is a projection\n * extent, the grid will be based on that; if not, a grid based on a global\n * extent with origin at 0,0 will be used..\n * @property {import(\"./WMSServerType.js\").default|string} [serverType]\n * The type of the remote WMS server. Currently only used when `hidpi` is\n * `true`.\n * @property {import(\"../Tile.js\").LoadFunction} [tileLoadFunction] Optional function to load a tile given a URL. The default is\n * ```js\n * function(imageTile, src) {\n *   imageTile.getImage().src = src;\n * };\n * ```\n * @property {string} [url] WMS service URL.\n * @property {Array<string>} [urls] WMS service urls.\n * Use this instead of `url` when the WMS supports multiple urls for GetMap requests.\n * @property {boolean} [wrapX=true] Whether to wrap the world horizontally.\n * When set to `false`, only one world\n * will be rendered. When `true`, tiles will be requested for one world only,\n * but they will be wrapped horizontally to render multiple worlds.\n * @property {number} [transition] Duration of the opacity transition for rendering.\n * To disable the opacity transition, pass `transition: 0`.\n */\n\n\n/**\n * @classdesc\n * Layer source for tile data from WMS servers.\n * @api\n */\nclass TileWMS extends TileImage {\n  /**\n   * @param {Options=} [opt_options] Tile WMS options.\n   */\n  constructor(opt_options) {\n\n    const options = opt_options || /** @type {Options} */ ({});\n\n    const params = options.params || {};\n\n    const transparent = 'TRANSPARENT' in params ? params['TRANSPARENT'] : true;\n\n    super({\n      attributions: options.attributions,\n      cacheSize: options.cacheSize,\n      crossOrigin: options.crossOrigin,\n      opaque: !transparent,\n      projection: options.projection,\n      reprojectionErrorThreshold: options.reprojectionErrorThreshold,\n      tileClass: options.tileClass,\n      tileGrid: options.tileGrid,\n      tileLoadFunction: options.tileLoadFunction,\n      tileUrlFunction: tileUrlFunction,\n      url: options.url,\n      urls: options.urls,\n      wrapX: options.wrapX !== undefined ? options.wrapX : true,\n      transition: options.transition\n    });\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.gutter_ = options.gutter !== undefined ? options.gutter : 0;\n\n    /**\n     * @private\n     * @type {!Object}\n     */\n    this.params_ = params;\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.v13_ = true;\n\n    /**\n     * @private\n     * @type {import(\"./WMSServerType.js\").default|undefined}\n     */\n    this.serverType_ = /** @type {import(\"./WMSServerType.js\").default|undefined} */ (options.serverType);\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.hidpi_ = options.hidpi !== undefined ? options.hidpi : true;\n\n    /**\n     * @private\n     * @type {import(\"../extent.js\").Extent}\n     */\n    this.tmpExtent_ = createEmpty();\n\n    this.updateV13_();\n    this.setKey(this.getKeyForParams_());\n\n  }\n\n  /**\n   * Return the GetFeatureInfo URL for the passed coordinate, resolution, and\n   * projection. Return `undefined` if the GetFeatureInfo URL cannot be\n   * constructed.\n   * @param {import(\"../coordinate.js\").Coordinate} coordinate Coordinate.\n   * @param {number} resolution Resolution.\n   * @param {import(\"../proj.js\").ProjectionLike} projection Projection.\n   * @param {!Object} params GetFeatureInfo params. `INFO_FORMAT` at least should\n   *     be provided. If `QUERY_LAYERS` is not provided then the layers specified\n   *     in the `LAYERS` parameter will be used. `VERSION` should not be\n   *     specified here.\n   * @return {string|undefined} GetFeatureInfo URL.\n   * @api\n   */\n  getGetFeatureInfoUrl(coordinate, resolution, projection, params) {\n    const projectionObj = getProjection(projection);\n    const sourceProjectionObj = this.getProjection();\n\n    let tileGrid = this.getTileGrid();\n    if (!tileGrid) {\n      tileGrid = this.getTileGridForProjection(projectionObj);\n    }\n\n    const tileCoord = tileGrid.getTileCoordForCoordAndResolution(coordinate, resolution);\n\n    if (tileGrid.getResolutions().length <= tileCoord[0]) {\n      return undefined;\n    }\n\n    let tileResolution = tileGrid.getResolution(tileCoord[0]);\n    let tileExtent = tileGrid.getTileCoordExtent(tileCoord, this.tmpExtent_);\n    let tileSize = toSize(tileGrid.getTileSize(tileCoord[0]), this.tmpSize);\n\n\n    const gutter = this.gutter_;\n    if (gutter !== 0) {\n      tileSize = bufferSize(tileSize, gutter, this.tmpSize);\n      tileExtent = buffer(tileExtent, tileResolution * gutter, tileExtent);\n    }\n\n    if (sourceProjectionObj && sourceProjectionObj !== projectionObj) {\n      tileResolution = calculateSourceResolution(sourceProjectionObj, projectionObj, coordinate, tileResolution);\n      tileExtent = transformExtent(tileExtent, projectionObj, sourceProjectionObj);\n      coordinate = transform(coordinate, projectionObj, sourceProjectionObj);\n    }\n\n    const baseParams = {\n      'SERVICE': 'WMS',\n      'VERSION': DEFAULT_WMS_VERSION,\n      'REQUEST': 'GetFeatureInfo',\n      'FORMAT': 'image/png',\n      'TRANSPARENT': true,\n      'QUERY_LAYERS': this.params_['LAYERS']\n    };\n    assign(baseParams, this.params_, params);\n\n    const x = Math.floor((coordinate[0] - tileExtent[0]) / tileResolution);\n    const y = Math.floor((tileExtent[3] - coordinate[1]) / tileResolution);\n\n    baseParams[this.v13_ ? 'I' : 'X'] = x;\n    baseParams[this.v13_ ? 'J' : 'Y'] = y;\n\n    return this.getRequestUrl_(tileCoord, tileSize, tileExtent,\n      1, sourceProjectionObj || projectionObj, baseParams);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  getGutter() {\n    return this.gutter_;\n  }\n\n  /**\n   * Get the user-provided params, i.e. those passed to the constructor through\n   * the \"params\" option, and possibly updated using the updateParams method.\n   * @return {Object} Params.\n   * @api\n   */\n  getParams() {\n    return this.params_;\n  }\n\n  /**\n   * @param {import(\"../tilecoord.js\").TileCoord} tileCoord Tile coordinate.\n   * @param {import(\"../size.js\").Size} tileSize Tile size.\n   * @param {import(\"../extent.js\").Extent} tileExtent Tile extent.\n   * @param {number} pixelRatio Pixel ratio.\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   * @param {Object} params Params.\n   * @return {string|undefined} Request URL.\n   * @private\n   */\n  getRequestUrl_(tileCoord, tileSize, tileExtent, pixelRatio, projection, params) {\n\n    const urls = this.urls;\n    if (!urls) {\n      return undefined;\n    }\n\n    params['WIDTH'] = tileSize[0];\n    params['HEIGHT'] = tileSize[1];\n\n    params[this.v13_ ? 'CRS' : 'SRS'] = projection.getCode();\n\n    if (!('STYLES' in this.params_)) {\n      params['STYLES'] = '';\n    }\n\n    if (pixelRatio != 1) {\n      switch (this.serverType_) {\n        case WMSServerType.GEOSERVER:\n          const dpi = (90 * pixelRatio + 0.5) | 0;\n          if ('FORMAT_OPTIONS' in params) {\n            params['FORMAT_OPTIONS'] += ';dpi:' + dpi;\n          } else {\n            params['FORMAT_OPTIONS'] = 'dpi:' + dpi;\n          }\n          break;\n        case WMSServerType.MAPSERVER:\n          params['MAP_RESOLUTION'] = 90 * pixelRatio;\n          break;\n        case WMSServerType.CARMENTA_SERVER:\n        case WMSServerType.QGIS:\n          params['DPI'] = 90 * pixelRatio;\n          break;\n        default:\n          assert(false, 52); // Unknown `serverType` configured\n          break;\n      }\n    }\n\n    const axisOrientation = projection.getAxisOrientation();\n    const bbox = tileExtent;\n    if (this.v13_ && axisOrientation.substr(0, 2) == 'ne') {\n      let tmp;\n      tmp = tileExtent[0];\n      bbox[0] = tileExtent[1];\n      bbox[1] = tmp;\n      tmp = tileExtent[2];\n      bbox[2] = tileExtent[3];\n      bbox[3] = tmp;\n    }\n    params['BBOX'] = bbox.join(',');\n\n    let url;\n    if (urls.length == 1) {\n      url = urls[0];\n    } else {\n      const index = modulo(tileCoordHash(tileCoord), urls.length);\n      url = urls[index];\n    }\n    return appendParams(url, params);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  getTilePixelRatio(pixelRatio) {\n    return (!this.hidpi_ || this.serverType_ === undefined) ? 1 :\n    /** @type {number} */ (pixelRatio);\n  }\n\n  /**\n   * @private\n   * @return {string} The key for the current params.\n   */\n  getKeyForParams_() {\n    let i = 0;\n    const res = [];\n    for (const key in this.params_) {\n      res[i++] = key + '-' + this.params_[key];\n    }\n    return res.join('/');\n  }\n\n  /**\n   * Update the user-provided params.\n   * @param {Object} params Params.\n   * @api\n   */\n  updateParams(params) {\n    assign(this.params_, params);\n    this.updateV13_();\n    this.setKey(this.getKeyForParams_());\n  }\n\n  /**\n   * @private\n   */\n  updateV13_() {\n    const version = this.params_['VERSION'] || DEFAULT_WMS_VERSION;\n    this.v13_ = compareVersions(version, '1.3') >= 0;\n  }\n}\n\n/**\n * @param {import(\"../tilecoord.js\").TileCoord} tileCoord The tile coordinate\n * @param {number} pixelRatio The pixel ratio\n * @param {import(\"../proj/Projection.js\").default} projection The projection\n * @return {string|undefined} The tile URL\n * @this {TileWMS}\n */\nfunction tileUrlFunction(tileCoord, pixelRatio, projection) {\n\n  let tileGrid = this.getTileGrid();\n  if (!tileGrid) {\n    tileGrid = this.getTileGridForProjection(projection);\n  }\n\n  if (tileGrid.getResolutions().length <= tileCoord[0]) {\n    return undefined;\n  }\n\n  if (pixelRatio != 1 && (!this.hidpi_ || this.serverType_ === undefined)) {\n    pixelRatio = 1;\n  }\n\n  const tileResolution = tileGrid.getResolution(tileCoord[0]);\n  let tileExtent = tileGrid.getTileCoordExtent(tileCoord, this.tmpExtent_);\n  let tileSize = toSize(\n    tileGrid.getTileSize(tileCoord[0]), this.tmpSize);\n\n  const gutter = this.gutter_;\n  if (gutter !== 0) {\n    tileSize = bufferSize(tileSize, gutter, this.tmpSize);\n    tileExtent = buffer(tileExtent, tileResolution * gutter, tileExtent);\n  }\n\n  if (pixelRatio != 1) {\n    tileSize = scaleSize(tileSize, pixelRatio, this.tmpSize);\n  }\n\n  const baseParams = {\n    'SERVICE': 'WMS',\n    'VERSION': DEFAULT_WMS_VERSION,\n    'REQUEST': 'GetMap',\n    'FORMAT': 'image/png',\n    'TRANSPARENT': true\n  };\n  assign(baseParams, this.params_);\n\n  return this.getRequestUrl_(tileCoord, tileSize, tileExtent,\n    pixelRatio, projection, baseParams);\n}\n\n\nexport default TileWMS;\n"]},"metadata":{},"sourceType":"module"}