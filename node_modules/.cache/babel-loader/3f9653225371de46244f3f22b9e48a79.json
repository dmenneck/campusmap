{"ast":null,"code":"/**\n * ag-grid-community - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components\n * @version v21.2.2\n * @link http://www.ag-grid.com/\n * @license MIT\n */\n\"use strict\";\n\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nvar __metadata = this && this.__metadata || function (k, v) {\n  if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar rowRenderer_1 = require(\"./rowRenderer\");\n\nvar context_1 = require(\"../context/context\");\n\nvar gridOptionsWrapper_1 = require(\"../gridOptionsWrapper\");\n\nvar headerWrapperComp_1 = require(\"../headerRendering/header/headerWrapperComp\");\n\nvar AutoWidthCalculator =\n/** @class */\nfunction () {\n  function AutoWidthCalculator() {}\n\n  AutoWidthCalculator.prototype.registerGridComp = function (gridPanel) {\n    this.gridPanel = gridPanel;\n  };\n\n  AutoWidthCalculator.prototype.registerHeaderRootComp = function (headerRootComp) {\n    this.headerRootComp = headerRootComp;\n  }; // this is the trick: we create a dummy container and clone all the cells\n  // into the dummy, then check the dummy's width. then destroy the dummy\n  // as we don't need it any more.\n  // drawback: only the cells visible on the screen are considered\n\n\n  AutoWidthCalculator.prototype.getPreferredWidthForColumn = function (column) {\n    var eHeaderCell = this.getHeaderCellForColumn(column); // cell isn't visible\n\n    if (!eHeaderCell) {\n      return -1;\n    }\n\n    var eDummyContainer = document.createElement('span'); // position fixed, so it isn't restricted to the boundaries of the parent\n\n    eDummyContainer.style.position = 'fixed'; // we put the dummy into the body container, so it will inherit all the\n    // css styles that the real cells are inheriting\n\n    var eBodyContainer = this.gridPanel.getCenterContainer();\n    eBodyContainer.appendChild(eDummyContainer); // get all the cells that are currently displayed (this only brings back\n    // rendered cells, rows not rendered due to row visualisation will not be here)\n\n    this.putRowCellsIntoDummyContainer(column, eDummyContainer); // also put header cell in\n    // we only consider the lowest level cell, not the group cell. in 99% of the time, this\n    // will be enough. if we consider groups, then it gets to complicated for what it's worth,\n    // as the groups can span columns and this class only considers one column at a time.\n\n    this.cloneItemIntoDummy(eHeaderCell, eDummyContainer); // at this point, all the clones are lined up vertically with natural widths. the dummy\n    // container will have a width wide enough just to fit the largest.\n\n    var dummyContainerWidth = eDummyContainer.offsetWidth; // we are finished with the dummy container, so get rid of it\n\n    eBodyContainer.removeChild(eDummyContainer); // we add padding as I found sometimes the gui still put '...' after some of the texts. so the\n    // user can configure the grid to add a few more pixels after the calculated width\n\n    var autoSizePadding = this.gridOptionsWrapper.getAutoSizePadding();\n    return dummyContainerWidth + autoSizePadding;\n  };\n\n  AutoWidthCalculator.prototype.getHeaderCellForColumn = function (column) {\n    var comp = null; // find the rendered header cell\n\n    this.headerRootComp.forEachHeaderElement(function (headerElement) {\n      if (headerElement instanceof headerWrapperComp_1.HeaderWrapperComp) {\n        var headerWrapperComp = headerElement;\n\n        if (headerWrapperComp.getColumn() === column) {\n          comp = headerWrapperComp;\n        }\n      }\n    });\n    return comp ? comp.getGui() : null;\n  };\n\n  AutoWidthCalculator.prototype.putRowCellsIntoDummyContainer = function (column, eDummyContainer) {\n    var _this = this;\n\n    var eCells = this.rowRenderer.getAllCellsForColumn(column);\n    eCells.forEach(function (eCell) {\n      return _this.cloneItemIntoDummy(eCell, eDummyContainer);\n    });\n  };\n\n  AutoWidthCalculator.prototype.cloneItemIntoDummy = function (eCell, eDummyContainer) {\n    // make a deep clone of the cell\n    var eCellClone = eCell.cloneNode(true); // the original has a fixed width, we remove this to allow the natural width based on content\n\n    eCellClone.style.width = ''; // the original has position = absolute, we need to remove this so it's positioned normally\n\n    eCellClone.style.position = 'static';\n    eCellClone.style.left = ''; // we put the cell into a containing div, as otherwise the cells would just line up\n    // on the same line, standard flow layout, by putting them into divs, they are laid\n    // out one per line\n\n    var eCloneParent = document.createElement('div'); // table-row, so that each cell is on a row. i also tried display='block', but this\n    // didn't work in IE\n\n    eCloneParent.style.display = 'table-row'; // the twig on the branch, the branch on the tree, the tree in the hole,\n    // the hole in the bog, the bog in the clone, the clone in the parent,\n    // the parent in the dummy, and the dummy down in the vall-e-ooo, OOOOOOOOO! Oh row the rattling bog....\n\n    eCloneParent.appendChild(eCellClone);\n    eDummyContainer.appendChild(eCloneParent);\n  };\n\n  __decorate([context_1.Autowired('rowRenderer'), __metadata(\"design:type\", rowRenderer_1.RowRenderer)], AutoWidthCalculator.prototype, \"rowRenderer\", void 0);\n\n  __decorate([context_1.Autowired('gridOptionsWrapper'), __metadata(\"design:type\", gridOptionsWrapper_1.GridOptionsWrapper)], AutoWidthCalculator.prototype, \"gridOptionsWrapper\", void 0);\n\n  AutoWidthCalculator = __decorate([context_1.Bean('autoWidthCalculator')], AutoWidthCalculator);\n  return AutoWidthCalculator;\n}();\n\nexports.AutoWidthCalculator = AutoWidthCalculator;","map":{"version":3,"sources":["/Users/dirkmennecke77/Desktop/Lageplan/node_modules/ag-grid-community/dist/lib/rendering/autoWidthCalculator.js"],"names":["__decorate","decorators","target","key","desc","c","arguments","length","r","Object","getOwnPropertyDescriptor","d","Reflect","decorate","i","defineProperty","__metadata","k","v","metadata","exports","value","rowRenderer_1","require","context_1","gridOptionsWrapper_1","headerWrapperComp_1","AutoWidthCalculator","prototype","registerGridComp","gridPanel","registerHeaderRootComp","headerRootComp","getPreferredWidthForColumn","column","eHeaderCell","getHeaderCellForColumn","eDummyContainer","document","createElement","style","position","eBodyContainer","getCenterContainer","appendChild","putRowCellsIntoDummyContainer","cloneItemIntoDummy","dummyContainerWidth","offsetWidth","removeChild","autoSizePadding","gridOptionsWrapper","getAutoSizePadding","comp","forEachHeaderElement","headerElement","HeaderWrapperComp","headerWrapperComp","getColumn","getGui","_this","eCells","rowRenderer","getAllCellsForColumn","forEach","eCell","eCellClone","cloneNode","width","left","eCloneParent","display","Autowired","RowRenderer","GridOptionsWrapper","Bean"],"mappings":"AAAA;;;;;;AAMA;;AACA,IAAIA,UAAU,GAAI,QAAQ,KAAKA,UAAd,IAA6B,UAAUC,UAAV,EAAsBC,MAAtB,EAA8BC,GAA9B,EAAmCC,IAAnC,EAAyC;AACnF,MAAIC,CAAC,GAAGC,SAAS,CAACC,MAAlB;AAAA,MAA0BC,CAAC,GAAGH,CAAC,GAAG,CAAJ,GAAQH,MAAR,GAAiBE,IAAI,KAAK,IAAT,GAAgBA,IAAI,GAAGK,MAAM,CAACC,wBAAP,CAAgCR,MAAhC,EAAwCC,GAAxC,CAAvB,GAAsEC,IAArH;AAAA,MAA2HO,CAA3H;AACA,MAAI,OAAOC,OAAP,KAAmB,QAAnB,IAA+B,OAAOA,OAAO,CAACC,QAAf,KAA4B,UAA/D,EAA2EL,CAAC,GAAGI,OAAO,CAACC,QAAR,CAAiBZ,UAAjB,EAA6BC,MAA7B,EAAqCC,GAArC,EAA0CC,IAA1C,CAAJ,CAA3E,KACK,KAAK,IAAIU,CAAC,GAAGb,UAAU,CAACM,MAAX,GAAoB,CAAjC,EAAoCO,CAAC,IAAI,CAAzC,EAA4CA,CAAC,EAA7C,EAAiD,IAAIH,CAAC,GAAGV,UAAU,CAACa,CAAD,CAAlB,EAAuBN,CAAC,GAAG,CAACH,CAAC,GAAG,CAAJ,GAAQM,CAAC,CAACH,CAAD,CAAT,GAAeH,CAAC,GAAG,CAAJ,GAAQM,CAAC,CAACT,MAAD,EAASC,GAAT,EAAcK,CAAd,CAAT,GAA4BG,CAAC,CAACT,MAAD,EAASC,GAAT,CAA7C,KAA+DK,CAAnE;AAC7E,SAAOH,CAAC,GAAG,CAAJ,IAASG,CAAT,IAAcC,MAAM,CAACM,cAAP,CAAsBb,MAAtB,EAA8BC,GAA9B,EAAmCK,CAAnC,CAAd,EAAqDA,CAA5D;AACH,CALD;;AAMA,IAAIQ,UAAU,GAAI,QAAQ,KAAKA,UAAd,IAA6B,UAAUC,CAAV,EAAaC,CAAb,EAAgB;AAC1D,MAAI,OAAON,OAAP,KAAmB,QAAnB,IAA+B,OAAOA,OAAO,CAACO,QAAf,KAA4B,UAA/D,EAA2E,OAAOP,OAAO,CAACO,QAAR,CAAiBF,CAAjB,EAAoBC,CAApB,CAAP;AAC9E,CAFD;;AAGAT,MAAM,CAACM,cAAP,CAAsBK,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;;AACA,IAAIC,aAAa,GAAGC,OAAO,CAAC,eAAD,CAA3B;;AACA,IAAIC,SAAS,GAAGD,OAAO,CAAC,oBAAD,CAAvB;;AACA,IAAIE,oBAAoB,GAAGF,OAAO,CAAC,uBAAD,CAAlC;;AACA,IAAIG,mBAAmB,GAAGH,OAAO,CAAC,6CAAD,CAAjC;;AACA,IAAII,mBAAmB;AAAG;AAAe,YAAY;AACjD,WAASA,mBAAT,GAA+B,CAC9B;;AACDA,EAAAA,mBAAmB,CAACC,SAApB,CAA8BC,gBAA9B,GAAiD,UAAUC,SAAV,EAAqB;AAClE,SAAKA,SAAL,GAAiBA,SAAjB;AACH,GAFD;;AAGAH,EAAAA,mBAAmB,CAACC,SAApB,CAA8BG,sBAA9B,GAAuD,UAAUC,cAAV,EAA0B;AAC7E,SAAKA,cAAL,GAAsBA,cAAtB;AACH,GAFD,CANiD,CASjD;AACA;AACA;AACA;;;AACAL,EAAAA,mBAAmB,CAACC,SAApB,CAA8BK,0BAA9B,GAA2D,UAAUC,MAAV,EAAkB;AACzE,QAAIC,WAAW,GAAG,KAAKC,sBAAL,CAA4BF,MAA5B,CAAlB,CADyE,CAEzE;;AACA,QAAI,CAACC,WAAL,EAAkB;AACd,aAAO,CAAC,CAAR;AACH;;AACD,QAAIE,eAAe,GAAGC,QAAQ,CAACC,aAAT,CAAuB,MAAvB,CAAtB,CANyE,CAOzE;;AACAF,IAAAA,eAAe,CAACG,KAAhB,CAAsBC,QAAtB,GAAiC,OAAjC,CARyE,CASzE;AACA;;AACA,QAAIC,cAAc,GAAG,KAAKZ,SAAL,CAAea,kBAAf,EAArB;AACAD,IAAAA,cAAc,CAACE,WAAf,CAA2BP,eAA3B,EAZyE,CAazE;AACA;;AACA,SAAKQ,6BAAL,CAAmCX,MAAnC,EAA2CG,eAA3C,EAfyE,CAgBzE;AACA;AACA;AACA;;AACA,SAAKS,kBAAL,CAAwBX,WAAxB,EAAqCE,eAArC,EApByE,CAqBzE;AACA;;AACA,QAAIU,mBAAmB,GAAGV,eAAe,CAACW,WAA1C,CAvByE,CAwBzE;;AACAN,IAAAA,cAAc,CAACO,WAAf,CAA2BZ,eAA3B,EAzByE,CA0BzE;AACA;;AACA,QAAIa,eAAe,GAAG,KAAKC,kBAAL,CAAwBC,kBAAxB,EAAtB;AACA,WAAOL,mBAAmB,GAAGG,eAA7B;AACH,GA9BD;;AA+BAvB,EAAAA,mBAAmB,CAACC,SAApB,CAA8BQ,sBAA9B,GAAuD,UAAUF,MAAV,EAAkB;AACrE,QAAImB,IAAI,GAAG,IAAX,CADqE,CAErE;;AACA,SAAKrB,cAAL,CAAoBsB,oBAApB,CAAyC,UAAUC,aAAV,EAAyB;AAC9D,UAAIA,aAAa,YAAY7B,mBAAmB,CAAC8B,iBAAjD,EAAoE;AAChE,YAAIC,iBAAiB,GAAGF,aAAxB;;AACA,YAAIE,iBAAiB,CAACC,SAAlB,OAAkCxB,MAAtC,EAA8C;AAC1CmB,UAAAA,IAAI,GAAGI,iBAAP;AACH;AACJ;AACJ,KAPD;AAQA,WAAOJ,IAAI,GAAGA,IAAI,CAACM,MAAL,EAAH,GAAmB,IAA9B;AACH,GAZD;;AAaAhC,EAAAA,mBAAmB,CAACC,SAApB,CAA8BiB,6BAA9B,GAA8D,UAAUX,MAAV,EAAkBG,eAAlB,EAAmC;AAC7F,QAAIuB,KAAK,GAAG,IAAZ;;AACA,QAAIC,MAAM,GAAG,KAAKC,WAAL,CAAiBC,oBAAjB,CAAsC7B,MAAtC,CAAb;AACA2B,IAAAA,MAAM,CAACG,OAAP,CAAe,UAAUC,KAAV,EAAiB;AAAE,aAAOL,KAAK,CAACd,kBAAN,CAAyBmB,KAAzB,EAAgC5B,eAAhC,CAAP;AAA0D,KAA5F;AACH,GAJD;;AAKAV,EAAAA,mBAAmB,CAACC,SAApB,CAA8BkB,kBAA9B,GAAmD,UAAUmB,KAAV,EAAiB5B,eAAjB,EAAkC;AACjF;AACA,QAAI6B,UAAU,GAAGD,KAAK,CAACE,SAAN,CAAgB,IAAhB,CAAjB,CAFiF,CAGjF;;AACAD,IAAAA,UAAU,CAAC1B,KAAX,CAAiB4B,KAAjB,GAAyB,EAAzB,CAJiF,CAKjF;;AACAF,IAAAA,UAAU,CAAC1B,KAAX,CAAiBC,QAAjB,GAA4B,QAA5B;AACAyB,IAAAA,UAAU,CAAC1B,KAAX,CAAiB6B,IAAjB,GAAwB,EAAxB,CAPiF,CAQjF;AACA;AACA;;AACA,QAAIC,YAAY,GAAGhC,QAAQ,CAACC,aAAT,CAAuB,KAAvB,CAAnB,CAXiF,CAYjF;AACA;;AACA+B,IAAAA,YAAY,CAAC9B,KAAb,CAAmB+B,OAAnB,GAA6B,WAA7B,CAdiF,CAejF;AACA;AACA;;AACAD,IAAAA,YAAY,CAAC1B,WAAb,CAAyBsB,UAAzB;AACA7B,IAAAA,eAAe,CAACO,WAAhB,CAA4B0B,YAA5B;AACH,GApBD;;AAqBAtE,EAAAA,UAAU,CAAC,CACPwB,SAAS,CAACgD,SAAV,CAAoB,aAApB,CADO,EAEPxD,UAAU,CAAC,aAAD,EAAgBM,aAAa,CAACmD,WAA9B,CAFH,CAAD,EAGP9C,mBAAmB,CAACC,SAHb,EAGwB,aAHxB,EAGuC,KAAK,CAH5C,CAAV;;AAIA5B,EAAAA,UAAU,CAAC,CACPwB,SAAS,CAACgD,SAAV,CAAoB,oBAApB,CADO,EAEPxD,UAAU,CAAC,aAAD,EAAgBS,oBAAoB,CAACiD,kBAArC,CAFH,CAAD,EAGP/C,mBAAmB,CAACC,SAHb,EAGwB,oBAHxB,EAG8C,KAAK,CAHnD,CAAV;;AAIAD,EAAAA,mBAAmB,GAAG3B,UAAU,CAAC,CAC7BwB,SAAS,CAACmD,IAAV,CAAe,qBAAf,CAD6B,CAAD,EAE7BhD,mBAF6B,CAAhC;AAGA,SAAOA,mBAAP;AACH,CA/FwC,EAAzC;;AAgGAP,OAAO,CAACO,mBAAR,GAA8BA,mBAA9B","sourcesContent":["/**\n * ag-grid-community - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components\n * @version v21.2.2\n * @link http://www.ag-grid.com/\n * @license MIT\n */\n\"use strict\";\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __metadata = (this && this.__metadata) || function (k, v) {\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar rowRenderer_1 = require(\"./rowRenderer\");\nvar context_1 = require(\"../context/context\");\nvar gridOptionsWrapper_1 = require(\"../gridOptionsWrapper\");\nvar headerWrapperComp_1 = require(\"../headerRendering/header/headerWrapperComp\");\nvar AutoWidthCalculator = /** @class */ (function () {\n    function AutoWidthCalculator() {\n    }\n    AutoWidthCalculator.prototype.registerGridComp = function (gridPanel) {\n        this.gridPanel = gridPanel;\n    };\n    AutoWidthCalculator.prototype.registerHeaderRootComp = function (headerRootComp) {\n        this.headerRootComp = headerRootComp;\n    };\n    // this is the trick: we create a dummy container and clone all the cells\n    // into the dummy, then check the dummy's width. then destroy the dummy\n    // as we don't need it any more.\n    // drawback: only the cells visible on the screen are considered\n    AutoWidthCalculator.prototype.getPreferredWidthForColumn = function (column) {\n        var eHeaderCell = this.getHeaderCellForColumn(column);\n        // cell isn't visible\n        if (!eHeaderCell) {\n            return -1;\n        }\n        var eDummyContainer = document.createElement('span');\n        // position fixed, so it isn't restricted to the boundaries of the parent\n        eDummyContainer.style.position = 'fixed';\n        // we put the dummy into the body container, so it will inherit all the\n        // css styles that the real cells are inheriting\n        var eBodyContainer = this.gridPanel.getCenterContainer();\n        eBodyContainer.appendChild(eDummyContainer);\n        // get all the cells that are currently displayed (this only brings back\n        // rendered cells, rows not rendered due to row visualisation will not be here)\n        this.putRowCellsIntoDummyContainer(column, eDummyContainer);\n        // also put header cell in\n        // we only consider the lowest level cell, not the group cell. in 99% of the time, this\n        // will be enough. if we consider groups, then it gets to complicated for what it's worth,\n        // as the groups can span columns and this class only considers one column at a time.\n        this.cloneItemIntoDummy(eHeaderCell, eDummyContainer);\n        // at this point, all the clones are lined up vertically with natural widths. the dummy\n        // container will have a width wide enough just to fit the largest.\n        var dummyContainerWidth = eDummyContainer.offsetWidth;\n        // we are finished with the dummy container, so get rid of it\n        eBodyContainer.removeChild(eDummyContainer);\n        // we add padding as I found sometimes the gui still put '...' after some of the texts. so the\n        // user can configure the grid to add a few more pixels after the calculated width\n        var autoSizePadding = this.gridOptionsWrapper.getAutoSizePadding();\n        return dummyContainerWidth + autoSizePadding;\n    };\n    AutoWidthCalculator.prototype.getHeaderCellForColumn = function (column) {\n        var comp = null;\n        // find the rendered header cell\n        this.headerRootComp.forEachHeaderElement(function (headerElement) {\n            if (headerElement instanceof headerWrapperComp_1.HeaderWrapperComp) {\n                var headerWrapperComp = headerElement;\n                if (headerWrapperComp.getColumn() === column) {\n                    comp = headerWrapperComp;\n                }\n            }\n        });\n        return comp ? comp.getGui() : null;\n    };\n    AutoWidthCalculator.prototype.putRowCellsIntoDummyContainer = function (column, eDummyContainer) {\n        var _this = this;\n        var eCells = this.rowRenderer.getAllCellsForColumn(column);\n        eCells.forEach(function (eCell) { return _this.cloneItemIntoDummy(eCell, eDummyContainer); });\n    };\n    AutoWidthCalculator.prototype.cloneItemIntoDummy = function (eCell, eDummyContainer) {\n        // make a deep clone of the cell\n        var eCellClone = eCell.cloneNode(true);\n        // the original has a fixed width, we remove this to allow the natural width based on content\n        eCellClone.style.width = '';\n        // the original has position = absolute, we need to remove this so it's positioned normally\n        eCellClone.style.position = 'static';\n        eCellClone.style.left = '';\n        // we put the cell into a containing div, as otherwise the cells would just line up\n        // on the same line, standard flow layout, by putting them into divs, they are laid\n        // out one per line\n        var eCloneParent = document.createElement('div');\n        // table-row, so that each cell is on a row. i also tried display='block', but this\n        // didn't work in IE\n        eCloneParent.style.display = 'table-row';\n        // the twig on the branch, the branch on the tree, the tree in the hole,\n        // the hole in the bog, the bog in the clone, the clone in the parent,\n        // the parent in the dummy, and the dummy down in the vall-e-ooo, OOOOOOOOO! Oh row the rattling bog....\n        eCloneParent.appendChild(eCellClone);\n        eDummyContainer.appendChild(eCloneParent);\n    };\n    __decorate([\n        context_1.Autowired('rowRenderer'),\n        __metadata(\"design:type\", rowRenderer_1.RowRenderer)\n    ], AutoWidthCalculator.prototype, \"rowRenderer\", void 0);\n    __decorate([\n        context_1.Autowired('gridOptionsWrapper'),\n        __metadata(\"design:type\", gridOptionsWrapper_1.GridOptionsWrapper)\n    ], AutoWidthCalculator.prototype, \"gridOptionsWrapper\", void 0);\n    AutoWidthCalculator = __decorate([\n        context_1.Bean('autoWidthCalculator')\n    ], AutoWidthCalculator);\n    return AutoWidthCalculator;\n}());\nexports.AutoWidthCalculator = AutoWidthCalculator;\n"]},"metadata":{},"sourceType":"script"}