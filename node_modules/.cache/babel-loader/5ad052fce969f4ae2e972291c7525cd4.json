{"ast":null,"code":"/**\n * @module ol/pointer/PointerEventHandler\n */\n// Based on https://github.com/Polymer/PointerEvents\n// Copyright (c) 2013 The Polymer Authors. All rights reserved.\n//\n// Redistribution and use in source and binary forms, with or without\n// modification, are permitted provided that the following conditions are\n// met:\n//\n// * Redistributions of source code must retain the above copyright\n// notice, this list of conditions and the following disclaimer.\n// * Redistributions in binary form must reproduce the above\n// copyright notice, this list of conditions and the following disclaimer\n// in the documentation and/or other materials provided with the\n// distribution.\n// * Neither the name of Google Inc. nor the names of its\n// contributors may be used to endorse or promote products derived from\n// this software without specific prior written permission.\n//\n// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n// \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\nimport { listen, unlisten } from '../events.js';\nimport EventTarget from '../events/Target.js';\nimport { POINTER, MSPOINTER, TOUCH } from '../has.js';\nimport PointerEventType from './EventType.js';\nimport MouseSource, { prepareEvent as prepareMouseEvent } from './MouseSource.js';\nimport MsSource from './MsSource.js';\nimport NativeSource from './NativeSource.js';\nimport PointerEvent from './PointerEvent.js';\nimport TouchSource from './TouchSource.js';\n/**\n * Properties to copy when cloning an event, with default values.\n * @type {Array<Array>}\n */\n\nvar CLONE_PROPS = [// MouseEvent\n['bubbles', false], ['cancelable', false], ['view', null], ['detail', null], ['screenX', 0], ['screenY', 0], ['clientX', 0], ['clientY', 0], ['ctrlKey', false], ['altKey', false], ['shiftKey', false], ['metaKey', false], ['button', 0], ['relatedTarget', null], // DOM Level 3\n['buttons', 0], // PointerEvent\n['pointerId', 0], ['width', 0], ['height', 0], ['pressure', 0], ['tiltX', 0], ['tiltY', 0], ['pointerType', ''], ['hwTimestamp', 0], ['isPrimary', false], // event instance\n['type', ''], ['target', null], ['currentTarget', null], ['which', 0]];\n\nvar PointerEventHandler =\n/*@__PURE__*/\nfunction (EventTarget) {\n  function PointerEventHandler(element) {\n    EventTarget.call(this);\n    /**\n     * @const\n     * @private\n     * @type {Element|HTMLDocument}\n     */\n\n    this.element_ = element;\n    /**\n     * @const\n     * @type {!Object<string, Event|Object>}\n     */\n\n    this.pointerMap = {};\n    /**\n     * @type {Object<string, function(Event)>}\n     * @private\n     */\n\n    this.eventMap_ = {};\n    /**\n     * @type {Array<import(\"./EventSource.js\").default>}\n     * @private\n     */\n\n    this.eventSourceList_ = [];\n    this.registerSources();\n  }\n\n  if (EventTarget) PointerEventHandler.__proto__ = EventTarget;\n  PointerEventHandler.prototype = Object.create(EventTarget && EventTarget.prototype);\n  PointerEventHandler.prototype.constructor = PointerEventHandler;\n  /**\n   * Set up the event sources (mouse, touch and native pointers)\n   * that generate pointer events.\n   */\n\n  PointerEventHandler.prototype.registerSources = function registerSources() {\n    if (POINTER) {\n      this.registerSource('native', new NativeSource(this));\n    } else if (MSPOINTER) {\n      this.registerSource('ms', new MsSource(this));\n    } else {\n      var mouseSource = new MouseSource(this);\n      this.registerSource('mouse', mouseSource);\n\n      if (TOUCH) {\n        this.registerSource('touch', new TouchSource(this, mouseSource));\n      }\n    } // register events on the viewport element\n\n\n    this.register_();\n  };\n  /**\n   * Add a new event source that will generate pointer events.\n   *\n   * @param {string} name A name for the event source\n   * @param {import(\"./EventSource.js\").default} source The source event.\n   */\n\n\n  PointerEventHandler.prototype.registerSource = function registerSource(name, source) {\n    var s = source;\n    var newEvents = s.getEvents();\n\n    if (newEvents) {\n      newEvents.forEach(function (e) {\n        var handler = s.getHandlerForEvent(e);\n\n        if (handler) {\n          this.eventMap_[e] = handler.bind(s);\n        }\n      }.bind(this));\n      this.eventSourceList_.push(s);\n    }\n  };\n  /**\n   * Set up the events for all registered event sources.\n   * @private\n   */\n\n\n  PointerEventHandler.prototype.register_ = function register_() {\n    var l = this.eventSourceList_.length;\n\n    for (var i = 0; i < l; i++) {\n      var eventSource = this.eventSourceList_[i];\n      this.addEvents_(eventSource.getEvents());\n    }\n  };\n  /**\n   * Remove all registered events.\n   * @private\n   */\n\n\n  PointerEventHandler.prototype.unregister_ = function unregister_() {\n    var l = this.eventSourceList_.length;\n\n    for (var i = 0; i < l; i++) {\n      var eventSource = this.eventSourceList_[i];\n      this.removeEvents_(eventSource.getEvents());\n    }\n  };\n  /**\n   * Calls the right handler for a new event.\n   * @private\n   * @param {Event} inEvent Browser event.\n   */\n\n\n  PointerEventHandler.prototype.eventHandler_ = function eventHandler_(inEvent) {\n    var type = inEvent.type;\n    var handler = this.eventMap_[type];\n\n    if (handler) {\n      handler(inEvent);\n    }\n  };\n  /**\n   * Setup listeners for the given events.\n   * @private\n   * @param {Array<string>} events List of events.\n   */\n\n\n  PointerEventHandler.prototype.addEvents_ = function addEvents_(events) {\n    events.forEach(function (eventName) {\n      listen(this.element_, eventName, this.eventHandler_, this);\n    }.bind(this));\n  };\n  /**\n   * Unregister listeners for the given events.\n   * @private\n   * @param {Array<string>} events List of events.\n   */\n\n\n  PointerEventHandler.prototype.removeEvents_ = function removeEvents_(events) {\n    events.forEach(function (e) {\n      unlisten(this.element_, e, this.eventHandler_, this);\n    }.bind(this));\n  };\n  /**\n   * Returns a snapshot of inEvent, with writable properties.\n   *\n   * @param {Event} event Browser event.\n   * @param {Event|Touch} inEvent An event that contains\n   *    properties to copy.\n   * @return {Object} An object containing shallow copies of\n   *    `inEvent`'s properties.\n   */\n\n\n  PointerEventHandler.prototype.cloneEvent = function cloneEvent(event, inEvent) {\n    var eventCopy = {};\n\n    for (var i = 0, ii = CLONE_PROPS.length; i < ii; i++) {\n      var p = CLONE_PROPS[i][0];\n      eventCopy[p] = event[p] || inEvent[p] || CLONE_PROPS[i][1];\n    }\n\n    return eventCopy;\n  }; // EVENTS\n\n  /**\n   * Triggers a 'pointerdown' event.\n   * @param {Object} data Pointer event data.\n   * @param {Event} event The event.\n   */\n\n\n  PointerEventHandler.prototype.down = function down(data, event) {\n    this.fireEvent(PointerEventType.POINTERDOWN, data, event);\n  };\n  /**\n   * Triggers a 'pointermove' event.\n   * @param {Object} data Pointer event data.\n   * @param {Event} event The event.\n   */\n\n\n  PointerEventHandler.prototype.move = function move(data, event) {\n    this.fireEvent(PointerEventType.POINTERMOVE, data, event);\n  };\n  /**\n   * Triggers a 'pointerup' event.\n   * @param {Object} data Pointer event data.\n   * @param {Event} event The event.\n   */\n\n\n  PointerEventHandler.prototype.up = function up(data, event) {\n    this.fireEvent(PointerEventType.POINTERUP, data, event);\n  };\n  /**\n   * Triggers a 'pointerenter' event.\n   * @param {Object} data Pointer event data.\n   * @param {Event} event The event.\n   */\n\n\n  PointerEventHandler.prototype.enter = function enter(data, event) {\n    data.bubbles = false;\n    this.fireEvent(PointerEventType.POINTERENTER, data, event);\n  };\n  /**\n   * Triggers a 'pointerleave' event.\n   * @param {Object} data Pointer event data.\n   * @param {Event} event The event.\n   */\n\n\n  PointerEventHandler.prototype.leave = function leave(data, event) {\n    data.bubbles = false;\n    this.fireEvent(PointerEventType.POINTERLEAVE, data, event);\n  };\n  /**\n   * Triggers a 'pointerover' event.\n   * @param {Object} data Pointer event data.\n   * @param {Event} event The event.\n   */\n\n\n  PointerEventHandler.prototype.over = function over(data, event) {\n    data.bubbles = true;\n    this.fireEvent(PointerEventType.POINTEROVER, data, event);\n  };\n  /**\n   * Triggers a 'pointerout' event.\n   * @param {Object} data Pointer event data.\n   * @param {Event} event The event.\n   */\n\n\n  PointerEventHandler.prototype.out = function out(data, event) {\n    data.bubbles = true;\n    this.fireEvent(PointerEventType.POINTEROUT, data, event);\n  };\n  /**\n   * Triggers a 'pointercancel' event.\n   * @param {Object} data Pointer event data.\n   * @param {Event} event The event.\n   */\n\n\n  PointerEventHandler.prototype.cancel = function cancel(data, event) {\n    this.fireEvent(PointerEventType.POINTERCANCEL, data, event);\n  };\n  /**\n   * Triggers a combination of 'pointerout' and 'pointerleave' events.\n   * @param {Object} data Pointer event data.\n   * @param {Event} event The event.\n   */\n\n\n  PointerEventHandler.prototype.leaveOut = function leaveOut(data, event) {\n    this.out(data, event);\n\n    if (!this.contains_(data.target, data.relatedTarget)) {\n      this.leave(data, event);\n    }\n  };\n  /**\n   * Triggers a combination of 'pointerover' and 'pointerevents' events.\n   * @param {Object} data Pointer event data.\n   * @param {Event} event The event.\n   */\n\n\n  PointerEventHandler.prototype.enterOver = function enterOver(data, event) {\n    this.over(data, event);\n\n    if (!this.contains_(data.target, data.relatedTarget)) {\n      this.enter(data, event);\n    }\n  };\n  /**\n   * @private\n   * @param {Element} container The container element.\n   * @param {Element} contained The contained element.\n   * @return {boolean} Returns true if the container element\n   *   contains the other element.\n   */\n\n\n  PointerEventHandler.prototype.contains_ = function contains_(container, contained) {\n    if (!container || !contained) {\n      return false;\n    }\n\n    return container.contains(contained);\n  }; // EVENT CREATION AND TRACKING\n\n  /**\n   * Creates a new Event of type `inType`, based on the information in\n   * `data`.\n   *\n   * @param {string} inType A string representing the type of event to create.\n   * @param {Object} data Pointer event data.\n   * @param {Event} event The event.\n   * @return {PointerEvent} A PointerEvent of type `inType`.\n   */\n\n\n  PointerEventHandler.prototype.makeEvent = function makeEvent(inType, data, event) {\n    return new PointerEvent(inType, event, data);\n  };\n  /**\n   * Make and dispatch an event in one call.\n   * @param {string} inType A string representing the type of event.\n   * @param {Object} data Pointer event data.\n   * @param {Event} event The event.\n   */\n\n\n  PointerEventHandler.prototype.fireEvent = function fireEvent(inType, data, event) {\n    var e = this.makeEvent(inType, data, event);\n    this.dispatchEvent(e);\n  };\n  /**\n   * Creates a pointer event from a native pointer event\n   * and dispatches this event.\n   * @param {Event} event A platform event with a target.\n   */\n\n\n  PointerEventHandler.prototype.fireNativeEvent = function fireNativeEvent(event) {\n    var e = this.makeEvent(event.type, event, event);\n    this.dispatchEvent(e);\n  };\n  /**\n   * Wrap a native mouse event into a pointer event.\n   * This proxy method is required for the legacy IE support.\n   * @param {string} eventType The pointer event type.\n   * @param {Event} event The event.\n   * @return {PointerEvent} The wrapped event.\n   */\n\n\n  PointerEventHandler.prototype.wrapMouseEvent = function wrapMouseEvent(eventType, event) {\n    var pointerEvent = this.makeEvent(eventType, prepareMouseEvent(event, this), event);\n    return pointerEvent;\n  };\n  /**\n   * @inheritDoc\n   */\n\n\n  PointerEventHandler.prototype.disposeInternal = function disposeInternal() {\n    this.unregister_();\n    EventTarget.prototype.disposeInternal.call(this);\n  };\n\n  return PointerEventHandler;\n}(EventTarget);\n\nexport default PointerEventHandler;","map":{"version":3,"sources":["../../../src/ol/pointer/PointerEventHandler.js"],"names":["const","super","let"],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAkCA,SAAQ,MAAR,EAAgB,QAAhB,QAA+B,cAA/B;AACA,OAAO,WAAP,MAAwB,qBAAxB;AACA,SAAQ,OAAR,EAAiB,SAAjB,EAA4B,KAA5B,QAAwC,WAAxC;AACA,OAAO,gBAAP,MAA6B,gBAA7B;AACA,OAAO,WAAP,IAAqB,YAAY,IAAI,iBAArC,QAA6D,kBAA7D;AACA,OAAO,QAAP,MAAqB,eAArB;AACA,OAAO,YAAP,MAAyB,mBAAzB;AACA,OAAO,YAAP,MAAyB,mBAAzB;AACA,OAAO,WAAP,MAAwB,kBAAxB;;;;;;AAOAA,IAAM,WAAW,GAAG,C;AAElB,CAAC,SAAD,EAAY,KAAZ,CAFkB,EAGlB,CAAC,YAAD,EAAe,KAAf,CAHkB,EAIlB,CAAC,MAAD,EAAS,IAAT,CAJkB,EAKlB,CAAC,QAAD,EAAW,IAAX,CALkB,EAMlB,CAAC,SAAD,EAAY,CAAZ,CANkB,EAOlB,CAAC,SAAD,EAAY,CAAZ,CAPkB,EAQlB,CAAC,SAAD,EAAY,CAAZ,CARkB,EASlB,CAAC,SAAD,EAAY,CAAZ,CATkB,EAUlB,CAAC,SAAD,EAAY,KAAZ,CAVkB,EAWlB,CAAC,QAAD,EAAW,KAAX,CAXkB,EAYlB,CAAC,UAAD,EAAa,KAAb,CAZkB,EAalB,CAAC,SAAD,EAAY,KAAZ,CAbkB,EAclB,CAAC,QAAD,EAAW,CAAX,CAdkB,EAelB,CAAC,eAAD,EAAkB,IAAlB,CAfkB,E;AAiBlB,CAAC,SAAD,EAAY,CAAZ,CAjBkB,E;AAmBlB,CAAC,WAAD,EAAc,CAAd,CAnBkB,EAoBlB,CAAC,OAAD,EAAU,CAAV,CApBkB,EAqBlB,CAAC,QAAD,EAAW,CAAX,CArBkB,EAsBlB,CAAC,UAAD,EAAa,CAAb,CAtBkB,EAuBlB,CAAC,OAAD,EAAU,CAAV,CAvBkB,EAwBlB,CAAC,OAAD,EAAU,CAAV,CAxBkB,EAyBlB,CAAC,aAAD,EAAgB,EAAhB,CAzBkB,EA0BlB,CAAC,aAAD,EAAgB,CAAhB,CA1BkB,EA2BlB,CAAC,WAAD,EAAc,KAAd,CA3BkB,E;AA6BlB,CAAC,MAAD,EAAS,EAAT,CA7BkB,EA8BlB,CAAC,QAAD,EAAW,IAAX,CA9BkB,EA+BlB,CAAC,eAAD,EAAkB,IAAlB,CA/BkB,EAgClB,CAAC,OAAD,EAAU,CAAV,CAhCkB,CAApBA;;AAoCA,IAAM,mBAAmB;AAAoB;AAAA,UAAA,WAAA,EAAA;AAK3C,WAAA,mBAAA,CAAY,OAAZ,EAAqB;AACnBC,IAAAA,WAAAA,CAAAA,IAAAA,CAAK,IAALA;;;;;;;AAOA,SAAK,QAAL,GAAgB,OAAhB;;;;;;AAMA,SAAK,UAAL,GAAkB,EAAlB;;;;;;AAMA,SAAK,SAAL,GAAiB,EAAjB;;;;;;AAMA,SAAK,gBAAL,GAAwB,EAAxB;AAEA,SAAK,eAAL;;;;;8CACD,mB;;;;;;gCAMD,e,GAAA,SAAA,eAAA,GAAkB;AAChB,QAAI,OAAJ,EAAa;AACX,WAAK,cAAL,CAAoB,QAApB,EAA8B,IAAI,YAAJ,CAAiB,IAAjB,CAA9B;AACD,KAFD,MAEO,IAAI,SAAJ,EAAe;AACpB,WAAK,cAAL,CAAoB,IAApB,EAA0B,IAAI,QAAJ,CAAa,IAAb,CAA1B;AACD,KAFM,MAEA;AACLD,UAAM,WAAW,GAAG,IAAI,WAAJ,CAAgB,IAAhB,CAApBA;AACA,WAAK,cAAL,CAAoB,OAApB,EAA6B,WAA7B;;AAEA,UAAI,KAAJ,EAAW;AACT,aAAK,cAAL,CAAoB,OAApB,EAA6B,IAAI,WAAJ,CAAgB,IAAhB,EAAsB,WAAtB,CAA7B;AACD;AACF,KAZe,C;;;AAehB,SAAK,SAAL;AACD,G;;;;;;;;;gCAQD,c,GAAA,SAAA,cAAA,CAAe,IAAf,EAAqB,MAArB,EAA6B;AAC3BA,QAAM,CAAC,GAAG,MAAVA;AACAA,QAAM,SAAS,GAAG,CAAC,CAAC,SAAF,EAAlBA;;AAEA,QAAI,SAAJ,EAAe;AACb,MAAA,SAAS,CAAC,OAAV,CAAkB,UAAS,CAAT,EAAY;AAC5BA,YAAM,OAAO,GAAG,CAAC,CAAC,kBAAF,CAAqB,CAArB,CAAhBA;;AAEA,YAAI,OAAJ,EAAa;AACX,eAAK,SAAL,CAAe,CAAf,IAAoB,OAAO,CAAC,IAAR,CAAa,CAAb,CAApB;AACD;AACF,OANiB,CAMhB,IANgB,CAMX,IANW,CAAlB;AAOA,WAAK,gBAAL,CAAsB,IAAtB,CAA2B,CAA3B;AACD;AACF,G;;;;;;;gCAMD,S,GAAA,SAAA,SAAA,GAAY;AACVA,QAAM,CAAC,GAAG,KAAK,gBAAL,CAAsB,MAAhCA;;AACA,SAAKE,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,CAApB,EAAuB,CAAC,EAAxB,EAA4B;AAC1BF,UAAM,WAAW,GAAG,KAAK,gBAAL,CAAsB,CAAtB,CAApBA;AACA,WAAK,UAAL,CAAgB,WAAW,CAAC,SAAZ,EAAhB;AACD;AACF,G;;;;;;;gCAMD,W,GAAA,SAAA,WAAA,GAAc;AACZA,QAAM,CAAC,GAAG,KAAK,gBAAL,CAAsB,MAAhCA;;AACA,SAAKE,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,CAApB,EAAuB,CAAC,EAAxB,EAA4B;AAC1BF,UAAM,WAAW,GAAG,KAAK,gBAAL,CAAsB,CAAtB,CAApBA;AACA,WAAK,aAAL,CAAmB,WAAW,CAAC,SAAZ,EAAnB;AACD;AACF,G;;;;;;;;gCAOD,a,GAAA,SAAA,aAAA,CAAc,OAAd,EAAuB;AACrBA,QAAM,IAAI,GAAG,OAAO,CAAC,IAArBA;AACAA,QAAM,OAAO,GAAG,KAAK,SAAL,CAAe,IAAf,CAAhBA;;AACA,QAAI,OAAJ,EAAa;AACX,MAAA,OAAO,CAAC,OAAD,CAAP;AACD;AACF,G;;;;;;;;gCAOD,U,GAAA,SAAA,UAAA,CAAW,MAAX,EAAmB;AACjB,IAAA,MAAM,CAAC,OAAP,CAAe,UAAS,SAAT,EAAoB;AACjC,MAAA,MAAM,CAAC,KAAK,QAAN,EAAgB,SAAhB,EAA2B,KAAK,aAAhC,EAA+C,IAA/C,CAAN;AACD,KAFc,CAEb,IAFa,CAER,IAFQ,CAAf;AAGD,G;;;;;;;;gCAOD,a,GAAA,SAAA,aAAA,CAAc,MAAd,EAAsB;AACpB,IAAA,MAAM,CAAC,OAAP,CAAe,UAAS,CAAT,EAAY;AACzB,MAAA,QAAQ,CAAC,KAAK,QAAN,EAAgB,CAAhB,EAAmB,KAAK,aAAxB,EAAuC,IAAvC,CAAR;AACD,KAFc,CAEb,IAFa,CAER,IAFQ,CAAf;AAGD,G;;;;;;;;;;;;gCAWD,U,GAAA,SAAA,UAAA,CAAW,KAAX,EAAkB,OAAlB,EAA2B;AACzBA,QAAM,SAAS,GAAG,EAAlBA;;AACA,SAAKE,IAAI,CAAC,GAAG,CAARA,EAAW,EAAE,GAAG,WAAW,CAAC,MAAjC,EAAyC,CAAC,GAAG,EAA7C,EAAiD,CAAC,EAAlD,EAAsD;AACpDF,UAAM,CAAC,GAAG,WAAW,CAAC,CAAD,CAAX,CAAe,CAAf,CAAVA;AACA,MAAA,SAAS,CAAC,CAAD,CAAT,GAAe,KAAK,CAAC,CAAD,CAAL,IAAY,OAAO,CAAC,CAAD,CAAnB,IAA0B,WAAW,CAAC,CAAD,CAAX,CAAe,CAAf,CAAzC;AACD;;AAED,WAAO,SAAP;AACD,G,CA5J0C,C;;;;;;;;;gCAsK3C,I,GAAA,SAAA,IAAA,CAAK,IAAL,EAAW,KAAX,EAAkB;AAChB,SAAK,SAAL,CAAe,gBAAgB,CAAC,WAAhC,EAA6C,IAA7C,EAAmD,KAAnD;AACD,G;;;;;;;;gCAOD,I,GAAA,SAAA,IAAA,CAAK,IAAL,EAAW,KAAX,EAAkB;AAChB,SAAK,SAAL,CAAe,gBAAgB,CAAC,WAAhC,EAA6C,IAA7C,EAAmD,KAAnD;AACD,G;;;;;;;;gCAOD,E,GAAA,SAAA,EAAA,CAAG,IAAH,EAAS,KAAT,EAAgB;AACd,SAAK,SAAL,CAAe,gBAAgB,CAAC,SAAhC,EAA2C,IAA3C,EAAiD,KAAjD;AACD,G;;;;;;;;gCAOD,K,GAAA,SAAA,KAAA,CAAM,IAAN,EAAY,KAAZ,EAAmB;AACjB,IAAA,IAAI,CAAC,OAAL,GAAe,KAAf;AACA,SAAK,SAAL,CAAe,gBAAgB,CAAC,YAAhC,EAA8C,IAA9C,EAAoD,KAApD;AACD,G;;;;;;;;gCAOD,K,GAAA,SAAA,KAAA,CAAM,IAAN,EAAY,KAAZ,EAAmB;AACjB,IAAA,IAAI,CAAC,OAAL,GAAe,KAAf;AACA,SAAK,SAAL,CAAe,gBAAgB,CAAC,YAAhC,EAA8C,IAA9C,EAAoD,KAApD;AACD,G;;;;;;;;gCAOD,I,GAAA,SAAA,IAAA,CAAK,IAAL,EAAW,KAAX,EAAkB;AAChB,IAAA,IAAI,CAAC,OAAL,GAAe,IAAf;AACA,SAAK,SAAL,CAAe,gBAAgB,CAAC,WAAhC,EAA6C,IAA7C,EAAmD,KAAnD;AACD,G;;;;;;;;gCAOD,G,GAAA,SAAA,GAAA,CAAI,IAAJ,EAAU,KAAV,EAAiB;AACf,IAAA,IAAI,CAAC,OAAL,GAAe,IAAf;AACA,SAAK,SAAL,CAAe,gBAAgB,CAAC,UAAhC,EAA4C,IAA5C,EAAkD,KAAlD;AACD,G;;;;;;;;gCAOD,M,GAAA,SAAA,MAAA,CAAO,IAAP,EAAa,KAAb,EAAoB;AAClB,SAAK,SAAL,CAAe,gBAAgB,CAAC,aAAhC,EAA+C,IAA/C,EAAqD,KAArD;AACD,G;;;;;;;;gCAOD,Q,GAAA,SAAA,QAAA,CAAS,IAAT,EAAe,KAAf,EAAsB;AACpB,SAAK,GAAL,CAAS,IAAT,EAAe,KAAf;;AACA,QAAI,CAAC,KAAK,SAAL,CAAe,IAAI,CAAC,MAApB,EAA4B,IAAI,CAAC,aAAjC,CAAL,EAAsD;AACpD,WAAK,KAAL,CAAW,IAAX,EAAiB,KAAjB;AACD;AACF,G;;;;;;;;gCAOD,S,GAAA,SAAA,SAAA,CAAU,IAAV,EAAgB,KAAhB,EAAuB;AACrB,SAAK,IAAL,CAAU,IAAV,EAAgB,KAAhB;;AACA,QAAI,CAAC,KAAK,SAAL,CAAe,IAAI,CAAC,MAApB,EAA4B,IAAI,CAAC,aAAjC,CAAL,EAAsD;AACpD,WAAK,KAAL,CAAW,IAAX,EAAiB,KAAjB;AACD;AACF,G;;;;;;;;;;gCASD,S,GAAA,SAAA,SAAA,CAAU,SAAV,EAAqB,SAArB,EAAgC;AAC9B,QAAI,CAAC,SAAD,IAAc,CAAC,SAAnB,EAA8B;AAC5B,aAAO,KAAP;AACD;;AACD,WAAO,SAAS,CAAC,QAAV,CAAmB,SAAnB,CAAP;AACD,G,CAjR0C,C;;;;;;;;;;;;;gCA6R3C,S,GAAA,SAAA,SAAA,CAAU,MAAV,EAAkB,IAAlB,EAAwB,KAAxB,EAA+B;AAC7B,WAAO,IAAI,YAAJ,CAAiB,MAAjB,EAAyB,KAAzB,EAAgC,IAAhC,CAAP;AACD,G;;;;;;;;;gCAQD,S,GAAA,SAAA,SAAA,CAAU,MAAV,EAAkB,IAAlB,EAAwB,KAAxB,EAA+B;AAC7BA,QAAM,CAAC,GAAG,KAAK,SAAL,CAAe,MAAf,EAAuB,IAAvB,EAA6B,KAA7B,CAAVA;AACA,SAAK,aAAL,CAAmB,CAAnB;AACD,G;;;;;;;;gCAOD,e,GAAA,SAAA,eAAA,CAAgB,KAAhB,EAAuB;AACrBA,QAAM,CAAC,GAAG,KAAK,SAAL,CAAe,KAAK,CAAC,IAArB,EAA2B,KAA3B,EAAkC,KAAlC,CAAVA;AACA,SAAK,aAAL,CAAmB,CAAnB;AACD,G;;;;;;;;;;gCASD,c,GAAA,SAAA,cAAA,CAAe,SAAf,EAA0B,KAA1B,EAAiC;AAC/BA,QAAM,YAAY,GAAG,KAAK,SAAL,CACnB,SADmB,EACR,iBAAiB,CAAC,KAAD,EAAQ,IAAR,CADT,EACwB,KADxB,CAArBA;AAEA,WAAO,YAAP;AACD,G;;;;;;gCAKD,e,GAAA,SAAA,eAAA,GAAkB;AAChB,SAAK,WAAL;AACAC,IAAAA,WAAAA,CAAAA,SAAAA,CAAM,eAANA,CAAM,IAANA,CAAqB,IAArBA;AACD,G;;;CAzU0C,CAAX,WAAW,CAA7C;;AA4UA,eAAe,mBAAf","sourcesContent":["/**\n * @module ol/pointer/PointerEventHandler\n */\n\n// Based on https://github.com/Polymer/PointerEvents\n\n// Copyright (c) 2013 The Polymer Authors. All rights reserved.\n//\n// Redistribution and use in source and binary forms, with or without\n// modification, are permitted provided that the following conditions are\n// met:\n//\n// * Redistributions of source code must retain the above copyright\n// notice, this list of conditions and the following disclaimer.\n// * Redistributions in binary form must reproduce the above\n// copyright notice, this list of conditions and the following disclaimer\n// in the documentation and/or other materials provided with the\n// distribution.\n// * Neither the name of Google Inc. nor the names of its\n// contributors may be used to endorse or promote products derived from\n// this software without specific prior written permission.\n//\n// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n// \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\nimport {listen, unlisten} from '../events.js';\nimport EventTarget from '../events/Target.js';\nimport {POINTER, MSPOINTER, TOUCH} from '../has.js';\nimport PointerEventType from './EventType.js';\nimport MouseSource, {prepareEvent as prepareMouseEvent} from './MouseSource.js';\nimport MsSource from './MsSource.js';\nimport NativeSource from './NativeSource.js';\nimport PointerEvent from './PointerEvent.js';\nimport TouchSource from './TouchSource.js';\n\n\n/**\n * Properties to copy when cloning an event, with default values.\n * @type {Array<Array>}\n */\nconst CLONE_PROPS = [\n  // MouseEvent\n  ['bubbles', false],\n  ['cancelable', false],\n  ['view', null],\n  ['detail', null],\n  ['screenX', 0],\n  ['screenY', 0],\n  ['clientX', 0],\n  ['clientY', 0],\n  ['ctrlKey', false],\n  ['altKey', false],\n  ['shiftKey', false],\n  ['metaKey', false],\n  ['button', 0],\n  ['relatedTarget', null],\n  // DOM Level 3\n  ['buttons', 0],\n  // PointerEvent\n  ['pointerId', 0],\n  ['width', 0],\n  ['height', 0],\n  ['pressure', 0],\n  ['tiltX', 0],\n  ['tiltY', 0],\n  ['pointerType', ''],\n  ['hwTimestamp', 0],\n  ['isPrimary', false],\n  // event instance\n  ['type', ''],\n  ['target', null],\n  ['currentTarget', null],\n  ['which', 0]\n];\n\n\nclass PointerEventHandler extends EventTarget {\n\n  /**\n   * @param {Element|HTMLDocument} element Viewport element.\n   */\n  constructor(element) {\n    super();\n\n    /**\n     * @const\n     * @private\n     * @type {Element|HTMLDocument}\n     */\n    this.element_ = element;\n\n    /**\n     * @const\n     * @type {!Object<string, Event|Object>}\n     */\n    this.pointerMap = {};\n\n    /**\n     * @type {Object<string, function(Event)>}\n     * @private\n     */\n    this.eventMap_ = {};\n\n    /**\n     * @type {Array<import(\"./EventSource.js\").default>}\n     * @private\n     */\n    this.eventSourceList_ = [];\n\n    this.registerSources();\n  }\n\n  /**\n   * Set up the event sources (mouse, touch and native pointers)\n   * that generate pointer events.\n   */\n  registerSources() {\n    if (POINTER) {\n      this.registerSource('native', new NativeSource(this));\n    } else if (MSPOINTER) {\n      this.registerSource('ms', new MsSource(this));\n    } else {\n      const mouseSource = new MouseSource(this);\n      this.registerSource('mouse', mouseSource);\n\n      if (TOUCH) {\n        this.registerSource('touch', new TouchSource(this, mouseSource));\n      }\n    }\n\n    // register events on the viewport element\n    this.register_();\n  }\n\n  /**\n   * Add a new event source that will generate pointer events.\n   *\n   * @param {string} name A name for the event source\n   * @param {import(\"./EventSource.js\").default} source The source event.\n   */\n  registerSource(name, source) {\n    const s = source;\n    const newEvents = s.getEvents();\n\n    if (newEvents) {\n      newEvents.forEach(function(e) {\n        const handler = s.getHandlerForEvent(e);\n\n        if (handler) {\n          this.eventMap_[e] = handler.bind(s);\n        }\n      }.bind(this));\n      this.eventSourceList_.push(s);\n    }\n  }\n\n  /**\n   * Set up the events for all registered event sources.\n   * @private\n   */\n  register_() {\n    const l = this.eventSourceList_.length;\n    for (let i = 0; i < l; i++) {\n      const eventSource = this.eventSourceList_[i];\n      this.addEvents_(eventSource.getEvents());\n    }\n  }\n\n  /**\n   * Remove all registered events.\n   * @private\n   */\n  unregister_() {\n    const l = this.eventSourceList_.length;\n    for (let i = 0; i < l; i++) {\n      const eventSource = this.eventSourceList_[i];\n      this.removeEvents_(eventSource.getEvents());\n    }\n  }\n\n  /**\n   * Calls the right handler for a new event.\n   * @private\n   * @param {Event} inEvent Browser event.\n   */\n  eventHandler_(inEvent) {\n    const type = inEvent.type;\n    const handler = this.eventMap_[type];\n    if (handler) {\n      handler(inEvent);\n    }\n  }\n\n  /**\n   * Setup listeners for the given events.\n   * @private\n   * @param {Array<string>} events List of events.\n   */\n  addEvents_(events) {\n    events.forEach(function(eventName) {\n      listen(this.element_, eventName, this.eventHandler_, this);\n    }.bind(this));\n  }\n\n  /**\n   * Unregister listeners for the given events.\n   * @private\n   * @param {Array<string>} events List of events.\n   */\n  removeEvents_(events) {\n    events.forEach(function(e) {\n      unlisten(this.element_, e, this.eventHandler_, this);\n    }.bind(this));\n  }\n\n  /**\n   * Returns a snapshot of inEvent, with writable properties.\n   *\n   * @param {Event} event Browser event.\n   * @param {Event|Touch} inEvent An event that contains\n   *    properties to copy.\n   * @return {Object} An object containing shallow copies of\n   *    `inEvent`'s properties.\n   */\n  cloneEvent(event, inEvent) {\n    const eventCopy = {};\n    for (let i = 0, ii = CLONE_PROPS.length; i < ii; i++) {\n      const p = CLONE_PROPS[i][0];\n      eventCopy[p] = event[p] || inEvent[p] || CLONE_PROPS[i][1];\n    }\n\n    return eventCopy;\n  }\n\n  // EVENTS\n\n\n  /**\n   * Triggers a 'pointerdown' event.\n   * @param {Object} data Pointer event data.\n   * @param {Event} event The event.\n   */\n  down(data, event) {\n    this.fireEvent(PointerEventType.POINTERDOWN, data, event);\n  }\n\n  /**\n   * Triggers a 'pointermove' event.\n   * @param {Object} data Pointer event data.\n   * @param {Event} event The event.\n   */\n  move(data, event) {\n    this.fireEvent(PointerEventType.POINTERMOVE, data, event);\n  }\n\n  /**\n   * Triggers a 'pointerup' event.\n   * @param {Object} data Pointer event data.\n   * @param {Event} event The event.\n   */\n  up(data, event) {\n    this.fireEvent(PointerEventType.POINTERUP, data, event);\n  }\n\n  /**\n   * Triggers a 'pointerenter' event.\n   * @param {Object} data Pointer event data.\n   * @param {Event} event The event.\n   */\n  enter(data, event) {\n    data.bubbles = false;\n    this.fireEvent(PointerEventType.POINTERENTER, data, event);\n  }\n\n  /**\n   * Triggers a 'pointerleave' event.\n   * @param {Object} data Pointer event data.\n   * @param {Event} event The event.\n   */\n  leave(data, event) {\n    data.bubbles = false;\n    this.fireEvent(PointerEventType.POINTERLEAVE, data, event);\n  }\n\n  /**\n   * Triggers a 'pointerover' event.\n   * @param {Object} data Pointer event data.\n   * @param {Event} event The event.\n   */\n  over(data, event) {\n    data.bubbles = true;\n    this.fireEvent(PointerEventType.POINTEROVER, data, event);\n  }\n\n  /**\n   * Triggers a 'pointerout' event.\n   * @param {Object} data Pointer event data.\n   * @param {Event} event The event.\n   */\n  out(data, event) {\n    data.bubbles = true;\n    this.fireEvent(PointerEventType.POINTEROUT, data, event);\n  }\n\n  /**\n   * Triggers a 'pointercancel' event.\n   * @param {Object} data Pointer event data.\n   * @param {Event} event The event.\n   */\n  cancel(data, event) {\n    this.fireEvent(PointerEventType.POINTERCANCEL, data, event);\n  }\n\n  /**\n   * Triggers a combination of 'pointerout' and 'pointerleave' events.\n   * @param {Object} data Pointer event data.\n   * @param {Event} event The event.\n   */\n  leaveOut(data, event) {\n    this.out(data, event);\n    if (!this.contains_(data.target, data.relatedTarget)) {\n      this.leave(data, event);\n    }\n  }\n\n  /**\n   * Triggers a combination of 'pointerover' and 'pointerevents' events.\n   * @param {Object} data Pointer event data.\n   * @param {Event} event The event.\n   */\n  enterOver(data, event) {\n    this.over(data, event);\n    if (!this.contains_(data.target, data.relatedTarget)) {\n      this.enter(data, event);\n    }\n  }\n\n  /**\n   * @private\n   * @param {Element} container The container element.\n   * @param {Element} contained The contained element.\n   * @return {boolean} Returns true if the container element\n   *   contains the other element.\n   */\n  contains_(container, contained) {\n    if (!container || !contained) {\n      return false;\n    }\n    return container.contains(contained);\n  }\n\n  // EVENT CREATION AND TRACKING\n  /**\n   * Creates a new Event of type `inType`, based on the information in\n   * `data`.\n   *\n   * @param {string} inType A string representing the type of event to create.\n   * @param {Object} data Pointer event data.\n   * @param {Event} event The event.\n   * @return {PointerEvent} A PointerEvent of type `inType`.\n   */\n  makeEvent(inType, data, event) {\n    return new PointerEvent(inType, event, data);\n  }\n\n  /**\n   * Make and dispatch an event in one call.\n   * @param {string} inType A string representing the type of event.\n   * @param {Object} data Pointer event data.\n   * @param {Event} event The event.\n   */\n  fireEvent(inType, data, event) {\n    const e = this.makeEvent(inType, data, event);\n    this.dispatchEvent(e);\n  }\n\n  /**\n   * Creates a pointer event from a native pointer event\n   * and dispatches this event.\n   * @param {Event} event A platform event with a target.\n   */\n  fireNativeEvent(event) {\n    const e = this.makeEvent(event.type, event, event);\n    this.dispatchEvent(e);\n  }\n\n  /**\n   * Wrap a native mouse event into a pointer event.\n   * This proxy method is required for the legacy IE support.\n   * @param {string} eventType The pointer event type.\n   * @param {Event} event The event.\n   * @return {PointerEvent} The wrapped event.\n   */\n  wrapMouseEvent(eventType, event) {\n    const pointerEvent = this.makeEvent(\n      eventType, prepareMouseEvent(event, this), event);\n    return pointerEvent;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  disposeInternal() {\n    this.unregister_();\n    super.disposeInternal();\n  }\n}\n\nexport default PointerEventHandler;\n"]},"metadata":{},"sourceType":"module"}