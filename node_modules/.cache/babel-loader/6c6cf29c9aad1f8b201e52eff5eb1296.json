{"ast":null,"code":"/**\n * @module ol/format/filter/IsLike\n */\nimport { inherits } from '../../util.js';\nimport Comparison from '../filter/Comparison.js';\n/**\n * @classdesc\n * Represents a `<PropertyIsLike>` comparison operator.\n *\n * @constructor\n * @param {!string} propertyName Name of the context property to compare.\n * @param {!string} pattern Text pattern.\n * @param {string=} opt_wildCard Pattern character which matches any sequence of\n *    zero or more string characters. Default is '*'.\n * @param {string=} opt_singleChar pattern character which matches any single\n *    string character. Default is '.'.\n * @param {string=} opt_escapeChar Escape character which can be used to escape\n *    the pattern characters. Default is '!'.\n * @param {boolean=} opt_matchCase Case-sensitive?\n * @extends {module:ol/format/filter/Comparison}\n * @api\n */\n\nconst IsLike = function (propertyName, pattern, opt_wildCard, opt_singleChar, opt_escapeChar, opt_matchCase) {\n  Comparison.call(this, 'PropertyIsLike', propertyName);\n  /**\n   * @type {!string}\n   */\n\n  this.pattern = pattern;\n  /**\n   * @type {!string}\n   */\n\n  this.wildCard = opt_wildCard !== undefined ? opt_wildCard : '*';\n  /**\n   * @type {!string}\n   */\n\n  this.singleChar = opt_singleChar !== undefined ? opt_singleChar : '.';\n  /**\n   * @type {!string}\n   */\n\n  this.escapeChar = opt_escapeChar !== undefined ? opt_escapeChar : '!';\n  /**\n   * @type {boolean|undefined}\n   */\n\n  this.matchCase = opt_matchCase;\n};\n\ninherits(IsLike, Comparison);\nexport default IsLike;","map":null,"metadata":{},"sourceType":"module"}