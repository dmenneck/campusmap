{"ast":null,"code":"/**\n * @module ol/View\n */\nimport { DEFAULT_TILE_SIZE } from './tilegrid/common.js';\nimport { getUid } from './util.js';\nimport { VOID } from './functions.js';\nimport { createExtent, none as centerNone } from './centerconstraint.js';\nimport BaseObject from './Object.js';\nimport { createSnapToResolutions, createSnapToPower } from './resolutionconstraint.js';\nimport { createSnapToZero, createSnapToN, none as rotationNone, disable } from './rotationconstraint.js';\nimport ViewHint from './ViewHint.js';\nimport ViewProperty from './ViewProperty.js';\nimport { linearFindNearest } from './array.js';\nimport { assert } from './asserts.js';\nimport { add as addCoordinate, rotate as rotateCoordinate, equals as coordinatesEqual } from './coordinate.js';\nimport { inAndOut } from './easing.js';\nimport { getForViewAndSize, getCenter, getHeight, getWidth, isEmpty } from './extent.js';\nimport GeometryType from './geom/GeometryType.js';\nimport { fromExtent as polygonFromExtent } from './geom/Polygon.js';\nimport { clamp, modulo } from './math.js';\nimport { assign } from './obj.js';\nimport { createProjection, METERS_PER_UNIT } from './proj.js';\nimport Units from './proj/Units.js';\n/**\n * An animation configuration\n *\n * @typedef {Object} Animation\n * @property {import(\"./coordinate.js\").Coordinate} [sourceCenter]\n * @property {import(\"./coordinate.js\").Coordinate} [targetCenter]\n * @property {number} [sourceResolution]\n * @property {number} [targetResolution]\n * @property {number} [sourceRotation]\n * @property {number} [targetRotation]\n * @property {import(\"./coordinate.js\").Coordinate} [anchor]\n * @property {number} start\n * @property {number} duration\n * @property {boolean} complete\n * @property {function(number):number} easing\n * @property {function(boolean)} callback\n */\n\n/**\n * @typedef {Object} Constraints\n * @property {import(\"./centerconstraint.js\").Type} center\n * @property {import(\"./resolutionconstraint.js\").Type} resolution\n * @property {import(\"./rotationconstraint.js\").Type} rotation\n */\n\n/**\n * @typedef {Object} FitOptions\n * @property {import(\"./size.js\").Size} [size] The size in pixels of the box to fit\n * the extent into. Default is the current size of the first map in the DOM that\n * uses this view, or `[100, 100]` if no such map is found.\n * @property {!Array<number>} [padding=[0, 0, 0, 0]] Padding (in pixels) to be\n * cleared inside the view. Values in the array are top, right, bottom and left\n * padding.\n * @property {boolean} [constrainResolution=true] Constrain the resolution.\n * @property {boolean} [nearest=false] If `constrainResolution` is `true`, get\n * the nearest extent instead of the closest that actually fits the view.\n * @property {number} [minResolution=0] Minimum resolution that we zoom to.\n * @property {number} [maxZoom] Maximum zoom level that we zoom to. If\n * `minResolution` is given, this property is ignored.\n * @property {number} [duration] The duration of the animation in milliseconds.\n * By default, there is no animation to the target extent.\n * @property {function(number):number} [easing] The easing function used during\n * the animation (defaults to {@link module:ol/easing~inAndOut}).\n * The function will be called for each frame with a number representing a\n * fraction of the animation's duration.  The function should return a number\n * between 0 and 1 representing the progress toward the destination state.\n * @property {function(boolean)} [callback] Function called when the view is in\n * its final position. The callback will be called with `true` if the animation\n * series completed on its own or `false` if it was cancelled.\n */\n\n/**\n * @typedef {Object} ViewOptions\n * @property {import(\"./coordinate.js\").Coordinate} [center] The initial center for\n * the view. The coordinate system for the center is specified with the\n * `projection` option. Layer sources will not be fetched if this is not set,\n * but the center can be set later with {@link #setCenter}.\n * @property {boolean|number} [constrainRotation=true] Rotation constraint.\n * `false` means no constraint. `true` means no constraint, but snap to zero\n * near zero. A number constrains the rotation to that number of values. For\n * example, `4` will constrain the rotation to 0, 90, 180, and 270 degrees.\n * @property {boolean} [enableRotation=true] Enable rotation.\n * If `false`, a rotation constraint that always sets the rotation to zero is\n * used. The `constrainRotation` option has no effect if `enableRotation` is\n * `false`.\n * @property {import(\"./extent.js\").Extent} [extent] The extent that constrains the\n * center, in other words, center cannot be set outside this extent.\n * @property {number} [maxResolution] The maximum resolution used to determine\n * the resolution constraint. It is used together with `minResolution` (or\n * `maxZoom`) and `zoomFactor`. If unspecified it is calculated in such a way\n * that the projection's validity extent fits in a 256x256 px tile. If the\n * projection is Spherical Mercator (the default) then `maxResolution` defaults\n * to `40075016.68557849 / 256 = 156543.03392804097`.\n * @property {number} [minResolution] The minimum resolution used to determine\n * the resolution constraint.  It is used together with `maxResolution` (or\n * `minZoom`) and `zoomFactor`.  If unspecified it is calculated assuming 29\n * zoom levels (with a factor of 2). If the projection is Spherical Mercator\n * (the default) then `minResolution` defaults to\n * `40075016.68557849 / 256 / Math.pow(2, 28) = 0.0005831682455839253`.\n * @property {number} [maxZoom=28] The maximum zoom level used to determine the\n * resolution constraint. It is used together with `minZoom` (or\n * `maxResolution`) and `zoomFactor`.  Note that if `minResolution` is also\n * provided, it is given precedence over `maxZoom`.\n * @property {number} [minZoom=0] The minimum zoom level used to determine the\n * resolution constraint. It is used together with `maxZoom` (or\n * `minResolution`) and `zoomFactor`.  Note that if `maxResolution` is also\n * provided, it is given precedence over `minZoom`.\n * @property {import(\"./proj.js\").ProjectionLike} [projection='EPSG:3857'] The\n * projection. The default is Spherical Mercator.\n * @property {number} [resolution] The initial resolution for the view. The\n * units are `projection` units per pixel (e.g. meters per pixel). An\n * alternative to setting this is to set `zoom`. Layer sources will not be\n * fetched if neither this nor `zoom` are defined, but they can be set later\n * with {@link #setZoom} or {@link #setResolution}.\n * @property {Array<number>} [resolutions] Resolutions to determine the\n * resolution constraint. If set the `maxResolution`, `minResolution`,\n * `minZoom`, `maxZoom`, and `zoomFactor` options are ignored.\n * @property {number} [rotation=0] The initial rotation for the view in radians\n * (positive rotation clockwise, 0 means North).\n * @property {number} [zoom] Only used if `resolution` is not defined. Zoom\n * level used to calculate the initial resolution for the view. The initial\n * resolution is determined using the {@link #constrainResolution} method.\n * @property {number} [zoomFactor=2] The zoom factor used to determine the\n * resolution constraint.\n */\n\n/**\n * @typedef {Object} AnimationOptions\n * @property {import(\"./coordinate.js\").Coordinate} [center] The center of the view at the end of\n * the animation.\n * @property {number} [zoom] The zoom level of the view at the end of the\n * animation. This takes precedence over `resolution`.\n * @property {number} [resolution] The resolution of the view at the end\n * of the animation.  If `zoom` is also provided, this option will be ignored.\n * @property {number} [rotation] The rotation of the view at the end of\n * the animation.\n * @property {import(\"./coordinate.js\").Coordinate} [anchor] Optional anchor to remained fixed\n * during a rotation or resolution animation.\n * @property {number} [duration=1000] The duration of the animation in milliseconds.\n * @property {function(number):number} [easing] The easing function used\n * during the animation (defaults to {@link module:ol/easing~inAndOut}).\n * The function will be called for each frame with a number representing a\n * fraction of the animation's duration.  The function should return a number\n * between 0 and 1 representing the progress toward the destination state.\n */\n\n/**\n * @typedef {Object} State\n * @property {import(\"./coordinate.js\").Coordinate} center\n * @property {import(\"./proj/Projection.js\").default} projection\n * @property {number} resolution\n * @property {number} rotation\n * @property {number} zoom\n */\n\n/**\n * Default min zoom level for the map view.\n * @type {number}\n */\n\nvar DEFAULT_MIN_ZOOM = 0;\n/**\n * @classdesc\n * A View object represents a simple 2D view of the map.\n *\n * This is the object to act upon to change the center, resolution,\n * and rotation of the map.\n *\n * ### The view states\n *\n * An View is determined by three states: `center`, `resolution`,\n * and `rotation`. Each state has a corresponding getter and setter, e.g.\n * `getCenter` and `setCenter` for the `center` state.\n *\n * An View has a `projection`. The projection determines the\n * coordinate system of the center, and its units determine the units of the\n * resolution (projection units per pixel). The default projection is\n * Spherical Mercator (EPSG:3857).\n *\n * ### The constraints\n *\n * `setCenter`, `setResolution` and `setRotation` can be used to change the\n * states of the view. Any value can be passed to the setters. And the value\n * that is passed to a setter will effectively be the value set in the view,\n * and returned by the corresponding getter.\n *\n * But a View object also has a *resolution constraint*, a\n * *rotation constraint* and a *center constraint*.\n *\n * As said above, no constraints are applied when the setters are used to set\n * new states for the view. Applying constraints is done explicitly through\n * the use of the `constrain*` functions (`constrainResolution` and\n * `constrainRotation` and `constrainCenter`).\n *\n * The main users of the constraints are the interactions and the\n * controls. For example, double-clicking on the map changes the view to\n * the \"next\" resolution. And releasing the fingers after pinch-zooming\n * snaps to the closest resolution (with an animation).\n *\n * The *resolution constraint* snaps to specific resolutions. It is\n * determined by the following options: `resolutions`, `maxResolution`,\n * `maxZoom`, and `zoomFactor`. If `resolutions` is set, the other three\n * options are ignored. See documentation for each option for more\n * information.\n *\n * The *rotation constraint* snaps to specific angles. It is determined\n * by the following options: `enableRotation` and `constrainRotation`.\n * By default the rotation value is snapped to zero when approaching the\n * horizontal.\n *\n * The *center constraint* is determined by the `extent` option. By\n * default the center is not constrained at all.\n *\n  * @api\n */\n\nvar View =\n/*@__PURE__*/\nfunction (BaseObject) {\n  function View(opt_options) {\n    BaseObject.call(this);\n    var options = assign({}, opt_options);\n    /**\n     * @private\n     * @type {Array<number>}\n     */\n\n    this.hints_ = [0, 0];\n    /**\n     * @private\n     * @type {Array<Array<Animation>>}\n     */\n\n    this.animations_ = [];\n    /**\n     * @private\n     * @type {number|undefined}\n     */\n\n    this.updateAnimationKey_;\n    this.updateAnimations_ = this.updateAnimations_.bind(this);\n    /**\n     * @private\n     * @const\n     * @type {import(\"./proj/Projection.js\").default}\n     */\n\n    this.projection_ = createProjection(options.projection, 'EPSG:3857');\n    this.applyOptions_(options);\n  }\n\n  if (BaseObject) View.__proto__ = BaseObject;\n  View.prototype = Object.create(BaseObject && BaseObject.prototype);\n  View.prototype.constructor = View;\n  /**\n   * Set up the view with the given options.\n   * @param {ViewOptions} options View options.\n   */\n\n  View.prototype.applyOptions_ = function applyOptions_(options) {\n    /**\n     * @type {Object<string, *>}\n     */\n    var properties = {};\n    properties[ViewProperty.CENTER] = options.center !== undefined ? options.center : null;\n    var resolutionConstraintInfo = createResolutionConstraint(options);\n    /**\n     * @private\n     * @type {number}\n     */\n\n    this.maxResolution_ = resolutionConstraintInfo.maxResolution;\n    /**\n     * @private\n     * @type {number}\n     */\n\n    this.minResolution_ = resolutionConstraintInfo.minResolution;\n    /**\n     * @private\n     * @type {number}\n     */\n\n    this.zoomFactor_ = resolutionConstraintInfo.zoomFactor;\n    /**\n     * @private\n     * @type {Array<number>|undefined}\n     */\n\n    this.resolutions_ = options.resolutions;\n    /**\n     * @private\n     * @type {number}\n     */\n\n    this.minZoom_ = resolutionConstraintInfo.minZoom;\n    var centerConstraint = createCenterConstraint(options);\n    var resolutionConstraint = resolutionConstraintInfo.constraint;\n    var rotationConstraint = createRotationConstraint(options);\n    /**\n     * @private\n     * @type {Constraints}\n     */\n\n    this.constraints_ = {\n      center: centerConstraint,\n      resolution: resolutionConstraint,\n      rotation: rotationConstraint\n    };\n\n    if (options.resolution !== undefined) {\n      properties[ViewProperty.RESOLUTION] = options.resolution;\n    } else if (options.zoom !== undefined) {\n      properties[ViewProperty.RESOLUTION] = this.constrainResolution(this.maxResolution_, options.zoom - this.minZoom_);\n\n      if (this.resolutions_) {\n        // in case map zoom is out of min/max zoom range\n        properties[ViewProperty.RESOLUTION] = clamp(Number(this.getResolution() || properties[ViewProperty.RESOLUTION]), this.minResolution_, this.maxResolution_);\n      }\n    }\n\n    properties[ViewProperty.ROTATION] = options.rotation !== undefined ? options.rotation : 0;\n    this.setProperties(properties);\n    /**\n     * @private\n     * @type {ViewOptions}\n     */\n\n    this.options_ = options;\n  };\n  /**\n   * Get an updated version of the view options used to construct the view.  The\n   * current resolution (or zoom), center, and rotation are applied to any stored\n   * options.  The provided options can be used to apply new min/max zoom or\n   * resolution limits.\n   * @param {ViewOptions} newOptions New options to be applied.\n   * @return {ViewOptions} New options updated with the current view state.\n   */\n\n\n  View.prototype.getUpdatedOptions_ = function getUpdatedOptions_(newOptions) {\n    var options = assign({}, this.options_); // preserve resolution (or zoom)\n\n    if (options.resolution !== undefined) {\n      options.resolution = this.getResolution();\n    } else {\n      options.zoom = this.getZoom();\n    } // preserve center\n\n\n    options.center = this.getCenter(); // preserve rotation\n\n    options.rotation = this.getRotation();\n    return assign({}, options, newOptions);\n  };\n  /**\n   * Animate the view.  The view's center, zoom (or resolution), and rotation\n   * can be animated for smooth transitions between view states.  For example,\n   * to animate the view to a new zoom level:\n   *\n   *     view.animate({zoom: view.getZoom() + 1});\n   *\n   * By default, the animation lasts one second and uses in-and-out easing.  You\n   * can customize this behavior by including `duration` (in milliseconds) and\n   * `easing` options (see {@link module:ol/easing}).\n   *\n   * To chain together multiple animations, call the method with multiple\n   * animation objects.  For example, to first zoom and then pan:\n   *\n   *     view.animate({zoom: 10}, {center: [0, 0]});\n   *\n   * If you provide a function as the last argument to the animate method, it\n   * will get called at the end of an animation series.  The callback will be\n   * called with `true` if the animation series completed on its own or `false`\n   * if it was cancelled.\n   *\n   * Animations are cancelled by user interactions (e.g. dragging the map) or by\n   * calling `view.setCenter()`, `view.setResolution()`, or `view.setRotation()`\n   * (or another method that calls one of these).\n   *\n   * @param {...(AnimationOptions|function(boolean))} var_args Animation\n   *     options.  Multiple animations can be run in series by passing multiple\n   *     options objects.  To run multiple animations in parallel, call the method\n   *     multiple times.  An optional callback can be provided as a final\n   *     argument.  The callback will be called with a boolean indicating whether\n   *     the animation completed without being cancelled.\n   * @api\n   */\n\n\n  View.prototype.animate = function animate(var_args) {\n    var arguments$1 = arguments;\n    var animationCount = arguments.length;\n    var callback;\n\n    if (animationCount > 1 && typeof arguments[animationCount - 1] === 'function') {\n      callback = arguments[animationCount - 1];\n      --animationCount;\n    }\n\n    if (!this.isDef()) {\n      // if view properties are not yet set, shortcut to the final state\n      var state = arguments[animationCount - 1];\n\n      if (state.center) {\n        this.setCenter(state.center);\n      }\n\n      if (state.zoom !== undefined) {\n        this.setZoom(state.zoom);\n      }\n\n      if (state.rotation !== undefined) {\n        this.setRotation(state.rotation);\n      }\n\n      if (callback) {\n        animationCallback(callback, true);\n      }\n\n      return;\n    }\n\n    var start = Date.now();\n    var center = this.getCenter().slice();\n    var resolution = this.getResolution();\n    var rotation = this.getRotation();\n    var series = [];\n\n    for (var i = 0; i < animationCount; ++i) {\n      var options =\n      /** @type {AnimationOptions} */\n      arguments$1[i];\n      var animation =\n      /** @type {Animation} */\n      {\n        start: start,\n        complete: false,\n        anchor: options.anchor,\n        duration: options.duration !== undefined ? options.duration : 1000,\n        easing: options.easing || inAndOut\n      };\n\n      if (options.center) {\n        animation.sourceCenter = center;\n        animation.targetCenter = options.center;\n        center = animation.targetCenter;\n      }\n\n      if (options.zoom !== undefined) {\n        animation.sourceResolution = resolution;\n        animation.targetResolution = this.constrainResolution(this.maxResolution_, options.zoom - this.minZoom_, 0);\n        resolution = animation.targetResolution;\n      } else if (options.resolution) {\n        animation.sourceResolution = resolution;\n        animation.targetResolution = options.resolution;\n        resolution = animation.targetResolution;\n      }\n\n      if (options.rotation !== undefined) {\n        animation.sourceRotation = rotation;\n        var delta = modulo(options.rotation - rotation + Math.PI, 2 * Math.PI) - Math.PI;\n        animation.targetRotation = rotation + delta;\n        rotation = animation.targetRotation;\n      }\n\n      animation.callback = callback; // check if animation is a no-op\n\n      if (isNoopAnimation(animation)) {\n        animation.complete = true; // we still push it onto the series for callback handling\n      } else {\n        start += animation.duration;\n      }\n\n      series.push(animation);\n    }\n\n    this.animations_.push(series);\n    this.setHint(ViewHint.ANIMATING, 1);\n    this.updateAnimations_();\n  };\n  /**\n   * Determine if the view is being animated.\n   * @return {boolean} The view is being animated.\n   * @api\n   */\n\n\n  View.prototype.getAnimating = function getAnimating() {\n    return this.hints_[ViewHint.ANIMATING] > 0;\n  };\n  /**\n   * Determine if the user is interacting with the view, such as panning or zooming.\n   * @return {boolean} The view is being interacted with.\n   * @api\n   */\n\n\n  View.prototype.getInteracting = function getInteracting() {\n    return this.hints_[ViewHint.INTERACTING] > 0;\n  };\n  /**\n   * Cancel any ongoing animations.\n   * @api\n   */\n\n\n  View.prototype.cancelAnimations = function cancelAnimations() {\n    this.setHint(ViewHint.ANIMATING, -this.hints_[ViewHint.ANIMATING]);\n\n    for (var i = 0, ii = this.animations_.length; i < ii; ++i) {\n      var series = this.animations_[i];\n\n      if (series[0].callback) {\n        animationCallback(series[0].callback, false);\n      }\n    }\n\n    this.animations_.length = 0;\n  };\n  /**\n   * Update all animations.\n   */\n\n\n  View.prototype.updateAnimations_ = function updateAnimations_() {\n    if (this.updateAnimationKey_ !== undefined) {\n      cancelAnimationFrame(this.updateAnimationKey_);\n      this.updateAnimationKey_ = undefined;\n    }\n\n    if (!this.getAnimating()) {\n      return;\n    }\n\n    var now = Date.now();\n    var more = false;\n\n    for (var i = this.animations_.length - 1; i >= 0; --i) {\n      var series = this.animations_[i];\n      var seriesComplete = true;\n\n      for (var j = 0, jj = series.length; j < jj; ++j) {\n        var animation = series[j];\n\n        if (animation.complete) {\n          continue;\n        }\n\n        var elapsed = now - animation.start;\n        var fraction = animation.duration > 0 ? elapsed / animation.duration : 1;\n\n        if (fraction >= 1) {\n          animation.complete = true;\n          fraction = 1;\n        } else {\n          seriesComplete = false;\n        }\n\n        var progress = animation.easing(fraction);\n\n        if (animation.sourceCenter) {\n          var x0 = animation.sourceCenter[0];\n          var y0 = animation.sourceCenter[1];\n          var x1 = animation.targetCenter[0];\n          var y1 = animation.targetCenter[1];\n          var x = x0 + progress * (x1 - x0);\n          var y = y0 + progress * (y1 - y0);\n          this.set(ViewProperty.CENTER, [x, y]);\n        }\n\n        if (animation.sourceResolution && animation.targetResolution) {\n          var resolution = progress === 1 ? animation.targetResolution : animation.sourceResolution + progress * (animation.targetResolution - animation.sourceResolution);\n\n          if (animation.anchor) {\n            this.set(ViewProperty.CENTER, this.calculateCenterZoom(resolution, animation.anchor));\n          }\n\n          this.set(ViewProperty.RESOLUTION, resolution);\n        }\n\n        if (animation.sourceRotation !== undefined && animation.targetRotation !== undefined) {\n          var rotation = progress === 1 ? modulo(animation.targetRotation + Math.PI, 2 * Math.PI) - Math.PI : animation.sourceRotation + progress * (animation.targetRotation - animation.sourceRotation);\n\n          if (animation.anchor) {\n            this.set(ViewProperty.CENTER, this.calculateCenterRotate(rotation, animation.anchor));\n          }\n\n          this.set(ViewProperty.ROTATION, rotation);\n        }\n\n        more = true;\n\n        if (!animation.complete) {\n          break;\n        }\n      }\n\n      if (seriesComplete) {\n        this.animations_[i] = null;\n        this.setHint(ViewHint.ANIMATING, -1);\n        var callback = series[0].callback;\n\n        if (callback) {\n          animationCallback(callback, true);\n        }\n      }\n    } // prune completed series\n\n\n    this.animations_ = this.animations_.filter(Boolean);\n\n    if (more && this.updateAnimationKey_ === undefined) {\n      this.updateAnimationKey_ = requestAnimationFrame(this.updateAnimations_);\n    }\n  };\n  /**\n   * @param {number} rotation Target rotation.\n   * @param {import(\"./coordinate.js\").Coordinate} anchor Rotation anchor.\n   * @return {import(\"./coordinate.js\").Coordinate|undefined} Center for rotation and anchor.\n   */\n\n\n  View.prototype.calculateCenterRotate = function calculateCenterRotate(rotation, anchor) {\n    var center;\n    var currentCenter = this.getCenter();\n\n    if (currentCenter !== undefined) {\n      center = [currentCenter[0] - anchor[0], currentCenter[1] - anchor[1]];\n      rotateCoordinate(center, rotation - this.getRotation());\n      addCoordinate(center, anchor);\n    }\n\n    return center;\n  };\n  /**\n   * @param {number} resolution Target resolution.\n   * @param {import(\"./coordinate.js\").Coordinate} anchor Zoom anchor.\n   * @return {import(\"./coordinate.js\").Coordinate|undefined} Center for resolution and anchor.\n   */\n\n\n  View.prototype.calculateCenterZoom = function calculateCenterZoom(resolution, anchor) {\n    var center;\n    var currentCenter = this.getCenter();\n    var currentResolution = this.getResolution();\n\n    if (currentCenter !== undefined && currentResolution !== undefined) {\n      var x = anchor[0] - resolution * (anchor[0] - currentCenter[0]) / currentResolution;\n      var y = anchor[1] - resolution * (anchor[1] - currentCenter[1]) / currentResolution;\n      center = [x, y];\n    }\n\n    return center;\n  };\n  /**\n   * @private\n   * @return {import(\"./size.js\").Size} Viewport size or `[100, 100]` when no viewport is found.\n   */\n\n\n  View.prototype.getSizeFromViewport_ = function getSizeFromViewport_() {\n    var size = [100, 100];\n    var selector = '.ol-viewport[data-view=\"' + getUid(this) + '\"]';\n    var element = document.querySelector(selector);\n\n    if (element) {\n      var metrics = getComputedStyle(element);\n      size[0] = parseInt(metrics.width, 10);\n      size[1] = parseInt(metrics.height, 10);\n    }\n\n    return size;\n  };\n  /**\n   * Get the constrained center of this view.\n   * @param {import(\"./coordinate.js\").Coordinate|undefined} center Center.\n   * @return {import(\"./coordinate.js\").Coordinate|undefined} Constrained center.\n   * @api\n   */\n\n\n  View.prototype.constrainCenter = function constrainCenter(center) {\n    return this.constraints_.center(center);\n  };\n  /**\n   * Get the constrained resolution of this view.\n   * @param {number|undefined} resolution Resolution.\n   * @param {number=} opt_delta Delta. Default is `0`.\n   * @param {number=} opt_direction Direction. Default is `0`.\n   * @return {number|undefined} Constrained resolution.\n   * @api\n   */\n\n\n  View.prototype.constrainResolution = function constrainResolution(resolution, opt_delta, opt_direction) {\n    var delta = opt_delta || 0;\n    var direction = opt_direction || 0;\n    return this.constraints_.resolution(resolution, delta, direction);\n  };\n  /**\n   * Get the constrained rotation of this view.\n   * @param {number|undefined} rotation Rotation.\n   * @param {number=} opt_delta Delta. Default is `0`.\n   * @return {number|undefined} Constrained rotation.\n   * @api\n   */\n\n\n  View.prototype.constrainRotation = function constrainRotation(rotation, opt_delta) {\n    var delta = opt_delta || 0;\n    return this.constraints_.rotation(rotation, delta);\n  };\n  /**\n   * Get the view center.\n   * @return {import(\"./coordinate.js\").Coordinate|undefined} The center of the view.\n   * @observable\n   * @api\n   */\n\n\n  View.prototype.getCenter = function getCenter() {\n    return (\n      /** @type {import(\"./coordinate.js\").Coordinate|undefined} */\n      this.get(ViewProperty.CENTER)\n    );\n  };\n  /**\n   * @return {Constraints} Constraints.\n   */\n\n\n  View.prototype.getConstraints = function getConstraints() {\n    return this.constraints_;\n  };\n  /**\n   * @param {Array<number>=} opt_hints Destination array.\n   * @return {Array<number>} Hint.\n   */\n\n\n  View.prototype.getHints = function getHints(opt_hints) {\n    if (opt_hints !== undefined) {\n      opt_hints[0] = this.hints_[0];\n      opt_hints[1] = this.hints_[1];\n      return opt_hints;\n    } else {\n      return this.hints_.slice();\n    }\n  };\n  /**\n   * Calculate the extent for the current view state and the passed size.\n   * The size is the pixel dimensions of the box into which the calculated extent\n   * should fit. In most cases you want to get the extent of the entire map,\n   * that is `map.getSize()`.\n   * @param {import(\"./size.js\").Size=} opt_size Box pixel size. If not provided, the size of the\n   * first map that uses this view will be used.\n   * @return {import(\"./extent.js\").Extent} Extent.\n   * @api\n   */\n\n\n  View.prototype.calculateExtent = function calculateExtent(opt_size) {\n    var size = opt_size || this.getSizeFromViewport_();\n    var center =\n    /** @type {!import(\"./coordinate.js\").Coordinate} */\n    this.getCenter();\n    assert(center, 1); // The view center is not defined\n\n    var resolution =\n    /** @type {!number} */\n    this.getResolution();\n    assert(resolution !== undefined, 2); // The view resolution is not defined\n\n    var rotation =\n    /** @type {!number} */\n    this.getRotation();\n    assert(rotation !== undefined, 3); // The view rotation is not defined\n\n    return getForViewAndSize(center, resolution, rotation, size);\n  };\n  /**\n   * Get the maximum resolution of the view.\n   * @return {number} The maximum resolution of the view.\n   * @api\n   */\n\n\n  View.prototype.getMaxResolution = function getMaxResolution() {\n    return this.maxResolution_;\n  };\n  /**\n   * Get the minimum resolution of the view.\n   * @return {number} The minimum resolution of the view.\n   * @api\n   */\n\n\n  View.prototype.getMinResolution = function getMinResolution() {\n    return this.minResolution_;\n  };\n  /**\n   * Get the maximum zoom level for the view.\n   * @return {number} The maximum zoom level.\n   * @api\n   */\n\n\n  View.prototype.getMaxZoom = function getMaxZoom() {\n    return (\n      /** @type {number} */\n      this.getZoomForResolution(this.minResolution_)\n    );\n  };\n  /**\n   * Set a new maximum zoom level for the view.\n   * @param {number} zoom The maximum zoom level.\n   * @api\n   */\n\n\n  View.prototype.setMaxZoom = function setMaxZoom(zoom) {\n    this.applyOptions_(this.getUpdatedOptions_({\n      maxZoom: zoom\n    }));\n  };\n  /**\n   * Get the minimum zoom level for the view.\n   * @return {number} The minimum zoom level.\n   * @api\n   */\n\n\n  View.prototype.getMinZoom = function getMinZoom() {\n    return (\n      /** @type {number} */\n      this.getZoomForResolution(this.maxResolution_)\n    );\n  };\n  /**\n   * Set a new minimum zoom level for the view.\n   * @param {number} zoom The minimum zoom level.\n   * @api\n   */\n\n\n  View.prototype.setMinZoom = function setMinZoom(zoom) {\n    this.applyOptions_(this.getUpdatedOptions_({\n      minZoom: zoom\n    }));\n  };\n  /**\n   * Get the view projection.\n   * @return {import(\"./proj/Projection.js\").default} The projection of the view.\n   * @api\n   */\n\n\n  View.prototype.getProjection = function getProjection() {\n    return this.projection_;\n  };\n  /**\n   * Get the view resolution.\n   * @return {number|undefined} The resolution of the view.\n   * @observable\n   * @api\n   */\n\n\n  View.prototype.getResolution = function getResolution() {\n    return (\n      /** @type {number|undefined} */\n      this.get(ViewProperty.RESOLUTION)\n    );\n  };\n  /**\n   * Get the resolutions for the view. This returns the array of resolutions\n   * passed to the constructor of the View, or undefined if none were given.\n   * @return {Array<number>|undefined} The resolutions of the view.\n   * @api\n   */\n\n\n  View.prototype.getResolutions = function getResolutions() {\n    return this.resolutions_;\n  };\n  /**\n   * Get the resolution for a provided extent (in map units) and size (in pixels).\n   * @param {import(\"./extent.js\").Extent} extent Extent.\n   * @param {import(\"./size.js\").Size=} opt_size Box pixel size.\n   * @return {number} The resolution at which the provided extent will render at\n   *     the given size.\n   * @api\n   */\n\n\n  View.prototype.getResolutionForExtent = function getResolutionForExtent(extent, opt_size) {\n    var size = opt_size || this.getSizeFromViewport_();\n    var xResolution = getWidth(extent) / size[0];\n    var yResolution = getHeight(extent) / size[1];\n    return Math.max(xResolution, yResolution);\n  };\n  /**\n   * Return a function that returns a value between 0 and 1 for a\n   * resolution. Exponential scaling is assumed.\n   * @param {number=} opt_power Power.\n   * @return {function(number): number} Resolution for value function.\n   */\n\n\n  View.prototype.getResolutionForValueFunction = function getResolutionForValueFunction(opt_power) {\n    var power = opt_power || 2;\n    var maxResolution = this.maxResolution_;\n    var minResolution = this.minResolution_;\n    var max = Math.log(maxResolution / minResolution) / Math.log(power);\n    return (\n      /**\n       * @param {number} value Value.\n       * @return {number} Resolution.\n       */\n      function (value) {\n        var resolution = maxResolution / Math.pow(power, value * max);\n        return resolution;\n      }\n    );\n  };\n  /**\n   * Get the view rotation.\n   * @return {number} The rotation of the view in radians.\n   * @observable\n   * @api\n   */\n\n\n  View.prototype.getRotation = function getRotation() {\n    return (\n      /** @type {number} */\n      this.get(ViewProperty.ROTATION)\n    );\n  };\n  /**\n   * Return a function that returns a resolution for a value between\n   * 0 and 1. Exponential scaling is assumed.\n   * @param {number=} opt_power Power.\n   * @return {function(number): number} Value for resolution function.\n   */\n\n\n  View.prototype.getValueForResolutionFunction = function getValueForResolutionFunction(opt_power) {\n    var power = opt_power || 2;\n    var maxResolution = this.maxResolution_;\n    var minResolution = this.minResolution_;\n    var max = Math.log(maxResolution / minResolution) / Math.log(power);\n    return (\n      /**\n       * @param {number} resolution Resolution.\n       * @return {number} Value.\n       */\n      function (resolution) {\n        var value = Math.log(maxResolution / resolution) / Math.log(power) / max;\n        return value;\n      }\n    );\n  };\n  /**\n   * @param {number} pixelRatio Pixel ratio for center rounding.\n   * @return {State} View state.\n   */\n\n\n  View.prototype.getState = function getState(pixelRatio) {\n    var center =\n    /** @type {import(\"./coordinate.js\").Coordinate} */\n    this.getCenter();\n    var projection = this.getProjection();\n    var resolution =\n    /** @type {number} */\n    this.getResolution();\n    var pixelResolution = resolution / pixelRatio;\n    var rotation = this.getRotation();\n    return (\n      /** @type {State} */\n      {\n        center: [Math.round(center[0] / pixelResolution) * pixelResolution, Math.round(center[1] / pixelResolution) * pixelResolution],\n        projection: projection !== undefined ? projection : null,\n        resolution: resolution,\n        rotation: rotation,\n        zoom: this.getZoom()\n      }\n    );\n  };\n  /**\n   * Get the current zoom level.  If you configured your view with a resolutions\n   * array (this is rare), this method may return non-integer zoom levels (so\n   * the zoom level is not safe to use as an index into a resolutions array).\n   * @return {number|undefined} Zoom.\n   * @api\n   */\n\n\n  View.prototype.getZoom = function getZoom() {\n    var zoom;\n    var resolution = this.getResolution();\n\n    if (resolution !== undefined) {\n      zoom = this.getZoomForResolution(resolution);\n    }\n\n    return zoom;\n  };\n  /**\n   * Get the zoom level for a resolution.\n   * @param {number} resolution The resolution.\n   * @return {number|undefined} The zoom level for the provided resolution.\n   * @api\n   */\n\n\n  View.prototype.getZoomForResolution = function getZoomForResolution(resolution) {\n    var offset = this.minZoom_ || 0;\n    var max, zoomFactor;\n\n    if (this.resolutions_) {\n      var nearest = linearFindNearest(this.resolutions_, resolution, 1);\n      offset = nearest;\n      max = this.resolutions_[nearest];\n\n      if (nearest == this.resolutions_.length - 1) {\n        zoomFactor = 2;\n      } else {\n        zoomFactor = max / this.resolutions_[nearest + 1];\n      }\n    } else {\n      max = this.maxResolution_;\n      zoomFactor = this.zoomFactor_;\n    }\n\n    return offset + Math.log(max / resolution) / Math.log(zoomFactor);\n  };\n  /**\n   * Get the resolution for a zoom level.\n   * @param {number} zoom Zoom level.\n   * @return {number} The view resolution for the provided zoom level.\n   * @api\n   */\n\n\n  View.prototype.getResolutionForZoom = function getResolutionForZoom(zoom) {\n    return (\n      /** @type {number} */\n      this.constrainResolution(this.maxResolution_, zoom - this.minZoom_, 0)\n    );\n  };\n  /**\n   * Fit the given geometry or extent based on the given map size and border.\n   * The size is pixel dimensions of the box to fit the extent into.\n   * In most cases you will want to use the map size, that is `map.getSize()`.\n   * Takes care of the map angle.\n   * @param {import(\"./geom/SimpleGeometry.js\").default|import(\"./extent.js\").Extent} geometryOrExtent The geometry or\n   *     extent to fit the view to.\n   * @param {FitOptions=} opt_options Options.\n   * @api\n   */\n\n\n  View.prototype.fit = function fit(geometryOrExtent, opt_options) {\n    var options = opt_options || {};\n    var size = options.size;\n\n    if (!size) {\n      size = this.getSizeFromViewport_();\n    }\n    /** @type {import(\"./geom/SimpleGeometry.js\").default} */\n\n\n    var geometry;\n    assert(Array.isArray(geometryOrExtent) || typeof\n    /** @type {?} */\n    geometryOrExtent.getSimplifiedGeometry === 'function', 24); // Invalid extent or geometry provided as `geometry`\n\n    if (Array.isArray(geometryOrExtent)) {\n      assert(!isEmpty(geometryOrExtent), 25); // Cannot fit empty extent provided as `geometry`\n\n      geometry = polygonFromExtent(geometryOrExtent);\n    } else if (geometryOrExtent.getType() === GeometryType.CIRCLE) {\n      geometryOrExtent = geometryOrExtent.getExtent();\n      geometry = polygonFromExtent(geometryOrExtent);\n      geometry.rotate(this.getRotation(), getCenter(geometryOrExtent));\n    } else {\n      geometry = geometryOrExtent;\n    }\n\n    var padding = options.padding !== undefined ? options.padding : [0, 0, 0, 0];\n    var constrainResolution = options.constrainResolution !== undefined ? options.constrainResolution : true;\n    var nearest = options.nearest !== undefined ? options.nearest : false;\n    var minResolution;\n\n    if (options.minResolution !== undefined) {\n      minResolution = options.minResolution;\n    } else if (options.maxZoom !== undefined) {\n      minResolution = this.constrainResolution(this.maxResolution_, options.maxZoom - this.minZoom_, 0);\n    } else {\n      minResolution = 0;\n    }\n\n    var coords = geometry.getFlatCoordinates(); // calculate rotated extent\n\n    var rotation = this.getRotation();\n    var cosAngle = Math.cos(-rotation);\n    var sinAngle = Math.sin(-rotation);\n    var minRotX = +Infinity;\n    var minRotY = +Infinity;\n    var maxRotX = -Infinity;\n    var maxRotY = -Infinity;\n    var stride = geometry.getStride();\n\n    for (var i = 0, ii = coords.length; i < ii; i += stride) {\n      var rotX = coords[i] * cosAngle - coords[i + 1] * sinAngle;\n      var rotY = coords[i] * sinAngle + coords[i + 1] * cosAngle;\n      minRotX = Math.min(minRotX, rotX);\n      minRotY = Math.min(minRotY, rotY);\n      maxRotX = Math.max(maxRotX, rotX);\n      maxRotY = Math.max(maxRotY, rotY);\n    } // calculate resolution\n\n\n    var resolution = this.getResolutionForExtent([minRotX, minRotY, maxRotX, maxRotY], [size[0] - padding[1] - padding[3], size[1] - padding[0] - padding[2]]);\n    resolution = isNaN(resolution) ? minResolution : Math.max(resolution, minResolution);\n\n    if (constrainResolution) {\n      var constrainedResolution = this.constrainResolution(resolution, 0, 0);\n\n      if (!nearest && constrainedResolution < resolution) {\n        constrainedResolution = this.constrainResolution(constrainedResolution, -1, 0);\n      }\n\n      resolution = constrainedResolution;\n    } // calculate center\n\n\n    sinAngle = -sinAngle; // go back to original rotation\n\n    var centerRotX = (minRotX + maxRotX) / 2;\n    var centerRotY = (minRotY + maxRotY) / 2;\n    centerRotX += (padding[1] - padding[3]) / 2 * resolution;\n    centerRotY += (padding[0] - padding[2]) / 2 * resolution;\n    var centerX = centerRotX * cosAngle - centerRotY * sinAngle;\n    var centerY = centerRotY * cosAngle + centerRotX * sinAngle;\n    var center = [centerX, centerY];\n    var callback = options.callback ? options.callback : VOID;\n\n    if (options.duration !== undefined) {\n      this.animate({\n        resolution: resolution,\n        center: center,\n        duration: options.duration,\n        easing: options.easing\n      }, callback);\n    } else {\n      this.setResolution(resolution);\n      this.setCenter(center);\n      animationCallback(callback, true);\n    }\n  };\n  /**\n   * Center on coordinate and view position.\n   * @param {import(\"./coordinate.js\").Coordinate} coordinate Coordinate.\n   * @param {import(\"./size.js\").Size} size Box pixel size.\n   * @param {import(\"./pixel.js\").Pixel} position Position on the view to center on.\n   * @api\n   */\n\n\n  View.prototype.centerOn = function centerOn(coordinate, size, position) {\n    // calculate rotated position\n    var rotation = this.getRotation();\n    var cosAngle = Math.cos(-rotation);\n    var sinAngle = Math.sin(-rotation);\n    var rotX = coordinate[0] * cosAngle - coordinate[1] * sinAngle;\n    var rotY = coordinate[1] * cosAngle + coordinate[0] * sinAngle;\n    var resolution = this.getResolution();\n    rotX += (size[0] / 2 - position[0]) * resolution;\n    rotY += (position[1] - size[1] / 2) * resolution; // go back to original angle\n\n    sinAngle = -sinAngle; // go back to original rotation\n\n    var centerX = rotX * cosAngle - rotY * sinAngle;\n    var centerY = rotY * cosAngle + rotX * sinAngle;\n    this.setCenter([centerX, centerY]);\n  };\n  /**\n   * @return {boolean} Is defined.\n   */\n\n\n  View.prototype.isDef = function isDef() {\n    return !!this.getCenter() && this.getResolution() !== undefined;\n  };\n  /**\n   * Rotate the view around a given coordinate.\n   * @param {number} rotation New rotation value for the view.\n   * @param {import(\"./coordinate.js\").Coordinate=} opt_anchor The rotation center.\n   * @api\n   */\n\n\n  View.prototype.rotate = function rotate(rotation, opt_anchor) {\n    if (opt_anchor !== undefined) {\n      var center = this.calculateCenterRotate(rotation, opt_anchor);\n      this.setCenter(center);\n    }\n\n    this.setRotation(rotation);\n  };\n  /**\n   * Set the center of the current view.\n   * @param {import(\"./coordinate.js\").Coordinate|undefined} center The center of the view.\n   * @observable\n   * @api\n   */\n\n\n  View.prototype.setCenter = function setCenter(center) {\n    this.set(ViewProperty.CENTER, center);\n\n    if (this.getAnimating()) {\n      this.cancelAnimations();\n    }\n  };\n  /**\n   * @param {ViewHint} hint Hint.\n   * @param {number} delta Delta.\n   * @return {number} New value.\n   */\n\n\n  View.prototype.setHint = function setHint(hint, delta) {\n    this.hints_[hint] += delta;\n    this.changed();\n    return this.hints_[hint];\n  };\n  /**\n   * Set the resolution for this view.\n   * @param {number|undefined} resolution The resolution of the view.\n   * @observable\n   * @api\n   */\n\n\n  View.prototype.setResolution = function setResolution(resolution) {\n    this.set(ViewProperty.RESOLUTION, resolution);\n\n    if (this.getAnimating()) {\n      this.cancelAnimations();\n    }\n  };\n  /**\n   * Set the rotation for this view.\n   * @param {number} rotation The rotation of the view in radians.\n   * @observable\n   * @api\n   */\n\n\n  View.prototype.setRotation = function setRotation(rotation) {\n    this.set(ViewProperty.ROTATION, rotation);\n\n    if (this.getAnimating()) {\n      this.cancelAnimations();\n    }\n  };\n  /**\n   * Zoom to a specific zoom level.\n   * @param {number} zoom Zoom level.\n   * @api\n   */\n\n\n  View.prototype.setZoom = function setZoom(zoom) {\n    this.setResolution(this.getResolutionForZoom(zoom));\n  };\n\n  return View;\n}(BaseObject);\n/**\n * @param {Function} callback Callback.\n * @param {*} returnValue Return value.\n */\n\n\nfunction animationCallback(callback, returnValue) {\n  setTimeout(function () {\n    callback(returnValue);\n  }, 0);\n}\n/**\n * @param {ViewOptions} options View options.\n * @return {import(\"./centerconstraint.js\").Type} The constraint.\n */\n\n\nexport function createCenterConstraint(options) {\n  if (options.extent !== undefined) {\n    return createExtent(options.extent);\n  } else {\n    return centerNone;\n  }\n}\n/**\n * @param {ViewOptions} options View options.\n * @return {{constraint: import(\"./resolutionconstraint.js\").Type, maxResolution: number,\n *     minResolution: number, minZoom: number, zoomFactor: number}} The constraint.\n */\n\nexport function createResolutionConstraint(options) {\n  var resolutionConstraint;\n  var maxResolution;\n  var minResolution; // TODO: move these to be ol constants\n  // see https://github.com/openlayers/openlayers/issues/2076\n\n  var defaultMaxZoom = 28;\n  var defaultZoomFactor = 2;\n  var minZoom = options.minZoom !== undefined ? options.minZoom : DEFAULT_MIN_ZOOM;\n  var maxZoom = options.maxZoom !== undefined ? options.maxZoom : defaultMaxZoom;\n  var zoomFactor = options.zoomFactor !== undefined ? options.zoomFactor : defaultZoomFactor;\n\n  if (options.resolutions !== undefined) {\n    var resolutions = options.resolutions;\n    maxResolution = resolutions[minZoom];\n    minResolution = resolutions[maxZoom] !== undefined ? resolutions[maxZoom] : resolutions[resolutions.length - 1];\n    resolutionConstraint = createSnapToResolutions(resolutions);\n  } else {\n    // calculate the default min and max resolution\n    var projection = createProjection(options.projection, 'EPSG:3857');\n    var extent = projection.getExtent();\n    var size = !extent ? // use an extent that can fit the whole world if need be\n    360 * METERS_PER_UNIT[Units.DEGREES] / projection.getMetersPerUnit() : Math.max(getWidth(extent), getHeight(extent));\n    var defaultMaxResolution = size / DEFAULT_TILE_SIZE / Math.pow(defaultZoomFactor, DEFAULT_MIN_ZOOM);\n    var defaultMinResolution = defaultMaxResolution / Math.pow(defaultZoomFactor, defaultMaxZoom - DEFAULT_MIN_ZOOM); // user provided maxResolution takes precedence\n\n    maxResolution = options.maxResolution;\n\n    if (maxResolution !== undefined) {\n      minZoom = 0;\n    } else {\n      maxResolution = defaultMaxResolution / Math.pow(zoomFactor, minZoom);\n    } // user provided minResolution takes precedence\n\n\n    minResolution = options.minResolution;\n\n    if (minResolution === undefined) {\n      if (options.maxZoom !== undefined) {\n        if (options.maxResolution !== undefined) {\n          minResolution = maxResolution / Math.pow(zoomFactor, maxZoom);\n        } else {\n          minResolution = defaultMaxResolution / Math.pow(zoomFactor, maxZoom);\n        }\n      } else {\n        minResolution = defaultMinResolution;\n      }\n    } // given discrete zoom levels, minResolution may be different than provided\n\n\n    maxZoom = minZoom + Math.floor(Math.log(maxResolution / minResolution) / Math.log(zoomFactor));\n    minResolution = maxResolution / Math.pow(zoomFactor, maxZoom - minZoom);\n    resolutionConstraint = createSnapToPower(zoomFactor, maxResolution, maxZoom - minZoom);\n  }\n\n  return {\n    constraint: resolutionConstraint,\n    maxResolution: maxResolution,\n    minResolution: minResolution,\n    minZoom: minZoom,\n    zoomFactor: zoomFactor\n  };\n}\n/**\n * @param {ViewOptions} options View options.\n * @return {import(\"./rotationconstraint.js\").Type} Rotation constraint.\n */\n\nexport function createRotationConstraint(options) {\n  var enableRotation = options.enableRotation !== undefined ? options.enableRotation : true;\n\n  if (enableRotation) {\n    var constrainRotation = options.constrainRotation;\n\n    if (constrainRotation === undefined || constrainRotation === true) {\n      return createSnapToZero();\n    } else if (constrainRotation === false) {\n      return rotationNone;\n    } else if (typeof constrainRotation === 'number') {\n      return createSnapToN(constrainRotation);\n    } else {\n      return rotationNone;\n    }\n  } else {\n    return disable;\n  }\n}\n/**\n * Determine if an animation involves no view change.\n * @param {Animation} animation The animation.\n * @return {boolean} The animation involves no view change.\n */\n\nexport function isNoopAnimation(animation) {\n  if (animation.sourceCenter && animation.targetCenter) {\n    if (!coordinatesEqual(animation.sourceCenter, animation.targetCenter)) {\n      return false;\n    }\n  }\n\n  if (animation.sourceResolution !== animation.targetResolution) {\n    return false;\n  }\n\n  if (animation.sourceRotation !== animation.targetRotation) {\n    return false;\n  }\n\n  return true;\n}\nexport default View;","map":{"version":3,"sources":["../../src/ol/View.js"],"names":["const","super","let","arguments"],"mappings":"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","sourcesContent":["/**\n * @module ol/View\n */\nimport {DEFAULT_TILE_SIZE} from './tilegrid/common.js';\nimport {getUid} from './util.js';\nimport {VOID} from './functions.js';\nimport {createExtent, none as centerNone} from './centerconstraint.js';\nimport BaseObject from './Object.js';\nimport {createSnapToResolutions, createSnapToPower} from './resolutionconstraint.js';\nimport {createSnapToZero, createSnapToN, none as rotationNone, disable} from './rotationconstraint.js';\nimport ViewHint from './ViewHint.js';\nimport ViewProperty from './ViewProperty.js';\nimport {linearFindNearest} from './array.js';\nimport {assert} from './asserts.js';\nimport {add as addCoordinate, rotate as rotateCoordinate, equals as coordinatesEqual} from './coordinate.js';\nimport {inAndOut} from './easing.js';\nimport {getForViewAndSize, getCenter, getHeight, getWidth, isEmpty} from './extent.js';\nimport GeometryType from './geom/GeometryType.js';\nimport {fromExtent as polygonFromExtent} from './geom/Polygon.js';\nimport {clamp, modulo} from './math.js';\nimport {assign} from './obj.js';\nimport {createProjection, METERS_PER_UNIT} from './proj.js';\nimport Units from './proj/Units.js';\n\n\n/**\n * An animation configuration\n *\n * @typedef {Object} Animation\n * @property {import(\"./coordinate.js\").Coordinate} [sourceCenter]\n * @property {import(\"./coordinate.js\").Coordinate} [targetCenter]\n * @property {number} [sourceResolution]\n * @property {number} [targetResolution]\n * @property {number} [sourceRotation]\n * @property {number} [targetRotation]\n * @property {import(\"./coordinate.js\").Coordinate} [anchor]\n * @property {number} start\n * @property {number} duration\n * @property {boolean} complete\n * @property {function(number):number} easing\n * @property {function(boolean)} callback\n */\n\n\n/**\n * @typedef {Object} Constraints\n * @property {import(\"./centerconstraint.js\").Type} center\n * @property {import(\"./resolutionconstraint.js\").Type} resolution\n * @property {import(\"./rotationconstraint.js\").Type} rotation\n */\n\n\n/**\n * @typedef {Object} FitOptions\n * @property {import(\"./size.js\").Size} [size] The size in pixels of the box to fit\n * the extent into. Default is the current size of the first map in the DOM that\n * uses this view, or `[100, 100]` if no such map is found.\n * @property {!Array<number>} [padding=[0, 0, 0, 0]] Padding (in pixels) to be\n * cleared inside the view. Values in the array are top, right, bottom and left\n * padding.\n * @property {boolean} [constrainResolution=true] Constrain the resolution.\n * @property {boolean} [nearest=false] If `constrainResolution` is `true`, get\n * the nearest extent instead of the closest that actually fits the view.\n * @property {number} [minResolution=0] Minimum resolution that we zoom to.\n * @property {number} [maxZoom] Maximum zoom level that we zoom to. If\n * `minResolution` is given, this property is ignored.\n * @property {number} [duration] The duration of the animation in milliseconds.\n * By default, there is no animation to the target extent.\n * @property {function(number):number} [easing] The easing function used during\n * the animation (defaults to {@link module:ol/easing~inAndOut}).\n * The function will be called for each frame with a number representing a\n * fraction of the animation's duration.  The function should return a number\n * between 0 and 1 representing the progress toward the destination state.\n * @property {function(boolean)} [callback] Function called when the view is in\n * its final position. The callback will be called with `true` if the animation\n * series completed on its own or `false` if it was cancelled.\n */\n\n\n/**\n * @typedef {Object} ViewOptions\n * @property {import(\"./coordinate.js\").Coordinate} [center] The initial center for\n * the view. The coordinate system for the center is specified with the\n * `projection` option. Layer sources will not be fetched if this is not set,\n * but the center can be set later with {@link #setCenter}.\n * @property {boolean|number} [constrainRotation=true] Rotation constraint.\n * `false` means no constraint. `true` means no constraint, but snap to zero\n * near zero. A number constrains the rotation to that number of values. For\n * example, `4` will constrain the rotation to 0, 90, 180, and 270 degrees.\n * @property {boolean} [enableRotation=true] Enable rotation.\n * If `false`, a rotation constraint that always sets the rotation to zero is\n * used. The `constrainRotation` option has no effect if `enableRotation` is\n * `false`.\n * @property {import(\"./extent.js\").Extent} [extent] The extent that constrains the\n * center, in other words, center cannot be set outside this extent.\n * @property {number} [maxResolution] The maximum resolution used to determine\n * the resolution constraint. It is used together with `minResolution` (or\n * `maxZoom`) and `zoomFactor`. If unspecified it is calculated in such a way\n * that the projection's validity extent fits in a 256x256 px tile. If the\n * projection is Spherical Mercator (the default) then `maxResolution` defaults\n * to `40075016.68557849 / 256 = 156543.03392804097`.\n * @property {number} [minResolution] The minimum resolution used to determine\n * the resolution constraint.  It is used together with `maxResolution` (or\n * `minZoom`) and `zoomFactor`.  If unspecified it is calculated assuming 29\n * zoom levels (with a factor of 2). If the projection is Spherical Mercator\n * (the default) then `minResolution` defaults to\n * `40075016.68557849 / 256 / Math.pow(2, 28) = 0.0005831682455839253`.\n * @property {number} [maxZoom=28] The maximum zoom level used to determine the\n * resolution constraint. It is used together with `minZoom` (or\n * `maxResolution`) and `zoomFactor`.  Note that if `minResolution` is also\n * provided, it is given precedence over `maxZoom`.\n * @property {number} [minZoom=0] The minimum zoom level used to determine the\n * resolution constraint. It is used together with `maxZoom` (or\n * `minResolution`) and `zoomFactor`.  Note that if `maxResolution` is also\n * provided, it is given precedence over `minZoom`.\n * @property {import(\"./proj.js\").ProjectionLike} [projection='EPSG:3857'] The\n * projection. The default is Spherical Mercator.\n * @property {number} [resolution] The initial resolution for the view. The\n * units are `projection` units per pixel (e.g. meters per pixel). An\n * alternative to setting this is to set `zoom`. Layer sources will not be\n * fetched if neither this nor `zoom` are defined, but they can be set later\n * with {@link #setZoom} or {@link #setResolution}.\n * @property {Array<number>} [resolutions] Resolutions to determine the\n * resolution constraint. If set the `maxResolution`, `minResolution`,\n * `minZoom`, `maxZoom`, and `zoomFactor` options are ignored.\n * @property {number} [rotation=0] The initial rotation for the view in radians\n * (positive rotation clockwise, 0 means North).\n * @property {number} [zoom] Only used if `resolution` is not defined. Zoom\n * level used to calculate the initial resolution for the view. The initial\n * resolution is determined using the {@link #constrainResolution} method.\n * @property {number} [zoomFactor=2] The zoom factor used to determine the\n * resolution constraint.\n */\n\n\n/**\n * @typedef {Object} AnimationOptions\n * @property {import(\"./coordinate.js\").Coordinate} [center] The center of the view at the end of\n * the animation.\n * @property {number} [zoom] The zoom level of the view at the end of the\n * animation. This takes precedence over `resolution`.\n * @property {number} [resolution] The resolution of the view at the end\n * of the animation.  If `zoom` is also provided, this option will be ignored.\n * @property {number} [rotation] The rotation of the view at the end of\n * the animation.\n * @property {import(\"./coordinate.js\").Coordinate} [anchor] Optional anchor to remained fixed\n * during a rotation or resolution animation.\n * @property {number} [duration=1000] The duration of the animation in milliseconds.\n * @property {function(number):number} [easing] The easing function used\n * during the animation (defaults to {@link module:ol/easing~inAndOut}).\n * The function will be called for each frame with a number representing a\n * fraction of the animation's duration.  The function should return a number\n * between 0 and 1 representing the progress toward the destination state.\n */\n\n\n/**\n * @typedef {Object} State\n * @property {import(\"./coordinate.js\").Coordinate} center\n * @property {import(\"./proj/Projection.js\").default} projection\n * @property {number} resolution\n * @property {number} rotation\n * @property {number} zoom\n */\n\n\n/**\n * Default min zoom level for the map view.\n * @type {number}\n */\nconst DEFAULT_MIN_ZOOM = 0;\n\n\n/**\n * @classdesc\n * A View object represents a simple 2D view of the map.\n *\n * This is the object to act upon to change the center, resolution,\n * and rotation of the map.\n *\n * ### The view states\n *\n * An View is determined by three states: `center`, `resolution`,\n * and `rotation`. Each state has a corresponding getter and setter, e.g.\n * `getCenter` and `setCenter` for the `center` state.\n *\n * An View has a `projection`. The projection determines the\n * coordinate system of the center, and its units determine the units of the\n * resolution (projection units per pixel). The default projection is\n * Spherical Mercator (EPSG:3857).\n *\n * ### The constraints\n *\n * `setCenter`, `setResolution` and `setRotation` can be used to change the\n * states of the view. Any value can be passed to the setters. And the value\n * that is passed to a setter will effectively be the value set in the view,\n * and returned by the corresponding getter.\n *\n * But a View object also has a *resolution constraint*, a\n * *rotation constraint* and a *center constraint*.\n *\n * As said above, no constraints are applied when the setters are used to set\n * new states for the view. Applying constraints is done explicitly through\n * the use of the `constrain*` functions (`constrainResolution` and\n * `constrainRotation` and `constrainCenter`).\n *\n * The main users of the constraints are the interactions and the\n * controls. For example, double-clicking on the map changes the view to\n * the \"next\" resolution. And releasing the fingers after pinch-zooming\n * snaps to the closest resolution (with an animation).\n *\n * The *resolution constraint* snaps to specific resolutions. It is\n * determined by the following options: `resolutions`, `maxResolution`,\n * `maxZoom`, and `zoomFactor`. If `resolutions` is set, the other three\n * options are ignored. See documentation for each option for more\n * information.\n *\n * The *rotation constraint* snaps to specific angles. It is determined\n * by the following options: `enableRotation` and `constrainRotation`.\n * By default the rotation value is snapped to zero when approaching the\n * horizontal.\n *\n * The *center constraint* is determined by the `extent` option. By\n * default the center is not constrained at all.\n *\n  * @api\n */\nclass View extends BaseObject {\n\n  /**\n   * @param {ViewOptions=} opt_options View options.\n   */\n  constructor(opt_options) {\n    super();\n\n    const options = assign({}, opt_options);\n\n    /**\n     * @private\n     * @type {Array<number>}\n     */\n    this.hints_ = [0, 0];\n\n    /**\n     * @private\n     * @type {Array<Array<Animation>>}\n     */\n    this.animations_ = [];\n\n    /**\n     * @private\n     * @type {number|undefined}\n     */\n    this.updateAnimationKey_;\n\n    this.updateAnimations_ = this.updateAnimations_.bind(this);\n\n    /**\n     * @private\n     * @const\n     * @type {import(\"./proj/Projection.js\").default}\n     */\n    this.projection_ = createProjection(options.projection, 'EPSG:3857');\n\n    this.applyOptions_(options);\n  }\n\n  /**\n   * Set up the view with the given options.\n   * @param {ViewOptions} options View options.\n   */\n  applyOptions_(options) {\n\n    /**\n     * @type {Object<string, *>}\n     */\n    const properties = {};\n    properties[ViewProperty.CENTER] = options.center !== undefined ?\n      options.center : null;\n\n    const resolutionConstraintInfo = createResolutionConstraint(options);\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.maxResolution_ = resolutionConstraintInfo.maxResolution;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.minResolution_ = resolutionConstraintInfo.minResolution;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.zoomFactor_ = resolutionConstraintInfo.zoomFactor;\n\n    /**\n     * @private\n     * @type {Array<number>|undefined}\n     */\n    this.resolutions_ = options.resolutions;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.minZoom_ = resolutionConstraintInfo.minZoom;\n\n    const centerConstraint = createCenterConstraint(options);\n    const resolutionConstraint = resolutionConstraintInfo.constraint;\n    const rotationConstraint = createRotationConstraint(options);\n\n    /**\n     * @private\n     * @type {Constraints}\n     */\n    this.constraints_ = {\n      center: centerConstraint,\n      resolution: resolutionConstraint,\n      rotation: rotationConstraint\n    };\n\n    if (options.resolution !== undefined) {\n      properties[ViewProperty.RESOLUTION] = options.resolution;\n    } else if (options.zoom !== undefined) {\n      properties[ViewProperty.RESOLUTION] = this.constrainResolution(\n        this.maxResolution_, options.zoom - this.minZoom_);\n\n      if (this.resolutions_) { // in case map zoom is out of min/max zoom range\n        properties[ViewProperty.RESOLUTION] = clamp(\n          Number(this.getResolution() || properties[ViewProperty.RESOLUTION]),\n          this.minResolution_, this.maxResolution_);\n      }\n    }\n    properties[ViewProperty.ROTATION] = options.rotation !== undefined ? options.rotation : 0;\n    this.setProperties(properties);\n\n    /**\n     * @private\n     * @type {ViewOptions}\n     */\n    this.options_ = options;\n\n  }\n\n  /**\n   * Get an updated version of the view options used to construct the view.  The\n   * current resolution (or zoom), center, and rotation are applied to any stored\n   * options.  The provided options can be used to apply new min/max zoom or\n   * resolution limits.\n   * @param {ViewOptions} newOptions New options to be applied.\n   * @return {ViewOptions} New options updated with the current view state.\n   */\n  getUpdatedOptions_(newOptions) {\n    const options = assign({}, this.options_);\n\n    // preserve resolution (or zoom)\n    if (options.resolution !== undefined) {\n      options.resolution = this.getResolution();\n    } else {\n      options.zoom = this.getZoom();\n    }\n\n    // preserve center\n    options.center = this.getCenter();\n\n    // preserve rotation\n    options.rotation = this.getRotation();\n\n    return assign({}, options, newOptions);\n  }\n\n  /**\n   * Animate the view.  The view's center, zoom (or resolution), and rotation\n   * can be animated for smooth transitions between view states.  For example,\n   * to animate the view to a new zoom level:\n   *\n   *     view.animate({zoom: view.getZoom() + 1});\n   *\n   * By default, the animation lasts one second and uses in-and-out easing.  You\n   * can customize this behavior by including `duration` (in milliseconds) and\n   * `easing` options (see {@link module:ol/easing}).\n   *\n   * To chain together multiple animations, call the method with multiple\n   * animation objects.  For example, to first zoom and then pan:\n   *\n   *     view.animate({zoom: 10}, {center: [0, 0]});\n   *\n   * If you provide a function as the last argument to the animate method, it\n   * will get called at the end of an animation series.  The callback will be\n   * called with `true` if the animation series completed on its own or `false`\n   * if it was cancelled.\n   *\n   * Animations are cancelled by user interactions (e.g. dragging the map) or by\n   * calling `view.setCenter()`, `view.setResolution()`, or `view.setRotation()`\n   * (or another method that calls one of these).\n   *\n   * @param {...(AnimationOptions|function(boolean))} var_args Animation\n   *     options.  Multiple animations can be run in series by passing multiple\n   *     options objects.  To run multiple animations in parallel, call the method\n   *     multiple times.  An optional callback can be provided as a final\n   *     argument.  The callback will be called with a boolean indicating whether\n   *     the animation completed without being cancelled.\n   * @api\n   */\n  animate(var_args) {\n    let animationCount = arguments.length;\n    let callback;\n    if (animationCount > 1 && typeof arguments[animationCount - 1] === 'function') {\n      callback = arguments[animationCount - 1];\n      --animationCount;\n    }\n    if (!this.isDef()) {\n      // if view properties are not yet set, shortcut to the final state\n      const state = arguments[animationCount - 1];\n      if (state.center) {\n        this.setCenter(state.center);\n      }\n      if (state.zoom !== undefined) {\n        this.setZoom(state.zoom);\n      }\n      if (state.rotation !== undefined) {\n        this.setRotation(state.rotation);\n      }\n      if (callback) {\n        animationCallback(callback, true);\n      }\n      return;\n    }\n    let start = Date.now();\n    let center = this.getCenter().slice();\n    let resolution = this.getResolution();\n    let rotation = this.getRotation();\n    const series = [];\n    for (let i = 0; i < animationCount; ++i) {\n      const options = /** @type {AnimationOptions} */ (arguments[i]);\n\n      const animation = /** @type {Animation} */ ({\n        start: start,\n        complete: false,\n        anchor: options.anchor,\n        duration: options.duration !== undefined ? options.duration : 1000,\n        easing: options.easing || inAndOut\n      });\n\n      if (options.center) {\n        animation.sourceCenter = center;\n        animation.targetCenter = options.center;\n        center = animation.targetCenter;\n      }\n\n      if (options.zoom !== undefined) {\n        animation.sourceResolution = resolution;\n        animation.targetResolution = this.constrainResolution(\n          this.maxResolution_, options.zoom - this.minZoom_, 0);\n        resolution = animation.targetResolution;\n      } else if (options.resolution) {\n        animation.sourceResolution = resolution;\n        animation.targetResolution = options.resolution;\n        resolution = animation.targetResolution;\n      }\n\n      if (options.rotation !== undefined) {\n        animation.sourceRotation = rotation;\n        const delta = modulo(options.rotation - rotation + Math.PI, 2 * Math.PI) - Math.PI;\n        animation.targetRotation = rotation + delta;\n        rotation = animation.targetRotation;\n      }\n\n      animation.callback = callback;\n\n      // check if animation is a no-op\n      if (isNoopAnimation(animation)) {\n        animation.complete = true;\n        // we still push it onto the series for callback handling\n      } else {\n        start += animation.duration;\n      }\n      series.push(animation);\n    }\n    this.animations_.push(series);\n    this.setHint(ViewHint.ANIMATING, 1);\n    this.updateAnimations_();\n  }\n\n  /**\n   * Determine if the view is being animated.\n   * @return {boolean} The view is being animated.\n   * @api\n   */\n  getAnimating() {\n    return this.hints_[ViewHint.ANIMATING] > 0;\n  }\n\n  /**\n   * Determine if the user is interacting with the view, such as panning or zooming.\n   * @return {boolean} The view is being interacted with.\n   * @api\n   */\n  getInteracting() {\n    return this.hints_[ViewHint.INTERACTING] > 0;\n  }\n\n  /**\n   * Cancel any ongoing animations.\n   * @api\n   */\n  cancelAnimations() {\n    this.setHint(ViewHint.ANIMATING, -this.hints_[ViewHint.ANIMATING]);\n    for (let i = 0, ii = this.animations_.length; i < ii; ++i) {\n      const series = this.animations_[i];\n      if (series[0].callback) {\n        animationCallback(series[0].callback, false);\n      }\n    }\n    this.animations_.length = 0;\n  }\n\n  /**\n   * Update all animations.\n   */\n  updateAnimations_() {\n    if (this.updateAnimationKey_ !== undefined) {\n      cancelAnimationFrame(this.updateAnimationKey_);\n      this.updateAnimationKey_ = undefined;\n    }\n    if (!this.getAnimating()) {\n      return;\n    }\n    const now = Date.now();\n    let more = false;\n    for (let i = this.animations_.length - 1; i >= 0; --i) {\n      const series = this.animations_[i];\n      let seriesComplete = true;\n      for (let j = 0, jj = series.length; j < jj; ++j) {\n        const animation = series[j];\n        if (animation.complete) {\n          continue;\n        }\n        const elapsed = now - animation.start;\n        let fraction = animation.duration > 0 ? elapsed / animation.duration : 1;\n        if (fraction >= 1) {\n          animation.complete = true;\n          fraction = 1;\n        } else {\n          seriesComplete = false;\n        }\n        const progress = animation.easing(fraction);\n        if (animation.sourceCenter) {\n          const x0 = animation.sourceCenter[0];\n          const y0 = animation.sourceCenter[1];\n          const x1 = animation.targetCenter[0];\n          const y1 = animation.targetCenter[1];\n          const x = x0 + progress * (x1 - x0);\n          const y = y0 + progress * (y1 - y0);\n          this.set(ViewProperty.CENTER, [x, y]);\n        }\n        if (animation.sourceResolution && animation.targetResolution) {\n          const resolution = progress === 1 ?\n            animation.targetResolution :\n            animation.sourceResolution + progress * (animation.targetResolution - animation.sourceResolution);\n          if (animation.anchor) {\n            this.set(ViewProperty.CENTER,\n              this.calculateCenterZoom(resolution, animation.anchor));\n          }\n          this.set(ViewProperty.RESOLUTION, resolution);\n        }\n        if (animation.sourceRotation !== undefined && animation.targetRotation !== undefined) {\n          const rotation = progress === 1 ?\n            modulo(animation.targetRotation + Math.PI, 2 * Math.PI) - Math.PI :\n            animation.sourceRotation + progress * (animation.targetRotation - animation.sourceRotation);\n          if (animation.anchor) {\n            this.set(ViewProperty.CENTER,\n              this.calculateCenterRotate(rotation, animation.anchor));\n          }\n          this.set(ViewProperty.ROTATION, rotation);\n        }\n        more = true;\n        if (!animation.complete) {\n          break;\n        }\n      }\n      if (seriesComplete) {\n        this.animations_[i] = null;\n        this.setHint(ViewHint.ANIMATING, -1);\n        const callback = series[0].callback;\n        if (callback) {\n          animationCallback(callback, true);\n        }\n      }\n    }\n    // prune completed series\n    this.animations_ = this.animations_.filter(Boolean);\n    if (more && this.updateAnimationKey_ === undefined) {\n      this.updateAnimationKey_ = requestAnimationFrame(this.updateAnimations_);\n    }\n  }\n\n  /**\n   * @param {number} rotation Target rotation.\n   * @param {import(\"./coordinate.js\").Coordinate} anchor Rotation anchor.\n   * @return {import(\"./coordinate.js\").Coordinate|undefined} Center for rotation and anchor.\n   */\n  calculateCenterRotate(rotation, anchor) {\n    let center;\n    const currentCenter = this.getCenter();\n    if (currentCenter !== undefined) {\n      center = [currentCenter[0] - anchor[0], currentCenter[1] - anchor[1]];\n      rotateCoordinate(center, rotation - this.getRotation());\n      addCoordinate(center, anchor);\n    }\n    return center;\n  }\n\n  /**\n   * @param {number} resolution Target resolution.\n   * @param {import(\"./coordinate.js\").Coordinate} anchor Zoom anchor.\n   * @return {import(\"./coordinate.js\").Coordinate|undefined} Center for resolution and anchor.\n   */\n  calculateCenterZoom(resolution, anchor) {\n    let center;\n    const currentCenter = this.getCenter();\n    const currentResolution = this.getResolution();\n    if (currentCenter !== undefined && currentResolution !== undefined) {\n      const x = anchor[0] - resolution * (anchor[0] - currentCenter[0]) / currentResolution;\n      const y = anchor[1] - resolution * (anchor[1] - currentCenter[1]) / currentResolution;\n      center = [x, y];\n    }\n    return center;\n  }\n\n  /**\n   * @private\n   * @return {import(\"./size.js\").Size} Viewport size or `[100, 100]` when no viewport is found.\n   */\n  getSizeFromViewport_() {\n    const size = [100, 100];\n    const selector = '.ol-viewport[data-view=\"' + getUid(this) + '\"]';\n    const element = document.querySelector(selector);\n    if (element) {\n      const metrics = getComputedStyle(element);\n      size[0] = parseInt(metrics.width, 10);\n      size[1] = parseInt(metrics.height, 10);\n    }\n    return size;\n  }\n\n  /**\n   * Get the constrained center of this view.\n   * @param {import(\"./coordinate.js\").Coordinate|undefined} center Center.\n   * @return {import(\"./coordinate.js\").Coordinate|undefined} Constrained center.\n   * @api\n   */\n  constrainCenter(center) {\n    return this.constraints_.center(center);\n  }\n\n  /**\n   * Get the constrained resolution of this view.\n   * @param {number|undefined} resolution Resolution.\n   * @param {number=} opt_delta Delta. Default is `0`.\n   * @param {number=} opt_direction Direction. Default is `0`.\n   * @return {number|undefined} Constrained resolution.\n   * @api\n   */\n  constrainResolution(resolution, opt_delta, opt_direction) {\n    const delta = opt_delta || 0;\n    const direction = opt_direction || 0;\n    return this.constraints_.resolution(resolution, delta, direction);\n  }\n\n  /**\n   * Get the constrained rotation of this view.\n   * @param {number|undefined} rotation Rotation.\n   * @param {number=} opt_delta Delta. Default is `0`.\n   * @return {number|undefined} Constrained rotation.\n   * @api\n   */\n  constrainRotation(rotation, opt_delta) {\n    const delta = opt_delta || 0;\n    return this.constraints_.rotation(rotation, delta);\n  }\n\n  /**\n   * Get the view center.\n   * @return {import(\"./coordinate.js\").Coordinate|undefined} The center of the view.\n   * @observable\n   * @api\n   */\n  getCenter() {\n    return (\n      /** @type {import(\"./coordinate.js\").Coordinate|undefined} */ (this.get(ViewProperty.CENTER))\n    );\n  }\n\n  /**\n   * @return {Constraints} Constraints.\n   */\n  getConstraints() {\n    return this.constraints_;\n  }\n\n  /**\n   * @param {Array<number>=} opt_hints Destination array.\n   * @return {Array<number>} Hint.\n   */\n  getHints(opt_hints) {\n    if (opt_hints !== undefined) {\n      opt_hints[0] = this.hints_[0];\n      opt_hints[1] = this.hints_[1];\n      return opt_hints;\n    } else {\n      return this.hints_.slice();\n    }\n  }\n\n  /**\n   * Calculate the extent for the current view state and the passed size.\n   * The size is the pixel dimensions of the box into which the calculated extent\n   * should fit. In most cases you want to get the extent of the entire map,\n   * that is `map.getSize()`.\n   * @param {import(\"./size.js\").Size=} opt_size Box pixel size. If not provided, the size of the\n   * first map that uses this view will be used.\n   * @return {import(\"./extent.js\").Extent} Extent.\n   * @api\n   */\n  calculateExtent(opt_size) {\n    const size = opt_size || this.getSizeFromViewport_();\n    const center = /** @type {!import(\"./coordinate.js\").Coordinate} */ (this.getCenter());\n    assert(center, 1); // The view center is not defined\n    const resolution = /** @type {!number} */ (this.getResolution());\n    assert(resolution !== undefined, 2); // The view resolution is not defined\n    const rotation = /** @type {!number} */ (this.getRotation());\n    assert(rotation !== undefined, 3); // The view rotation is not defined\n\n    return getForViewAndSize(center, resolution, rotation, size);\n  }\n\n  /**\n   * Get the maximum resolution of the view.\n   * @return {number} The maximum resolution of the view.\n   * @api\n   */\n  getMaxResolution() {\n    return this.maxResolution_;\n  }\n\n  /**\n   * Get the minimum resolution of the view.\n   * @return {number} The minimum resolution of the view.\n   * @api\n   */\n  getMinResolution() {\n    return this.minResolution_;\n  }\n\n  /**\n   * Get the maximum zoom level for the view.\n   * @return {number} The maximum zoom level.\n   * @api\n   */\n  getMaxZoom() {\n    return /** @type {number} */ (this.getZoomForResolution(this.minResolution_));\n  }\n\n  /**\n   * Set a new maximum zoom level for the view.\n   * @param {number} zoom The maximum zoom level.\n   * @api\n   */\n  setMaxZoom(zoom) {\n    this.applyOptions_(this.getUpdatedOptions_({maxZoom: zoom}));\n  }\n\n  /**\n   * Get the minimum zoom level for the view.\n   * @return {number} The minimum zoom level.\n   * @api\n   */\n  getMinZoom() {\n    return /** @type {number} */ (this.getZoomForResolution(this.maxResolution_));\n  }\n\n  /**\n   * Set a new minimum zoom level for the view.\n   * @param {number} zoom The minimum zoom level.\n   * @api\n   */\n  setMinZoom(zoom) {\n    this.applyOptions_(this.getUpdatedOptions_({minZoom: zoom}));\n  }\n\n  /**\n   * Get the view projection.\n   * @return {import(\"./proj/Projection.js\").default} The projection of the view.\n   * @api\n   */\n  getProjection() {\n    return this.projection_;\n  }\n\n  /**\n   * Get the view resolution.\n   * @return {number|undefined} The resolution of the view.\n   * @observable\n   * @api\n   */\n  getResolution() {\n    return /** @type {number|undefined} */ (this.get(ViewProperty.RESOLUTION));\n  }\n\n  /**\n   * Get the resolutions for the view. This returns the array of resolutions\n   * passed to the constructor of the View, or undefined if none were given.\n   * @return {Array<number>|undefined} The resolutions of the view.\n   * @api\n   */\n  getResolutions() {\n    return this.resolutions_;\n  }\n\n  /**\n   * Get the resolution for a provided extent (in map units) and size (in pixels).\n   * @param {import(\"./extent.js\").Extent} extent Extent.\n   * @param {import(\"./size.js\").Size=} opt_size Box pixel size.\n   * @return {number} The resolution at which the provided extent will render at\n   *     the given size.\n   * @api\n   */\n  getResolutionForExtent(extent, opt_size) {\n    const size = opt_size || this.getSizeFromViewport_();\n    const xResolution = getWidth(extent) / size[0];\n    const yResolution = getHeight(extent) / size[1];\n    return Math.max(xResolution, yResolution);\n  }\n\n  /**\n   * Return a function that returns a value between 0 and 1 for a\n   * resolution. Exponential scaling is assumed.\n   * @param {number=} opt_power Power.\n   * @return {function(number): number} Resolution for value function.\n   */\n  getResolutionForValueFunction(opt_power) {\n    const power = opt_power || 2;\n    const maxResolution = this.maxResolution_;\n    const minResolution = this.minResolution_;\n    const max = Math.log(maxResolution / minResolution) / Math.log(power);\n    return (\n      /**\n       * @param {number} value Value.\n       * @return {number} Resolution.\n       */\n      function(value) {\n        const resolution = maxResolution / Math.pow(power, value * max);\n        return resolution;\n      });\n  }\n\n  /**\n   * Get the view rotation.\n   * @return {number} The rotation of the view in radians.\n   * @observable\n   * @api\n   */\n  getRotation() {\n    return /** @type {number} */ (this.get(ViewProperty.ROTATION));\n  }\n\n  /**\n   * Return a function that returns a resolution for a value between\n   * 0 and 1. Exponential scaling is assumed.\n   * @param {number=} opt_power Power.\n   * @return {function(number): number} Value for resolution function.\n   */\n  getValueForResolutionFunction(opt_power) {\n    const power = opt_power || 2;\n    const maxResolution = this.maxResolution_;\n    const minResolution = this.minResolution_;\n    const max = Math.log(maxResolution / minResolution) / Math.log(power);\n    return (\n      /**\n       * @param {number} resolution Resolution.\n       * @return {number} Value.\n       */\n      function(resolution) {\n        const value = (Math.log(maxResolution / resolution) / Math.log(power)) / max;\n        return value;\n      });\n  }\n\n  /**\n   * @param {number} pixelRatio Pixel ratio for center rounding.\n   * @return {State} View state.\n   */\n  getState(pixelRatio) {\n    const center = /** @type {import(\"./coordinate.js\").Coordinate} */ (this.getCenter());\n    const projection = this.getProjection();\n    const resolution = /** @type {number} */ (this.getResolution());\n    const pixelResolution = resolution / pixelRatio;\n    const rotation = this.getRotation();\n    return (\n      /** @type {State} */ ({\n        center: [\n          Math.round(center[0] / pixelResolution) * pixelResolution,\n          Math.round(center[1] / pixelResolution) * pixelResolution\n        ],\n        projection: projection !== undefined ? projection : null,\n        resolution: resolution,\n        rotation: rotation,\n        zoom: this.getZoom()\n      })\n    );\n  }\n\n  /**\n   * Get the current zoom level.  If you configured your view with a resolutions\n   * array (this is rare), this method may return non-integer zoom levels (so\n   * the zoom level is not safe to use as an index into a resolutions array).\n   * @return {number|undefined} Zoom.\n   * @api\n   */\n  getZoom() {\n    let zoom;\n    const resolution = this.getResolution();\n    if (resolution !== undefined) {\n      zoom = this.getZoomForResolution(resolution);\n    }\n    return zoom;\n  }\n\n  /**\n   * Get the zoom level for a resolution.\n   * @param {number} resolution The resolution.\n   * @return {number|undefined} The zoom level for the provided resolution.\n   * @api\n   */\n  getZoomForResolution(resolution) {\n    let offset = this.minZoom_ || 0;\n    let max, zoomFactor;\n    if (this.resolutions_) {\n      const nearest = linearFindNearest(this.resolutions_, resolution, 1);\n      offset = nearest;\n      max = this.resolutions_[nearest];\n      if (nearest == this.resolutions_.length - 1) {\n        zoomFactor = 2;\n      } else {\n        zoomFactor = max / this.resolutions_[nearest + 1];\n      }\n    } else {\n      max = this.maxResolution_;\n      zoomFactor = this.zoomFactor_;\n    }\n    return offset + Math.log(max / resolution) / Math.log(zoomFactor);\n  }\n\n  /**\n   * Get the resolution for a zoom level.\n   * @param {number} zoom Zoom level.\n   * @return {number} The view resolution for the provided zoom level.\n   * @api\n   */\n  getResolutionForZoom(zoom) {\n    return /** @type {number} */ (this.constrainResolution(\n      this.maxResolution_, zoom - this.minZoom_, 0));\n  }\n\n  /**\n   * Fit the given geometry or extent based on the given map size and border.\n   * The size is pixel dimensions of the box to fit the extent into.\n   * In most cases you will want to use the map size, that is `map.getSize()`.\n   * Takes care of the map angle.\n   * @param {import(\"./geom/SimpleGeometry.js\").default|import(\"./extent.js\").Extent} geometryOrExtent The geometry or\n   *     extent to fit the view to.\n   * @param {FitOptions=} opt_options Options.\n   * @api\n   */\n  fit(geometryOrExtent, opt_options) {\n    const options = opt_options || {};\n    let size = options.size;\n    if (!size) {\n      size = this.getSizeFromViewport_();\n    }\n    /** @type {import(\"./geom/SimpleGeometry.js\").default} */\n    let geometry;\n    assert(Array.isArray(geometryOrExtent) || typeof /** @type {?} */ (geometryOrExtent).getSimplifiedGeometry === 'function',\n      24); // Invalid extent or geometry provided as `geometry`\n    if (Array.isArray(geometryOrExtent)) {\n      assert(!isEmpty(geometryOrExtent),\n        25); // Cannot fit empty extent provided as `geometry`\n      geometry = polygonFromExtent(geometryOrExtent);\n    } else if (geometryOrExtent.getType() === GeometryType.CIRCLE) {\n      geometryOrExtent = geometryOrExtent.getExtent();\n      geometry = polygonFromExtent(geometryOrExtent);\n      geometry.rotate(this.getRotation(), getCenter(geometryOrExtent));\n    } else {\n      geometry = geometryOrExtent;\n    }\n\n    const padding = options.padding !== undefined ? options.padding : [0, 0, 0, 0];\n    const constrainResolution = options.constrainResolution !== undefined ?\n      options.constrainResolution : true;\n    const nearest = options.nearest !== undefined ? options.nearest : false;\n    let minResolution;\n    if (options.minResolution !== undefined) {\n      minResolution = options.minResolution;\n    } else if (options.maxZoom !== undefined) {\n      minResolution = this.constrainResolution(\n        this.maxResolution_, options.maxZoom - this.minZoom_, 0);\n    } else {\n      minResolution = 0;\n    }\n    const coords = geometry.getFlatCoordinates();\n\n    // calculate rotated extent\n    const rotation = this.getRotation();\n    const cosAngle = Math.cos(-rotation);\n    let sinAngle = Math.sin(-rotation);\n    let minRotX = +Infinity;\n    let minRotY = +Infinity;\n    let maxRotX = -Infinity;\n    let maxRotY = -Infinity;\n    const stride = geometry.getStride();\n    for (let i = 0, ii = coords.length; i < ii; i += stride) {\n      const rotX = coords[i] * cosAngle - coords[i + 1] * sinAngle;\n      const rotY = coords[i] * sinAngle + coords[i + 1] * cosAngle;\n      minRotX = Math.min(minRotX, rotX);\n      minRotY = Math.min(minRotY, rotY);\n      maxRotX = Math.max(maxRotX, rotX);\n      maxRotY = Math.max(maxRotY, rotY);\n    }\n\n    // calculate resolution\n    let resolution = this.getResolutionForExtent(\n      [minRotX, minRotY, maxRotX, maxRotY],\n      [size[0] - padding[1] - padding[3], size[1] - padding[0] - padding[2]]);\n    resolution = isNaN(resolution) ? minResolution :\n      Math.max(resolution, minResolution);\n    if (constrainResolution) {\n      let constrainedResolution = this.constrainResolution(resolution, 0, 0);\n      if (!nearest && constrainedResolution < resolution) {\n        constrainedResolution = this.constrainResolution(\n          constrainedResolution, -1, 0);\n      }\n      resolution = constrainedResolution;\n    }\n\n    // calculate center\n    sinAngle = -sinAngle; // go back to original rotation\n    let centerRotX = (minRotX + maxRotX) / 2;\n    let centerRotY = (minRotY + maxRotY) / 2;\n    centerRotX += (padding[1] - padding[3]) / 2 * resolution;\n    centerRotY += (padding[0] - padding[2]) / 2 * resolution;\n    const centerX = centerRotX * cosAngle - centerRotY * sinAngle;\n    const centerY = centerRotY * cosAngle + centerRotX * sinAngle;\n    const center = [centerX, centerY];\n    const callback = options.callback ? options.callback : VOID;\n\n    if (options.duration !== undefined) {\n      this.animate({\n        resolution: resolution,\n        center: center,\n        duration: options.duration,\n        easing: options.easing\n      }, callback);\n    } else {\n      this.setResolution(resolution);\n      this.setCenter(center);\n      animationCallback(callback, true);\n    }\n  }\n\n  /**\n   * Center on coordinate and view position.\n   * @param {import(\"./coordinate.js\").Coordinate} coordinate Coordinate.\n   * @param {import(\"./size.js\").Size} size Box pixel size.\n   * @param {import(\"./pixel.js\").Pixel} position Position on the view to center on.\n   * @api\n   */\n  centerOn(coordinate, size, position) {\n    // calculate rotated position\n    const rotation = this.getRotation();\n    const cosAngle = Math.cos(-rotation);\n    let sinAngle = Math.sin(-rotation);\n    let rotX = coordinate[0] * cosAngle - coordinate[1] * sinAngle;\n    let rotY = coordinate[1] * cosAngle + coordinate[0] * sinAngle;\n    const resolution = this.getResolution();\n    rotX += (size[0] / 2 - position[0]) * resolution;\n    rotY += (position[1] - size[1] / 2) * resolution;\n\n    // go back to original angle\n    sinAngle = -sinAngle; // go back to original rotation\n    const centerX = rotX * cosAngle - rotY * sinAngle;\n    const centerY = rotY * cosAngle + rotX * sinAngle;\n\n    this.setCenter([centerX, centerY]);\n  }\n\n  /**\n   * @return {boolean} Is defined.\n   */\n  isDef() {\n    return !!this.getCenter() && this.getResolution() !== undefined;\n  }\n\n  /**\n   * Rotate the view around a given coordinate.\n   * @param {number} rotation New rotation value for the view.\n   * @param {import(\"./coordinate.js\").Coordinate=} opt_anchor The rotation center.\n   * @api\n   */\n  rotate(rotation, opt_anchor) {\n    if (opt_anchor !== undefined) {\n      const center = this.calculateCenterRotate(rotation, opt_anchor);\n      this.setCenter(center);\n    }\n    this.setRotation(rotation);\n  }\n\n  /**\n   * Set the center of the current view.\n   * @param {import(\"./coordinate.js\").Coordinate|undefined} center The center of the view.\n   * @observable\n   * @api\n   */\n  setCenter(center) {\n    this.set(ViewProperty.CENTER, center);\n    if (this.getAnimating()) {\n      this.cancelAnimations();\n    }\n  }\n\n  /**\n   * @param {ViewHint} hint Hint.\n   * @param {number} delta Delta.\n   * @return {number} New value.\n   */\n  setHint(hint, delta) {\n    this.hints_[hint] += delta;\n    this.changed();\n    return this.hints_[hint];\n  }\n\n  /**\n   * Set the resolution for this view.\n   * @param {number|undefined} resolution The resolution of the view.\n   * @observable\n   * @api\n   */\n  setResolution(resolution) {\n    this.set(ViewProperty.RESOLUTION, resolution);\n    if (this.getAnimating()) {\n      this.cancelAnimations();\n    }\n  }\n\n  /**\n   * Set the rotation for this view.\n   * @param {number} rotation The rotation of the view in radians.\n   * @observable\n   * @api\n   */\n  setRotation(rotation) {\n    this.set(ViewProperty.ROTATION, rotation);\n    if (this.getAnimating()) {\n      this.cancelAnimations();\n    }\n  }\n\n  /**\n   * Zoom to a specific zoom level.\n   * @param {number} zoom Zoom level.\n   * @api\n   */\n  setZoom(zoom) {\n    this.setResolution(this.getResolutionForZoom(zoom));\n  }\n}\n\n\n/**\n * @param {Function} callback Callback.\n * @param {*} returnValue Return value.\n */\nfunction animationCallback(callback, returnValue) {\n  setTimeout(function() {\n    callback(returnValue);\n  }, 0);\n}\n\n\n/**\n * @param {ViewOptions} options View options.\n * @return {import(\"./centerconstraint.js\").Type} The constraint.\n */\nexport function createCenterConstraint(options) {\n  if (options.extent !== undefined) {\n    return createExtent(options.extent);\n  } else {\n    return centerNone;\n  }\n}\n\n\n/**\n * @param {ViewOptions} options View options.\n * @return {{constraint: import(\"./resolutionconstraint.js\").Type, maxResolution: number,\n *     minResolution: number, minZoom: number, zoomFactor: number}} The constraint.\n */\nexport function createResolutionConstraint(options) {\n  let resolutionConstraint;\n  let maxResolution;\n  let minResolution;\n\n  // TODO: move these to be ol constants\n  // see https://github.com/openlayers/openlayers/issues/2076\n  const defaultMaxZoom = 28;\n  const defaultZoomFactor = 2;\n\n  let minZoom = options.minZoom !== undefined ?\n    options.minZoom : DEFAULT_MIN_ZOOM;\n\n  let maxZoom = options.maxZoom !== undefined ?\n    options.maxZoom : defaultMaxZoom;\n\n  const zoomFactor = options.zoomFactor !== undefined ?\n    options.zoomFactor : defaultZoomFactor;\n\n  if (options.resolutions !== undefined) {\n    const resolutions = options.resolutions;\n    maxResolution = resolutions[minZoom];\n    minResolution = resolutions[maxZoom] !== undefined ?\n      resolutions[maxZoom] : resolutions[resolutions.length - 1];\n    resolutionConstraint = createSnapToResolutions(\n      resolutions);\n  } else {\n    // calculate the default min and max resolution\n    const projection = createProjection(options.projection, 'EPSG:3857');\n    const extent = projection.getExtent();\n    const size = !extent ?\n      // use an extent that can fit the whole world if need be\n      360 * METERS_PER_UNIT[Units.DEGREES] /\n            projection.getMetersPerUnit() :\n      Math.max(getWidth(extent), getHeight(extent));\n\n    const defaultMaxResolution = size / DEFAULT_TILE_SIZE / Math.pow(\n      defaultZoomFactor, DEFAULT_MIN_ZOOM);\n\n    const defaultMinResolution = defaultMaxResolution / Math.pow(\n      defaultZoomFactor, defaultMaxZoom - DEFAULT_MIN_ZOOM);\n\n    // user provided maxResolution takes precedence\n    maxResolution = options.maxResolution;\n    if (maxResolution !== undefined) {\n      minZoom = 0;\n    } else {\n      maxResolution = defaultMaxResolution / Math.pow(zoomFactor, minZoom);\n    }\n\n    // user provided minResolution takes precedence\n    minResolution = options.minResolution;\n    if (minResolution === undefined) {\n      if (options.maxZoom !== undefined) {\n        if (options.maxResolution !== undefined) {\n          minResolution = maxResolution / Math.pow(zoomFactor, maxZoom);\n        } else {\n          minResolution = defaultMaxResolution / Math.pow(zoomFactor, maxZoom);\n        }\n      } else {\n        minResolution = defaultMinResolution;\n      }\n    }\n\n    // given discrete zoom levels, minResolution may be different than provided\n    maxZoom = minZoom + Math.floor(\n      Math.log(maxResolution / minResolution) / Math.log(zoomFactor));\n    minResolution = maxResolution / Math.pow(zoomFactor, maxZoom - minZoom);\n\n    resolutionConstraint = createSnapToPower(\n      zoomFactor, maxResolution, maxZoom - minZoom);\n  }\n  return {constraint: resolutionConstraint, maxResolution: maxResolution,\n    minResolution: minResolution, minZoom: minZoom, zoomFactor: zoomFactor};\n}\n\n\n/**\n * @param {ViewOptions} options View options.\n * @return {import(\"./rotationconstraint.js\").Type} Rotation constraint.\n */\nexport function createRotationConstraint(options) {\n  const enableRotation = options.enableRotation !== undefined ?\n    options.enableRotation : true;\n  if (enableRotation) {\n    const constrainRotation = options.constrainRotation;\n    if (constrainRotation === undefined || constrainRotation === true) {\n      return createSnapToZero();\n    } else if (constrainRotation === false) {\n      return rotationNone;\n    } else if (typeof constrainRotation === 'number') {\n      return createSnapToN(constrainRotation);\n    } else {\n      return rotationNone;\n    }\n  } else {\n    return disable;\n  }\n}\n\n\n/**\n * Determine if an animation involves no view change.\n * @param {Animation} animation The animation.\n * @return {boolean} The animation involves no view change.\n */\nexport function isNoopAnimation(animation) {\n  if (animation.sourceCenter && animation.targetCenter) {\n    if (!coordinatesEqual(animation.sourceCenter, animation.targetCenter)) {\n      return false;\n    }\n  }\n  if (animation.sourceResolution !== animation.targetResolution) {\n    return false;\n  }\n  if (animation.sourceRotation !== animation.targetRotation) {\n    return false;\n  }\n  return true;\n}\n\nexport default View;\n"]},"metadata":{},"sourceType":"module"}