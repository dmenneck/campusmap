{"ast":null,"code":"/**\n * @module ol/style/AtlasManager\n */\nimport { MAX_TEXTURE_SIZE as WEBGL_MAX_TEXTURE_SIZE } from '../webgl.js';\nimport { UNDEFINED } from '../functions.js';\nimport Atlas from '../style/Atlas.js';\n/**\n * @typedef {Object} Options\n * @property {number} [initialSize=256] The size in pixels of the first atlas image.\n * @property {number} [maxSize] The maximum size in pixels of atlas images. Default is\n * `webgl/MAX_TEXTURE_SIZE` or 2048 if WebGL is not supported.\n * @property {number} [space=1] The space in pixels between images.\n */\n\n/**\n * Provides information for an image inside an atlas manager.\n * `offsetX` and `offsetY` is the position of the image inside\n * the atlas image `image` and the position of the hit-detection image\n * inside the hit-detection atlas image `hitImage`.\n * @typedef {Object} AtlasManagerInfo\n * @property {number} offsetX\n * @property {number} offsetY\n * @property {HTMLCanvasElement} image\n * @property {HTMLCanvasElement} hitImage\n */\n\n/**\n * The size in pixels of the first atlas image.\n * @type {number}\n */\n\nconst INITIAL_ATLAS_SIZE = 256;\n/**\n * The maximum size in pixels of atlas images.\n * @type {number}\n */\n\nconst MAX_ATLAS_SIZE = -1;\n/**\n * Manages the creation of image atlases.\n *\n * Images added to this manager will be inserted into an atlas, which\n * will be used for rendering.\n * The `size` given in the constructor is the size for the first\n * atlas. After that, when new atlases are created, they will have\n * twice the size as the latest atlas (until `maxSize` is reached).\n *\n * If an application uses many images or very large images, it is recommended\n * to set a higher `size` value to avoid the creation of too many atlases.\n *\n * @constructor\n * @struct\n * @api\n * @param {module:ol/style/AtlasManager~Options=} opt_options Options.\n */\n\nconst AtlasManager = function (opt_options) {\n  const options = opt_options || {};\n  /**\n   * The size in pixels of the latest atlas image.\n   * @private\n   * @type {number}\n   */\n\n  this.currentSize_ = options.initialSize !== undefined ? options.initialSize : INITIAL_ATLAS_SIZE;\n  /**\n   * The maximum size in pixels of atlas images.\n   * @private\n   * @type {number}\n   */\n\n  this.maxSize_ = options.maxSize !== undefined ? options.maxSize : MAX_ATLAS_SIZE != -1 ? MAX_ATLAS_SIZE : WEBGL_MAX_TEXTURE_SIZE !== undefined ? WEBGL_MAX_TEXTURE_SIZE : 2048;\n  /**\n   * The size in pixels between images.\n   * @private\n   * @type {number}\n   */\n\n  this.space_ = options.space !== undefined ? options.space : 1;\n  /**\n   * @private\n   * @type {Array.<module:ol/style/Atlas>}\n   */\n\n  this.atlases_ = [new Atlas(this.currentSize_, this.space_)];\n  /**\n   * The size in pixels of the latest atlas image for hit-detection images.\n   * @private\n   * @type {number}\n   */\n\n  this.currentHitSize_ = this.currentSize_;\n  /**\n   * @private\n   * @type {Array.<module:ol/style/Atlas>}\n   */\n\n  this.hitAtlases_ = [new Atlas(this.currentHitSize_, this.space_)];\n};\n/**\n * @param {string} id The identifier of the entry to check.\n * @return {?module:ol/style/AtlasManager~AtlasManagerInfo} The position and atlas image for the\n *    entry, or `null` if the entry is not part of the atlas manager.\n */\n\n\nAtlasManager.prototype.getInfo = function (id) {\n  /** @type {?module:ol/style/Atlas~AtlasInfo} */\n  const info = this.getInfo_(this.atlases_, id);\n\n  if (!info) {\n    return null;\n  }\n\n  const hitInfo =\n  /** @type {module:ol/style/Atlas~AtlasInfo} */\n  this.getInfo_(this.hitAtlases_, id);\n  return this.mergeInfos_(info, hitInfo);\n};\n/**\n * @private\n * @param {Array.<module:ol/style/Atlas>} atlases The atlases to search.\n * @param {string} id The identifier of the entry to check.\n * @return {?module:ol/style/Atlas~AtlasInfo} The position and atlas image for the entry,\n *    or `null` if the entry is not part of the atlases.\n */\n\n\nAtlasManager.prototype.getInfo_ = function (atlases, id) {\n  for (let i = 0, ii = atlases.length; i < ii; ++i) {\n    const atlas = atlases[i];\n    const info = atlas.get(id);\n\n    if (info) {\n      return info;\n    }\n  }\n\n  return null;\n};\n/**\n * @private\n * @param {module:ol/style/Atlas~AtlasInfo} info The info for the real image.\n * @param {module:ol/style/Atlas~AtlasInfo} hitInfo The info for the hit-detection\n *    image.\n * @return {?module:ol/style/AtlasManager~AtlasManagerInfo} The position and atlas image for the\n *    entry, or `null` if the entry is not part of the atlases.\n */\n\n\nAtlasManager.prototype.mergeInfos_ = function (info, hitInfo) {\n  return (\n    /** @type {module:ol/style/AtlasManager~AtlasManagerInfo} */\n    {\n      offsetX: info.offsetX,\n      offsetY: info.offsetY,\n      image: info.image,\n      hitImage: hitInfo.image\n    }\n  );\n};\n/**\n * Add an image to the atlas manager.\n *\n * If an entry for the given id already exists, the entry will\n * be overridden (but the space on the atlas graphic will not be freed).\n *\n * If `renderHitCallback` is provided, the image (or the hit-detection version\n * of the image) will be rendered into a separate hit-detection atlas image.\n *\n * @param {string} id The identifier of the entry to add.\n * @param {number} width The width.\n * @param {number} height The height.\n * @param {function(CanvasRenderingContext2D, number, number)} renderCallback\n *    Called to render the new image onto an atlas image.\n * @param {function(CanvasRenderingContext2D, number, number)=}\n *    opt_renderHitCallback Called to render a hit-detection image onto a hit\n *    detection atlas image.\n * @param {Object=} opt_this Value to use as `this` when executing\n *    `renderCallback` and `renderHitCallback`.\n * @return {?module:ol/style/AtlasManager~AtlasManagerInfo}  The position and atlas image for the\n *    entry, or `null` if the image is too big.\n */\n\n\nAtlasManager.prototype.add = function (id, width, height, renderCallback, opt_renderHitCallback, opt_this) {\n  if (width + this.space_ > this.maxSize_ || height + this.space_ > this.maxSize_) {\n    return null;\n  }\n  /** @type {?module:ol/style/Atlas~AtlasInfo} */\n\n\n  const info = this.add_(false, id, width, height, renderCallback, opt_this);\n\n  if (!info) {\n    return null;\n  } // even if no hit-detection entry is requested, we insert a fake entry into\n  // the hit-detection atlas, to make sure that the offset is the same for\n  // the original image and the hit-detection image.\n\n\n  const renderHitCallback = opt_renderHitCallback !== undefined ? opt_renderHitCallback : UNDEFINED;\n  const hitInfo =\n  /** @type {module:ol/style/Atlas~AtlasInfo} */\n  this.add_(true, id, width, height, renderHitCallback, opt_this);\n  return this.mergeInfos_(info, hitInfo);\n};\n/**\n * @private\n * @param {boolean} isHitAtlas If the hit-detection atlases are used.\n * @param {string} id The identifier of the entry to add.\n * @param {number} width The width.\n * @param {number} height The height.\n * @param {function(CanvasRenderingContext2D, number, number)} renderCallback\n *    Called to render the new image onto an atlas image.\n * @param {Object=} opt_this Value to use as `this` when executing\n *    `renderCallback` and `renderHitCallback`.\n * @return {?module:ol/style/Atlas~AtlasInfo}  The position and atlas image for the entry,\n *    or `null` if the image is too big.\n */\n\n\nAtlasManager.prototype.add_ = function (isHitAtlas, id, width, height, renderCallback, opt_this) {\n  const atlases = isHitAtlas ? this.hitAtlases_ : this.atlases_;\n  let atlas, info, i, ii;\n\n  for (i = 0, ii = atlases.length; i < ii; ++i) {\n    atlas = atlases[i];\n    info = atlas.add(id, width, height, renderCallback, opt_this);\n\n    if (info) {\n      return info;\n    } else if (!info && i === ii - 1) {\n      // the entry could not be added to one of the existing atlases,\n      // create a new atlas that is twice as big and try to add to this one.\n      let size;\n\n      if (isHitAtlas) {\n        size = Math.min(this.currentHitSize_ * 2, this.maxSize_);\n        this.currentHitSize_ = size;\n      } else {\n        size = Math.min(this.currentSize_ * 2, this.maxSize_);\n        this.currentSize_ = size;\n      }\n\n      atlas = new Atlas(size, this.space_);\n      atlases.push(atlas); // run the loop another time\n\n      ++ii;\n    }\n  }\n\n  return null;\n};\n\nexport default AtlasManager;","map":null,"metadata":{},"sourceType":"module"}