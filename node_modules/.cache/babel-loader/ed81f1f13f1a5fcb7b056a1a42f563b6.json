{"ast":null,"code":"/**\n * @module ol/format/xsd\n */\nimport { getAllTextContent, DOCUMENT } from '../xml.js';\nimport { padNumber } from '../string.js';\n/**\n * @param {Node} node Node.\n * @return {boolean|undefined} Boolean.\n */\n\nexport function readBoolean(node) {\n  var s = getAllTextContent(node, false);\n  return readBooleanString(s);\n}\n/**\n * @param {string} string String.\n * @return {boolean|undefined} Boolean.\n */\n\nexport function readBooleanString(string) {\n  var m = /^\\s*(true|1)|(false|0)\\s*$/.exec(string);\n\n  if (m) {\n    return m[1] !== undefined || false;\n  } else {\n    return undefined;\n  }\n}\n/**\n * @param {Node} node Node.\n * @return {number|undefined} DateTime in seconds.\n */\n\nexport function readDateTime(node) {\n  var s = getAllTextContent(node, false);\n  var dateTime = Date.parse(s);\n  return isNaN(dateTime) ? undefined : dateTime / 1000;\n}\n/**\n * @param {Node} node Node.\n * @return {number|undefined} Decimal.\n */\n\nexport function readDecimal(node) {\n  var s = getAllTextContent(node, false);\n  return readDecimalString(s);\n}\n/**\n * @param {string} string String.\n * @return {number|undefined} Decimal.\n */\n\nexport function readDecimalString(string) {\n  // FIXME check spec\n  var m = /^\\s*([+\\-]?\\d*\\.?\\d+(?:e[+\\-]?\\d+)?)\\s*$/i.exec(string);\n\n  if (m) {\n    return parseFloat(m[1]);\n  } else {\n    return undefined;\n  }\n}\n/**\n * @param {Node} node Node.\n * @return {number|undefined} Non negative integer.\n */\n\nexport function readNonNegativeInteger(node) {\n  var s = getAllTextContent(node, false);\n  return readNonNegativeIntegerString(s);\n}\n/**\n * @param {string} string String.\n * @return {number|undefined} Non negative integer.\n */\n\nexport function readNonNegativeIntegerString(string) {\n  var m = /^\\s*(\\d+)\\s*$/.exec(string);\n\n  if (m) {\n    return parseInt(m[1], 10);\n  } else {\n    return undefined;\n  }\n}\n/**\n * @param {Node} node Node.\n * @return {string|undefined} String.\n */\n\nexport function readString(node) {\n  return getAllTextContent(node, false).trim();\n}\n/**\n * @param {Node} node Node to append a TextNode with the boolean to.\n * @param {boolean} bool Boolean.\n */\n\nexport function writeBooleanTextNode(node, bool) {\n  writeStringTextNode(node, bool ? '1' : '0');\n}\n/**\n * @param {Node} node Node to append a CDATA Section with the string to.\n * @param {string} string String.\n */\n\nexport function writeCDATASection(node, string) {\n  node.appendChild(DOCUMENT.createCDATASection(string));\n}\n/**\n * @param {Node} node Node to append a TextNode with the dateTime to.\n * @param {number} dateTime DateTime in seconds.\n */\n\nexport function writeDateTimeTextNode(node, dateTime) {\n  var date = new Date(dateTime * 1000);\n  var string = date.getUTCFullYear() + '-' + padNumber(date.getUTCMonth() + 1, 2) + '-' + padNumber(date.getUTCDate(), 2) + 'T' + padNumber(date.getUTCHours(), 2) + ':' + padNumber(date.getUTCMinutes(), 2) + ':' + padNumber(date.getUTCSeconds(), 2) + 'Z';\n  node.appendChild(DOCUMENT.createTextNode(string));\n}\n/**\n * @param {Node} node Node to append a TextNode with the decimal to.\n * @param {number} decimal Decimal.\n */\n\nexport function writeDecimalTextNode(node, decimal) {\n  var string = decimal.toPrecision();\n  node.appendChild(DOCUMENT.createTextNode(string));\n}\n/**\n * @param {Node} node Node to append a TextNode with the decimal to.\n * @param {number} nonNegativeInteger Non negative integer.\n */\n\nexport function writeNonNegativeIntegerTextNode(node, nonNegativeInteger) {\n  var string = nonNegativeInteger.toString();\n  node.appendChild(DOCUMENT.createTextNode(string));\n}\n/**\n * @param {Node} node Node to append a TextNode with the string to.\n * @param {string} string String.\n */\n\nexport function writeStringTextNode(node, string) {\n  node.appendChild(DOCUMENT.createTextNode(string));\n}","map":{"version":3,"sources":["../../../src/ol/format/xsd.js"],"names":["const"],"mappings":"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","sourcesContent":["/**\n * @module ol/format/xsd\n */\nimport {getAllTextContent, DOCUMENT} from '../xml.js';\nimport {padNumber} from '../string.js';\n\n\n/**\n * @param {Node} node Node.\n * @return {boolean|undefined} Boolean.\n */\nexport function readBoolean(node) {\n  const s = getAllTextContent(node, false);\n  return readBooleanString(s);\n}\n\n\n/**\n * @param {string} string String.\n * @return {boolean|undefined} Boolean.\n */\nexport function readBooleanString(string) {\n  const m = /^\\s*(true|1)|(false|0)\\s*$/.exec(string);\n  if (m) {\n    return m[1] !== undefined || false;\n  } else {\n    return undefined;\n  }\n}\n\n\n/**\n * @param {Node} node Node.\n * @return {number|undefined} DateTime in seconds.\n */\nexport function readDateTime(node) {\n  const s = getAllTextContent(node, false);\n  const dateTime = Date.parse(s);\n  return isNaN(dateTime) ? undefined : dateTime / 1000;\n}\n\n\n/**\n * @param {Node} node Node.\n * @return {number|undefined} Decimal.\n */\nexport function readDecimal(node) {\n  const s = getAllTextContent(node, false);\n  return readDecimalString(s);\n}\n\n\n/**\n * @param {string} string String.\n * @return {number|undefined} Decimal.\n */\nexport function readDecimalString(string) {\n  // FIXME check spec\n  const m = /^\\s*([+\\-]?\\d*\\.?\\d+(?:e[+\\-]?\\d+)?)\\s*$/i.exec(string);\n  if (m) {\n    return parseFloat(m[1]);\n  } else {\n    return undefined;\n  }\n}\n\n\n/**\n * @param {Node} node Node.\n * @return {number|undefined} Non negative integer.\n */\nexport function readNonNegativeInteger(node) {\n  const s = getAllTextContent(node, false);\n  return readNonNegativeIntegerString(s);\n}\n\n\n/**\n * @param {string} string String.\n * @return {number|undefined} Non negative integer.\n */\nexport function readNonNegativeIntegerString(string) {\n  const m = /^\\s*(\\d+)\\s*$/.exec(string);\n  if (m) {\n    return parseInt(m[1], 10);\n  } else {\n    return undefined;\n  }\n}\n\n\n/**\n * @param {Node} node Node.\n * @return {string|undefined} String.\n */\nexport function readString(node) {\n  return getAllTextContent(node, false).trim();\n}\n\n\n/**\n * @param {Node} node Node to append a TextNode with the boolean to.\n * @param {boolean} bool Boolean.\n */\nexport function writeBooleanTextNode(node, bool) {\n  writeStringTextNode(node, (bool) ? '1' : '0');\n}\n\n\n/**\n * @param {Node} node Node to append a CDATA Section with the string to.\n * @param {string} string String.\n */\nexport function writeCDATASection(node, string) {\n  node.appendChild(DOCUMENT.createCDATASection(string));\n}\n\n\n/**\n * @param {Node} node Node to append a TextNode with the dateTime to.\n * @param {number} dateTime DateTime in seconds.\n */\nexport function writeDateTimeTextNode(node, dateTime) {\n  const date = new Date(dateTime * 1000);\n  const string = date.getUTCFullYear() + '-' +\n      padNumber(date.getUTCMonth() + 1, 2) + '-' +\n      padNumber(date.getUTCDate(), 2) + 'T' +\n      padNumber(date.getUTCHours(), 2) + ':' +\n      padNumber(date.getUTCMinutes(), 2) + ':' +\n      padNumber(date.getUTCSeconds(), 2) + 'Z';\n  node.appendChild(DOCUMENT.createTextNode(string));\n}\n\n\n/**\n * @param {Node} node Node to append a TextNode with the decimal to.\n * @param {number} decimal Decimal.\n */\nexport function writeDecimalTextNode(node, decimal) {\n  const string = decimal.toPrecision();\n  node.appendChild(DOCUMENT.createTextNode(string));\n}\n\n\n/**\n * @param {Node} node Node to append a TextNode with the decimal to.\n * @param {number} nonNegativeInteger Non negative integer.\n */\nexport function writeNonNegativeIntegerTextNode(node, nonNegativeInteger) {\n  const string = nonNegativeInteger.toString();\n  node.appendChild(DOCUMENT.createTextNode(string));\n}\n\n\n/**\n * @param {Node} node Node to append a TextNode with the string to.\n * @param {string} string String.\n */\nexport function writeStringTextNode(node, string) {\n  node.appendChild(DOCUMENT.createTextNode(string));\n}\n"]},"metadata":{},"sourceType":"module"}