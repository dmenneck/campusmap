{"ast":null,"code":"/**\n * @module ol/events\n */\nimport { clear } from './obj.js';\n/**\n * Key to use with {@link module:ol/Observable~Observable#unByKey}.\n * @typedef {Object} EventsKey\n * @property {Object} [bindTo]\n * @property {module:ol/events~ListenerFunction} [boundListener]\n * @property {boolean} callOnce\n * @property {number} [deleteIndex]\n * @property {module:ol/events~ListenerFunction} listener\n * @property {EventTarget|module:ol/events/EventTarget} target\n * @property {string} type\n * @api\n */\n\n/**\n * Listener function. This function is called with an event object as argument.\n * When the function returns `false`, event propagation will stop.\n *\n * @typedef {function(module:ol/events/Event)|function(module:ol/events/Event): boolean} ListenerFunction\n * @api\n */\n\n/**\n * @param {module:ol/events~EventsKey} listenerObj Listener object.\n * @return {module:ol/events~ListenerFunction} Bound listener.\n */\n\nexport function bindListener(listenerObj) {\n  const boundListener = function (evt) {\n    const listener = listenerObj.listener;\n    const bindTo = listenerObj.bindTo || listenerObj.target;\n\n    if (listenerObj.callOnce) {\n      unlistenByKey(listenerObj);\n    }\n\n    return listener.call(bindTo, evt);\n  };\n\n  listenerObj.boundListener = boundListener;\n  return boundListener;\n}\n/**\n * Finds the matching {@link module:ol/events~EventsKey} in the given listener\n * array.\n *\n * @param {!Array<!module:ol/events~EventsKey>} listeners Array of listeners.\n * @param {!Function} listener The listener function.\n * @param {Object=} opt_this The `this` value inside the listener.\n * @param {boolean=} opt_setDeleteIndex Set the deleteIndex on the matching\n *     listener, for {@link module:ol/events~unlistenByKey}.\n * @return {module:ol/events~EventsKey|undefined} The matching listener object.\n */\n\nexport function findListener(listeners, listener, opt_this, opt_setDeleteIndex) {\n  let listenerObj;\n\n  for (let i = 0, ii = listeners.length; i < ii; ++i) {\n    listenerObj = listeners[i];\n\n    if (listenerObj.listener === listener && listenerObj.bindTo === opt_this) {\n      if (opt_setDeleteIndex) {\n        listenerObj.deleteIndex = i;\n      }\n\n      return listenerObj;\n    }\n  }\n\n  return undefined;\n}\n/**\n * @param {module:ol/events/EventTarget~EventTargetLike} target Target.\n * @param {string} type Type.\n * @return {Array.<module:ol/events~EventsKey>|undefined} Listeners.\n */\n\nexport function getListeners(target, type) {\n  const listenerMap = target.ol_lm;\n  return listenerMap ? listenerMap[type] : undefined;\n}\n/**\n * Get the lookup of listeners.  If one does not exist on the target, it is\n * created.\n * @param {module:ol/events/EventTarget~EventTargetLike} target Target.\n * @return {!Object.<string, Array.<module:ol/events~EventsKey>>} Map of\n *     listeners by event type.\n */\n\nfunction getListenerMap(target) {\n  let listenerMap = target.ol_lm;\n\n  if (!listenerMap) {\n    listenerMap = target.ol_lm = {};\n  }\n\n  return listenerMap;\n}\n/**\n * Clean up all listener objects of the given type.  All properties on the\n * listener objects will be removed, and if no listeners remain in the listener\n * map, it will be removed from the target.\n * @param {module:ol/events/EventTarget~EventTargetLike} target Target.\n * @param {string} type Type.\n */\n\n\nfunction removeListeners(target, type) {\n  const listeners = getListeners(target, type);\n\n  if (listeners) {\n    for (let i = 0, ii = listeners.length; i < ii; ++i) {\n      target.removeEventListener(type, listeners[i].boundListener);\n      clear(listeners[i]);\n    }\n\n    listeners.length = 0;\n    const listenerMap = target.ol_lm;\n\n    if (listenerMap) {\n      delete listenerMap[type];\n\n      if (Object.keys(listenerMap).length === 0) {\n        delete target.ol_lm;\n      }\n    }\n  }\n}\n/**\n * Registers an event listener on an event target. Inspired by\n * {@link https://google.github.io/closure-library/api/source/closure/goog/events/events.js.src.html}\n *\n * This function efficiently binds a `listener` to a `this` object, and returns\n * a key for use with {@link module:ol/events~unlistenByKey}.\n *\n * @param {module:ol/events/EventTarget~EventTargetLike} target Event target.\n * @param {string} type Event type.\n * @param {module:ol/events~ListenerFunction} listener Listener.\n * @param {Object=} opt_this Object referenced by the `this` keyword in the\n *     listener. Default is the `target`.\n * @param {boolean=} opt_once If true, add the listener as one-off listener.\n * @return {module:ol/events~EventsKey} Unique key for the listener.\n */\n\n\nexport function listen(target, type, listener, opt_this, opt_once) {\n  const listenerMap = getListenerMap(target);\n  let listeners = listenerMap[type];\n\n  if (!listeners) {\n    listeners = listenerMap[type] = [];\n  }\n\n  let listenerObj = findListener(listeners, listener, opt_this, false);\n\n  if (listenerObj) {\n    if (!opt_once) {\n      // Turn one-off listener into a permanent one.\n      listenerObj.callOnce = false;\n    }\n  } else {\n    listenerObj =\n    /** @type {module:ol/events~EventsKey} */\n    {\n      bindTo: opt_this,\n      callOnce: !!opt_once,\n      listener: listener,\n      target: target,\n      type: type\n    };\n    target.addEventListener(type, bindListener(listenerObj));\n    listeners.push(listenerObj);\n  }\n\n  return listenerObj;\n}\n/**\n * Registers a one-off event listener on an event target. Inspired by\n * {@link https://google.github.io/closure-library/api/source/closure/goog/events/events.js.src.html}\n *\n * This function efficiently binds a `listener` as self-unregistering listener\n * to a `this` object, and returns a key for use with\n * {@link module:ol/events~unlistenByKey} in case the listener needs to be\n * unregistered before it is called.\n *\n * When {@link module:ol/events~listen} is called with the same arguments after this\n * function, the self-unregistering listener will be turned into a permanent\n * listener.\n *\n * @param {module:ol/events/EventTarget~EventTargetLike} target Event target.\n * @param {string} type Event type.\n * @param {module:ol/events~ListenerFunction} listener Listener.\n * @param {Object=} opt_this Object referenced by the `this` keyword in the\n *     listener. Default is the `target`.\n * @return {module:ol/events~EventsKey} Key for unlistenByKey.\n */\n\nexport function listenOnce(target, type, listener, opt_this) {\n  return listen(target, type, listener, opt_this, true);\n}\n/**\n * Unregisters an event listener on an event target. Inspired by\n * {@link https://google.github.io/closure-library/api/source/closure/goog/events/events.js.src.html}\n *\n * To return a listener, this function needs to be called with the exact same\n * arguments that were used for a previous {@link module:ol/events~listen} call.\n *\n * @param {module:ol/events/EventTarget~EventTargetLike} target Event target.\n * @param {string} type Event type.\n * @param {module:ol/events~ListenerFunction} listener Listener.\n * @param {Object=} opt_this Object referenced by the `this` keyword in the\n *     listener. Default is the `target`.\n */\n\nexport function unlisten(target, type, listener, opt_this) {\n  const listeners = getListeners(target, type);\n\n  if (listeners) {\n    const listenerObj = findListener(listeners, listener, opt_this, true);\n\n    if (listenerObj) {\n      unlistenByKey(listenerObj);\n    }\n  }\n}\n/**\n * Unregisters event listeners on an event target. Inspired by\n * {@link https://google.github.io/closure-library/api/source/closure/goog/events/events.js.src.html}\n *\n * The argument passed to this function is the key returned from\n * {@link module:ol/events~listen} or {@link module:ol/events~listenOnce}.\n *\n * @param {module:ol/events~EventsKey} key The key.\n */\n\nexport function unlistenByKey(key) {\n  if (key && key.target) {\n    key.target.removeEventListener(key.type, key.boundListener);\n    const listeners = getListeners(key.target, key.type);\n\n    if (listeners) {\n      const i = 'deleteIndex' in key ? key.deleteIndex : listeners.indexOf(key);\n\n      if (i !== -1) {\n        listeners.splice(i, 1);\n      }\n\n      if (listeners.length === 0) {\n        removeListeners(key.target, key.type);\n      }\n    }\n\n    clear(key);\n  }\n}\n/**\n * Unregisters all event listeners on an event target. Inspired by\n * {@link https://google.github.io/closure-library/api/source/closure/goog/events/events.js.src.html}\n *\n * @param {module:ol/events/EventTarget~EventTargetLike} target Target.\n */\n\nexport function unlistenAll(target) {\n  const listenerMap = getListenerMap(target);\n\n  for (const type in listenerMap) {\n    removeListeners(target, type);\n  }\n}","map":null,"metadata":{},"sourceType":"module"}