{"ast":null,"code":"/**\n * ag-grid-community - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components\n * @version v21.2.2\n * @link http://www.ag-grid.com/\n * @license MIT\n */\n\"use strict\";\n\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nvar __metadata = this && this.__metadata || function (k, v) {\n  if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar eventService_1 = require(\"../eventService\");\n\nvar events_1 = require(\"../events\");\n\nvar gridOptionsWrapper_1 = require(\"../gridOptionsWrapper\");\n\nvar selectionController_1 = require(\"../selectionController\");\n\nvar valueService_1 = require(\"../valueService/valueService\");\n\nvar columnController_1 = require(\"../columnController/columnController\");\n\nvar columnApi_1 = require(\"../columnController/columnApi\");\n\nvar context_1 = require(\"../context/context\");\n\nvar constants_1 = require(\"../constants\");\n\nvar valueCache_1 = require(\"../valueService/valueCache\");\n\nvar gridApi_1 = require(\"../gridApi\");\n\nvar utils_1 = require(\"../utils\");\n\nvar RowNode =\n/** @class */\nfunction () {\n  function RowNode() {\n    /** Children mapped by the pivot columns */\n    this.childrenMapped = {};\n    /** True by default - can be overridden via gridOptions.isRowSelectable(rowNode) */\n\n    this.selectable = true;\n    /** Used by sorting service - to give deterministic sort to groups. Previously we\n     * just id for this, however id is a string and had slower sorting compared to numbers. */\n\n    this.__objectId = RowNode.OBJECT_ID_SEQUENCE++;\n    /** True when nodes with the same id are being removed and added as part of the same batch transaction */\n\n    this.alreadyRendered = false;\n    this.selected = false;\n  }\n\n  RowNode.prototype.setData = function (data) {\n    var oldData = this.data;\n    this.data = data;\n    this.valueCache.onDataChanged();\n    this.updateDataOnDetailNode();\n    this.checkRowSelectable();\n    var event = this.createDataChangedEvent(data, oldData, false);\n    this.dispatchLocalEvent(event);\n  }; // when we are doing master / detail, the detail node is lazy created, but then kept around.\n  // so if we show / hide the detail, the same detail rowNode is used. so we need to keep the data\n  // in sync, otherwise expand/collapse of the detail would still show the old values.\n\n\n  RowNode.prototype.updateDataOnDetailNode = function () {\n    if (this.detailNode) {\n      this.detailNode.data = this.data;\n    }\n  };\n\n  RowNode.prototype.createDataChangedEvent = function (newData, oldData, update) {\n    return {\n      type: RowNode.EVENT_DATA_CHANGED,\n      node: this,\n      oldData: oldData,\n      newData: newData,\n      update: update\n    };\n  };\n\n  RowNode.prototype.createLocalRowEvent = function (type) {\n    return {\n      type: type,\n      node: this\n    };\n  }; // similar to setRowData, however it is expected that the data is the same data item. this\n  // is intended to be used with Redux type stores, where the whole data can be changed. we are\n  // guaranteed that the data is the same entity (so grid doesn't need to worry about the id of the\n  // underlying data changing, hence doesn't need to worry about selection). the grid, upon receiving\n  // dataChanged event, will refresh the cells rather than rip them all out (so user can show transitions).\n\n\n  RowNode.prototype.updateData = function (data) {\n    var oldData = this.data;\n    this.data = data;\n    this.updateDataOnDetailNode();\n    this.checkRowSelectable();\n    this.updateDataOnDetailNode();\n    var event = this.createDataChangedEvent(data, oldData, true);\n    this.dispatchLocalEvent(event);\n  };\n\n  RowNode.prototype.getRowIndexString = function () {\n    if (this.rowPinned === constants_1.Constants.PINNED_TOP) {\n      return 't-' + this.rowIndex;\n    } else if (this.rowPinned === constants_1.Constants.PINNED_BOTTOM) {\n      return 'b-' + this.rowIndex;\n    } else {\n      return this.rowIndex.toString();\n    }\n  };\n\n  RowNode.prototype.createDaemonNode = function () {\n    var oldNode = new RowNode();\n    this.context.wireBean(oldNode); // just copy the id and data, this is enough for the node to be used\n    // in the selection controller (the selection controller is the only\n    // place where daemon nodes can live).\n\n    oldNode.id = this.id;\n    oldNode.data = this.data;\n    oldNode.daemon = true;\n    oldNode.selected = this.selected;\n    oldNode.level = this.level;\n    return oldNode;\n  };\n\n  RowNode.prototype.setDataAndId = function (data, id) {\n    var oldNode = utils_1._.exists(this.id) ? this.createDaemonNode() : null;\n    var oldData = this.data;\n    this.data = data;\n    this.updateDataOnDetailNode();\n    this.setId(id);\n    this.selectionController.syncInRowNode(this, oldNode);\n    this.checkRowSelectable();\n    var event = this.createDataChangedEvent(data, oldData, false);\n    this.dispatchLocalEvent(event);\n  };\n\n  RowNode.prototype.checkRowSelectable = function () {\n    var isRowSelectableFunc = this.gridOptionsWrapper.getIsRowSelectableFunc();\n\n    var shouldInvokeIsRowSelectable = isRowSelectableFunc && utils_1._.exists(this);\n\n    this.setRowSelectable(shouldInvokeIsRowSelectable ? isRowSelectableFunc(this) : true);\n  };\n\n  RowNode.prototype.setRowSelectable = function (newVal) {\n    if (this.selectable !== newVal) {\n      this.selectable = newVal;\n\n      if (this.eventService) {\n        this.eventService.dispatchEvent(this.createLocalRowEvent(RowNode.EVENT_SELECTABLE_CHANGED));\n      }\n    }\n  };\n\n  RowNode.prototype.setId = function (id) {\n    // see if user is providing the id's\n    var getRowNodeId = this.gridOptionsWrapper.getRowNodeIdFunc();\n\n    if (getRowNodeId) {\n      // if user is providing the id's, then we set the id only after the data has been set.\n      // this is important for virtual pagination and viewport, where empty rows exist.\n      if (this.data) {\n        this.id = getRowNodeId(this.data);\n      } else {\n        // this can happen if user has set blank into the rowNode after the row previously\n        // having data. this happens in virtual page row model, when data is delete and\n        // the page is refreshed.\n        this.id = undefined;\n      }\n    } else {\n      this.id = id;\n    }\n  };\n\n  RowNode.prototype.isPixelInRange = function (pixel) {\n    return pixel >= this.rowTop && pixel < this.rowTop + this.rowHeight;\n  };\n\n  RowNode.prototype.clearRowTop = function () {\n    this.oldRowTop = this.rowTop;\n    this.setRowTop(null);\n  };\n\n  RowNode.prototype.setFirstChild = function (firstChild) {\n    if (this.firstChild === firstChild) {\n      return;\n    }\n\n    this.firstChild = firstChild;\n\n    if (this.eventService) {\n      this.eventService.dispatchEvent(this.createLocalRowEvent(RowNode.EVENT_FIRST_CHILD_CHANGED));\n    }\n  };\n\n  RowNode.prototype.setLastChild = function (lastChild) {\n    if (this.lastChild === lastChild) {\n      return;\n    }\n\n    this.lastChild = lastChild;\n\n    if (this.eventService) {\n      this.eventService.dispatchEvent(this.createLocalRowEvent(RowNode.EVENT_LAST_CHILD_CHANGED));\n    }\n  };\n\n  RowNode.prototype.setChildIndex = function (childIndex) {\n    if (this.childIndex === childIndex) {\n      return;\n    }\n\n    this.childIndex = childIndex;\n\n    if (this.eventService) {\n      this.eventService.dispatchEvent(this.createLocalRowEvent(RowNode.EVENT_CHILD_INDEX_CHANGED));\n    }\n  };\n\n  RowNode.prototype.setRowTop = function (rowTop) {\n    if (this.rowTop === rowTop) {\n      return;\n    }\n\n    this.rowTop = rowTop;\n\n    if (this.eventService) {\n      this.eventService.dispatchEvent(this.createLocalRowEvent(RowNode.EVENT_TOP_CHANGED));\n    }\n  };\n\n  RowNode.prototype.setDragging = function (dragging) {\n    if (this.dragging === dragging) {\n      return;\n    }\n\n    this.dragging = dragging;\n\n    if (this.eventService) {\n      this.eventService.dispatchEvent(this.createLocalRowEvent(RowNode.EVENT_DRAGGING_CHANGED));\n    }\n  };\n\n  RowNode.prototype.setAllChildrenCount = function (allChildrenCount) {\n    if (this.allChildrenCount === allChildrenCount) {\n      return;\n    }\n\n    this.allChildrenCount = allChildrenCount;\n\n    if (this.eventService) {\n      this.eventService.dispatchEvent(this.createLocalRowEvent(RowNode.EVENT_ALL_CHILDREN_COUNT_CHANGED));\n    }\n  };\n\n  RowNode.prototype.setRowHeight = function (rowHeight, estimated) {\n    if (estimated === void 0) {\n      estimated = false;\n    }\n\n    this.rowHeight = rowHeight;\n    this.rowHeightEstimated = estimated;\n\n    if (this.eventService) {\n      this.eventService.dispatchEvent(this.createLocalRowEvent(RowNode.EVENT_HEIGHT_CHANGED));\n    }\n  };\n\n  RowNode.prototype.setRowIndex = function (rowIndex) {\n    this.rowIndex = rowIndex;\n\n    if (this.eventService) {\n      this.eventService.dispatchEvent(this.createLocalRowEvent(RowNode.EVENT_ROW_INDEX_CHANGED));\n    }\n  };\n\n  RowNode.prototype.setUiLevel = function (uiLevel) {\n    if (this.uiLevel === uiLevel) {\n      return;\n    }\n\n    this.uiLevel = uiLevel;\n\n    if (this.eventService) {\n      this.eventService.dispatchEvent(this.createLocalRowEvent(RowNode.EVENT_UI_LEVEL_CHANGED));\n    }\n  };\n\n  RowNode.prototype.setExpanded = function (expanded) {\n    if (this.expanded === expanded) {\n      return;\n    }\n\n    this.expanded = expanded;\n\n    if (this.eventService) {\n      this.eventService.dispatchEvent(this.createLocalRowEvent(RowNode.EVENT_EXPANDED_CHANGED));\n    }\n\n    var event = this.createGlobalRowEvent(events_1.Events.EVENT_ROW_GROUP_OPENED);\n    this.mainEventService.dispatchEvent(event);\n\n    if (this.gridOptionsWrapper.isGroupIncludeFooter()) {\n      this.gridApi.redrawRows({\n        rowNodes: [this]\n      });\n    }\n  };\n\n  RowNode.prototype.createGlobalRowEvent = function (type) {\n    var event = {\n      type: type,\n      node: this,\n      data: this.data,\n      rowIndex: this.rowIndex,\n      rowPinned: this.rowPinned,\n      context: this.gridOptionsWrapper.getContext(),\n      api: this.gridOptionsWrapper.getApi(),\n      columnApi: this.gridOptionsWrapper.getColumnApi()\n    };\n    return event;\n  };\n\n  RowNode.prototype.dispatchLocalEvent = function (event) {\n    if (this.eventService) {\n      this.eventService.dispatchEvent(event);\n    }\n  }; // we also allow editing the value via the editors. when it is done via\n  // the editors, no 'cell changed' event gets fired, as it's assumed that\n  // the cell knows about the change given it's in charge of the editing.\n  // this method is for the client to call, so the cell listens for the change\n  // event, and also flashes the cell when the change occurs.\n\n\n  RowNode.prototype.setDataValue = function (colKey, newValue) {\n    var column = this.columnController.getPrimaryColumn(colKey);\n    this.valueService.setValue(this, column, newValue);\n    this.dispatchCellChangedEvent(column, newValue);\n  };\n\n  RowNode.prototype.setGroupValue = function (colKey, newValue) {\n    var column = this.columnController.getGridColumn(colKey);\n\n    if (utils_1._.missing(this.groupData)) {\n      this.groupData = {};\n    }\n\n    this.groupData[column.getColId()] = newValue;\n    this.dispatchCellChangedEvent(column, newValue);\n  }; // sets the data for an aggregation\n\n\n  RowNode.prototype.setAggData = function (newAggData) {\n    var _this = this; // find out all keys that could potentially change\n\n\n    var colIds = utils_1._.getAllKeysInObjects([this.aggData, newAggData]);\n\n    this.aggData = newAggData; // if no event service, nobody has registered for events, so no need fire event\n\n    if (this.eventService) {\n      colIds.forEach(function (colId) {\n        var column = _this.columnController.getGridColumn(colId);\n\n        var value = _this.aggData ? _this.aggData[colId] : undefined;\n\n        _this.dispatchCellChangedEvent(column, value);\n      });\n    }\n  };\n\n  RowNode.prototype.hasChildren = function () {\n    // we need to return true when this.group=true, as this is used by server side row model\n    // (as children are lazy loaded and stored in a cache anyway). otherwise we return true\n    // if children exist.\n    return this.group || this.childrenAfterGroup && this.childrenAfterGroup.length > 0;\n  };\n\n  RowNode.prototype.isEmptyRowGroupNode = function () {\n    return this.group && utils_1._.missingOrEmpty(this.childrenAfterGroup);\n  };\n\n  RowNode.prototype.dispatchCellChangedEvent = function (column, newValue) {\n    var cellChangedEvent = {\n      type: RowNode.EVENT_CELL_CHANGED,\n      node: this,\n      column: column,\n      newValue: newValue\n    };\n    this.dispatchLocalEvent(cellChangedEvent);\n  };\n\n  RowNode.prototype.resetQuickFilterAggregateText = function () {\n    this.quickFilterAggregateText = null;\n  };\n\n  RowNode.prototype.isExpandable = function () {\n    return this.hasChildren() || this.master;\n  };\n\n  RowNode.prototype.isSelected = function () {\n    // for footers, we just return what our sibling selected state is, as cannot select a footer\n    if (this.footer) {\n      return this.sibling.isSelected();\n    }\n\n    return this.selected;\n  };\n\n  RowNode.prototype.depthFirstSearch = function (callback) {\n    if (this.childrenAfterGroup) {\n      this.childrenAfterGroup.forEach(function (child) {\n        return child.depthFirstSearch(callback);\n      });\n    }\n\n    callback(this);\n  }; // + rowController.updateGroupsInSelection()\n  // + selectionController.calculatedSelectedForAllGroupNodes()\n\n\n  RowNode.prototype.calculateSelectedFromChildren = function () {\n    var atLeastOneSelected = false;\n    var atLeastOneDeSelected = false;\n    var atLeastOneMixed = false;\n    var newSelectedValue;\n\n    if (this.childrenAfterGroup) {\n      for (var i = 0; i < this.childrenAfterGroup.length; i++) {\n        var child = this.childrenAfterGroup[i]; // skip non-selectable nodes to prevent inconsistent selection values\n\n        if (!child.selectable) {\n          continue;\n        }\n\n        var childState = child.isSelected();\n\n        switch (childState) {\n          case true:\n            atLeastOneSelected = true;\n            break;\n\n          case false:\n            atLeastOneDeSelected = true;\n            break;\n\n          default:\n            atLeastOneMixed = true;\n            break;\n        }\n      }\n    }\n\n    if (atLeastOneMixed) {\n      newSelectedValue = undefined;\n    } else if (atLeastOneSelected && !atLeastOneDeSelected) {\n      newSelectedValue = true;\n    } else if (!atLeastOneSelected && atLeastOneDeSelected) {\n      newSelectedValue = false;\n    } else {\n      newSelectedValue = undefined;\n    }\n\n    this.selectThisNode(newSelectedValue);\n  };\n\n  RowNode.prototype.setSelectedInitialValue = function (selected) {\n    this.selected = selected;\n  };\n\n  RowNode.prototype.setSelected = function (newValue, clearSelection, suppressFinishActions) {\n    if (clearSelection === void 0) {\n      clearSelection = false;\n    }\n\n    if (suppressFinishActions === void 0) {\n      suppressFinishActions = false;\n    }\n\n    this.setSelectedParams({\n      newValue: newValue,\n      clearSelection: clearSelection,\n      suppressFinishActions: suppressFinishActions,\n      rangeSelect: false\n    });\n  };\n\n  RowNode.prototype.isRowPinned = function () {\n    return this.rowPinned === constants_1.Constants.PINNED_TOP || this.rowPinned === constants_1.Constants.PINNED_BOTTOM;\n  }; // to make calling code more readable, this is the same method as setSelected except it takes names parameters\n\n\n  RowNode.prototype.setSelectedParams = function (params) {\n    var groupSelectsChildren = this.gridOptionsWrapper.isGroupSelectsChildren();\n    var newValue = params.newValue === true;\n    var clearSelection = params.clearSelection === true;\n    var suppressFinishActions = params.suppressFinishActions === true;\n    var rangeSelect = params.rangeSelect === true; // groupSelectsFiltered only makes sense when group selects children\n\n    var groupSelectsFiltered = groupSelectsChildren && params.groupSelectsFiltered === true;\n\n    if (this.id === undefined) {\n      console.warn('ag-Grid: cannot select node until id for node is known');\n      return 0;\n    }\n\n    if (this.rowPinned) {\n      console.warn('ag-Grid: cannot select pinned rows');\n      return 0;\n    } // if we are a footer, we don't do selection, just pass the info\n    // to the sibling (the parent of the group)\n\n\n    if (this.footer) {\n      var count = this.sibling.setSelectedParams(params);\n      return count;\n    }\n\n    if (rangeSelect) {\n      var newRowClicked = this.selectionController.getLastSelectedNode() !== this;\n      var allowMultiSelect = this.gridOptionsWrapper.isRowSelectionMulti();\n\n      if (newRowClicked && allowMultiSelect) {\n        return this.doRowRangeSelection();\n      }\n    }\n\n    var updatedCount = 0; // when groupSelectsFiltered, then this node may end up intermediate despite\n    // trying to set it to true / false. this group will be calculated further on\n    // down when we call calculatedSelectedForAllGroupNodes(). we need to skip it\n    // here, otherwise the updatedCount would include it.\n\n    var skipThisNode = groupSelectsFiltered && this.group;\n\n    if (!skipThisNode) {\n      var thisNodeWasSelected = this.selectThisNode(newValue);\n\n      if (thisNodeWasSelected) {\n        updatedCount++;\n      }\n    }\n\n    if (groupSelectsChildren && this.group) {\n      updatedCount += this.selectChildNodes(newValue, groupSelectsFiltered);\n    } // clear other nodes if not doing multi select\n\n\n    if (!suppressFinishActions) {\n      var clearOtherNodes = newValue && (clearSelection || !this.gridOptionsWrapper.isRowSelectionMulti());\n\n      if (clearOtherNodes) {\n        updatedCount += this.selectionController.clearOtherNodes(this);\n      } // only if we selected something, then update groups and fire events\n\n\n      if (updatedCount > 0) {\n        this.selectionController.updateGroupsFromChildrenSelections(); // this is the very end of the 'action node', so we are finished all the updates,\n        // include any parent / child changes that this method caused\n\n        var event_1 = {\n          type: events_1.Events.EVENT_SELECTION_CHANGED,\n          api: this.gridApi,\n          columnApi: this.columnApi\n        };\n        this.mainEventService.dispatchEvent(event_1);\n      } // so if user next does shift-select, we know where to start the selection from\n\n\n      if (newValue) {\n        this.selectionController.setLastSelectedNode(this);\n      }\n    }\n\n    return updatedCount;\n  }; // selects all rows between this node and the last selected node (or the top if this is the first selection).\n  // not to be mixed up with 'cell range selection' where you drag the mouse, this is row range selection, by\n  // holding down 'shift'.\n\n\n  RowNode.prototype.doRowRangeSelection = function () {\n    var updatedCount = 0;\n    var groupsSelectChildren = this.gridOptionsWrapper.isGroupSelectsChildren();\n    var lastSelectedNode = this.selectionController.getLastSelectedNode();\n    var nodesToSelect = this.rowModel.getNodesInRangeForSelection(this, lastSelectedNode);\n    nodesToSelect.forEach(function (rowNode) {\n      if (rowNode.group && groupsSelectChildren) {\n        return;\n      }\n\n      var nodeWasSelected = rowNode.selectThisNode(true);\n\n      if (nodeWasSelected) {\n        updatedCount++;\n      }\n    });\n    this.selectionController.updateGroupsFromChildrenSelections();\n    var event = {\n      type: events_1.Events.EVENT_SELECTION_CHANGED,\n      api: this.gridApi,\n      columnApi: this.columnApi\n    };\n    this.mainEventService.dispatchEvent(event);\n    return updatedCount;\n  };\n\n  RowNode.prototype.isParentOfNode = function (potentialParent) {\n    var parentNode = this.parent;\n\n    while (parentNode) {\n      if (parentNode === potentialParent) {\n        return true;\n      }\n\n      parentNode = parentNode.parent;\n    }\n\n    return false;\n  };\n\n  RowNode.prototype.selectThisNode = function (newValue) {\n    if (!this.selectable || this.selected === newValue) {\n      return false;\n    }\n\n    this.selected = newValue;\n\n    if (this.eventService) {\n      this.dispatchLocalEvent(this.createLocalRowEvent(RowNode.EVENT_ROW_SELECTED));\n    }\n\n    var event = this.createGlobalRowEvent(events_1.Events.EVENT_ROW_SELECTED);\n    this.mainEventService.dispatchEvent(event);\n    return true;\n  };\n\n  RowNode.prototype.selectChildNodes = function (newValue, groupSelectsFiltered) {\n    var children = groupSelectsFiltered ? this.childrenAfterFilter : this.childrenAfterGroup;\n    var updatedCount = 0;\n\n    if (utils_1._.missing(children)) {\n      return;\n    }\n\n    for (var i = 0; i < children.length; i++) {\n      updatedCount += children[i].setSelectedParams({\n        newValue: newValue,\n        clearSelection: false,\n        suppressFinishActions: true,\n        groupSelectsFiltered: groupSelectsFiltered\n      });\n    }\n\n    return updatedCount;\n  };\n\n  RowNode.prototype.addEventListener = function (eventType, listener) {\n    if (!this.eventService) {\n      this.eventService = new eventService_1.EventService();\n    }\n\n    this.eventService.addEventListener(eventType, listener);\n  };\n\n  RowNode.prototype.removeEventListener = function (eventType, listener) {\n    this.eventService.removeEventListener(eventType, listener);\n  };\n\n  RowNode.prototype.onMouseEnter = function () {\n    this.dispatchLocalEvent(this.createLocalRowEvent(RowNode.EVENT_MOUSE_ENTER));\n  };\n\n  RowNode.prototype.onMouseLeave = function () {\n    this.dispatchLocalEvent(this.createLocalRowEvent(RowNode.EVENT_MOUSE_LEAVE));\n  };\n\n  RowNode.prototype.getFirstChildOfFirstChild = function (rowGroupColumn) {\n    var currentRowNode = this; // if we are hiding groups, then if we are the first child, of the first child,\n    // all the way up to the column we are interested in, then we show the group cell.\n\n    var isCandidate = true;\n    var foundFirstChildPath = false;\n    var nodeToSwapIn;\n\n    while (isCandidate && !foundFirstChildPath) {\n      var parentRowNode = currentRowNode.parent;\n      var firstChild = utils_1._.exists(parentRowNode) && currentRowNode.firstChild;\n\n      if (firstChild) {\n        if (parentRowNode.rowGroupColumn === rowGroupColumn) {\n          foundFirstChildPath = true;\n          nodeToSwapIn = parentRowNode;\n        }\n      } else {\n        isCandidate = false;\n      }\n\n      currentRowNode = parentRowNode;\n    }\n\n    return foundFirstChildPath ? nodeToSwapIn : null;\n  };\n\n  RowNode.OBJECT_ID_SEQUENCE = 0;\n  RowNode.EVENT_ROW_SELECTED = 'rowSelected';\n  RowNode.EVENT_DATA_CHANGED = 'dataChanged';\n  RowNode.EVENT_CELL_CHANGED = 'cellChanged';\n  RowNode.EVENT_ALL_CHILDREN_COUNT_CHANGED = 'allChildrenCountChanged';\n  RowNode.EVENT_MOUSE_ENTER = 'mouseEnter';\n  RowNode.EVENT_MOUSE_LEAVE = 'mouseLeave';\n  RowNode.EVENT_HEIGHT_CHANGED = 'heightChanged';\n  RowNode.EVENT_TOP_CHANGED = 'topChanged';\n  RowNode.EVENT_FIRST_CHILD_CHANGED = 'firstChildChanged';\n  RowNode.EVENT_LAST_CHILD_CHANGED = 'lastChildChanged';\n  RowNode.EVENT_CHILD_INDEX_CHANGED = 'childIndexChanged';\n  RowNode.EVENT_ROW_INDEX_CHANGED = 'rowIndexChanged';\n  RowNode.EVENT_EXPANDED_CHANGED = 'expandedChanged';\n  RowNode.EVENT_SELECTABLE_CHANGED = 'selectableChanged';\n  RowNode.EVENT_UI_LEVEL_CHANGED = 'uiLevelChanged';\n  RowNode.EVENT_DRAGGING_CHANGED = 'draggingChanged';\n\n  __decorate([context_1.Autowired('eventService'), __metadata(\"design:type\", eventService_1.EventService)], RowNode.prototype, \"mainEventService\", void 0);\n\n  __decorate([context_1.Autowired('gridOptionsWrapper'), __metadata(\"design:type\", gridOptionsWrapper_1.GridOptionsWrapper)], RowNode.prototype, \"gridOptionsWrapper\", void 0);\n\n  __decorate([context_1.Autowired('selectionController'), __metadata(\"design:type\", selectionController_1.SelectionController)], RowNode.prototype, \"selectionController\", void 0);\n\n  __decorate([context_1.Autowired('columnController'), __metadata(\"design:type\", columnController_1.ColumnController)], RowNode.prototype, \"columnController\", void 0);\n\n  __decorate([context_1.Autowired('valueService'), __metadata(\"design:type\", valueService_1.ValueService)], RowNode.prototype, \"valueService\", void 0);\n\n  __decorate([context_1.Autowired('rowModel'), __metadata(\"design:type\", Object)], RowNode.prototype, \"rowModel\", void 0);\n\n  __decorate([context_1.Autowired('context'), __metadata(\"design:type\", context_1.Context)], RowNode.prototype, \"context\", void 0);\n\n  __decorate([context_1.Autowired('valueCache'), __metadata(\"design:type\", valueCache_1.ValueCache)], RowNode.prototype, \"valueCache\", void 0);\n\n  __decorate([context_1.Autowired('columnApi'), __metadata(\"design:type\", columnApi_1.ColumnApi)], RowNode.prototype, \"columnApi\", void 0);\n\n  __decorate([context_1.Autowired('gridApi'), __metadata(\"design:type\", gridApi_1.GridApi)], RowNode.prototype, \"gridApi\", void 0);\n\n  return RowNode;\n}();\n\nexports.RowNode = RowNode;","map":{"version":3,"sources":["/Users/dirkmennecke77/Desktop/Lageplan/node_modules/ag-grid-community/dist/lib/entities/rowNode.js"],"names":["__decorate","decorators","target","key","desc","c","arguments","length","r","Object","getOwnPropertyDescriptor","d","Reflect","decorate","i","defineProperty","__metadata","k","v","metadata","exports","value","eventService_1","require","events_1","gridOptionsWrapper_1","selectionController_1","valueService_1","columnController_1","columnApi_1","context_1","constants_1","valueCache_1","gridApi_1","utils_1","RowNode","childrenMapped","selectable","__objectId","OBJECT_ID_SEQUENCE","alreadyRendered","selected","prototype","setData","data","oldData","valueCache","onDataChanged","updateDataOnDetailNode","checkRowSelectable","event","createDataChangedEvent","dispatchLocalEvent","detailNode","newData","update","type","EVENT_DATA_CHANGED","node","createLocalRowEvent","updateData","getRowIndexString","rowPinned","Constants","PINNED_TOP","rowIndex","PINNED_BOTTOM","toString","createDaemonNode","oldNode","context","wireBean","id","daemon","level","setDataAndId","_","exists","setId","selectionController","syncInRowNode","isRowSelectableFunc","gridOptionsWrapper","getIsRowSelectableFunc","shouldInvokeIsRowSelectable","setRowSelectable","newVal","eventService","dispatchEvent","EVENT_SELECTABLE_CHANGED","getRowNodeId","getRowNodeIdFunc","undefined","isPixelInRange","pixel","rowTop","rowHeight","clearRowTop","oldRowTop","setRowTop","setFirstChild","firstChild","EVENT_FIRST_CHILD_CHANGED","setLastChild","lastChild","EVENT_LAST_CHILD_CHANGED","setChildIndex","childIndex","EVENT_CHILD_INDEX_CHANGED","EVENT_TOP_CHANGED","setDragging","dragging","EVENT_DRAGGING_CHANGED","setAllChildrenCount","allChildrenCount","EVENT_ALL_CHILDREN_COUNT_CHANGED","setRowHeight","estimated","rowHeightEstimated","EVENT_HEIGHT_CHANGED","setRowIndex","EVENT_ROW_INDEX_CHANGED","setUiLevel","uiLevel","EVENT_UI_LEVEL_CHANGED","setExpanded","expanded","EVENT_EXPANDED_CHANGED","createGlobalRowEvent","Events","EVENT_ROW_GROUP_OPENED","mainEventService","isGroupIncludeFooter","gridApi","redrawRows","rowNodes","getContext","api","getApi","columnApi","getColumnApi","setDataValue","colKey","newValue","column","columnController","getPrimaryColumn","valueService","setValue","dispatchCellChangedEvent","setGroupValue","getGridColumn","missing","groupData","getColId","setAggData","newAggData","_this","colIds","getAllKeysInObjects","aggData","forEach","colId","hasChildren","group","childrenAfterGroup","isEmptyRowGroupNode","missingOrEmpty","cellChangedEvent","EVENT_CELL_CHANGED","resetQuickFilterAggregateText","quickFilterAggregateText","isExpandable","master","isSelected","footer","sibling","depthFirstSearch","callback","child","calculateSelectedFromChildren","atLeastOneSelected","atLeastOneDeSelected","atLeastOneMixed","newSelectedValue","childState","selectThisNode","setSelectedInitialValue","setSelected","clearSelection","suppressFinishActions","setSelectedParams","rangeSelect","isRowPinned","params","groupSelectsChildren","isGroupSelectsChildren","groupSelectsFiltered","console","warn","count","newRowClicked","getLastSelectedNode","allowMultiSelect","isRowSelectionMulti","doRowRangeSelection","updatedCount","skipThisNode","thisNodeWasSelected","selectChildNodes","clearOtherNodes","updateGroupsFromChildrenSelections","event_1","EVENT_SELECTION_CHANGED","setLastSelectedNode","groupsSelectChildren","lastSelectedNode","nodesToSelect","rowModel","getNodesInRangeForSelection","rowNode","nodeWasSelected","isParentOfNode","potentialParent","parentNode","parent","EVENT_ROW_SELECTED","children","childrenAfterFilter","addEventListener","eventType","listener","EventService","removeEventListener","onMouseEnter","EVENT_MOUSE_ENTER","onMouseLeave","EVENT_MOUSE_LEAVE","getFirstChildOfFirstChild","rowGroupColumn","currentRowNode","isCandidate","foundFirstChildPath","nodeToSwapIn","parentRowNode","Autowired","GridOptionsWrapper","SelectionController","ColumnController","ValueService","Context","ValueCache","ColumnApi","GridApi"],"mappings":"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","sourcesContent":["/**\n * ag-grid-community - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components\n * @version v21.2.2\n * @link http://www.ag-grid.com/\n * @license MIT\n */\n\"use strict\";\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __metadata = (this && this.__metadata) || function (k, v) {\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar eventService_1 = require(\"../eventService\");\nvar events_1 = require(\"../events\");\nvar gridOptionsWrapper_1 = require(\"../gridOptionsWrapper\");\nvar selectionController_1 = require(\"../selectionController\");\nvar valueService_1 = require(\"../valueService/valueService\");\nvar columnController_1 = require(\"../columnController/columnController\");\nvar columnApi_1 = require(\"../columnController/columnApi\");\nvar context_1 = require(\"../context/context\");\nvar constants_1 = require(\"../constants\");\nvar valueCache_1 = require(\"../valueService/valueCache\");\nvar gridApi_1 = require(\"../gridApi\");\nvar utils_1 = require(\"../utils\");\nvar RowNode = /** @class */ (function () {\n    function RowNode() {\n        /** Children mapped by the pivot columns */\n        this.childrenMapped = {};\n        /** True by default - can be overridden via gridOptions.isRowSelectable(rowNode) */\n        this.selectable = true;\n        /** Used by sorting service - to give deterministic sort to groups. Previously we\n         * just id for this, however id is a string and had slower sorting compared to numbers. */\n        this.__objectId = RowNode.OBJECT_ID_SEQUENCE++;\n        /** True when nodes with the same id are being removed and added as part of the same batch transaction */\n        this.alreadyRendered = false;\n        this.selected = false;\n    }\n    RowNode.prototype.setData = function (data) {\n        var oldData = this.data;\n        this.data = data;\n        this.valueCache.onDataChanged();\n        this.updateDataOnDetailNode();\n        this.checkRowSelectable();\n        var event = this.createDataChangedEvent(data, oldData, false);\n        this.dispatchLocalEvent(event);\n    };\n    // when we are doing master / detail, the detail node is lazy created, but then kept around.\n    // so if we show / hide the detail, the same detail rowNode is used. so we need to keep the data\n    // in sync, otherwise expand/collapse of the detail would still show the old values.\n    RowNode.prototype.updateDataOnDetailNode = function () {\n        if (this.detailNode) {\n            this.detailNode.data = this.data;\n        }\n    };\n    RowNode.prototype.createDataChangedEvent = function (newData, oldData, update) {\n        return {\n            type: RowNode.EVENT_DATA_CHANGED,\n            node: this,\n            oldData: oldData,\n            newData: newData,\n            update: update\n        };\n    };\n    RowNode.prototype.createLocalRowEvent = function (type) {\n        return {\n            type: type,\n            node: this\n        };\n    };\n    // similar to setRowData, however it is expected that the data is the same data item. this\n    // is intended to be used with Redux type stores, where the whole data can be changed. we are\n    // guaranteed that the data is the same entity (so grid doesn't need to worry about the id of the\n    // underlying data changing, hence doesn't need to worry about selection). the grid, upon receiving\n    // dataChanged event, will refresh the cells rather than rip them all out (so user can show transitions).\n    RowNode.prototype.updateData = function (data) {\n        var oldData = this.data;\n        this.data = data;\n        this.updateDataOnDetailNode();\n        this.checkRowSelectable();\n        this.updateDataOnDetailNode();\n        var event = this.createDataChangedEvent(data, oldData, true);\n        this.dispatchLocalEvent(event);\n    };\n    RowNode.prototype.getRowIndexString = function () {\n        if (this.rowPinned === constants_1.Constants.PINNED_TOP) {\n            return 't-' + this.rowIndex;\n        }\n        else if (this.rowPinned === constants_1.Constants.PINNED_BOTTOM) {\n            return 'b-' + this.rowIndex;\n        }\n        else {\n            return this.rowIndex.toString();\n        }\n    };\n    RowNode.prototype.createDaemonNode = function () {\n        var oldNode = new RowNode();\n        this.context.wireBean(oldNode);\n        // just copy the id and data, this is enough for the node to be used\n        // in the selection controller (the selection controller is the only\n        // place where daemon nodes can live).\n        oldNode.id = this.id;\n        oldNode.data = this.data;\n        oldNode.daemon = true;\n        oldNode.selected = this.selected;\n        oldNode.level = this.level;\n        return oldNode;\n    };\n    RowNode.prototype.setDataAndId = function (data, id) {\n        var oldNode = utils_1._.exists(this.id) ? this.createDaemonNode() : null;\n        var oldData = this.data;\n        this.data = data;\n        this.updateDataOnDetailNode();\n        this.setId(id);\n        this.selectionController.syncInRowNode(this, oldNode);\n        this.checkRowSelectable();\n        var event = this.createDataChangedEvent(data, oldData, false);\n        this.dispatchLocalEvent(event);\n    };\n    RowNode.prototype.checkRowSelectable = function () {\n        var isRowSelectableFunc = this.gridOptionsWrapper.getIsRowSelectableFunc();\n        var shouldInvokeIsRowSelectable = isRowSelectableFunc && utils_1._.exists(this);\n        this.setRowSelectable(shouldInvokeIsRowSelectable ? isRowSelectableFunc(this) : true);\n    };\n    RowNode.prototype.setRowSelectable = function (newVal) {\n        if (this.selectable !== newVal) {\n            this.selectable = newVal;\n            if (this.eventService) {\n                this.eventService.dispatchEvent(this.createLocalRowEvent(RowNode.EVENT_SELECTABLE_CHANGED));\n            }\n        }\n    };\n    RowNode.prototype.setId = function (id) {\n        // see if user is providing the id's\n        var getRowNodeId = this.gridOptionsWrapper.getRowNodeIdFunc();\n        if (getRowNodeId) {\n            // if user is providing the id's, then we set the id only after the data has been set.\n            // this is important for virtual pagination and viewport, where empty rows exist.\n            if (this.data) {\n                this.id = getRowNodeId(this.data);\n            }\n            else {\n                // this can happen if user has set blank into the rowNode after the row previously\n                // having data. this happens in virtual page row model, when data is delete and\n                // the page is refreshed.\n                this.id = undefined;\n            }\n        }\n        else {\n            this.id = id;\n        }\n    };\n    RowNode.prototype.isPixelInRange = function (pixel) {\n        return pixel >= this.rowTop && pixel < (this.rowTop + this.rowHeight);\n    };\n    RowNode.prototype.clearRowTop = function () {\n        this.oldRowTop = this.rowTop;\n        this.setRowTop(null);\n    };\n    RowNode.prototype.setFirstChild = function (firstChild) {\n        if (this.firstChild === firstChild) {\n            return;\n        }\n        this.firstChild = firstChild;\n        if (this.eventService) {\n            this.eventService.dispatchEvent(this.createLocalRowEvent(RowNode.EVENT_FIRST_CHILD_CHANGED));\n        }\n    };\n    RowNode.prototype.setLastChild = function (lastChild) {\n        if (this.lastChild === lastChild) {\n            return;\n        }\n        this.lastChild = lastChild;\n        if (this.eventService) {\n            this.eventService.dispatchEvent(this.createLocalRowEvent(RowNode.EVENT_LAST_CHILD_CHANGED));\n        }\n    };\n    RowNode.prototype.setChildIndex = function (childIndex) {\n        if (this.childIndex === childIndex) {\n            return;\n        }\n        this.childIndex = childIndex;\n        if (this.eventService) {\n            this.eventService.dispatchEvent(this.createLocalRowEvent(RowNode.EVENT_CHILD_INDEX_CHANGED));\n        }\n    };\n    RowNode.prototype.setRowTop = function (rowTop) {\n        if (this.rowTop === rowTop) {\n            return;\n        }\n        this.rowTop = rowTop;\n        if (this.eventService) {\n            this.eventService.dispatchEvent(this.createLocalRowEvent(RowNode.EVENT_TOP_CHANGED));\n        }\n    };\n    RowNode.prototype.setDragging = function (dragging) {\n        if (this.dragging === dragging) {\n            return;\n        }\n        this.dragging = dragging;\n        if (this.eventService) {\n            this.eventService.dispatchEvent(this.createLocalRowEvent(RowNode.EVENT_DRAGGING_CHANGED));\n        }\n    };\n    RowNode.prototype.setAllChildrenCount = function (allChildrenCount) {\n        if (this.allChildrenCount === allChildrenCount) {\n            return;\n        }\n        this.allChildrenCount = allChildrenCount;\n        if (this.eventService) {\n            this.eventService.dispatchEvent(this.createLocalRowEvent(RowNode.EVENT_ALL_CHILDREN_COUNT_CHANGED));\n        }\n    };\n    RowNode.prototype.setRowHeight = function (rowHeight, estimated) {\n        if (estimated === void 0) { estimated = false; }\n        this.rowHeight = rowHeight;\n        this.rowHeightEstimated = estimated;\n        if (this.eventService) {\n            this.eventService.dispatchEvent(this.createLocalRowEvent(RowNode.EVENT_HEIGHT_CHANGED));\n        }\n    };\n    RowNode.prototype.setRowIndex = function (rowIndex) {\n        this.rowIndex = rowIndex;\n        if (this.eventService) {\n            this.eventService.dispatchEvent(this.createLocalRowEvent(RowNode.EVENT_ROW_INDEX_CHANGED));\n        }\n    };\n    RowNode.prototype.setUiLevel = function (uiLevel) {\n        if (this.uiLevel === uiLevel) {\n            return;\n        }\n        this.uiLevel = uiLevel;\n        if (this.eventService) {\n            this.eventService.dispatchEvent(this.createLocalRowEvent(RowNode.EVENT_UI_LEVEL_CHANGED));\n        }\n    };\n    RowNode.prototype.setExpanded = function (expanded) {\n        if (this.expanded === expanded) {\n            return;\n        }\n        this.expanded = expanded;\n        if (this.eventService) {\n            this.eventService.dispatchEvent(this.createLocalRowEvent(RowNode.EVENT_EXPANDED_CHANGED));\n        }\n        var event = this.createGlobalRowEvent(events_1.Events.EVENT_ROW_GROUP_OPENED);\n        this.mainEventService.dispatchEvent(event);\n        if (this.gridOptionsWrapper.isGroupIncludeFooter()) {\n            this.gridApi.redrawRows({ rowNodes: [this] });\n        }\n    };\n    RowNode.prototype.createGlobalRowEvent = function (type) {\n        var event = {\n            type: type,\n            node: this,\n            data: this.data,\n            rowIndex: this.rowIndex,\n            rowPinned: this.rowPinned,\n            context: this.gridOptionsWrapper.getContext(),\n            api: this.gridOptionsWrapper.getApi(),\n            columnApi: this.gridOptionsWrapper.getColumnApi()\n        };\n        return event;\n    };\n    RowNode.prototype.dispatchLocalEvent = function (event) {\n        if (this.eventService) {\n            this.eventService.dispatchEvent(event);\n        }\n    };\n    // we also allow editing the value via the editors. when it is done via\n    // the editors, no 'cell changed' event gets fired, as it's assumed that\n    // the cell knows about the change given it's in charge of the editing.\n    // this method is for the client to call, so the cell listens for the change\n    // event, and also flashes the cell when the change occurs.\n    RowNode.prototype.setDataValue = function (colKey, newValue) {\n        var column = this.columnController.getPrimaryColumn(colKey);\n        this.valueService.setValue(this, column, newValue);\n        this.dispatchCellChangedEvent(column, newValue);\n    };\n    RowNode.prototype.setGroupValue = function (colKey, newValue) {\n        var column = this.columnController.getGridColumn(colKey);\n        if (utils_1._.missing(this.groupData)) {\n            this.groupData = {};\n        }\n        this.groupData[column.getColId()] = newValue;\n        this.dispatchCellChangedEvent(column, newValue);\n    };\n    // sets the data for an aggregation\n    RowNode.prototype.setAggData = function (newAggData) {\n        var _this = this;\n        // find out all keys that could potentially change\n        var colIds = utils_1._.getAllKeysInObjects([this.aggData, newAggData]);\n        this.aggData = newAggData;\n        // if no event service, nobody has registered for events, so no need fire event\n        if (this.eventService) {\n            colIds.forEach(function (colId) {\n                var column = _this.columnController.getGridColumn(colId);\n                var value = _this.aggData ? _this.aggData[colId] : undefined;\n                _this.dispatchCellChangedEvent(column, value);\n            });\n        }\n    };\n    RowNode.prototype.hasChildren = function () {\n        // we need to return true when this.group=true, as this is used by server side row model\n        // (as children are lazy loaded and stored in a cache anyway). otherwise we return true\n        // if children exist.\n        return this.group || (this.childrenAfterGroup && this.childrenAfterGroup.length > 0);\n    };\n    RowNode.prototype.isEmptyRowGroupNode = function () {\n        return this.group && utils_1._.missingOrEmpty(this.childrenAfterGroup);\n    };\n    RowNode.prototype.dispatchCellChangedEvent = function (column, newValue) {\n        var cellChangedEvent = {\n            type: RowNode.EVENT_CELL_CHANGED,\n            node: this,\n            column: column,\n            newValue: newValue\n        };\n        this.dispatchLocalEvent(cellChangedEvent);\n    };\n    RowNode.prototype.resetQuickFilterAggregateText = function () {\n        this.quickFilterAggregateText = null;\n    };\n    RowNode.prototype.isExpandable = function () {\n        return this.hasChildren() || this.master;\n    };\n    RowNode.prototype.isSelected = function () {\n        // for footers, we just return what our sibling selected state is, as cannot select a footer\n        if (this.footer) {\n            return this.sibling.isSelected();\n        }\n        return this.selected;\n    };\n    RowNode.prototype.depthFirstSearch = function (callback) {\n        if (this.childrenAfterGroup) {\n            this.childrenAfterGroup.forEach(function (child) { return child.depthFirstSearch(callback); });\n        }\n        callback(this);\n    };\n    // + rowController.updateGroupsInSelection()\n    // + selectionController.calculatedSelectedForAllGroupNodes()\n    RowNode.prototype.calculateSelectedFromChildren = function () {\n        var atLeastOneSelected = false;\n        var atLeastOneDeSelected = false;\n        var atLeastOneMixed = false;\n        var newSelectedValue;\n        if (this.childrenAfterGroup) {\n            for (var i = 0; i < this.childrenAfterGroup.length; i++) {\n                var child = this.childrenAfterGroup[i];\n                // skip non-selectable nodes to prevent inconsistent selection values\n                if (!child.selectable) {\n                    continue;\n                }\n                var childState = child.isSelected();\n                switch (childState) {\n                    case true:\n                        atLeastOneSelected = true;\n                        break;\n                    case false:\n                        atLeastOneDeSelected = true;\n                        break;\n                    default:\n                        atLeastOneMixed = true;\n                        break;\n                }\n            }\n        }\n        if (atLeastOneMixed) {\n            newSelectedValue = undefined;\n        }\n        else if (atLeastOneSelected && !atLeastOneDeSelected) {\n            newSelectedValue = true;\n        }\n        else if (!atLeastOneSelected && atLeastOneDeSelected) {\n            newSelectedValue = false;\n        }\n        else {\n            newSelectedValue = undefined;\n        }\n        this.selectThisNode(newSelectedValue);\n    };\n    RowNode.prototype.setSelectedInitialValue = function (selected) {\n        this.selected = selected;\n    };\n    RowNode.prototype.setSelected = function (newValue, clearSelection, suppressFinishActions) {\n        if (clearSelection === void 0) { clearSelection = false; }\n        if (suppressFinishActions === void 0) { suppressFinishActions = false; }\n        this.setSelectedParams({\n            newValue: newValue,\n            clearSelection: clearSelection,\n            suppressFinishActions: suppressFinishActions,\n            rangeSelect: false\n        });\n    };\n    RowNode.prototype.isRowPinned = function () {\n        return this.rowPinned === constants_1.Constants.PINNED_TOP || this.rowPinned === constants_1.Constants.PINNED_BOTTOM;\n    };\n    // to make calling code more readable, this is the same method as setSelected except it takes names parameters\n    RowNode.prototype.setSelectedParams = function (params) {\n        var groupSelectsChildren = this.gridOptionsWrapper.isGroupSelectsChildren();\n        var newValue = params.newValue === true;\n        var clearSelection = params.clearSelection === true;\n        var suppressFinishActions = params.suppressFinishActions === true;\n        var rangeSelect = params.rangeSelect === true;\n        // groupSelectsFiltered only makes sense when group selects children\n        var groupSelectsFiltered = groupSelectsChildren && (params.groupSelectsFiltered === true);\n        if (this.id === undefined) {\n            console.warn('ag-Grid: cannot select node until id for node is known');\n            return 0;\n        }\n        if (this.rowPinned) {\n            console.warn('ag-Grid: cannot select pinned rows');\n            return 0;\n        }\n        // if we are a footer, we don't do selection, just pass the info\n        // to the sibling (the parent of the group)\n        if (this.footer) {\n            var count = this.sibling.setSelectedParams(params);\n            return count;\n        }\n        if (rangeSelect) {\n            var newRowClicked = this.selectionController.getLastSelectedNode() !== this;\n            var allowMultiSelect = this.gridOptionsWrapper.isRowSelectionMulti();\n            if (newRowClicked && allowMultiSelect) {\n                return this.doRowRangeSelection();\n            }\n        }\n        var updatedCount = 0;\n        // when groupSelectsFiltered, then this node may end up intermediate despite\n        // trying to set it to true / false. this group will be calculated further on\n        // down when we call calculatedSelectedForAllGroupNodes(). we need to skip it\n        // here, otherwise the updatedCount would include it.\n        var skipThisNode = groupSelectsFiltered && this.group;\n        if (!skipThisNode) {\n            var thisNodeWasSelected = this.selectThisNode(newValue);\n            if (thisNodeWasSelected) {\n                updatedCount++;\n            }\n        }\n        if (groupSelectsChildren && this.group) {\n            updatedCount += this.selectChildNodes(newValue, groupSelectsFiltered);\n        }\n        // clear other nodes if not doing multi select\n        if (!suppressFinishActions) {\n            var clearOtherNodes = newValue && (clearSelection || !this.gridOptionsWrapper.isRowSelectionMulti());\n            if (clearOtherNodes) {\n                updatedCount += this.selectionController.clearOtherNodes(this);\n            }\n            // only if we selected something, then update groups and fire events\n            if (updatedCount > 0) {\n                this.selectionController.updateGroupsFromChildrenSelections();\n                // this is the very end of the 'action node', so we are finished all the updates,\n                // include any parent / child changes that this method caused\n                var event_1 = {\n                    type: events_1.Events.EVENT_SELECTION_CHANGED,\n                    api: this.gridApi,\n                    columnApi: this.columnApi\n                };\n                this.mainEventService.dispatchEvent(event_1);\n            }\n            // so if user next does shift-select, we know where to start the selection from\n            if (newValue) {\n                this.selectionController.setLastSelectedNode(this);\n            }\n        }\n        return updatedCount;\n    };\n    // selects all rows between this node and the last selected node (or the top if this is the first selection).\n    // not to be mixed up with 'cell range selection' where you drag the mouse, this is row range selection, by\n    // holding down 'shift'.\n    RowNode.prototype.doRowRangeSelection = function () {\n        var updatedCount = 0;\n        var groupsSelectChildren = this.gridOptionsWrapper.isGroupSelectsChildren();\n        var lastSelectedNode = this.selectionController.getLastSelectedNode();\n        var nodesToSelect = this.rowModel.getNodesInRangeForSelection(this, lastSelectedNode);\n        nodesToSelect.forEach(function (rowNode) {\n            if (rowNode.group && groupsSelectChildren) {\n                return;\n            }\n            var nodeWasSelected = rowNode.selectThisNode(true);\n            if (nodeWasSelected) {\n                updatedCount++;\n            }\n        });\n        this.selectionController.updateGroupsFromChildrenSelections();\n        var event = {\n            type: events_1.Events.EVENT_SELECTION_CHANGED,\n            api: this.gridApi,\n            columnApi: this.columnApi\n        };\n        this.mainEventService.dispatchEvent(event);\n        return updatedCount;\n    };\n    RowNode.prototype.isParentOfNode = function (potentialParent) {\n        var parentNode = this.parent;\n        while (parentNode) {\n            if (parentNode === potentialParent) {\n                return true;\n            }\n            parentNode = parentNode.parent;\n        }\n        return false;\n    };\n    RowNode.prototype.selectThisNode = function (newValue) {\n        if (!this.selectable || this.selected === newValue) {\n            return false;\n        }\n        this.selected = newValue;\n        if (this.eventService) {\n            this.dispatchLocalEvent(this.createLocalRowEvent(RowNode.EVENT_ROW_SELECTED));\n        }\n        var event = this.createGlobalRowEvent(events_1.Events.EVENT_ROW_SELECTED);\n        this.mainEventService.dispatchEvent(event);\n        return true;\n    };\n    RowNode.prototype.selectChildNodes = function (newValue, groupSelectsFiltered) {\n        var children = groupSelectsFiltered ? this.childrenAfterFilter : this.childrenAfterGroup;\n        var updatedCount = 0;\n        if (utils_1._.missing(children)) {\n            return;\n        }\n        for (var i = 0; i < children.length; i++) {\n            updatedCount += children[i].setSelectedParams({\n                newValue: newValue,\n                clearSelection: false,\n                suppressFinishActions: true,\n                groupSelectsFiltered: groupSelectsFiltered\n            });\n        }\n        return updatedCount;\n    };\n    RowNode.prototype.addEventListener = function (eventType, listener) {\n        if (!this.eventService) {\n            this.eventService = new eventService_1.EventService();\n        }\n        this.eventService.addEventListener(eventType, listener);\n    };\n    RowNode.prototype.removeEventListener = function (eventType, listener) {\n        this.eventService.removeEventListener(eventType, listener);\n    };\n    RowNode.prototype.onMouseEnter = function () {\n        this.dispatchLocalEvent(this.createLocalRowEvent(RowNode.EVENT_MOUSE_ENTER));\n    };\n    RowNode.prototype.onMouseLeave = function () {\n        this.dispatchLocalEvent(this.createLocalRowEvent(RowNode.EVENT_MOUSE_LEAVE));\n    };\n    RowNode.prototype.getFirstChildOfFirstChild = function (rowGroupColumn) {\n        var currentRowNode = this;\n        // if we are hiding groups, then if we are the first child, of the first child,\n        // all the way up to the column we are interested in, then we show the group cell.\n        var isCandidate = true;\n        var foundFirstChildPath = false;\n        var nodeToSwapIn;\n        while (isCandidate && !foundFirstChildPath) {\n            var parentRowNode = currentRowNode.parent;\n            var firstChild = utils_1._.exists(parentRowNode) && currentRowNode.firstChild;\n            if (firstChild) {\n                if (parentRowNode.rowGroupColumn === rowGroupColumn) {\n                    foundFirstChildPath = true;\n                    nodeToSwapIn = parentRowNode;\n                }\n            }\n            else {\n                isCandidate = false;\n            }\n            currentRowNode = parentRowNode;\n        }\n        return foundFirstChildPath ? nodeToSwapIn : null;\n    };\n    RowNode.OBJECT_ID_SEQUENCE = 0;\n    RowNode.EVENT_ROW_SELECTED = 'rowSelected';\n    RowNode.EVENT_DATA_CHANGED = 'dataChanged';\n    RowNode.EVENT_CELL_CHANGED = 'cellChanged';\n    RowNode.EVENT_ALL_CHILDREN_COUNT_CHANGED = 'allChildrenCountChanged';\n    RowNode.EVENT_MOUSE_ENTER = 'mouseEnter';\n    RowNode.EVENT_MOUSE_LEAVE = 'mouseLeave';\n    RowNode.EVENT_HEIGHT_CHANGED = 'heightChanged';\n    RowNode.EVENT_TOP_CHANGED = 'topChanged';\n    RowNode.EVENT_FIRST_CHILD_CHANGED = 'firstChildChanged';\n    RowNode.EVENT_LAST_CHILD_CHANGED = 'lastChildChanged';\n    RowNode.EVENT_CHILD_INDEX_CHANGED = 'childIndexChanged';\n    RowNode.EVENT_ROW_INDEX_CHANGED = 'rowIndexChanged';\n    RowNode.EVENT_EXPANDED_CHANGED = 'expandedChanged';\n    RowNode.EVENT_SELECTABLE_CHANGED = 'selectableChanged';\n    RowNode.EVENT_UI_LEVEL_CHANGED = 'uiLevelChanged';\n    RowNode.EVENT_DRAGGING_CHANGED = 'draggingChanged';\n    __decorate([\n        context_1.Autowired('eventService'),\n        __metadata(\"design:type\", eventService_1.EventService)\n    ], RowNode.prototype, \"mainEventService\", void 0);\n    __decorate([\n        context_1.Autowired('gridOptionsWrapper'),\n        __metadata(\"design:type\", gridOptionsWrapper_1.GridOptionsWrapper)\n    ], RowNode.prototype, \"gridOptionsWrapper\", void 0);\n    __decorate([\n        context_1.Autowired('selectionController'),\n        __metadata(\"design:type\", selectionController_1.SelectionController)\n    ], RowNode.prototype, \"selectionController\", void 0);\n    __decorate([\n        context_1.Autowired('columnController'),\n        __metadata(\"design:type\", columnController_1.ColumnController)\n    ], RowNode.prototype, \"columnController\", void 0);\n    __decorate([\n        context_1.Autowired('valueService'),\n        __metadata(\"design:type\", valueService_1.ValueService)\n    ], RowNode.prototype, \"valueService\", void 0);\n    __decorate([\n        context_1.Autowired('rowModel'),\n        __metadata(\"design:type\", Object)\n    ], RowNode.prototype, \"rowModel\", void 0);\n    __decorate([\n        context_1.Autowired('context'),\n        __metadata(\"design:type\", context_1.Context)\n    ], RowNode.prototype, \"context\", void 0);\n    __decorate([\n        context_1.Autowired('valueCache'),\n        __metadata(\"design:type\", valueCache_1.ValueCache)\n    ], RowNode.prototype, \"valueCache\", void 0);\n    __decorate([\n        context_1.Autowired('columnApi'),\n        __metadata(\"design:type\", columnApi_1.ColumnApi)\n    ], RowNode.prototype, \"columnApi\", void 0);\n    __decorate([\n        context_1.Autowired('gridApi'),\n        __metadata(\"design:type\", gridApi_1.GridApi)\n    ], RowNode.prototype, \"gridApi\", void 0);\n    return RowNode;\n}());\nexports.RowNode = RowNode;\n"]},"metadata":{},"sourceType":"script"}