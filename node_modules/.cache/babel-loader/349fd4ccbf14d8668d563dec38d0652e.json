{"ast":null,"code":"/**\n * @module ol/dom\n */\n\n/**\n * Create an html canvas element and returns its 2d context.\n * @param {number=} opt_width Canvas width.\n * @param {number=} opt_height Canvas height.\n * @return {CanvasRenderingContext2D} The context.\n */\nexport function createCanvasContext2D(opt_width, opt_height) {\n  var canvas =\n  /** @type {HTMLCanvasElement} */\n  document.createElement('canvas');\n\n  if (opt_width) {\n    canvas.width = opt_width;\n  }\n\n  if (opt_height) {\n    canvas.height = opt_height;\n  }\n\n  return (\n    /** @type {CanvasRenderingContext2D} */\n    canvas.getContext('2d')\n  );\n}\n/**\n * Get the current computed width for the given element including margin,\n * padding and border.\n * Equivalent to jQuery's `$(el).outerWidth(true)`.\n * @param {!HTMLElement} element Element.\n * @return {number} The width.\n */\n\nexport function outerWidth(element) {\n  var width = element.offsetWidth;\n  var style = getComputedStyle(element);\n  width += parseInt(style.marginLeft, 10) + parseInt(style.marginRight, 10);\n  return width;\n}\n/**\n * Get the current computed height for the given element including margin,\n * padding and border.\n * Equivalent to jQuery's `$(el).outerHeight(true)`.\n * @param {!HTMLElement} element Element.\n * @return {number} The height.\n */\n\nexport function outerHeight(element) {\n  var height = element.offsetHeight;\n  var style = getComputedStyle(element);\n  height += parseInt(style.marginTop, 10) + parseInt(style.marginBottom, 10);\n  return height;\n}\n/**\n * @param {Node} newNode Node to replace old node\n * @param {Node} oldNode The node to be replaced\n */\n\nexport function replaceNode(newNode, oldNode) {\n  var parent = oldNode.parentNode;\n\n  if (parent) {\n    parent.replaceChild(newNode, oldNode);\n  }\n}\n/**\n * @param {Node} node The node to remove.\n * @returns {Node} The node that was removed or null.\n */\n\nexport function removeNode(node) {\n  return node && node.parentNode ? node.parentNode.removeChild(node) : null;\n}\n/**\n * @param {Node} node The node to remove the children from.\n */\n\nexport function removeChildren(node) {\n  while (node.lastChild) {\n    node.removeChild(node.lastChild);\n  }\n}","map":{"version":3,"sources":["../../src/ol/dom.js"],"names":["const","let"],"mappings":"AAAA;;;;;;;;;;AAWA,OAAO,SAAS,qBAAT,CAA+B,SAA/B,EAA0C,UAA1C,EAAsD;AAC3DA,MAAM,MAAM;AAAA;AAAqC,EAAA,QAAQ,CAAC,aAAT,CAAuB,QAAvB,CAAjDA;;AACA,MAAI,SAAJ,EAAe;AACb,IAAA,MAAM,CAAC,KAAP,GAAe,SAAf;AACD;;AACD,MAAI,UAAJ,EAAgB;AACd,IAAA,MAAM,CAAC,MAAP,GAAgB,UAAhB;AACD;;AACD;AAAA;AAAgD,IAAA,MAAM,CAAC,UAAP,CAAkB,IAAlB;AAAhD;AACD;;;;;;;;;AAUD,OAAO,SAAS,UAAT,CAAoB,OAApB,EAA6B;AAClCC,MAAI,KAAK,GAAG,OAAO,CAAC,WAApBA;AACAD,MAAM,KAAK,GAAG,gBAAgB,CAAC,OAAD,CAA9BA;AACA,EAAA,KAAK,IAAI,QAAQ,CAAC,KAAK,CAAC,UAAP,EAAmB,EAAnB,CAAR,GAAiC,QAAQ,CAAC,KAAK,CAAC,WAAP,EAAoB,EAApB,CAAlD;AAEA,SAAO,KAAP;AACD;;;;;;;;;AAUD,OAAO,SAAS,WAAT,CAAqB,OAArB,EAA8B;AACnCC,MAAI,MAAM,GAAG,OAAO,CAAC,YAArBA;AACAD,MAAM,KAAK,GAAG,gBAAgB,CAAC,OAAD,CAA9BA;AACA,EAAA,MAAM,IAAI,QAAQ,CAAC,KAAK,CAAC,SAAP,EAAkB,EAAlB,CAAR,GAAgC,QAAQ,CAAC,KAAK,CAAC,YAAP,EAAqB,EAArB,CAAlD;AAEA,SAAO,MAAP;AACD;;;;;;AAMD,OAAO,SAAS,WAAT,CAAqB,OAArB,EAA8B,OAA9B,EAAuC;AAC5CA,MAAM,MAAM,GAAG,OAAO,CAAC,UAAvBA;;AACA,MAAI,MAAJ,EAAY;AACV,IAAA,MAAM,CAAC,YAAP,CAAoB,OAApB,EAA6B,OAA7B;AACD;AACF;;;;;;AAMD,OAAO,SAAS,UAAT,CAAoB,IAApB,EAA0B;AAC/B,SAAO,IAAI,IAAI,IAAI,CAAC,UAAb,GAA0B,IAAI,CAAC,UAAL,CAAgB,WAAhB,CAA4B,IAA5B,CAA1B,GAA8D,IAArE;AACD;;;;;AAKD,OAAO,SAAS,cAAT,CAAwB,IAAxB,EAA8B;AACnC,SAAO,IAAI,CAAC,SAAZ,EAAuB;AACrB,IAAA,IAAI,CAAC,WAAL,CAAiB,IAAI,CAAC,SAAtB;AACD;AACF","sourcesContent":["/**\n * @module ol/dom\n */\n\n\n/**\n * Create an html canvas element and returns its 2d context.\n * @param {number=} opt_width Canvas width.\n * @param {number=} opt_height Canvas height.\n * @return {CanvasRenderingContext2D} The context.\n */\nexport function createCanvasContext2D(opt_width, opt_height) {\n  const canvas = /** @type {HTMLCanvasElement} */ (document.createElement('canvas'));\n  if (opt_width) {\n    canvas.width = opt_width;\n  }\n  if (opt_height) {\n    canvas.height = opt_height;\n  }\n  return /** @type {CanvasRenderingContext2D} */ (canvas.getContext('2d'));\n}\n\n\n/**\n * Get the current computed width for the given element including margin,\n * padding and border.\n * Equivalent to jQuery's `$(el).outerWidth(true)`.\n * @param {!HTMLElement} element Element.\n * @return {number} The width.\n */\nexport function outerWidth(element) {\n  let width = element.offsetWidth;\n  const style = getComputedStyle(element);\n  width += parseInt(style.marginLeft, 10) + parseInt(style.marginRight, 10);\n\n  return width;\n}\n\n\n/**\n * Get the current computed height for the given element including margin,\n * padding and border.\n * Equivalent to jQuery's `$(el).outerHeight(true)`.\n * @param {!HTMLElement} element Element.\n * @return {number} The height.\n */\nexport function outerHeight(element) {\n  let height = element.offsetHeight;\n  const style = getComputedStyle(element);\n  height += parseInt(style.marginTop, 10) + parseInt(style.marginBottom, 10);\n\n  return height;\n}\n\n/**\n * @param {Node} newNode Node to replace old node\n * @param {Node} oldNode The node to be replaced\n */\nexport function replaceNode(newNode, oldNode) {\n  const parent = oldNode.parentNode;\n  if (parent) {\n    parent.replaceChild(newNode, oldNode);\n  }\n}\n\n/**\n * @param {Node} node The node to remove.\n * @returns {Node} The node that was removed or null.\n */\nexport function removeNode(node) {\n  return node && node.parentNode ? node.parentNode.removeChild(node) : null;\n}\n\n/**\n * @param {Node} node The node to remove the children from.\n */\nexport function removeChildren(node) {\n  while (node.lastChild) {\n    node.removeChild(node.lastChild);\n  }\n}\n"]},"metadata":{},"sourceType":"module"}