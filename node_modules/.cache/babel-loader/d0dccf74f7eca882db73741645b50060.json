{"ast":null,"code":"/**\n * @module ol/ImageTile\n */\nimport { inherits } from './util.js';\nimport Tile from './Tile.js';\nimport TileState from './TileState.js';\nimport { createCanvasContext2D } from './dom.js';\nimport { listenOnce, unlistenByKey } from './events.js';\nimport EventType from './events/EventType.js';\n/**\n * @typedef {function(new: module:ol/ImageTile, module:ol/tilecoord~TileCoord,\n * module:ol/TileState, string, ?string, module:ol/Tile~LoadFunction)} TileClass\n * @api\n */\n\n/**\n * @constructor\n * @extends {module:ol/Tile}\n * @param {module:ol/tilecoord~TileCoord} tileCoord Tile coordinate.\n * @param {module:ol/TileState} state State.\n * @param {string} src Image source URI.\n * @param {?string} crossOrigin Cross origin.\n * @param {module:ol/Tile~LoadFunction} tileLoadFunction Tile load function.\n * @param {module:ol/Tile~Options=} opt_options Tile options.\n */\n\nconst ImageTile = function (tileCoord, state, src, crossOrigin, tileLoadFunction, opt_options) {\n  Tile.call(this, tileCoord, state, opt_options);\n  /**\n   * @private\n   * @type {?string}\n   */\n\n  this.crossOrigin_ = crossOrigin;\n  /**\n   * Image URI\n   *\n   * @private\n   * @type {string}\n   */\n\n  this.src_ = src;\n  /**\n   * @private\n   * @type {Image|HTMLCanvasElement}\n   */\n\n  this.image_ = new Image();\n\n  if (crossOrigin !== null) {\n    this.image_.crossOrigin = crossOrigin;\n  }\n  /**\n   * @private\n   * @type {Array.<module:ol/events~EventsKey>}\n   */\n\n\n  this.imageListenerKeys_ = null;\n  /**\n   * @private\n   * @type {module:ol/Tile~LoadFunction}\n   */\n\n  this.tileLoadFunction_ = tileLoadFunction;\n};\n\ninherits(ImageTile, Tile);\n/**\n * @inheritDoc\n */\n\nImageTile.prototype.disposeInternal = function () {\n  if (this.state == TileState.LOADING) {\n    this.unlistenImage_();\n    this.image_ = getBlankImage();\n  }\n\n  if (this.interimTile) {\n    this.interimTile.dispose();\n  }\n\n  this.state = TileState.ABORT;\n  this.changed();\n  Tile.prototype.disposeInternal.call(this);\n};\n/**\n * Get the HTML image element for this tile (may be a Canvas, Image, or Video).\n * @return {HTMLCanvasElement|HTMLImageElement|HTMLVideoElement} Image.\n * @api\n */\n\n\nImageTile.prototype.getImage = function () {\n  return this.image_;\n};\n/**\n * @inheritDoc\n */\n\n\nImageTile.prototype.getKey = function () {\n  return this.src_;\n};\n/**\n * Tracks loading or read errors.\n *\n * @private\n */\n\n\nImageTile.prototype.handleImageError_ = function () {\n  this.state = TileState.ERROR;\n  this.unlistenImage_();\n  this.image_ = getBlankImage();\n  this.changed();\n};\n/**\n * Tracks successful image load.\n *\n * @private\n */\n\n\nImageTile.prototype.handleImageLoad_ = function () {\n  if (this.image_.naturalWidth && this.image_.naturalHeight) {\n    this.state = TileState.LOADED;\n  } else {\n    this.state = TileState.EMPTY;\n  }\n\n  this.unlistenImage_();\n  this.changed();\n};\n/**\n * @inheritDoc\n * @api\n */\n\n\nImageTile.prototype.load = function () {\n  if (this.state == TileState.ERROR) {\n    this.state = TileState.IDLE;\n    this.image_ = new Image();\n\n    if (this.crossOrigin_ !== null) {\n      this.image_.crossOrigin = this.crossOrigin_;\n    }\n  }\n\n  if (this.state == TileState.IDLE) {\n    this.state = TileState.LOADING;\n    this.changed();\n    this.imageListenerKeys_ = [listenOnce(this.image_, EventType.ERROR, this.handleImageError_, this), listenOnce(this.image_, EventType.LOAD, this.handleImageLoad_, this)];\n    this.tileLoadFunction_(this, this.src_);\n  }\n};\n/**\n * Discards event handlers which listen for load completion or errors.\n *\n * @private\n */\n\n\nImageTile.prototype.unlistenImage_ = function () {\n  this.imageListenerKeys_.forEach(unlistenByKey);\n  this.imageListenerKeys_ = null;\n};\n/**\n * Get a 1-pixel blank image.\n * @return {HTMLCanvasElement} Blank image.\n */\n\n\nfunction getBlankImage() {\n  const ctx = createCanvasContext2D(1, 1);\n  ctx.fillStyle = 'rgba(0,0,0,0)';\n  ctx.fillRect(0, 0, 1, 1);\n  return ctx.canvas;\n}\n\nexport default ImageTile;","map":null,"metadata":{},"sourceType":"module"}