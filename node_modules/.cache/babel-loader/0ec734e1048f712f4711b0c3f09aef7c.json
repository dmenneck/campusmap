{"ast":null,"code":"/**\n * @module ol/structs/RBush\n */\nimport { getUid } from '../util.js';\nimport rbush from 'rbush';\nimport { createOrUpdate, equals } from '../extent.js';\nimport { isEmpty } from '../obj.js';\n/**\n * @typedef {Object} Entry\n * @property {number} minX\n * @property {number} minY\n * @property {number} maxX\n * @property {number} maxY\n * @property {Object} [value]\n */\n\n/**\n * @classdesc\n * Wrapper around the RBush by Vladimir Agafonkin.\n * See https://github.com/mourner/rbush.\n *\n * @template T\n */\n\nvar RBush = function RBush(opt_maxEntries) {\n  /**\n   * @private\n   */\n  this.rbush_ = rbush(opt_maxEntries, undefined);\n  /**\n   * A mapping between the objects added to this rbush wrapper\n   * and the objects that are actually added to the internal rbush.\n   * @private\n   * @type {Object<string, Entry>}\n   */\n\n  this.items_ = {};\n};\n/**\n * Insert a value into the RBush.\n * @param {import(\"../extent.js\").Extent} extent Extent.\n * @param {T} value Value.\n */\n\n\nRBush.prototype.insert = function insert(extent, value) {\n  /** @type {Entry} */\n  var item = {\n    minX: extent[0],\n    minY: extent[1],\n    maxX: extent[2],\n    maxY: extent[3],\n    value: value\n  };\n  this.rbush_.insert(item);\n  this.items_[getUid(value)] = item;\n};\n/**\n * Bulk-insert values into the RBush.\n * @param {Array<import(\"../extent.js\").Extent>} extents Extents.\n * @param {Array<T>} values Values.\n */\n\n\nRBush.prototype.load = function load(extents, values) {\n  var items = new Array(values.length);\n\n  for (var i = 0, l = values.length; i < l; i++) {\n    var extent = extents[i];\n    var value = values[i];\n    /** @type {Entry} */\n\n    var item = {\n      minX: extent[0],\n      minY: extent[1],\n      maxX: extent[2],\n      maxY: extent[3],\n      value: value\n    };\n    items[i] = item;\n    this.items_[getUid(value)] = item;\n  }\n\n  this.rbush_.load(items);\n};\n/**\n * Remove a value from the RBush.\n * @param {T} value Value.\n * @return {boolean} Removed.\n */\n\n\nRBush.prototype.remove = function remove(value) {\n  var uid = getUid(value); // get the object in which the value was wrapped when adding to the\n  // internal rbush. then use that object to do the removal.\n\n  var item = this.items_[uid];\n  delete this.items_[uid];\n  return this.rbush_.remove(item) !== null;\n};\n/**\n * Update the extent of a value in the RBush.\n * @param {import(\"../extent.js\").Extent} extent Extent.\n * @param {T} value Value.\n */\n\n\nRBush.prototype.update = function update(extent, value) {\n  var item = this.items_[getUid(value)];\n  var bbox = [item.minX, item.minY, item.maxX, item.maxY];\n\n  if (!equals(bbox, extent)) {\n    this.remove(value);\n    this.insert(extent, value);\n  }\n};\n/**\n * Return all values in the RBush.\n * @return {Array<T>} All.\n */\n\n\nRBush.prototype.getAll = function getAll() {\n  var items = this.rbush_.all();\n  return items.map(function (item) {\n    return item.value;\n  });\n};\n/**\n * Return all values in the given extent.\n * @param {import(\"../extent.js\").Extent} extent Extent.\n * @return {Array<T>} All in extent.\n */\n\n\nRBush.prototype.getInExtent = function getInExtent(extent) {\n  /** @type {Entry} */\n  var bbox = {\n    minX: extent[0],\n    minY: extent[1],\n    maxX: extent[2],\n    maxY: extent[3]\n  };\n  var items = this.rbush_.search(bbox);\n  return items.map(function (item) {\n    return item.value;\n  });\n};\n/**\n * Calls a callback function with each value in the tree.\n * If the callback returns a truthy value, this value is returned without\n * checking the rest of the tree.\n * @param {function(this: S, T): *} callback Callback.\n * @param {S=} opt_this The object to use as `this` in `callback`.\n * @return {*} Callback return value.\n * @template S\n */\n\n\nRBush.prototype.forEach = function forEach(callback, opt_this) {\n  return this.forEach_(this.getAll(), callback, opt_this);\n};\n/**\n * Calls a callback function with each value in the provided extent.\n * @param {import(\"../extent.js\").Extent} extent Extent.\n * @param {function(this: S, T): *} callback Callback.\n * @param {S=} opt_this The object to use as `this` in `callback`.\n * @return {*} Callback return value.\n * @template S\n */\n\n\nRBush.prototype.forEachInExtent = function forEachInExtent(extent, callback, opt_this) {\n  return this.forEach_(this.getInExtent(extent), callback, opt_this);\n};\n/**\n * @param {Array<T>} values Values.\n * @param {function(this: S, T): *} callback Callback.\n * @param {S=} opt_this The object to use as `this` in `callback`.\n * @private\n * @return {*} Callback return value.\n * @template S\n */\n\n\nRBush.prototype.forEach_ = function forEach_(values, callback, opt_this) {\n  var result;\n\n  for (var i = 0, l = values.length; i < l; i++) {\n    result = callback.call(opt_this, values[i]);\n\n    if (result) {\n      return result;\n    }\n  }\n\n  return result;\n};\n/**\n * @return {boolean} Is empty.\n */\n\n\nRBush.prototype.isEmpty = function isEmpty$1() {\n  return isEmpty(this.items_);\n};\n/**\n * Remove all values from the RBush.\n */\n\n\nRBush.prototype.clear = function clear() {\n  this.rbush_.clear();\n  this.items_ = {};\n};\n/**\n * @param {import(\"../extent.js\").Extent=} opt_extent Extent.\n * @return {import(\"../extent.js\").Extent} Extent.\n */\n\n\nRBush.prototype.getExtent = function getExtent(opt_extent) {\n  var data = this.rbush_.toJSON();\n  return createOrUpdate(data.minX, data.minY, data.maxX, data.maxY, opt_extent);\n};\n/**\n * @param {RBush} rbush R-Tree.\n */\n\n\nRBush.prototype.concat = function concat(rbush) {\n  this.rbush_.load(rbush.rbush_.all());\n\n  for (var i in rbush.items_) {\n    this.items_[i] = rbush.items_[i];\n  }\n};\n\nexport default RBush;","map":{"version":3,"sources":["../../../src/ol/structs/RBush.js"],"names":["const","let"],"mappings":"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","sourcesContent":["/**\n * @module ol/structs/RBush\n */\nimport {getUid} from '../util.js';\nimport rbush from 'rbush';\nimport {createOrUpdate, equals} from '../extent.js';\nimport {isEmpty} from '../obj.js';\n\n/**\n * @typedef {Object} Entry\n * @property {number} minX\n * @property {number} minY\n * @property {number} maxX\n * @property {number} maxY\n * @property {Object} [value]\n */\n\n/**\n * @classdesc\n * Wrapper around the RBush by Vladimir Agafonkin.\n * See https://github.com/mourner/rbush.\n *\n * @template T\n */\nclass RBush {\n  /**\n   * @param {number=} opt_maxEntries Max entries.\n   */\n  constructor(opt_maxEntries) {\n\n    /**\n     * @private\n     */\n    this.rbush_ = rbush(opt_maxEntries, undefined);\n\n    /**\n     * A mapping between the objects added to this rbush wrapper\n     * and the objects that are actually added to the internal rbush.\n     * @private\n     * @type {Object<string, Entry>}\n     */\n    this.items_ = {};\n\n  }\n\n  /**\n   * Insert a value into the RBush.\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @param {T} value Value.\n   */\n  insert(extent, value) {\n    /** @type {Entry} */\n    const item = {\n      minX: extent[0],\n      minY: extent[1],\n      maxX: extent[2],\n      maxY: extent[3],\n      value: value\n    };\n\n    this.rbush_.insert(item);\n    this.items_[getUid(value)] = item;\n  }\n\n\n  /**\n   * Bulk-insert values into the RBush.\n   * @param {Array<import(\"../extent.js\").Extent>} extents Extents.\n   * @param {Array<T>} values Values.\n   */\n  load(extents, values) {\n    const items = new Array(values.length);\n    for (let i = 0, l = values.length; i < l; i++) {\n      const extent = extents[i];\n      const value = values[i];\n\n      /** @type {Entry} */\n      const item = {\n        minX: extent[0],\n        minY: extent[1],\n        maxX: extent[2],\n        maxY: extent[3],\n        value: value\n      };\n      items[i] = item;\n      this.items_[getUid(value)] = item;\n    }\n    this.rbush_.load(items);\n  }\n\n\n  /**\n   * Remove a value from the RBush.\n   * @param {T} value Value.\n   * @return {boolean} Removed.\n   */\n  remove(value) {\n    const uid = getUid(value);\n\n    // get the object in which the value was wrapped when adding to the\n    // internal rbush. then use that object to do the removal.\n    const item = this.items_[uid];\n    delete this.items_[uid];\n    return this.rbush_.remove(item) !== null;\n  }\n\n\n  /**\n   * Update the extent of a value in the RBush.\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @param {T} value Value.\n   */\n  update(extent, value) {\n    const item = this.items_[getUid(value)];\n    const bbox = [item.minX, item.minY, item.maxX, item.maxY];\n    if (!equals(bbox, extent)) {\n      this.remove(value);\n      this.insert(extent, value);\n    }\n  }\n\n\n  /**\n   * Return all values in the RBush.\n   * @return {Array<T>} All.\n   */\n  getAll() {\n    const items = this.rbush_.all();\n    return items.map(function(item) {\n      return item.value;\n    });\n  }\n\n\n  /**\n   * Return all values in the given extent.\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @return {Array<T>} All in extent.\n   */\n  getInExtent(extent) {\n    /** @type {Entry} */\n    const bbox = {\n      minX: extent[0],\n      minY: extent[1],\n      maxX: extent[2],\n      maxY: extent[3]\n    };\n    const items = this.rbush_.search(bbox);\n    return items.map(function(item) {\n      return item.value;\n    });\n  }\n\n\n  /**\n   * Calls a callback function with each value in the tree.\n   * If the callback returns a truthy value, this value is returned without\n   * checking the rest of the tree.\n   * @param {function(this: S, T): *} callback Callback.\n   * @param {S=} opt_this The object to use as `this` in `callback`.\n   * @return {*} Callback return value.\n   * @template S\n   */\n  forEach(callback, opt_this) {\n    return this.forEach_(this.getAll(), callback, opt_this);\n  }\n\n\n  /**\n   * Calls a callback function with each value in the provided extent.\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @param {function(this: S, T): *} callback Callback.\n   * @param {S=} opt_this The object to use as `this` in `callback`.\n   * @return {*} Callback return value.\n   * @template S\n   */\n  forEachInExtent(extent, callback, opt_this) {\n    return this.forEach_(this.getInExtent(extent), callback, opt_this);\n  }\n\n\n  /**\n   * @param {Array<T>} values Values.\n   * @param {function(this: S, T): *} callback Callback.\n   * @param {S=} opt_this The object to use as `this` in `callback`.\n   * @private\n   * @return {*} Callback return value.\n   * @template S\n   */\n  forEach_(values, callback, opt_this) {\n    let result;\n    for (let i = 0, l = values.length; i < l; i++) {\n      result = callback.call(opt_this, values[i]);\n      if (result) {\n        return result;\n      }\n    }\n    return result;\n  }\n\n\n  /**\n   * @return {boolean} Is empty.\n   */\n  isEmpty() {\n    return isEmpty(this.items_);\n  }\n\n\n  /**\n   * Remove all values from the RBush.\n   */\n  clear() {\n    this.rbush_.clear();\n    this.items_ = {};\n  }\n\n\n  /**\n   * @param {import(\"../extent.js\").Extent=} opt_extent Extent.\n   * @return {import(\"../extent.js\").Extent} Extent.\n   */\n  getExtent(opt_extent) {\n    const data = this.rbush_.toJSON();\n    return createOrUpdate(data.minX, data.minY, data.maxX, data.maxY, opt_extent);\n  }\n\n\n  /**\n   * @param {RBush} rbush R-Tree.\n   */\n  concat(rbush) {\n    this.rbush_.load(rbush.rbush_.all());\n    for (const i in rbush.items_) {\n      this.items_[i] = rbush.items_[i];\n    }\n  }\n\n}\n\n\nexport default RBush;\n"]},"metadata":{},"sourceType":"module"}