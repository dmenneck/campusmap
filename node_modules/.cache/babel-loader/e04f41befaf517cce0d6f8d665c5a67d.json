{"ast":null,"code":"/**\n * @module ol/source/Stamen\n */\nimport { ATTRIBUTION as OSM_ATTRIBUTION } from './OSM.js';\nimport XYZ from './XYZ.js';\n/**\n * @const\n * @type {Array<string>}\n */\n\nvar ATTRIBUTIONS = ['Map tiles by <a href=\"https://stamen.com/\">Stamen Design</a>, ' + 'under <a href=\"https://creativecommons.org/licenses/by/3.0/\">CC BY' + ' 3.0</a>.', OSM_ATTRIBUTION];\n/**\n * @type {Object<string, {extension: string, opaque: boolean}>}\n */\n\nvar LayerConfig = {\n  'terrain': {\n    extension: 'jpg',\n    opaque: true\n  },\n  'terrain-background': {\n    extension: 'jpg',\n    opaque: true\n  },\n  'terrain-labels': {\n    extension: 'png',\n    opaque: false\n  },\n  'terrain-lines': {\n    extension: 'png',\n    opaque: false\n  },\n  'toner-background': {\n    extension: 'png',\n    opaque: true\n  },\n  'toner': {\n    extension: 'png',\n    opaque: true\n  },\n  'toner-hybrid': {\n    extension: 'png',\n    opaque: false\n  },\n  'toner-labels': {\n    extension: 'png',\n    opaque: false\n  },\n  'toner-lines': {\n    extension: 'png',\n    opaque: false\n  },\n  'toner-lite': {\n    extension: 'png',\n    opaque: true\n  },\n  'watercolor': {\n    extension: 'jpg',\n    opaque: true\n  }\n};\n/**\n * @type {Object<string, {minZoom: number, maxZoom: number}>}\n */\n\nvar ProviderConfig = {\n  'terrain': {\n    minZoom: 4,\n    maxZoom: 18\n  },\n  'toner': {\n    minZoom: 0,\n    maxZoom: 20\n  },\n  'watercolor': {\n    minZoom: 1,\n    maxZoom: 16\n  }\n};\n/**\n * @typedef {Object} Options\n * @property {number} [cacheSize=2048] Cache size.\n * @property {string} layer Layer name.\n * @property {number} [minZoom] Minimum zoom.\n * @property {number} [maxZoom] Maximum zoom.\n * @property {number} [reprojectionErrorThreshold=0.5] Maximum allowed reprojection error (in pixels).\n * Higher values can increase reprojection performance, but decrease precision.\n * @property {import(\"../Tile.js\").LoadFunction} [tileLoadFunction]\n * Optional function to load a tile given a URL. The default is\n * ```js\n * function(imageTile, src) {\n *   imageTile.getImage().src = src;\n * };\n * ```\n * @property {string} [url] URL template. Must include `{x}`, `{y}` or `{-y}`, and `{z}` placeholders.\n * @property {boolean} [wrapX=true] Whether to wrap the world horizontally.\n */\n\n/**\n * @classdesc\n * Layer source for the Stamen tile server.\n * @api\n */\n\nvar Stamen =\n/*@__PURE__*/\nfunction (XYZ) {\n  function Stamen(options) {\n    var i = options.layer.indexOf('-');\n    var provider = i == -1 ? options.layer : options.layer.slice(0, i);\n    var providerConfig = ProviderConfig[provider];\n    var layerConfig = LayerConfig[options.layer];\n    var url = options.url !== undefined ? options.url : 'https://stamen-tiles-{a-d}.a.ssl.fastly.net/' + options.layer + '/{z}/{x}/{y}.' + layerConfig.extension;\n    XYZ.call(this, {\n      attributions: ATTRIBUTIONS,\n      cacheSize: options.cacheSize,\n      crossOrigin: 'anonymous',\n      maxZoom: options.maxZoom != undefined ? options.maxZoom : providerConfig.maxZoom,\n      minZoom: options.minZoom != undefined ? options.minZoom : providerConfig.minZoom,\n      opaque: layerConfig.opaque,\n      reprojectionErrorThreshold: options.reprojectionErrorThreshold,\n      tileLoadFunction: options.tileLoadFunction,\n      url: url,\n      wrapX: options.wrapX\n    });\n  }\n\n  if (XYZ) Stamen.__proto__ = XYZ;\n  Stamen.prototype = Object.create(XYZ && XYZ.prototype);\n  Stamen.prototype.constructor = Stamen;\n  return Stamen;\n}(XYZ);\n\nexport default Stamen;","map":{"version":3,"sources":["../../../src/ol/source/Stamen.js"],"names":["const","super"],"mappings":"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","sourcesContent":["/**\n * @module ol/source/Stamen\n */\n\nimport {ATTRIBUTION as OSM_ATTRIBUTION} from './OSM.js';\nimport XYZ from './XYZ.js';\n\n\n/**\n * @const\n * @type {Array<string>}\n */\nconst ATTRIBUTIONS = [\n  'Map tiles by <a href=\"https://stamen.com/\">Stamen Design</a>, ' +\n        'under <a href=\"https://creativecommons.org/licenses/by/3.0/\">CC BY' +\n        ' 3.0</a>.',\n  OSM_ATTRIBUTION\n];\n\n\n/**\n * @type {Object<string, {extension: string, opaque: boolean}>}\n */\nconst LayerConfig = {\n  'terrain': {\n    extension: 'jpg',\n    opaque: true\n  },\n  'terrain-background': {\n    extension: 'jpg',\n    opaque: true\n  },\n  'terrain-labels': {\n    extension: 'png',\n    opaque: false\n  },\n  'terrain-lines': {\n    extension: 'png',\n    opaque: false\n  },\n  'toner-background': {\n    extension: 'png',\n    opaque: true\n  },\n  'toner': {\n    extension: 'png',\n    opaque: true\n  },\n  'toner-hybrid': {\n    extension: 'png',\n    opaque: false\n  },\n  'toner-labels': {\n    extension: 'png',\n    opaque: false\n  },\n  'toner-lines': {\n    extension: 'png',\n    opaque: false\n  },\n  'toner-lite': {\n    extension: 'png',\n    opaque: true\n  },\n  'watercolor': {\n    extension: 'jpg',\n    opaque: true\n  }\n};\n\n\n/**\n * @type {Object<string, {minZoom: number, maxZoom: number}>}\n */\nconst ProviderConfig = {\n  'terrain': {\n    minZoom: 4,\n    maxZoom: 18\n  },\n  'toner': {\n    minZoom: 0,\n    maxZoom: 20\n  },\n  'watercolor': {\n    minZoom: 1,\n    maxZoom: 16\n  }\n};\n\n\n/**\n * @typedef {Object} Options\n * @property {number} [cacheSize=2048] Cache size.\n * @property {string} layer Layer name.\n * @property {number} [minZoom] Minimum zoom.\n * @property {number} [maxZoom] Maximum zoom.\n * @property {number} [reprojectionErrorThreshold=0.5] Maximum allowed reprojection error (in pixels).\n * Higher values can increase reprojection performance, but decrease precision.\n * @property {import(\"../Tile.js\").LoadFunction} [tileLoadFunction]\n * Optional function to load a tile given a URL. The default is\n * ```js\n * function(imageTile, src) {\n *   imageTile.getImage().src = src;\n * };\n * ```\n * @property {string} [url] URL template. Must include `{x}`, `{y}` or `{-y}`, and `{z}` placeholders.\n * @property {boolean} [wrapX=true] Whether to wrap the world horizontally.\n */\n\n\n/**\n * @classdesc\n * Layer source for the Stamen tile server.\n * @api\n */\nclass Stamen extends XYZ {\n  /**\n   * @param {Options} options Stamen options.\n   */\n  constructor(options) {\n    const i = options.layer.indexOf('-');\n    const provider = i == -1 ? options.layer : options.layer.slice(0, i);\n    const providerConfig = ProviderConfig[provider];\n\n    const layerConfig = LayerConfig[options.layer];\n\n    const url = options.url !== undefined ? options.url :\n      'https://stamen-tiles-{a-d}.a.ssl.fastly.net/' + options.layer +\n        '/{z}/{x}/{y}.' + layerConfig.extension;\n\n    super({\n      attributions: ATTRIBUTIONS,\n      cacheSize: options.cacheSize,\n      crossOrigin: 'anonymous',\n      maxZoom: options.maxZoom != undefined ? options.maxZoom : providerConfig.maxZoom,\n      minZoom: options.minZoom != undefined ? options.minZoom : providerConfig.minZoom,\n      opaque: layerConfig.opaque,\n      reprojectionErrorThreshold: options.reprojectionErrorThreshold,\n      tileLoadFunction: options.tileLoadFunction,\n      url: url,\n      wrapX: options.wrapX\n    });\n\n  }\n\n}\n\nexport default Stamen;\n"]},"metadata":{},"sourceType":"module"}