{"ast":null,"code":"/**\n * @module ol/layer/Layer\n */\nimport { listen, unlistenByKey } from '../events.js';\nimport EventType from '../events/EventType.js';\nimport { getUid } from '../util.js';\nimport { getChangeEventType } from '../Object.js';\nimport BaseLayer from './Base.js';\nimport LayerProperty from './Property.js';\nimport { assign } from '../obj.js';\nimport RenderEventType from '../render/EventType.js';\nimport SourceState from '../source/State.js';\n/**\n * @typedef {Object} Options\n * @property {number} [opacity=1] Opacity (0, 1).\n * @property {boolean} [visible=true] Visibility.\n * @property {import(\"../extent.js\").Extent} [extent] The bounding extent for layer rendering.  The layer will not be\n * rendered outside of this extent.\n * @property {number} [zIndex] The z-index for layer rendering.  At rendering time, the layers\n * will be ordered, first by Z-index and then by position. When `undefined`, a `zIndex` of 0 is assumed\n * for layers that are added to the map's `layers` collection, or `Infinity` when the layer's `setMap()`\n * method was used.\n * @property {number} [minResolution] The minimum resolution (inclusive) at which this layer will be\n * visible.\n * @property {number} [maxResolution] The maximum resolution (exclusive) below which this layer will\n * be visible.\n * @property {import(\"../source/Source.js\").default} [source] Source for this layer.  If not provided to the constructor,\n * the source can be set by calling {@link module:ol/layer/Layer#setSource layer.setSource(source)} after\n * construction.\n * @property {import(\"../PluggableMap.js\").default} [map] Map.\n */\n\n/**\n * @typedef {Object} State\n * @property {import(\"./Base.js\").default} layer\n * @property {number} opacity\n * @property {SourceState} sourceState\n * @property {boolean} visible\n * @property {boolean} managed\n * @property {import(\"../extent.js\").Extent} [extent]\n * @property {number} zIndex\n * @property {number} maxResolution\n * @property {number} minResolution\n */\n\n/**\n * @classdesc\n * Abstract base class; normally only used for creating subclasses and not\n * instantiated in apps.\n * A visual representation of raster or vector map data.\n * Layers group together those properties that pertain to how the data is to be\n * displayed, irrespective of the source of that data.\n *\n * Layers are usually added to a map with {@link module:ol/Map#addLayer}. Components\n * like {@link module:ol/interaction/Select~Select} use unmanaged layers\n * internally. These unmanaged layers are associated with the map using\n * {@link module:ol/layer/Layer~Layer#setMap} instead.\n *\n * A generic `change` event is fired when the state of the source changes.\n *\n * @fires import(\"../render/Event.js\").RenderEvent\n */\n\nvar Layer =\n/*@__PURE__*/\nfunction (BaseLayer) {\n  function Layer(options) {\n    var baseOptions = assign({}, options);\n    delete baseOptions.source;\n    BaseLayer.call(this, baseOptions);\n    /**\n     * @private\n     * @type {?import(\"../events.js\").EventsKey}\n     */\n\n    this.mapPrecomposeKey_ = null;\n    /**\n     * @private\n     * @type {?import(\"../events.js\").EventsKey}\n     */\n\n    this.mapRenderKey_ = null;\n    /**\n     * @private\n     * @type {?import(\"../events.js\").EventsKey}\n     */\n\n    this.sourceChangeKey_ = null;\n\n    if (options.map) {\n      this.setMap(options.map);\n    }\n\n    listen(this, getChangeEventType(LayerProperty.SOURCE), this.handleSourcePropertyChange_, this);\n    var source = options.source ? options.source : null;\n    this.setSource(source);\n  }\n\n  if (BaseLayer) Layer.__proto__ = BaseLayer;\n  Layer.prototype = Object.create(BaseLayer && BaseLayer.prototype);\n  Layer.prototype.constructor = Layer;\n  /**\n   * @inheritDoc\n   */\n\n  Layer.prototype.getLayersArray = function getLayersArray(opt_array) {\n    var array = opt_array ? opt_array : [];\n    array.push(this);\n    return array;\n  };\n  /**\n   * @inheritDoc\n   */\n\n\n  Layer.prototype.getLayerStatesArray = function getLayerStatesArray(opt_states) {\n    var states = opt_states ? opt_states : [];\n    states.push(this.getLayerState());\n    return states;\n  };\n  /**\n   * Get the layer source.\n   * @return {import(\"../source/Source.js\").default} The layer source (or `null` if not yet set).\n   * @observable\n   * @api\n   */\n\n\n  Layer.prototype.getSource = function getSource() {\n    var source = this.get(LayerProperty.SOURCE);\n    return (\n      /** @type {import(\"../source/Source.js\").default} */\n      source || null\n    );\n  };\n  /**\n    * @inheritDoc\n    */\n\n\n  Layer.prototype.getSourceState = function getSourceState() {\n    var source = this.getSource();\n    return !source ? SourceState.UNDEFINED : source.getState();\n  };\n  /**\n   * @private\n   */\n\n\n  Layer.prototype.handleSourceChange_ = function handleSourceChange_() {\n    this.changed();\n  };\n  /**\n   * @private\n   */\n\n\n  Layer.prototype.handleSourcePropertyChange_ = function handleSourcePropertyChange_() {\n    if (this.sourceChangeKey_) {\n      unlistenByKey(this.sourceChangeKey_);\n      this.sourceChangeKey_ = null;\n    }\n\n    var source = this.getSource();\n\n    if (source) {\n      this.sourceChangeKey_ = listen(source, EventType.CHANGE, this.handleSourceChange_, this);\n    }\n\n    this.changed();\n  };\n  /**\n   * Sets the layer to be rendered on top of other layers on a map. The map will\n   * not manage this layer in its layers collection, and the callback in\n   * {@link module:ol/Map#forEachLayerAtPixel} will receive `null` as layer. This\n   * is useful for temporary layers. To remove an unmanaged layer from the map,\n   * use `#setMap(null)`.\n   *\n   * To add the layer to a map and have it managed by the map, use\n   * {@link module:ol/Map#addLayer} instead.\n   * @param {import(\"../PluggableMap.js\").default} map Map.\n   * @api\n   */\n\n\n  Layer.prototype.setMap = function setMap(map) {\n    if (this.mapPrecomposeKey_) {\n      unlistenByKey(this.mapPrecomposeKey_);\n      this.mapPrecomposeKey_ = null;\n    }\n\n    if (!map) {\n      this.changed();\n    }\n\n    if (this.mapRenderKey_) {\n      unlistenByKey(this.mapRenderKey_);\n      this.mapRenderKey_ = null;\n    }\n\n    if (map) {\n      this.mapPrecomposeKey_ = listen(map, RenderEventType.PRECOMPOSE, function (evt) {\n        var renderEvent =\n        /** @type {import(\"../render/Event.js\").default} */\n        evt;\n        var layerState = this.getLayerState();\n        layerState.managed = false;\n\n        if (this.getZIndex() === undefined) {\n          layerState.zIndex = Infinity;\n        }\n\n        renderEvent.frameState.layerStatesArray.push(layerState);\n        renderEvent.frameState.layerStates[getUid(this)] = layerState;\n      }, this);\n      this.mapRenderKey_ = listen(this, EventType.CHANGE, map.render, map);\n      this.changed();\n    }\n  };\n  /**\n   * Set the layer source.\n   * @param {import(\"../source/Source.js\").default} source The layer source.\n   * @observable\n   * @api\n   */\n\n\n  Layer.prototype.setSource = function setSource(source) {\n    this.set(LayerProperty.SOURCE, source);\n  };\n\n  return Layer;\n}(BaseLayer);\n/**\n * Return `true` if the layer is visible, and if the passed resolution is\n * between the layer's minResolution and maxResolution. The comparison is\n * inclusive for `minResolution` and exclusive for `maxResolution`.\n * @param {State} layerState Layer state.\n * @param {number} resolution Resolution.\n * @return {boolean} The layer is visible at the given resolution.\n */\n\n\nexport function visibleAtResolution(layerState, resolution) {\n  return layerState.visible && resolution >= layerState.minResolution && resolution < layerState.maxResolution;\n}\nexport default Layer;","map":{"version":3,"sources":["../../../src/ol/layer/Layer.js"],"names":["const","super"],"mappings":"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","sourcesContent":["/**\n * @module ol/layer/Layer\n */\nimport {listen, unlistenByKey} from '../events.js';\nimport EventType from '../events/EventType.js';\nimport {getUid} from '../util.js';\nimport {getChangeEventType} from '../Object.js';\nimport BaseLayer from './Base.js';\nimport LayerProperty from './Property.js';\nimport {assign} from '../obj.js';\nimport RenderEventType from '../render/EventType.js';\nimport SourceState from '../source/State.js';\n\n\n/**\n * @typedef {Object} Options\n * @property {number} [opacity=1] Opacity (0, 1).\n * @property {boolean} [visible=true] Visibility.\n * @property {import(\"../extent.js\").Extent} [extent] The bounding extent for layer rendering.  The layer will not be\n * rendered outside of this extent.\n * @property {number} [zIndex] The z-index for layer rendering.  At rendering time, the layers\n * will be ordered, first by Z-index and then by position. When `undefined`, a `zIndex` of 0 is assumed\n * for layers that are added to the map's `layers` collection, or `Infinity` when the layer's `setMap()`\n * method was used.\n * @property {number} [minResolution] The minimum resolution (inclusive) at which this layer will be\n * visible.\n * @property {number} [maxResolution] The maximum resolution (exclusive) below which this layer will\n * be visible.\n * @property {import(\"../source/Source.js\").default} [source] Source for this layer.  If not provided to the constructor,\n * the source can be set by calling {@link module:ol/layer/Layer#setSource layer.setSource(source)} after\n * construction.\n * @property {import(\"../PluggableMap.js\").default} [map] Map.\n */\n\n\n/**\n * @typedef {Object} State\n * @property {import(\"./Base.js\").default} layer\n * @property {number} opacity\n * @property {SourceState} sourceState\n * @property {boolean} visible\n * @property {boolean} managed\n * @property {import(\"../extent.js\").Extent} [extent]\n * @property {number} zIndex\n * @property {number} maxResolution\n * @property {number} minResolution\n */\n\n/**\n * @classdesc\n * Abstract base class; normally only used for creating subclasses and not\n * instantiated in apps.\n * A visual representation of raster or vector map data.\n * Layers group together those properties that pertain to how the data is to be\n * displayed, irrespective of the source of that data.\n *\n * Layers are usually added to a map with {@link module:ol/Map#addLayer}. Components\n * like {@link module:ol/interaction/Select~Select} use unmanaged layers\n * internally. These unmanaged layers are associated with the map using\n * {@link module:ol/layer/Layer~Layer#setMap} instead.\n *\n * A generic `change` event is fired when the state of the source changes.\n *\n * @fires import(\"../render/Event.js\").RenderEvent\n */\nclass Layer extends BaseLayer {\n  /**\n   * @param {Options} options Layer options.\n   */\n  constructor(options) {\n\n    const baseOptions = assign({}, options);\n    delete baseOptions.source;\n\n    super(baseOptions);\n\n    /**\n     * @private\n     * @type {?import(\"../events.js\").EventsKey}\n     */\n    this.mapPrecomposeKey_ = null;\n\n    /**\n     * @private\n     * @type {?import(\"../events.js\").EventsKey}\n     */\n    this.mapRenderKey_ = null;\n\n    /**\n     * @private\n     * @type {?import(\"../events.js\").EventsKey}\n     */\n    this.sourceChangeKey_ = null;\n\n    if (options.map) {\n      this.setMap(options.map);\n    }\n\n    listen(this,\n      getChangeEventType(LayerProperty.SOURCE),\n      this.handleSourcePropertyChange_, this);\n\n    const source = options.source ? options.source : null;\n    this.setSource(source);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  getLayersArray(opt_array) {\n    const array = opt_array ? opt_array : [];\n    array.push(this);\n    return array;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  getLayerStatesArray(opt_states) {\n    const states = opt_states ? opt_states : [];\n    states.push(this.getLayerState());\n    return states;\n  }\n\n  /**\n   * Get the layer source.\n   * @return {import(\"../source/Source.js\").default} The layer source (or `null` if not yet set).\n   * @observable\n   * @api\n   */\n  getSource() {\n    const source = this.get(LayerProperty.SOURCE);\n    return (\n      /** @type {import(\"../source/Source.js\").default} */ (source) || null\n    );\n  }\n\n  /**\n    * @inheritDoc\n    */\n  getSourceState() {\n    const source = this.getSource();\n    return !source ? SourceState.UNDEFINED : source.getState();\n  }\n\n  /**\n   * @private\n   */\n  handleSourceChange_() {\n    this.changed();\n  }\n\n  /**\n   * @private\n   */\n  handleSourcePropertyChange_() {\n    if (this.sourceChangeKey_) {\n      unlistenByKey(this.sourceChangeKey_);\n      this.sourceChangeKey_ = null;\n    }\n    const source = this.getSource();\n    if (source) {\n      this.sourceChangeKey_ = listen(source,\n        EventType.CHANGE, this.handleSourceChange_, this);\n    }\n    this.changed();\n  }\n\n  /**\n   * Sets the layer to be rendered on top of other layers on a map. The map will\n   * not manage this layer in its layers collection, and the callback in\n   * {@link module:ol/Map#forEachLayerAtPixel} will receive `null` as layer. This\n   * is useful for temporary layers. To remove an unmanaged layer from the map,\n   * use `#setMap(null)`.\n   *\n   * To add the layer to a map and have it managed by the map, use\n   * {@link module:ol/Map#addLayer} instead.\n   * @param {import(\"../PluggableMap.js\").default} map Map.\n   * @api\n   */\n  setMap(map) {\n    if (this.mapPrecomposeKey_) {\n      unlistenByKey(this.mapPrecomposeKey_);\n      this.mapPrecomposeKey_ = null;\n    }\n    if (!map) {\n      this.changed();\n    }\n    if (this.mapRenderKey_) {\n      unlistenByKey(this.mapRenderKey_);\n      this.mapRenderKey_ = null;\n    }\n    if (map) {\n      this.mapPrecomposeKey_ = listen(map, RenderEventType.PRECOMPOSE, function(evt) {\n        const renderEvent = /** @type {import(\"../render/Event.js\").default} */ (evt);\n        const layerState = this.getLayerState();\n        layerState.managed = false;\n        if (this.getZIndex() === undefined) {\n          layerState.zIndex = Infinity;\n        }\n        renderEvent.frameState.layerStatesArray.push(layerState);\n        renderEvent.frameState.layerStates[getUid(this)] = layerState;\n      }, this);\n      this.mapRenderKey_ = listen(this, EventType.CHANGE, map.render, map);\n      this.changed();\n    }\n  }\n\n  /**\n   * Set the layer source.\n   * @param {import(\"../source/Source.js\").default} source The layer source.\n   * @observable\n   * @api\n   */\n  setSource(source) {\n    this.set(LayerProperty.SOURCE, source);\n  }\n}\n\n\n/**\n * Return `true` if the layer is visible, and if the passed resolution is\n * between the layer's minResolution and maxResolution. The comparison is\n * inclusive for `minResolution` and exclusive for `maxResolution`.\n * @param {State} layerState Layer state.\n * @param {number} resolution Resolution.\n * @return {boolean} The layer is visible at the given resolution.\n */\nexport function visibleAtResolution(layerState, resolution) {\n  return layerState.visible && resolution >= layerState.minResolution &&\n      resolution < layerState.maxResolution;\n}\n\n\nexport default Layer;\n"]},"metadata":{},"sourceType":"module"}