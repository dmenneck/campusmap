{"ast":null,"code":"/**\n * @module ol/format/JSONFeature\n */\nimport { inherits } from '../util.js';\nimport FeatureFormat from '../format/Feature.js';\nimport FormatType from '../format/FormatType.js';\n/**\n * @classdesc\n * Abstract base class; normally only used for creating subclasses and not\n * instantiated in apps.\n * Base class for JSON feature formats.\n *\n * @constructor\n * @abstract\n * @extends {module:ol/format/Feature}\n */\n\nconst JSONFeature = function () {\n  FeatureFormat.call(this);\n};\n\ninherits(JSONFeature, FeatureFormat);\n/**\n * @param {Document|Node|Object|string} source Source.\n * @return {Object} Object.\n */\n\nfunction getObject(source) {\n  if (typeof source === 'string') {\n    const object = JSON.parse(source);\n    return object ?\n    /** @type {Object} */\n    object : null;\n  } else if (source !== null) {\n    return source;\n  } else {\n    return null;\n  }\n}\n/**\n * @inheritDoc\n */\n\n\nJSONFeature.prototype.getType = function () {\n  return FormatType.JSON;\n};\n/**\n * @inheritDoc\n */\n\n\nJSONFeature.prototype.readFeature = function (source, opt_options) {\n  return this.readFeatureFromObject(getObject(source), this.getReadOptions(source, opt_options));\n};\n/**\n * @inheritDoc\n */\n\n\nJSONFeature.prototype.readFeatures = function (source, opt_options) {\n  return this.readFeaturesFromObject(getObject(source), this.getReadOptions(source, opt_options));\n};\n/**\n * @abstract\n * @param {Object} object Object.\n * @param {module:ol/format/Feature~ReadOptions=} opt_options Read options.\n * @protected\n * @return {module:ol/Feature} Feature.\n */\n\n\nJSONFeature.prototype.readFeatureFromObject = function (object, opt_options) {};\n/**\n * @abstract\n * @param {Object} object Object.\n * @param {module:ol/format/Feature~ReadOptions=} opt_options Read options.\n * @protected\n * @return {Array.<module:ol/Feature>} Features.\n */\n\n\nJSONFeature.prototype.readFeaturesFromObject = function (object, opt_options) {};\n/**\n * @inheritDoc\n */\n\n\nJSONFeature.prototype.readGeometry = function (source, opt_options) {\n  return this.readGeometryFromObject(getObject(source), this.getReadOptions(source, opt_options));\n};\n/**\n * @abstract\n * @param {Object} object Object.\n * @param {module:ol/format/Feature~ReadOptions=} opt_options Read options.\n * @protected\n * @return {module:ol/geom/Geometry} Geometry.\n */\n\n\nJSONFeature.prototype.readGeometryFromObject = function (object, opt_options) {};\n/**\n * @inheritDoc\n */\n\n\nJSONFeature.prototype.readProjection = function (source) {\n  return this.readProjectionFromObject(getObject(source));\n};\n/**\n * @abstract\n * @param {Object} object Object.\n * @protected\n * @return {module:ol/proj/Projection} Projection.\n */\n\n\nJSONFeature.prototype.readProjectionFromObject = function (object) {};\n/**\n * @inheritDoc\n */\n\n\nJSONFeature.prototype.writeFeature = function (feature, opt_options) {\n  return JSON.stringify(this.writeFeatureObject(feature, opt_options));\n};\n/**\n * @abstract\n * @param {module:ol/Feature} feature Feature.\n * @param {module:ol/format/Feature~WriteOptions=} opt_options Write options.\n * @return {Object} Object.\n */\n\n\nJSONFeature.prototype.writeFeatureObject = function (feature, opt_options) {};\n/**\n * @inheritDoc\n */\n\n\nJSONFeature.prototype.writeFeatures = function (features, opt_options) {\n  return JSON.stringify(this.writeFeaturesObject(features, opt_options));\n};\n/**\n * @abstract\n * @param {Array.<module:ol/Feature>} features Features.\n * @param {module:ol/format/Feature~WriteOptions=} opt_options Write options.\n * @return {Object} Object.\n */\n\n\nJSONFeature.prototype.writeFeaturesObject = function (features, opt_options) {};\n/**\n * @inheritDoc\n */\n\n\nJSONFeature.prototype.writeGeometry = function (geometry, opt_options) {\n  return JSON.stringify(this.writeGeometryObject(geometry, opt_options));\n};\n/**\n * @abstract\n * @param {module:ol/geom/Geometry} geometry Geometry.\n * @param {module:ol/format/Feature~WriteOptions=} opt_options Write options.\n * @return {Object} Object.\n */\n\n\nJSONFeature.prototype.writeGeometryObject = function (geometry, opt_options) {};\n\nexport default JSONFeature;","map":null,"metadata":{},"sourceType":"module"}