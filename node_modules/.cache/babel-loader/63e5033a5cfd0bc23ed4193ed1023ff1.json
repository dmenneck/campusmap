{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n/**\n * @module ol/renderer/canvas/ImageLayer\n */\n\n\nimport { ENABLE_RASTER_REPROJECTION } from '../../reproj/common.js';\nimport ViewHint from '../../ViewHint.js';\nimport { containsExtent, intersects } from '../../extent.js';\nimport { fromUserExtent } from '../../proj.js';\nimport { getIntersection, isEmpty } from '../../extent.js';\nimport CanvasLayerRenderer from './Layer.js';\nimport { compose as composeTransform, makeInverse } from '../../transform.js';\n/**\n * @classdesc\n * Canvas renderer for image layers.\n * @api\n */\n\nvar CanvasImageLayerRenderer =\n/** @class */\nfunction (_super) {\n  __extends(CanvasImageLayerRenderer, _super);\n  /**\n   * @param {import(\"../../layer/Image.js\").default} imageLayer Image layer.\n   */\n\n\n  function CanvasImageLayerRenderer(imageLayer) {\n    var _this = _super.call(this, imageLayer) || this;\n    /**\n     * @protected\n     * @type {?import(\"../../ImageBase.js\").default}\n     */\n\n\n    _this.image_ = null;\n    return _this;\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  CanvasImageLayerRenderer.prototype.getImage = function () {\n    return !this.image_ ? null : this.image_.getImage();\n  };\n  /**\n   * @inheritDoc\n   */\n\n\n  CanvasImageLayerRenderer.prototype.prepareFrame = function (frameState) {\n    var layerState = frameState.layerStatesArray[frameState.layerIndex];\n    var pixelRatio = frameState.pixelRatio;\n    var viewState = frameState.viewState;\n    var viewResolution = viewState.resolution;\n    var imageSource = this.getLayer().getSource();\n    var hints = frameState.viewHints;\n    var renderedExtent = frameState.extent;\n\n    if (layerState.extent !== undefined) {\n      renderedExtent = getIntersection(renderedExtent, fromUserExtent(layerState.extent, viewState.projection));\n    }\n\n    if (!hints[ViewHint.ANIMATING] && !hints[ViewHint.INTERACTING] && !isEmpty(renderedExtent)) {\n      var projection = viewState.projection;\n\n      if (!ENABLE_RASTER_REPROJECTION) {\n        var sourceProjection = imageSource.getProjection();\n\n        if (sourceProjection) {\n          projection = sourceProjection;\n        }\n      }\n\n      var image = imageSource.getImage(renderedExtent, viewResolution, pixelRatio, projection);\n\n      if (image && this.loadImage(image)) {\n        this.image_ = image;\n      }\n    }\n\n    return !!this.image_;\n  };\n  /**\n   * @inheritDoc\n   */\n\n\n  CanvasImageLayerRenderer.prototype.renderFrame = function (frameState, target) {\n    var image = this.image_;\n    var imageExtent = image.getExtent();\n    var imageResolution = image.getResolution();\n    var imagePixelRatio = image.getPixelRatio();\n    var layerState = frameState.layerStatesArray[frameState.layerIndex];\n    var pixelRatio = frameState.pixelRatio;\n    var viewState = frameState.viewState;\n    var viewCenter = viewState.center;\n    var viewResolution = viewState.resolution;\n    var size = frameState.size;\n    var scale = pixelRatio * imageResolution / (viewResolution * imagePixelRatio);\n    var width = Math.round(size[0] * pixelRatio);\n    var height = Math.round(size[1] * pixelRatio);\n    var rotation = viewState.rotation;\n\n    if (rotation) {\n      var size_1 = Math.round(Math.sqrt(width * width + height * height));\n      width = size_1;\n      height = size_1;\n    } // set forward and inverse pixel transforms\n\n\n    composeTransform(this.pixelTransform, frameState.size[0] / 2, frameState.size[1] / 2, 1 / pixelRatio, 1 / pixelRatio, rotation, -width / 2, -height / 2);\n    makeInverse(this.inversePixelTransform, this.pixelTransform);\n    var canvasTransform = this.createTransformString(this.pixelTransform);\n    this.useContainer(target, canvasTransform, layerState.opacity);\n    var context = this.context;\n    var canvas = context.canvas;\n\n    if (canvas.width != width || canvas.height != height) {\n      canvas.width = width;\n      canvas.height = height;\n    } else if (!this.containerReused) {\n      context.clearRect(0, 0, width, height);\n    } // clipped rendering if layer extent is set\n\n\n    var clipped = false;\n\n    if (layerState.extent) {\n      var layerExtent = fromUserExtent(layerState.extent, viewState.projection);\n      clipped = !containsExtent(layerExtent, frameState.extent) && intersects(layerExtent, frameState.extent);\n\n      if (clipped) {\n        this.clipUnrotated(context, frameState, layerExtent);\n      }\n    }\n\n    var img = image.getImage();\n    var transform = composeTransform(this.tempTransform_, width / 2, height / 2, scale, scale, 0, imagePixelRatio * (imageExtent[0] - viewCenter[0]) / imageResolution, imagePixelRatio * (viewCenter[1] - imageExtent[3]) / imageResolution);\n    this.renderedResolution = imageResolution * pixelRatio / imagePixelRatio;\n    var dx = transform[4];\n    var dy = transform[5];\n    var dw = img.width * transform[0];\n    var dh = img.height * transform[3];\n    this.preRender(context, frameState);\n\n    if (dw >= 0.5 && dh >= 0.5) {\n      var opacity = layerState.opacity;\n      var previousAlpha = void 0;\n\n      if (opacity !== 1) {\n        previousAlpha = this.context.globalAlpha;\n        this.context.globalAlpha = opacity;\n      }\n\n      this.context.drawImage(img, 0, 0, +img.width, +img.height, Math.round(dx), Math.round(dy), Math.round(dw), Math.round(dh));\n\n      if (opacity !== 1) {\n        this.context.globalAlpha = previousAlpha;\n      }\n    }\n\n    this.postRender(context, frameState);\n\n    if (clipped) {\n      context.restore();\n    }\n\n    if (canvasTransform !== canvas.style.transform) {\n      canvas.style.transform = canvasTransform;\n    }\n\n    return this.container;\n  };\n\n  return CanvasImageLayerRenderer;\n}(CanvasLayerRenderer);\n\nexport default CanvasImageLayerRenderer;","map":null,"metadata":{},"sourceType":"module"}