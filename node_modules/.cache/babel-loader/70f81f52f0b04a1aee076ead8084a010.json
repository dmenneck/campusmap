{"ast":null,"code":"import { PJD_3PARAM, PJD_7PARAM, PJD_NODATUM } from './constants/values';\nimport { geodeticToGeocentric, geocentricToGeodetic, geocentricToWgs84, geocentricFromWgs84, compareDatums } from './datumUtils';\n\nfunction checkParams(type) {\n  return type === PJD_3PARAM || type === PJD_7PARAM;\n}\n\nexport default function (source, dest, point) {\n  // Short cut if the datums are identical.\n  if (compareDatums(source, dest)) {\n    return point; // in this case, zero is sucess,\n    // whereas cs_compare_datums returns 1 to indicate TRUE\n    // confusing, should fix this\n  } // Explicitly skip datum transform by setting 'datum=none' as parameter for either source or dest\n\n\n  if (source.datum_type === PJD_NODATUM || dest.datum_type === PJD_NODATUM) {\n    return point;\n  } // If this datum requires grid shifts, then apply it to geodetic coordinates.\n  // Do we need to go through geocentric coordinates?\n\n\n  if (source.es === dest.es && source.a === dest.a && !checkParams(source.datum_type) && !checkParams(dest.datum_type)) {\n    return point;\n  } // Convert to geocentric coordinates.\n\n\n  point = geodeticToGeocentric(point, source.es, source.a); // Convert between datums\n\n  if (checkParams(source.datum_type)) {\n    point = geocentricToWgs84(point, source.datum_type, source.datum_params);\n  }\n\n  if (checkParams(dest.datum_type)) {\n    point = geocentricFromWgs84(point, dest.datum_type, dest.datum_params);\n  }\n\n  return geocentricToGeodetic(point, dest.es, dest.a, dest.b);\n}","map":{"version":3,"sources":["/Users/dirkmennecke77/Desktop/Lageplan/node_modules/proj4/lib/datum_transform.js"],"names":["PJD_3PARAM","PJD_7PARAM","PJD_NODATUM","geodeticToGeocentric","geocentricToGeodetic","geocentricToWgs84","geocentricFromWgs84","compareDatums","checkParams","type","source","dest","point","datum_type","es","a","datum_params","b"],"mappings":"AAAA,SAAQA,UAAR,EAAoBC,UAApB,EAAgCC,WAAhC,QAAkD,oBAAlD;AAEA,SAAQC,oBAAR,EAA8BC,oBAA9B,EAAoDC,iBAApD,EAAuEC,mBAAvE,EAA4FC,aAA5F,QAAgH,cAAhH;;AACA,SAASC,WAAT,CAAqBC,IAArB,EAA2B;AACzB,SAAQA,IAAI,KAAKT,UAAT,IAAuBS,IAAI,KAAKR,UAAxC;AACD;;AAED,eAAe,UAASS,MAAT,EAAiBC,IAAjB,EAAuBC,KAAvB,EAA8B;AAC3C;AACA,MAAIL,aAAa,CAACG,MAAD,EAASC,IAAT,CAAjB,EAAiC;AAC/B,WAAOC,KAAP,CAD+B,CACjB;AACd;AACA;AACD,GAN0C,CAQ3C;;;AACA,MAAIF,MAAM,CAACG,UAAP,KAAsBX,WAAtB,IAAqCS,IAAI,CAACE,UAAL,KAAoBX,WAA7D,EAA0E;AACxE,WAAOU,KAAP;AACD,GAX0C,CAa3C;AAEA;;;AACA,MAAIF,MAAM,CAACI,EAAP,KAAcH,IAAI,CAACG,EAAnB,IAAyBJ,MAAM,CAACK,CAAP,KAAaJ,IAAI,CAACI,CAA3C,IAAgD,CAACP,WAAW,CAACE,MAAM,CAACG,UAAR,CAA5D,IAAoF,CAACL,WAAW,CAACG,IAAI,CAACE,UAAN,CAApG,EAAuH;AACrH,WAAOD,KAAP;AACD,GAlB0C,CAoB3C;;;AACAA,EAAAA,KAAK,GAAGT,oBAAoB,CAACS,KAAD,EAAQF,MAAM,CAACI,EAAf,EAAmBJ,MAAM,CAACK,CAA1B,CAA5B,CArB2C,CAsB3C;;AACA,MAAIP,WAAW,CAACE,MAAM,CAACG,UAAR,CAAf,EAAoC;AAClCD,IAAAA,KAAK,GAAGP,iBAAiB,CAACO,KAAD,EAAQF,MAAM,CAACG,UAAf,EAA2BH,MAAM,CAACM,YAAlC,CAAzB;AACD;;AACD,MAAIR,WAAW,CAACG,IAAI,CAACE,UAAN,CAAf,EAAkC;AAChCD,IAAAA,KAAK,GAAGN,mBAAmB,CAACM,KAAD,EAAQD,IAAI,CAACE,UAAb,EAAyBF,IAAI,CAACK,YAA9B,CAA3B;AACD;;AACD,SAAOZ,oBAAoB,CAACQ,KAAD,EAAQD,IAAI,CAACG,EAAb,EAAiBH,IAAI,CAACI,CAAtB,EAAyBJ,IAAI,CAACM,CAA9B,CAA3B;AAED","sourcesContent":["import {PJD_3PARAM, PJD_7PARAM, PJD_NODATUM} from './constants/values';\n\nimport {geodeticToGeocentric, geocentricToGeodetic, geocentricToWgs84, geocentricFromWgs84, compareDatums} from './datumUtils';\nfunction checkParams(type) {\n  return (type === PJD_3PARAM || type === PJD_7PARAM);\n}\n\nexport default function(source, dest, point) {\n  // Short cut if the datums are identical.\n  if (compareDatums(source, dest)) {\n    return point; // in this case, zero is sucess,\n    // whereas cs_compare_datums returns 1 to indicate TRUE\n    // confusing, should fix this\n  }\n\n  // Explicitly skip datum transform by setting 'datum=none' as parameter for either source or dest\n  if (source.datum_type === PJD_NODATUM || dest.datum_type === PJD_NODATUM) {\n    return point;\n  }\n\n  // If this datum requires grid shifts, then apply it to geodetic coordinates.\n\n  // Do we need to go through geocentric coordinates?\n  if (source.es === dest.es && source.a === dest.a && !checkParams(source.datum_type) &&  !checkParams(dest.datum_type)) {\n    return point;\n  }\n\n  // Convert to geocentric coordinates.\n  point = geodeticToGeocentric(point, source.es, source.a);\n  // Convert between datums\n  if (checkParams(source.datum_type)) {\n    point = geocentricToWgs84(point, source.datum_type, source.datum_params);\n  }\n  if (checkParams(dest.datum_type)) {\n    point = geocentricFromWgs84(point, dest.datum_type, dest.datum_params);\n  }\n  return geocentricToGeodetic(point, dest.es, dest.a, dest.b);\n\n}\n"]},"metadata":{},"sourceType":"module"}