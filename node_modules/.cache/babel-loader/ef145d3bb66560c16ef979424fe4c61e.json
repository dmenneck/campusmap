{"ast":null,"code":"/**\n * @module ol/render/canvas/ImageReplay\n */\nimport { inherits } from '../../util.js';\nimport CanvasInstruction from '../canvas/Instruction.js';\nimport CanvasReplay from '../canvas/Replay.js';\n/**\n * @constructor\n * @extends {module:ol/render/canvas/Replay}\n * @param {number} tolerance Tolerance.\n * @param {module:ol/extent~Extent} maxExtent Maximum extent.\n * @param {number} resolution Resolution.\n * @param {number} pixelRatio Pixel ratio.\n * @param {boolean} overlaps The replay can have overlapping geometries.\n * @param {?} declutterTree Declutter tree.\n * @struct\n */\n\nconst CanvasImageReplay = function (tolerance, maxExtent, resolution, pixelRatio, overlaps, declutterTree) {\n  CanvasReplay.call(this, tolerance, maxExtent, resolution, pixelRatio, overlaps, declutterTree);\n  /**\n   * @private\n   * @type {module:ol/render/canvas~DeclutterGroup}\n   */\n\n  this.declutterGroup_ = null;\n  /**\n   * @private\n   * @type {HTMLCanvasElement|HTMLVideoElement|Image}\n   */\n\n  this.hitDetectionImage_ = null;\n  /**\n   * @private\n   * @type {HTMLCanvasElement|HTMLVideoElement|Image}\n   */\n\n  this.image_ = null;\n  /**\n   * @private\n   * @type {number|undefined}\n   */\n\n  this.anchorX_ = undefined;\n  /**\n   * @private\n   * @type {number|undefined}\n   */\n\n  this.anchorY_ = undefined;\n  /**\n   * @private\n   * @type {number|undefined}\n   */\n\n  this.height_ = undefined;\n  /**\n   * @private\n   * @type {number|undefined}\n   */\n\n  this.opacity_ = undefined;\n  /**\n   * @private\n   * @type {number|undefined}\n   */\n\n  this.originX_ = undefined;\n  /**\n   * @private\n   * @type {number|undefined}\n   */\n\n  this.originY_ = undefined;\n  /**\n   * @private\n   * @type {boolean|undefined}\n   */\n\n  this.rotateWithView_ = undefined;\n  /**\n   * @private\n   * @type {number|undefined}\n   */\n\n  this.rotation_ = undefined;\n  /**\n   * @private\n   * @type {number|undefined}\n   */\n\n  this.scale_ = undefined;\n  /**\n   * @private\n   * @type {boolean|undefined}\n   */\n\n  this.snapToPixel_ = undefined;\n  /**\n   * @private\n   * @type {number|undefined}\n   */\n\n  this.width_ = undefined;\n};\n\ninherits(CanvasImageReplay, CanvasReplay);\n/**\n * @param {Array.<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {number} end End.\n * @param {number} stride Stride.\n * @private\n * @return {number} My end.\n */\n\nCanvasImageReplay.prototype.drawCoordinates_ = function (flatCoordinates, offset, end, stride) {\n  return this.appendFlatCoordinates(flatCoordinates, offset, end, stride, false, false);\n};\n/**\n * @inheritDoc\n */\n\n\nCanvasImageReplay.prototype.drawPoint = function (pointGeometry, feature) {\n  if (!this.image_) {\n    return;\n  }\n\n  this.beginGeometry(pointGeometry, feature);\n  const flatCoordinates = pointGeometry.getFlatCoordinates();\n  const stride = pointGeometry.getStride();\n  const myBegin = this.coordinates.length;\n  const myEnd = this.drawCoordinates_(flatCoordinates, 0, flatCoordinates.length, stride);\n  this.instructions.push([CanvasInstruction.DRAW_IMAGE, myBegin, myEnd, this.image_, // Remaining arguments to DRAW_IMAGE are in alphabetical order\n  this.anchorX_, this.anchorY_, this.declutterGroup_, this.height_, this.opacity_, this.originX_, this.originY_, this.rotateWithView_, this.rotation_, this.scale_ * this.pixelRatio, this.snapToPixel_, this.width_]);\n  this.hitDetectionInstructions.push([CanvasInstruction.DRAW_IMAGE, myBegin, myEnd, this.hitDetectionImage_, // Remaining arguments to DRAW_IMAGE are in alphabetical order\n  this.anchorX_, this.anchorY_, this.declutterGroup_, this.height_, this.opacity_, this.originX_, this.originY_, this.rotateWithView_, this.rotation_, this.scale_, this.snapToPixel_, this.width_]);\n  this.endGeometry(pointGeometry, feature);\n};\n/**\n * @inheritDoc\n */\n\n\nCanvasImageReplay.prototype.drawMultiPoint = function (multiPointGeometry, feature) {\n  if (!this.image_) {\n    return;\n  }\n\n  this.beginGeometry(multiPointGeometry, feature);\n  const flatCoordinates = multiPointGeometry.getFlatCoordinates();\n  const stride = multiPointGeometry.getStride();\n  const myBegin = this.coordinates.length;\n  const myEnd = this.drawCoordinates_(flatCoordinates, 0, flatCoordinates.length, stride);\n  this.instructions.push([CanvasInstruction.DRAW_IMAGE, myBegin, myEnd, this.image_, // Remaining arguments to DRAW_IMAGE are in alphabetical order\n  this.anchorX_, this.anchorY_, this.declutterGroup_, this.height_, this.opacity_, this.originX_, this.originY_, this.rotateWithView_, this.rotation_, this.scale_ * this.pixelRatio, this.snapToPixel_, this.width_]);\n  this.hitDetectionInstructions.push([CanvasInstruction.DRAW_IMAGE, myBegin, myEnd, this.hitDetectionImage_, // Remaining arguments to DRAW_IMAGE are in alphabetical order\n  this.anchorX_, this.anchorY_, this.declutterGroup_, this.height_, this.opacity_, this.originX_, this.originY_, this.rotateWithView_, this.rotation_, this.scale_, this.snapToPixel_, this.width_]);\n  this.endGeometry(multiPointGeometry, feature);\n};\n/**\n * @inheritDoc\n */\n\n\nCanvasImageReplay.prototype.finish = function () {\n  this.reverseHitDetectionInstructions(); // FIXME this doesn't really protect us against further calls to draw*Geometry\n\n  this.anchorX_ = undefined;\n  this.anchorY_ = undefined;\n  this.hitDetectionImage_ = null;\n  this.image_ = null;\n  this.height_ = undefined;\n  this.scale_ = undefined;\n  this.opacity_ = undefined;\n  this.originX_ = undefined;\n  this.originY_ = undefined;\n  this.rotateWithView_ = undefined;\n  this.rotation_ = undefined;\n  this.snapToPixel_ = undefined;\n  this.width_ = undefined;\n};\n/**\n * @inheritDoc\n */\n\n\nCanvasImageReplay.prototype.setImageStyle = function (imageStyle, declutterGroup) {\n  const anchor = imageStyle.getAnchor();\n  const size = imageStyle.getSize();\n  const hitDetectionImage = imageStyle.getHitDetectionImage(1);\n  const image = imageStyle.getImage(1);\n  const origin = imageStyle.getOrigin();\n  this.anchorX_ = anchor[0];\n  this.anchorY_ = anchor[1];\n  this.declutterGroup_ =\n  /** @type {module:ol/render/canvas~DeclutterGroup} */\n  declutterGroup;\n  this.hitDetectionImage_ = hitDetectionImage;\n  this.image_ = image;\n  this.height_ = size[1];\n  this.opacity_ = imageStyle.getOpacity();\n  this.originX_ = origin[0];\n  this.originY_ = origin[1];\n  this.rotateWithView_ = imageStyle.getRotateWithView();\n  this.rotation_ = imageStyle.getRotation();\n  this.scale_ = imageStyle.getScale();\n  this.snapToPixel_ = imageStyle.getSnapToPixel();\n  this.width_ = size[0];\n};\n\nexport default CanvasImageReplay;","map":null,"metadata":{},"sourceType":"module"}