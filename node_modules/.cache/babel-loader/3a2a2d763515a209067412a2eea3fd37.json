{"ast":null,"code":"/**\n * @module ol/TileRange\n */\n\n/**\n * A representation of a contiguous block of tiles.  A tile range is specified\n * by its min/max tile coordinates and is inclusive of coordinates.\n *\n * @constructor\n * @param {number} minX Minimum X.\n * @param {number} maxX Maximum X.\n * @param {number} minY Minimum Y.\n * @param {number} maxY Maximum Y.\n * @struct\n */\nconst TileRange = function (minX, maxX, minY, maxY) {\n  /**\n   * @type {number}\n   */\n  this.minX = minX;\n  /**\n   * @type {number}\n   */\n\n  this.maxX = maxX;\n  /**\n   * @type {number}\n   */\n\n  this.minY = minY;\n  /**\n   * @type {number}\n   */\n\n  this.maxY = maxY;\n};\n/**\n * @param {number} minX Minimum X.\n * @param {number} maxX Maximum X.\n * @param {number} minY Minimum Y.\n * @param {number} maxY Maximum Y.\n * @param {module:ol/TileRange=} tileRange TileRange.\n * @return {module:ol/TileRange} Tile range.\n */\n\n\nexport function createOrUpdate(minX, maxX, minY, maxY, tileRange) {\n  if (tileRange !== undefined) {\n    tileRange.minX = minX;\n    tileRange.maxX = maxX;\n    tileRange.minY = minY;\n    tileRange.maxY = maxY;\n    return tileRange;\n  } else {\n    return new TileRange(minX, maxX, minY, maxY);\n  }\n}\n/**\n * @param {module:ol/tilecoord~TileCoord} tileCoord Tile coordinate.\n * @return {boolean} Contains tile coordinate.\n */\n\nTileRange.prototype.contains = function (tileCoord) {\n  return this.containsXY(tileCoord[1], tileCoord[2]);\n};\n/**\n * @param {module:ol/TileRange} tileRange Tile range.\n * @return {boolean} Contains.\n */\n\n\nTileRange.prototype.containsTileRange = function (tileRange) {\n  return this.minX <= tileRange.minX && tileRange.maxX <= this.maxX && this.minY <= tileRange.minY && tileRange.maxY <= this.maxY;\n};\n/**\n * @param {number} x Tile coordinate x.\n * @param {number} y Tile coordinate y.\n * @return {boolean} Contains coordinate.\n */\n\n\nTileRange.prototype.containsXY = function (x, y) {\n  return this.minX <= x && x <= this.maxX && this.minY <= y && y <= this.maxY;\n};\n/**\n * @param {module:ol/TileRange} tileRange Tile range.\n * @return {boolean} Equals.\n */\n\n\nTileRange.prototype.equals = function (tileRange) {\n  return this.minX == tileRange.minX && this.minY == tileRange.minY && this.maxX == tileRange.maxX && this.maxY == tileRange.maxY;\n};\n/**\n * @param {module:ol/TileRange} tileRange Tile range.\n */\n\n\nTileRange.prototype.extend = function (tileRange) {\n  if (tileRange.minX < this.minX) {\n    this.minX = tileRange.minX;\n  }\n\n  if (tileRange.maxX > this.maxX) {\n    this.maxX = tileRange.maxX;\n  }\n\n  if (tileRange.minY < this.minY) {\n    this.minY = tileRange.minY;\n  }\n\n  if (tileRange.maxY > this.maxY) {\n    this.maxY = tileRange.maxY;\n  }\n};\n/**\n * @return {number} Height.\n */\n\n\nTileRange.prototype.getHeight = function () {\n  return this.maxY - this.minY + 1;\n};\n/**\n * @return {module:ol/size~Size} Size.\n */\n\n\nTileRange.prototype.getSize = function () {\n  return [this.getWidth(), this.getHeight()];\n};\n/**\n * @return {number} Width.\n */\n\n\nTileRange.prototype.getWidth = function () {\n  return this.maxX - this.minX + 1;\n};\n/**\n * @param {module:ol/TileRange} tileRange Tile range.\n * @return {boolean} Intersects.\n */\n\n\nTileRange.prototype.intersects = function (tileRange) {\n  return this.minX <= tileRange.maxX && this.maxX >= tileRange.minX && this.minY <= tileRange.maxY && this.maxY >= tileRange.minY;\n};\n\nexport default TileRange;","map":null,"metadata":{},"sourceType":"module"}