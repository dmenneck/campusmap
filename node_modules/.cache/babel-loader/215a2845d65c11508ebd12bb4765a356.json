{"ast":null,"code":"/**\n * @module ol/layer/Base\n */\nimport { inherits } from '../util.js';\nimport BaseObject from '../Object.js';\nimport LayerProperty from '../layer/Property.js';\nimport { clamp } from '../math.js';\nimport { assign } from '../obj.js';\n/**\n * @typedef {Object} Options\n * @property {number} [opacity=1] Opacity (0, 1).\n * @property {boolean} [visible=true] Visibility.\n * @property {module:ol/extent~Extent} [extent] The bounding extent for layer rendering.  The layer will not be\n * rendered outside of this extent.\n * @property {number} [zIndex=0] The z-index for layer rendering.  At rendering time, the layers\n * will be ordered, first by Z-index and then by position.\n * @property {number} [minResolution] The minimum resolution (inclusive) at which this layer will be\n * visible.\n * @property {number} [maxResolution] The maximum resolution (exclusive) below which this layer will\n * be visible.\n */\n\n/**\n * @classdesc\n * Abstract base class; normally only used for creating subclasses and not\n * instantiated in apps.\n * Note that with {@link module:ol/layer/Base} and all its subclasses, any property set in\n * the options is set as a {@link module:ol/Object} property on the layer object, so\n * is observable, and has get/set accessors.\n *\n * @constructor\n * @abstract\n * @extends {module:ol/Object}\n * @param {module:ol/layer/Base~Options} options Layer options.\n * @api\n */\n\nconst BaseLayer = function (options) {\n  BaseObject.call(this);\n  /**\n   * @type {Object.<string, *>}\n   */\n\n  const properties = assign({}, options);\n  properties[LayerProperty.OPACITY] = options.opacity !== undefined ? options.opacity : 1;\n  properties[LayerProperty.VISIBLE] = options.visible !== undefined ? options.visible : true;\n  properties[LayerProperty.Z_INDEX] = options.zIndex !== undefined ? options.zIndex : 0;\n  properties[LayerProperty.MAX_RESOLUTION] = options.maxResolution !== undefined ? options.maxResolution : Infinity;\n  properties[LayerProperty.MIN_RESOLUTION] = options.minResolution !== undefined ? options.minResolution : 0;\n  this.setProperties(properties);\n  /**\n   * @type {module:ol/layer/Layer~State}\n   * @private\n   */\n\n  this.state_ =\n  /** @type {module:ol/layer/Layer~State} */\n  {\n    layer:\n    /** @type {module:ol/layer/Layer} */\n    this,\n    managed: true\n  };\n  /**\n   * The layer type.\n   * @type {module:ol/LayerType}\n   * @protected;\n   */\n\n  this.type;\n};\n\ninherits(BaseLayer, BaseObject);\n/**\n * Get the layer type (used when creating a layer renderer).\n * @return {module:ol/LayerType} The layer type.\n */\n\nBaseLayer.prototype.getType = function () {\n  return this.type;\n};\n/**\n * @return {module:ol/layer/Layer~State} Layer state.\n */\n\n\nBaseLayer.prototype.getLayerState = function () {\n  this.state_.opacity = clamp(this.getOpacity(), 0, 1);\n  this.state_.sourceState = this.getSourceState();\n  this.state_.visible = this.getVisible();\n  this.state_.extent = this.getExtent();\n  this.state_.zIndex = this.getZIndex();\n  this.state_.maxResolution = this.getMaxResolution();\n  this.state_.minResolution = Math.max(this.getMinResolution(), 0);\n  return this.state_;\n};\n/**\n * @abstract\n * @param {Array.<module:ol/layer/Layer>=} opt_array Array of layers (to be\n *     modified in place).\n * @return {Array.<module:ol/layer/Layer>} Array of layers.\n */\n\n\nBaseLayer.prototype.getLayersArray = function (opt_array) {};\n/**\n * @abstract\n * @param {Array.<module:ol/layer/Layer~State>=} opt_states Optional list of layer\n *     states (to be modified in place).\n * @return {Array.<module:ol/layer/Layer~State>} List of layer states.\n */\n\n\nBaseLayer.prototype.getLayerStatesArray = function (opt_states) {};\n/**\n * Return the {@link module:ol/extent~Extent extent} of the layer or `undefined` if it\n * will be visible regardless of extent.\n * @return {module:ol/extent~Extent|undefined} The layer extent.\n * @observable\n * @api\n */\n\n\nBaseLayer.prototype.getExtent = function () {\n  return (\n    /** @type {module:ol/extent~Extent|undefined} */\n    this.get(LayerProperty.EXTENT)\n  );\n};\n/**\n * Return the maximum resolution of the layer.\n * @return {number} The maximum resolution of the layer.\n * @observable\n * @api\n */\n\n\nBaseLayer.prototype.getMaxResolution = function () {\n  return (\n    /** @type {number} */\n    this.get(LayerProperty.MAX_RESOLUTION)\n  );\n};\n/**\n * Return the minimum resolution of the layer.\n * @return {number} The minimum resolution of the layer.\n * @observable\n * @api\n */\n\n\nBaseLayer.prototype.getMinResolution = function () {\n  return (\n    /** @type {number} */\n    this.get(LayerProperty.MIN_RESOLUTION)\n  );\n};\n/**\n * Return the opacity of the layer (between 0 and 1).\n * @return {number} The opacity of the layer.\n * @observable\n * @api\n */\n\n\nBaseLayer.prototype.getOpacity = function () {\n  return (\n    /** @type {number} */\n    this.get(LayerProperty.OPACITY)\n  );\n};\n/**\n * @abstract\n * @return {module:ol/source/State} Source state.\n */\n\n\nBaseLayer.prototype.getSourceState = function () {};\n/**\n * Return the visibility of the layer (`true` or `false`).\n * @return {boolean} The visibility of the layer.\n * @observable\n * @api\n */\n\n\nBaseLayer.prototype.getVisible = function () {\n  return (\n    /** @type {boolean} */\n    this.get(LayerProperty.VISIBLE)\n  );\n};\n/**\n * Return the Z-index of the layer, which is used to order layers before\n * rendering. The default Z-index is 0.\n * @return {number} The Z-index of the layer.\n * @observable\n * @api\n */\n\n\nBaseLayer.prototype.getZIndex = function () {\n  return (\n    /** @type {number} */\n    this.get(LayerProperty.Z_INDEX)\n  );\n};\n/**\n * Set the extent at which the layer is visible.  If `undefined`, the layer\n * will be visible at all extents.\n * @param {module:ol/extent~Extent|undefined} extent The extent of the layer.\n * @observable\n * @api\n */\n\n\nBaseLayer.prototype.setExtent = function (extent) {\n  this.set(LayerProperty.EXTENT, extent);\n};\n/**\n * Set the maximum resolution at which the layer is visible.\n * @param {number} maxResolution The maximum resolution of the layer.\n * @observable\n * @api\n */\n\n\nBaseLayer.prototype.setMaxResolution = function (maxResolution) {\n  this.set(LayerProperty.MAX_RESOLUTION, maxResolution);\n};\n/**\n * Set the minimum resolution at which the layer is visible.\n * @param {number} minResolution The minimum resolution of the layer.\n * @observable\n * @api\n */\n\n\nBaseLayer.prototype.setMinResolution = function (minResolution) {\n  this.set(LayerProperty.MIN_RESOLUTION, minResolution);\n};\n/**\n * Set the opacity of the layer, allowed values range from 0 to 1.\n * @param {number} opacity The opacity of the layer.\n * @observable\n * @api\n */\n\n\nBaseLayer.prototype.setOpacity = function (opacity) {\n  this.set(LayerProperty.OPACITY, opacity);\n};\n/**\n * Set the visibility of the layer (`true` or `false`).\n * @param {boolean} visible The visibility of the layer.\n * @observable\n * @api\n */\n\n\nBaseLayer.prototype.setVisible = function (visible) {\n  this.set(LayerProperty.VISIBLE, visible);\n};\n/**\n * Set Z-index of the layer, which is used to order layers before rendering.\n * The default Z-index is 0.\n * @param {number} zindex The z-index of the layer.\n * @observable\n * @api\n */\n\n\nBaseLayer.prototype.setZIndex = function (zindex) {\n  this.set(LayerProperty.Z_INDEX, zindex);\n};\n\nexport default BaseLayer;","map":null,"metadata":{},"sourceType":"module"}