{"ast":null,"code":"/**\n * @module ol/source/Image\n */\nimport { ENABLE_RASTER_REPROJECTION } from '../reproj/common.js';\nimport { inherits } from '../util.js';\nimport ImageState from '../ImageState.js';\nimport { linearFindNearest } from '../array.js';\nimport Event from '../events/Event.js';\nimport { equals } from '../extent.js';\nimport { equivalent } from '../proj.js';\nimport ReprojImage from '../reproj/Image.js';\nimport Source from '../source/Source.js';\n/**\n * @enum {string}\n */\n\nconst ImageSourceEventType = {\n  /**\n   * Triggered when an image starts loading.\n   * @event ol/source/Image~ImageSourceEvent#imageloadstart\n   * @api\n   */\n  IMAGELOADSTART: 'imageloadstart',\n\n  /**\n   * Triggered when an image finishes loading.\n   * @event ol/source/Image~ImageSourceEvent#imageloadend\n   * @api\n   */\n  IMAGELOADEND: 'imageloadend',\n\n  /**\n   * Triggered if image loading results in an error.\n   * @event ol/source/Image~ImageSourceEvent#imageloaderror\n   * @api\n   */\n  IMAGELOADERROR: 'imageloaderror'\n};\n/**\n * @classdesc\n * Events emitted by {@link module:ol/source/Image~ImageSource} instances are instances of this\n * type.\n *\n * @constructor\n * @extends {module:ol/events/Event}\n * @param {string} type Type.\n * @param {module:ol/Image} image The image.\n */\n\nconst ImageSourceEvent = function (type, image) {\n  Event.call(this, type);\n  /**\n   * The image related to the event.\n   * @type {module:ol/Image}\n   * @api\n   */\n\n  this.image = image;\n};\n\ninherits(ImageSourceEvent, Event);\n/**\n * @typedef {Object} Options\n * @property {module:ol/source/Source~AttributionLike} [attributions]\n * @property {module:ol/extent~Extent} [extent]\n * @property {module:ol/proj~ProjectionLike} projection\n * @property {Array.<number>} [resolutions]\n * @property {module:ol/source/State} [state]\n */\n\n/**\n * @classdesc\n * Abstract base class; normally only used for creating subclasses and not\n * instantiated in apps.\n * Base class for sources providing a single image.\n *\n * @constructor\n * @abstract\n * @extends {module:ol/source/Source}\n * @param {module:ol/source/Image~Options} options Single image source options.\n * @api\n */\n\nconst ImageSource = function (options) {\n  Source.call(this, {\n    attributions: options.attributions,\n    extent: options.extent,\n    projection: options.projection,\n    state: options.state\n  });\n  /**\n   * @private\n   * @type {Array.<number>}\n   */\n\n  this.resolutions_ = options.resolutions !== undefined ? options.resolutions : null;\n  /**\n   * @private\n   * @type {module:ol/reproj/Image}\n   */\n\n  this.reprojectedImage_ = null;\n  /**\n   * @private\n   * @type {number}\n   */\n\n  this.reprojectedRevision_ = 0;\n};\n\ninherits(ImageSource, Source);\n/**\n * @return {Array.<number>} Resolutions.\n * @override\n */\n\nImageSource.prototype.getResolutions = function () {\n  return this.resolutions_;\n};\n/**\n * @protected\n * @param {number} resolution Resolution.\n * @return {number} Resolution.\n */\n\n\nImageSource.prototype.findNearestResolution = function (resolution) {\n  if (this.resolutions_) {\n    const idx = linearFindNearest(this.resolutions_, resolution, 0);\n    resolution = this.resolutions_[idx];\n  }\n\n  return resolution;\n};\n/**\n * @param {module:ol/extent~Extent} extent Extent.\n * @param {number} resolution Resolution.\n * @param {number} pixelRatio Pixel ratio.\n * @param {module:ol/proj/Projection} projection Projection.\n * @return {module:ol/ImageBase} Single image.\n */\n\n\nImageSource.prototype.getImage = function (extent, resolution, pixelRatio, projection) {\n  const sourceProjection = this.getProjection();\n\n  if (!ENABLE_RASTER_REPROJECTION || !sourceProjection || !projection || equivalent(sourceProjection, projection)) {\n    if (sourceProjection) {\n      projection = sourceProjection;\n    }\n\n    return this.getImageInternal(extent, resolution, pixelRatio, projection);\n  } else {\n    if (this.reprojectedImage_) {\n      if (this.reprojectedRevision_ == this.getRevision() && equivalent(this.reprojectedImage_.getProjection(), projection) && this.reprojectedImage_.getResolution() == resolution && equals(this.reprojectedImage_.getExtent(), extent)) {\n        return this.reprojectedImage_;\n      }\n\n      this.reprojectedImage_.dispose();\n      this.reprojectedImage_ = null;\n    }\n\n    this.reprojectedImage_ = new ReprojImage(sourceProjection, projection, extent, resolution, pixelRatio, function (extent, resolution, pixelRatio) {\n      return this.getImageInternal(extent, resolution, pixelRatio, sourceProjection);\n    }.bind(this));\n    this.reprojectedRevision_ = this.getRevision();\n    return this.reprojectedImage_;\n  }\n};\n/**\n * @abstract\n * @param {module:ol/extent~Extent} extent Extent.\n * @param {number} resolution Resolution.\n * @param {number} pixelRatio Pixel ratio.\n * @param {module:ol/proj/Projection} projection Projection.\n * @return {module:ol/ImageBase} Single image.\n * @protected\n */\n\n\nImageSource.prototype.getImageInternal = function (extent, resolution, pixelRatio, projection) {};\n/**\n * Handle image change events.\n * @param {module:ol/events/Event} event Event.\n * @protected\n */\n\n\nImageSource.prototype.handleImageChange = function (event) {\n  const image =\n  /** @type {module:ol/Image} */\n  event.target;\n\n  switch (image.getState()) {\n    case ImageState.LOADING:\n      this.dispatchEvent(new ImageSourceEvent(ImageSourceEventType.IMAGELOADSTART, image));\n      break;\n\n    case ImageState.LOADED:\n      this.dispatchEvent(new ImageSourceEvent(ImageSourceEventType.IMAGELOADEND, image));\n      break;\n\n    case ImageState.ERROR:\n      this.dispatchEvent(new ImageSourceEvent(ImageSourceEventType.IMAGELOADERROR, image));\n      break;\n\n    default: // pass\n\n  }\n};\n/**\n * Default image load function for image sources that use module:ol/Image~Image image\n * instances.\n * @param {module:ol/Image} image Image.\n * @param {string} src Source.\n */\n\n\nexport function defaultImageLoadFunction(image, src) {\n  image.getImage().src = src;\n}\nexport default ImageSource;","map":null,"metadata":{},"sourceType":"module"}