{"ast":null,"code":"/**\n * @module ol/source/TileJSON\n */\n// FIXME check order of async callbacks\n\n/**\n * See http://mapbox.com/developers/api/.\n */\nimport { createFromTemplates } from '../tileurlfunction.js';\nimport { assert } from '../asserts.js';\nimport { applyTransform, intersects } from '../extent.js';\nimport { jsonp as requestJSONP } from '../net.js';\nimport { get as getProjection, getTransformFromProjections } from '../proj.js';\nimport SourceState from './State.js';\nimport TileImage from './TileImage.js';\nimport { createXYZ, extentFromProjection } from '../tilegrid.js';\n/**\n * @typedef {Object} Config\n * @property {string} [name] The name.\n * @property {string} [description] The description.\n * @property {string} [version] The version.\n * @property {string} [attribution] The attribution.\n * @property {string} [template] The template.\n * @property {string} [legend] The legend.\n * @property {string} [scheme] The scheme.\n * @property {Array<string>} tiles The tile URL templates.\n * @property {Array<string>} [grids] Optional grids.\n * @property {number} [minzoom] Minimum zoom level.\n * @property {number} [maxzoom] Maximum zoom level.\n * @property {Array<number>} [bounds] Optional bounds.\n * @property {Array<number>} [center] Optional center.\n */\n\n/**\n * @typedef {Object} Options\n * @property {import(\"./Source.js\").AttributionLike} [attributions] Attributions.\n * @property {number} [cacheSize=2048] Cache size.\n * @property {null|string} [crossOrigin] The `crossOrigin` attribute for loaded images.  Note that\n * you must provide a `crossOrigin` value if you are using the WebGL renderer or if you want to\n * access pixel data with the Canvas renderer.  See\n * https://developer.mozilla.org/en-US/docs/Web/HTML/CORS_enabled_image for more detail.\n * @property {boolean} [jsonp=false] Use JSONP with callback to load the TileJSON.\n * Useful when the server does not support CORS..\n * @property {number} [reprojectionErrorThreshold=0.5] Maximum allowed reprojection error (in pixels).\n * Higher values can increase reprojection performance, but decrease precision.\n * @property {Config} [tileJSON] TileJSON configuration for this source.\n * If not provided, `url` must be configured.\n * @property {import(\"../Tile.js\").LoadFunction} [tileLoadFunction] Optional function to load a tile given a URL. The default is\n * ```js\n * function(imageTile, src) {\n *   imageTile.getImage().src = src;\n * };\n * ```\n * @property {string} [url] URL to the TileJSON file. If not provided, `tileJSON` must be configured.\n * @property {boolean} [wrapX=true] Whether to wrap the world horizontally.\n * @property {number} [transition] Duration of the opacity transition for rendering.\n * To disable the opacity transition, pass `transition: 0`.\n */\n\n/**\n * @classdesc\n * Layer source for tile data in TileJSON format.\n * @api\n */\n\nvar TileJSON =\n/*@__PURE__*/\nfunction (TileImage) {\n  function TileJSON(options) {\n    TileImage.call(this, {\n      attributions: options.attributions,\n      cacheSize: options.cacheSize,\n      crossOrigin: options.crossOrigin,\n      projection: getProjection('EPSG:3857'),\n      reprojectionErrorThreshold: options.reprojectionErrorThreshold,\n      state: SourceState.LOADING,\n      tileLoadFunction: options.tileLoadFunction,\n      wrapX: options.wrapX !== undefined ? options.wrapX : true,\n      transition: options.transition\n    });\n    /**\n     * @type {Config}\n     * @private\n     */\n\n    this.tileJSON_ = null;\n\n    if (options.url) {\n      if (options.jsonp) {\n        requestJSONP(options.url, this.handleTileJSONResponse.bind(this), this.handleTileJSONError.bind(this));\n      } else {\n        var client = new XMLHttpRequest();\n        client.addEventListener('load', this.onXHRLoad_.bind(this));\n        client.addEventListener('error', this.onXHRError_.bind(this));\n        client.open('GET', options.url);\n        client.send();\n      }\n    } else if (options.tileJSON) {\n      this.handleTileJSONResponse(options.tileJSON);\n    } else {\n      assert(false, 51); // Either `url` or `tileJSON` options must be provided\n    }\n  }\n\n  if (TileImage) TileJSON.__proto__ = TileImage;\n  TileJSON.prototype = Object.create(TileImage && TileImage.prototype);\n  TileJSON.prototype.constructor = TileJSON;\n  /**\n   * @private\n   * @param {Event} event The load event.\n   */\n\n  TileJSON.prototype.onXHRLoad_ = function onXHRLoad_(event) {\n    var client =\n    /** @type {XMLHttpRequest} */\n    event.target; // status will be 0 for file:// urls\n\n    if (!client.status || client.status >= 200 && client.status < 300) {\n      var response;\n\n      try {\n        response =\n        /** @type {TileJSON} */\n        JSON.parse(client.responseText);\n      } catch (err) {\n        this.handleTileJSONError();\n        return;\n      }\n\n      this.handleTileJSONResponse(response);\n    } else {\n      this.handleTileJSONError();\n    }\n  };\n  /**\n   * @private\n   * @param {Event} event The error event.\n   */\n\n\n  TileJSON.prototype.onXHRError_ = function onXHRError_(event) {\n    this.handleTileJSONError();\n  };\n  /**\n   * @return {Config} The tilejson object.\n   * @api\n   */\n\n\n  TileJSON.prototype.getTileJSON = function getTileJSON() {\n    return this.tileJSON_;\n  };\n  /**\n   * @protected\n   * @param {Config} tileJSON Tile JSON.\n   */\n\n\n  TileJSON.prototype.handleTileJSONResponse = function handleTileJSONResponse(tileJSON) {\n    var epsg4326Projection = getProjection('EPSG:4326');\n    var sourceProjection = this.getProjection();\n    var extent;\n\n    if (tileJSON['bounds'] !== undefined) {\n      var transform = getTransformFromProjections(epsg4326Projection, sourceProjection);\n      extent = applyTransform(tileJSON['bounds'], transform);\n    }\n\n    var minZoom = tileJSON['minzoom'] || 0;\n    var maxZoom = tileJSON['maxzoom'] || 22;\n    var tileGrid = createXYZ({\n      extent: extentFromProjection(sourceProjection),\n      maxZoom: maxZoom,\n      minZoom: minZoom\n    });\n    this.tileGrid = tileGrid;\n    this.tileUrlFunction = createFromTemplates(tileJSON['tiles'], tileGrid);\n\n    if (tileJSON['attribution'] !== undefined && !this.getAttributions()) {\n      var attributionExtent = extent !== undefined ? extent : epsg4326Projection.getExtent();\n      this.setAttributions(function (frameState) {\n        if (intersects(attributionExtent, frameState.extent)) {\n          return [tileJSON['attribution']];\n        }\n\n        return null;\n      });\n    }\n\n    this.tileJSON_ = tileJSON;\n    this.setState(SourceState.READY);\n  };\n  /**\n   * @protected\n   */\n\n\n  TileJSON.prototype.handleTileJSONError = function handleTileJSONError() {\n    this.setState(SourceState.ERROR);\n  };\n\n  return TileJSON;\n}(TileImage);\n\nexport default TileJSON;","map":{"version":3,"sources":["../../../src/ol/source/TileJSON.js"],"names":["super","const","let"],"mappings":"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","sourcesContent":["/**\n * @module ol/source/TileJSON\n */\n// FIXME check order of async callbacks\n\n/**\n * See http://mapbox.com/developers/api/.\n */\n\n\nimport {createFromTemplates} from '../tileurlfunction.js';\nimport {assert} from '../asserts.js';\nimport {applyTransform, intersects} from '../extent.js';\nimport {jsonp as requestJSONP} from '../net.js';\nimport {get as getProjection, getTransformFromProjections} from '../proj.js';\nimport SourceState from './State.js';\nimport TileImage from './TileImage.js';\nimport {createXYZ, extentFromProjection} from '../tilegrid.js';\n\n\n/**\n * @typedef {Object} Config\n * @property {string} [name] The name.\n * @property {string} [description] The description.\n * @property {string} [version] The version.\n * @property {string} [attribution] The attribution.\n * @property {string} [template] The template.\n * @property {string} [legend] The legend.\n * @property {string} [scheme] The scheme.\n * @property {Array<string>} tiles The tile URL templates.\n * @property {Array<string>} [grids] Optional grids.\n * @property {number} [minzoom] Minimum zoom level.\n * @property {number} [maxzoom] Maximum zoom level.\n * @property {Array<number>} [bounds] Optional bounds.\n * @property {Array<number>} [center] Optional center.\n */\n\n\n/**\n * @typedef {Object} Options\n * @property {import(\"./Source.js\").AttributionLike} [attributions] Attributions.\n * @property {number} [cacheSize=2048] Cache size.\n * @property {null|string} [crossOrigin] The `crossOrigin` attribute for loaded images.  Note that\n * you must provide a `crossOrigin` value if you are using the WebGL renderer or if you want to\n * access pixel data with the Canvas renderer.  See\n * https://developer.mozilla.org/en-US/docs/Web/HTML/CORS_enabled_image for more detail.\n * @property {boolean} [jsonp=false] Use JSONP with callback to load the TileJSON.\n * Useful when the server does not support CORS..\n * @property {number} [reprojectionErrorThreshold=0.5] Maximum allowed reprojection error (in pixels).\n * Higher values can increase reprojection performance, but decrease precision.\n * @property {Config} [tileJSON] TileJSON configuration for this source.\n * If not provided, `url` must be configured.\n * @property {import(\"../Tile.js\").LoadFunction} [tileLoadFunction] Optional function to load a tile given a URL. The default is\n * ```js\n * function(imageTile, src) {\n *   imageTile.getImage().src = src;\n * };\n * ```\n * @property {string} [url] URL to the TileJSON file. If not provided, `tileJSON` must be configured.\n * @property {boolean} [wrapX=true] Whether to wrap the world horizontally.\n * @property {number} [transition] Duration of the opacity transition for rendering.\n * To disable the opacity transition, pass `transition: 0`.\n */\n\n\n/**\n * @classdesc\n * Layer source for tile data in TileJSON format.\n * @api\n */\nclass TileJSON extends TileImage {\n  /**\n   * @param {Options} options TileJSON options.\n   */\n  constructor(options) {\n    super({\n      attributions: options.attributions,\n      cacheSize: options.cacheSize,\n      crossOrigin: options.crossOrigin,\n      projection: getProjection('EPSG:3857'),\n      reprojectionErrorThreshold: options.reprojectionErrorThreshold,\n      state: SourceState.LOADING,\n      tileLoadFunction: options.tileLoadFunction,\n      wrapX: options.wrapX !== undefined ? options.wrapX : true,\n      transition: options.transition\n    });\n\n    /**\n     * @type {Config}\n     * @private\n     */\n    this.tileJSON_ = null;\n\n\n    if (options.url) {\n      if (options.jsonp) {\n        requestJSONP(options.url, this.handleTileJSONResponse.bind(this),\n          this.handleTileJSONError.bind(this));\n      } else {\n        const client = new XMLHttpRequest();\n        client.addEventListener('load', this.onXHRLoad_.bind(this));\n        client.addEventListener('error', this.onXHRError_.bind(this));\n        client.open('GET', options.url);\n        client.send();\n      }\n    } else if (options.tileJSON) {\n      this.handleTileJSONResponse(options.tileJSON);\n    } else {\n      assert(false, 51); // Either `url` or `tileJSON` options must be provided\n    }\n\n  }\n\n  /**\n   * @private\n   * @param {Event} event The load event.\n   */\n  onXHRLoad_(event) {\n    const client = /** @type {XMLHttpRequest} */ (event.target);\n    // status will be 0 for file:// urls\n    if (!client.status || client.status >= 200 && client.status < 300) {\n      let response;\n      try {\n        response = /** @type {TileJSON} */(JSON.parse(client.responseText));\n      } catch (err) {\n        this.handleTileJSONError();\n        return;\n      }\n      this.handleTileJSONResponse(response);\n    } else {\n      this.handleTileJSONError();\n    }\n  }\n\n  /**\n   * @private\n   * @param {Event} event The error event.\n   */\n  onXHRError_(event) {\n    this.handleTileJSONError();\n  }\n\n  /**\n   * @return {Config} The tilejson object.\n   * @api\n   */\n  getTileJSON() {\n    return this.tileJSON_;\n  }\n\n  /**\n   * @protected\n   * @param {Config} tileJSON Tile JSON.\n   */\n  handleTileJSONResponse(tileJSON) {\n\n    const epsg4326Projection = getProjection('EPSG:4326');\n\n    const sourceProjection = this.getProjection();\n    let extent;\n    if (tileJSON['bounds'] !== undefined) {\n      const transform = getTransformFromProjections(\n        epsg4326Projection, sourceProjection);\n      extent = applyTransform(tileJSON['bounds'], transform);\n    }\n\n    const minZoom = tileJSON['minzoom'] || 0;\n    const maxZoom = tileJSON['maxzoom'] || 22;\n    const tileGrid = createXYZ({\n      extent: extentFromProjection(sourceProjection),\n      maxZoom: maxZoom,\n      minZoom: minZoom\n    });\n    this.tileGrid = tileGrid;\n\n    this.tileUrlFunction = createFromTemplates(tileJSON['tiles'], tileGrid);\n\n    if (tileJSON['attribution'] !== undefined && !this.getAttributions()) {\n      const attributionExtent = extent !== undefined ?\n        extent : epsg4326Projection.getExtent();\n\n      this.setAttributions(function(frameState) {\n        if (intersects(attributionExtent, frameState.extent)) {\n          return [tileJSON['attribution']];\n        }\n        return null;\n      });\n\n    }\n    this.tileJSON_ = tileJSON;\n    this.setState(SourceState.READY);\n\n  }\n\n  /**\n   * @protected\n   */\n  handleTileJSONError() {\n    this.setState(SourceState.ERROR);\n  }\n}\n\n\nexport default TileJSON;\n"]},"metadata":{},"sourceType":"module"}