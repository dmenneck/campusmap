{"ast":null,"code":"/**\n * @module ol/interaction/KeyboardPan\n */\nimport { rotate as rotateCoordinate } from '../coordinate.js';\nimport EventType from '../events/EventType.js';\nimport KeyCode from '../events/KeyCode.js';\nimport { noModifierKeys, targetNotEditable } from '../events/condition.js';\nimport Interaction, { pan } from './Interaction.js';\n/**\n * @typedef {Object} Options\n * @property {import(\"../events/condition.js\").Condition} [condition] A function that\n * takes an {@link module:ol/MapBrowserEvent~MapBrowserEvent} and returns a\n * boolean to indicate whether that event should be handled. Default is\n * {@link module:ol/events/condition~noModifierKeys} and\n * {@link module:ol/events/condition~targetNotEditable}.\n * @property {number} [duration=100] Animation duration in milliseconds.\n * @property {number} [pixelDelta=128] The amount of pixels to pan on each key\n * press.\n */\n\n/**\n * @classdesc\n * Allows the user to pan the map using keyboard arrows.\n * Note that, although this interaction is by default included in maps,\n * the keys can only be used when browser focus is on the element to which\n * the keyboard events are attached. By default, this is the map div,\n * though you can change this with the `keyboardEventTarget` in\n * {@link module:ol/Map~Map}. `document` never loses focus but, for any other\n * element, focus will have to be on, and returned to, this element if the keys\n * are to function.\n * See also {@link module:ol/interaction/KeyboardZoom~KeyboardZoom}.\n * @api\n */\n\nvar KeyboardPan =\n/*@__PURE__*/\nfunction (Interaction) {\n  function KeyboardPan(opt_options) {\n    Interaction.call(this, {\n      handleEvent: handleEvent\n    });\n    var options = opt_options || {};\n    /**\n     * @private\n     * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Browser event.\n     * @return {boolean} Combined condition result.\n     */\n\n    this.defaultCondition_ = function (mapBrowserEvent) {\n      return noModifierKeys(mapBrowserEvent) && targetNotEditable(mapBrowserEvent);\n    };\n    /**\n     * @private\n     * @type {import(\"../events/condition.js\").Condition}\n     */\n\n\n    this.condition_ = options.condition !== undefined ? options.condition : this.defaultCondition_;\n    /**\n     * @private\n     * @type {number}\n     */\n\n    this.duration_ = options.duration !== undefined ? options.duration : 100;\n    /**\n     * @private\n     * @type {number}\n     */\n\n    this.pixelDelta_ = options.pixelDelta !== undefined ? options.pixelDelta : 128;\n  }\n\n  if (Interaction) KeyboardPan.__proto__ = Interaction;\n  KeyboardPan.prototype = Object.create(Interaction && Interaction.prototype);\n  KeyboardPan.prototype.constructor = KeyboardPan;\n  return KeyboardPan;\n}(Interaction);\n/**\n * Handles the {@link module:ol/MapBrowserEvent map browser event} if it was a\n * `KeyEvent`, and decides the direction to pan to (if an arrow key was\n * pressed).\n * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Map browser event.\n * @return {boolean} `false` to stop event propagation.\n * @this {KeyboardPan}\n */\n\n\nfunction handleEvent(mapBrowserEvent) {\n  var stopEvent = false;\n\n  if (mapBrowserEvent.type == EventType.KEYDOWN) {\n    var keyEvent =\n    /** @type {KeyboardEvent} */\n    mapBrowserEvent.originalEvent;\n    var keyCode = keyEvent.keyCode;\n\n    if (this.condition_(mapBrowserEvent) && (keyCode == KeyCode.DOWN || keyCode == KeyCode.LEFT || keyCode == KeyCode.RIGHT || keyCode == KeyCode.UP)) {\n      var map = mapBrowserEvent.map;\n      var view = map.getView();\n      var mapUnitsDelta = view.getResolution() * this.pixelDelta_;\n      var deltaX = 0,\n          deltaY = 0;\n\n      if (keyCode == KeyCode.DOWN) {\n        deltaY = -mapUnitsDelta;\n      } else if (keyCode == KeyCode.LEFT) {\n        deltaX = -mapUnitsDelta;\n      } else if (keyCode == KeyCode.RIGHT) {\n        deltaX = mapUnitsDelta;\n      } else {\n        deltaY = mapUnitsDelta;\n      }\n\n      var delta = [deltaX, deltaY];\n      rotateCoordinate(delta, view.getRotation());\n      pan(view, delta, this.duration_);\n      mapBrowserEvent.preventDefault();\n      stopEvent = true;\n    }\n  }\n\n  return !stopEvent;\n}\n\nexport default KeyboardPan;","map":{"version":3,"sources":["../../../src/ol/interaction/KeyboardPan.js"],"names":["super","const","let"],"mappings":"AAAA;;;AAGA,SAAQ,MAAM,IAAI,gBAAlB,QAAyC,kBAAzC;AACA,OAAO,SAAP,MAAsB,wBAAtB;AACA,OAAO,OAAP,MAAoB,sBAApB;AACA,SAAQ,cAAR,EAAwB,iBAAxB,QAAgD,wBAAhD;AACA,OAAO,WAAP,IAAqB,GAArB,QAA+B,kBAA/B;;;;;;;;;;;;;;;;;;;;;;;;;;;AA6BA,IAAM,WAAW;AAAoB;AAAA,UAAA,WAAA,EAAA;AAInC,WAAA,WAAA,CAAY,WAAZ,EAAyB;AAEvBA,IAAAA,WAAAA,CAAAA,IAAAA,CAAK,IAALA,EAAM;AACJ,MAAA,WAAW,EAAE;AADT,KAANA;AAIAC,QAAM,OAAO,GAAG,WAAW,IAAI,EAA/BA;;;;;;;AAOA,SAAK,iBAAL,GAAyB,UAAS,eAAT,EAA0B;AACjD,aAAO,cAAc,CAAC,eAAD,CAAd,IACL,iBAAiB,CAAC,eAAD,CADnB;AAED,KAHD;;;;;;;AASA,SAAK,UAAL,GAAkB,OAAO,CAAC,SAAR,KAAsB,SAAtB,GAChB,OAAO,CAAC,SADQ,GACI,KAAK,iBAD3B;;;;;;AAOA,SAAK,SAAL,GAAiB,OAAO,CAAC,QAAR,KAAqB,SAArB,GAAiC,OAAO,CAAC,QAAzC,GAAoD,GAArE;;;;;;AAMA,SAAK,WAAL,GAAmB,OAAO,CAAC,UAAR,KAAuB,SAAvB,GACjB,OAAO,CAAC,UADS,GACI,GADvB;;;;;AAGD,EAAA,WAAA,CAAA,SAAA,CAAA,WAAA,GAAA,WAAA;;CA1CkC,CAAX,WAAW,CAArC;;;;;;;;;;;AAuDA,SAAS,WAAT,CAAqB,eAArB,EAAsC;AACpCC,MAAI,SAAS,GAAG,KAAhBA;;AACA,MAAI,eAAe,CAAC,IAAhB,IAAwB,SAAS,CAAC,OAAtC,EAA+C;AAC7CD,QAAM,QAAQ;AAAA;AAAiC,IAAA,eAAe,CAAC,aAA/DA;AACAA,QAAM,OAAO,GAAG,QAAQ,CAAC,OAAzBA;;AACA,QAAI,KAAK,UAAL,CAAgB,eAAhB,MACC,OAAO,IAAI,OAAO,CAAC,IAAnB,IACD,OAAO,IAAI,OAAO,CAAC,IADlB,IAED,OAAO,IAAI,OAAO,CAAC,KAFlB,IAGD,OAAO,IAAI,OAAO,CAAC,EAJnB,CAAJ,EAI4B;AAC1BA,UAAM,GAAG,GAAG,eAAe,CAAC,GAA5BA;AACAA,UAAM,IAAI,GAAG,GAAG,CAAC,OAAJ,EAAbA;AACAA,UAAM,aAAa,GAAG,IAAI,CAAC,aAAL,KAAuB,KAAK,WAAlDA;AACAC,UAAI,MAAM,GAAG,CAAbA;AAAAA,UAAgB,MAAM,GAAG,CAAzBA;;AACA,UAAI,OAAO,IAAI,OAAO,CAAC,IAAvB,EAA6B;AAC3B,QAAA,MAAM,GAAG,CAAC,aAAV;AACD,OAFD,MAEO,IAAI,OAAO,IAAI,OAAO,CAAC,IAAvB,EAA6B;AAClC,QAAA,MAAM,GAAG,CAAC,aAAV;AACD,OAFM,MAEA,IAAI,OAAO,IAAI,OAAO,CAAC,KAAvB,EAA8B;AACnC,QAAA,MAAM,GAAG,aAAT;AACD,OAFM,MAEA;AACL,QAAA,MAAM,GAAG,aAAT;AACD;;AACDD,UAAM,KAAK,GAAG,CAAC,MAAD,EAAS,MAAT,CAAdA;AACA,MAAA,gBAAgB,CAAC,KAAD,EAAQ,IAAI,CAAC,WAAL,EAAR,CAAhB;AACA,MAAA,GAAG,CAAC,IAAD,EAAO,KAAP,EAAc,KAAK,SAAnB,CAAH;AACA,MAAA,eAAe,CAAC,cAAhB;AACA,MAAA,SAAS,GAAG,IAAZ;AACD;AACF;;AACD,SAAO,CAAC,SAAR;AACD;;AAED,eAAe,WAAf","sourcesContent":["/**\n * @module ol/interaction/KeyboardPan\n */\nimport {rotate as rotateCoordinate} from '../coordinate.js';\nimport EventType from '../events/EventType.js';\nimport KeyCode from '../events/KeyCode.js';\nimport {noModifierKeys, targetNotEditable} from '../events/condition.js';\nimport Interaction, {pan} from './Interaction.js';\n\n\n/**\n * @typedef {Object} Options\n * @property {import(\"../events/condition.js\").Condition} [condition] A function that\n * takes an {@link module:ol/MapBrowserEvent~MapBrowserEvent} and returns a\n * boolean to indicate whether that event should be handled. Default is\n * {@link module:ol/events/condition~noModifierKeys} and\n * {@link module:ol/events/condition~targetNotEditable}.\n * @property {number} [duration=100] Animation duration in milliseconds.\n * @property {number} [pixelDelta=128] The amount of pixels to pan on each key\n * press.\n */\n\n\n/**\n * @classdesc\n * Allows the user to pan the map using keyboard arrows.\n * Note that, although this interaction is by default included in maps,\n * the keys can only be used when browser focus is on the element to which\n * the keyboard events are attached. By default, this is the map div,\n * though you can change this with the `keyboardEventTarget` in\n * {@link module:ol/Map~Map}. `document` never loses focus but, for any other\n * element, focus will have to be on, and returned to, this element if the keys\n * are to function.\n * See also {@link module:ol/interaction/KeyboardZoom~KeyboardZoom}.\n * @api\n */\nclass KeyboardPan extends Interaction {\n  /**\n   * @param {Options=} opt_options Options.\n   */\n  constructor(opt_options) {\n\n    super({\n      handleEvent: handleEvent\n    });\n\n    const options = opt_options || {};\n\n    /**\n     * @private\n     * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Browser event.\n     * @return {boolean} Combined condition result.\n     */\n    this.defaultCondition_ = function(mapBrowserEvent) {\n      return noModifierKeys(mapBrowserEvent) &&\n        targetNotEditable(mapBrowserEvent);\n    };\n\n    /**\n     * @private\n     * @type {import(\"../events/condition.js\").Condition}\n     */\n    this.condition_ = options.condition !== undefined ?\n      options.condition : this.defaultCondition_;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.duration_ = options.duration !== undefined ? options.duration : 100;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.pixelDelta_ = options.pixelDelta !== undefined ?\n      options.pixelDelta : 128;\n\n  }\n\n}\n\n\n/**\n * Handles the {@link module:ol/MapBrowserEvent map browser event} if it was a\n * `KeyEvent`, and decides the direction to pan to (if an arrow key was\n * pressed).\n * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Map browser event.\n * @return {boolean} `false` to stop event propagation.\n * @this {KeyboardPan}\n */\nfunction handleEvent(mapBrowserEvent) {\n  let stopEvent = false;\n  if (mapBrowserEvent.type == EventType.KEYDOWN) {\n    const keyEvent = /** @type {KeyboardEvent} */ (mapBrowserEvent.originalEvent);\n    const keyCode = keyEvent.keyCode;\n    if (this.condition_(mapBrowserEvent) &&\n        (keyCode == KeyCode.DOWN ||\n        keyCode == KeyCode.LEFT ||\n        keyCode == KeyCode.RIGHT ||\n        keyCode == KeyCode.UP)) {\n      const map = mapBrowserEvent.map;\n      const view = map.getView();\n      const mapUnitsDelta = view.getResolution() * this.pixelDelta_;\n      let deltaX = 0, deltaY = 0;\n      if (keyCode == KeyCode.DOWN) {\n        deltaY = -mapUnitsDelta;\n      } else if (keyCode == KeyCode.LEFT) {\n        deltaX = -mapUnitsDelta;\n      } else if (keyCode == KeyCode.RIGHT) {\n        deltaX = mapUnitsDelta;\n      } else {\n        deltaY = mapUnitsDelta;\n      }\n      const delta = [deltaX, deltaY];\n      rotateCoordinate(delta, view.getRotation());\n      pan(view, delta, this.duration_);\n      mapBrowserEvent.preventDefault();\n      stopEvent = true;\n    }\n  }\n  return !stopEvent;\n}\n\nexport default KeyboardPan;\n"]},"metadata":{},"sourceType":"module"}