{"ast":null,"code":"/**\n * @module ol/interaction/MouseWheelZoom\n */\nimport { inherits } from '../util.js';\nimport ViewHint from '../ViewHint.js';\nimport { always } from '../events/condition.js';\nimport { easeOut } from '../easing.js';\nimport EventType from '../events/EventType.js';\nimport { DEVICE_PIXEL_RATIO, FIREFOX, SAFARI } from '../has.js';\nimport Interaction, { zoomByDelta } from '../interaction/Interaction.js';\nimport { clamp } from '../math.js';\n/**\n * Maximum mouse wheel delta.\n * @type {number}\n */\n\nconst MAX_DELTA = 1;\n/**\n * @enum {string}\n */\n\nexport const Mode = {\n  TRACKPAD: 'trackpad',\n  WHEEL: 'wheel'\n};\n/**\n * @typedef {Object} Options\n * @property {module:ol/events/condition~Condition} [condition] A function that\n * takes an {@link module:ol/MapBrowserEvent~MapBrowserEvent} and returns a\n * boolean to indicate whether that event should be handled. Default is\n * {@link module:ol/events/condition~always}.\n * @property {number} [duration=250] Animation duration in milliseconds.\n * @property {number} [timeout=80] Mouse wheel timeout duration in milliseconds.\n * @property {boolean} [constrainResolution=false] When using a trackpad or\n * magic mouse, zoom to the closest integer zoom level after the scroll gesture\n * ends.\n * @property {boolean} [useAnchor=true] Enable zooming using the mouse's\n * location as the anchor. When set to `false`, zooming in and out will zoom to\n * the center of the screen instead of zooming on the mouse's location.\n */\n\n/**\n * @classdesc\n * Allows the user to zoom the map by scrolling the mouse wheel.\n *\n * @constructor\n * @extends {module:ol/interaction/Interaction}\n * @param {module:ol/interaction/MouseWheelZoom~Options=} opt_options Options.\n * @api\n */\n\nconst MouseWheelZoom = function (opt_options) {\n  Interaction.call(this, {\n    handleEvent: handleEvent\n  });\n  const options = opt_options || {};\n  /**\n   * @private\n   * @type {number}\n   */\n\n  this.delta_ = 0;\n  /**\n   * @private\n   * @type {number}\n   */\n\n  this.duration_ = options.duration !== undefined ? options.duration : 250;\n  /**\n   * @private\n   * @type {number}\n   */\n\n  this.timeout_ = options.timeout !== undefined ? options.timeout : 80;\n  /**\n   * @private\n   * @type {boolean}\n   */\n\n  this.useAnchor_ = options.useAnchor !== undefined ? options.useAnchor : true;\n  /**\n   * @private\n   * @type {boolean}\n   */\n\n  this.constrainResolution_ = options.constrainResolution || false;\n  /**\n   * @private\n   * @type {module:ol/events/condition~Condition}\n   */\n\n  this.condition_ = options.condition ? options.condition : always;\n  /**\n   * @private\n   * @type {?module:ol/coordinate~Coordinate}\n   */\n\n  this.lastAnchor_ = null;\n  /**\n   * @private\n   * @type {number|undefined}\n   */\n\n  this.startTime_ = undefined;\n  /**\n   * @private\n   * @type {number|undefined}\n   */\n\n  this.timeoutId_ = undefined;\n  /**\n   * @private\n   * @type {module:ol/interaction/MouseWheelZoom~Mode|undefined}\n   */\n\n  this.mode_ = undefined;\n  /**\n   * Trackpad events separated by this delay will be considered separate\n   * interactions.\n   * @type {number}\n   */\n\n  this.trackpadEventGap_ = 400;\n  /**\n   * @type {number|undefined}\n   */\n\n  this.trackpadTimeoutId_ = undefined;\n  /**\n   * The number of delta values per zoom level\n   * @private\n   * @type {number}\n   */\n\n  this.trackpadDeltaPerZoom_ = 300;\n  /**\n   * The zoom factor by which scroll zooming is allowed to exceed the limits.\n   * @private\n   * @type {number}\n   */\n\n  this.trackpadZoomBuffer_ = 1.5;\n};\n\ninherits(MouseWheelZoom, Interaction);\n/**\n * Handles the {@link module:ol/MapBrowserEvent map browser event} (if it was a\n * mousewheel-event) and eventually zooms the map.\n * @param {module:ol/MapBrowserEvent} mapBrowserEvent Map browser event.\n * @return {boolean} Allow event propagation.\n * @this {module:ol/interaction/MouseWheelZoom}\n */\n\nfunction handleEvent(mapBrowserEvent) {\n  if (!this.condition_(mapBrowserEvent)) {\n    return true;\n  }\n\n  const type = mapBrowserEvent.type;\n\n  if (type !== EventType.WHEEL && type !== EventType.MOUSEWHEEL) {\n    return true;\n  }\n\n  mapBrowserEvent.preventDefault();\n  const map = mapBrowserEvent.map;\n  const wheelEvent =\n  /** @type {WheelEvent} */\n  mapBrowserEvent.originalEvent;\n\n  if (this.useAnchor_) {\n    this.lastAnchor_ = mapBrowserEvent.coordinate;\n  } // Delta normalisation inspired by\n  // https://github.com/mapbox/mapbox-gl-js/blob/001c7b9/js/ui/handler/scroll_zoom.js\n\n\n  let delta;\n\n  if (mapBrowserEvent.type == EventType.WHEEL) {\n    delta = wheelEvent.deltaY;\n\n    if (FIREFOX && wheelEvent.deltaMode === WheelEvent.DOM_DELTA_PIXEL) {\n      delta /= DEVICE_PIXEL_RATIO;\n    }\n\n    if (wheelEvent.deltaMode === WheelEvent.DOM_DELTA_LINE) {\n      delta *= 40;\n    }\n  } else if (mapBrowserEvent.type == EventType.MOUSEWHEEL) {\n    delta = -wheelEvent.wheelDeltaY;\n\n    if (SAFARI) {\n      delta /= 3;\n    }\n  }\n\n  if (delta === 0) {\n    return false;\n  }\n\n  const now = Date.now();\n\n  if (this.startTime_ === undefined) {\n    this.startTime_ = now;\n  }\n\n  if (!this.mode_ || now - this.startTime_ > this.trackpadEventGap_) {\n    this.mode_ = Math.abs(delta) < 4 ? Mode.TRACKPAD : Mode.WHEEL;\n  }\n\n  if (this.mode_ === Mode.TRACKPAD) {\n    const view = map.getView();\n\n    if (this.trackpadTimeoutId_) {\n      clearTimeout(this.trackpadTimeoutId_);\n    } else {\n      view.setHint(ViewHint.INTERACTING, 1);\n    }\n\n    this.trackpadTimeoutId_ = setTimeout(this.decrementInteractingHint_.bind(this), this.trackpadEventGap_);\n    let resolution = view.getResolution() * Math.pow(2, delta / this.trackpadDeltaPerZoom_);\n    const minResolution = view.getMinResolution();\n    const maxResolution = view.getMaxResolution();\n    let rebound = 0;\n\n    if (resolution < minResolution) {\n      resolution = Math.max(resolution, minResolution / this.trackpadZoomBuffer_);\n      rebound = 1;\n    } else if (resolution > maxResolution) {\n      resolution = Math.min(resolution, maxResolution * this.trackpadZoomBuffer_);\n      rebound = -1;\n    }\n\n    if (this.lastAnchor_) {\n      const center = view.calculateCenterZoom(resolution, this.lastAnchor_);\n      view.setCenter(view.constrainCenter(center));\n    }\n\n    view.setResolution(resolution);\n\n    if (rebound === 0 && this.constrainResolution_) {\n      view.animate({\n        resolution: view.constrainResolution(resolution, delta > 0 ? -1 : 1),\n        easing: easeOut,\n        anchor: this.lastAnchor_,\n        duration: this.duration_\n      });\n    }\n\n    if (rebound > 0) {\n      view.animate({\n        resolution: minResolution,\n        easing: easeOut,\n        anchor: this.lastAnchor_,\n        duration: 500\n      });\n    } else if (rebound < 0) {\n      view.animate({\n        resolution: maxResolution,\n        easing: easeOut,\n        anchor: this.lastAnchor_,\n        duration: 500\n      });\n    }\n\n    this.startTime_ = now;\n    return false;\n  }\n\n  this.delta_ += delta;\n  const timeLeft = Math.max(this.timeout_ - (now - this.startTime_), 0);\n  clearTimeout(this.timeoutId_);\n  this.timeoutId_ = setTimeout(this.handleWheelZoom_.bind(this, map), timeLeft);\n  return false;\n}\n/**\n * @private\n */\n\n\nMouseWheelZoom.prototype.decrementInteractingHint_ = function () {\n  this.trackpadTimeoutId_ = undefined;\n  const view = this.getMap().getView();\n  view.setHint(ViewHint.INTERACTING, -1);\n};\n/**\n * @private\n * @param {module:ol/PluggableMap} map Map.\n */\n\n\nMouseWheelZoom.prototype.handleWheelZoom_ = function (map) {\n  const view = map.getView();\n\n  if (view.getAnimating()) {\n    view.cancelAnimations();\n  }\n\n  const maxDelta = MAX_DELTA;\n  const delta = clamp(this.delta_, -maxDelta, maxDelta);\n  zoomByDelta(view, -delta, this.lastAnchor_, this.duration_);\n  this.mode_ = undefined;\n  this.delta_ = 0;\n  this.lastAnchor_ = null;\n  this.startTime_ = undefined;\n  this.timeoutId_ = undefined;\n};\n/**\n * Enable or disable using the mouse's location as an anchor when zooming\n * @param {boolean} useAnchor true to zoom to the mouse's location, false\n * to zoom to the center of the map\n * @api\n */\n\n\nMouseWheelZoom.prototype.setMouseAnchor = function (useAnchor) {\n  this.useAnchor_ = useAnchor;\n\n  if (!useAnchor) {\n    this.lastAnchor_ = null;\n  }\n};\n\nexport default MouseWheelZoom;","map":null,"metadata":{},"sourceType":"module"}