{"ast":null,"code":"/**\n * @module ol/has\n */\nvar ua = typeof navigator !== 'undefined' ? navigator.userAgent.toLowerCase() : '';\n/**\n * User agent string says we are dealing with Firefox as browser.\n * @type {boolean}\n */\n\nexport var FIREFOX = ua.indexOf('firefox') !== -1;\n/**\n * User agent string says we are dealing with Safari as browser.\n * @type {boolean}\n */\n\nexport var SAFARI = ua.indexOf('safari') !== -1 && ua.indexOf('chrom') == -1;\n/**\n * User agent string says we are dealing with a WebKit engine.\n * @type {boolean}\n */\n\nexport var WEBKIT = ua.indexOf('webkit') !== -1 && ua.indexOf('edge') == -1;\n/**\n * User agent string says we are dealing with a Mac as platform.\n * @type {boolean}\n */\n\nexport var MAC = ua.indexOf('macintosh') !== -1;\n/**\n * The ratio between physical pixels and device-independent pixels\n * (dips) on the device (`window.devicePixelRatio`).\n * @const\n * @type {number}\n * @api\n */\n\nexport var DEVICE_PIXEL_RATIO = window.devicePixelRatio || 1;\n/**\n * True if the browser's Canvas implementation implements {get,set}LineDash.\n * @type {boolean}\n */\n\nexport var CANVAS_LINE_DASH = function () {\n  var has = false;\n\n  try {\n    has = !!document.createElement('canvas').getContext('2d').setLineDash;\n  } catch (e) {// pass\n  }\n\n  return has;\n}();\n/**\n * Is HTML5 geolocation supported in the current browser?\n * @const\n * @type {boolean}\n * @api\n */\n\nexport var GEOLOCATION = 'geolocation' in navigator;\n/**\n * True if browser supports touch events.\n * @const\n * @type {boolean}\n * @api\n */\n\nexport var TOUCH = 'ontouchstart' in window;\n/**\n * True if browser supports pointer events.\n * @const\n * @type {boolean}\n */\n\nexport var POINTER = 'PointerEvent' in window;\n/**\n * True if browser supports ms pointer events (IE 10).\n * @const\n * @type {boolean}\n */\n\nexport var MSPOINTER = !!navigator.msPointerEnabled;\nexport { HAS as WEBGL } from './webgl.js';","map":{"version":3,"sources":["../../src/ol/has.js"],"names":["const","let"],"mappings":"AAAA;;;AAIAA,IAAM,EAAE,GAAG,OAAO,SAAP,KAAqB,WAArB,GACT,SAAS,CAAC,SAAV,CAAoB,WAApB,EADS,GAC2B,EADtCA;;;;;;AAOA,OAAOA,IAAM,OAAO,GAAG,EAAE,CAAC,OAAH,CAAW,SAAX,MAA0B,CAAC,CAA3CA;;;;;;AAMP,OAAOA,IAAM,MAAM,GAAG,EAAE,CAAC,OAAH,CAAW,QAAX,MAAyB,CAAC,CAA1B,IAA+B,EAAE,CAAC,OAAH,CAAW,OAAX,KAAuB,CAAC,CAAtEA;;;;;;AAMP,OAAOA,IAAM,MAAM,GAAG,EAAE,CAAC,OAAH,CAAW,QAAX,MAAyB,CAAC,CAA1B,IAA+B,EAAE,CAAC,OAAH,CAAW,MAAX,KAAsB,CAAC,CAArEA;;;;;;AAMP,OAAOA,IAAM,GAAG,GAAG,EAAE,CAAC,OAAH,CAAW,WAAX,MAA4B,CAAC,CAAzCA;;;;;;;;;AAUP,OAAOA,IAAM,kBAAkB,GAAG,MAAM,CAAC,gBAAP,IAA2B,CAAtDA;;;;;;AAOP,OAAOA,IAAM,gBAAgB,GAAG,YAAW;AACzCC,MAAI,GAAG,GAAG,KAAVA;;AACA,MAAI;AACF,IAAA,GAAG,GAAG,CAAC,CAAC,QAAQ,CAAC,aAAT,CAAuB,QAAvB,EAAiC,UAAjC,CAA4C,IAA5C,EAAkD,WAA1D;AACD,GAFD,CAEE,OAAO,CAAP,EAAU,C;AAEX;;AACD,SAAO,GAAP;AACD,CAR+B,EAAzBD;;;;;;;;AAiBP,OAAOA,IAAM,WAAW,GAAG,iBAAiB,SAArCA;;;;;;;;AASP,OAAOA,IAAM,KAAK,GAAG,kBAAkB,MAAhCA;;;;;;;AAQP,OAAOA,IAAM,OAAO,GAAG,kBAAkB,MAAlCA;;;;;;;AAQP,OAAOA,IAAM,SAAS,GAAG,CAAC,CAAE,SAAS,CAAC,gBAA/BA;AAGP,SAAQ,GAAG,IAAI,KAAf,QAA2B,YAA3B","sourcesContent":["/**\n * @module ol/has\n */\n\nconst ua = typeof navigator !== 'undefined' ?\n  navigator.userAgent.toLowerCase() : '';\n\n/**\n * User agent string says we are dealing with Firefox as browser.\n * @type {boolean}\n */\nexport const FIREFOX = ua.indexOf('firefox') !== -1;\n\n/**\n * User agent string says we are dealing with Safari as browser.\n * @type {boolean}\n */\nexport const SAFARI = ua.indexOf('safari') !== -1 && ua.indexOf('chrom') == -1;\n\n/**\n * User agent string says we are dealing with a WebKit engine.\n * @type {boolean}\n */\nexport const WEBKIT = ua.indexOf('webkit') !== -1 && ua.indexOf('edge') == -1;\n\n/**\n * User agent string says we are dealing with a Mac as platform.\n * @type {boolean}\n */\nexport const MAC = ua.indexOf('macintosh') !== -1;\n\n\n/**\n * The ratio between physical pixels and device-independent pixels\n * (dips) on the device (`window.devicePixelRatio`).\n * @const\n * @type {number}\n * @api\n */\nexport const DEVICE_PIXEL_RATIO = window.devicePixelRatio || 1;\n\n\n/**\n * True if the browser's Canvas implementation implements {get,set}LineDash.\n * @type {boolean}\n */\nexport const CANVAS_LINE_DASH = function() {\n  let has = false;\n  try {\n    has = !!document.createElement('canvas').getContext('2d').setLineDash;\n  } catch (e) {\n    // pass\n  }\n  return has;\n}();\n\n\n/**\n * Is HTML5 geolocation supported in the current browser?\n * @const\n * @type {boolean}\n * @api\n */\nexport const GEOLOCATION = 'geolocation' in navigator;\n\n\n/**\n * True if browser supports touch events.\n * @const\n * @type {boolean}\n * @api\n */\nexport const TOUCH = 'ontouchstart' in window;\n\n\n/**\n * True if browser supports pointer events.\n * @const\n * @type {boolean}\n */\nexport const POINTER = 'PointerEvent' in window;\n\n\n/**\n * True if browser supports ms pointer events (IE 10).\n * @const\n * @type {boolean}\n */\nexport const MSPOINTER = !!(navigator.msPointerEnabled);\n\n\nexport {HAS as WEBGL} from './webgl.js';\n"]},"metadata":{},"sourceType":"module"}