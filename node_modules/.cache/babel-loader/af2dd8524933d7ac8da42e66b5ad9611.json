{"ast":null,"code":"/**\n * @module ol/render/Box\n */\n// FIXME add rotation\nimport { inherits } from '../util.js';\nimport Disposable from '../Disposable.js';\nimport Polygon from '../geom/Polygon.js';\n/**\n * @constructor\n * @extends {module:ol/Disposable}\n * @param {string} className CSS class name.\n */\n\nconst RenderBox = function (className) {\n  /**\n   * @type {module:ol/geom/Polygon}\n   * @private\n   */\n  this.geometry_ = null;\n  /**\n   * @type {HTMLDivElement}\n   * @private\n   */\n\n  this.element_ =\n  /** @type {HTMLDivElement} */\n  document.createElement('div');\n  this.element_.style.position = 'absolute';\n  this.element_.className = 'ol-box ' + className;\n  /**\n   * @private\n   * @type {module:ol/PluggableMap}\n   */\n\n  this.map_ = null;\n  /**\n   * @private\n   * @type {module:ol~Pixel}\n   */\n\n  this.startPixel_ = null;\n  /**\n   * @private\n   * @type {module:ol~Pixel}\n   */\n\n  this.endPixel_ = null;\n};\n\ninherits(RenderBox, Disposable);\n/**\n * @inheritDoc\n */\n\nRenderBox.prototype.disposeInternal = function () {\n  this.setMap(null);\n};\n/**\n * @private\n */\n\n\nRenderBox.prototype.render_ = function () {\n  const startPixel = this.startPixel_;\n  const endPixel = this.endPixel_;\n  const px = 'px';\n  const style = this.element_.style;\n  style.left = Math.min(startPixel[0], endPixel[0]) + px;\n  style.top = Math.min(startPixel[1], endPixel[1]) + px;\n  style.width = Math.abs(endPixel[0] - startPixel[0]) + px;\n  style.height = Math.abs(endPixel[1] - startPixel[1]) + px;\n};\n/**\n * @param {module:ol/PluggableMap} map Map.\n */\n\n\nRenderBox.prototype.setMap = function (map) {\n  if (this.map_) {\n    this.map_.getOverlayContainer().removeChild(this.element_);\n    const style = this.element_.style;\n    style.left = style.top = style.width = style.height = 'inherit';\n  }\n\n  this.map_ = map;\n\n  if (this.map_) {\n    this.map_.getOverlayContainer().appendChild(this.element_);\n  }\n};\n/**\n * @param {module:ol~Pixel} startPixel Start pixel.\n * @param {module:ol~Pixel} endPixel End pixel.\n */\n\n\nRenderBox.prototype.setPixels = function (startPixel, endPixel) {\n  this.startPixel_ = startPixel;\n  this.endPixel_ = endPixel;\n  this.createOrUpdateGeometry();\n  this.render_();\n};\n/**\n * Creates or updates the cached geometry.\n */\n\n\nRenderBox.prototype.createOrUpdateGeometry = function () {\n  const startPixel = this.startPixel_;\n  const endPixel = this.endPixel_;\n  const pixels = [startPixel, [startPixel[0], endPixel[1]], endPixel, [endPixel[0], startPixel[1]]];\n  const coordinates = pixels.map(this.map_.getCoordinateFromPixel, this.map_); // close the polygon\n\n  coordinates[4] = coordinates[0].slice();\n\n  if (!this.geometry_) {\n    this.geometry_ = new Polygon([coordinates]);\n  } else {\n    this.geometry_.setCoordinates([coordinates]);\n  }\n};\n/**\n * @return {module:ol/geom/Polygon} Geometry.\n */\n\n\nRenderBox.prototype.getGeometry = function () {\n  return this.geometry_;\n};\n\nexport default RenderBox;","map":null,"metadata":{},"sourceType":"module"}