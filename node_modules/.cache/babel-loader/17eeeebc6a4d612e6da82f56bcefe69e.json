{"ast":null,"code":"/**\n * @module ol/style/IconImageCache\n */\nimport { asString } from '../color.js';\n/**\n * @classdesc\n * Singleton class. Available through {@link module:ol/style/IconImageCache~shared}.\n */\n\nvar IconImageCache = function IconImageCache() {\n  /**\n  * @type {!Object<string, import(\"./IconImage.js\").default>}\n  * @private\n  */\n  this.cache_ = {};\n  /**\n  * @type {number}\n  * @private\n  */\n\n  this.cacheSize_ = 0;\n  /**\n  * @type {number}\n  * @private\n  */\n\n  this.maxCacheSize_ = 32;\n};\n/**\n* FIXME empty description for jsdoc\n*/\n\n\nIconImageCache.prototype.clear = function clear() {\n  this.cache_ = {};\n  this.cacheSize_ = 0;\n};\n/**\n* FIXME empty description for jsdoc\n*/\n\n\nIconImageCache.prototype.expire = function expire() {\n  if (this.cacheSize_ > this.maxCacheSize_) {\n    var i = 0;\n\n    for (var key in this.cache_) {\n      var iconImage = this.cache_[key];\n\n      if ((i++ & 3) === 0 && !iconImage.hasListener()) {\n        delete this.cache_[key];\n        --this.cacheSize_;\n      }\n    }\n  }\n};\n/**\n* @param {string} src Src.\n* @param {?string} crossOrigin Cross origin.\n* @param {import(\"../color.js\").Color} color Color.\n* @return {import(\"./IconImage.js\").default} Icon image.\n*/\n\n\nIconImageCache.prototype.get = function get(src, crossOrigin, color) {\n  var key = getKey(src, crossOrigin, color);\n  return key in this.cache_ ? this.cache_[key] : null;\n};\n/**\n* @param {string} src Src.\n* @param {?string} crossOrigin Cross origin.\n* @param {import(\"../color.js\").Color} color Color.\n* @param {import(\"./IconImage.js\").default} iconImage Icon image.\n*/\n\n\nIconImageCache.prototype.set = function set(src, crossOrigin, color, iconImage) {\n  var key = getKey(src, crossOrigin, color);\n  this.cache_[key] = iconImage;\n  ++this.cacheSize_;\n};\n/**\n* Set the cache size of the icon cache. Default is `32`. Change this value when\n* your map uses more than 32 different icon images and you are not caching icon\n* styles on the application level.\n* @param {number} maxCacheSize Cache max size.\n* @api\n*/\n\n\nIconImageCache.prototype.setSize = function setSize(maxCacheSize) {\n  this.maxCacheSize_ = maxCacheSize;\n  this.expire();\n};\n/**\n * @param {string} src Src.\n * @param {?string} crossOrigin Cross origin.\n * @param {import(\"../color.js\").Color} color Color.\n * @return {string} Cache key.\n */\n\n\nfunction getKey(src, crossOrigin, color) {\n  var colorString = color ? asString(color) : 'null';\n  return crossOrigin + ':' + src + ':' + colorString;\n}\n\nexport default IconImageCache;\n/**\n * The {@link module:ol/style/IconImageCache~IconImageCache} for\n * {@link module:ol/style/Icon~Icon} images.\n * @api\n */\n\nexport var shared = new IconImageCache();","map":{"version":3,"sources":["../../../src/ol/style/IconImageCache.js"],"names":["let","const"],"mappings":"AAAA;;;AAGA,SAAQ,QAAR,QAAuB,aAAvB;;;;;;AAMA,IAAM,cAAc,GAClB,SAAA,cAAA,GAAc;AAEZ;;;;AAIA,OAAK,MAAL,GAAc,EAAd;AAEA;;;;;AAIA,OAAK,UAAL,GAAkB,CAAlB;AAEA;;;;;AAIA,OAAK,aAAL,GAAqB,EAArB;AACF,CApBF;AAsBE;;;;;AAGF,cAAA,CAAA,SAAA,CAAE,KAAF,GAAE,SAAA,KAAA,GAAQ;AACN,OAAK,MAAL,GAAc,EAAd;AACA,OAAK,UAAL,GAAkB,CAAlB;AACF,CAHF;AAKE;;;;;AAGF,cAAA,CAAA,SAAA,CAAE,MAAF,GAAE,SAAA,MAAA,GAAS;AACP,MAAI,KAAK,UAAL,GAAkB,KAAK,aAA3B,EAA0C;AACxCA,QAAI,CAAC,GAAG,CAARA;;AACA,SAAKC,IAAM,GAAX,IAAkB,KAAK,MAAvB,EAA+B;AAC7BA,UAAM,SAAS,GAAG,KAAK,MAAL,CAAY,GAAZ,CAAlBA;;AACA,UAAI,CAAC,CAAC,KAAK,CAAP,MAAc,CAAd,IAAmB,CAAC,SAAS,CAAC,WAAV,EAAxB,EAAiD;AAC/C,eAAO,KAAK,MAAL,CAAY,GAAZ,CAAP;AACA,UAAE,KAAK,UAAP;AACD;AACF;AACF;AACH,CAXF;AAaE;;;;;;;;AAMF,cAAA,CAAA,SAAA,CAAE,GAAF,GAAE,SAAA,GAAA,CAAI,GAAJ,EAAS,WAAT,EAAsB,KAAtB,EAA6B;AAC3BA,MAAM,GAAG,GAAG,MAAM,CAAC,GAAD,EAAM,WAAN,EAAmB,KAAnB,CAAlBA;AACA,SAAO,GAAG,IAAI,KAAK,MAAZ,GAAqB,KAAK,MAAL,CAAY,GAAZ,CAArB,GAAwC,IAA/C;AACF,CAHF;AAKE;;;;;;;;AAMF,cAAA,CAAA,SAAA,CAAE,GAAF,GAAE,SAAA,GAAA,CAAI,GAAJ,EAAS,WAAT,EAAsB,KAAtB,EAA6B,SAA7B,EAAwC;AACtCA,MAAM,GAAG,GAAG,MAAM,CAAC,GAAD,EAAM,WAAN,EAAmB,KAAnB,CAAlBA;AACA,OAAK,MAAL,CAAY,GAAZ,IAAmB,SAAnB;AACA,IAAE,KAAK,UAAP;AACF,CAJF;AAME;;;;;;;;;AAOF,cAAA,CAAA,SAAA,CAAE,OAAF,GAAE,SAAA,OAAA,CAAQ,YAAR,EAAsB;AACpB,OAAK,aAAL,GAAqB,YAArB;AACA,OAAK,MAAL;AACD,CAHH;;;;;;;;;AAaA,SAAS,MAAT,CAAgB,GAAhB,EAAqB,WAArB,EAAkC,KAAlC,EAAyC;AACvCA,MAAM,WAAW,GAAG,KAAK,GAAG,QAAQ,CAAC,KAAD,CAAX,GAAqB,MAA9CA;AACA,SAAO,WAAW,GAAG,GAAd,GAAoB,GAApB,GAA0B,GAA1B,GAAgC,WAAvC;AACD;;AAGD,eAAe,cAAf;;;;;;;AAQA,OAAOA,IAAM,MAAM,GAAG,IAAI,cAAJ,EAAfA","sourcesContent":["/**\n * @module ol/style/IconImageCache\n */\nimport {asString} from '../color.js';\n\n/**\n * @classdesc\n * Singleton class. Available through {@link module:ol/style/IconImageCache~shared}.\n */\nclass IconImageCache {\n  constructor() {\n\n    /**\n    * @type {!Object<string, import(\"./IconImage.js\").default>}\n    * @private\n    */\n    this.cache_ = {};\n\n    /**\n    * @type {number}\n    * @private\n    */\n    this.cacheSize_ = 0;\n\n    /**\n    * @type {number}\n    * @private\n    */\n    this.maxCacheSize_ = 32;\n  }\n\n  /**\n  * FIXME empty description for jsdoc\n  */\n  clear() {\n    this.cache_ = {};\n    this.cacheSize_ = 0;\n  }\n\n  /**\n  * FIXME empty description for jsdoc\n  */\n  expire() {\n    if (this.cacheSize_ > this.maxCacheSize_) {\n      let i = 0;\n      for (const key in this.cache_) {\n        const iconImage = this.cache_[key];\n        if ((i++ & 3) === 0 && !iconImage.hasListener()) {\n          delete this.cache_[key];\n          --this.cacheSize_;\n        }\n      }\n    }\n  }\n\n  /**\n  * @param {string} src Src.\n  * @param {?string} crossOrigin Cross origin.\n  * @param {import(\"../color.js\").Color} color Color.\n  * @return {import(\"./IconImage.js\").default} Icon image.\n  */\n  get(src, crossOrigin, color) {\n    const key = getKey(src, crossOrigin, color);\n    return key in this.cache_ ? this.cache_[key] : null;\n  }\n\n  /**\n  * @param {string} src Src.\n  * @param {?string} crossOrigin Cross origin.\n  * @param {import(\"../color.js\").Color} color Color.\n  * @param {import(\"./IconImage.js\").default} iconImage Icon image.\n  */\n  set(src, crossOrigin, color, iconImage) {\n    const key = getKey(src, crossOrigin, color);\n    this.cache_[key] = iconImage;\n    ++this.cacheSize_;\n  }\n\n  /**\n  * Set the cache size of the icon cache. Default is `32`. Change this value when\n  * your map uses more than 32 different icon images and you are not caching icon\n  * styles on the application level.\n  * @param {number} maxCacheSize Cache max size.\n  * @api\n  */\n  setSize(maxCacheSize) {\n    this.maxCacheSize_ = maxCacheSize;\n    this.expire();\n  }\n}\n\n\n/**\n * @param {string} src Src.\n * @param {?string} crossOrigin Cross origin.\n * @param {import(\"../color.js\").Color} color Color.\n * @return {string} Cache key.\n */\nfunction getKey(src, crossOrigin, color) {\n  const colorString = color ? asString(color) : 'null';\n  return crossOrigin + ':' + src + ':' + colorString;\n}\n\n\nexport default IconImageCache;\n\n\n/**\n * The {@link module:ol/style/IconImageCache~IconImageCache} for\n * {@link module:ol/style/Icon~Icon} images.\n * @api\n */\nexport const shared = new IconImageCache();\n"]},"metadata":{},"sourceType":"module"}