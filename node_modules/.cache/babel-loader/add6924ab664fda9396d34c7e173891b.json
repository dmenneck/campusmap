{"ast":null,"code":"/**\n * @module ol/format/GML2\n */\nimport { createOrUpdate } from '../extent.js';\nimport { transformWithOptions } from './Feature.js';\nimport GMLBase, { GMLNS } from './GMLBase.js';\nimport { writeStringTextNode } from './xsd.js';\nimport { assign } from '../obj.js';\nimport { get as getProjection, transformExtent } from '../proj.js';\nimport { createElementNS, getAllTextContent, makeArrayPusher, makeChildAppender, makeReplacer, makeSimpleNodeFactory, OBJECT_PROPERTY_NODE_FACTORY, pushParseAndPop, pushSerializeAndPop } from '../xml.js';\n/**\n * @const\n * @type {string}\n */\n\nvar schemaLocation = GMLNS + ' http://schemas.opengis.net/gml/2.1.2/feature.xsd';\n/**\n * @const\n * @type {Object<string, string>}\n */\n\nvar MULTIGEOMETRY_TO_MEMBER_NODENAME = {\n  'MultiLineString': 'lineStringMember',\n  'MultiCurve': 'curveMember',\n  'MultiPolygon': 'polygonMember',\n  'MultiSurface': 'surfaceMember'\n};\n/**\n * @classdesc\n * Feature format for reading and writing data in the GML format,\n * version 2.1.2.\n *\n * @api\n */\n\nvar GML2 =\n/*@__PURE__*/\nfunction (GMLBase) {\n  function GML2(opt_options) {\n    var options =\n    /** @type {import(\"./GMLBase.js\").Options} */\n    opt_options ? opt_options : {};\n    GMLBase.call(this, options);\n    this.FEATURE_COLLECTION_PARSERS[GMLNS]['featureMember'] = makeArrayPusher(this.readFeaturesInternal);\n    /**\n     * @inheritDoc\n     */\n\n    this.schemaLocation = options.schemaLocation ? options.schemaLocation : schemaLocation;\n  }\n\n  if (GMLBase) GML2.__proto__ = GMLBase;\n  GML2.prototype = Object.create(GMLBase && GMLBase.prototype);\n  GML2.prototype.constructor = GML2;\n  /**\n   * @param {Node} node Node.\n   * @param {Array<*>} objectStack Object stack.\n   * @private\n   * @return {Array<number>|undefined} Flat coordinates.\n   */\n\n  GML2.prototype.readFlatCoordinates_ = function readFlatCoordinates_(node, objectStack) {\n    var s = getAllTextContent(node, false).replace(/^\\s*|\\s*$/g, '');\n    var context =\n    /** @type {import(\"../xml.js\").NodeStackItem} */\n    objectStack[0];\n    var containerSrs = context['srsName'];\n    var axisOrientation = 'enu';\n\n    if (containerSrs) {\n      var proj = getProjection(containerSrs);\n\n      if (proj) {\n        axisOrientation = proj.getAxisOrientation();\n      }\n    }\n\n    var coordsGroups = s.trim().split(/\\s+/);\n    var flatCoordinates = [];\n\n    for (var i = 0, ii = coordsGroups.length; i < ii; i++) {\n      var coords = coordsGroups[i].split(/,+/);\n      var x = parseFloat(coords[0]);\n      var y = parseFloat(coords[1]);\n      var z = coords.length === 3 ? parseFloat(coords[2]) : 0;\n\n      if (axisOrientation.substr(0, 2) === 'en') {\n        flatCoordinates.push(x, y, z);\n      } else {\n        flatCoordinates.push(y, x, z);\n      }\n    }\n\n    return flatCoordinates;\n  };\n  /**\n   * @param {Element} node Node.\n   * @param {Array<*>} objectStack Object stack.\n   * @private\n   * @return {import(\"../extent.js\").Extent|undefined} Envelope.\n   */\n\n\n  GML2.prototype.readBox_ = function readBox_(node, objectStack) {\n    /** @type {Array<number>} */\n    var flatCoordinates = pushParseAndPop([null], this.BOX_PARSERS_, node, objectStack, this);\n    return createOrUpdate(flatCoordinates[1][0], flatCoordinates[1][1], flatCoordinates[1][3], flatCoordinates[1][4]);\n  };\n  /**\n   * @param {Element} node Node.\n   * @param {Array<*>} objectStack Object stack.\n   * @private\n   */\n\n\n  GML2.prototype.innerBoundaryIsParser_ = function innerBoundaryIsParser_(node, objectStack) {\n    /** @type {Array<number>|undefined} */\n    var flatLinearRing = pushParseAndPop(undefined, this.RING_PARSERS, node, objectStack, this);\n\n    if (flatLinearRing) {\n      var flatLinearRings =\n      /** @type {Array<Array<number>>} */\n      objectStack[objectStack.length - 1];\n      flatLinearRings.push(flatLinearRing);\n    }\n  };\n  /**\n   * @param {Element} node Node.\n   * @param {Array<*>} objectStack Object stack.\n   * @private\n   */\n\n\n  GML2.prototype.outerBoundaryIsParser_ = function outerBoundaryIsParser_(node, objectStack) {\n    /** @type {Array<number>|undefined} */\n    var flatLinearRing = pushParseAndPop(undefined, this.RING_PARSERS, node, objectStack, this);\n\n    if (flatLinearRing) {\n      var flatLinearRings =\n      /** @type {Array<Array<number>>} */\n      objectStack[objectStack.length - 1];\n      flatLinearRings[0] = flatLinearRing;\n    }\n  };\n  /**\n   * @const\n   * @param {*} value Value.\n   * @param {Array<*>} objectStack Object stack.\n   * @param {string=} opt_nodeName Node name.\n   * @return {Element|undefined} Node.\n   * @private\n   */\n\n\n  GML2.prototype.GEOMETRY_NODE_FACTORY_ = function GEOMETRY_NODE_FACTORY_(value, objectStack, opt_nodeName) {\n    var context = objectStack[objectStack.length - 1];\n    var multiSurface = context['multiSurface'];\n    var surface = context['surface'];\n    var multiCurve = context['multiCurve'];\n    var nodeName;\n\n    if (!Array.isArray(value)) {\n      nodeName =\n      /** @type {import(\"../geom/Geometry.js\").default} */\n      value.getType();\n\n      if (nodeName === 'MultiPolygon' && multiSurface === true) {\n        nodeName = 'MultiSurface';\n      } else if (nodeName === 'Polygon' && surface === true) {\n        nodeName = 'Surface';\n      } else if (nodeName === 'MultiLineString' && multiCurve === true) {\n        nodeName = 'MultiCurve';\n      }\n    } else {\n      nodeName = 'Envelope';\n    }\n\n    return createElementNS('http://www.opengis.net/gml', nodeName);\n  };\n  /**\n   * @param {Element} node Node.\n   * @param {import(\"../Feature.js\").default} feature Feature.\n   * @param {Array<*>} objectStack Node stack.\n   */\n\n\n  GML2.prototype.writeFeatureElement = function writeFeatureElement(node, feature, objectStack) {\n    var fid = feature.getId();\n\n    if (fid) {\n      node.setAttribute('fid',\n      /** @type {string} */\n      fid);\n    }\n\n    var context =\n    /** @type {Object} */\n    objectStack[objectStack.length - 1];\n    var featureNS = context['featureNS'];\n    var geometryName = feature.getGeometryName();\n\n    if (!context.serializers) {\n      context.serializers = {};\n      context.serializers[featureNS] = {};\n    }\n\n    var properties = feature.getProperties();\n    var keys = [];\n    var values = [];\n\n    for (var key in properties) {\n      var value = properties[key];\n\n      if (value !== null) {\n        keys.push(key);\n        values.push(value);\n\n        if (key == geometryName || typeof\n        /** @type {?} */\n        value.getSimplifiedGeometry === 'function') {\n          if (!(key in context.serializers[featureNS])) {\n            context.serializers[featureNS][key] = makeChildAppender(this.writeGeometryElement, this);\n          }\n        } else {\n          if (!(key in context.serializers[featureNS])) {\n            context.serializers[featureNS][key] = makeChildAppender(writeStringTextNode);\n          }\n        }\n      }\n    }\n\n    var item = assign({}, context);\n    item.node = node;\n    pushSerializeAndPop(\n    /** @type {import(\"../xml.js\").NodeStackItem} */\n    item, context.serializers, makeSimpleNodeFactory(undefined, featureNS), values, objectStack, keys);\n  };\n  /**\n   * @param {Element} node Node.\n   * @param {import(\"../geom/LineString.js\").default} geometry LineString geometry.\n   * @param {Array<*>} objectStack Node stack.\n   * @private\n   */\n\n\n  GML2.prototype.writeCurveOrLineString_ = function writeCurveOrLineString_(node, geometry, objectStack) {\n    var context = objectStack[objectStack.length - 1];\n    var srsName = context['srsName'];\n\n    if (node.nodeName !== 'LineStringSegment' && srsName) {\n      node.setAttribute('srsName', srsName);\n    }\n\n    if (node.nodeName === 'LineString' || node.nodeName === 'LineStringSegment') {\n      var coordinates = this.createCoordinatesNode_(node.namespaceURI);\n      node.appendChild(coordinates);\n      this.writeCoordinates_(coordinates, geometry, objectStack);\n    } else if (node.nodeName === 'Curve') {\n      var segments = createElementNS(node.namespaceURI, 'segments');\n      node.appendChild(segments);\n      this.writeCurveSegments_(segments, geometry, objectStack);\n    }\n  };\n  /**\n   * @param {Element} node Node.\n   * @param {import(\"../geom/LineString.js\").default} line LineString geometry.\n   * @param {Array<*>} objectStack Node stack.\n   * @private\n   */\n\n\n  GML2.prototype.writeLineStringOrCurveMember_ = function writeLineStringOrCurveMember_(node, line, objectStack) {\n    var child = this.GEOMETRY_NODE_FACTORY_(line, objectStack);\n\n    if (child) {\n      node.appendChild(child);\n      this.writeCurveOrLineString_(child, line, objectStack);\n    }\n  };\n  /**\n   * @param {Element} node Node.\n   * @param {import(\"../geom/MultiLineString.js\").default} geometry MultiLineString geometry.\n   * @param {Array<*>} objectStack Node stack.\n   * @private\n   */\n\n\n  GML2.prototype.writeMultiCurveOrLineString_ = function writeMultiCurveOrLineString_(node, geometry, objectStack) {\n    var context = objectStack[objectStack.length - 1];\n    var hasZ = context['hasZ'];\n    var srsName = context['srsName'];\n    var curve = context['curve'];\n\n    if (srsName) {\n      node.setAttribute('srsName', srsName);\n    }\n\n    var lines = geometry.getLineStrings();\n    pushSerializeAndPop({\n      node: node,\n      hasZ: hasZ,\n      srsName: srsName,\n      curve: curve\n    }, this.LINESTRINGORCURVEMEMBER_SERIALIZERS_, this.MULTIGEOMETRY_MEMBER_NODE_FACTORY_, lines, objectStack, undefined, this);\n  };\n  /**\n   * @param {Node} node Node.\n   * @param {import(\"../geom/Geometry.js\").default|import(\"../extent.js\").Extent} geometry Geometry.\n   * @param {Array<*>} objectStack Node stack.\n   */\n\n\n  GML2.prototype.writeGeometryElement = function writeGeometryElement(node, geometry, objectStack) {\n    var context =\n    /** @type {import(\"./Feature.js\").WriteOptions} */\n    objectStack[objectStack.length - 1];\n    var item = assign({}, context);\n    item['node'] = node;\n    var value;\n\n    if (Array.isArray(geometry)) {\n      if (context.dataProjection) {\n        value = transformExtent(geometry, context.featureProjection, context.dataProjection);\n      } else {\n        value = geometry;\n      }\n    } else {\n      value = transformWithOptions(\n      /** @type {import(\"../geom/Geometry.js\").default} */\n      geometry, true, context);\n    }\n\n    pushSerializeAndPop(\n    /** @type {import(\"../xml.js\").NodeStackItem} */\n    item, this.GEOMETRY_SERIALIZERS_, this.GEOMETRY_NODE_FACTORY_, [value], objectStack, undefined, this);\n  };\n  /**\n   * @param {string} namespaceURI XML namespace.\n   * @returns {Element} coordinates node.\n   * @private\n   */\n\n\n  GML2.prototype.createCoordinatesNode_ = function createCoordinatesNode_(namespaceURI) {\n    var coordinates = createElementNS(namespaceURI, 'coordinates');\n    coordinates.setAttribute('decimal', '.');\n    coordinates.setAttribute('cs', ',');\n    coordinates.setAttribute('ts', ' ');\n    return coordinates;\n  };\n  /**\n   * @param {Node} node Node.\n   * @param {import(\"../geom/LineString.js\").default|import(\"../geom/LinearRing.js\").default} value Geometry.\n   * @param {Array<*>} objectStack Node stack.\n   * @private\n   */\n\n\n  GML2.prototype.writeCoordinates_ = function writeCoordinates_(node, value, objectStack) {\n    var context = objectStack[objectStack.length - 1];\n    var hasZ = context['hasZ'];\n    var srsName = context['srsName']; // only 2d for simple features profile\n\n    var points = value.getCoordinates();\n    var len = points.length;\n    var parts = new Array(len);\n\n    for (var i = 0; i < len; ++i) {\n      var point = points[i];\n      parts[i] = this.getCoords_(point, srsName, hasZ);\n    }\n\n    writeStringTextNode(node, parts.join(' '));\n  };\n  /**\n   * @param {Node} node Node.\n   * @param {import(\"../geom/LineString.js\").default} line LineString geometry.\n   * @param {Array<*>} objectStack Node stack.\n   * @private\n   */\n\n\n  GML2.prototype.writeCurveSegments_ = function writeCurveSegments_(node, line, objectStack) {\n    var child = createElementNS(node.namespaceURI, 'LineStringSegment');\n    node.appendChild(child);\n    this.writeCurveOrLineString_(child, line, objectStack);\n  };\n  /**\n   * @param {Element} node Node.\n   * @param {import(\"../geom/Polygon.js\").default} geometry Polygon geometry.\n   * @param {Array<*>} objectStack Node stack.\n   * @private\n   */\n\n\n  GML2.prototype.writeSurfaceOrPolygon_ = function writeSurfaceOrPolygon_(node, geometry, objectStack) {\n    var context = objectStack[objectStack.length - 1];\n    var hasZ = context['hasZ'];\n    var srsName = context['srsName'];\n\n    if (node.nodeName !== 'PolygonPatch' && srsName) {\n      node.setAttribute('srsName', srsName);\n    }\n\n    if (node.nodeName === 'Polygon' || node.nodeName === 'PolygonPatch') {\n      var rings = geometry.getLinearRings();\n      pushSerializeAndPop({\n        node: node,\n        hasZ: hasZ,\n        srsName: srsName\n      }, this.RING_SERIALIZERS_, this.RING_NODE_FACTORY_, rings, objectStack, undefined, this);\n    } else if (node.nodeName === 'Surface') {\n      var patches = createElementNS(node.namespaceURI, 'patches');\n      node.appendChild(patches);\n      this.writeSurfacePatches_(patches, geometry, objectStack);\n    }\n  };\n  /**\n   * @param {*} value Value.\n   * @param {Array<*>} objectStack Object stack.\n   * @param {string=} opt_nodeName Node name.\n   * @return {Node} Node.\n   * @private\n   */\n\n\n  GML2.prototype.RING_NODE_FACTORY_ = function RING_NODE_FACTORY_(value, objectStack, opt_nodeName) {\n    var context = objectStack[objectStack.length - 1];\n    var parentNode = context.node;\n    var exteriorWritten = context['exteriorWritten'];\n\n    if (exteriorWritten === undefined) {\n      context['exteriorWritten'] = true;\n    }\n\n    return createElementNS(parentNode.namespaceURI, exteriorWritten !== undefined ? 'innerBoundaryIs' : 'outerBoundaryIs');\n  };\n  /**\n   * @param {Node} node Node.\n   * @param {import(\"../geom/Polygon.js\").default} polygon Polygon geometry.\n   * @param {Array<*>} objectStack Node stack.\n   * @private\n   */\n\n\n  GML2.prototype.writeSurfacePatches_ = function writeSurfacePatches_(node, polygon, objectStack) {\n    var child = createElementNS(node.namespaceURI, 'PolygonPatch');\n    node.appendChild(child);\n    this.writeSurfaceOrPolygon_(child, polygon, objectStack);\n  };\n  /**\n   * @param {Node} node Node.\n   * @param {import(\"../geom/LinearRing.js\").default} ring LinearRing geometry.\n   * @param {Array<*>} objectStack Node stack.\n   * @private\n   */\n\n\n  GML2.prototype.writeRing_ = function writeRing_(node, ring, objectStack) {\n    var linearRing = createElementNS(node.namespaceURI, 'LinearRing');\n    node.appendChild(linearRing);\n    this.writeLinearRing_(linearRing, ring, objectStack);\n  };\n  /**\n   * @param {Array<number>} point Point geometry.\n   * @param {string=} opt_srsName Optional srsName\n   * @param {boolean=} opt_hasZ whether the geometry has a Z coordinate (is 3D) or not.\n   * @return {string} The coords string.\n   * @private\n   */\n\n\n  GML2.prototype.getCoords_ = function getCoords_(point, opt_srsName, opt_hasZ) {\n    var axisOrientation = 'enu';\n\n    if (opt_srsName) {\n      axisOrientation = getProjection(opt_srsName).getAxisOrientation();\n    }\n\n    var coords = axisOrientation.substr(0, 2) === 'en' ? point[0] + ',' + point[1] : point[1] + ',' + point[0];\n\n    if (opt_hasZ) {\n      // For newly created points, Z can be undefined.\n      var z = point[2] || 0;\n      coords += ',' + z;\n    }\n\n    return coords;\n  };\n  /**\n   * @param {Element} node Node.\n   * @param {import(\"../geom/Point.js\").default} geometry Point geometry.\n   * @param {Array<*>} objectStack Node stack.\n   * @private\n   */\n\n\n  GML2.prototype.writePoint_ = function writePoint_(node, geometry, objectStack) {\n    var context = objectStack[objectStack.length - 1];\n    var hasZ = context['hasZ'];\n    var srsName = context['srsName'];\n\n    if (srsName) {\n      node.setAttribute('srsName', srsName);\n    }\n\n    var coordinates = this.createCoordinatesNode_(node.namespaceURI);\n    node.appendChild(coordinates);\n    var point = geometry.getCoordinates();\n    var coord = this.getCoords_(point, srsName, hasZ);\n    writeStringTextNode(coordinates, coord);\n  };\n  /**\n   * @param {Element} node Node.\n   * @param {import(\"../geom/MultiPoint.js\").default} geometry MultiPoint geometry.\n   * @param {Array<*>} objectStack Node stack.\n   * @private\n   */\n\n\n  GML2.prototype.writeMultiPoint_ = function writeMultiPoint_(node, geometry, objectStack) {\n    var context = objectStack[objectStack.length - 1];\n    var hasZ = context['hasZ'];\n    var srsName = context['srsName'];\n\n    if (srsName) {\n      node.setAttribute('srsName', srsName);\n    }\n\n    var points = geometry.getPoints();\n    pushSerializeAndPop({\n      node: node,\n      hasZ: hasZ,\n      srsName: srsName\n    }, this.POINTMEMBER_SERIALIZERS_, makeSimpleNodeFactory('pointMember'), points, objectStack, undefined, this);\n  };\n  /**\n   * @param {Node} node Node.\n   * @param {import(\"../geom/Point.js\").default} point Point geometry.\n   * @param {Array<*>} objectStack Node stack.\n   * @private\n   */\n\n\n  GML2.prototype.writePointMember_ = function writePointMember_(node, point, objectStack) {\n    var child = createElementNS(node.namespaceURI, 'Point');\n    node.appendChild(child);\n    this.writePoint_(child, point, objectStack);\n  };\n  /**\n   * @param {Element} node Node.\n   * @param {import(\"../geom/LinearRing.js\").default} geometry LinearRing geometry.\n   * @param {Array<*>} objectStack Node stack.\n   * @private\n   */\n\n\n  GML2.prototype.writeLinearRing_ = function writeLinearRing_(node, geometry, objectStack) {\n    var context = objectStack[objectStack.length - 1];\n    var srsName = context['srsName'];\n\n    if (srsName) {\n      node.setAttribute('srsName', srsName);\n    }\n\n    var coordinates = this.createCoordinatesNode_(node.namespaceURI);\n    node.appendChild(coordinates);\n    this.writeCoordinates_(coordinates, geometry, objectStack);\n  };\n  /**\n   * @param {Element} node Node.\n   * @param {import(\"../geom/MultiPolygon.js\").default} geometry MultiPolygon geometry.\n   * @param {Array<*>} objectStack Node stack.\n   * @private\n   */\n\n\n  GML2.prototype.writeMultiSurfaceOrPolygon_ = function writeMultiSurfaceOrPolygon_(node, geometry, objectStack) {\n    var context = objectStack[objectStack.length - 1];\n    var hasZ = context['hasZ'];\n    var srsName = context['srsName'];\n    var surface = context['surface'];\n\n    if (srsName) {\n      node.setAttribute('srsName', srsName);\n    }\n\n    var polygons = geometry.getPolygons();\n    pushSerializeAndPop({\n      node: node,\n      hasZ: hasZ,\n      srsName: srsName,\n      surface: surface\n    }, this.SURFACEORPOLYGONMEMBER_SERIALIZERS_, this.MULTIGEOMETRY_MEMBER_NODE_FACTORY_, polygons, objectStack, undefined, this);\n  };\n  /**\n   * @param {Node} node Node.\n   * @param {import(\"../geom/Polygon.js\").default} polygon Polygon geometry.\n   * @param {Array<*>} objectStack Node stack.\n   * @private\n   */\n\n\n  GML2.prototype.writeSurfaceOrPolygonMember_ = function writeSurfaceOrPolygonMember_(node, polygon, objectStack) {\n    var child = this.GEOMETRY_NODE_FACTORY_(polygon, objectStack);\n\n    if (child) {\n      node.appendChild(child);\n      this.writeSurfaceOrPolygon_(child, polygon, objectStack);\n    }\n  };\n  /**\n   * @param {Element} node Node.\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @param {Array<*>} objectStack Node stack.\n   * @private\n   */\n\n\n  GML2.prototype.writeEnvelope = function writeEnvelope(node, extent, objectStack) {\n    var context = objectStack[objectStack.length - 1];\n    var srsName = context['srsName'];\n\n    if (srsName) {\n      node.setAttribute('srsName', srsName);\n    }\n\n    var keys = ['lowerCorner', 'upperCorner'];\n    var values = [extent[0] + ' ' + extent[1], extent[2] + ' ' + extent[3]];\n    pushSerializeAndPop(\n    /** @type {import(\"../xml.js\").NodeStackItem} */\n    {\n      node: node\n    }, this.ENVELOPE_SERIALIZERS_, OBJECT_PROPERTY_NODE_FACTORY, values, objectStack, keys, this);\n  };\n  /**\n   * @const\n   * @param {*} value Value.\n   * @param {Array<*>} objectStack Object stack.\n   * @param {string=} opt_nodeName Node name.\n   * @return {Node|undefined} Node.\n   * @private\n   */\n\n\n  GML2.prototype.MULTIGEOMETRY_MEMBER_NODE_FACTORY_ = function MULTIGEOMETRY_MEMBER_NODE_FACTORY_(value, objectStack, opt_nodeName) {\n    var parentNode = objectStack[objectStack.length - 1].node;\n    return createElementNS('http://www.opengis.net/gml', MULTIGEOMETRY_TO_MEMBER_NODENAME[parentNode.nodeName]);\n  };\n\n  return GML2;\n}(GMLBase);\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n * @protected\n */\n\n\nGML2.prototype.GEOMETRY_FLAT_COORDINATES_PARSERS = {\n  'http://www.opengis.net/gml': {\n    'coordinates': makeReplacer(GML2.prototype.readFlatCoordinates_)\n  }\n};\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n * @protected\n */\n\nGML2.prototype.FLAT_LINEAR_RINGS_PARSERS = {\n  'http://www.opengis.net/gml': {\n    'innerBoundaryIs': GML2.prototype.innerBoundaryIsParser_,\n    'outerBoundaryIs': GML2.prototype.outerBoundaryIsParser_\n  }\n};\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n * @private\n */\n\nGML2.prototype.BOX_PARSERS_ = {\n  'http://www.opengis.net/gml': {\n    'coordinates': makeArrayPusher(GML2.prototype.readFlatCoordinates_)\n  }\n};\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n * @protected\n */\n\nGML2.prototype.GEOMETRY_PARSERS = {\n  'http://www.opengis.net/gml': {\n    'Point': makeReplacer(GMLBase.prototype.readPoint),\n    'MultiPoint': makeReplacer(GMLBase.prototype.readMultiPoint),\n    'LineString': makeReplacer(GMLBase.prototype.readLineString),\n    'MultiLineString': makeReplacer(GMLBase.prototype.readMultiLineString),\n    'LinearRing': makeReplacer(GMLBase.prototype.readLinearRing),\n    'Polygon': makeReplacer(GMLBase.prototype.readPolygon),\n    'MultiPolygon': makeReplacer(GMLBase.prototype.readMultiPolygon),\n    'Box': makeReplacer(GML2.prototype.readBox_)\n  }\n};\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Serializer>>}\n * @private\n */\n\nGML2.prototype.GEOMETRY_SERIALIZERS_ = {\n  'http://www.opengis.net/gml': {\n    'Curve': makeChildAppender(GML2.prototype.writeCurveOrLineString_),\n    'MultiCurve': makeChildAppender(GML2.prototype.writeMultiCurveOrLineString_),\n    'Point': makeChildAppender(GML2.prototype.writePoint_),\n    'MultiPoint': makeChildAppender(GML2.prototype.writeMultiPoint_),\n    'LineString': makeChildAppender(GML2.prototype.writeCurveOrLineString_),\n    'MultiLineString': makeChildAppender(GML2.prototype.writeMultiCurveOrLineString_),\n    'LinearRing': makeChildAppender(GML2.prototype.writeLinearRing_),\n    'Polygon': makeChildAppender(GML2.prototype.writeSurfaceOrPolygon_),\n    'MultiPolygon': makeChildAppender(GML2.prototype.writeMultiSurfaceOrPolygon_),\n    'Surface': makeChildAppender(GML2.prototype.writeSurfaceOrPolygon_),\n    'MultiSurface': makeChildAppender(GML2.prototype.writeMultiSurfaceOrPolygon_),\n    'Envelope': makeChildAppender(GML2.prototype.writeEnvelope)\n  }\n};\n/**\n * @type {Object<string, Object<string, import(\"../xml.js\").Serializer>>}\n * @private\n */\n\nGML2.prototype.LINESTRINGORCURVEMEMBER_SERIALIZERS_ = {\n  'http://www.opengis.net/gml': {\n    'lineStringMember': makeChildAppender(GML2.prototype.writeLineStringOrCurveMember_),\n    'curveMember': makeChildAppender(GML2.prototype.writeLineStringOrCurveMember_)\n  }\n};\n/**\n * @type {Object<string, Object<string, import(\"../xml.js\").Serializer>>}\n * @private\n */\n\nGML2.prototype.RING_SERIALIZERS_ = {\n  'http://www.opengis.net/gml': {\n    'outerBoundaryIs': makeChildAppender(GML2.prototype.writeRing_),\n    'innerBoundaryIs': makeChildAppender(GML2.prototype.writeRing_)\n  }\n};\n/**\n * @type {Object<string, Object<string, import(\"../xml.js\").Serializer>>}\n * @private\n */\n\nGML2.prototype.POINTMEMBER_SERIALIZERS_ = {\n  'http://www.opengis.net/gml': {\n    'pointMember': makeChildAppender(GML2.prototype.writePointMember_)\n  }\n};\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Serializer>>}\n * @private\n */\n\nGML2.prototype.SURFACEORPOLYGONMEMBER_SERIALIZERS_ = {\n  'http://www.opengis.net/gml': {\n    'surfaceMember': makeChildAppender(GML2.prototype.writeSurfaceOrPolygonMember_),\n    'polygonMember': makeChildAppender(GML2.prototype.writeSurfaceOrPolygonMember_)\n  }\n};\n/**\n * @type {Object<string, Object<string, import(\"../xml.js\").Serializer>>}\n * @private\n */\n\nGML2.prototype.ENVELOPE_SERIALIZERS_ = {\n  'http://www.opengis.net/gml': {\n    'lowerCorner': makeChildAppender(writeStringTextNode),\n    'upperCorner': makeChildAppender(writeStringTextNode)\n  }\n};\nexport default GML2;","map":{"version":3,"sources":["../../../src/ol/format/GML2.js"],"names":["const","super","let"],"mappings":"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","sourcesContent":["/**\n * @module ol/format/GML2\n */\nimport {createOrUpdate} from '../extent.js';\nimport {transformWithOptions} from './Feature.js';\nimport GMLBase, {GMLNS} from './GMLBase.js';\nimport {writeStringTextNode} from './xsd.js';\nimport {assign} from '../obj.js';\nimport {get as getProjection, transformExtent} from '../proj.js';\nimport {createElementNS, getAllTextContent, makeArrayPusher, makeChildAppender,\n  makeReplacer, makeSimpleNodeFactory, OBJECT_PROPERTY_NODE_FACTORY, pushParseAndPop, pushSerializeAndPop} from '../xml.js';\n\n\n/**\n * @const\n * @type {string}\n */\nconst schemaLocation = GMLNS + ' http://schemas.opengis.net/gml/2.1.2/feature.xsd';\n\n\n/**\n * @const\n * @type {Object<string, string>}\n */\nconst MULTIGEOMETRY_TO_MEMBER_NODENAME = {\n  'MultiLineString': 'lineStringMember',\n  'MultiCurve': 'curveMember',\n  'MultiPolygon': 'polygonMember',\n  'MultiSurface': 'surfaceMember'\n};\n\n\n/**\n * @classdesc\n * Feature format for reading and writing data in the GML format,\n * version 2.1.2.\n *\n * @api\n */\nclass GML2 extends GMLBase {\n\n  /**\n   * @param {import(\"./GMLBase.js\").Options=} opt_options Optional configuration object.\n   */\n  constructor(opt_options) {\n    const options = /** @type {import(\"./GMLBase.js\").Options} */\n        (opt_options ? opt_options : {});\n\n    super(options);\n\n    this.FEATURE_COLLECTION_PARSERS[GMLNS][\n      'featureMember'] =\n        makeArrayPusher(this.readFeaturesInternal);\n\n    /**\n     * @inheritDoc\n     */\n    this.schemaLocation = options.schemaLocation ?\n      options.schemaLocation : schemaLocation;\n\n  }\n\n  /**\n   * @param {Node} node Node.\n   * @param {Array<*>} objectStack Object stack.\n   * @private\n   * @return {Array<number>|undefined} Flat coordinates.\n   */\n  readFlatCoordinates_(node, objectStack) {\n    const s = getAllTextContent(node, false).replace(/^\\s*|\\s*$/g, '');\n    const context = /** @type {import(\"../xml.js\").NodeStackItem} */ (objectStack[0]);\n    const containerSrs = context['srsName'];\n    let axisOrientation = 'enu';\n    if (containerSrs) {\n      const proj = getProjection(containerSrs);\n      if (proj) {\n        axisOrientation = proj.getAxisOrientation();\n      }\n    }\n    const coordsGroups = s.trim().split(/\\s+/);\n    const flatCoordinates = [];\n    for (let i = 0, ii = coordsGroups.length; i < ii; i++) {\n      const coords = coordsGroups[i].split(/,+/);\n      const x = parseFloat(coords[0]);\n      const y = parseFloat(coords[1]);\n      const z = (coords.length === 3) ? parseFloat(coords[2]) : 0;\n      if (axisOrientation.substr(0, 2) === 'en') {\n        flatCoordinates.push(x, y, z);\n      } else {\n        flatCoordinates.push(y, x, z);\n      }\n    }\n    return flatCoordinates;\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @param {Array<*>} objectStack Object stack.\n   * @private\n   * @return {import(\"../extent.js\").Extent|undefined} Envelope.\n   */\n  readBox_(node, objectStack) {\n    /** @type {Array<number>} */\n    const flatCoordinates = pushParseAndPop([null],\n      this.BOX_PARSERS_, node, objectStack, this);\n    return createOrUpdate(flatCoordinates[1][0],\n      flatCoordinates[1][1], flatCoordinates[1][3],\n      flatCoordinates[1][4]);\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @param {Array<*>} objectStack Object stack.\n   * @private\n   */\n  innerBoundaryIsParser_(node, objectStack) {\n    /** @type {Array<number>|undefined} */\n    const flatLinearRing = pushParseAndPop(undefined,\n      this.RING_PARSERS, node, objectStack, this);\n    if (flatLinearRing) {\n      const flatLinearRings = /** @type {Array<Array<number>>} */\n          (objectStack[objectStack.length - 1]);\n      flatLinearRings.push(flatLinearRing);\n    }\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @param {Array<*>} objectStack Object stack.\n   * @private\n   */\n  outerBoundaryIsParser_(node, objectStack) {\n    /** @type {Array<number>|undefined} */\n    const flatLinearRing = pushParseAndPop(undefined,\n      this.RING_PARSERS, node, objectStack, this);\n    if (flatLinearRing) {\n      const flatLinearRings = /** @type {Array<Array<number>>} */\n          (objectStack[objectStack.length - 1]);\n      flatLinearRings[0] = flatLinearRing;\n    }\n  }\n\n  /**\n   * @const\n   * @param {*} value Value.\n   * @param {Array<*>} objectStack Object stack.\n   * @param {string=} opt_nodeName Node name.\n   * @return {Element|undefined} Node.\n   * @private\n   */\n  GEOMETRY_NODE_FACTORY_(value, objectStack, opt_nodeName) {\n    const context = objectStack[objectStack.length - 1];\n    const multiSurface = context['multiSurface'];\n    const surface = context['surface'];\n    const multiCurve = context['multiCurve'];\n    let nodeName;\n    if (!Array.isArray(value)) {\n      nodeName = /** @type {import(\"../geom/Geometry.js\").default} */ (value).getType();\n      if (nodeName === 'MultiPolygon' && multiSurface === true) {\n        nodeName = 'MultiSurface';\n      } else if (nodeName === 'Polygon' && surface === true) {\n        nodeName = 'Surface';\n      } else if (nodeName === 'MultiLineString' && multiCurve === true) {\n        nodeName = 'MultiCurve';\n      }\n    } else {\n      nodeName = 'Envelope';\n    }\n    return createElementNS('http://www.opengis.net/gml',\n      nodeName);\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @param {import(\"../Feature.js\").default} feature Feature.\n   * @param {Array<*>} objectStack Node stack.\n   */\n  writeFeatureElement(node, feature, objectStack) {\n    const fid = feature.getId();\n    if (fid) {\n      node.setAttribute('fid', /** @type {string} */ (fid));\n    }\n    const context = /** @type {Object} */ (objectStack[objectStack.length - 1]);\n    const featureNS = context['featureNS'];\n    const geometryName = feature.getGeometryName();\n    if (!context.serializers) {\n      context.serializers = {};\n      context.serializers[featureNS] = {};\n    }\n    const properties = feature.getProperties();\n    const keys = [];\n    const values = [];\n    for (const key in properties) {\n      const value = properties[key];\n      if (value !== null) {\n        keys.push(key);\n        values.push(value);\n        if (key == geometryName || typeof /** @type {?} */ (value).getSimplifiedGeometry === 'function') {\n          if (!(key in context.serializers[featureNS])) {\n            context.serializers[featureNS][key] = makeChildAppender(\n              this.writeGeometryElement, this);\n          }\n        } else {\n          if (!(key in context.serializers[featureNS])) {\n            context.serializers[featureNS][key] = makeChildAppender(writeStringTextNode);\n          }\n        }\n      }\n    }\n    const item = assign({}, context);\n    item.node = node;\n    pushSerializeAndPop(/** @type {import(\"../xml.js\").NodeStackItem} */\n      (item), context.serializers,\n      makeSimpleNodeFactory(undefined, featureNS),\n      values,\n      objectStack, keys);\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @param {import(\"../geom/LineString.js\").default} geometry LineString geometry.\n   * @param {Array<*>} objectStack Node stack.\n   * @private\n   */\n  writeCurveOrLineString_(node, geometry, objectStack) {\n    const context = objectStack[objectStack.length - 1];\n    const srsName = context['srsName'];\n    if (node.nodeName !== 'LineStringSegment' && srsName) {\n      node.setAttribute('srsName', srsName);\n    }\n    if (node.nodeName === 'LineString' ||\n        node.nodeName === 'LineStringSegment') {\n      const coordinates = this.createCoordinatesNode_(node.namespaceURI);\n      node.appendChild(coordinates);\n      this.writeCoordinates_(coordinates, geometry, objectStack);\n    } else if (node.nodeName === 'Curve') {\n      const segments = createElementNS(node.namespaceURI, 'segments');\n      node.appendChild(segments);\n      this.writeCurveSegments_(segments,\n        geometry, objectStack);\n    }\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @param {import(\"../geom/LineString.js\").default} line LineString geometry.\n   * @param {Array<*>} objectStack Node stack.\n   * @private\n   */\n  writeLineStringOrCurveMember_(node, line, objectStack) {\n    const child = this.GEOMETRY_NODE_FACTORY_(line, objectStack);\n    if (child) {\n      node.appendChild(child);\n      this.writeCurveOrLineString_(child, line, objectStack);\n    }\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @param {import(\"../geom/MultiLineString.js\").default} geometry MultiLineString geometry.\n   * @param {Array<*>} objectStack Node stack.\n   * @private\n   */\n  writeMultiCurveOrLineString_(node, geometry, objectStack) {\n    const context = objectStack[objectStack.length - 1];\n    const hasZ = context['hasZ'];\n    const srsName = context['srsName'];\n    const curve = context['curve'];\n    if (srsName) {\n      node.setAttribute('srsName', srsName);\n    }\n    const lines = geometry.getLineStrings();\n    pushSerializeAndPop({node: node, hasZ: hasZ, srsName: srsName, curve: curve},\n      this.LINESTRINGORCURVEMEMBER_SERIALIZERS_,\n      this.MULTIGEOMETRY_MEMBER_NODE_FACTORY_, lines,\n      objectStack, undefined, this);\n  }\n\n  /**\n   * @param {Node} node Node.\n   * @param {import(\"../geom/Geometry.js\").default|import(\"../extent.js\").Extent} geometry Geometry.\n   * @param {Array<*>} objectStack Node stack.\n   */\n  writeGeometryElement(node, geometry, objectStack) {\n    const context = /** @type {import(\"./Feature.js\").WriteOptions} */ (objectStack[objectStack.length - 1]);\n    const item = assign({}, context);\n    item['node'] = node;\n    let value;\n    if (Array.isArray(geometry)) {\n      if (context.dataProjection) {\n        value = transformExtent(\n          geometry, context.featureProjection, context.dataProjection);\n      } else {\n        value = geometry;\n      }\n    } else {\n      value = transformWithOptions(/** @type {import(\"../geom/Geometry.js\").default} */ (geometry), true, context);\n    }\n    pushSerializeAndPop(/** @type {import(\"../xml.js\").NodeStackItem} */\n      (item), this.GEOMETRY_SERIALIZERS_,\n      this.GEOMETRY_NODE_FACTORY_, [value],\n      objectStack, undefined, this);\n  }\n\n  /**\n   * @param {string} namespaceURI XML namespace.\n   * @returns {Element} coordinates node.\n   * @private\n   */\n  createCoordinatesNode_(namespaceURI) {\n    const coordinates = createElementNS(namespaceURI, 'coordinates');\n    coordinates.setAttribute('decimal', '.');\n    coordinates.setAttribute('cs', ',');\n    coordinates.setAttribute('ts', ' ');\n\n    return coordinates;\n  }\n\n  /**\n   * @param {Node} node Node.\n   * @param {import(\"../geom/LineString.js\").default|import(\"../geom/LinearRing.js\").default} value Geometry.\n   * @param {Array<*>} objectStack Node stack.\n   * @private\n   */\n  writeCoordinates_(node, value, objectStack) {\n    const context = objectStack[objectStack.length - 1];\n    const hasZ = context['hasZ'];\n    const srsName = context['srsName'];\n    // only 2d for simple features profile\n    const points = value.getCoordinates();\n    const len = points.length;\n    const parts = new Array(len);\n    for (let i = 0; i < len; ++i) {\n      const point = points[i];\n      parts[i] = this.getCoords_(point, srsName, hasZ);\n    }\n    writeStringTextNode(node, parts.join(' '));\n  }\n\n  /**\n   * @param {Node} node Node.\n   * @param {import(\"../geom/LineString.js\").default} line LineString geometry.\n   * @param {Array<*>} objectStack Node stack.\n   * @private\n   */\n  writeCurveSegments_(node, line, objectStack) {\n    const child = createElementNS(node.namespaceURI, 'LineStringSegment');\n    node.appendChild(child);\n    this.writeCurveOrLineString_(child, line, objectStack);\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @param {import(\"../geom/Polygon.js\").default} geometry Polygon geometry.\n   * @param {Array<*>} objectStack Node stack.\n   * @private\n   */\n  writeSurfaceOrPolygon_(node, geometry, objectStack) {\n    const context = objectStack[objectStack.length - 1];\n    const hasZ = context['hasZ'];\n    const srsName = context['srsName'];\n    if (node.nodeName !== 'PolygonPatch' && srsName) {\n      node.setAttribute('srsName', srsName);\n    }\n    if (node.nodeName === 'Polygon' || node.nodeName === 'PolygonPatch') {\n      const rings = geometry.getLinearRings();\n      pushSerializeAndPop(\n        {node: node, hasZ: hasZ, srsName: srsName},\n        this.RING_SERIALIZERS_,\n        this.RING_NODE_FACTORY_,\n        rings, objectStack, undefined, this);\n    } else if (node.nodeName === 'Surface') {\n      const patches = createElementNS(node.namespaceURI, 'patches');\n      node.appendChild(patches);\n      this.writeSurfacePatches_(\n        patches, geometry, objectStack);\n    }\n  }\n\n  /**\n   * @param {*} value Value.\n   * @param {Array<*>} objectStack Object stack.\n   * @param {string=} opt_nodeName Node name.\n   * @return {Node} Node.\n   * @private\n   */\n  RING_NODE_FACTORY_(value, objectStack, opt_nodeName) {\n    const context = objectStack[objectStack.length - 1];\n    const parentNode = context.node;\n    const exteriorWritten = context['exteriorWritten'];\n    if (exteriorWritten === undefined) {\n      context['exteriorWritten'] = true;\n    }\n    return createElementNS(parentNode.namespaceURI,\n      exteriorWritten !== undefined ? 'innerBoundaryIs' : 'outerBoundaryIs');\n  }\n\n  /**\n   * @param {Node} node Node.\n   * @param {import(\"../geom/Polygon.js\").default} polygon Polygon geometry.\n   * @param {Array<*>} objectStack Node stack.\n   * @private\n   */\n  writeSurfacePatches_(node, polygon, objectStack) {\n    const child = createElementNS(node.namespaceURI, 'PolygonPatch');\n    node.appendChild(child);\n    this.writeSurfaceOrPolygon_(child, polygon, objectStack);\n  }\n\n  /**\n   * @param {Node} node Node.\n   * @param {import(\"../geom/LinearRing.js\").default} ring LinearRing geometry.\n   * @param {Array<*>} objectStack Node stack.\n   * @private\n   */\n  writeRing_(node, ring, objectStack) {\n    const linearRing = createElementNS(node.namespaceURI, 'LinearRing');\n    node.appendChild(linearRing);\n    this.writeLinearRing_(linearRing, ring, objectStack);\n  }\n\n  /**\n   * @param {Array<number>} point Point geometry.\n   * @param {string=} opt_srsName Optional srsName\n   * @param {boolean=} opt_hasZ whether the geometry has a Z coordinate (is 3D) or not.\n   * @return {string} The coords string.\n   * @private\n   */\n  getCoords_(point, opt_srsName, opt_hasZ) {\n    let axisOrientation = 'enu';\n    if (opt_srsName) {\n      axisOrientation = getProjection(opt_srsName).getAxisOrientation();\n    }\n    let coords = ((axisOrientation.substr(0, 2) === 'en') ?\n      point[0] + ',' + point[1] :\n      point[1] + ',' + point[0]);\n    if (opt_hasZ) {\n      // For newly created points, Z can be undefined.\n      const z = point[2] || 0;\n      coords += ',' + z;\n    }\n\n    return coords;\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @param {import(\"../geom/Point.js\").default} geometry Point geometry.\n   * @param {Array<*>} objectStack Node stack.\n   * @private\n   */\n  writePoint_(node, geometry, objectStack) {\n    const context = objectStack[objectStack.length - 1];\n    const hasZ = context['hasZ'];\n    const srsName = context['srsName'];\n    if (srsName) {\n      node.setAttribute('srsName', srsName);\n    }\n    const coordinates = this.createCoordinatesNode_(node.namespaceURI);\n    node.appendChild(coordinates);\n    const point = geometry.getCoordinates();\n    const coord = this.getCoords_(point, srsName, hasZ);\n    writeStringTextNode(coordinates, coord);\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @param {import(\"../geom/MultiPoint.js\").default} geometry MultiPoint geometry.\n   * @param {Array<*>} objectStack Node stack.\n   * @private\n   */\n  writeMultiPoint_(node, geometry, objectStack) {\n    const context = objectStack[objectStack.length - 1];\n    const hasZ = context['hasZ'];\n    const srsName = context['srsName'];\n    if (srsName) {\n      node.setAttribute('srsName', srsName);\n    }\n    const points = geometry.getPoints();\n    pushSerializeAndPop({node: node, hasZ: hasZ, srsName: srsName},\n      this.POINTMEMBER_SERIALIZERS_,\n      makeSimpleNodeFactory('pointMember'), points,\n      objectStack, undefined, this);\n  }\n\n  /**\n   * @param {Node} node Node.\n   * @param {import(\"../geom/Point.js\").default} point Point geometry.\n   * @param {Array<*>} objectStack Node stack.\n   * @private\n   */\n  writePointMember_(node, point, objectStack) {\n    const child = createElementNS(node.namespaceURI, 'Point');\n    node.appendChild(child);\n    this.writePoint_(child, point, objectStack);\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @param {import(\"../geom/LinearRing.js\").default} geometry LinearRing geometry.\n   * @param {Array<*>} objectStack Node stack.\n   * @private\n   */\n  writeLinearRing_(node, geometry, objectStack) {\n    const context = objectStack[objectStack.length - 1];\n    const srsName = context['srsName'];\n    if (srsName) {\n      node.setAttribute('srsName', srsName);\n    }\n    const coordinates = this.createCoordinatesNode_(node.namespaceURI);\n    node.appendChild(coordinates);\n    this.writeCoordinates_(coordinates, geometry, objectStack);\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @param {import(\"../geom/MultiPolygon.js\").default} geometry MultiPolygon geometry.\n   * @param {Array<*>} objectStack Node stack.\n   * @private\n   */\n  writeMultiSurfaceOrPolygon_(node, geometry, objectStack) {\n    const context = objectStack[objectStack.length - 1];\n    const hasZ = context['hasZ'];\n    const srsName = context['srsName'];\n    const surface = context['surface'];\n    if (srsName) {\n      node.setAttribute('srsName', srsName);\n    }\n    const polygons = geometry.getPolygons();\n    pushSerializeAndPop({node: node, hasZ: hasZ, srsName: srsName, surface: surface},\n      this.SURFACEORPOLYGONMEMBER_SERIALIZERS_,\n      this.MULTIGEOMETRY_MEMBER_NODE_FACTORY_, polygons,\n      objectStack, undefined, this);\n  }\n\n  /**\n   * @param {Node} node Node.\n   * @param {import(\"../geom/Polygon.js\").default} polygon Polygon geometry.\n   * @param {Array<*>} objectStack Node stack.\n   * @private\n   */\n  writeSurfaceOrPolygonMember_(node, polygon, objectStack) {\n    const child = this.GEOMETRY_NODE_FACTORY_(\n      polygon, objectStack);\n    if (child) {\n      node.appendChild(child);\n      this.writeSurfaceOrPolygon_(child, polygon, objectStack);\n    }\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @param {Array<*>} objectStack Node stack.\n   * @private\n   */\n  writeEnvelope(node, extent, objectStack) {\n    const context = objectStack[objectStack.length - 1];\n    const srsName = context['srsName'];\n    if (srsName) {\n      node.setAttribute('srsName', srsName);\n    }\n    const keys = ['lowerCorner', 'upperCorner'];\n    const values = [extent[0] + ' ' + extent[1], extent[2] + ' ' + extent[3]];\n    pushSerializeAndPop(/** @type {import(\"../xml.js\").NodeStackItem} */\n      ({node: node}), this.ENVELOPE_SERIALIZERS_,\n      OBJECT_PROPERTY_NODE_FACTORY,\n      values,\n      objectStack, keys, this);\n  }\n\n  /**\n   * @const\n   * @param {*} value Value.\n   * @param {Array<*>} objectStack Object stack.\n   * @param {string=} opt_nodeName Node name.\n   * @return {Node|undefined} Node.\n   * @private\n   */\n  MULTIGEOMETRY_MEMBER_NODE_FACTORY_(value, objectStack, opt_nodeName) {\n    const parentNode = objectStack[objectStack.length - 1].node;\n    return createElementNS('http://www.opengis.net/gml',\n      MULTIGEOMETRY_TO_MEMBER_NODENAME[parentNode.nodeName]);\n  }\n}\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n * @protected\n */\nGML2.prototype.GEOMETRY_FLAT_COORDINATES_PARSERS = {\n  'http://www.opengis.net/gml': {\n    'coordinates': makeReplacer(GML2.prototype.readFlatCoordinates_)\n  }\n};\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n * @protected\n */\nGML2.prototype.FLAT_LINEAR_RINGS_PARSERS = {\n  'http://www.opengis.net/gml': {\n    'innerBoundaryIs': GML2.prototype.innerBoundaryIsParser_,\n    'outerBoundaryIs': GML2.prototype.outerBoundaryIsParser_\n  }\n};\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n * @private\n */\nGML2.prototype.BOX_PARSERS_ = {\n  'http://www.opengis.net/gml': {\n    'coordinates': makeArrayPusher(\n      GML2.prototype.readFlatCoordinates_)\n  }\n};\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n * @protected\n */\nGML2.prototype.GEOMETRY_PARSERS = {\n  'http://www.opengis.net/gml': {\n    'Point': makeReplacer(GMLBase.prototype.readPoint),\n    'MultiPoint': makeReplacer(\n      GMLBase.prototype.readMultiPoint),\n    'LineString': makeReplacer(\n      GMLBase.prototype.readLineString),\n    'MultiLineString': makeReplacer(\n      GMLBase.prototype.readMultiLineString),\n    'LinearRing': makeReplacer(\n      GMLBase.prototype.readLinearRing),\n    'Polygon': makeReplacer(GMLBase.prototype.readPolygon),\n    'MultiPolygon': makeReplacer(\n      GMLBase.prototype.readMultiPolygon),\n    'Box': makeReplacer(GML2.prototype.readBox_)\n  }\n};\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Serializer>>}\n * @private\n */\nGML2.prototype.GEOMETRY_SERIALIZERS_ = {\n  'http://www.opengis.net/gml': {\n    'Curve': makeChildAppender(\n      GML2.prototype.writeCurveOrLineString_),\n    'MultiCurve': makeChildAppender(\n      GML2.prototype.writeMultiCurveOrLineString_),\n    'Point': makeChildAppender(GML2.prototype.writePoint_),\n    'MultiPoint': makeChildAppender(\n      GML2.prototype.writeMultiPoint_),\n    'LineString': makeChildAppender(\n      GML2.prototype.writeCurveOrLineString_),\n    'MultiLineString': makeChildAppender(\n      GML2.prototype.writeMultiCurveOrLineString_),\n    'LinearRing': makeChildAppender(\n      GML2.prototype.writeLinearRing_),\n    'Polygon': makeChildAppender(\n      GML2.prototype.writeSurfaceOrPolygon_),\n    'MultiPolygon': makeChildAppender(\n      GML2.prototype.writeMultiSurfaceOrPolygon_),\n    'Surface': makeChildAppender(\n      GML2.prototype.writeSurfaceOrPolygon_),\n    'MultiSurface': makeChildAppender(\n      GML2.prototype.writeMultiSurfaceOrPolygon_),\n    'Envelope': makeChildAppender(\n      GML2.prototype.writeEnvelope)\n  }\n};\n\n/**\n * @type {Object<string, Object<string, import(\"../xml.js\").Serializer>>}\n * @private\n */\nGML2.prototype.LINESTRINGORCURVEMEMBER_SERIALIZERS_ = {\n  'http://www.opengis.net/gml': {\n    'lineStringMember': makeChildAppender(\n      GML2.prototype.writeLineStringOrCurveMember_),\n    'curveMember': makeChildAppender(\n      GML2.prototype.writeLineStringOrCurveMember_)\n  }\n};\n\n/**\n * @type {Object<string, Object<string, import(\"../xml.js\").Serializer>>}\n * @private\n */\nGML2.prototype.RING_SERIALIZERS_ = {\n  'http://www.opengis.net/gml': {\n    'outerBoundaryIs': makeChildAppender(GML2.prototype.writeRing_),\n    'innerBoundaryIs': makeChildAppender(GML2.prototype.writeRing_)\n  }\n};\n\n/**\n * @type {Object<string, Object<string, import(\"../xml.js\").Serializer>>}\n * @private\n */\nGML2.prototype.POINTMEMBER_SERIALIZERS_ = {\n  'http://www.opengis.net/gml': {\n    'pointMember': makeChildAppender(\n      GML2.prototype.writePointMember_)\n  }\n};\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Serializer>>}\n * @private\n */\nGML2.prototype.SURFACEORPOLYGONMEMBER_SERIALIZERS_ = {\n  'http://www.opengis.net/gml': {\n    'surfaceMember': makeChildAppender(\n      GML2.prototype.writeSurfaceOrPolygonMember_),\n    'polygonMember': makeChildAppender(\n      GML2.prototype.writeSurfaceOrPolygonMember_)\n  }\n};\n\n/**\n * @type {Object<string, Object<string, import(\"../xml.js\").Serializer>>}\n * @private\n */\nGML2.prototype.ENVELOPE_SERIALIZERS_ = {\n  'http://www.opengis.net/gml': {\n    'lowerCorner': makeChildAppender(writeStringTextNode),\n    'upperCorner': makeChildAppender(writeStringTextNode)\n  }\n};\n\nexport default GML2;\n"]},"metadata":{},"sourceType":"module"}