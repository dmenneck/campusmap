{"ast":null,"code":"/**\n * ag-grid-community - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components\n * @version v21.2.2\n * @link http://www.ag-grid.com/\n * @license MIT\n */\n\"use strict\";\n\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nvar __metadata = this && this.__metadata || function (k, v) {\n  if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar context_1 = require(\"../context/context\");\n\nvar sortController_1 = require(\"../sortController\");\n\nvar valueService_1 = require(\"../valueService/valueService\");\n\nvar gridOptionsWrapper_1 = require(\"../gridOptionsWrapper\");\n\nvar columnController_1 = require(\"../columnController/columnController\");\n\nvar utils_1 = require(\"../utils\");\n\nvar SortService =\n/** @class */\nfunction () {\n  function SortService() {}\n\n  SortService.prototype.init = function () {\n    this.postSortFunc = this.gridOptionsWrapper.getPostSortFunc();\n  };\n\n  SortService.prototype.sort = function (sortOptions, sortActive, deltaSort, dirtyLeafNodes, changedPath, noAggregations) {\n    var _this = this;\n\n    var callback = function (rowNode) {\n      // we clear out the 'pull down open parents' first, as the values mix up the sorting\n      _this.pullDownGroupDataForHideOpenParents(rowNode.childrenAfterFilter, true); // Javascript sort is non deterministic when all the array items are equals, ie Comparator always returns 0,\n      // so to ensure the array keeps its order, add an additional sorting condition manually, in this case we\n      // are going to inspect the original array position. This is what sortedRowNodes is for.\n\n\n      if (sortActive) {\n        var sortedRowNodes = deltaSort ? _this.doDeltaSort(rowNode, sortOptions, dirtyLeafNodes, changedPath, noAggregations) : _this.doFullSort(rowNode, sortOptions);\n        rowNode.childrenAfterSort = sortedRowNodes.map(function (sorted) {\n          return sorted.rowNode;\n        });\n      } else {\n        rowNode.childrenAfterSort = rowNode.childrenAfterFilter.slice(0);\n      }\n\n      _this.updateChildIndexes(rowNode);\n\n      if (_this.postSortFunc) {\n        _this.postSortFunc(rowNode.childrenAfterSort);\n      }\n    };\n\n    changedPath.forEachChangedNodeDepthFirst(callback);\n    this.updateGroupDataForHiddenOpenParents(changedPath);\n  };\n\n  SortService.prototype.doFullSort = function (rowNode, sortOptions) {\n    var sortedRowNodes = rowNode.childrenAfterFilter.map(this.mapNodeToSortedNode.bind(this));\n    sortedRowNodes.sort(this.compareRowNodes.bind(this, sortOptions));\n    return sortedRowNodes;\n  };\n\n  SortService.prototype.mapNodeToSortedNode = function (rowNode, pos) {\n    return {\n      currentPos: pos,\n      rowNode: rowNode\n    };\n  };\n\n  SortService.prototype.doDeltaSort = function (rowNode, sortOptions, dirtyLeafNodes, changedPath, noAggregations) {\n    // clean nodes will be a list of all row nodes that remain in the set\n    // and ordered. we start with the old sorted set and take out any nodes\n    // that were removed or changed (but not added, added doesn't make sense,\n    // if a node was added, there is no way it could be here from last time).\n    var cleanNodes = rowNode.childrenAfterSort.filter(function (rowNode) {\n      // take out all nodes that were changed as part of the current transaction.\n      // a changed node could a) be in a different sort position or b) may\n      // no longer be in this set as the changed node may not pass filtering,\n      // or be in a different group.\n      var passesDirtyNodesCheck = !dirtyLeafNodes[rowNode.id]; // also remove group nodes in the changed path, as they can have different aggregate\n      // values which could impact the sort order.\n      // note: changed path is not active if a) no value columns or b) no transactions. it is never\n      // (b) in deltaSort as we only do deltaSort for transactions. for (a) if no value columns, then\n      // there is no value in the group that could of changed (ie no aggregate values)\n\n      var passesChangedPathCheck = noAggregations || changedPath.canSkip(rowNode);\n      return passesDirtyNodesCheck && passesChangedPathCheck;\n    }).map(this.mapNodeToSortedNode.bind(this)); // for fast access below, we map them\n\n    var cleanNodesMapped = {};\n    cleanNodes.forEach(function (sortedRowNode) {\n      return cleanNodesMapped[sortedRowNode.rowNode.id] = sortedRowNode.rowNode;\n    }); // these are all nodes that need to be placed\n\n    var changedNodes = rowNode.childrenAfterFilter // ignore nodes in the clean list\n    .filter(function (rowNode) {\n      return !cleanNodesMapped[rowNode.id];\n    }).map(this.mapNodeToSortedNode.bind(this)); // sort changed nodes. note that we don't need to sort cleanNodes as they are\n    // already sorted from last time.\n\n    changedNodes.sort(this.compareRowNodes.bind(this, sortOptions));\n\n    if (changedNodes.length === 0) {\n      return cleanNodes;\n    } else if (cleanNodes.length === 0) {\n      return changedNodes;\n    } else {\n      return this.mergeSortedArrays(sortOptions, cleanNodes, changedNodes);\n    }\n  }; // Merge two sorted arrays into each other\n\n\n  SortService.prototype.mergeSortedArrays = function (sortOptions, arr1, arr2) {\n    var res = [];\n    var i = 0;\n    var j = 0; // Traverse both array, adding them in order\n\n    while (i < arr1.length && j < arr2.length) {\n      // Check if current element of first\n      // array is smaller than current element\n      // of second array. If yes, store first\n      // array element and increment first array\n      // index. Otherwise do same with second array\n      var compareResult = this.compareRowNodes(sortOptions, arr1[i], arr2[j]);\n\n      if (compareResult < 0) {\n        res.push(arr1[i++]);\n      } else {\n        res.push(arr2[j++]);\n      }\n    } // add remaining from arr1\n\n\n    while (i < arr1.length) {\n      res.push(arr1[i++]);\n    } // add remaining from arr2\n\n\n    while (j < arr2.length) {\n      res.push(arr2[j++]);\n    }\n\n    return res;\n  };\n\n  SortService.prototype.compareRowNodes = function (sortOptions, sortedNodeA, sortedNodeB) {\n    var nodeA = sortedNodeA.rowNode;\n    var nodeB = sortedNodeB.rowNode; // Iterate columns, return the first that doesn't match\n\n    for (var i = 0, len = sortOptions.length; i < len; i++) {\n      var sortOption = sortOptions[i]; // let compared = compare(nodeA, nodeB, sortOption.column, sortOption.inverter === -1);\n\n      var isInverted = sortOption.inverter === -1;\n      var valueA = this.getValue(nodeA, sortOption.column);\n      var valueB = this.getValue(nodeB, sortOption.column);\n      var comparatorResult = void 0;\n\n      if (sortOption.column.getColDef().comparator) {\n        //if comparator provided, use it\n        comparatorResult = sortOption.column.getColDef().comparator(valueA, valueB, nodeA, nodeB, isInverted);\n      } else {\n        //otherwise do our own comparison\n        comparatorResult = utils_1._.defaultComparator(valueA, valueB, this.gridOptionsWrapper.isAccentedSort());\n      }\n\n      if (comparatorResult !== 0) {\n        return comparatorResult * sortOption.inverter;\n      }\n    } // All matched, we make is so that the original sort order is kept:\n\n\n    return sortedNodeA.currentPos - sortedNodeB.currentPos;\n  };\n\n  SortService.prototype.getValue = function (nodeA, column) {\n    return this.valueService.getValue(column, nodeA);\n  };\n\n  SortService.prototype.updateChildIndexes = function (rowNode) {\n    if (utils_1._.missing(rowNode.childrenAfterSort)) {\n      return;\n    }\n\n    var listToSort = rowNode.childrenAfterSort;\n\n    for (var i = 0; i < listToSort.length; i++) {\n      var child = listToSort[i];\n      var firstChild = i === 0;\n      var lastChild = i === rowNode.childrenAfterSort.length - 1;\n      child.setFirstChild(firstChild);\n      child.setLastChild(lastChild);\n      child.setChildIndex(i);\n    }\n  };\n\n  SortService.prototype.updateGroupDataForHiddenOpenParents = function (changedPath) {\n    var _this = this;\n\n    if (!this.gridOptionsWrapper.isGroupHideOpenParents()) {\n      return;\n    } // recurse breadth first over group nodes after sort to 'pull down' group data to child groups\n\n\n    var callback = function (rowNode) {\n      _this.pullDownGroupDataForHideOpenParents(rowNode.childrenAfterSort, false);\n\n      rowNode.childrenAfterSort.forEach(function (child) {\n        if (child.hasChildren()) {\n          callback(child);\n        }\n      });\n    };\n\n    changedPath.executeFromRootNode(function (rowNode) {\n      return callback(rowNode);\n    });\n  };\n\n  SortService.prototype.pullDownGroupDataForHideOpenParents = function (rowNodes, clearOperation) {\n    var _this = this;\n\n    if (utils_1._.missing(rowNodes)) {\n      return;\n    }\n\n    if (!this.gridOptionsWrapper.isGroupHideOpenParents()) {\n      return;\n    }\n\n    rowNodes.forEach(function (childRowNode) {\n      var groupDisplayCols = _this.columnController.getGroupDisplayColumns();\n\n      groupDisplayCols.forEach(function (groupDisplayCol) {\n        var showRowGroup = groupDisplayCol.getColDef().showRowGroup;\n\n        if (typeof showRowGroup !== 'string') {\n          console.error('ag-Grid: groupHideOpenParents only works when specifying specific columns for colDef.showRowGroup');\n          return;\n        }\n\n        var displayingGroupKey = showRowGroup;\n\n        var rowGroupColumn = _this.columnController.getPrimaryColumn(displayingGroupKey);\n\n        var thisRowNodeMatches = rowGroupColumn === childRowNode.rowGroupColumn;\n\n        if (thisRowNodeMatches) {\n          return;\n        }\n\n        if (clearOperation) {\n          // if doing a clear operation, we clear down the value for every possible group column\n          childRowNode.setGroupValue(groupDisplayCol.getId(), null);\n        } else {\n          // if doing a set operation, we set only where the pull down is to occur\n          var parentToStealFrom = childRowNode.getFirstChildOfFirstChild(rowGroupColumn);\n\n          if (parentToStealFrom) {\n            childRowNode.setGroupValue(groupDisplayCol.getId(), parentToStealFrom.key);\n          }\n        }\n      });\n    });\n  };\n\n  __decorate([context_1.Autowired('sortController'), __metadata(\"design:type\", sortController_1.SortController)], SortService.prototype, \"sortController\", void 0);\n\n  __decorate([context_1.Autowired('columnController'), __metadata(\"design:type\", columnController_1.ColumnController)], SortService.prototype, \"columnController\", void 0);\n\n  __decorate([context_1.Autowired('valueService'), __metadata(\"design:type\", valueService_1.ValueService)], SortService.prototype, \"valueService\", void 0);\n\n  __decorate([context_1.Autowired('gridOptionsWrapper'), __metadata(\"design:type\", gridOptionsWrapper_1.GridOptionsWrapper)], SortService.prototype, \"gridOptionsWrapper\", void 0);\n\n  __decorate([context_1.PostConstruct, __metadata(\"design:type\", Function), __metadata(\"design:paramtypes\", []), __metadata(\"design:returntype\", void 0)], SortService.prototype, \"init\", null);\n\n  SortService = __decorate([context_1.Bean('sortService')], SortService);\n  return SortService;\n}();\n\nexports.SortService = SortService;","map":{"version":3,"sources":["/Users/dirkmennecke77/Desktop/Lageplan/node_modules/ag-grid-community/dist/lib/rowNodes/sortService.js"],"names":["__decorate","decorators","target","key","desc","c","arguments","length","r","Object","getOwnPropertyDescriptor","d","Reflect","decorate","i","defineProperty","__metadata","k","v","metadata","exports","value","context_1","require","sortController_1","valueService_1","gridOptionsWrapper_1","columnController_1","utils_1","SortService","prototype","init","postSortFunc","gridOptionsWrapper","getPostSortFunc","sort","sortOptions","sortActive","deltaSort","dirtyLeafNodes","changedPath","noAggregations","_this","callback","rowNode","pullDownGroupDataForHideOpenParents","childrenAfterFilter","sortedRowNodes","doDeltaSort","doFullSort","childrenAfterSort","map","sorted","slice","updateChildIndexes","forEachChangedNodeDepthFirst","updateGroupDataForHiddenOpenParents","mapNodeToSortedNode","bind","compareRowNodes","pos","currentPos","cleanNodes","filter","passesDirtyNodesCheck","id","passesChangedPathCheck","canSkip","cleanNodesMapped","forEach","sortedRowNode","changedNodes","mergeSortedArrays","arr1","arr2","res","j","compareResult","push","sortedNodeA","sortedNodeB","nodeA","nodeB","len","sortOption","isInverted","inverter","valueA","getValue","column","valueB","comparatorResult","getColDef","comparator","_","defaultComparator","isAccentedSort","valueService","missing","listToSort","child","firstChild","lastChild","setFirstChild","setLastChild","setChildIndex","isGroupHideOpenParents","hasChildren","executeFromRootNode","rowNodes","clearOperation","childRowNode","groupDisplayCols","columnController","getGroupDisplayColumns","groupDisplayCol","showRowGroup","console","error","displayingGroupKey","rowGroupColumn","getPrimaryColumn","thisRowNodeMatches","setGroupValue","getId","parentToStealFrom","getFirstChildOfFirstChild","Autowired","SortController","ColumnController","ValueService","GridOptionsWrapper","PostConstruct","Function","Bean"],"mappings":"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","sourcesContent":["/**\n * ag-grid-community - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components\n * @version v21.2.2\n * @link http://www.ag-grid.com/\n * @license MIT\n */\n\"use strict\";\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __metadata = (this && this.__metadata) || function (k, v) {\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar context_1 = require(\"../context/context\");\nvar sortController_1 = require(\"../sortController\");\nvar valueService_1 = require(\"../valueService/valueService\");\nvar gridOptionsWrapper_1 = require(\"../gridOptionsWrapper\");\nvar columnController_1 = require(\"../columnController/columnController\");\nvar utils_1 = require(\"../utils\");\nvar SortService = /** @class */ (function () {\n    function SortService() {\n    }\n    SortService.prototype.init = function () {\n        this.postSortFunc = this.gridOptionsWrapper.getPostSortFunc();\n    };\n    SortService.prototype.sort = function (sortOptions, sortActive, deltaSort, dirtyLeafNodes, changedPath, noAggregations) {\n        var _this = this;\n        var callback = function (rowNode) {\n            // we clear out the 'pull down open parents' first, as the values mix up the sorting\n            _this.pullDownGroupDataForHideOpenParents(rowNode.childrenAfterFilter, true);\n            // Javascript sort is non deterministic when all the array items are equals, ie Comparator always returns 0,\n            // so to ensure the array keeps its order, add an additional sorting condition manually, in this case we\n            // are going to inspect the original array position. This is what sortedRowNodes is for.\n            if (sortActive) {\n                var sortedRowNodes = deltaSort ?\n                    _this.doDeltaSort(rowNode, sortOptions, dirtyLeafNodes, changedPath, noAggregations)\n                    : _this.doFullSort(rowNode, sortOptions);\n                rowNode.childrenAfterSort = sortedRowNodes.map(function (sorted) { return sorted.rowNode; });\n            }\n            else {\n                rowNode.childrenAfterSort = rowNode.childrenAfterFilter.slice(0);\n            }\n            _this.updateChildIndexes(rowNode);\n            if (_this.postSortFunc) {\n                _this.postSortFunc(rowNode.childrenAfterSort);\n            }\n        };\n        changedPath.forEachChangedNodeDepthFirst(callback);\n        this.updateGroupDataForHiddenOpenParents(changedPath);\n    };\n    SortService.prototype.doFullSort = function (rowNode, sortOptions) {\n        var sortedRowNodes = rowNode.childrenAfterFilter\n            .map(this.mapNodeToSortedNode.bind(this));\n        sortedRowNodes.sort(this.compareRowNodes.bind(this, sortOptions));\n        return sortedRowNodes;\n    };\n    SortService.prototype.mapNodeToSortedNode = function (rowNode, pos) {\n        return { currentPos: pos, rowNode: rowNode };\n    };\n    SortService.prototype.doDeltaSort = function (rowNode, sortOptions, dirtyLeafNodes, changedPath, noAggregations) {\n        // clean nodes will be a list of all row nodes that remain in the set\n        // and ordered. we start with the old sorted set and take out any nodes\n        // that were removed or changed (but not added, added doesn't make sense,\n        // if a node was added, there is no way it could be here from last time).\n        var cleanNodes = rowNode.childrenAfterSort\n            .filter(function (rowNode) {\n            // take out all nodes that were changed as part of the current transaction.\n            // a changed node could a) be in a different sort position or b) may\n            // no longer be in this set as the changed node may not pass filtering,\n            // or be in a different group.\n            var passesDirtyNodesCheck = !dirtyLeafNodes[rowNode.id];\n            // also remove group nodes in the changed path, as they can have different aggregate\n            // values which could impact the sort order.\n            // note: changed path is not active if a) no value columns or b) no transactions. it is never\n            // (b) in deltaSort as we only do deltaSort for transactions. for (a) if no value columns, then\n            // there is no value in the group that could of changed (ie no aggregate values)\n            var passesChangedPathCheck = noAggregations || changedPath.canSkip(rowNode);\n            return passesDirtyNodesCheck && passesChangedPathCheck;\n        })\n            .map(this.mapNodeToSortedNode.bind(this));\n        // for fast access below, we map them\n        var cleanNodesMapped = {};\n        cleanNodes.forEach(function (sortedRowNode) { return cleanNodesMapped[sortedRowNode.rowNode.id] = sortedRowNode.rowNode; });\n        // these are all nodes that need to be placed\n        var changedNodes = rowNode.childrenAfterFilter\n            // ignore nodes in the clean list\n            .filter(function (rowNode) { return !cleanNodesMapped[rowNode.id]; })\n            .map(this.mapNodeToSortedNode.bind(this));\n        // sort changed nodes. note that we don't need to sort cleanNodes as they are\n        // already sorted from last time.\n        changedNodes.sort(this.compareRowNodes.bind(this, sortOptions));\n        if (changedNodes.length === 0) {\n            return cleanNodes;\n        }\n        else if (cleanNodes.length === 0) {\n            return changedNodes;\n        }\n        else {\n            return this.mergeSortedArrays(sortOptions, cleanNodes, changedNodes);\n        }\n    };\n    // Merge two sorted arrays into each other\n    SortService.prototype.mergeSortedArrays = function (sortOptions, arr1, arr2) {\n        var res = [];\n        var i = 0;\n        var j = 0;\n        // Traverse both array, adding them in order\n        while (i < arr1.length && j < arr2.length) {\n            // Check if current element of first\n            // array is smaller than current element\n            // of second array. If yes, store first\n            // array element and increment first array\n            // index. Otherwise do same with second array\n            var compareResult = this.compareRowNodes(sortOptions, arr1[i], arr2[j]);\n            if (compareResult < 0) {\n                res.push(arr1[i++]);\n            }\n            else {\n                res.push(arr2[j++]);\n            }\n        }\n        // add remaining from arr1\n        while (i < arr1.length) {\n            res.push(arr1[i++]);\n        }\n        // add remaining from arr2\n        while (j < arr2.length) {\n            res.push(arr2[j++]);\n        }\n        return res;\n    };\n    SortService.prototype.compareRowNodes = function (sortOptions, sortedNodeA, sortedNodeB) {\n        var nodeA = sortedNodeA.rowNode;\n        var nodeB = sortedNodeB.rowNode;\n        // Iterate columns, return the first that doesn't match\n        for (var i = 0, len = sortOptions.length; i < len; i++) {\n            var sortOption = sortOptions[i];\n            // let compared = compare(nodeA, nodeB, sortOption.column, sortOption.inverter === -1);\n            var isInverted = sortOption.inverter === -1;\n            var valueA = this.getValue(nodeA, sortOption.column);\n            var valueB = this.getValue(nodeB, sortOption.column);\n            var comparatorResult = void 0;\n            if (sortOption.column.getColDef().comparator) {\n                //if comparator provided, use it\n                comparatorResult = sortOption.column.getColDef().comparator(valueA, valueB, nodeA, nodeB, isInverted);\n            }\n            else {\n                //otherwise do our own comparison\n                comparatorResult = utils_1._.defaultComparator(valueA, valueB, this.gridOptionsWrapper.isAccentedSort());\n            }\n            if (comparatorResult !== 0) {\n                return comparatorResult * sortOption.inverter;\n            }\n        }\n        // All matched, we make is so that the original sort order is kept:\n        return sortedNodeA.currentPos - sortedNodeB.currentPos;\n    };\n    SortService.prototype.getValue = function (nodeA, column) {\n        return this.valueService.getValue(column, nodeA);\n    };\n    SortService.prototype.updateChildIndexes = function (rowNode) {\n        if (utils_1._.missing(rowNode.childrenAfterSort)) {\n            return;\n        }\n        var listToSort = rowNode.childrenAfterSort;\n        for (var i = 0; i < listToSort.length; i++) {\n            var child = listToSort[i];\n            var firstChild = i === 0;\n            var lastChild = i === rowNode.childrenAfterSort.length - 1;\n            child.setFirstChild(firstChild);\n            child.setLastChild(lastChild);\n            child.setChildIndex(i);\n        }\n    };\n    SortService.prototype.updateGroupDataForHiddenOpenParents = function (changedPath) {\n        var _this = this;\n        if (!this.gridOptionsWrapper.isGroupHideOpenParents()) {\n            return;\n        }\n        // recurse breadth first over group nodes after sort to 'pull down' group data to child groups\n        var callback = function (rowNode) {\n            _this.pullDownGroupDataForHideOpenParents(rowNode.childrenAfterSort, false);\n            rowNode.childrenAfterSort.forEach(function (child) {\n                if (child.hasChildren()) {\n                    callback(child);\n                }\n            });\n        };\n        changedPath.executeFromRootNode(function (rowNode) { return callback(rowNode); });\n    };\n    SortService.prototype.pullDownGroupDataForHideOpenParents = function (rowNodes, clearOperation) {\n        var _this = this;\n        if (utils_1._.missing(rowNodes)) {\n            return;\n        }\n        if (!this.gridOptionsWrapper.isGroupHideOpenParents()) {\n            return;\n        }\n        rowNodes.forEach(function (childRowNode) {\n            var groupDisplayCols = _this.columnController.getGroupDisplayColumns();\n            groupDisplayCols.forEach(function (groupDisplayCol) {\n                var showRowGroup = groupDisplayCol.getColDef().showRowGroup;\n                if (typeof showRowGroup !== 'string') {\n                    console.error('ag-Grid: groupHideOpenParents only works when specifying specific columns for colDef.showRowGroup');\n                    return;\n                }\n                var displayingGroupKey = showRowGroup;\n                var rowGroupColumn = _this.columnController.getPrimaryColumn(displayingGroupKey);\n                var thisRowNodeMatches = rowGroupColumn === childRowNode.rowGroupColumn;\n                if (thisRowNodeMatches) {\n                    return;\n                }\n                if (clearOperation) {\n                    // if doing a clear operation, we clear down the value for every possible group column\n                    childRowNode.setGroupValue(groupDisplayCol.getId(), null);\n                }\n                else {\n                    // if doing a set operation, we set only where the pull down is to occur\n                    var parentToStealFrom = childRowNode.getFirstChildOfFirstChild(rowGroupColumn);\n                    if (parentToStealFrom) {\n                        childRowNode.setGroupValue(groupDisplayCol.getId(), parentToStealFrom.key);\n                    }\n                }\n            });\n        });\n    };\n    __decorate([\n        context_1.Autowired('sortController'),\n        __metadata(\"design:type\", sortController_1.SortController)\n    ], SortService.prototype, \"sortController\", void 0);\n    __decorate([\n        context_1.Autowired('columnController'),\n        __metadata(\"design:type\", columnController_1.ColumnController)\n    ], SortService.prototype, \"columnController\", void 0);\n    __decorate([\n        context_1.Autowired('valueService'),\n        __metadata(\"design:type\", valueService_1.ValueService)\n    ], SortService.prototype, \"valueService\", void 0);\n    __decorate([\n        context_1.Autowired('gridOptionsWrapper'),\n        __metadata(\"design:type\", gridOptionsWrapper_1.GridOptionsWrapper)\n    ], SortService.prototype, \"gridOptionsWrapper\", void 0);\n    __decorate([\n        context_1.PostConstruct,\n        __metadata(\"design:type\", Function),\n        __metadata(\"design:paramtypes\", []),\n        __metadata(\"design:returntype\", void 0)\n    ], SortService.prototype, \"init\", null);\n    SortService = __decorate([\n        context_1.Bean('sortService')\n    ], SortService);\n    return SortService;\n}());\nexports.SortService = SortService;\n"]},"metadata":{},"sourceType":"script"}