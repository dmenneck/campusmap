{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\n\nrequire(\"antd/es/tree/style\");\n\nvar _tree = _interopRequireDefault(require(\"antd/es/tree\"));\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _propTypes = _interopRequireDefault(require(\"prop-types\"));\n\nvar _Map = _interopRequireDefault(require(\"ol/Map\"));\n\nvar _Base = _interopRequireDefault(require(\"ol/layer/Base\"));\n\nvar _Group = _interopRequireDefault(require(\"ol/layer/Group\"));\n\nvar _Collection = _interopRequireDefault(require(\"ol/Collection\"));\n\nvar _MapEvent = _interopRequireDefault(require(\"ol/MapEvent\"));\n\nvar _Observable = require(\"ol/Observable\");\n\nvar _isBoolean = _interopRequireDefault(require(\"lodash/isBoolean\"));\n\nvar _isFunction = _interopRequireDefault(require(\"lodash/isFunction\"));\n\nvar _isEqual = _interopRequireDefault(require(\"lodash/isEqual\"));\n\nvar _Logger = _interopRequireDefault(require(\"@terrestris/base-util/dist/Logger\"));\n\nvar _MapUtil = _interopRequireDefault(require(\"@terrestris/ol-util/dist/MapUtil/MapUtil\"));\n\nvar _LayerTreeNode = _interopRequireDefault(require(\"../LayerTreeNode/LayerTreeNode.js\"));\n\nvar _constants = require(\"../constants\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\n\nfunction _typeof(obj) {\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n\n  return _assertThisInitialized(self);\n}\n\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n/**\n * The LayerTree.\n *\n * Note. This component expects that all layerGroups are permanently visibile.\n *\n * @class LayerTree\n * @extends React.Component\n */\n\n\nvar LayerTree =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(LayerTree, _React$Component);\n\n  _createClass(LayerTree, null, [{\n    key: \"getDerivedStateFromProps\",\n\n    /**\n     * The className added to this component.\n     * @type {String}\n     * @private\n     */\n\n    /**\n     *  An array of ol.EventsKey as returned by on() or once().\n     * @type {Array<ol.EventsKey>}\n     * @private\n     */\n\n    /**\n     * The properties.\n     * @type {Object}\n     */\n    value: function getDerivedStateFromProps(nextProps, prevState) {\n      if (prevState.layerGroup && nextProps.layerGroup) {\n        if (!(0, _isEqual[\"default\"])(prevState.layerGroup.ol_uid, nextProps.layerGroup.ol_uid) || !(0, _isEqual[\"default\"])(prevState.layerGroupRevision, nextProps.layerGroup.getRevision())) {\n          return {\n            layerGroup: nextProps.layerGroup,\n            layerGroupRevision: nextProps.layerGroup.getRevision()\n          };\n        }\n      }\n\n      return null;\n    }\n    /**\n     * Create the LayerTree.\n     *\n     * @constructs LayerTree\n     */\n\n  }]);\n\n  function LayerTree(props) {\n    var _this;\n\n    _classCallCheck(this, LayerTree);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(LayerTree).call(this, props));\n\n    _defineProperty(_assertThisInitialized(_this), \"className\", \"\".concat(_constants.CSS_PREFIX, \"layertree\"));\n\n    _defineProperty(_assertThisInitialized(_this), \"olListenerKeys\", []);\n\n    _defineProperty(_assertThisInitialized(_this), \"onCollectionAdd\", function (evt) {\n      if (evt.element instanceof _Group[\"default\"]) {\n        _this.registerAddRemoveListeners(evt.element);\n      }\n\n      _this.rebuildTreeNodes();\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onCollectionRemove\", function (evt) {\n      _this.unregisterEventsByLayer(evt.element);\n\n      if (evt.element instanceof _Group[\"default\"]) {\n        evt.element.getLayers().forEach(function (layer) {\n          _this.unregisterEventsByLayer(layer);\n        });\n      }\n\n      _this.rebuildTreeNodes();\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onChangeLayers\", function (evt) {\n      _this.unregisterEventsByLayer(evt.oldValue);\n\n      if (evt.oldValue instanceof _Collection[\"default\"]) {\n        evt.oldValue.forEach(function (layer) {\n          return _this.unregisterEventsByLayer(layer);\n        });\n      }\n\n      if (evt.target instanceof _Group[\"default\"]) {\n        _this.registerAddRemoveListeners(evt.target);\n      }\n\n      _this.rebuildTreeNodes();\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"unregisterEventsByLayer\", function (layer) {\n      _this.olListenerKeys = _this.olListenerKeys.filter(function (key) {\n        if (layer instanceof _Group[\"default\"]) {\n          var layers = layer.getLayers();\n\n          if (key.target === layers) {\n            if (key.type === 'add' && key.listener === _this.onCollectionAdd || key.type === 'remove' && key.listener === _this.onCollectionRemove || key.type === 'change:layers' && key.listener === _this.onChangeLayers) {\n              (0, _Observable.unByKey)(key);\n              return false;\n            }\n          }\n        } else if (key.target === layer) {\n          if (key.type === 'change:visible' && key.listener === _this.onLayerChangeVisible) {\n            (0, _Observable.unByKey)(key);\n            return false;\n          }\n        }\n\n        return true;\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"rebuildTreeNodes\", function (evt) {\n      var mapResolution = _this.state.mapResolution;\n\n      if (evt && evt instanceof _MapEvent[\"default\"] && evt.target && evt.target.getView) {\n        if (mapResolution === evt.target.getView().getResolution()) {\n          // If map resolution didn't change => no redraw of tree nodes needed.\n          return;\n        }\n      }\n\n      _this.treeNodesFromLayerGroup(_this.state.layerGroup);\n\n      var checkedKeys = _this.getVisibleOlUids();\n\n      _this.setState({\n        checkedKeys: checkedKeys,\n        mapResolution: evt ? evt.target.getView().getResolution() : -1\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"hasListener\", function (target, type, listener) {\n      return _this.olListenerKeys.some(function (listenerKey) {\n        return listenerKey.target === target && listenerKey.type === type && listenerKey.listener === listener;\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onLayerChangeVisible\", function () {\n      var checkedKeys = _this.getVisibleOlUids();\n\n      _this.setState({\n        checkedKeys: checkedKeys\n      }, function () {\n        _this.rebuildTreeNodes();\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"getVisibleOlUids\", function () {\n      var layers = _MapUtil[\"default\"].getAllLayers(_this.state.layerGroup, function (layer) {\n        return !(layer instanceof _Group[\"default\"]) && layer.getVisible();\n      }).filter(_this.props.filterFunction);\n\n      return layers.map(function (l) {\n        return l.ol_uid.toString();\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onExpand\", function (expandedKeys, _ref) {\n      var expanded = _ref.expanded,\n          node = _ref.node;\n      var onExpand = _this.props.onExpand;\n\n      _this.rebuildTreeNodes();\n\n      if (onExpand) {\n        onExpand(expandedKeys, {\n          expanded: expanded,\n          node: node\n        });\n      }\n    });\n\n    _this.state = {\n      layerGroup: null,\n      layerGroupRevision: null,\n      treeNodes: [],\n      checkedKeys: [],\n      mapResolution: -1\n    };\n    return _this;\n  }\n  /**\n   * Determines what to do on the initial mount.\n   */\n\n\n  _createClass(LayerTree, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      var layerGroup = this.props.layerGroup ? this.props.layerGroup : this.props.map.getLayerGroup();\n      var revision = this.props.layerGroup ? this.props.layerGroup.getRevision() : 0;\n      this.setState({\n        layerGroup: layerGroup,\n        layerGroupRevision: revision\n      }, function () {\n        _this2.registerAddRemoveListeners(_this2.state.layerGroup);\n\n        _this2.registerResolutionChangeHandler();\n\n        _this2.rebuildTreeNodes();\n      });\n    }\n    /**\n     * Invoked immediately after updating occurs. This method is not called for\n     * the initial render.\n     *\n     * @param {Object} prevProps The previous props.\n     * @param {Object} prevState The previous state.\n     */\n\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps, prevState) {\n      var _this$props = this.props,\n          layerGroup = _this$props.layerGroup,\n          nodeTitleRenderer = _this$props.nodeTitleRenderer;\n\n      if (layerGroup && prevState.layerGroup) {\n        if (!(0, _isEqual[\"default\"])(prevState.layerGroup.ol_uid, layerGroup.ol_uid)) {\n          (0, _Observable.unByKey)(this.olListenerKeys);\n          this.olListenerKeys = [];\n          this.registerAddRemoveListeners(layerGroup);\n          this.rebuildTreeNodes();\n        }\n      }\n\n      if (nodeTitleRenderer !== prevProps.nodeTitleRenderer) {\n        this.rebuildTreeNodes();\n      }\n    }\n    /**\n     * Determines what to do when the component is unmounted.\n     */\n\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      (0, _Observable.unByKey)(this.olListenerKeys);\n    }\n    /**\n     * Creates TreeNodes from a given layergroup and sets the treeNodes in the state.\n     *\n     * @param {ol.layer.Group} groupLayer A grouplayer.\n     */\n\n  }, {\n    key: \"treeNodesFromLayerGroup\",\n    value: function treeNodesFromLayerGroup(groupLayer) {\n      var _this3 = this;\n\n      var layerArray = groupLayer.getLayers().getArray().filter(this.props.filterFunction);\n      var treeNodes = layerArray.map(function (layer) {\n        return _this3.treeNodeFromLayer(layer);\n      });\n      treeNodes.reverse();\n      this.setState({\n        treeNodes: treeNodes\n      });\n    }\n    /**\n     * Registers the add/remove listeners recursively for all ol.layer.Group.\n     *\n     * @param {ol.layer.Group} groupLayer A ol.layer.Group\n     */\n\n  }, {\n    key: \"registerAddRemoveListeners\",\n    value: function registerAddRemoveListeners(groupLayer) {\n      var _this4 = this;\n\n      var collection = groupLayer.getLayers();\n      var addEvtKey = collection.on('add', this.onCollectionAdd);\n      var removeEvtKey = collection.on('remove', this.onCollectionRemove);\n      var changeEvtKey = groupLayer.on('change:layers', this.onChangeLayers);\n      this.olListenerKeys.push(addEvtKey, removeEvtKey, changeEvtKey);\n      collection.forEach(function (layer) {\n        if (layer instanceof _Group[\"default\"]) {\n          _this4.registerAddRemoveListeners(layer);\n        }\n      });\n    }\n    /**\n     * Registers an eventhandler on the `ol.View`, which will rebuild the tree\n     * nodes whenever the view's resolution changes.\n     */\n\n  }, {\n    key: \"registerResolutionChangeHandler\",\n    value: function registerResolutionChangeHandler() {\n      var map = this.props.map;\n      var evtKey = map.on('moveend', this.rebuildTreeNodes.bind(this));\n      this.olListenerKeys.push(evtKey); // TODO when and how to we unbind?\n    }\n    /**\n     * Listens to the collections add event of a collection.\n     * Registers add/remove listeners if element is a collection and rebuilds the\n     * treeNodes.\n     *\n     * @param {ol.Collection.Event} evt The add event.\n     */\n\n  }, {\n    key: \"getTreeNodeTitle\",\n\n    /**\n     * Returns the title to render in the LayerTreeNode. If a nodeTitleRenderer\n     * has been passed as prop, it will be called and the (custom) return value\n     * will be rendered. Note: This can be any renderable element collection! If\n     * no function is given (the default) the layer name will be passed.\n     *\n     * @param {ol.layer.Base} layer The layer attached to the tree node.\n     * @return {Element} The title composition to render.\n     */\n    value: function getTreeNodeTitle(layer) {\n      if ((0, _isFunction[\"default\"])(this.props.nodeTitleRenderer)) {\n        return this.props.nodeTitleRenderer.call(this, layer);\n      } else {\n        return layer.get('name');\n      }\n    }\n    /**\n     * Creates a treeNode from a given layer.\n     *\n     * @param {ol.layer.Base} layer The given layer.\n     * @return {LayerTreeNode} The corresponding LayerTreeNode Element.\n     */\n\n  }, {\n    key: \"treeNodeFromLayer\",\n    value: function treeNodeFromLayer(layer) {\n      var _this5 = this;\n\n      var childNodes;\n      var treeNode;\n\n      if (layer instanceof _Group[\"default\"]) {\n        if (!layer.getVisible()) {\n          _Logger[\"default\"].warn('Your map configuration contains layerGroups that are' + 'invisible. This might lead to buggy behaviour.');\n        }\n\n        var childLayers = layer.getLayers().getArray().filter(this.props.filterFunction);\n        childNodes = childLayers.map(function (childLayer) {\n          return _this5.treeNodeFromLayer(childLayer);\n        });\n        childNodes.reverse();\n      } else {\n        if (!this.hasListener(layer, 'change:visible', this.onLayerChangeVisible)) {\n          var eventKey = layer.on('change:visible', this.onLayerChangeVisible);\n          this.olListenerKeys.push(eventKey);\n        }\n      }\n\n      treeNode = _react[\"default\"].createElement(_LayerTreeNode[\"default\"], {\n        title: this.getTreeNodeTitle(layer),\n        key: layer.ol_uid.toString(),\n        inResolutionRange: _MapUtil[\"default\"].layerInResolutionRange(layer, this.props.map)\n      }, childNodes);\n      return treeNode;\n    }\n    /**\n     * Determines if the target has already registered the given listener for the\n     * given eventtype.\n     *\n     * @param {Object} target The event target.\n     * @param {String} type The events type (name).\n     * @param {function} listener The function.\n     * @return {Boolean} True if the listener is allready contained in\n     *                   this.olListenerKeys.\n     */\n\n  }, {\n    key: \"onCheck\",\n\n    /**\n     * Sets the visibility of a layer due to its checked state.\n     *\n     * @param {Array<String>} checkedKeys Contains all checkedKeys.\n     * @param {e} checked The ant-tree event object for this event. See ant docs.\n     */\n    value: function onCheck(checkedKeys, e) {\n      var checked = e.checked;\n      var eventKey = e.node.props.eventKey;\n\n      var layer = _MapUtil[\"default\"].getLayerByOlUid(this.props.map, eventKey);\n\n      this.setLayerVisibility(layer, checked);\n    }\n    /**\n     * Sets the layer visibility. Calls itself recursively for groupLayers.\n     *\n     * @param {ol.layer.Base} layer The layer.\n     * @param {Boolean} visiblity The visiblity.\n     */\n\n  }, {\n    key: \"setLayerVisibility\",\n    value: function setLayerVisibility(layer, visibility) {\n      var _this6 = this;\n\n      if (!(layer instanceof _Base[\"default\"]) || !(0, _isBoolean[\"default\"])(visibility)) {\n        _Logger[\"default\"].error('setLayerVisibility called without layer or visiblity.');\n\n        return;\n      }\n\n      if (layer instanceof _Group[\"default\"]) {\n        layer.getLayers().forEach(function (subLayer) {\n          _this6.setLayerVisibility(subLayer, visibility);\n        });\n      } else {\n        layer.setVisible(visibility);\n      }\n    }\n    /**\n     * The callback method for the drop event. Layers will get reordered in the map\n     * and the tree.\n     *\n     * @param {Object} e The ant-tree event object for this event. See ant docs.\n     */\n\n  }, {\n    key: \"onDrop\",\n    value: function onDrop(e) {\n      var dragLayer = _MapUtil[\"default\"].getLayerByOlUid(this.props.map, e.dragNode.props.eventKey);\n\n      var dragInfo = _MapUtil[\"default\"].getLayerPositionInfo(dragLayer, this.props.map);\n\n      var dragCollection = dragInfo.groupLayer.getLayers();\n\n      var dropLayer = _MapUtil[\"default\"].getLayerByOlUid(this.props.map, e.node.props.eventKey);\n\n      var dropPos = e.node.props.pos.split('-');\n      var location = e.dropPosition - Number(dropPos[dropPos.length - 1]);\n      dragCollection.remove(dragLayer);\n\n      var dropInfo = _MapUtil[\"default\"].getLayerPositionInfo(dropLayer, this.props.map);\n\n      var dropPosition = dropInfo.position;\n      var dropCollection = dropInfo.groupLayer.getLayers(); // drop before node\n\n      if (location === -1) {\n        if (dropPosition === dropCollection.getLength() - 1) {\n          dropCollection.push(dragLayer);\n        } else {\n          dropCollection.insertAt(dropPosition + 1, dragLayer);\n        } // drop on node\n\n      } else if (location === 0) {\n        if (dropLayer instanceof _Group[\"default\"]) {\n          dropLayer.getLayers().push(dragLayer);\n        } else {\n          dropCollection.insertAt(dropPosition + 1, dragLayer);\n        } // drop after node\n\n      } else if (location === 1) {\n        dropCollection.insertAt(dropPosition, dragLayer);\n      }\n\n      this.rebuildTreeNodes();\n    }\n    /**\n     * Call rebuildTreeNodes onExpand to avoid sync issues.\n     *\n     */\n\n  }, {\n    key: \"render\",\n\n    /**\n     * The render function.\n     */\n    value: function render() {\n      var _this$props2 = this.props,\n          className = _this$props2.className,\n          layerGroup = _this$props2.layerGroup,\n          map = _this$props2.map,\n          nodeTitleRenderer = _this$props2.nodeTitleRenderer,\n          passThroughProps = _objectWithoutProperties(_this$props2, [\"className\", \"layerGroup\", \"map\", \"nodeTitleRenderer\"]);\n\n      var ddListeners;\n\n      if (passThroughProps.draggable) {\n        ddListeners = {\n          onDrop: this.onDrop.bind(this)\n        };\n      }\n\n      var finalClassName = className ? \"\".concat(className, \" \").concat(this.className) : this.className;\n      return _react[\"default\"].createElement(_tree[\"default\"], _extends({\n        className: finalClassName,\n        checkedKeys: this.state.checkedKeys,\n        onCheck: this.onCheck.bind(this)\n      }, ddListeners, passThroughProps, {\n        onExpand: this.onExpand\n      }), this.state.treeNodes);\n    }\n  }]);\n\n  return LayerTree;\n}(_react[\"default\"].Component);\n\n_defineProperty(LayerTree, \"propTypes\", {\n  /**\n   * An optional CSS class which should be added.\n   * @type {String}\n   */\n  className: _propTypes[\"default\"].string,\n  layerGroup: _propTypes[\"default\"].instanceOf(_Group[\"default\"]),\n  map: _propTypes[\"default\"].instanceOf(_Map[\"default\"]).isRequired,\n\n  /**\n   * A function that can be used to pass a custom node title. It can return\n   * any renderable element (String, Number, Element etc.) and receives\n   * the layer instance of the current tree node.\n   * @type {Function}\n   */\n  nodeTitleRenderer: _propTypes[\"default\"].func,\n\n  /**\n   * Compare https://ant.design/components/tree/\n   */\n  onExpand: _propTypes[\"default\"].func,\n\n  /**\n   * An optional array-filter function that is applied to every layer and\n   * subLayer. Return false to exclude this layer from the layerTree or true\n   * to include it.\n   *\n   * Compare MDN Docs for Array.prototype.filter: https://mdn.io/array/filter\n   *\n   * @type {Function}\n   */\n  filterFunction: _propTypes[\"default\"].func\n  /**\n   * The default properties.\n   *\n   * @type {Object}\n   */\n\n});\n\n_defineProperty(LayerTree, \"defaultProps\", {\n  draggable: true,\n  checkable: true,\n  filterFunction: function filterFunction() {\n    return true;\n  }\n  /**\n   * Invoked after the component is instantiated as well as when it\n   * receives new props. It should return an object to update state, or null\n   * to indicate that the new props do not require any state updates.\n   *\n   * @param {Object} nextProps The next properties.\n   * @param {Object} prevState The previous state.\n   */\n\n});\n\nvar _default = LayerTree;\nexports[\"default\"] = _default;","map":{"version":3,"sources":["/Users/dirkmennecke77/Desktop/Lageplan/node_modules/@terrestris/react-geo/dist/LayerTree/LayerTree.js"],"names":["Object","defineProperty","exports","value","require","_tree","_interopRequireDefault","_react","_propTypes","_Map","_Base","_Group","_Collection","_MapEvent","_Observable","_isBoolean","_isFunction","_isEqual","_Logger","_MapUtil","_LayerTreeNode","_constants","obj","__esModule","_typeof","Symbol","iterator","constructor","prototype","_extends","assign","target","i","arguments","length","source","key","hasOwnProperty","call","apply","_objectWithoutProperties","excluded","_objectWithoutPropertiesLoose","getOwnPropertySymbols","sourceSymbolKeys","indexOf","propertyIsEnumerable","sourceKeys","keys","_classCallCheck","instance","Constructor","TypeError","_possibleConstructorReturn","self","_assertThisInitialized","_getPrototypeOf","o","setPrototypeOf","getPrototypeOf","__proto__","ReferenceError","_defineProperties","props","descriptor","enumerable","configurable","writable","_createClass","protoProps","staticProps","_inherits","subClass","superClass","create","_setPrototypeOf","p","_defineProperty","LayerTree","_React$Component","getDerivedStateFromProps","nextProps","prevState","layerGroup","ol_uid","layerGroupRevision","getRevision","_this","concat","CSS_PREFIX","evt","element","registerAddRemoveListeners","rebuildTreeNodes","unregisterEventsByLayer","getLayers","forEach","layer","oldValue","olListenerKeys","filter","layers","type","listener","onCollectionAdd","onCollectionRemove","onChangeLayers","unByKey","onLayerChangeVisible","mapResolution","state","getView","getResolution","treeNodesFromLayerGroup","checkedKeys","getVisibleOlUids","setState","some","listenerKey","getAllLayers","getVisible","filterFunction","map","l","toString","expandedKeys","_ref","expanded","node","onExpand","treeNodes","componentDidMount","_this2","getLayerGroup","revision","registerResolutionChangeHandler","componentDidUpdate","prevProps","_this$props","nodeTitleRenderer","componentWillUnmount","groupLayer","_this3","layerArray","getArray","treeNodeFromLayer","reverse","_this4","collection","addEvtKey","on","removeEvtKey","changeEvtKey","push","evtKey","bind","getTreeNodeTitle","get","_this5","childNodes","treeNode","warn","childLayers","childLayer","hasListener","eventKey","createElement","title","inResolutionRange","layerInResolutionRange","onCheck","e","checked","getLayerByOlUid","setLayerVisibility","visibility","_this6","error","subLayer","setVisible","onDrop","dragLayer","dragNode","dragInfo","getLayerPositionInfo","dragCollection","dropLayer","dropPos","pos","split","location","dropPosition","Number","remove","dropInfo","position","dropCollection","getLength","insertAt","render","_this$props2","className","passThroughProps","ddListeners","draggable","finalClassName","Component","string","instanceOf","isRequired","func","checkable","_default"],"mappings":"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","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\n\nrequire(\"antd/es/tree/style\");\n\nvar _tree = _interopRequireDefault(require(\"antd/es/tree\"));\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _propTypes = _interopRequireDefault(require(\"prop-types\"));\n\nvar _Map = _interopRequireDefault(require(\"ol/Map\"));\n\nvar _Base = _interopRequireDefault(require(\"ol/layer/Base\"));\n\nvar _Group = _interopRequireDefault(require(\"ol/layer/Group\"));\n\nvar _Collection = _interopRequireDefault(require(\"ol/Collection\"));\n\nvar _MapEvent = _interopRequireDefault(require(\"ol/MapEvent\"));\n\nvar _Observable = require(\"ol/Observable\");\n\nvar _isBoolean = _interopRequireDefault(require(\"lodash/isBoolean\"));\n\nvar _isFunction = _interopRequireDefault(require(\"lodash/isFunction\"));\n\nvar _isEqual = _interopRequireDefault(require(\"lodash/isEqual\"));\n\nvar _Logger = _interopRequireDefault(require(\"@terrestris/base-util/dist/Logger\"));\n\nvar _MapUtil = _interopRequireDefault(require(\"@terrestris/ol-util/dist/MapUtil/MapUtil\"));\n\nvar _LayerTreeNode = _interopRequireDefault(require(\"../LayerTreeNode/LayerTreeNode.js\"));\n\nvar _constants = require(\"../constants\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\nfunction _typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n/**\n * The LayerTree.\n *\n * Note. This component expects that all layerGroups are permanently visibile.\n *\n * @class LayerTree\n * @extends React.Component\n */\nvar LayerTree =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(LayerTree, _React$Component);\n\n  _createClass(LayerTree, null, [{\n    key: \"getDerivedStateFromProps\",\n\n    /**\n     * The className added to this component.\n     * @type {String}\n     * @private\n     */\n\n    /**\n     *  An array of ol.EventsKey as returned by on() or once().\n     * @type {Array<ol.EventsKey>}\n     * @private\n     */\n\n    /**\n     * The properties.\n     * @type {Object}\n     */\n    value: function getDerivedStateFromProps(nextProps, prevState) {\n      if (prevState.layerGroup && nextProps.layerGroup) {\n        if (!(0, _isEqual[\"default\"])(prevState.layerGroup.ol_uid, nextProps.layerGroup.ol_uid) || !(0, _isEqual[\"default\"])(prevState.layerGroupRevision, nextProps.layerGroup.getRevision())) {\n          return {\n            layerGroup: nextProps.layerGroup,\n            layerGroupRevision: nextProps.layerGroup.getRevision()\n          };\n        }\n      }\n\n      return null;\n    }\n    /**\n     * Create the LayerTree.\n     *\n     * @constructs LayerTree\n     */\n\n  }]);\n\n  function LayerTree(props) {\n    var _this;\n\n    _classCallCheck(this, LayerTree);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(LayerTree).call(this, props));\n\n    _defineProperty(_assertThisInitialized(_this), \"className\", \"\".concat(_constants.CSS_PREFIX, \"layertree\"));\n\n    _defineProperty(_assertThisInitialized(_this), \"olListenerKeys\", []);\n\n    _defineProperty(_assertThisInitialized(_this), \"onCollectionAdd\", function (evt) {\n      if (evt.element instanceof _Group[\"default\"]) {\n        _this.registerAddRemoveListeners(evt.element);\n      }\n\n      _this.rebuildTreeNodes();\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onCollectionRemove\", function (evt) {\n      _this.unregisterEventsByLayer(evt.element);\n\n      if (evt.element instanceof _Group[\"default\"]) {\n        evt.element.getLayers().forEach(function (layer) {\n          _this.unregisterEventsByLayer(layer);\n        });\n      }\n\n      _this.rebuildTreeNodes();\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onChangeLayers\", function (evt) {\n      _this.unregisterEventsByLayer(evt.oldValue);\n\n      if (evt.oldValue instanceof _Collection[\"default\"]) {\n        evt.oldValue.forEach(function (layer) {\n          return _this.unregisterEventsByLayer(layer);\n        });\n      }\n\n      if (evt.target instanceof _Group[\"default\"]) {\n        _this.registerAddRemoveListeners(evt.target);\n      }\n\n      _this.rebuildTreeNodes();\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"unregisterEventsByLayer\", function (layer) {\n      _this.olListenerKeys = _this.olListenerKeys.filter(function (key) {\n        if (layer instanceof _Group[\"default\"]) {\n          var layers = layer.getLayers();\n\n          if (key.target === layers) {\n            if (key.type === 'add' && key.listener === _this.onCollectionAdd || key.type === 'remove' && key.listener === _this.onCollectionRemove || key.type === 'change:layers' && key.listener === _this.onChangeLayers) {\n              (0, _Observable.unByKey)(key);\n              return false;\n            }\n          }\n        } else if (key.target === layer) {\n          if (key.type === 'change:visible' && key.listener === _this.onLayerChangeVisible) {\n            (0, _Observable.unByKey)(key);\n            return false;\n          }\n        }\n\n        return true;\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"rebuildTreeNodes\", function (evt) {\n      var mapResolution = _this.state.mapResolution;\n\n      if (evt && evt instanceof _MapEvent[\"default\"] && evt.target && evt.target.getView) {\n        if (mapResolution === evt.target.getView().getResolution()) {\n          // If map resolution didn't change => no redraw of tree nodes needed.\n          return;\n        }\n      }\n\n      _this.treeNodesFromLayerGroup(_this.state.layerGroup);\n\n      var checkedKeys = _this.getVisibleOlUids();\n\n      _this.setState({\n        checkedKeys: checkedKeys,\n        mapResolution: evt ? evt.target.getView().getResolution() : -1\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"hasListener\", function (target, type, listener) {\n      return _this.olListenerKeys.some(function (listenerKey) {\n        return listenerKey.target === target && listenerKey.type === type && listenerKey.listener === listener;\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onLayerChangeVisible\", function () {\n      var checkedKeys = _this.getVisibleOlUids();\n\n      _this.setState({\n        checkedKeys: checkedKeys\n      }, function () {\n        _this.rebuildTreeNodes();\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"getVisibleOlUids\", function () {\n      var layers = _MapUtil[\"default\"].getAllLayers(_this.state.layerGroup, function (layer) {\n        return !(layer instanceof _Group[\"default\"]) && layer.getVisible();\n      }).filter(_this.props.filterFunction);\n\n      return layers.map(function (l) {\n        return l.ol_uid.toString();\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onExpand\", function (expandedKeys, _ref) {\n      var expanded = _ref.expanded,\n          node = _ref.node;\n      var onExpand = _this.props.onExpand;\n\n      _this.rebuildTreeNodes();\n\n      if (onExpand) {\n        onExpand(expandedKeys, {\n          expanded: expanded,\n          node: node\n        });\n      }\n    });\n\n    _this.state = {\n      layerGroup: null,\n      layerGroupRevision: null,\n      treeNodes: [],\n      checkedKeys: [],\n      mapResolution: -1\n    };\n    return _this;\n  }\n  /**\n   * Determines what to do on the initial mount.\n   */\n\n\n  _createClass(LayerTree, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      var layerGroup = this.props.layerGroup ? this.props.layerGroup : this.props.map.getLayerGroup();\n      var revision = this.props.layerGroup ? this.props.layerGroup.getRevision() : 0;\n      this.setState({\n        layerGroup: layerGroup,\n        layerGroupRevision: revision\n      }, function () {\n        _this2.registerAddRemoveListeners(_this2.state.layerGroup);\n\n        _this2.registerResolutionChangeHandler();\n\n        _this2.rebuildTreeNodes();\n      });\n    }\n    /**\n     * Invoked immediately after updating occurs. This method is not called for\n     * the initial render.\n     *\n     * @param {Object} prevProps The previous props.\n     * @param {Object} prevState The previous state.\n     */\n\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps, prevState) {\n      var _this$props = this.props,\n          layerGroup = _this$props.layerGroup,\n          nodeTitleRenderer = _this$props.nodeTitleRenderer;\n\n      if (layerGroup && prevState.layerGroup) {\n        if (!(0, _isEqual[\"default\"])(prevState.layerGroup.ol_uid, layerGroup.ol_uid)) {\n          (0, _Observable.unByKey)(this.olListenerKeys);\n          this.olListenerKeys = [];\n          this.registerAddRemoveListeners(layerGroup);\n          this.rebuildTreeNodes();\n        }\n      }\n\n      if (nodeTitleRenderer !== prevProps.nodeTitleRenderer) {\n        this.rebuildTreeNodes();\n      }\n    }\n    /**\n     * Determines what to do when the component is unmounted.\n     */\n\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      (0, _Observable.unByKey)(this.olListenerKeys);\n    }\n    /**\n     * Creates TreeNodes from a given layergroup and sets the treeNodes in the state.\n     *\n     * @param {ol.layer.Group} groupLayer A grouplayer.\n     */\n\n  }, {\n    key: \"treeNodesFromLayerGroup\",\n    value: function treeNodesFromLayerGroup(groupLayer) {\n      var _this3 = this;\n\n      var layerArray = groupLayer.getLayers().getArray().filter(this.props.filterFunction);\n      var treeNodes = layerArray.map(function (layer) {\n        return _this3.treeNodeFromLayer(layer);\n      });\n      treeNodes.reverse();\n      this.setState({\n        treeNodes: treeNodes\n      });\n    }\n    /**\n     * Registers the add/remove listeners recursively for all ol.layer.Group.\n     *\n     * @param {ol.layer.Group} groupLayer A ol.layer.Group\n     */\n\n  }, {\n    key: \"registerAddRemoveListeners\",\n    value: function registerAddRemoveListeners(groupLayer) {\n      var _this4 = this;\n\n      var collection = groupLayer.getLayers();\n      var addEvtKey = collection.on('add', this.onCollectionAdd);\n      var removeEvtKey = collection.on('remove', this.onCollectionRemove);\n      var changeEvtKey = groupLayer.on('change:layers', this.onChangeLayers);\n      this.olListenerKeys.push(addEvtKey, removeEvtKey, changeEvtKey);\n      collection.forEach(function (layer) {\n        if (layer instanceof _Group[\"default\"]) {\n          _this4.registerAddRemoveListeners(layer);\n        }\n      });\n    }\n    /**\n     * Registers an eventhandler on the `ol.View`, which will rebuild the tree\n     * nodes whenever the view's resolution changes.\n     */\n\n  }, {\n    key: \"registerResolutionChangeHandler\",\n    value: function registerResolutionChangeHandler() {\n      var map = this.props.map;\n      var evtKey = map.on('moveend', this.rebuildTreeNodes.bind(this));\n      this.olListenerKeys.push(evtKey); // TODO when and how to we unbind?\n    }\n    /**\n     * Listens to the collections add event of a collection.\n     * Registers add/remove listeners if element is a collection and rebuilds the\n     * treeNodes.\n     *\n     * @param {ol.Collection.Event} evt The add event.\n     */\n\n  }, {\n    key: \"getTreeNodeTitle\",\n\n    /**\n     * Returns the title to render in the LayerTreeNode. If a nodeTitleRenderer\n     * has been passed as prop, it will be called and the (custom) return value\n     * will be rendered. Note: This can be any renderable element collection! If\n     * no function is given (the default) the layer name will be passed.\n     *\n     * @param {ol.layer.Base} layer The layer attached to the tree node.\n     * @return {Element} The title composition to render.\n     */\n    value: function getTreeNodeTitle(layer) {\n      if ((0, _isFunction[\"default\"])(this.props.nodeTitleRenderer)) {\n        return this.props.nodeTitleRenderer.call(this, layer);\n      } else {\n        return layer.get('name');\n      }\n    }\n    /**\n     * Creates a treeNode from a given layer.\n     *\n     * @param {ol.layer.Base} layer The given layer.\n     * @return {LayerTreeNode} The corresponding LayerTreeNode Element.\n     */\n\n  }, {\n    key: \"treeNodeFromLayer\",\n    value: function treeNodeFromLayer(layer) {\n      var _this5 = this;\n\n      var childNodes;\n      var treeNode;\n\n      if (layer instanceof _Group[\"default\"]) {\n        if (!layer.getVisible()) {\n          _Logger[\"default\"].warn('Your map configuration contains layerGroups that are' + 'invisible. This might lead to buggy behaviour.');\n        }\n\n        var childLayers = layer.getLayers().getArray().filter(this.props.filterFunction);\n        childNodes = childLayers.map(function (childLayer) {\n          return _this5.treeNodeFromLayer(childLayer);\n        });\n        childNodes.reverse();\n      } else {\n        if (!this.hasListener(layer, 'change:visible', this.onLayerChangeVisible)) {\n          var eventKey = layer.on('change:visible', this.onLayerChangeVisible);\n          this.olListenerKeys.push(eventKey);\n        }\n      }\n\n      treeNode = _react[\"default\"].createElement(_LayerTreeNode[\"default\"], {\n        title: this.getTreeNodeTitle(layer),\n        key: layer.ol_uid.toString(),\n        inResolutionRange: _MapUtil[\"default\"].layerInResolutionRange(layer, this.props.map)\n      }, childNodes);\n      return treeNode;\n    }\n    /**\n     * Determines if the target has already registered the given listener for the\n     * given eventtype.\n     *\n     * @param {Object} target The event target.\n     * @param {String} type The events type (name).\n     * @param {function} listener The function.\n     * @return {Boolean} True if the listener is allready contained in\n     *                   this.olListenerKeys.\n     */\n\n  }, {\n    key: \"onCheck\",\n\n    /**\n     * Sets the visibility of a layer due to its checked state.\n     *\n     * @param {Array<String>} checkedKeys Contains all checkedKeys.\n     * @param {e} checked The ant-tree event object for this event. See ant docs.\n     */\n    value: function onCheck(checkedKeys, e) {\n      var checked = e.checked;\n      var eventKey = e.node.props.eventKey;\n\n      var layer = _MapUtil[\"default\"].getLayerByOlUid(this.props.map, eventKey);\n\n      this.setLayerVisibility(layer, checked);\n    }\n    /**\n     * Sets the layer visibility. Calls itself recursively for groupLayers.\n     *\n     * @param {ol.layer.Base} layer The layer.\n     * @param {Boolean} visiblity The visiblity.\n     */\n\n  }, {\n    key: \"setLayerVisibility\",\n    value: function setLayerVisibility(layer, visibility) {\n      var _this6 = this;\n\n      if (!(layer instanceof _Base[\"default\"]) || !(0, _isBoolean[\"default\"])(visibility)) {\n        _Logger[\"default\"].error('setLayerVisibility called without layer or visiblity.');\n\n        return;\n      }\n\n      if (layer instanceof _Group[\"default\"]) {\n        layer.getLayers().forEach(function (subLayer) {\n          _this6.setLayerVisibility(subLayer, visibility);\n        });\n      } else {\n        layer.setVisible(visibility);\n      }\n    }\n    /**\n     * The callback method for the drop event. Layers will get reordered in the map\n     * and the tree.\n     *\n     * @param {Object} e The ant-tree event object for this event. See ant docs.\n     */\n\n  }, {\n    key: \"onDrop\",\n    value: function onDrop(e) {\n      var dragLayer = _MapUtil[\"default\"].getLayerByOlUid(this.props.map, e.dragNode.props.eventKey);\n\n      var dragInfo = _MapUtil[\"default\"].getLayerPositionInfo(dragLayer, this.props.map);\n\n      var dragCollection = dragInfo.groupLayer.getLayers();\n\n      var dropLayer = _MapUtil[\"default\"].getLayerByOlUid(this.props.map, e.node.props.eventKey);\n\n      var dropPos = e.node.props.pos.split('-');\n      var location = e.dropPosition - Number(dropPos[dropPos.length - 1]);\n      dragCollection.remove(dragLayer);\n\n      var dropInfo = _MapUtil[\"default\"].getLayerPositionInfo(dropLayer, this.props.map);\n\n      var dropPosition = dropInfo.position;\n      var dropCollection = dropInfo.groupLayer.getLayers(); // drop before node\n\n      if (location === -1) {\n        if (dropPosition === dropCollection.getLength() - 1) {\n          dropCollection.push(dragLayer);\n        } else {\n          dropCollection.insertAt(dropPosition + 1, dragLayer);\n        } // drop on node\n\n      } else if (location === 0) {\n        if (dropLayer instanceof _Group[\"default\"]) {\n          dropLayer.getLayers().push(dragLayer);\n        } else {\n          dropCollection.insertAt(dropPosition + 1, dragLayer);\n        } // drop after node\n\n      } else if (location === 1) {\n        dropCollection.insertAt(dropPosition, dragLayer);\n      }\n\n      this.rebuildTreeNodes();\n    }\n    /**\n     * Call rebuildTreeNodes onExpand to avoid sync issues.\n     *\n     */\n\n  }, {\n    key: \"render\",\n\n    /**\n     * The render function.\n     */\n    value: function render() {\n      var _this$props2 = this.props,\n          className = _this$props2.className,\n          layerGroup = _this$props2.layerGroup,\n          map = _this$props2.map,\n          nodeTitleRenderer = _this$props2.nodeTitleRenderer,\n          passThroughProps = _objectWithoutProperties(_this$props2, [\"className\", \"layerGroup\", \"map\", \"nodeTitleRenderer\"]);\n\n      var ddListeners;\n\n      if (passThroughProps.draggable) {\n        ddListeners = {\n          onDrop: this.onDrop.bind(this)\n        };\n      }\n\n      var finalClassName = className ? \"\".concat(className, \" \").concat(this.className) : this.className;\n      return _react[\"default\"].createElement(_tree[\"default\"], _extends({\n        className: finalClassName,\n        checkedKeys: this.state.checkedKeys,\n        onCheck: this.onCheck.bind(this)\n      }, ddListeners, passThroughProps, {\n        onExpand: this.onExpand\n      }), this.state.treeNodes);\n    }\n  }]);\n\n  return LayerTree;\n}(_react[\"default\"].Component);\n\n_defineProperty(LayerTree, \"propTypes\", {\n  /**\n   * An optional CSS class which should be added.\n   * @type {String}\n   */\n  className: _propTypes[\"default\"].string,\n  layerGroup: _propTypes[\"default\"].instanceOf(_Group[\"default\"]),\n  map: _propTypes[\"default\"].instanceOf(_Map[\"default\"]).isRequired,\n\n  /**\n   * A function that can be used to pass a custom node title. It can return\n   * any renderable element (String, Number, Element etc.) and receives\n   * the layer instance of the current tree node.\n   * @type {Function}\n   */\n  nodeTitleRenderer: _propTypes[\"default\"].func,\n\n  /**\n   * Compare https://ant.design/components/tree/\n   */\n  onExpand: _propTypes[\"default\"].func,\n\n  /**\n   * An optional array-filter function that is applied to every layer and\n   * subLayer. Return false to exclude this layer from the layerTree or true\n   * to include it.\n   *\n   * Compare MDN Docs for Array.prototype.filter: https://mdn.io/array/filter\n   *\n   * @type {Function}\n   */\n  filterFunction: _propTypes[\"default\"].func\n  /**\n   * The default properties.\n   *\n   * @type {Object}\n   */\n\n});\n\n_defineProperty(LayerTree, \"defaultProps\", {\n  draggable: true,\n  checkable: true,\n  filterFunction: function filterFunction() {\n    return true;\n  }\n  /**\n   * Invoked after the component is instantiated as well as when it\n   * receives new props. It should return an object to update state, or null\n   * to indicate that the new props do not require any state updates.\n   *\n   * @param {Object} nextProps The next properties.\n   * @param {Object} prevState The previous state.\n   */\n\n});\n\nvar _default = LayerTree;\nexports[\"default\"] = _default;"]},"metadata":{},"sourceType":"script"}