{"ast":null,"code":"/**\n * @module ol/render/Box\n */\nimport Disposable from '../Disposable.js';\nimport Polygon from '../geom/Polygon.js';\n\nvar RenderBox =\n/*@__PURE__*/\nfunction (Disposable) {\n  function RenderBox(className) {\n    Disposable.call(this);\n    /**\n     * @type {import(\"../geom/Polygon.js\").default}\n     * @private\n     */\n\n    this.geometry_ = null;\n    /**\n     * @type {HTMLDivElement}\n     * @private\n     */\n\n    this.element_ =\n    /** @type {HTMLDivElement} */\n    document.createElement('div');\n    this.element_.style.position = 'absolute';\n    this.element_.className = 'ol-box ' + className;\n    /**\n     * @private\n     * @type {import(\"../PluggableMap.js\").default}\n     */\n\n    this.map_ = null;\n    /**\n     * @private\n     * @type {import(\"../pixel.js\").Pixel}\n     */\n\n    this.startPixel_ = null;\n    /**\n     * @private\n     * @type {import(\"../pixel.js\").Pixel}\n     */\n\n    this.endPixel_ = null;\n  }\n\n  if (Disposable) RenderBox.__proto__ = Disposable;\n  RenderBox.prototype = Object.create(Disposable && Disposable.prototype);\n  RenderBox.prototype.constructor = RenderBox;\n  /**\n   * @inheritDoc\n   */\n\n  RenderBox.prototype.disposeInternal = function disposeInternal() {\n    this.setMap(null);\n  };\n  /**\n   * @private\n   */\n\n\n  RenderBox.prototype.render_ = function render_() {\n    var startPixel = this.startPixel_;\n    var endPixel = this.endPixel_;\n    var px = 'px';\n    var style = this.element_.style;\n    style.left = Math.min(startPixel[0], endPixel[0]) + px;\n    style.top = Math.min(startPixel[1], endPixel[1]) + px;\n    style.width = Math.abs(endPixel[0] - startPixel[0]) + px;\n    style.height = Math.abs(endPixel[1] - startPixel[1]) + px;\n  };\n  /**\n   * @param {import(\"../PluggableMap.js\").default} map Map.\n   */\n\n\n  RenderBox.prototype.setMap = function setMap(map) {\n    if (this.map_) {\n      this.map_.getOverlayContainer().removeChild(this.element_);\n      var style = this.element_.style;\n      style.left = style.top = style.width = style.height = 'inherit';\n    }\n\n    this.map_ = map;\n\n    if (this.map_) {\n      this.map_.getOverlayContainer().appendChild(this.element_);\n    }\n  };\n  /**\n   * @param {import(\"../pixel.js\").Pixel} startPixel Start pixel.\n   * @param {import(\"../pixel.js\").Pixel} endPixel End pixel.\n   */\n\n\n  RenderBox.prototype.setPixels = function setPixels(startPixel, endPixel) {\n    this.startPixel_ = startPixel;\n    this.endPixel_ = endPixel;\n    this.createOrUpdateGeometry();\n    this.render_();\n  };\n  /**\n   * Creates or updates the cached geometry.\n   */\n\n\n  RenderBox.prototype.createOrUpdateGeometry = function createOrUpdateGeometry() {\n    var startPixel = this.startPixel_;\n    var endPixel = this.endPixel_;\n    var pixels = [startPixel, [startPixel[0], endPixel[1]], endPixel, [endPixel[0], startPixel[1]]];\n    var coordinates = pixels.map(this.map_.getCoordinateFromPixel, this.map_); // close the polygon\n\n    coordinates[4] = coordinates[0].slice();\n\n    if (!this.geometry_) {\n      this.geometry_ = new Polygon([coordinates]);\n    } else {\n      this.geometry_.setCoordinates([coordinates]);\n    }\n  };\n  /**\n   * @return {import(\"../geom/Polygon.js\").default} Geometry.\n   */\n\n\n  RenderBox.prototype.getGeometry = function getGeometry() {\n    return this.geometry_;\n  };\n\n  return RenderBox;\n}(Disposable);\n\nexport default RenderBox;","map":{"version":3,"sources":["../../../src/ol/render/Box.js"],"names":["super","const"],"mappings":"AAAA;;;AAIA,OAAO,UAAP,MAAuB,kBAAvB;AACA,OAAO,OAAP,MAAoB,oBAApB;;AAEA,IAAM,SAAS;AAAmB;AAAA,UAAA,UAAA,EAAA;AAIhC,WAAA,SAAA,CAAY,SAAZ,EAAuB;AACrBA,IAAAA,UAAAA,CAAAA,IAAAA,CAAK,IAALA;;;;;;AAMA,SAAK,SAAL,GAAiB,IAAjB;;;;;;AAMA,SAAK,QAAL;AAAa;AAAkC,IAAA,QAAQ,CAAC,aAAT,CAAuB,KAAvB,CAA/C;AACA,SAAK,QAAL,CAAc,KAAd,CAAoB,QAApB,GAA+B,UAA/B;AACA,SAAK,QAAL,CAAc,SAAd,GAA0B,YAAY,SAAtC;;;;;;AAMA,SAAK,IAAL,GAAY,IAAZ;;;;;;AAMA,SAAK,WAAL,GAAmB,IAAnB;;;;;;AAMA,SAAK,SAAL,GAAiB,IAAjB;;;;;oCAED,S;;;;;sBAKD,e,GAAA,SAAA,eAAA,GAAkB;AAChB,SAAK,MAAL,CAAY,IAAZ;AACD,G;;;;;;sBAKD,O,GAAA,SAAA,OAAA,GAAU;AACRC,QAAM,UAAU,GAAG,KAAK,WAAxBA;AACAA,QAAM,QAAQ,GAAG,KAAK,SAAtBA;AACAA,QAAM,EAAE,GAAG,IAAXA;AACAA,QAAM,KAAK,GAAG,KAAK,QAAL,CAAc,KAA5BA;AACA,IAAA,KAAK,CAAC,IAAN,GAAa,IAAI,CAAC,GAAL,CAAS,UAAU,CAAC,CAAD,CAAnB,EAAwB,QAAQ,CAAC,CAAD,CAAhC,IAAuC,EAApD;AACA,IAAA,KAAK,CAAC,GAAN,GAAY,IAAI,CAAC,GAAL,CAAS,UAAU,CAAC,CAAD,CAAnB,EAAwB,QAAQ,CAAC,CAAD,CAAhC,IAAuC,EAAnD;AACA,IAAA,KAAK,CAAC,KAAN,GAAc,IAAI,CAAC,GAAL,CAAS,QAAQ,CAAC,CAAD,CAAR,GAAc,UAAU,CAAC,CAAD,CAAjC,IAAwC,EAAtD;AACA,IAAA,KAAK,CAAC,MAAN,GAAe,IAAI,CAAC,GAAL,CAAS,QAAQ,CAAC,CAAD,CAAR,GAAc,UAAU,CAAC,CAAD,CAAjC,IAAwC,EAAvD;AACD,G;;;;;;sBAKD,M,GAAA,SAAA,MAAA,CAAO,GAAP,EAAY;AACV,QAAI,KAAK,IAAT,EAAe;AACb,WAAK,IAAL,CAAU,mBAAV,GAAgC,WAAhC,CAA4C,KAAK,QAAjD;AACAA,UAAM,KAAK,GAAG,KAAK,QAAL,CAAc,KAA5BA;AACA,MAAA,KAAK,CAAC,IAAN,GAAa,KAAK,CAAC,GAAN,GAAY,KAAK,CAAC,KAAN,GAAc,KAAK,CAAC,MAAN,GAAe,SAAtD;AACD;;AACD,SAAK,IAAL,GAAY,GAAZ;;AACA,QAAI,KAAK,IAAT,EAAe;AACb,WAAK,IAAL,CAAU,mBAAV,GAAgC,WAAhC,CAA4C,KAAK,QAAjD;AACD;AACF,G;;;;;;;sBAMD,S,GAAA,SAAA,SAAA,CAAU,UAAV,EAAsB,QAAtB,EAAgC;AAC9B,SAAK,WAAL,GAAmB,UAAnB;AACA,SAAK,SAAL,GAAiB,QAAjB;AACA,SAAK,sBAAL;AACA,SAAK,OAAL;AACD,G;;;;;;sBAKD,sB,GAAA,SAAA,sBAAA,GAAyB;AACvBA,QAAM,UAAU,GAAG,KAAK,WAAxBA;AACAA,QAAM,QAAQ,GAAG,KAAK,SAAtBA;AACAA,QAAM,MAAM,GAAG,CACb,UADa,EAEb,CAAC,UAAU,CAAC,CAAD,CAAX,EAAgB,QAAQ,CAAC,CAAD,CAAxB,CAFa,EAGb,QAHa,EAIb,CAAC,QAAQ,CAAC,CAAD,CAAT,EAAc,UAAU,CAAC,CAAD,CAAxB,CAJa,CAAfA;AAMAA,QAAM,WAAW,GAAG,MAAM,CAAC,GAAP,CAAW,KAAK,IAAL,CAAU,sBAArB,EAA6C,KAAK,IAAlD,CAApBA,CATuB,C;;AAWvB,IAAA,WAAW,CAAC,CAAD,CAAX,GAAiB,WAAW,CAAC,CAAD,CAAX,CAAe,KAAf,EAAjB;;AACA,QAAI,CAAC,KAAK,SAAV,EAAqB;AACnB,WAAK,SAAL,GAAiB,IAAI,OAAJ,CAAY,CAAC,WAAD,CAAZ,CAAjB;AACD,KAFD,MAEO;AACL,WAAK,SAAL,CAAe,cAAf,CAA8B,CAAC,WAAD,CAA9B;AACD;AACF,G;;;;;;sBAKD,W,GAAA,SAAA,WAAA,GAAc;AACZ,WAAO,KAAK,SAAZ;AACD,G;;;CAnH+B,CAAV,UAAU,CAAlC;;AAuHA,eAAe,SAAf","sourcesContent":["/**\n * @module ol/render/Box\n */\n\nimport Disposable from '../Disposable.js';\nimport Polygon from '../geom/Polygon.js';\n\nclass RenderBox extends Disposable {\n  /**\n   * @param {string} className CSS class name.\n   */\n  constructor(className) {\n    super();\n\n    /**\n     * @type {import(\"../geom/Polygon.js\").default}\n     * @private\n     */\n    this.geometry_ = null;\n\n    /**\n     * @type {HTMLDivElement}\n     * @private\n     */\n    this.element_ = /** @type {HTMLDivElement} */ (document.createElement('div'));\n    this.element_.style.position = 'absolute';\n    this.element_.className = 'ol-box ' + className;\n\n    /**\n     * @private\n     * @type {import(\"../PluggableMap.js\").default}\n     */\n    this.map_ = null;\n\n    /**\n     * @private\n     * @type {import(\"../pixel.js\").Pixel}\n     */\n    this.startPixel_ = null;\n\n    /**\n     * @private\n     * @type {import(\"../pixel.js\").Pixel}\n     */\n    this.endPixel_ = null;\n\n  }\n\n  /**\n   * @inheritDoc\n   */\n  disposeInternal() {\n    this.setMap(null);\n  }\n\n  /**\n   * @private\n   */\n  render_() {\n    const startPixel = this.startPixel_;\n    const endPixel = this.endPixel_;\n    const px = 'px';\n    const style = this.element_.style;\n    style.left = Math.min(startPixel[0], endPixel[0]) + px;\n    style.top = Math.min(startPixel[1], endPixel[1]) + px;\n    style.width = Math.abs(endPixel[0] - startPixel[0]) + px;\n    style.height = Math.abs(endPixel[1] - startPixel[1]) + px;\n  }\n\n  /**\n   * @param {import(\"../PluggableMap.js\").default} map Map.\n   */\n  setMap(map) {\n    if (this.map_) {\n      this.map_.getOverlayContainer().removeChild(this.element_);\n      const style = this.element_.style;\n      style.left = style.top = style.width = style.height = 'inherit';\n    }\n    this.map_ = map;\n    if (this.map_) {\n      this.map_.getOverlayContainer().appendChild(this.element_);\n    }\n  }\n\n  /**\n   * @param {import(\"../pixel.js\").Pixel} startPixel Start pixel.\n   * @param {import(\"../pixel.js\").Pixel} endPixel End pixel.\n   */\n  setPixels(startPixel, endPixel) {\n    this.startPixel_ = startPixel;\n    this.endPixel_ = endPixel;\n    this.createOrUpdateGeometry();\n    this.render_();\n  }\n\n  /**\n   * Creates or updates the cached geometry.\n   */\n  createOrUpdateGeometry() {\n    const startPixel = this.startPixel_;\n    const endPixel = this.endPixel_;\n    const pixels = [\n      startPixel,\n      [startPixel[0], endPixel[1]],\n      endPixel,\n      [endPixel[0], startPixel[1]]\n    ];\n    const coordinates = pixels.map(this.map_.getCoordinateFromPixel, this.map_);\n    // close the polygon\n    coordinates[4] = coordinates[0].slice();\n    if (!this.geometry_) {\n      this.geometry_ = new Polygon([coordinates]);\n    } else {\n      this.geometry_.setCoordinates([coordinates]);\n    }\n  }\n\n  /**\n   * @return {import(\"../geom/Polygon.js\").default} Geometry.\n   */\n  getGeometry() {\n    return this.geometry_;\n  }\n}\n\n\nexport default RenderBox;\n"]},"metadata":{},"sourceType":"module"}