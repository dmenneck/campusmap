{"ast":null,"code":"/**\n * @module ol/Overlay\n */\nimport MapEventType from './MapEventType.js';\nimport BaseObject, { getChangeEventType } from './Object.js';\nimport OverlayPositioning from './OverlayPositioning.js';\nimport { CLASS_SELECTABLE } from './css.js';\nimport { removeNode, removeChildren, outerWidth, outerHeight } from './dom.js';\nimport { listen, unlistenByKey } from './events.js';\nimport { containsExtent } from './extent.js';\n/**\n * @typedef {Object} Options\n * @property {number|string} [id] Set the overlay id. The overlay id can be used\n * with the {@link module:ol/Map~Map#getOverlayById} method.\n * @property {HTMLElement} [element] The overlay element.\n * @property {Array<number>} [offset=[0, 0]] Offsets in pixels used when positioning\n * the overlay. The first element in the\n * array is the horizontal offset. A positive value shifts the overlay right.\n * The second element in the array is the vertical offset. A positive value\n * shifts the overlay down.\n * @property {import(\"./coordinate.js\").Coordinate} [position] The overlay position\n * in map projection.\n * @property {OverlayPositioning} [positioning='top-left'] Defines how\n * the overlay is actually positioned with respect to its `position` property.\n * Possible values are `'bottom-left'`, `'bottom-center'`, `'bottom-right'`,\n * `'center-left'`, `'center-center'`, `'center-right'`, `'top-left'`,\n * `'top-center'`, and `'top-right'`.\n * @property {boolean} [stopEvent=true] Whether event propagation to the map\n * viewport should be stopped. If `true` the overlay is placed in the same\n * container as that of the controls (CSS class name\n * `ol-overlaycontainer-stopevent`); if `false` it is placed in the container\n * with CSS class name specified by the `className` property.\n * @property {boolean} [insertFirst=true] Whether the overlay is inserted first\n * in the overlay container, or appended. If the overlay is placed in the same\n * container as that of the controls (see the `stopEvent` option) you will\n * probably set `insertFirst` to `true` so the overlay is displayed below the\n * controls.\n * @property {boolean} [autoPan=false] If set to `true` the map is panned when\n * calling `setPosition`, so that the overlay is entirely visible in the current\n * viewport.\n * @property {PanOptions} [autoPanAnimation] The\n * animation options used to pan the overlay into view. This animation is only\n * used when `autoPan` is enabled. A `duration` and `easing` may be provided to\n * customize the animation.\n * @property {number} [autoPanMargin=20] The margin (in pixels) between the\n * overlay and the borders of the map when autopanning.\n * @property {string} [className='ol-overlay-container ol-selectable'] CSS class\n * name.\n */\n\n/**\n * @typedef {Object} PanOptions\n * @property {number} [duration=1000] The duration of the animation in\n * milliseconds.\n * @property {function(number):number} [easing] The easing function to use. Can\n * be one from {@link module:ol/easing} or a custom function.\n * Default is {@link module:ol/easing~inAndOut}.\n */\n\n/**\n * @enum {string}\n * @protected\n */\n\nvar Property = {\n  ELEMENT: 'element',\n  MAP: 'map',\n  OFFSET: 'offset',\n  POSITION: 'position',\n  POSITIONING: 'positioning'\n};\n/**\n * @classdesc\n * An element to be displayed over the map and attached to a single map\n * location.  Like {@link module:ol/control/Control~Control}, Overlays are\n * visible widgets. Unlike Controls, they are not in a fixed position on the\n * screen, but are tied to a geographical coordinate, so panning the map will\n * move an Overlay but not a Control.\n *\n * Example:\n *\n *     import Overlay from 'ol/Overlay';\n *\n *     var popup = new Overlay({\n *       element: document.getElementById('popup')\n *     });\n *     popup.setPosition(coordinate);\n *     map.addOverlay(popup);\n *\n * @api\n */\n\nvar Overlay =\n/*@__PURE__*/\nfunction (BaseObject) {\n  function Overlay(options) {\n    BaseObject.call(this);\n    /**\n     * @protected\n     * @type {Options}\n     */\n\n    this.options = options;\n    /**\n     * @protected\n     * @type {number|string|undefined}\n     */\n\n    this.id = options.id;\n    /**\n     * @protected\n     * @type {boolean}\n     */\n\n    this.insertFirst = options.insertFirst !== undefined ? options.insertFirst : true;\n    /**\n     * @protected\n     * @type {boolean}\n     */\n\n    this.stopEvent = options.stopEvent !== undefined ? options.stopEvent : true;\n    /**\n     * @protected\n     * @type {HTMLElement}\n     */\n\n    this.element = document.createElement('div');\n    this.element.className = options.className !== undefined ? options.className : 'ol-overlay-container ' + CLASS_SELECTABLE;\n    this.element.style.position = 'absolute';\n    /**\n     * @protected\n     * @type {boolean}\n     */\n\n    this.autoPan = options.autoPan !== undefined ? options.autoPan : false;\n    /**\n     * @protected\n     * @type {PanOptions}\n     */\n\n    this.autoPanAnimation = options.autoPanAnimation ||\n    /** @type {PanOptions} */\n    {};\n    /**\n     * @protected\n     * @type {number}\n     */\n\n    this.autoPanMargin = options.autoPanMargin !== undefined ? options.autoPanMargin : 20;\n    /**\n     * @protected\n     * @type {{bottom_: string,\n     *         left_: string,\n     *         right_: string,\n     *         top_: string,\n     *         visible: boolean}}\n     */\n\n    this.rendered = {\n      bottom_: '',\n      left_: '',\n      right_: '',\n      top_: '',\n      visible: true\n    };\n    /**\n     * @protected\n     * @type {?import(\"./events.js\").EventsKey}\n     */\n\n    this.mapPostrenderListenerKey = null;\n    listen(this, getChangeEventType(Property.ELEMENT), this.handleElementChanged, this);\n    listen(this, getChangeEventType(Property.MAP), this.handleMapChanged, this);\n    listen(this, getChangeEventType(Property.OFFSET), this.handleOffsetChanged, this);\n    listen(this, getChangeEventType(Property.POSITION), this.handlePositionChanged, this);\n    listen(this, getChangeEventType(Property.POSITIONING), this.handlePositioningChanged, this);\n\n    if (options.element !== undefined) {\n      this.setElement(options.element);\n    }\n\n    this.setOffset(options.offset !== undefined ? options.offset : [0, 0]);\n    this.setPositioning(options.positioning !== undefined ?\n    /** @type {OverlayPositioning} */\n    options.positioning : OverlayPositioning.TOP_LEFT);\n\n    if (options.position !== undefined) {\n      this.setPosition(options.position);\n    }\n  }\n\n  if (BaseObject) Overlay.__proto__ = BaseObject;\n  Overlay.prototype = Object.create(BaseObject && BaseObject.prototype);\n  Overlay.prototype.constructor = Overlay;\n  /**\n   * Get the DOM element of this overlay.\n   * @return {HTMLElement|undefined} The Element containing the overlay.\n   * @observable\n   * @api\n   */\n\n  Overlay.prototype.getElement = function getElement() {\n    return (\n      /** @type {HTMLElement|undefined} */\n      this.get(Property.ELEMENT)\n    );\n  };\n  /**\n   * Get the overlay identifier which is set on constructor.\n   * @return {number|string|undefined} Id.\n   * @api\n   */\n\n\n  Overlay.prototype.getId = function getId() {\n    return this.id;\n  };\n  /**\n   * Get the map associated with this overlay.\n   * @return {import(\"./PluggableMap.js\").default|undefined} The map that the\n   * overlay is part of.\n   * @observable\n   * @api\n   */\n\n\n  Overlay.prototype.getMap = function getMap() {\n    return (\n      /** @type {import(\"./PluggableMap.js\").default|undefined} */\n      this.get(Property.MAP)\n    );\n  };\n  /**\n   * Get the offset of this overlay.\n   * @return {Array<number>} The offset.\n   * @observable\n   * @api\n   */\n\n\n  Overlay.prototype.getOffset = function getOffset() {\n    return (\n      /** @type {Array<number>} */\n      this.get(Property.OFFSET)\n    );\n  };\n  /**\n   * Get the current position of this overlay.\n   * @return {import(\"./coordinate.js\").Coordinate|undefined} The spatial point that the overlay is\n   *     anchored at.\n   * @observable\n   * @api\n   */\n\n\n  Overlay.prototype.getPosition = function getPosition() {\n    return (\n      /** @type {import(\"./coordinate.js\").Coordinate|undefined} */\n      this.get(Property.POSITION)\n    );\n  };\n  /**\n   * Get the current positioning of this overlay.\n   * @return {OverlayPositioning} How the overlay is positioned\n   *     relative to its point on the map.\n   * @observable\n   * @api\n   */\n\n\n  Overlay.prototype.getPositioning = function getPositioning() {\n    return (\n      /** @type {OverlayPositioning} */\n      this.get(Property.POSITIONING)\n    );\n  };\n  /**\n   * @protected\n   */\n\n\n  Overlay.prototype.handleElementChanged = function handleElementChanged() {\n    removeChildren(this.element);\n    var element = this.getElement();\n\n    if (element) {\n      this.element.appendChild(element);\n    }\n  };\n  /**\n   * @protected\n   */\n\n\n  Overlay.prototype.handleMapChanged = function handleMapChanged() {\n    if (this.mapPostrenderListenerKey) {\n      removeNode(this.element);\n      unlistenByKey(this.mapPostrenderListenerKey);\n      this.mapPostrenderListenerKey = null;\n    }\n\n    var map = this.getMap();\n\n    if (map) {\n      this.mapPostrenderListenerKey = listen(map, MapEventType.POSTRENDER, this.render, this);\n      this.updatePixelPosition();\n      var container = this.stopEvent ? map.getOverlayContainerStopEvent() : map.getOverlayContainer();\n\n      if (this.insertFirst) {\n        container.insertBefore(this.element, container.childNodes[0] || null);\n      } else {\n        container.appendChild(this.element);\n      }\n    }\n  };\n  /**\n   * @protected\n   */\n\n\n  Overlay.prototype.render = function render() {\n    this.updatePixelPosition();\n  };\n  /**\n   * @protected\n   */\n\n\n  Overlay.prototype.handleOffsetChanged = function handleOffsetChanged() {\n    this.updatePixelPosition();\n  };\n  /**\n   * @protected\n   */\n\n\n  Overlay.prototype.handlePositionChanged = function handlePositionChanged() {\n    this.updatePixelPosition();\n\n    if (this.get(Property.POSITION) && this.autoPan) {\n      this.panIntoView();\n    }\n  };\n  /**\n   * @protected\n   */\n\n\n  Overlay.prototype.handlePositioningChanged = function handlePositioningChanged() {\n    this.updatePixelPosition();\n  };\n  /**\n   * Set the DOM element to be associated with this overlay.\n   * @param {HTMLElement|undefined} element The Element containing the overlay.\n   * @observable\n   * @api\n   */\n\n\n  Overlay.prototype.setElement = function setElement(element) {\n    this.set(Property.ELEMENT, element);\n  };\n  /**\n   * Set the map to be associated with this overlay.\n   * @param {import(\"./PluggableMap.js\").default|undefined} map The map that the\n   * overlay is part of.\n   * @observable\n   * @api\n   */\n\n\n  Overlay.prototype.setMap = function setMap(map) {\n    this.set(Property.MAP, map);\n  };\n  /**\n   * Set the offset for this overlay.\n   * @param {Array<number>} offset Offset.\n   * @observable\n   * @api\n   */\n\n\n  Overlay.prototype.setOffset = function setOffset(offset) {\n    this.set(Property.OFFSET, offset);\n  };\n  /**\n   * Set the position for this overlay. If the position is `undefined` the\n   * overlay is hidden.\n   * @param {import(\"./coordinate.js\").Coordinate|undefined} position The spatial point that the overlay\n   *     is anchored at.\n   * @observable\n   * @api\n   */\n\n\n  Overlay.prototype.setPosition = function setPosition(position) {\n    this.set(Property.POSITION, position);\n  };\n  /**\n   * Pan the map so that the overlay is entirely visible in the current viewport\n   * (if necessary).\n   * @protected\n   */\n\n\n  Overlay.prototype.panIntoView = function panIntoView() {\n    var map = this.getMap();\n\n    if (!map || !map.getTargetElement()) {\n      return;\n    }\n\n    var mapRect = this.getRect(map.getTargetElement(), map.getSize());\n    var element = this.getElement();\n    var overlayRect = this.getRect(element, [outerWidth(element), outerHeight(element)]);\n    var margin = this.autoPanMargin;\n\n    if (!containsExtent(mapRect, overlayRect)) {\n      // the overlay is not completely inside the viewport, so pan the map\n      var offsetLeft = overlayRect[0] - mapRect[0];\n      var offsetRight = mapRect[2] - overlayRect[2];\n      var offsetTop = overlayRect[1] - mapRect[1];\n      var offsetBottom = mapRect[3] - overlayRect[3];\n      var delta = [0, 0];\n\n      if (offsetLeft < 0) {\n        // move map to the left\n        delta[0] = offsetLeft - margin;\n      } else if (offsetRight < 0) {\n        // move map to the right\n        delta[0] = Math.abs(offsetRight) + margin;\n      }\n\n      if (offsetTop < 0) {\n        // move map up\n        delta[1] = offsetTop - margin;\n      } else if (offsetBottom < 0) {\n        // move map down\n        delta[1] = Math.abs(offsetBottom) + margin;\n      }\n\n      if (delta[0] !== 0 || delta[1] !== 0) {\n        var center =\n        /** @type {import(\"./coordinate.js\").Coordinate} */\n        map.getView().getCenter();\n        var centerPx = map.getPixelFromCoordinate(center);\n        var newCenterPx = [centerPx[0] + delta[0], centerPx[1] + delta[1]];\n        map.getView().animate({\n          center: map.getCoordinateFromPixel(newCenterPx),\n          duration: this.autoPanAnimation.duration,\n          easing: this.autoPanAnimation.easing\n        });\n      }\n    }\n  };\n  /**\n   * Get the extent of an element relative to the document\n   * @param {HTMLElement|undefined} element The element.\n   * @param {import(\"./size.js\").Size|undefined} size The size of the element.\n   * @return {import(\"./extent.js\").Extent} The extent.\n   * @protected\n   */\n\n\n  Overlay.prototype.getRect = function getRect(element, size) {\n    var box = element.getBoundingClientRect();\n    var offsetX = box.left + window.pageXOffset;\n    var offsetY = box.top + window.pageYOffset;\n    return [offsetX, offsetY, offsetX + size[0], offsetY + size[1]];\n  };\n  /**\n   * Set the positioning for this overlay.\n   * @param {OverlayPositioning} positioning how the overlay is\n   *     positioned relative to its point on the map.\n   * @observable\n   * @api\n   */\n\n\n  Overlay.prototype.setPositioning = function setPositioning(positioning) {\n    this.set(Property.POSITIONING, positioning);\n  };\n  /**\n   * Modify the visibility of the element.\n   * @param {boolean} visible Element visibility.\n   * @protected\n   */\n\n\n  Overlay.prototype.setVisible = function setVisible(visible) {\n    if (this.rendered.visible !== visible) {\n      this.element.style.display = visible ? '' : 'none';\n      this.rendered.visible = visible;\n    }\n  };\n  /**\n   * Update pixel position.\n   * @protected\n   */\n\n\n  Overlay.prototype.updatePixelPosition = function updatePixelPosition() {\n    var map = this.getMap();\n    var position = this.getPosition();\n\n    if (!map || !map.isRendered() || !position) {\n      this.setVisible(false);\n      return;\n    }\n\n    var pixel = map.getPixelFromCoordinate(position);\n    var mapSize = map.getSize();\n    this.updateRenderedPosition(pixel, mapSize);\n  };\n  /**\n   * @param {import(\"./pixel.js\").Pixel} pixel The pixel location.\n   * @param {import(\"./size.js\").Size|undefined} mapSize The map size.\n   * @protected\n   */\n\n\n  Overlay.prototype.updateRenderedPosition = function updateRenderedPosition(pixel, mapSize) {\n    var style = this.element.style;\n    var offset = this.getOffset();\n    var positioning = this.getPositioning();\n    this.setVisible(true);\n    var offsetX = offset[0];\n    var offsetY = offset[1];\n\n    if (positioning == OverlayPositioning.BOTTOM_RIGHT || positioning == OverlayPositioning.CENTER_RIGHT || positioning == OverlayPositioning.TOP_RIGHT) {\n      if (this.rendered.left_ !== '') {\n        this.rendered.left_ = style.left = '';\n      }\n\n      var right = Math.round(mapSize[0] - pixel[0] - offsetX) + 'px';\n\n      if (this.rendered.right_ != right) {\n        this.rendered.right_ = style.right = right;\n      }\n    } else {\n      if (this.rendered.right_ !== '') {\n        this.rendered.right_ = style.right = '';\n      }\n\n      if (positioning == OverlayPositioning.BOTTOM_CENTER || positioning == OverlayPositioning.CENTER_CENTER || positioning == OverlayPositioning.TOP_CENTER) {\n        offsetX -= this.element.offsetWidth / 2;\n      }\n\n      var left = Math.round(pixel[0] + offsetX) + 'px';\n\n      if (this.rendered.left_ != left) {\n        this.rendered.left_ = style.left = left;\n      }\n    }\n\n    if (positioning == OverlayPositioning.BOTTOM_LEFT || positioning == OverlayPositioning.BOTTOM_CENTER || positioning == OverlayPositioning.BOTTOM_RIGHT) {\n      if (this.rendered.top_ !== '') {\n        this.rendered.top_ = style.top = '';\n      }\n\n      var bottom = Math.round(mapSize[1] - pixel[1] - offsetY) + 'px';\n\n      if (this.rendered.bottom_ != bottom) {\n        this.rendered.bottom_ = style.bottom = bottom;\n      }\n    } else {\n      if (this.rendered.bottom_ !== '') {\n        this.rendered.bottom_ = style.bottom = '';\n      }\n\n      if (positioning == OverlayPositioning.CENTER_LEFT || positioning == OverlayPositioning.CENTER_CENTER || positioning == OverlayPositioning.CENTER_RIGHT) {\n        offsetY -= this.element.offsetHeight / 2;\n      }\n\n      var top = Math.round(pixel[1] + offsetY) + 'px';\n\n      if (this.rendered.top_ != top) {\n        this.rendered.top_ = style.top = top;\n      }\n    }\n  };\n  /**\n   * returns the options this Overlay has been created with\n   * @return {Options} overlay options\n   */\n\n\n  Overlay.prototype.getOptions = function getOptions() {\n    return this.options;\n  };\n\n  return Overlay;\n}(BaseObject);\n\nexport default Overlay;","map":{"version":3,"sources":["../../src/ol/Overlay.js"],"names":["const","super","let"],"mappings":"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","sourcesContent":["/**\n * @module ol/Overlay\n */\nimport MapEventType from './MapEventType.js';\nimport BaseObject, {getChangeEventType} from './Object.js';\nimport OverlayPositioning from './OverlayPositioning.js';\nimport {CLASS_SELECTABLE} from './css.js';\nimport {removeNode, removeChildren, outerWidth, outerHeight} from './dom.js';\nimport {listen, unlistenByKey} from './events.js';\nimport {containsExtent} from './extent.js';\n\n\n/**\n * @typedef {Object} Options\n * @property {number|string} [id] Set the overlay id. The overlay id can be used\n * with the {@link module:ol/Map~Map#getOverlayById} method.\n * @property {HTMLElement} [element] The overlay element.\n * @property {Array<number>} [offset=[0, 0]] Offsets in pixels used when positioning\n * the overlay. The first element in the\n * array is the horizontal offset. A positive value shifts the overlay right.\n * The second element in the array is the vertical offset. A positive value\n * shifts the overlay down.\n * @property {import(\"./coordinate.js\").Coordinate} [position] The overlay position\n * in map projection.\n * @property {OverlayPositioning} [positioning='top-left'] Defines how\n * the overlay is actually positioned with respect to its `position` property.\n * Possible values are `'bottom-left'`, `'bottom-center'`, `'bottom-right'`,\n * `'center-left'`, `'center-center'`, `'center-right'`, `'top-left'`,\n * `'top-center'`, and `'top-right'`.\n * @property {boolean} [stopEvent=true] Whether event propagation to the map\n * viewport should be stopped. If `true` the overlay is placed in the same\n * container as that of the controls (CSS class name\n * `ol-overlaycontainer-stopevent`); if `false` it is placed in the container\n * with CSS class name specified by the `className` property.\n * @property {boolean} [insertFirst=true] Whether the overlay is inserted first\n * in the overlay container, or appended. If the overlay is placed in the same\n * container as that of the controls (see the `stopEvent` option) you will\n * probably set `insertFirst` to `true` so the overlay is displayed below the\n * controls.\n * @property {boolean} [autoPan=false] If set to `true` the map is panned when\n * calling `setPosition`, so that the overlay is entirely visible in the current\n * viewport.\n * @property {PanOptions} [autoPanAnimation] The\n * animation options used to pan the overlay into view. This animation is only\n * used when `autoPan` is enabled. A `duration` and `easing` may be provided to\n * customize the animation.\n * @property {number} [autoPanMargin=20] The margin (in pixels) between the\n * overlay and the borders of the map when autopanning.\n * @property {string} [className='ol-overlay-container ol-selectable'] CSS class\n * name.\n */\n\n\n/**\n * @typedef {Object} PanOptions\n * @property {number} [duration=1000] The duration of the animation in\n * milliseconds.\n * @property {function(number):number} [easing] The easing function to use. Can\n * be one from {@link module:ol/easing} or a custom function.\n * Default is {@link module:ol/easing~inAndOut}.\n */\n\n\n/**\n * @enum {string}\n * @protected\n */\nconst Property = {\n  ELEMENT: 'element',\n  MAP: 'map',\n  OFFSET: 'offset',\n  POSITION: 'position',\n  POSITIONING: 'positioning'\n};\n\n\n/**\n * @classdesc\n * An element to be displayed over the map and attached to a single map\n * location.  Like {@link module:ol/control/Control~Control}, Overlays are\n * visible widgets. Unlike Controls, they are not in a fixed position on the\n * screen, but are tied to a geographical coordinate, so panning the map will\n * move an Overlay but not a Control.\n *\n * Example:\n *\n *     import Overlay from 'ol/Overlay';\n *\n *     var popup = new Overlay({\n *       element: document.getElementById('popup')\n *     });\n *     popup.setPosition(coordinate);\n *     map.addOverlay(popup);\n *\n * @api\n */\nclass Overlay extends BaseObject {\n\n  /**\n   * @param {Options} options Overlay options.\n   */\n  constructor(options) {\n\n    super();\n\n    /**\n     * @protected\n     * @type {Options}\n     */\n    this.options = options;\n\n    /**\n     * @protected\n     * @type {number|string|undefined}\n     */\n    this.id = options.id;\n\n    /**\n     * @protected\n     * @type {boolean}\n     */\n    this.insertFirst = options.insertFirst !== undefined ?\n      options.insertFirst : true;\n\n    /**\n     * @protected\n     * @type {boolean}\n     */\n    this.stopEvent = options.stopEvent !== undefined ? options.stopEvent : true;\n\n    /**\n     * @protected\n     * @type {HTMLElement}\n     */\n    this.element = document.createElement('div');\n    this.element.className = options.className !== undefined ?\n      options.className : 'ol-overlay-container ' + CLASS_SELECTABLE;\n    this.element.style.position = 'absolute';\n\n    /**\n     * @protected\n     * @type {boolean}\n     */\n    this.autoPan = options.autoPan !== undefined ? options.autoPan : false;\n\n    /**\n     * @protected\n     * @type {PanOptions}\n     */\n    this.autoPanAnimation = options.autoPanAnimation || /** @type {PanOptions} */ ({});\n\n    /**\n     * @protected\n     * @type {number}\n     */\n    this.autoPanMargin = options.autoPanMargin !== undefined ?\n      options.autoPanMargin : 20;\n\n    /**\n     * @protected\n     * @type {{bottom_: string,\n     *         left_: string,\n     *         right_: string,\n     *         top_: string,\n     *         visible: boolean}}\n     */\n    this.rendered = {\n      bottom_: '',\n      left_: '',\n      right_: '',\n      top_: '',\n      visible: true\n    };\n\n    /**\n     * @protected\n     * @type {?import(\"./events.js\").EventsKey}\n     */\n    this.mapPostrenderListenerKey = null;\n\n    listen(\n      this, getChangeEventType(Property.ELEMENT),\n      this.handleElementChanged, this);\n\n    listen(\n      this, getChangeEventType(Property.MAP),\n      this.handleMapChanged, this);\n\n    listen(\n      this, getChangeEventType(Property.OFFSET),\n      this.handleOffsetChanged, this);\n\n    listen(\n      this, getChangeEventType(Property.POSITION),\n      this.handlePositionChanged, this);\n\n    listen(\n      this, getChangeEventType(Property.POSITIONING),\n      this.handlePositioningChanged, this);\n\n    if (options.element !== undefined) {\n      this.setElement(options.element);\n    }\n\n    this.setOffset(options.offset !== undefined ? options.offset : [0, 0]);\n\n    this.setPositioning(options.positioning !== undefined ?\n      /** @type {OverlayPositioning} */ (options.positioning) :\n      OverlayPositioning.TOP_LEFT);\n\n    if (options.position !== undefined) {\n      this.setPosition(options.position);\n    }\n\n  }\n\n  /**\n   * Get the DOM element of this overlay.\n   * @return {HTMLElement|undefined} The Element containing the overlay.\n   * @observable\n   * @api\n   */\n  getElement() {\n    return /** @type {HTMLElement|undefined} */ (this.get(Property.ELEMENT));\n  }\n\n  /**\n   * Get the overlay identifier which is set on constructor.\n   * @return {number|string|undefined} Id.\n   * @api\n   */\n  getId() {\n    return this.id;\n  }\n\n  /**\n   * Get the map associated with this overlay.\n   * @return {import(\"./PluggableMap.js\").default|undefined} The map that the\n   * overlay is part of.\n   * @observable\n   * @api\n   */\n  getMap() {\n    return (\n      /** @type {import(\"./PluggableMap.js\").default|undefined} */ (this.get(Property.MAP))\n    );\n  }\n\n  /**\n   * Get the offset of this overlay.\n   * @return {Array<number>} The offset.\n   * @observable\n   * @api\n   */\n  getOffset() {\n    return /** @type {Array<number>} */ (this.get(Property.OFFSET));\n  }\n\n  /**\n   * Get the current position of this overlay.\n   * @return {import(\"./coordinate.js\").Coordinate|undefined} The spatial point that the overlay is\n   *     anchored at.\n   * @observable\n   * @api\n   */\n  getPosition() {\n    return (\n      /** @type {import(\"./coordinate.js\").Coordinate|undefined} */ (this.get(Property.POSITION))\n    );\n  }\n\n  /**\n   * Get the current positioning of this overlay.\n   * @return {OverlayPositioning} How the overlay is positioned\n   *     relative to its point on the map.\n   * @observable\n   * @api\n   */\n  getPositioning() {\n    return (\n      /** @type {OverlayPositioning} */ (this.get(Property.POSITIONING))\n    );\n  }\n\n  /**\n   * @protected\n   */\n  handleElementChanged() {\n    removeChildren(this.element);\n    const element = this.getElement();\n    if (element) {\n      this.element.appendChild(element);\n    }\n  }\n\n  /**\n   * @protected\n   */\n  handleMapChanged() {\n    if (this.mapPostrenderListenerKey) {\n      removeNode(this.element);\n      unlistenByKey(this.mapPostrenderListenerKey);\n      this.mapPostrenderListenerKey = null;\n    }\n    const map = this.getMap();\n    if (map) {\n      this.mapPostrenderListenerKey = listen(map,\n        MapEventType.POSTRENDER, this.render, this);\n      this.updatePixelPosition();\n      const container = this.stopEvent ?\n        map.getOverlayContainerStopEvent() : map.getOverlayContainer();\n      if (this.insertFirst) {\n        container.insertBefore(this.element, container.childNodes[0] || null);\n      } else {\n        container.appendChild(this.element);\n      }\n    }\n  }\n\n  /**\n   * @protected\n   */\n  render() {\n    this.updatePixelPosition();\n  }\n\n  /**\n   * @protected\n   */\n  handleOffsetChanged() {\n    this.updatePixelPosition();\n  }\n\n  /**\n   * @protected\n   */\n  handlePositionChanged() {\n    this.updatePixelPosition();\n    if (this.get(Property.POSITION) && this.autoPan) {\n      this.panIntoView();\n    }\n  }\n\n  /**\n   * @protected\n   */\n  handlePositioningChanged() {\n    this.updatePixelPosition();\n  }\n\n  /**\n   * Set the DOM element to be associated with this overlay.\n   * @param {HTMLElement|undefined} element The Element containing the overlay.\n   * @observable\n   * @api\n   */\n  setElement(element) {\n    this.set(Property.ELEMENT, element);\n  }\n\n  /**\n   * Set the map to be associated with this overlay.\n   * @param {import(\"./PluggableMap.js\").default|undefined} map The map that the\n   * overlay is part of.\n   * @observable\n   * @api\n   */\n  setMap(map) {\n    this.set(Property.MAP, map);\n  }\n\n  /**\n   * Set the offset for this overlay.\n   * @param {Array<number>} offset Offset.\n   * @observable\n   * @api\n   */\n  setOffset(offset) {\n    this.set(Property.OFFSET, offset);\n  }\n\n  /**\n   * Set the position for this overlay. If the position is `undefined` the\n   * overlay is hidden.\n   * @param {import(\"./coordinate.js\").Coordinate|undefined} position The spatial point that the overlay\n   *     is anchored at.\n   * @observable\n   * @api\n   */\n  setPosition(position) {\n    this.set(Property.POSITION, position);\n  }\n\n  /**\n   * Pan the map so that the overlay is entirely visible in the current viewport\n   * (if necessary).\n   * @protected\n   */\n  panIntoView() {\n    const map = this.getMap();\n\n    if (!map || !map.getTargetElement()) {\n      return;\n    }\n\n    const mapRect = this.getRect(map.getTargetElement(), map.getSize());\n    const element = this.getElement();\n    const overlayRect = this.getRect(element, [outerWidth(element), outerHeight(element)]);\n\n    const margin = this.autoPanMargin;\n    if (!containsExtent(mapRect, overlayRect)) {\n      // the overlay is not completely inside the viewport, so pan the map\n      const offsetLeft = overlayRect[0] - mapRect[0];\n      const offsetRight = mapRect[2] - overlayRect[2];\n      const offsetTop = overlayRect[1] - mapRect[1];\n      const offsetBottom = mapRect[3] - overlayRect[3];\n\n      const delta = [0, 0];\n      if (offsetLeft < 0) {\n        // move map to the left\n        delta[0] = offsetLeft - margin;\n      } else if (offsetRight < 0) {\n        // move map to the right\n        delta[0] = Math.abs(offsetRight) + margin;\n      }\n      if (offsetTop < 0) {\n        // move map up\n        delta[1] = offsetTop - margin;\n      } else if (offsetBottom < 0) {\n        // move map down\n        delta[1] = Math.abs(offsetBottom) + margin;\n      }\n\n      if (delta[0] !== 0 || delta[1] !== 0) {\n        const center = /** @type {import(\"./coordinate.js\").Coordinate} */ (map.getView().getCenter());\n        const centerPx = map.getPixelFromCoordinate(center);\n        const newCenterPx = [\n          centerPx[0] + delta[0],\n          centerPx[1] + delta[1]\n        ];\n\n        map.getView().animate({\n          center: map.getCoordinateFromPixel(newCenterPx),\n          duration: this.autoPanAnimation.duration,\n          easing: this.autoPanAnimation.easing\n        });\n      }\n    }\n  }\n\n  /**\n   * Get the extent of an element relative to the document\n   * @param {HTMLElement|undefined} element The element.\n   * @param {import(\"./size.js\").Size|undefined} size The size of the element.\n   * @return {import(\"./extent.js\").Extent} The extent.\n   * @protected\n   */\n  getRect(element, size) {\n    const box = element.getBoundingClientRect();\n    const offsetX = box.left + window.pageXOffset;\n    const offsetY = box.top + window.pageYOffset;\n    return [\n      offsetX,\n      offsetY,\n      offsetX + size[0],\n      offsetY + size[1]\n    ];\n  }\n\n  /**\n   * Set the positioning for this overlay.\n   * @param {OverlayPositioning} positioning how the overlay is\n   *     positioned relative to its point on the map.\n   * @observable\n   * @api\n   */\n  setPositioning(positioning) {\n    this.set(Property.POSITIONING, positioning);\n  }\n\n  /**\n   * Modify the visibility of the element.\n   * @param {boolean} visible Element visibility.\n   * @protected\n   */\n  setVisible(visible) {\n    if (this.rendered.visible !== visible) {\n      this.element.style.display = visible ? '' : 'none';\n      this.rendered.visible = visible;\n    }\n  }\n\n  /**\n   * Update pixel position.\n   * @protected\n   */\n  updatePixelPosition() {\n    const map = this.getMap();\n    const position = this.getPosition();\n    if (!map || !map.isRendered() || !position) {\n      this.setVisible(false);\n      return;\n    }\n\n    const pixel = map.getPixelFromCoordinate(position);\n    const mapSize = map.getSize();\n    this.updateRenderedPosition(pixel, mapSize);\n  }\n\n  /**\n   * @param {import(\"./pixel.js\").Pixel} pixel The pixel location.\n   * @param {import(\"./size.js\").Size|undefined} mapSize The map size.\n   * @protected\n   */\n  updateRenderedPosition(pixel, mapSize) {\n    const style = this.element.style;\n    const offset = this.getOffset();\n\n    const positioning = this.getPositioning();\n\n    this.setVisible(true);\n\n    let offsetX = offset[0];\n    let offsetY = offset[1];\n    if (positioning == OverlayPositioning.BOTTOM_RIGHT ||\n        positioning == OverlayPositioning.CENTER_RIGHT ||\n        positioning == OverlayPositioning.TOP_RIGHT) {\n      if (this.rendered.left_ !== '') {\n        this.rendered.left_ = style.left = '';\n      }\n      const right = Math.round(mapSize[0] - pixel[0] - offsetX) + 'px';\n      if (this.rendered.right_ != right) {\n        this.rendered.right_ = style.right = right;\n      }\n    } else {\n      if (this.rendered.right_ !== '') {\n        this.rendered.right_ = style.right = '';\n      }\n      if (positioning == OverlayPositioning.BOTTOM_CENTER ||\n          positioning == OverlayPositioning.CENTER_CENTER ||\n          positioning == OverlayPositioning.TOP_CENTER) {\n        offsetX -= this.element.offsetWidth / 2;\n      }\n      const left = Math.round(pixel[0] + offsetX) + 'px';\n      if (this.rendered.left_ != left) {\n        this.rendered.left_ = style.left = left;\n      }\n    }\n    if (positioning == OverlayPositioning.BOTTOM_LEFT ||\n        positioning == OverlayPositioning.BOTTOM_CENTER ||\n        positioning == OverlayPositioning.BOTTOM_RIGHT) {\n      if (this.rendered.top_ !== '') {\n        this.rendered.top_ = style.top = '';\n      }\n      const bottom = Math.round(mapSize[1] - pixel[1] - offsetY) + 'px';\n      if (this.rendered.bottom_ != bottom) {\n        this.rendered.bottom_ = style.bottom = bottom;\n      }\n    } else {\n      if (this.rendered.bottom_ !== '') {\n        this.rendered.bottom_ = style.bottom = '';\n      }\n      if (positioning == OverlayPositioning.CENTER_LEFT ||\n          positioning == OverlayPositioning.CENTER_CENTER ||\n          positioning == OverlayPositioning.CENTER_RIGHT) {\n        offsetY -= this.element.offsetHeight / 2;\n      }\n      const top = Math.round(pixel[1] + offsetY) + 'px';\n      if (this.rendered.top_ != top) {\n        this.rendered.top_ = style.top = top;\n      }\n    }\n  }\n\n  /**\n   * returns the options this Overlay has been created with\n   * @return {Options} overlay options\n   */\n  getOptions() {\n    return this.options;\n  }\n}\n\n\nexport default Overlay;\n"]},"metadata":{},"sourceType":"module"}