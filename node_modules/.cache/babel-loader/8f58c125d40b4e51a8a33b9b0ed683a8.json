{"ast":null,"code":"/**\n * @module ol/events\n */\nimport { clear } from './obj.js';\n/**\n * Key to use with {@link module:ol/Observable~Observable#unByKey}.\n * @typedef {Object} EventsKey\n * @property {Object} [bindTo]\n * @property {ListenerFunction} [boundListener]\n * @property {boolean} callOnce\n * @property {number} [deleteIndex]\n * @property {ListenerFunction} listener\n * @property {import(\"./events/Target.js\").EventTargetLike} target\n * @property {string} type\n * @api\n */\n\n/**\n * Listener function. This function is called with an event object as argument.\n * When the function returns `false`, event propagation will stop.\n *\n * @typedef {function((Event|import(\"./events/Event.js\").default)): (void|boolean)} ListenerFunction\n * @api\n */\n\n/**\n * @param {EventsKey} listenerObj Listener object.\n * @return {ListenerFunction} Bound listener.\n */\n\nexport function bindListener(listenerObj) {\n  var boundListener = function (evt) {\n    var listener = listenerObj.listener;\n    var bindTo = listenerObj.bindTo || listenerObj.target;\n\n    if (listenerObj.callOnce) {\n      unlistenByKey(listenerObj);\n    }\n\n    return listener.call(bindTo, evt);\n  };\n\n  listenerObj.boundListener = boundListener;\n  return boundListener;\n}\n/**\n * Finds the matching {@link module:ol/events~EventsKey} in the given listener\n * array.\n *\n * @param {!Array<!EventsKey>} listeners Array of listeners.\n * @param {!Function} listener The listener function.\n * @param {Object=} opt_this The `this` value inside the listener.\n * @param {boolean=} opt_setDeleteIndex Set the deleteIndex on the matching\n *     listener, for {@link module:ol/events~unlistenByKey}.\n * @return {EventsKey|undefined} The matching listener object.\n */\n\nexport function findListener(listeners, listener, opt_this, opt_setDeleteIndex) {\n  var listenerObj;\n\n  for (var i = 0, ii = listeners.length; i < ii; ++i) {\n    listenerObj = listeners[i];\n\n    if (listenerObj.listener === listener && listenerObj.bindTo === opt_this) {\n      if (opt_setDeleteIndex) {\n        listenerObj.deleteIndex = i;\n      }\n\n      return listenerObj;\n    }\n  }\n\n  return undefined;\n}\n/**\n * @param {import(\"./events/Target.js\").EventTargetLike} target Target.\n * @param {string} type Type.\n * @return {Array<EventsKey>|undefined} Listeners.\n */\n\nexport function getListeners(target, type) {\n  var listenerMap = getListenerMap(target);\n  return listenerMap ? listenerMap[type] : undefined;\n}\n/**\n * Get the lookup of listeners.\n * @param {Object} target Target.\n * @param {boolean=} opt_create If a map should be created if it doesn't exist.\n * @return {!Object<string, Array<EventsKey>>} Map of\n *     listeners by event type.\n */\n\nfunction getListenerMap(target, opt_create) {\n  var listenerMap = target.ol_lm;\n\n  if (!listenerMap && opt_create) {\n    listenerMap = target.ol_lm = {};\n  }\n\n  return listenerMap;\n}\n/**\n * Remove the listener map from a target.\n * @param {Object} target Target.\n */\n\n\nfunction removeListenerMap(target) {\n  delete target.ol_lm;\n}\n/**\n * Clean up all listener objects of the given type.  All properties on the\n * listener objects will be removed, and if no listeners remain in the listener\n * map, it will be removed from the target.\n * @param {import(\"./events/Target.js\").EventTargetLike} target Target.\n * @param {string} type Type.\n */\n\n\nfunction removeListeners(target, type) {\n  var listeners = getListeners(target, type);\n\n  if (listeners) {\n    for (var i = 0, ii = listeners.length; i < ii; ++i) {\n      /** @type {import(\"./events/Target.js\").default} */\n      target.removeEventListener(type, listeners[i].boundListener);\n      clear(listeners[i]);\n    }\n\n    listeners.length = 0;\n    var listenerMap = getListenerMap(target);\n\n    if (listenerMap) {\n      delete listenerMap[type];\n\n      if (Object.keys(listenerMap).length === 0) {\n        removeListenerMap(target);\n      }\n    }\n  }\n}\n/**\n * Registers an event listener on an event target. Inspired by\n * https://google.github.io/closure-library/api/source/closure/goog/events/events.js.src.html\n *\n * This function efficiently binds a `listener` to a `this` object, and returns\n * a key for use with {@link module:ol/events~unlistenByKey}.\n *\n * @param {import(\"./events/Target.js\").EventTargetLike} target Event target.\n * @param {string} type Event type.\n * @param {ListenerFunction} listener Listener.\n * @param {Object=} opt_this Object referenced by the `this` keyword in the\n *     listener. Default is the `target`.\n * @param {boolean=} opt_once If true, add the listener as one-off listener.\n * @return {EventsKey} Unique key for the listener.\n */\n\n\nexport function listen(target, type, listener, opt_this, opt_once) {\n  var listenerMap = getListenerMap(target, true);\n  var listeners = listenerMap[type];\n\n  if (!listeners) {\n    listeners = listenerMap[type] = [];\n  }\n\n  var listenerObj = findListener(listeners, listener, opt_this, false);\n\n  if (listenerObj) {\n    if (!opt_once) {\n      // Turn one-off listener into a permanent one.\n      listenerObj.callOnce = false;\n    }\n  } else {\n    listenerObj =\n    /** @type {EventsKey} */\n    {\n      bindTo: opt_this,\n      callOnce: !!opt_once,\n      listener: listener,\n      target: target,\n      type: type\n    };\n    /** @type {import(\"./events/Target.js\").default} */\n\n    target.addEventListener(type, bindListener(listenerObj));\n    listeners.push(listenerObj);\n  }\n\n  return listenerObj;\n}\n/**\n * Registers a one-off event listener on an event target. Inspired by\n * https://google.github.io/closure-library/api/source/closure/goog/events/events.js.src.html\n *\n * This function efficiently binds a `listener` as self-unregistering listener\n * to a `this` object, and returns a key for use with\n * {@link module:ol/events~unlistenByKey} in case the listener needs to be\n * unregistered before it is called.\n *\n * When {@link module:ol/events~listen} is called with the same arguments after this\n * function, the self-unregistering listener will be turned into a permanent\n * listener.\n *\n * @param {import(\"./events/Target.js\").EventTargetLike} target Event target.\n * @param {string} type Event type.\n * @param {ListenerFunction} listener Listener.\n * @param {Object=} opt_this Object referenced by the `this` keyword in the\n *     listener. Default is the `target`.\n * @return {EventsKey} Key for unlistenByKey.\n */\n\nexport function listenOnce(target, type, listener, opt_this) {\n  return listen(target, type, listener, opt_this, true);\n}\n/**\n * Unregisters an event listener on an event target. Inspired by\n * https://google.github.io/closure-library/api/source/closure/goog/events/events.js.src.html\n *\n * To return a listener, this function needs to be called with the exact same\n * arguments that were used for a previous {@link module:ol/events~listen} call.\n *\n * @param {import(\"./events/Target.js\").EventTargetLike} target Event target.\n * @param {string} type Event type.\n * @param {ListenerFunction} listener Listener.\n * @param {Object=} opt_this Object referenced by the `this` keyword in the\n *     listener. Default is the `target`.\n */\n\nexport function unlisten(target, type, listener, opt_this) {\n  var listeners = getListeners(target, type);\n\n  if (listeners) {\n    var listenerObj = findListener(listeners, listener, opt_this, true);\n\n    if (listenerObj) {\n      unlistenByKey(listenerObj);\n    }\n  }\n}\n/**\n * Unregisters event listeners on an event target. Inspired by\n * https://google.github.io/closure-library/api/source/closure/goog/events/events.js.src.html\n *\n * The argument passed to this function is the key returned from\n * {@link module:ol/events~listen} or {@link module:ol/events~listenOnce}.\n *\n * @param {EventsKey} key The key.\n */\n\nexport function unlistenByKey(key) {\n  if (key && key.target) {\n    /** @type {import(\"./events/Target.js\").default} */\n    key.target.removeEventListener(key.type, key.boundListener);\n    var listeners = getListeners(key.target, key.type);\n\n    if (listeners) {\n      var i = 'deleteIndex' in key ? key.deleteIndex : listeners.indexOf(key);\n\n      if (i !== -1) {\n        listeners.splice(i, 1);\n      }\n\n      if (listeners.length === 0) {\n        removeListeners(key.target, key.type);\n      }\n    }\n\n    clear(key);\n  }\n}\n/**\n * Unregisters all event listeners on an event target. Inspired by\n * https://google.github.io/closure-library/api/source/closure/goog/events/events.js.src.html\n *\n * @param {import(\"./events/Target.js\").EventTargetLike} target Target.\n */\n\nexport function unlistenAll(target) {\n  var listenerMap = getListenerMap(target);\n\n  if (listenerMap) {\n    for (var type in listenerMap) {\n      removeListeners(target, type);\n    }\n  }\n}","map":{"version":3,"sources":["../../src/ol/events.js"],"names":["const","let"],"mappings":"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","sourcesContent":["/**\n * @module ol/events\n */\nimport {clear} from './obj.js';\n\n\n/**\n * Key to use with {@link module:ol/Observable~Observable#unByKey}.\n * @typedef {Object} EventsKey\n * @property {Object} [bindTo]\n * @property {ListenerFunction} [boundListener]\n * @property {boolean} callOnce\n * @property {number} [deleteIndex]\n * @property {ListenerFunction} listener\n * @property {import(\"./events/Target.js\").EventTargetLike} target\n * @property {string} type\n * @api\n */\n\n\n/**\n * Listener function. This function is called with an event object as argument.\n * When the function returns `false`, event propagation will stop.\n *\n * @typedef {function((Event|import(\"./events/Event.js\").default)): (void|boolean)} ListenerFunction\n * @api\n */\n\n\n/**\n * @param {EventsKey} listenerObj Listener object.\n * @return {ListenerFunction} Bound listener.\n */\nexport function bindListener(listenerObj) {\n  const boundListener = function(evt) {\n    const listener = listenerObj.listener;\n    const bindTo = listenerObj.bindTo || listenerObj.target;\n    if (listenerObj.callOnce) {\n      unlistenByKey(listenerObj);\n    }\n    return listener.call(bindTo, evt);\n  };\n  listenerObj.boundListener = boundListener;\n  return boundListener;\n}\n\n\n/**\n * Finds the matching {@link module:ol/events~EventsKey} in the given listener\n * array.\n *\n * @param {!Array<!EventsKey>} listeners Array of listeners.\n * @param {!Function} listener The listener function.\n * @param {Object=} opt_this The `this` value inside the listener.\n * @param {boolean=} opt_setDeleteIndex Set the deleteIndex on the matching\n *     listener, for {@link module:ol/events~unlistenByKey}.\n * @return {EventsKey|undefined} The matching listener object.\n */\nexport function findListener(listeners, listener, opt_this, opt_setDeleteIndex) {\n  let listenerObj;\n  for (let i = 0, ii = listeners.length; i < ii; ++i) {\n    listenerObj = listeners[i];\n    if (listenerObj.listener === listener &&\n        listenerObj.bindTo === opt_this) {\n      if (opt_setDeleteIndex) {\n        listenerObj.deleteIndex = i;\n      }\n      return listenerObj;\n    }\n  }\n  return undefined;\n}\n\n\n/**\n * @param {import(\"./events/Target.js\").EventTargetLike} target Target.\n * @param {string} type Type.\n * @return {Array<EventsKey>|undefined} Listeners.\n */\nexport function getListeners(target, type) {\n  const listenerMap = getListenerMap(target);\n  return listenerMap ? listenerMap[type] : undefined;\n}\n\n\n/**\n * Get the lookup of listeners.\n * @param {Object} target Target.\n * @param {boolean=} opt_create If a map should be created if it doesn't exist.\n * @return {!Object<string, Array<EventsKey>>} Map of\n *     listeners by event type.\n */\nfunction getListenerMap(target, opt_create) {\n  let listenerMap = target.ol_lm;\n  if (!listenerMap && opt_create) {\n    listenerMap = target.ol_lm = {};\n  }\n  return listenerMap;\n}\n\n\n/**\n * Remove the listener map from a target.\n * @param {Object} target Target.\n */\nfunction removeListenerMap(target) {\n  delete target.ol_lm;\n}\n\n\n/**\n * Clean up all listener objects of the given type.  All properties on the\n * listener objects will be removed, and if no listeners remain in the listener\n * map, it will be removed from the target.\n * @param {import(\"./events/Target.js\").EventTargetLike} target Target.\n * @param {string} type Type.\n */\nfunction removeListeners(target, type) {\n  const listeners = getListeners(target, type);\n  if (listeners) {\n    for (let i = 0, ii = listeners.length; i < ii; ++i) {\n      /** @type {import(\"./events/Target.js\").default} */ (target).\n        removeEventListener(type, listeners[i].boundListener);\n      clear(listeners[i]);\n    }\n    listeners.length = 0;\n    const listenerMap = getListenerMap(target);\n    if (listenerMap) {\n      delete listenerMap[type];\n      if (Object.keys(listenerMap).length === 0) {\n        removeListenerMap(target);\n      }\n    }\n  }\n}\n\n\n/**\n * Registers an event listener on an event target. Inspired by\n * https://google.github.io/closure-library/api/source/closure/goog/events/events.js.src.html\n *\n * This function efficiently binds a `listener` to a `this` object, and returns\n * a key for use with {@link module:ol/events~unlistenByKey}.\n *\n * @param {import(\"./events/Target.js\").EventTargetLike} target Event target.\n * @param {string} type Event type.\n * @param {ListenerFunction} listener Listener.\n * @param {Object=} opt_this Object referenced by the `this` keyword in the\n *     listener. Default is the `target`.\n * @param {boolean=} opt_once If true, add the listener as one-off listener.\n * @return {EventsKey} Unique key for the listener.\n */\nexport function listen(target, type, listener, opt_this, opt_once) {\n  const listenerMap = getListenerMap(target, true);\n  let listeners = listenerMap[type];\n  if (!listeners) {\n    listeners = listenerMap[type] = [];\n  }\n  let listenerObj = findListener(listeners, listener, opt_this, false);\n  if (listenerObj) {\n    if (!opt_once) {\n      // Turn one-off listener into a permanent one.\n      listenerObj.callOnce = false;\n    }\n  } else {\n    listenerObj = /** @type {EventsKey} */ ({\n      bindTo: opt_this,\n      callOnce: !!opt_once,\n      listener: listener,\n      target: target,\n      type: type\n    });\n    /** @type {import(\"./events/Target.js\").default} */ (target).\n      addEventListener(type, bindListener(listenerObj));\n    listeners.push(listenerObj);\n  }\n\n  return listenerObj;\n}\n\n\n/**\n * Registers a one-off event listener on an event target. Inspired by\n * https://google.github.io/closure-library/api/source/closure/goog/events/events.js.src.html\n *\n * This function efficiently binds a `listener` as self-unregistering listener\n * to a `this` object, and returns a key for use with\n * {@link module:ol/events~unlistenByKey} in case the listener needs to be\n * unregistered before it is called.\n *\n * When {@link module:ol/events~listen} is called with the same arguments after this\n * function, the self-unregistering listener will be turned into a permanent\n * listener.\n *\n * @param {import(\"./events/Target.js\").EventTargetLike} target Event target.\n * @param {string} type Event type.\n * @param {ListenerFunction} listener Listener.\n * @param {Object=} opt_this Object referenced by the `this` keyword in the\n *     listener. Default is the `target`.\n * @return {EventsKey} Key for unlistenByKey.\n */\nexport function listenOnce(target, type, listener, opt_this) {\n  return listen(target, type, listener, opt_this, true);\n}\n\n\n/**\n * Unregisters an event listener on an event target. Inspired by\n * https://google.github.io/closure-library/api/source/closure/goog/events/events.js.src.html\n *\n * To return a listener, this function needs to be called with the exact same\n * arguments that were used for a previous {@link module:ol/events~listen} call.\n *\n * @param {import(\"./events/Target.js\").EventTargetLike} target Event target.\n * @param {string} type Event type.\n * @param {ListenerFunction} listener Listener.\n * @param {Object=} opt_this Object referenced by the `this` keyword in the\n *     listener. Default is the `target`.\n */\nexport function unlisten(target, type, listener, opt_this) {\n  const listeners = getListeners(target, type);\n  if (listeners) {\n    const listenerObj = findListener(listeners, listener, opt_this, true);\n    if (listenerObj) {\n      unlistenByKey(listenerObj);\n    }\n  }\n}\n\n\n/**\n * Unregisters event listeners on an event target. Inspired by\n * https://google.github.io/closure-library/api/source/closure/goog/events/events.js.src.html\n *\n * The argument passed to this function is the key returned from\n * {@link module:ol/events~listen} or {@link module:ol/events~listenOnce}.\n *\n * @param {EventsKey} key The key.\n */\nexport function unlistenByKey(key) {\n  if (key && key.target) {\n    /** @type {import(\"./events/Target.js\").default} */ (key.target).\n      removeEventListener(key.type, key.boundListener);\n    const listeners = getListeners(key.target, key.type);\n    if (listeners) {\n      const i = 'deleteIndex' in key ? key.deleteIndex : listeners.indexOf(key);\n      if (i !== -1) {\n        listeners.splice(i, 1);\n      }\n      if (listeners.length === 0) {\n        removeListeners(key.target, key.type);\n      }\n    }\n    clear(key);\n  }\n}\n\n\n/**\n * Unregisters all event listeners on an event target. Inspired by\n * https://google.github.io/closure-library/api/source/closure/goog/events/events.js.src.html\n *\n * @param {import(\"./events/Target.js\").EventTargetLike} target Target.\n */\nexport function unlistenAll(target) {\n  const listenerMap = getListenerMap(target);\n  if (listenerMap) {\n    for (const type in listenerMap) {\n      removeListeners(target, type);\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}