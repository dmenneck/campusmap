{"ast":null,"code":"/**\n * ag-grid-community - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components\n * @version v21.2.2\n * @link http://www.ag-grid.com/\n * @license MIT\n */\n\"use strict\";\n\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nvar __metadata = this && this.__metadata || function (k, v) {\n  if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar gridOptionsWrapper_1 = require(\"../gridOptionsWrapper\");\n\nvar columnGroup_1 = require(\"../entities/columnGroup\");\n\nvar originalColumnGroup_1 = require(\"../entities/originalColumnGroup\");\n\nvar context_1 = require(\"../context/context\");\n\nvar context_2 = require(\"../context/context\"); // takes in a list of columns, as specified by the column definitions, and returns column groups\n\n\nvar ColumnUtils =\n/** @class */\nfunction () {\n  function ColumnUtils() {}\n\n  ColumnUtils.prototype.calculateColInitialWidth = function (colDef) {\n    if (!colDef.width) {\n      // if no width defined in colDef, use default\n      return this.gridOptionsWrapper.getColWidth();\n    } else if (colDef.width < this.gridOptionsWrapper.getMinColWidth()) {\n      // if width in col def to small, set to min width\n      return this.gridOptionsWrapper.getMinColWidth();\n    } else {\n      // otherwise use the provided width\n      return colDef.width;\n    }\n  };\n\n  ColumnUtils.prototype.getOriginalPathForColumn = function (column, originalBalancedTree) {\n    var result = [];\n    var found = false;\n    recursePath(originalBalancedTree, 0); // we should always find the path, but in case there is a bug somewhere, returning null\n    // will make it fail rather than provide a 'hard to track down' bug\n\n    if (found) {\n      return result;\n    } else {\n      return null;\n    }\n\n    function recursePath(balancedColumnTree, dept) {\n      for (var i = 0; i < balancedColumnTree.length; i++) {\n        if (found) {\n          // quit the search, so 'result' is kept with the found result\n          return;\n        }\n\n        var node = balancedColumnTree[i];\n\n        if (node instanceof originalColumnGroup_1.OriginalColumnGroup) {\n          var nextNode = node;\n          recursePath(nextNode.getChildren(), dept + 1);\n          result[dept] = node;\n        } else {\n          if (node === column) {\n            found = true;\n          }\n        }\n      }\n    }\n  };\n  /*    public getPathForColumn(column: Column, allDisplayedColumnGroups: ColumnGroupChild[]): ColumnGroup[] {\n          let result: ColumnGroup[] = [];\n          let found = false;\n  \n          recursePath(allDisplayedColumnGroups, 0);\n  \n          // we should always find the path, but in case there is a bug somewhere, returning null\n          // will make it fail rather than provide a 'hard to track down' bug\n          if (found) {\n              return result;\n          } else {\n              return null;\n          }\n  \n          function recursePath(balancedColumnTree: ColumnGroupChild[], dept: number): void {\n  \n              for (let i = 0; i<balancedColumnTree.length; i++) {\n                  if (found) {\n                      // quit the search, so 'result' is kept with the found result\n                      return;\n                  }\n                  let node = balancedColumnTree[i];\n                  if (node instanceof ColumnGroup) {\n                      let nextNode = <ColumnGroup> node;\n                      recursePath(nextNode.getChildren(), dept+1);\n                      result[dept] = node;\n                  } else {\n                      if (node === column) {\n                          found = true;\n                      }\n                  }\n              }\n          }\n      }*/\n\n\n  ColumnUtils.prototype.depthFirstOriginalTreeSearch = function (parent, tree, callback) {\n    var _this = this;\n\n    if (!tree) {\n      return;\n    }\n\n    tree.forEach(function (child) {\n      if (child instanceof originalColumnGroup_1.OriginalColumnGroup) {\n        _this.depthFirstOriginalTreeSearch(child, child.getChildren(), callback);\n      }\n\n      callback(child, parent);\n    });\n  };\n\n  ColumnUtils.prototype.depthFirstAllColumnTreeSearch = function (tree, callback) {\n    var _this = this;\n\n    if (!tree) {\n      return;\n    }\n\n    tree.forEach(function (child) {\n      if (child instanceof columnGroup_1.ColumnGroup) {\n        _this.depthFirstAllColumnTreeSearch(child.getChildren(), callback);\n      }\n\n      callback(child);\n    });\n  };\n\n  ColumnUtils.prototype.depthFirstDisplayedColumnTreeSearch = function (tree, callback) {\n    var _this = this;\n\n    if (!tree) {\n      return;\n    }\n\n    tree.forEach(function (child) {\n      if (child instanceof columnGroup_1.ColumnGroup) {\n        _this.depthFirstDisplayedColumnTreeSearch(child.getDisplayedChildren(), callback);\n      }\n\n      callback(child);\n    });\n  };\n\n  __decorate([context_2.Autowired('gridOptionsWrapper'), __metadata(\"design:type\", gridOptionsWrapper_1.GridOptionsWrapper)], ColumnUtils.prototype, \"gridOptionsWrapper\", void 0);\n\n  ColumnUtils = __decorate([context_1.Bean('columnUtils')], ColumnUtils);\n  return ColumnUtils;\n}();\n\nexports.ColumnUtils = ColumnUtils;","map":{"version":3,"sources":["/Users/dirkmennecke77/Desktop/Lageplan/node_modules/ag-grid-community/dist/lib/columnController/columnUtils.js"],"names":["__decorate","decorators","target","key","desc","c","arguments","length","r","Object","getOwnPropertyDescriptor","d","Reflect","decorate","i","defineProperty","__metadata","k","v","metadata","exports","value","gridOptionsWrapper_1","require","columnGroup_1","originalColumnGroup_1","context_1","context_2","ColumnUtils","prototype","calculateColInitialWidth","colDef","width","gridOptionsWrapper","getColWidth","getMinColWidth","getOriginalPathForColumn","column","originalBalancedTree","result","found","recursePath","balancedColumnTree","dept","node","OriginalColumnGroup","nextNode","getChildren","depthFirstOriginalTreeSearch","parent","tree","callback","_this","forEach","child","depthFirstAllColumnTreeSearch","ColumnGroup","depthFirstDisplayedColumnTreeSearch","getDisplayedChildren","Autowired","GridOptionsWrapper","Bean"],"mappings":"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","sourcesContent":["/**\n * ag-grid-community - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components\n * @version v21.2.2\n * @link http://www.ag-grid.com/\n * @license MIT\n */\n\"use strict\";\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __metadata = (this && this.__metadata) || function (k, v) {\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar gridOptionsWrapper_1 = require(\"../gridOptionsWrapper\");\nvar columnGroup_1 = require(\"../entities/columnGroup\");\nvar originalColumnGroup_1 = require(\"../entities/originalColumnGroup\");\nvar context_1 = require(\"../context/context\");\nvar context_2 = require(\"../context/context\");\n// takes in a list of columns, as specified by the column definitions, and returns column groups\nvar ColumnUtils = /** @class */ (function () {\n    function ColumnUtils() {\n    }\n    ColumnUtils.prototype.calculateColInitialWidth = function (colDef) {\n        if (!colDef.width) {\n            // if no width defined in colDef, use default\n            return this.gridOptionsWrapper.getColWidth();\n        }\n        else if (colDef.width < this.gridOptionsWrapper.getMinColWidth()) {\n            // if width in col def to small, set to min width\n            return this.gridOptionsWrapper.getMinColWidth();\n        }\n        else {\n            // otherwise use the provided width\n            return colDef.width;\n        }\n    };\n    ColumnUtils.prototype.getOriginalPathForColumn = function (column, originalBalancedTree) {\n        var result = [];\n        var found = false;\n        recursePath(originalBalancedTree, 0);\n        // we should always find the path, but in case there is a bug somewhere, returning null\n        // will make it fail rather than provide a 'hard to track down' bug\n        if (found) {\n            return result;\n        }\n        else {\n            return null;\n        }\n        function recursePath(balancedColumnTree, dept) {\n            for (var i = 0; i < balancedColumnTree.length; i++) {\n                if (found) {\n                    // quit the search, so 'result' is kept with the found result\n                    return;\n                }\n                var node = balancedColumnTree[i];\n                if (node instanceof originalColumnGroup_1.OriginalColumnGroup) {\n                    var nextNode = node;\n                    recursePath(nextNode.getChildren(), dept + 1);\n                    result[dept] = node;\n                }\n                else {\n                    if (node === column) {\n                        found = true;\n                    }\n                }\n            }\n        }\n    };\n    /*    public getPathForColumn(column: Column, allDisplayedColumnGroups: ColumnGroupChild[]): ColumnGroup[] {\n            let result: ColumnGroup[] = [];\n            let found = false;\n    \n            recursePath(allDisplayedColumnGroups, 0);\n    \n            // we should always find the path, but in case there is a bug somewhere, returning null\n            // will make it fail rather than provide a 'hard to track down' bug\n            if (found) {\n                return result;\n            } else {\n                return null;\n            }\n    \n            function recursePath(balancedColumnTree: ColumnGroupChild[], dept: number): void {\n    \n                for (let i = 0; i<balancedColumnTree.length; i++) {\n                    if (found) {\n                        // quit the search, so 'result' is kept with the found result\n                        return;\n                    }\n                    let node = balancedColumnTree[i];\n                    if (node instanceof ColumnGroup) {\n                        let nextNode = <ColumnGroup> node;\n                        recursePath(nextNode.getChildren(), dept+1);\n                        result[dept] = node;\n                    } else {\n                        if (node === column) {\n                            found = true;\n                        }\n                    }\n                }\n            }\n        }*/\n    ColumnUtils.prototype.depthFirstOriginalTreeSearch = function (parent, tree, callback) {\n        var _this = this;\n        if (!tree) {\n            return;\n        }\n        tree.forEach(function (child) {\n            if (child instanceof originalColumnGroup_1.OriginalColumnGroup) {\n                _this.depthFirstOriginalTreeSearch(child, child.getChildren(), callback);\n            }\n            callback(child, parent);\n        });\n    };\n    ColumnUtils.prototype.depthFirstAllColumnTreeSearch = function (tree, callback) {\n        var _this = this;\n        if (!tree) {\n            return;\n        }\n        tree.forEach(function (child) {\n            if (child instanceof columnGroup_1.ColumnGroup) {\n                _this.depthFirstAllColumnTreeSearch(child.getChildren(), callback);\n            }\n            callback(child);\n        });\n    };\n    ColumnUtils.prototype.depthFirstDisplayedColumnTreeSearch = function (tree, callback) {\n        var _this = this;\n        if (!tree) {\n            return;\n        }\n        tree.forEach(function (child) {\n            if (child instanceof columnGroup_1.ColumnGroup) {\n                _this.depthFirstDisplayedColumnTreeSearch(child.getDisplayedChildren(), callback);\n            }\n            callback(child);\n        });\n    };\n    __decorate([\n        context_2.Autowired('gridOptionsWrapper'),\n        __metadata(\"design:type\", gridOptionsWrapper_1.GridOptionsWrapper)\n    ], ColumnUtils.prototype, \"gridOptionsWrapper\", void 0);\n    ColumnUtils = __decorate([\n        context_1.Bean('columnUtils')\n    ], ColumnUtils);\n    return ColumnUtils;\n}());\nexports.ColumnUtils = ColumnUtils;\n"]},"metadata":{},"sourceType":"script"}