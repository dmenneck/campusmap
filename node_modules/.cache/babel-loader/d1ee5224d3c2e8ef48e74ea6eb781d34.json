{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _propTypes = _interopRequireDefault(require(\"prop-types\"));\n\nvar _Map = _interopRequireDefault(require(\"ol/Map\"));\n\nvar _Vector = _interopRequireDefault(require(\"ol/layer/Vector\"));\n\nvar _Vector2 = _interopRequireDefault(require(\"ol/source/Vector\"));\n\nvar _Collection = _interopRequireDefault(require(\"ol/Collection\"));\n\nvar _MultiPolygon = _interopRequireDefault(require(\"ol/geom/MultiPolygon\"));\n\nvar _MultiLineString = _interopRequireDefault(require(\"ol/geom/MultiLineString\"));\n\nvar _Style = _interopRequireDefault(require(\"ol/style/Style\"));\n\nvar _Stroke = _interopRequireDefault(require(\"ol/style/Stroke\"));\n\nvar _Fill = _interopRequireDefault(require(\"ol/style/Fill\"));\n\nvar _Circle = _interopRequireDefault(require(\"ol/style/Circle\"));\n\nvar _Draw = _interopRequireDefault(require(\"ol/interaction/Draw\"));\n\nvar _Observable = require(\"ol/Observable\");\n\nvar _Overlay = _interopRequireDefault(require(\"ol/Overlay\"));\n\nvar _isEmpty = _interopRequireDefault(require(\"lodash/isEmpty\"));\n\nvar _ToggleButton = _interopRequireDefault(require(\"../ToggleButton/ToggleButton.js\"));\n\nvar _MeasureUtil = _interopRequireDefault(require(\"@terrestris/ol-util/dist/MeasureUtil/MeasureUtil\"));\n\nvar _MapUtil = _interopRequireDefault(require(\"@terrestris/ol-util/dist/MapUtil/MapUtil\"));\n\nvar _constants = require(\"../../constants\");\n\nrequire(\"./MeasureButton.less\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\n\nfunction _typeof(obj) {\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n\n  return _assertThisInitialized(self);\n}\n\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n/**\n * The MeasureButton.\n *\n * @class The MeasureButton\n * @extends React.Component\n */\n\n\nvar MeasureButton =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(MeasureButton, _React$Component);\n  /**\n   * The className added to this component.\n   *\n   * @type {String}\n   * @private\n   */\n\n  /**\n   * Currently drawn feature.\n   *\n   * @type {OlFeature}\n   * @private\n   */\n\n  /**\n   * Overlay to show the measurement.\n   *\n   * @type {olOverlay}\n   * @private\n   */\n\n  /**\n  * Overlay to show the help messages.\n  *\n  * @type {olOverlay}\n  * @private\n  */\n\n  /**\n  * The help tooltip element.\n  *\n  * @type {Element}\n  * @private\n  */\n\n  /**\n   * The measure tooltip element.\n   *\n   * @type {Element}\n   * @private\n   */\n\n  /**\n   * An array of created overlays we use for the tooltips. Used to eventually\n   * clean up everything we added.\n   *\n   * @type{Array<OlOverlay>}\n   * @private\n   */\n\n  /**\n   * An array of created divs we use for the tooltips. Used to eventually\n   * clean up everything we added.\n   *\n   * @type{Array<HTMLDivElement>}\n   * @private\n   */\n\n  /**\n   * An object holding keyed `OlEventsKey` instances returned by the `on`\n   * method of `OlObservable`. These keys are used to unbind temporary\n   * listeners on events of the `OlInteractionDraw` or `OlMap`. The keys\n   * are the names of the events on the various objects. The `click` key is\n   * not always bound, but only for certain #measureType values.\n   *\n   * In #cleanup, we unbind all events we have bound so as to not leak\n   * memory, and to ensure we have no concurring listeners being active at a\n   * time (E.g. when multiple measure buttons are in an application).\n   *\n   * @type {Object}\n   * @private\n   */\n\n  /**\n   * The vector layer showing the geometries added by the draw interaction.\n   *\n   * @type {ol.layer.Vector}\n   * @private\n   */\n\n  /**\n   * The draw interaction used to draw the geometries to measure.\n   *\n   * @type {ol.interaction.Draw}\n   * @private\n   */\n\n  /**\n   * The properties.\n   * @type {Object}\n   */\n\n  /**\n   * The default properties.\n   * @type {Object}\n   */\n\n\n  function MeasureButton(props) {\n    var _this;\n\n    _classCallCheck(this, MeasureButton);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(MeasureButton).call(this, props));\n\n    _defineProperty(_assertThisInitialized(_this), \"className\", \"\".concat(_constants.CSS_PREFIX, \"measurebutton\"));\n\n    _defineProperty(_assertThisInitialized(_this), \"_feature\", null);\n\n    _defineProperty(_assertThisInitialized(_this), \"_measureTooltip\", null);\n\n    _defineProperty(_assertThisInitialized(_this), \"_helpTooltip\", null);\n\n    _defineProperty(_assertThisInitialized(_this), \"_helpTooltipElement\", null);\n\n    _defineProperty(_assertThisInitialized(_this), \"_measureTooltipElement\", null);\n\n    _defineProperty(_assertThisInitialized(_this), \"_createdTooltipOverlays\", []);\n\n    _defineProperty(_assertThisInitialized(_this), \"_createdTooltipDivs\", []);\n\n    _defineProperty(_assertThisInitialized(_this), \"_eventKeys\", {\n      drawstart: null,\n      drawend: null,\n      pointermove: null,\n      click: null,\n      change: null\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"_measureLayer\", null);\n\n    _defineProperty(_assertThisInitialized(_this), \"_drawInteraction\", null);\n\n    _this.onDrawInteractionActiveChange = _this.onDrawInteractionActiveChange.bind(_assertThisInitialized(_this));\n    _this.onToggle = _this.onToggle.bind(_assertThisInitialized(_this));\n    _this.onDrawStart = _this.onDrawStart.bind(_assertThisInitialized(_this));\n    _this.onDrawEnd = _this.onDrawEnd.bind(_assertThisInitialized(_this));\n    _this.onDrawInteractionGeometryChange = _this.onDrawInteractionGeometryChange.bind(_assertThisInitialized(_this));\n    _this.onMapPointerMove = _this.onMapPointerMove.bind(_assertThisInitialized(_this));\n    _this.onMapClick = _this.onMapClick.bind(_assertThisInitialized(_this));\n    return _this;\n  }\n  /**\n   * `componentDidMount` method of the MeasureButton.\n   *\n   * @method\n   */\n\n\n  _createClass(MeasureButton, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.createMeasureLayer();\n      this.createDrawInteraction();\n    }\n    /**\n     * Called when the button is toggled, this method ensures that everything\n     * is cleaned up when unpressed, and that measuring can start when pressed.\n     *\n     * @method\n     */\n\n  }, {\n    key: \"onToggle\",\n    value: function onToggle(pressed) {\n      var _this$props = this.props,\n          map = _this$props.map,\n          onToggle = _this$props.onToggle;\n      this.cleanup();\n      onToggle(pressed);\n\n      if (pressed && this._drawInteraction) {\n        this._drawInteraction.setActive(pressed);\n\n        this._eventKeys.drawstart = this._drawInteraction.on('drawstart', this.onDrawStart, this);\n        this._eventKeys.drawend = this._drawInteraction.on('drawend', this.onDrawEnd, this);\n        this._eventKeys.pointermove = map.on('pointermove', this.onMapPointerMove, this);\n      }\n    }\n    /**\n     * Creates measure vector layer and add this to the map.\n     *\n     * @method\n     */\n\n  }, {\n    key: \"createMeasureLayer\",\n    value: function createMeasureLayer() {\n      var _this$props2 = this.props,\n          measureLayerName = _this$props2.measureLayerName,\n          fillColor = _this$props2.fillColor,\n          strokeColor = _this$props2.strokeColor,\n          map = _this$props2.map;\n\n      var measureLayer = _MapUtil[\"default\"].getLayerByName(map, measureLayerName);\n\n      if (!measureLayer) {\n        measureLayer = new _Vector[\"default\"]({\n          name: measureLayerName,\n          source: new _Vector2[\"default\"]({\n            features: new _Collection[\"default\"]()\n          }),\n          style: new _Style[\"default\"]({\n            fill: new _Fill[\"default\"]({\n              color: fillColor\n            }),\n            stroke: new _Stroke[\"default\"]({\n              color: strokeColor,\n              width: 2\n            }),\n            image: new _Circle[\"default\"]({\n              radius: 7,\n              fill: new _Fill[\"default\"]({\n                color: fillColor\n              })\n            })\n          })\n        });\n        map.addLayer(measureLayer);\n      }\n\n      this._measureLayer = measureLayer;\n    }\n    /**\n     * Creates a correctly configured OL draw interaction depending on\n     * the configured measureType.\n     *\n     * @return {OlInteractionDraw} The created interaction, which is not yet\n     *   added to the map.\n     *\n     * @method\n     */\n\n  }, {\n    key: \"createDrawInteraction\",\n    value: function createDrawInteraction() {\n      var _this$props3 = this.props,\n          fillColor = _this$props3.fillColor,\n          strokeColor = _this$props3.strokeColor,\n          measureType = _this$props3.measureType,\n          pressed = _this$props3.pressed,\n          map = _this$props3.map;\n      var maxPoints = measureType === 'angle' ? 2 : undefined;\n      var drawType = measureType === 'polygon' ? 'MultiPolygon' : 'MultiLineString';\n      var drawInteraction = new _Draw[\"default\"]({\n        name: 'react-geo_drawaction',\n        source: this._measureLayer.getSource(),\n        type: drawType,\n        maxPoints: maxPoints,\n        style: new _Style[\"default\"]({\n          fill: new _Fill[\"default\"]({\n            color: fillColor\n          }),\n          stroke: new _Stroke[\"default\"]({\n            color: strokeColor,\n            lineDash: [10, 10],\n            width: 2\n          }),\n          image: new _Circle[\"default\"]({\n            radius: 5,\n            stroke: new _Stroke[\"default\"]({\n              color: strokeColor\n            }),\n            fill: new _Fill[\"default\"]({\n              color: fillColor\n            })\n          })\n        }),\n        freehandCondition: function freehandCondition() {\n          return false;\n        }\n      });\n      map.addInteraction(drawInteraction);\n      drawInteraction.on('change:active', this.onDrawInteractionActiveChange, this);\n      this._drawInteraction = drawInteraction;\n\n      if (pressed) {\n        this.onDrawInteractionActiveChange();\n      }\n\n      drawInteraction.setActive(pressed);\n    }\n    /**\n     * Adjusts visibility of measurement related tooltips depending on active\n     * status of draw interaction.\n     */\n\n  }, {\n    key: \"onDrawInteractionActiveChange\",\n    value: function onDrawInteractionActiveChange() {\n      var showHelpTooltip = this.props.showHelpTooltip;\n\n      if (this._drawInteraction.getActive()) {\n        if (showHelpTooltip) {\n          this.createHelpTooltip();\n        }\n\n        this.createMeasureTooltip();\n      } else {\n        if (showHelpTooltip) {\n          this.removeHelpTooltip();\n        }\n\n        this.removeMeasureTooltip();\n      }\n    }\n    /**\n     * Called if the current geometry of the draw interaction has changed.\n     *\n     * @param {ol.events.Event} evt The generic change event.\n     */\n\n  }, {\n    key: \"onDrawInteractionGeometryChange\",\n    value: function onDrawInteractionGeometryChange()\n    /*evt*/\n    {\n      this.updateMeasureTooltip();\n    }\n    /**\n     * Called on map click.\n     *\n     * @param {ol.MapBrowserPointerEvent} evt The pointer event.\n     */\n\n  }, {\n    key: \"onMapClick\",\n    value: function onMapClick(evt) {\n      var _this$props4 = this.props,\n          measureType = _this$props4.measureType,\n          showMeasureInfoOnClickedPoints = _this$props4.showMeasureInfoOnClickedPoints;\n\n      if (showMeasureInfoOnClickedPoints && measureType === 'line') {\n        this.addMeasureStopTooltip(evt.coordinate);\n      }\n    }\n    /**\n     * Sets up listeners whenever the drawing of a measurement sketch is\n     * started.\n     *\n     * @param {OlInteractionDrawEvent} evt The event which contains the\n     *   feature we are drawing.\n     *\n     * @method\n     */\n\n  }, {\n    key: \"onDrawStart\",\n    value: function onDrawStart(evt) {\n      var _this$props5 = this.props,\n          showHelpTooltip = _this$props5.showHelpTooltip,\n          multipleDrawing = _this$props5.multipleDrawing,\n          map = _this$props5.map;\n\n      var source = this._measureLayer.getSource();\n\n      this._feature = evt.feature;\n      this._eventKeys.change = this._feature.getGeometry().on('change', this.onDrawInteractionGeometryChange);\n      this._eventKeys.click = map.on('click', this.onMapClick, this);\n\n      if (!multipleDrawing && source.getFeatures().length > 0) {\n        this.cleanupTooltips();\n        this.createMeasureTooltip();\n\n        if (showHelpTooltip) {\n          this.createHelpTooltip();\n        }\n\n        source.clear();\n      }\n    }\n    /**\n     * Called whenever measuring stops, this method draws static tooltips with\n     * the result onto the map canvas and unregisters various listeners.\n     *\n     * @method\n     */\n\n  }, {\n    key: \"onDrawEnd\",\n    value: function onDrawEnd(evt) {\n      var _this$props6 = this.props,\n          measureType = _this$props6.measureType,\n          multipleDrawing = _this$props6.multipleDrawing,\n          showMeasureInfoOnClickedPoints = _this$props6.showMeasureInfoOnClickedPoints,\n          measureTooltipCssClasses = _this$props6.measureTooltipCssClasses;\n\n      if (this._eventKeys.click) {\n        (0, _Observable.unByKey)(this._eventKeys.click);\n      }\n\n      if (this._eventKeys.change) {\n        (0, _Observable.unByKey)(this._eventKeys.change);\n      }\n\n      if (multipleDrawing) {\n        this.addMeasureStopTooltip(evt.feature.getGeometry().getLastCoordinate());\n      } // Fix doubled label for lastPoint of line\n\n\n      if ((multipleDrawing || showMeasureInfoOnClickedPoints) && measureType === 'line') {\n        this.removeMeasureTooltip();\n      } else {\n        this._measureTooltipElement.className = \"\".concat(measureTooltipCssClasses.tooltip, \" \").concat(measureTooltipCssClasses.tooltipStatic);\n\n        this._measureTooltip.setOffset([0, -7]);\n      }\n\n      this.updateMeasureTooltip(); // unset sketch\n\n      this._feature = null; // fix doubled label for last point of line\n\n      if ((multipleDrawing || showMeasureInfoOnClickedPoints) && measureType === 'line') {\n        this._measureTooltipElement = null;\n        this.createMeasureTooltip();\n      }\n    }\n    /**\n     * Adds a tooltip on click where a measuring stop occured.\n     *\n     * @param {ol.Coordinate} coordinate The coordinate for the tooltip.\n     */\n\n  }, {\n    key: \"addMeasureStopTooltip\",\n    value: function addMeasureStopTooltip(coordinate) {\n      var _this$props7 = this.props,\n          measureType = _this$props7.measureType,\n          decimalPlacesInTooltips = _this$props7.decimalPlacesInTooltips,\n          map = _this$props7.map,\n          measureTooltipCssClasses = _this$props7.measureTooltipCssClasses;\n\n      if (!(0, _isEmpty[\"default\"])(this._feature)) {\n        var geom = this._feature.getGeometry();\n\n        if (geom instanceof _MultiPolygon[\"default\"]) {\n          geom = geom.getPolygons()[0];\n        }\n\n        if (geom instanceof _MultiLineString[\"default\"]) {\n          geom = geom.getLineStrings()[0];\n        }\n\n        var value = measureType === 'line' ? _MeasureUtil[\"default\"].formatLength(geom, map, decimalPlacesInTooltips) : _MeasureUtil[\"default\"].formatArea(geom, map, decimalPlacesInTooltips);\n\n        if (parseInt(value, 10) > 0) {\n          var div = document.createElement('div');\n          div.className = \"\".concat(measureTooltipCssClasses.tooltip, \" \").concat(measureTooltipCssClasses.tooltipStatic);\n          div.innerHTML = value;\n          var tooltip = new _Overlay[\"default\"]({\n            element: div,\n            offset: [0, -15],\n            positioning: 'bottom-center'\n          });\n          map.addOverlay(tooltip);\n          tooltip.setPosition(coordinate);\n\n          this._createdTooltipDivs.push(div);\n\n          this._createdTooltipOverlays.push(tooltip);\n        }\n      }\n    }\n    /**\n     * Creates a new measure tooltip as `OlOverlay`.\n     */\n\n  }, {\n    key: \"createMeasureTooltip\",\n    value: function createMeasureTooltip() {\n      var _this$props8 = this.props,\n          map = _this$props8.map,\n          measureTooltipCssClasses = _this$props8.measureTooltipCssClasses;\n\n      if (this._measureTooltipElement) {\n        return;\n      }\n\n      this._measureTooltipElement = document.createElement('div');\n      this._measureTooltipElement.className = \"\".concat(measureTooltipCssClasses.tooltip, \" \").concat(measureTooltipCssClasses.tooltipDynamic);\n      this._measureTooltip = new _Overlay[\"default\"]({\n        element: this._measureTooltipElement,\n        offset: [0, -15],\n        positioning: 'bottom-center'\n      });\n      map.addOverlay(this._measureTooltip);\n    }\n    /**\n     * Creates a new help tooltip as `OlOverlay`.\n     */\n\n  }, {\n    key: \"createHelpTooltip\",\n    value: function createHelpTooltip() {\n      var _this$props9 = this.props,\n          map = _this$props9.map,\n          measureTooltipCssClasses = _this$props9.measureTooltipCssClasses;\n\n      if (this._helpTooltipElement) {\n        return;\n      }\n\n      this._helpTooltipElement = document.createElement('div');\n      this._helpTooltipElement.className = measureTooltipCssClasses.tooltip;\n      this._helpTooltip = new _Overlay[\"default\"]({\n        element: this._helpTooltipElement,\n        offset: [15, 0],\n        positioning: 'center-left'\n      });\n      map.addOverlay(this._helpTooltip);\n    }\n    /**\n     * Removes help tooltip from the map if measure button was untoggled.\n     */\n\n  }, {\n    key: \"removeHelpTooltip\",\n    value: function removeHelpTooltip() {\n      if (this._helpTooltip) {\n        this.props.map.removeOverlay(this._helpTooltip);\n      }\n\n      this._helpTooltipElement = null;\n      this._helpTooltip = null;\n    }\n    /**\n     * Removes measure tooltip from the map if measure button was untoggled.\n     *\n     * @method\n     */\n\n  }, {\n    key: \"removeMeasureTooltip\",\n    value: function removeMeasureTooltip() {\n      if (this._measureTooltip) {\n        this.props.map.removeOverlay(this._measureTooltip);\n      }\n\n      this._measureTooltipElement = null;\n      this._measureTooltip = null;\n    }\n    /**\n     * Cleans up tooltips when the button is unpressed.\n     *\n     * @method\n     */\n\n  }, {\n    key: \"cleanupTooltips\",\n    value: function cleanupTooltips() {\n      var map = this.props.map;\n\n      this._createdTooltipOverlays.forEach(function (tooltipOverlay) {\n        map.removeOverlay(tooltipOverlay);\n      });\n\n      this._createdTooltipOverlays = [];\n\n      this._createdTooltipDivs.forEach(function (tooltipDiv) {\n        var parent = tooltipDiv && tooltipDiv.parentNode;\n\n        if (parent) {\n          parent.removeChild(tooltipDiv);\n        }\n      });\n\n      this._createdTooltipDivs = [];\n      this.removeMeasureTooltip();\n    }\n    /**\n     * Cleans up artifacts from measuring when the button is unpressed.\n     *\n     * @method\n     */\n\n  }, {\n    key: \"cleanup\",\n    value: function cleanup() {\n      var _this2 = this;\n\n      if (this._drawInteraction) {\n        this._drawInteraction.setActive(false);\n      }\n\n      Object.keys(this._eventKeys).forEach(function (key) {\n        if (_this2._eventKeys[key]) {\n          (0, _Observable.unByKey)(_this2._eventKeys[key]);\n        }\n      });\n      this.cleanupTooltips();\n\n      if (this._measureLayer) {\n        this._measureLayer.getSource().clear();\n      }\n    }\n    /**\n     * Called on map's pointermove event.\n     *\n     * @param {ol.MapBrowserPointerEvent} evt The pointer event.\n     */\n\n  }, {\n    key: \"onMapPointerMove\",\n    value: function onMapPointerMove(evt) {\n      if (!evt.dragging) {\n        this.updateHelpTooltip(evt.coordinate);\n      }\n    }\n    /**\n     * Updates the position and the text of the help tooltip.\n     *\n     * @param {ol.coordinate} coordinate The coordinate to center the tooltip to.\n     */\n\n  }, {\n    key: \"updateHelpTooltip\",\n    value: function updateHelpTooltip(coordinate) {\n      var _this$props10 = this.props,\n          measureType = _this$props10.measureType,\n          clickToDrawText = _this$props10.clickToDrawText,\n          continuePolygonMsg = _this$props10.continuePolygonMsg,\n          continueLineMsg = _this$props10.continueLineMsg,\n          continueAngleMsg = _this$props10.continueAngleMsg;\n\n      if (!this._helpTooltipElement) {\n        return;\n      }\n\n      var msg = clickToDrawText;\n\n      if (this._helpTooltipElement) {\n        if (measureType === 'polygon') {\n          msg = continuePolygonMsg;\n        } else if (measureType === 'line') {\n          msg = continueLineMsg;\n        } else if (measureType === 'angle') {\n          msg = continueAngleMsg;\n        }\n\n        this._helpTooltipElement.innerHTML = msg;\n\n        this._helpTooltip.setPosition(coordinate);\n      }\n    }\n    /**\n     * Updates the text and position of the measture tooltip.\n     */\n\n  }, {\n    key: \"updateMeasureTooltip\",\n    value: function updateMeasureTooltip() {\n      var _this$props11 = this.props,\n          measureType = _this$props11.measureType,\n          decimalPlacesInTooltips = _this$props11.decimalPlacesInTooltips,\n          map = _this$props11.map;\n\n      if (!this._measureTooltipElement) {\n        return;\n      }\n\n      if (this._feature) {\n        var output;\n\n        var geom = this._feature.getGeometry();\n\n        if (geom instanceof _MultiPolygon[\"default\"]) {\n          geom = geom.getPolygons()[0];\n        }\n\n        if (geom instanceof _MultiLineString[\"default\"]) {\n          geom = geom.getLineStrings()[0];\n        }\n\n        var measureTooltipCoord = geom.getLastCoordinate();\n\n        if (measureType === 'polygon') {\n          output = _MeasureUtil[\"default\"].formatArea(geom, map, decimalPlacesInTooltips); // attach area at interior point\n\n          measureTooltipCoord = geom.getInteriorPoint().getCoordinates();\n        } else if (measureType === 'line') {\n          output = _MeasureUtil[\"default\"].formatLength(geom, map, decimalPlacesInTooltips);\n        } else if (measureType === 'angle') {\n          output = _MeasureUtil[\"default\"].formatAngle(geom, map, decimalPlacesInTooltips);\n        }\n\n        this._measureTooltipElement.innerHTML = output;\n\n        this._measureTooltip.setPosition(measureTooltipCoord);\n      }\n    }\n    /**\n     * The render function.\n     */\n\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props12 = this.props,\n          className = _this$props12.className,\n          map = _this$props12.map,\n          measureType = _this$props12.measureType,\n          measureLayerName = _this$props12.measureLayerName,\n          fillColor = _this$props12.fillColor,\n          strokeColor = _this$props12.strokeColor,\n          showMeasureInfoOnClickedPoints = _this$props12.showMeasureInfoOnClickedPoints,\n          showHelpTooltip = _this$props12.showHelpTooltip,\n          multipleDrawing = _this$props12.multipleDrawing,\n          clickToDrawText = _this$props12.clickToDrawText,\n          continuePolygonMsg = _this$props12.continuePolygonMsg,\n          continueLineMsg = _this$props12.continueLineMsg,\n          continueAngleMsg = _this$props12.continueAngleMsg,\n          decimalPlacesInTooltips = _this$props12.decimalPlacesInTooltips,\n          measureTooltipCssClasses = _this$props12.measureTooltipCssClasses,\n          onToggle = _this$props12.onToggle,\n          passThroughProps = _objectWithoutProperties(_this$props12, [\"className\", \"map\", \"measureType\", \"measureLayerName\", \"fillColor\", \"strokeColor\", \"showMeasureInfoOnClickedPoints\", \"showHelpTooltip\", \"multipleDrawing\", \"clickToDrawText\", \"continuePolygonMsg\", \"continueLineMsg\", \"continueAngleMsg\", \"decimalPlacesInTooltips\", \"measureTooltipCssClasses\", \"onToggle\"]);\n\n      var finalClassName = className ? \"\".concat(className, \" \").concat(this.className) : this.className;\n      return _react[\"default\"].createElement(_ToggleButton[\"default\"], _extends({\n        onToggle: this.onToggle,\n        className: finalClassName\n      }, passThroughProps));\n    }\n  }]);\n\n  return MeasureButton;\n}(_react[\"default\"].Component);\n\n_defineProperty(MeasureButton, \"propTypes\", {\n  /**\n   * The className which should be added.\n   *\n   * @type {String}\n   */\n  className: _propTypes[\"default\"].string,\n\n  /**\n   * Instance of OL map this component is bound to.\n   *\n   * @type {OlMap}\n   */\n  map: _propTypes[\"default\"].instanceOf(_Map[\"default\"]).isRequired,\n\n  /**\n   * Whether line, area or angle will be measured.\n   *\n   * @type {String}\n   */\n  measureType: _propTypes[\"default\"].oneOf(['line', 'polygon', 'angle']).isRequired,\n\n  /**\n   * Name of system vector layer which will be used to draw measurement\n   * results.\n   *\n   * @type {String}\n   */\n  measureLayerName: _propTypes[\"default\"].string,\n\n  /**\n   * Fill color of the measurement feature.\n   *\n   * @type {String}\n   */\n  fillColor: _propTypes[\"default\"].string,\n\n  /**\n   * Stroke color of the measurement feature.\n   *\n   * @type {String}\n   */\n  strokeColor: _propTypes[\"default\"].string,\n\n  /**\n   * Determines if a marker with current measurement should be shown every\n   * time the user clicks while measuring a distance. Default is false.\n   *\n   * @type {Boolean}\n   */\n  showMeasureInfoOnClickedPoints: _propTypes[\"default\"].bool,\n\n  /**\n   * Determines if a tooltip with helpful information is shown next to the mouse\n   * position. Default is true.\n   *\n   * @type {Boolean}\n   */\n  showHelpTooltip: _propTypes[\"default\"].bool,\n\n  /**\n   * Used to allow / disallow multiple drawings at a time on the map.\n   * Default is false.\n   * TODO known issue: only label of the last drawn feature will be shown!\n   *\n   * @type {Boolean}\n   */\n  multipleDrawing: _propTypes[\"default\"].bool,\n\n  /**\n  * Tooltip which will be shown on map mouserover after measurement button\n  * was activated.\n  *\n  * @type {String}\n  */\n  clickToDrawText: _propTypes[\"default\"].string,\n\n  /**\n   * Tooltip which will be shown after polygon measurement button was toggled\n   * and at least one click in the map is occured.\n   *\n   * @type {String}\n   */\n  continuePolygonMsg: _propTypes[\"default\"].string,\n\n  /**\n   * Tooltip which will be shown after line measurement button was toggled\n   * and at least one click in the map is occured.\n   *\n   * @type {String}\n   */\n  continueLineMsg: _propTypes[\"default\"].string,\n\n  /**\n   * Tooltip which will be shown after angle measurement button was toggled\n   * and at least one click in the map is occured.\n   *\n   * @type {String}\n   */\n  continueAngleMsg: _propTypes[\"default\"].string,\n\n  /**\n   * How many decimal places will be allowed for the measure tooltips.\n   * Default is 2.\n   *\n   * @type {Number} decimalPlacesInTooltips\n   */\n  decimalPlacesInTooltips: _propTypes[\"default\"].number,\n\n  /**\n   * CSS classes we'll assign to the popups and tooltips from measuring.\n   * Overwrite this object to style the text of the popups / overlays, if you\n   * don't want to use default classes.\n   *\n   * @type {Object} measureTooltipCssClasses\n   */\n  measureTooltipCssClasses: _propTypes[\"default\"].shape({\n    tooltip: _propTypes[\"default\"].string,\n    tooltipDynamic: _propTypes[\"default\"].string,\n    tooltipStatic: _propTypes[\"default\"].string\n  }),\n\n  /**\n   * Whether the measure button is pressed.\n   *\n   * @type {Boolean} pressed\n   */\n  pressed: _propTypes[\"default\"].bool,\n\n  /**\n   * A custom onToogle function that will be called\n   * if button is toggled\n   *\n   * @type {Function} onToggle\n   */\n  onToggle: _propTypes[\"default\"].func\n});\n\n_defineProperty(MeasureButton, \"defaultProps\", {\n  measureLayerName: 'react-geo_measure',\n  fillColor: 'rgba(255, 0, 0, 0.5)',\n  strokeColor: 'rgba(255, 0, 0, 0.8)',\n  showMeasureInfoOnClickedPoints: false,\n  showHelpTooltip: true,\n  decimalPlacesInTooltips: 2,\n  multipleDrawing: false,\n  continuePolygonMsg: 'Click to draw area',\n  continueLineMsg: 'Click to draw line',\n  continueAngleMsg: 'Click to draw angle',\n  clickToDrawText: 'Click to measure',\n  measureTooltipCssClasses: {\n    tooltip: \"\".concat(_constants.CSS_PREFIX, \"measure-tooltip\"),\n    tooltipDynamic: \"\".concat(_constants.CSS_PREFIX, \"measure-tooltip-dynamic\"),\n    tooltipStatic: \"\".concat(_constants.CSS_PREFIX, \"measure-tooltip-static\")\n  },\n  pressed: false,\n  onToggle: function onToggle() {}\n  /**\n   * Creates the MeasureButton.\n   *\n   * @constructs MeasureButton\n   */\n\n});\n\nvar _default = MeasureButton;\nexports[\"default\"] = _default;","map":{"version":3,"sources":["/Users/dirkmennecke77/Desktop/Lageplan/node_modules/@terrestris/react-geo/dist/Button/MeasureButton/MeasureButton.js"],"names":["Object","defineProperty","exports","value","_react","_interopRequireDefault","require","_propTypes","_Map","_Vector","_Vector2","_Collection","_MultiPolygon","_MultiLineString","_Style","_Stroke","_Fill","_Circle","_Draw","_Observable","_Overlay","_isEmpty","_ToggleButton","_MeasureUtil","_MapUtil","_constants","obj","__esModule","_typeof","Symbol","iterator","constructor","prototype","_extends","assign","target","i","arguments","length","source","key","hasOwnProperty","call","apply","_objectWithoutProperties","excluded","_objectWithoutPropertiesLoose","getOwnPropertySymbols","sourceSymbolKeys","indexOf","propertyIsEnumerable","sourceKeys","keys","_classCallCheck","instance","Constructor","TypeError","_defineProperties","props","descriptor","enumerable","configurable","writable","_createClass","protoProps","staticProps","_possibleConstructorReturn","self","_assertThisInitialized","_getPrototypeOf","o","setPrototypeOf","getPrototypeOf","__proto__","ReferenceError","_inherits","subClass","superClass","create","_setPrototypeOf","p","_defineProperty","MeasureButton","_React$Component","_this","concat","CSS_PREFIX","drawstart","drawend","pointermove","click","change","onDrawInteractionActiveChange","bind","onToggle","onDrawStart","onDrawEnd","onDrawInteractionGeometryChange","onMapPointerMove","onMapClick","componentDidMount","createMeasureLayer","createDrawInteraction","pressed","_this$props","map","cleanup","_drawInteraction","setActive","_eventKeys","on","_this$props2","measureLayerName","fillColor","strokeColor","measureLayer","getLayerByName","name","features","style","fill","color","stroke","width","image","radius","addLayer","_measureLayer","_this$props3","measureType","maxPoints","undefined","drawType","drawInteraction","getSource","type","lineDash","freehandCondition","addInteraction","showHelpTooltip","getActive","createHelpTooltip","createMeasureTooltip","removeHelpTooltip","removeMeasureTooltip","updateMeasureTooltip","evt","_this$props4","showMeasureInfoOnClickedPoints","addMeasureStopTooltip","coordinate","_this$props5","multipleDrawing","_feature","feature","getGeometry","getFeatures","cleanupTooltips","clear","_this$props6","measureTooltipCssClasses","unByKey","getLastCoordinate","_measureTooltipElement","className","tooltip","tooltipStatic","_measureTooltip","setOffset","_this$props7","decimalPlacesInTooltips","geom","getPolygons","getLineStrings","formatLength","formatArea","parseInt","div","document","createElement","innerHTML","element","offset","positioning","addOverlay","setPosition","_createdTooltipDivs","push","_createdTooltipOverlays","_this$props8","tooltipDynamic","_this$props9","_helpTooltipElement","_helpTooltip","removeOverlay","forEach","tooltipOverlay","tooltipDiv","parent","parentNode","removeChild","_this2","dragging","updateHelpTooltip","_this$props10","clickToDrawText","continuePolygonMsg","continueLineMsg","continueAngleMsg","msg","_this$props11","output","measureTooltipCoord","getInteriorPoint","getCoordinates","formatAngle","render","_this$props12","passThroughProps","finalClassName","Component","string","instanceOf","isRequired","oneOf","bool","number","shape","func","_default"],"mappings":"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","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _propTypes = _interopRequireDefault(require(\"prop-types\"));\n\nvar _Map = _interopRequireDefault(require(\"ol/Map\"));\n\nvar _Vector = _interopRequireDefault(require(\"ol/layer/Vector\"));\n\nvar _Vector2 = _interopRequireDefault(require(\"ol/source/Vector\"));\n\nvar _Collection = _interopRequireDefault(require(\"ol/Collection\"));\n\nvar _MultiPolygon = _interopRequireDefault(require(\"ol/geom/MultiPolygon\"));\n\nvar _MultiLineString = _interopRequireDefault(require(\"ol/geom/MultiLineString\"));\n\nvar _Style = _interopRequireDefault(require(\"ol/style/Style\"));\n\nvar _Stroke = _interopRequireDefault(require(\"ol/style/Stroke\"));\n\nvar _Fill = _interopRequireDefault(require(\"ol/style/Fill\"));\n\nvar _Circle = _interopRequireDefault(require(\"ol/style/Circle\"));\n\nvar _Draw = _interopRequireDefault(require(\"ol/interaction/Draw\"));\n\nvar _Observable = require(\"ol/Observable\");\n\nvar _Overlay = _interopRequireDefault(require(\"ol/Overlay\"));\n\nvar _isEmpty = _interopRequireDefault(require(\"lodash/isEmpty\"));\n\nvar _ToggleButton = _interopRequireDefault(require(\"../ToggleButton/ToggleButton.js\"));\n\nvar _MeasureUtil = _interopRequireDefault(require(\"@terrestris/ol-util/dist/MeasureUtil/MeasureUtil\"));\n\nvar _MapUtil = _interopRequireDefault(require(\"@terrestris/ol-util/dist/MapUtil/MapUtil\"));\n\nvar _constants = require(\"../../constants\");\n\nrequire(\"./MeasureButton.less\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\nfunction _typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n/**\n * The MeasureButton.\n *\n * @class The MeasureButton\n * @extends React.Component\n */\nvar MeasureButton =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(MeasureButton, _React$Component);\n\n  /**\n   * The className added to this component.\n   *\n   * @type {String}\n   * @private\n   */\n\n  /**\n   * Currently drawn feature.\n   *\n   * @type {OlFeature}\n   * @private\n   */\n\n  /**\n   * Overlay to show the measurement.\n   *\n   * @type {olOverlay}\n   * @private\n   */\n\n  /**\n  * Overlay to show the help messages.\n  *\n  * @type {olOverlay}\n  * @private\n  */\n\n  /**\n  * The help tooltip element.\n  *\n  * @type {Element}\n  * @private\n  */\n\n  /**\n   * The measure tooltip element.\n   *\n   * @type {Element}\n   * @private\n   */\n\n  /**\n   * An array of created overlays we use for the tooltips. Used to eventually\n   * clean up everything we added.\n   *\n   * @type{Array<OlOverlay>}\n   * @private\n   */\n\n  /**\n   * An array of created divs we use for the tooltips. Used to eventually\n   * clean up everything we added.\n   *\n   * @type{Array<HTMLDivElement>}\n   * @private\n   */\n\n  /**\n   * An object holding keyed `OlEventsKey` instances returned by the `on`\n   * method of `OlObservable`. These keys are used to unbind temporary\n   * listeners on events of the `OlInteractionDraw` or `OlMap`. The keys\n   * are the names of the events on the various objects. The `click` key is\n   * not always bound, but only for certain #measureType values.\n   *\n   * In #cleanup, we unbind all events we have bound so as to not leak\n   * memory, and to ensure we have no concurring listeners being active at a\n   * time (E.g. when multiple measure buttons are in an application).\n   *\n   * @type {Object}\n   * @private\n   */\n\n  /**\n   * The vector layer showing the geometries added by the draw interaction.\n   *\n   * @type {ol.layer.Vector}\n   * @private\n   */\n\n  /**\n   * The draw interaction used to draw the geometries to measure.\n   *\n   * @type {ol.interaction.Draw}\n   * @private\n   */\n\n  /**\n   * The properties.\n   * @type {Object}\n   */\n\n  /**\n   * The default properties.\n   * @type {Object}\n   */\n  function MeasureButton(props) {\n    var _this;\n\n    _classCallCheck(this, MeasureButton);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(MeasureButton).call(this, props));\n\n    _defineProperty(_assertThisInitialized(_this), \"className\", \"\".concat(_constants.CSS_PREFIX, \"measurebutton\"));\n\n    _defineProperty(_assertThisInitialized(_this), \"_feature\", null);\n\n    _defineProperty(_assertThisInitialized(_this), \"_measureTooltip\", null);\n\n    _defineProperty(_assertThisInitialized(_this), \"_helpTooltip\", null);\n\n    _defineProperty(_assertThisInitialized(_this), \"_helpTooltipElement\", null);\n\n    _defineProperty(_assertThisInitialized(_this), \"_measureTooltipElement\", null);\n\n    _defineProperty(_assertThisInitialized(_this), \"_createdTooltipOverlays\", []);\n\n    _defineProperty(_assertThisInitialized(_this), \"_createdTooltipDivs\", []);\n\n    _defineProperty(_assertThisInitialized(_this), \"_eventKeys\", {\n      drawstart: null,\n      drawend: null,\n      pointermove: null,\n      click: null,\n      change: null\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"_measureLayer\", null);\n\n    _defineProperty(_assertThisInitialized(_this), \"_drawInteraction\", null);\n\n    _this.onDrawInteractionActiveChange = _this.onDrawInteractionActiveChange.bind(_assertThisInitialized(_this));\n    _this.onToggle = _this.onToggle.bind(_assertThisInitialized(_this));\n    _this.onDrawStart = _this.onDrawStart.bind(_assertThisInitialized(_this));\n    _this.onDrawEnd = _this.onDrawEnd.bind(_assertThisInitialized(_this));\n    _this.onDrawInteractionGeometryChange = _this.onDrawInteractionGeometryChange.bind(_assertThisInitialized(_this));\n    _this.onMapPointerMove = _this.onMapPointerMove.bind(_assertThisInitialized(_this));\n    _this.onMapClick = _this.onMapClick.bind(_assertThisInitialized(_this));\n    return _this;\n  }\n  /**\n   * `componentDidMount` method of the MeasureButton.\n   *\n   * @method\n   */\n\n\n  _createClass(MeasureButton, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.createMeasureLayer();\n      this.createDrawInteraction();\n    }\n    /**\n     * Called when the button is toggled, this method ensures that everything\n     * is cleaned up when unpressed, and that measuring can start when pressed.\n     *\n     * @method\n     */\n\n  }, {\n    key: \"onToggle\",\n    value: function onToggle(pressed) {\n      var _this$props = this.props,\n          map = _this$props.map,\n          onToggle = _this$props.onToggle;\n      this.cleanup();\n      onToggle(pressed);\n\n      if (pressed && this._drawInteraction) {\n        this._drawInteraction.setActive(pressed);\n\n        this._eventKeys.drawstart = this._drawInteraction.on('drawstart', this.onDrawStart, this);\n        this._eventKeys.drawend = this._drawInteraction.on('drawend', this.onDrawEnd, this);\n        this._eventKeys.pointermove = map.on('pointermove', this.onMapPointerMove, this);\n      }\n    }\n    /**\n     * Creates measure vector layer and add this to the map.\n     *\n     * @method\n     */\n\n  }, {\n    key: \"createMeasureLayer\",\n    value: function createMeasureLayer() {\n      var _this$props2 = this.props,\n          measureLayerName = _this$props2.measureLayerName,\n          fillColor = _this$props2.fillColor,\n          strokeColor = _this$props2.strokeColor,\n          map = _this$props2.map;\n\n      var measureLayer = _MapUtil[\"default\"].getLayerByName(map, measureLayerName);\n\n      if (!measureLayer) {\n        measureLayer = new _Vector[\"default\"]({\n          name: measureLayerName,\n          source: new _Vector2[\"default\"]({\n            features: new _Collection[\"default\"]()\n          }),\n          style: new _Style[\"default\"]({\n            fill: new _Fill[\"default\"]({\n              color: fillColor\n            }),\n            stroke: new _Stroke[\"default\"]({\n              color: strokeColor,\n              width: 2\n            }),\n            image: new _Circle[\"default\"]({\n              radius: 7,\n              fill: new _Fill[\"default\"]({\n                color: fillColor\n              })\n            })\n          })\n        });\n        map.addLayer(measureLayer);\n      }\n\n      this._measureLayer = measureLayer;\n    }\n    /**\n     * Creates a correctly configured OL draw interaction depending on\n     * the configured measureType.\n     *\n     * @return {OlInteractionDraw} The created interaction, which is not yet\n     *   added to the map.\n     *\n     * @method\n     */\n\n  }, {\n    key: \"createDrawInteraction\",\n    value: function createDrawInteraction() {\n      var _this$props3 = this.props,\n          fillColor = _this$props3.fillColor,\n          strokeColor = _this$props3.strokeColor,\n          measureType = _this$props3.measureType,\n          pressed = _this$props3.pressed,\n          map = _this$props3.map;\n      var maxPoints = measureType === 'angle' ? 2 : undefined;\n      var drawType = measureType === 'polygon' ? 'MultiPolygon' : 'MultiLineString';\n      var drawInteraction = new _Draw[\"default\"]({\n        name: 'react-geo_drawaction',\n        source: this._measureLayer.getSource(),\n        type: drawType,\n        maxPoints: maxPoints,\n        style: new _Style[\"default\"]({\n          fill: new _Fill[\"default\"]({\n            color: fillColor\n          }),\n          stroke: new _Stroke[\"default\"]({\n            color: strokeColor,\n            lineDash: [10, 10],\n            width: 2\n          }),\n          image: new _Circle[\"default\"]({\n            radius: 5,\n            stroke: new _Stroke[\"default\"]({\n              color: strokeColor\n            }),\n            fill: new _Fill[\"default\"]({\n              color: fillColor\n            })\n          })\n        }),\n        freehandCondition: function freehandCondition() {\n          return false;\n        }\n      });\n      map.addInteraction(drawInteraction);\n      drawInteraction.on('change:active', this.onDrawInteractionActiveChange, this);\n      this._drawInteraction = drawInteraction;\n\n      if (pressed) {\n        this.onDrawInteractionActiveChange();\n      }\n\n      drawInteraction.setActive(pressed);\n    }\n    /**\n     * Adjusts visibility of measurement related tooltips depending on active\n     * status of draw interaction.\n     */\n\n  }, {\n    key: \"onDrawInteractionActiveChange\",\n    value: function onDrawInteractionActiveChange() {\n      var showHelpTooltip = this.props.showHelpTooltip;\n\n      if (this._drawInteraction.getActive()) {\n        if (showHelpTooltip) {\n          this.createHelpTooltip();\n        }\n\n        this.createMeasureTooltip();\n      } else {\n        if (showHelpTooltip) {\n          this.removeHelpTooltip();\n        }\n\n        this.removeMeasureTooltip();\n      }\n    }\n    /**\n     * Called if the current geometry of the draw interaction has changed.\n     *\n     * @param {ol.events.Event} evt The generic change event.\n     */\n\n  }, {\n    key: \"onDrawInteractionGeometryChange\",\n    value: function onDrawInteractionGeometryChange()\n    /*evt*/\n    {\n      this.updateMeasureTooltip();\n    }\n    /**\n     * Called on map click.\n     *\n     * @param {ol.MapBrowserPointerEvent} evt The pointer event.\n     */\n\n  }, {\n    key: \"onMapClick\",\n    value: function onMapClick(evt) {\n      var _this$props4 = this.props,\n          measureType = _this$props4.measureType,\n          showMeasureInfoOnClickedPoints = _this$props4.showMeasureInfoOnClickedPoints;\n\n      if (showMeasureInfoOnClickedPoints && measureType === 'line') {\n        this.addMeasureStopTooltip(evt.coordinate);\n      }\n    }\n    /**\n     * Sets up listeners whenever the drawing of a measurement sketch is\n     * started.\n     *\n     * @param {OlInteractionDrawEvent} evt The event which contains the\n     *   feature we are drawing.\n     *\n     * @method\n     */\n\n  }, {\n    key: \"onDrawStart\",\n    value: function onDrawStart(evt) {\n      var _this$props5 = this.props,\n          showHelpTooltip = _this$props5.showHelpTooltip,\n          multipleDrawing = _this$props5.multipleDrawing,\n          map = _this$props5.map;\n\n      var source = this._measureLayer.getSource();\n\n      this._feature = evt.feature;\n      this._eventKeys.change = this._feature.getGeometry().on('change', this.onDrawInteractionGeometryChange);\n      this._eventKeys.click = map.on('click', this.onMapClick, this);\n\n      if (!multipleDrawing && source.getFeatures().length > 0) {\n        this.cleanupTooltips();\n        this.createMeasureTooltip();\n\n        if (showHelpTooltip) {\n          this.createHelpTooltip();\n        }\n\n        source.clear();\n      }\n    }\n    /**\n     * Called whenever measuring stops, this method draws static tooltips with\n     * the result onto the map canvas and unregisters various listeners.\n     *\n     * @method\n     */\n\n  }, {\n    key: \"onDrawEnd\",\n    value: function onDrawEnd(evt) {\n      var _this$props6 = this.props,\n          measureType = _this$props6.measureType,\n          multipleDrawing = _this$props6.multipleDrawing,\n          showMeasureInfoOnClickedPoints = _this$props6.showMeasureInfoOnClickedPoints,\n          measureTooltipCssClasses = _this$props6.measureTooltipCssClasses;\n\n      if (this._eventKeys.click) {\n        (0, _Observable.unByKey)(this._eventKeys.click);\n      }\n\n      if (this._eventKeys.change) {\n        (0, _Observable.unByKey)(this._eventKeys.change);\n      }\n\n      if (multipleDrawing) {\n        this.addMeasureStopTooltip(evt.feature.getGeometry().getLastCoordinate());\n      } // Fix doubled label for lastPoint of line\n\n\n      if ((multipleDrawing || showMeasureInfoOnClickedPoints) && measureType === 'line') {\n        this.removeMeasureTooltip();\n      } else {\n        this._measureTooltipElement.className = \"\".concat(measureTooltipCssClasses.tooltip, \" \").concat(measureTooltipCssClasses.tooltipStatic);\n\n        this._measureTooltip.setOffset([0, -7]);\n      }\n\n      this.updateMeasureTooltip(); // unset sketch\n\n      this._feature = null; // fix doubled label for last point of line\n\n      if ((multipleDrawing || showMeasureInfoOnClickedPoints) && measureType === 'line') {\n        this._measureTooltipElement = null;\n        this.createMeasureTooltip();\n      }\n    }\n    /**\n     * Adds a tooltip on click where a measuring stop occured.\n     *\n     * @param {ol.Coordinate} coordinate The coordinate for the tooltip.\n     */\n\n  }, {\n    key: \"addMeasureStopTooltip\",\n    value: function addMeasureStopTooltip(coordinate) {\n      var _this$props7 = this.props,\n          measureType = _this$props7.measureType,\n          decimalPlacesInTooltips = _this$props7.decimalPlacesInTooltips,\n          map = _this$props7.map,\n          measureTooltipCssClasses = _this$props7.measureTooltipCssClasses;\n\n      if (!(0, _isEmpty[\"default\"])(this._feature)) {\n        var geom = this._feature.getGeometry();\n\n        if (geom instanceof _MultiPolygon[\"default\"]) {\n          geom = geom.getPolygons()[0];\n        }\n\n        if (geom instanceof _MultiLineString[\"default\"]) {\n          geom = geom.getLineStrings()[0];\n        }\n\n        var value = measureType === 'line' ? _MeasureUtil[\"default\"].formatLength(geom, map, decimalPlacesInTooltips) : _MeasureUtil[\"default\"].formatArea(geom, map, decimalPlacesInTooltips);\n\n        if (parseInt(value, 10) > 0) {\n          var div = document.createElement('div');\n          div.className = \"\".concat(measureTooltipCssClasses.tooltip, \" \").concat(measureTooltipCssClasses.tooltipStatic);\n          div.innerHTML = value;\n          var tooltip = new _Overlay[\"default\"]({\n            element: div,\n            offset: [0, -15],\n            positioning: 'bottom-center'\n          });\n          map.addOverlay(tooltip);\n          tooltip.setPosition(coordinate);\n\n          this._createdTooltipDivs.push(div);\n\n          this._createdTooltipOverlays.push(tooltip);\n        }\n      }\n    }\n    /**\n     * Creates a new measure tooltip as `OlOverlay`.\n     */\n\n  }, {\n    key: \"createMeasureTooltip\",\n    value: function createMeasureTooltip() {\n      var _this$props8 = this.props,\n          map = _this$props8.map,\n          measureTooltipCssClasses = _this$props8.measureTooltipCssClasses;\n\n      if (this._measureTooltipElement) {\n        return;\n      }\n\n      this._measureTooltipElement = document.createElement('div');\n      this._measureTooltipElement.className = \"\".concat(measureTooltipCssClasses.tooltip, \" \").concat(measureTooltipCssClasses.tooltipDynamic);\n      this._measureTooltip = new _Overlay[\"default\"]({\n        element: this._measureTooltipElement,\n        offset: [0, -15],\n        positioning: 'bottom-center'\n      });\n      map.addOverlay(this._measureTooltip);\n    }\n    /**\n     * Creates a new help tooltip as `OlOverlay`.\n     */\n\n  }, {\n    key: \"createHelpTooltip\",\n    value: function createHelpTooltip() {\n      var _this$props9 = this.props,\n          map = _this$props9.map,\n          measureTooltipCssClasses = _this$props9.measureTooltipCssClasses;\n\n      if (this._helpTooltipElement) {\n        return;\n      }\n\n      this._helpTooltipElement = document.createElement('div');\n      this._helpTooltipElement.className = measureTooltipCssClasses.tooltip;\n      this._helpTooltip = new _Overlay[\"default\"]({\n        element: this._helpTooltipElement,\n        offset: [15, 0],\n        positioning: 'center-left'\n      });\n      map.addOverlay(this._helpTooltip);\n    }\n    /**\n     * Removes help tooltip from the map if measure button was untoggled.\n     */\n\n  }, {\n    key: \"removeHelpTooltip\",\n    value: function removeHelpTooltip() {\n      if (this._helpTooltip) {\n        this.props.map.removeOverlay(this._helpTooltip);\n      }\n\n      this._helpTooltipElement = null;\n      this._helpTooltip = null;\n    }\n    /**\n     * Removes measure tooltip from the map if measure button was untoggled.\n     *\n     * @method\n     */\n\n  }, {\n    key: \"removeMeasureTooltip\",\n    value: function removeMeasureTooltip() {\n      if (this._measureTooltip) {\n        this.props.map.removeOverlay(this._measureTooltip);\n      }\n\n      this._measureTooltipElement = null;\n      this._measureTooltip = null;\n    }\n    /**\n     * Cleans up tooltips when the button is unpressed.\n     *\n     * @method\n     */\n\n  }, {\n    key: \"cleanupTooltips\",\n    value: function cleanupTooltips() {\n      var map = this.props.map;\n\n      this._createdTooltipOverlays.forEach(function (tooltipOverlay) {\n        map.removeOverlay(tooltipOverlay);\n      });\n\n      this._createdTooltipOverlays = [];\n\n      this._createdTooltipDivs.forEach(function (tooltipDiv) {\n        var parent = tooltipDiv && tooltipDiv.parentNode;\n\n        if (parent) {\n          parent.removeChild(tooltipDiv);\n        }\n      });\n\n      this._createdTooltipDivs = [];\n      this.removeMeasureTooltip();\n    }\n    /**\n     * Cleans up artifacts from measuring when the button is unpressed.\n     *\n     * @method\n     */\n\n  }, {\n    key: \"cleanup\",\n    value: function cleanup() {\n      var _this2 = this;\n\n      if (this._drawInteraction) {\n        this._drawInteraction.setActive(false);\n      }\n\n      Object.keys(this._eventKeys).forEach(function (key) {\n        if (_this2._eventKeys[key]) {\n          (0, _Observable.unByKey)(_this2._eventKeys[key]);\n        }\n      });\n      this.cleanupTooltips();\n\n      if (this._measureLayer) {\n        this._measureLayer.getSource().clear();\n      }\n    }\n    /**\n     * Called on map's pointermove event.\n     *\n     * @param {ol.MapBrowserPointerEvent} evt The pointer event.\n     */\n\n  }, {\n    key: \"onMapPointerMove\",\n    value: function onMapPointerMove(evt) {\n      if (!evt.dragging) {\n        this.updateHelpTooltip(evt.coordinate);\n      }\n    }\n    /**\n     * Updates the position and the text of the help tooltip.\n     *\n     * @param {ol.coordinate} coordinate The coordinate to center the tooltip to.\n     */\n\n  }, {\n    key: \"updateHelpTooltip\",\n    value: function updateHelpTooltip(coordinate) {\n      var _this$props10 = this.props,\n          measureType = _this$props10.measureType,\n          clickToDrawText = _this$props10.clickToDrawText,\n          continuePolygonMsg = _this$props10.continuePolygonMsg,\n          continueLineMsg = _this$props10.continueLineMsg,\n          continueAngleMsg = _this$props10.continueAngleMsg;\n\n      if (!this._helpTooltipElement) {\n        return;\n      }\n\n      var msg = clickToDrawText;\n\n      if (this._helpTooltipElement) {\n        if (measureType === 'polygon') {\n          msg = continuePolygonMsg;\n        } else if (measureType === 'line') {\n          msg = continueLineMsg;\n        } else if (measureType === 'angle') {\n          msg = continueAngleMsg;\n        }\n\n        this._helpTooltipElement.innerHTML = msg;\n\n        this._helpTooltip.setPosition(coordinate);\n      }\n    }\n    /**\n     * Updates the text and position of the measture tooltip.\n     */\n\n  }, {\n    key: \"updateMeasureTooltip\",\n    value: function updateMeasureTooltip() {\n      var _this$props11 = this.props,\n          measureType = _this$props11.measureType,\n          decimalPlacesInTooltips = _this$props11.decimalPlacesInTooltips,\n          map = _this$props11.map;\n\n      if (!this._measureTooltipElement) {\n        return;\n      }\n\n      if (this._feature) {\n        var output;\n\n        var geom = this._feature.getGeometry();\n\n        if (geom instanceof _MultiPolygon[\"default\"]) {\n          geom = geom.getPolygons()[0];\n        }\n\n        if (geom instanceof _MultiLineString[\"default\"]) {\n          geom = geom.getLineStrings()[0];\n        }\n\n        var measureTooltipCoord = geom.getLastCoordinate();\n\n        if (measureType === 'polygon') {\n          output = _MeasureUtil[\"default\"].formatArea(geom, map, decimalPlacesInTooltips); // attach area at interior point\n\n          measureTooltipCoord = geom.getInteriorPoint().getCoordinates();\n        } else if (measureType === 'line') {\n          output = _MeasureUtil[\"default\"].formatLength(geom, map, decimalPlacesInTooltips);\n        } else if (measureType === 'angle') {\n          output = _MeasureUtil[\"default\"].formatAngle(geom, map, decimalPlacesInTooltips);\n        }\n\n        this._measureTooltipElement.innerHTML = output;\n\n        this._measureTooltip.setPosition(measureTooltipCoord);\n      }\n    }\n    /**\n     * The render function.\n     */\n\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props12 = this.props,\n          className = _this$props12.className,\n          map = _this$props12.map,\n          measureType = _this$props12.measureType,\n          measureLayerName = _this$props12.measureLayerName,\n          fillColor = _this$props12.fillColor,\n          strokeColor = _this$props12.strokeColor,\n          showMeasureInfoOnClickedPoints = _this$props12.showMeasureInfoOnClickedPoints,\n          showHelpTooltip = _this$props12.showHelpTooltip,\n          multipleDrawing = _this$props12.multipleDrawing,\n          clickToDrawText = _this$props12.clickToDrawText,\n          continuePolygonMsg = _this$props12.continuePolygonMsg,\n          continueLineMsg = _this$props12.continueLineMsg,\n          continueAngleMsg = _this$props12.continueAngleMsg,\n          decimalPlacesInTooltips = _this$props12.decimalPlacesInTooltips,\n          measureTooltipCssClasses = _this$props12.measureTooltipCssClasses,\n          onToggle = _this$props12.onToggle,\n          passThroughProps = _objectWithoutProperties(_this$props12, [\"className\", \"map\", \"measureType\", \"measureLayerName\", \"fillColor\", \"strokeColor\", \"showMeasureInfoOnClickedPoints\", \"showHelpTooltip\", \"multipleDrawing\", \"clickToDrawText\", \"continuePolygonMsg\", \"continueLineMsg\", \"continueAngleMsg\", \"decimalPlacesInTooltips\", \"measureTooltipCssClasses\", \"onToggle\"]);\n\n      var finalClassName = className ? \"\".concat(className, \" \").concat(this.className) : this.className;\n      return _react[\"default\"].createElement(_ToggleButton[\"default\"], _extends({\n        onToggle: this.onToggle,\n        className: finalClassName\n      }, passThroughProps));\n    }\n  }]);\n\n  return MeasureButton;\n}(_react[\"default\"].Component);\n\n_defineProperty(MeasureButton, \"propTypes\", {\n  /**\n   * The className which should be added.\n   *\n   * @type {String}\n   */\n  className: _propTypes[\"default\"].string,\n\n  /**\n   * Instance of OL map this component is bound to.\n   *\n   * @type {OlMap}\n   */\n  map: _propTypes[\"default\"].instanceOf(_Map[\"default\"]).isRequired,\n\n  /**\n   * Whether line, area or angle will be measured.\n   *\n   * @type {String}\n   */\n  measureType: _propTypes[\"default\"].oneOf(['line', 'polygon', 'angle']).isRequired,\n\n  /**\n   * Name of system vector layer which will be used to draw measurement\n   * results.\n   *\n   * @type {String}\n   */\n  measureLayerName: _propTypes[\"default\"].string,\n\n  /**\n   * Fill color of the measurement feature.\n   *\n   * @type {String}\n   */\n  fillColor: _propTypes[\"default\"].string,\n\n  /**\n   * Stroke color of the measurement feature.\n   *\n   * @type {String}\n   */\n  strokeColor: _propTypes[\"default\"].string,\n\n  /**\n   * Determines if a marker with current measurement should be shown every\n   * time the user clicks while measuring a distance. Default is false.\n   *\n   * @type {Boolean}\n   */\n  showMeasureInfoOnClickedPoints: _propTypes[\"default\"].bool,\n\n  /**\n   * Determines if a tooltip with helpful information is shown next to the mouse\n   * position. Default is true.\n   *\n   * @type {Boolean}\n   */\n  showHelpTooltip: _propTypes[\"default\"].bool,\n\n  /**\n   * Used to allow / disallow multiple drawings at a time on the map.\n   * Default is false.\n   * TODO known issue: only label of the last drawn feature will be shown!\n   *\n   * @type {Boolean}\n   */\n  multipleDrawing: _propTypes[\"default\"].bool,\n\n  /**\n  * Tooltip which will be shown on map mouserover after measurement button\n  * was activated.\n  *\n  * @type {String}\n  */\n  clickToDrawText: _propTypes[\"default\"].string,\n\n  /**\n   * Tooltip which will be shown after polygon measurement button was toggled\n   * and at least one click in the map is occured.\n   *\n   * @type {String}\n   */\n  continuePolygonMsg: _propTypes[\"default\"].string,\n\n  /**\n   * Tooltip which will be shown after line measurement button was toggled\n   * and at least one click in the map is occured.\n   *\n   * @type {String}\n   */\n  continueLineMsg: _propTypes[\"default\"].string,\n\n  /**\n   * Tooltip which will be shown after angle measurement button was toggled\n   * and at least one click in the map is occured.\n   *\n   * @type {String}\n   */\n  continueAngleMsg: _propTypes[\"default\"].string,\n\n  /**\n   * How many decimal places will be allowed for the measure tooltips.\n   * Default is 2.\n   *\n   * @type {Number} decimalPlacesInTooltips\n   */\n  decimalPlacesInTooltips: _propTypes[\"default\"].number,\n\n  /**\n   * CSS classes we'll assign to the popups and tooltips from measuring.\n   * Overwrite this object to style the text of the popups / overlays, if you\n   * don't want to use default classes.\n   *\n   * @type {Object} measureTooltipCssClasses\n   */\n  measureTooltipCssClasses: _propTypes[\"default\"].shape({\n    tooltip: _propTypes[\"default\"].string,\n    tooltipDynamic: _propTypes[\"default\"].string,\n    tooltipStatic: _propTypes[\"default\"].string\n  }),\n\n  /**\n   * Whether the measure button is pressed.\n   *\n   * @type {Boolean} pressed\n   */\n  pressed: _propTypes[\"default\"].bool,\n\n  /**\n   * A custom onToogle function that will be called\n   * if button is toggled\n   *\n   * @type {Function} onToggle\n   */\n  onToggle: _propTypes[\"default\"].func\n});\n\n_defineProperty(MeasureButton, \"defaultProps\", {\n  measureLayerName: 'react-geo_measure',\n  fillColor: 'rgba(255, 0, 0, 0.5)',\n  strokeColor: 'rgba(255, 0, 0, 0.8)',\n  showMeasureInfoOnClickedPoints: false,\n  showHelpTooltip: true,\n  decimalPlacesInTooltips: 2,\n  multipleDrawing: false,\n  continuePolygonMsg: 'Click to draw area',\n  continueLineMsg: 'Click to draw line',\n  continueAngleMsg: 'Click to draw angle',\n  clickToDrawText: 'Click to measure',\n  measureTooltipCssClasses: {\n    tooltip: \"\".concat(_constants.CSS_PREFIX, \"measure-tooltip\"),\n    tooltipDynamic: \"\".concat(_constants.CSS_PREFIX, \"measure-tooltip-dynamic\"),\n    tooltipStatic: \"\".concat(_constants.CSS_PREFIX, \"measure-tooltip-static\")\n  },\n  pressed: false,\n  onToggle: function onToggle() {}\n  /**\n   * Creates the MeasureButton.\n   *\n   * @constructs MeasureButton\n   */\n\n});\n\nvar _default = MeasureButton;\nexports[\"default\"] = _default;"]},"metadata":{},"sourceType":"script"}