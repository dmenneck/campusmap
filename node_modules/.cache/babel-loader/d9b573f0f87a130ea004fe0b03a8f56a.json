{"ast":null,"code":"/**\n * @module ol/Tile\n */\nimport { inherits } from './util.js';\nimport TileState from './TileState.js';\nimport { easeIn } from './easing.js';\nimport EventTarget from './events/EventTarget.js';\nimport EventType from './events/EventType.js';\n/**\n * A function that takes an {@link module:ol/Tile} for the tile and a\n * `{string}` for the url as arguments.\n *\n * @typedef {function(module:ol/Tile, string)} LoadFunction\n * @api\n */\n\n/**\n * {@link module:ol/source/Tile~Tile} sources use a function of this type to get\n * the url that provides a tile for a given tile coordinate.\n *\n * This function takes an {@link module:ol/tilecoord~TileCoord} for the tile\n * coordinate, a `{number}` representing the pixel ratio and a\n * {@link module:ol/proj/Projection} for the projection  as arguments\n * and returns a `{string}` representing the tile URL, or undefined if no tile\n * should be requested for the passed tile coordinate.\n *\n * @typedef {function(module:ol/tilecoord~TileCoord, number,\n *           module:ol/proj/Projection): (string|undefined)} UrlFunction\n * @api\n */\n\n/**\n * @typedef {Object} Options\n * @property {number} [transition=250] A duration for tile opacity\n * transitions in milliseconds. A duration of 0 disables the opacity transition.\n * @api\n */\n\n/**\n * @classdesc\n * Base class for tiles.\n *\n * @constructor\n * @abstract\n * @extends {module:ol/events/EventTarget}\n * @param {module:ol/tilecoord~TileCoord} tileCoord Tile coordinate.\n * @param {module:ol/TileState} state State.\n * @param {module:ol/Tile~Options=} opt_options Tile options.\n */\n\nconst Tile = function (tileCoord, state, opt_options) {\n  EventTarget.call(this);\n  const options = opt_options ? opt_options : {};\n  /**\n   * @type {module:ol/tilecoord~TileCoord}\n   */\n\n  this.tileCoord = tileCoord;\n  /**\n   * @protected\n   * @type {module:ol/TileState}\n   */\n\n  this.state = state;\n  /**\n   * An \"interim\" tile for this tile. The interim tile may be used while this\n   * one is loading, for \"smooth\" transitions when changing params/dimensions\n   * on the source.\n   * @type {module:ol/Tile}\n   */\n\n  this.interimTile = null;\n  /**\n   * A key assigned to the tile. This is used by the tile source to determine\n   * if this tile can effectively be used, or if a new tile should be created\n   * and this one be used as an interim tile for this new tile.\n   * @type {string}\n   */\n\n  this.key = '';\n  /**\n   * The duration for the opacity transition.\n   * @type {number}\n   */\n\n  this.transition_ = options.transition === undefined ? 250 : options.transition;\n  /**\n   * Lookup of start times for rendering transitions.  If the start time is\n   * equal to -1, the transition is complete.\n   * @type {Object.<number, number>}\n   */\n\n  this.transitionStarts_ = {};\n};\n\ninherits(Tile, EventTarget);\n/**\n * @protected\n */\n\nTile.prototype.changed = function () {\n  this.dispatchEvent(EventType.CHANGE);\n};\n/**\n * @return {string} Key.\n */\n\n\nTile.prototype.getKey = function () {\n  return this.key + '/' + this.tileCoord;\n};\n/**\n * Get the interim tile most suitable for rendering using the chain of interim\n * tiles. This corresponds to the  most recent tile that has been loaded, if no\n * such tile exists, the original tile is returned.\n * @return {!module:ol/Tile} Best tile for rendering.\n */\n\n\nTile.prototype.getInterimTile = function () {\n  if (!this.interimTile) {\n    //empty chain\n    return this;\n  }\n\n  let tile = this.interimTile; // find the first loaded tile and return it. Since the chain is sorted in\n  // decreasing order of creation time, there is no need to search the remainder\n  // of the list (all those tiles correspond to older requests and will be\n  // cleaned up by refreshInterimChain)\n\n  do {\n    if (tile.getState() == TileState.LOADED) {\n      return tile;\n    }\n\n    tile = tile.interimTile;\n  } while (tile); // we can not find a better tile\n\n\n  return this;\n};\n/**\n * Goes through the chain of interim tiles and discards sections of the chain\n * that are no longer relevant.\n */\n\n\nTile.prototype.refreshInterimChain = function () {\n  if (!this.interimTile) {\n    return;\n  }\n\n  let tile = this.interimTile;\n  let prev = this;\n\n  do {\n    if (tile.getState() == TileState.LOADED) {\n      //we have a loaded tile, we can discard the rest of the list\n      //we would could abort any LOADING tile request\n      //older than this tile (i.e. any LOADING tile following this entry in the chain)\n      tile.interimTile = null;\n      break;\n    } else if (tile.getState() == TileState.LOADING) {\n      //keep this LOADING tile any loaded tiles later in the chain are\n      //older than this tile, so we're still interested in the request\n      prev = tile;\n    } else if (tile.getState() == TileState.IDLE) {\n      //the head of the list is the most current tile, we don't need\n      //to start any other requests for this chain\n      prev.interimTile = tile.interimTile;\n    } else {\n      prev = tile;\n    }\n\n    tile = prev.interimTile;\n  } while (tile);\n};\n/**\n * Get the tile coordinate for this tile.\n * @return {module:ol/tilecoord~TileCoord} The tile coordinate.\n * @api\n */\n\n\nTile.prototype.getTileCoord = function () {\n  return this.tileCoord;\n};\n/**\n * @return {module:ol/TileState} State.\n */\n\n\nTile.prototype.getState = function () {\n  return this.state;\n};\n/**\n * @param {module:ol/TileState} state State.\n */\n\n\nTile.prototype.setState = function (state) {\n  this.state = state;\n  this.changed();\n};\n/**\n * Load the image or retry if loading previously failed.\n * Loading is taken care of by the tile queue, and calling this method is\n * only needed for preloading or for reloading in case of an error.\n * @abstract\n * @api\n */\n\n\nTile.prototype.load = function () {};\n/**\n * Get the alpha value for rendering.\n * @param {number} id An id for the renderer.\n * @param {number} time The render frame time.\n * @return {number} A number between 0 and 1.\n */\n\n\nTile.prototype.getAlpha = function (id, time) {\n  if (!this.transition_) {\n    return 1;\n  }\n\n  let start = this.transitionStarts_[id];\n\n  if (!start) {\n    start = time;\n    this.transitionStarts_[id] = start;\n  } else if (start === -1) {\n    return 1;\n  }\n\n  const delta = time - start + 1000 / 60; // avoid rendering at 0\n\n  if (delta >= this.transition_) {\n    return 1;\n  }\n\n  return easeIn(delta / this.transition_);\n};\n/**\n * Determine if a tile is in an alpha transition.  A tile is considered in\n * transition if tile.getAlpha() has not yet been called or has been called\n * and returned 1.\n * @param {number} id An id for the renderer.\n * @return {boolean} The tile is in transition.\n */\n\n\nTile.prototype.inTransition = function (id) {\n  if (!this.transition_) {\n    return false;\n  }\n\n  return this.transitionStarts_[id] !== -1;\n};\n/**\n * Mark a transition as complete.\n * @param {number} id An id for the renderer.\n */\n\n\nTile.prototype.endTransition = function (id) {\n  if (this.transition_) {\n    this.transitionStarts_[id] = -1;\n  }\n};\n\nexport default Tile;","map":null,"metadata":{},"sourceType":"module"}