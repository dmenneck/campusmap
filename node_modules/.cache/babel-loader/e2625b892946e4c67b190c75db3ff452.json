{"ast":null,"code":"/**\n * @module ol/control/ScaleLine\n */\nimport { getChangeEventType } from '../Object.js';\nimport { assert } from '../asserts.js';\nimport Control from './Control.js';\nimport { CLASS_UNSELECTABLE } from '../css.js';\nimport { listen } from '../events.js';\nimport { getPointResolution, METERS_PER_UNIT } from '../proj.js';\nimport ProjUnits from '../proj/Units.js';\n/**\n * @type {string}\n */\n\nvar UNITS_PROP = 'units';\n/**\n * Units for the scale line. Supported values are `'degrees'`, `'imperial'`,\n * `'nautical'`, `'metric'`, `'us'`.\n * @enum {string}\n */\n\nexport var Units = {\n  DEGREES: 'degrees',\n  IMPERIAL: 'imperial',\n  NAUTICAL: 'nautical',\n  METRIC: 'metric',\n  US: 'us'\n};\n/**\n * @const\n * @type {Array<number>}\n */\n\nvar LEADING_DIGITS = [1, 2, 5];\n/**\n * @typedef {Object} Options\n * @property {string} [className='ol-scale-line'] CSS Class name.\n * @property {number} [minWidth=64] Minimum width in pixels.\n * @property {function(import(\"../MapEvent.js\").default)} [render] Function called when the control\n * should be re-rendered. This is called in a `requestAnimationFrame` callback.\n * @property {HTMLElement|string} [target] Specify a target if you want the control\n * to be rendered outside of the map's viewport.\n * @property {Units|string} [units='metric'] Units.\n */\n\n/**\n * @classdesc\n * A control displaying rough y-axis distances, calculated for the center of the\n * viewport. For conformal projections (e.g. EPSG:3857, the default view\n * projection in OpenLayers), the scale is valid for all directions.\n * No scale line will be shown when the y-axis distance of a pixel at the\n * viewport center cannot be calculated in the view projection.\n * By default the scale line will show in the bottom left portion of the map,\n * but this can be changed by using the css selector `.ol-scale-line`.\n *\n * @api\n */\n\nvar ScaleLine =\n/*@__PURE__*/\nfunction (Control) {\n  function ScaleLine(opt_options) {\n    var options = opt_options ? opt_options : {};\n    var className = options.className !== undefined ? options.className : 'ol-scale-line';\n    Control.call(this, {\n      element: document.createElement('div'),\n      render: options.render || render,\n      target: options.target\n    });\n    /**\n     * @private\n     * @type {HTMLElement}\n     */\n\n    this.innerElement_ = document.createElement('div');\n    this.innerElement_.className = className + '-inner';\n    this.element.className = className + ' ' + CLASS_UNSELECTABLE;\n    this.element.appendChild(this.innerElement_);\n    /**\n     * @private\n     * @type {?import(\"../View.js\").State}\n     */\n\n    this.viewState_ = null;\n    /**\n     * @private\n     * @type {number}\n     */\n\n    this.minWidth_ = options.minWidth !== undefined ? options.minWidth : 64;\n    /**\n     * @private\n     * @type {boolean}\n     */\n\n    this.renderedVisible_ = false;\n    /**\n     * @private\n     * @type {number|undefined}\n     */\n\n    this.renderedWidth_ = undefined;\n    /**\n     * @private\n     * @type {string}\n     */\n\n    this.renderedHTML_ = '';\n    listen(this, getChangeEventType(UNITS_PROP), this.handleUnitsChanged_, this);\n    this.setUnits(\n    /** @type {Units} */\n    options.units || Units.METRIC);\n  }\n\n  if (Control) ScaleLine.__proto__ = Control;\n  ScaleLine.prototype = Object.create(Control && Control.prototype);\n  ScaleLine.prototype.constructor = ScaleLine;\n  /**\n   * Return the units to use in the scale line.\n   * @return {Units} The units\n   * to use in the scale line.\n   * @observable\n   * @api\n   */\n\n  ScaleLine.prototype.getUnits = function getUnits() {\n    return this.get(UNITS_PROP);\n  };\n  /**\n   * @private\n   */\n\n\n  ScaleLine.prototype.handleUnitsChanged_ = function handleUnitsChanged_() {\n    this.updateElement_();\n  };\n  /**\n   * Set the units to use in the scale line.\n   * @param {Units} units The units to use in the scale line.\n   * @observable\n   * @api\n   */\n\n\n  ScaleLine.prototype.setUnits = function setUnits(units) {\n    this.set(UNITS_PROP, units);\n  };\n  /**\n   * @private\n   */\n\n\n  ScaleLine.prototype.updateElement_ = function updateElement_() {\n    var viewState = this.viewState_;\n\n    if (!viewState) {\n      if (this.renderedVisible_) {\n        this.element.style.display = 'none';\n        this.renderedVisible_ = false;\n      }\n\n      return;\n    }\n\n    var center = viewState.center;\n    var projection = viewState.projection;\n    var units = this.getUnits();\n    var pointResolutionUnits = units == Units.DEGREES ? ProjUnits.DEGREES : ProjUnits.METERS;\n    var pointResolution = getPointResolution(projection, viewState.resolution, center, pointResolutionUnits);\n\n    if (projection.getUnits() != ProjUnits.DEGREES && projection.getMetersPerUnit() && pointResolutionUnits == ProjUnits.METERS) {\n      pointResolution *= projection.getMetersPerUnit();\n    }\n\n    var nominalCount = this.minWidth_ * pointResolution;\n    var suffix = '';\n\n    if (units == Units.DEGREES) {\n      var metersPerDegree = METERS_PER_UNIT[ProjUnits.DEGREES];\n\n      if (projection.getUnits() == ProjUnits.DEGREES) {\n        nominalCount *= metersPerDegree;\n      } else {\n        pointResolution /= metersPerDegree;\n      }\n\n      if (nominalCount < metersPerDegree / 60) {\n        suffix = '\\u2033'; // seconds\n\n        pointResolution *= 3600;\n      } else if (nominalCount < metersPerDegree) {\n        suffix = '\\u2032'; // minutes\n\n        pointResolution *= 60;\n      } else {\n        suffix = '\\u00b0'; // degrees\n      }\n    } else if (units == Units.IMPERIAL) {\n      if (nominalCount < 0.9144) {\n        suffix = 'in';\n        pointResolution /= 0.0254;\n      } else if (nominalCount < 1609.344) {\n        suffix = 'ft';\n        pointResolution /= 0.3048;\n      } else {\n        suffix = 'mi';\n        pointResolution /= 1609.344;\n      }\n    } else if (units == Units.NAUTICAL) {\n      pointResolution /= 1852;\n      suffix = 'nm';\n    } else if (units == Units.METRIC) {\n      if (nominalCount < 0.001) {\n        suffix = 'Î¼m';\n        pointResolution *= 1000000;\n      } else if (nominalCount < 1) {\n        suffix = 'mm';\n        pointResolution *= 1000;\n      } else if (nominalCount < 1000) {\n        suffix = 'm';\n      } else {\n        suffix = 'km';\n        pointResolution /= 1000;\n      }\n    } else if (units == Units.US) {\n      if (nominalCount < 0.9144) {\n        suffix = 'in';\n        pointResolution *= 39.37;\n      } else if (nominalCount < 1609.344) {\n        suffix = 'ft';\n        pointResolution /= 0.30480061;\n      } else {\n        suffix = 'mi';\n        pointResolution /= 1609.3472;\n      }\n    } else {\n      assert(false, 33); // Invalid units\n    }\n\n    var i = 3 * Math.floor(Math.log(this.minWidth_ * pointResolution) / Math.log(10));\n    var count, width;\n\n    while (true) {\n      count = LEADING_DIGITS[(i % 3 + 3) % 3] * Math.pow(10, Math.floor(i / 3));\n      width = Math.round(count / pointResolution);\n\n      if (isNaN(width)) {\n        this.element.style.display = 'none';\n        this.renderedVisible_ = false;\n        return;\n      } else if (width >= this.minWidth_) {\n        break;\n      }\n\n      ++i;\n    }\n\n    var html = count + ' ' + suffix;\n\n    if (this.renderedHTML_ != html) {\n      this.innerElement_.innerHTML = html;\n      this.renderedHTML_ = html;\n    }\n\n    if (this.renderedWidth_ != width) {\n      this.innerElement_.style.width = width + 'px';\n      this.renderedWidth_ = width;\n    }\n\n    if (!this.renderedVisible_) {\n      this.element.style.display = '';\n      this.renderedVisible_ = true;\n    }\n  };\n\n  return ScaleLine;\n}(Control);\n/**\n * Update the scale line element.\n * @param {import(\"../MapEvent.js\").default} mapEvent Map event.\n * @this {ScaleLine}\n * @api\n */\n\n\nexport function render(mapEvent) {\n  var frameState = mapEvent.frameState;\n\n  if (!frameState) {\n    this.viewState_ = null;\n  } else {\n    this.viewState_ = frameState.viewState;\n  }\n\n  this.updateElement_();\n}\nexport default ScaleLine;","map":{"version":3,"sources":["../../../src/ol/control/ScaleLine.js"],"names":["const","super","let"],"mappings":"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","sourcesContent":["/**\n * @module ol/control/ScaleLine\n */\nimport {getChangeEventType} from '../Object.js';\nimport {assert} from '../asserts.js';\nimport Control from './Control.js';\nimport {CLASS_UNSELECTABLE} from '../css.js';\nimport {listen} from '../events.js';\nimport {getPointResolution, METERS_PER_UNIT} from '../proj.js';\nimport ProjUnits from '../proj/Units.js';\n\n\n/**\n * @type {string}\n */\nconst UNITS_PROP = 'units';\n\n/**\n * Units for the scale line. Supported values are `'degrees'`, `'imperial'`,\n * `'nautical'`, `'metric'`, `'us'`.\n * @enum {string}\n */\nexport const Units = {\n  DEGREES: 'degrees',\n  IMPERIAL: 'imperial',\n  NAUTICAL: 'nautical',\n  METRIC: 'metric',\n  US: 'us'\n};\n\n\n/**\n * @const\n * @type {Array<number>}\n */\nconst LEADING_DIGITS = [1, 2, 5];\n\n\n/**\n * @typedef {Object} Options\n * @property {string} [className='ol-scale-line'] CSS Class name.\n * @property {number} [minWidth=64] Minimum width in pixels.\n * @property {function(import(\"../MapEvent.js\").default)} [render] Function called when the control\n * should be re-rendered. This is called in a `requestAnimationFrame` callback.\n * @property {HTMLElement|string} [target] Specify a target if you want the control\n * to be rendered outside of the map's viewport.\n * @property {Units|string} [units='metric'] Units.\n */\n\n\n/**\n * @classdesc\n * A control displaying rough y-axis distances, calculated for the center of the\n * viewport. For conformal projections (e.g. EPSG:3857, the default view\n * projection in OpenLayers), the scale is valid for all directions.\n * No scale line will be shown when the y-axis distance of a pixel at the\n * viewport center cannot be calculated in the view projection.\n * By default the scale line will show in the bottom left portion of the map,\n * but this can be changed by using the css selector `.ol-scale-line`.\n *\n * @api\n */\nclass ScaleLine extends Control {\n\n  /**\n   * @param {Options=} opt_options Scale line options.\n   */\n  constructor(opt_options) {\n\n    const options = opt_options ? opt_options : {};\n\n    const className = options.className !== undefined ? options.className : 'ol-scale-line';\n\n    super({\n      element: document.createElement('div'),\n      render: options.render || render,\n      target: options.target\n    });\n\n    /**\n     * @private\n     * @type {HTMLElement}\n     */\n    this.innerElement_ = document.createElement('div');\n    this.innerElement_.className = className + '-inner';\n\n    this.element.className = className + ' ' + CLASS_UNSELECTABLE;\n    this.element.appendChild(this.innerElement_);\n\n    /**\n     * @private\n     * @type {?import(\"../View.js\").State}\n     */\n    this.viewState_ = null;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.minWidth_ = options.minWidth !== undefined ? options.minWidth : 64;\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.renderedVisible_ = false;\n\n    /**\n     * @private\n     * @type {number|undefined}\n     */\n    this.renderedWidth_ = undefined;\n\n    /**\n     * @private\n     * @type {string}\n     */\n    this.renderedHTML_ = '';\n\n    listen(\n      this, getChangeEventType(UNITS_PROP),\n      this.handleUnitsChanged_, this);\n\n    this.setUnits(/** @type {Units} */ (options.units) || Units.METRIC);\n\n  }\n\n  /**\n   * Return the units to use in the scale line.\n   * @return {Units} The units\n   * to use in the scale line.\n   * @observable\n   * @api\n   */\n  getUnits() {\n    return this.get(UNITS_PROP);\n  }\n\n  /**\n   * @private\n   */\n  handleUnitsChanged_() {\n    this.updateElement_();\n  }\n\n  /**\n   * Set the units to use in the scale line.\n   * @param {Units} units The units to use in the scale line.\n   * @observable\n   * @api\n   */\n  setUnits(units) {\n    this.set(UNITS_PROP, units);\n  }\n\n  /**\n   * @private\n   */\n  updateElement_() {\n    const viewState = this.viewState_;\n\n    if (!viewState) {\n      if (this.renderedVisible_) {\n        this.element.style.display = 'none';\n        this.renderedVisible_ = false;\n      }\n      return;\n    }\n\n    const center = viewState.center;\n    const projection = viewState.projection;\n    const units = this.getUnits();\n    const pointResolutionUnits = units == Units.DEGREES ?\n      ProjUnits.DEGREES :\n      ProjUnits.METERS;\n    let pointResolution =\n        getPointResolution(projection, viewState.resolution, center, pointResolutionUnits);\n    if (projection.getUnits() != ProjUnits.DEGREES && projection.getMetersPerUnit()\n      && pointResolutionUnits == ProjUnits.METERS) {\n      pointResolution *= projection.getMetersPerUnit();\n    }\n\n    let nominalCount = this.minWidth_ * pointResolution;\n    let suffix = '';\n    if (units == Units.DEGREES) {\n      const metersPerDegree = METERS_PER_UNIT[ProjUnits.DEGREES];\n      if (projection.getUnits() == ProjUnits.DEGREES) {\n        nominalCount *= metersPerDegree;\n      } else {\n        pointResolution /= metersPerDegree;\n      }\n      if (nominalCount < metersPerDegree / 60) {\n        suffix = '\\u2033'; // seconds\n        pointResolution *= 3600;\n      } else if (nominalCount < metersPerDegree) {\n        suffix = '\\u2032'; // minutes\n        pointResolution *= 60;\n      } else {\n        suffix = '\\u00b0'; // degrees\n      }\n    } else if (units == Units.IMPERIAL) {\n      if (nominalCount < 0.9144) {\n        suffix = 'in';\n        pointResolution /= 0.0254;\n      } else if (nominalCount < 1609.344) {\n        suffix = 'ft';\n        pointResolution /= 0.3048;\n      } else {\n        suffix = 'mi';\n        pointResolution /= 1609.344;\n      }\n    } else if (units == Units.NAUTICAL) {\n      pointResolution /= 1852;\n      suffix = 'nm';\n    } else if (units == Units.METRIC) {\n      if (nominalCount < 0.001) {\n        suffix = 'Î¼m';\n        pointResolution *= 1000000;\n      } else if (nominalCount < 1) {\n        suffix = 'mm';\n        pointResolution *= 1000;\n      } else if (nominalCount < 1000) {\n        suffix = 'm';\n      } else {\n        suffix = 'km';\n        pointResolution /= 1000;\n      }\n    } else if (units == Units.US) {\n      if (nominalCount < 0.9144) {\n        suffix = 'in';\n        pointResolution *= 39.37;\n      } else if (nominalCount < 1609.344) {\n        suffix = 'ft';\n        pointResolution /= 0.30480061;\n      } else {\n        suffix = 'mi';\n        pointResolution /= 1609.3472;\n      }\n    } else {\n      assert(false, 33); // Invalid units\n    }\n\n    let i = 3 * Math.floor(\n      Math.log(this.minWidth_ * pointResolution) / Math.log(10));\n    let count, width;\n    while (true) {\n      count = LEADING_DIGITS[((i % 3) + 3) % 3] *\n          Math.pow(10, Math.floor(i / 3));\n      width = Math.round(count / pointResolution);\n      if (isNaN(width)) {\n        this.element.style.display = 'none';\n        this.renderedVisible_ = false;\n        return;\n      } else if (width >= this.minWidth_) {\n        break;\n      }\n      ++i;\n    }\n\n    const html = count + ' ' + suffix;\n    if (this.renderedHTML_ != html) {\n      this.innerElement_.innerHTML = html;\n      this.renderedHTML_ = html;\n    }\n\n    if (this.renderedWidth_ != width) {\n      this.innerElement_.style.width = width + 'px';\n      this.renderedWidth_ = width;\n    }\n\n    if (!this.renderedVisible_) {\n      this.element.style.display = '';\n      this.renderedVisible_ = true;\n    }\n\n  }\n}\n\n\n/**\n * Update the scale line element.\n * @param {import(\"../MapEvent.js\").default} mapEvent Map event.\n * @this {ScaleLine}\n * @api\n */\nexport function render(mapEvent) {\n  const frameState = mapEvent.frameState;\n  if (!frameState) {\n    this.viewState_ = null;\n  } else {\n    this.viewState_ = frameState.viewState;\n  }\n  this.updateElement_();\n}\n\n\nexport default ScaleLine;\n"]},"metadata":{},"sourceType":"module"}