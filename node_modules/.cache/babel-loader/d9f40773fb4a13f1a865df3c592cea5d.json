{"ast":null,"code":"/**\n * @module ol/source/TileImage\n */\nimport { ENABLE_RASTER_REPROJECTION } from '../reproj/common.js';\nimport { getUid } from '../util.js';\nimport ImageTile from '../ImageTile.js';\nimport TileCache from '../TileCache.js';\nimport TileState from '../TileState.js';\nimport { listen } from '../events.js';\nimport EventType from '../events/EventType.js';\nimport { equivalent, get as getProjection } from '../proj.js';\nimport ReprojTile from '../reproj/Tile.js';\nimport UrlTile from './UrlTile.js';\nimport { getKey, getKeyZXY } from '../tilecoord.js';\nimport { getForProjection as getTileGridForProjection } from '../tilegrid.js';\n/**\n * @typedef {Object} Options\n * @property {import(\"./Source.js\").AttributionLike} [attributions] Attributions.\n * @property {boolean} [attributionsCollapsible=true] Attributions are collapsible.\n * @property {number} [cacheSize=2048] Cache size.\n * @property {null|string} [crossOrigin] The `crossOrigin` attribute for loaded images.  Note that\n * you must provide a `crossOrigin` value if you are using the WebGL renderer or if you want to\n * access pixel data with the Canvas renderer.  See\n * https://developer.mozilla.org/en-US/docs/Web/HTML/CORS_enabled_image for more detail.\n * @property {boolean} [opaque=true] Whether the layer is opaque.\n * @property {import(\"../proj.js\").ProjectionLike} projection Projection.\n * @property {number} [reprojectionErrorThreshold=0.5] Maximum allowed reprojection error (in pixels).\n * Higher values can increase reprojection performance, but decrease precision.\n * @property {import(\"./State.js\").default} [state] Source state.\n * @property {typeof import(\"../ImageTile.js\").default} [tileClass] Class used to instantiate image tiles.\n * Default is {@link module:ol/ImageTile~ImageTile}.\n * @property {import(\"../tilegrid/TileGrid.js\").default} [tileGrid] Tile grid.\n * @property {import(\"../Tile.js\").LoadFunction} [tileLoadFunction] Optional function to load a tile given a URL. The default is\n * ```js\n * function(imageTile, src) {\n *   imageTile.getImage().src = src;\n * };\n * ```\n * @property {number} [tilePixelRatio=1] The pixel ratio used by the tile service. For example, if the tile\n * service advertizes 256px by 256px tiles but actually sends 512px\n * by 512px images (for retina/hidpi devices) then `tilePixelRatio`\n * should be set to `2`.\n * @property {import(\"../Tile.js\").UrlFunction} [tileUrlFunction] Optional function to get tile URL given a tile coordinate and the projection.\n * @property {string} [url] URL template. Must include `{x}`, `{y}` or `{-y}`, and `{z}` placeholders.\n * A `{?-?}` template pattern, for example `subdomain{a-f}.domain.com`, may be\n * used instead of defining each one separately in the `urls` option.\n * @property {Array<string>} [urls] An array of URL templates.\n * @property {boolean} [wrapX] Whether to wrap the world horizontally. The default, is to\n * request out-of-bounds tiles from the server. When set to `false`, only one\n * world will be rendered. When set to `true`, tiles will be requested for one\n * world only, but they will be wrapped horizontally to render multiple worlds.\n * @property {number} [transition] Duration of the opacity transition for rendering.\n * To disable the opacity transition, pass `transition: 0`.\n * @property {string} [key] Optional tile key for proper cache fetching\n */\n\n/**\n * @classdesc\n * Base class for sources providing images divided into a tile grid.\n *\n * @fires import(\"./Tile.js\").TileSourceEvent\n * @api\n */\n\nvar TileImage =\n/*@__PURE__*/\nfunction (UrlTile) {\n  function TileImage(options) {\n    UrlTile.call(this, {\n      attributions: options.attributions,\n      cacheSize: options.cacheSize,\n      opaque: options.opaque,\n      projection: options.projection,\n      state: options.state,\n      tileGrid: options.tileGrid,\n      tileLoadFunction: options.tileLoadFunction ? options.tileLoadFunction : defaultTileLoadFunction,\n      tilePixelRatio: options.tilePixelRatio,\n      tileUrlFunction: options.tileUrlFunction,\n      url: options.url,\n      urls: options.urls,\n      wrapX: options.wrapX,\n      transition: options.transition,\n      key: options.key,\n      attributionsCollapsible: options.attributionsCollapsible\n    });\n    /**\n     * @protected\n     * @type {?string}\n     */\n\n    this.crossOrigin = options.crossOrigin !== undefined ? options.crossOrigin : null;\n    /**\n     * @protected\n     * @type {typeof ImageTile}\n     */\n\n    this.tileClass = options.tileClass !== undefined ? options.tileClass : ImageTile;\n    /**\n     * @protected\n     * @type {!Object<string, TileCache>}\n     */\n\n    this.tileCacheForProjection = {};\n    /**\n     * @protected\n     * @type {!Object<string, import(\"../tilegrid/TileGrid.js\").default>}\n     */\n\n    this.tileGridForProjection = {};\n    /**\n     * @private\n     * @type {number|undefined}\n     */\n\n    this.reprojectionErrorThreshold_ = options.reprojectionErrorThreshold;\n    /**\n     * @private\n     * @type {boolean}\n     */\n\n    this.renderReprojectionEdges_ = false;\n  }\n\n  if (UrlTile) TileImage.__proto__ = UrlTile;\n  TileImage.prototype = Object.create(UrlTile && UrlTile.prototype);\n  TileImage.prototype.constructor = TileImage;\n  /**\n   * @inheritDoc\n   */\n\n  TileImage.prototype.canExpireCache = function canExpireCache() {\n    if (!ENABLE_RASTER_REPROJECTION) {\n      return UrlTile.prototype.canExpireCache.call(this);\n    }\n\n    if (this.tileCache.canExpireCache()) {\n      return true;\n    } else {\n      for (var key in this.tileCacheForProjection) {\n        if (this.tileCacheForProjection[key].canExpireCache()) {\n          return true;\n        }\n      }\n    }\n\n    return false;\n  };\n  /**\n   * @inheritDoc\n   */\n\n\n  TileImage.prototype.expireCache = function expireCache(projection, usedTiles) {\n    if (!ENABLE_RASTER_REPROJECTION) {\n      UrlTile.prototype.expireCache.call(this, projection, usedTiles);\n      return;\n    }\n\n    var usedTileCache = this.getTileCacheForProjection(projection);\n    this.tileCache.expireCache(this.tileCache == usedTileCache ? usedTiles : {});\n\n    for (var id in this.tileCacheForProjection) {\n      var tileCache = this.tileCacheForProjection[id];\n      tileCache.expireCache(tileCache == usedTileCache ? usedTiles : {});\n    }\n  };\n  /**\n   * @inheritDoc\n   */\n\n\n  TileImage.prototype.getGutterForProjection = function getGutterForProjection(projection) {\n    if (ENABLE_RASTER_REPROJECTION && this.getProjection() && projection && !equivalent(this.getProjection(), projection)) {\n      return 0;\n    } else {\n      return this.getGutter();\n    }\n  };\n  /**\n   * @return {number} Gutter.\n   */\n\n\n  TileImage.prototype.getGutter = function getGutter() {\n    return 0;\n  };\n  /**\n   * @inheritDoc\n   */\n\n\n  TileImage.prototype.getOpaque = function getOpaque(projection) {\n    if (ENABLE_RASTER_REPROJECTION && this.getProjection() && projection && !equivalent(this.getProjection(), projection)) {\n      return false;\n    } else {\n      return UrlTile.prototype.getOpaque.call(this, projection);\n    }\n  };\n  /**\n   * @inheritDoc\n   */\n\n\n  TileImage.prototype.getTileGridForProjection = function getTileGridForProjection$1(projection) {\n    if (!ENABLE_RASTER_REPROJECTION) {\n      return UrlTile.prototype.getTileGridForProjection.call(this, projection);\n    }\n\n    var thisProj = this.getProjection();\n\n    if (this.tileGrid && (!thisProj || equivalent(thisProj, projection))) {\n      return this.tileGrid;\n    } else {\n      var projKey = getUid(projection);\n\n      if (!(projKey in this.tileGridForProjection)) {\n        this.tileGridForProjection[projKey] = getTileGridForProjection(projection);\n      }\n\n      return (\n        /** @type {!import(\"../tilegrid/TileGrid.js\").default} */\n        this.tileGridForProjection[projKey]\n      );\n    }\n  };\n  /**\n   * @inheritDoc\n   */\n\n\n  TileImage.prototype.getTileCacheForProjection = function getTileCacheForProjection(projection) {\n    if (!ENABLE_RASTER_REPROJECTION) {\n      return UrlTile.prototype.getTileCacheForProjection.call(this, projection);\n    }\n\n    var thisProj = this.getProjection();\n\n    if (!thisProj || equivalent(thisProj, projection)) {\n      return this.tileCache;\n    } else {\n      var projKey = getUid(projection);\n\n      if (!(projKey in this.tileCacheForProjection)) {\n        this.tileCacheForProjection[projKey] = new TileCache(this.tileCache.highWaterMark);\n      }\n\n      return this.tileCacheForProjection[projKey];\n    }\n  };\n  /**\n   * @param {number} z Tile coordinate z.\n   * @param {number} x Tile coordinate x.\n   * @param {number} y Tile coordinate y.\n   * @param {number} pixelRatio Pixel ratio.\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   * @param {string} key The key set on the tile.\n   * @return {!import(\"../Tile.js\").default} Tile.\n   * @private\n   */\n\n\n  TileImage.prototype.createTile_ = function createTile_(z, x, y, pixelRatio, projection, key) {\n    var tileCoord = [z, x, y];\n    var urlTileCoord = this.getTileCoordForTileUrlFunction(tileCoord, projection);\n    var tileUrl = urlTileCoord ? this.tileUrlFunction(urlTileCoord, pixelRatio, projection) : undefined;\n    var tile = new this.tileClass(tileCoord, tileUrl !== undefined ? TileState.IDLE : TileState.EMPTY, tileUrl !== undefined ? tileUrl : '', this.crossOrigin, this.tileLoadFunction, this.tileOptions);\n    tile.key = key;\n    listen(tile, EventType.CHANGE, this.handleTileChange, this);\n    return tile;\n  };\n  /**\n   * @inheritDoc\n   */\n\n\n  TileImage.prototype.getTile = function getTile(z, x, y, pixelRatio, projection) {\n    var sourceProjection =\n    /** @type {!import(\"../proj/Projection.js\").default} */\n    this.getProjection();\n\n    if (!ENABLE_RASTER_REPROJECTION || !sourceProjection || !projection || equivalent(sourceProjection, projection)) {\n      return this.getTileInternal(z, x, y, pixelRatio, sourceProjection || projection);\n    } else {\n      var cache = this.getTileCacheForProjection(projection);\n      var tileCoord = [z, x, y];\n      var tile;\n      var tileCoordKey = getKey(tileCoord);\n\n      if (cache.containsKey(tileCoordKey)) {\n        tile =\n        /** @type {!import(\"../Tile.js\").default} */\n        cache.get(tileCoordKey);\n      }\n\n      var key = this.getKey();\n\n      if (tile && tile.key == key) {\n        return tile;\n      } else {\n        var sourceTileGrid = this.getTileGridForProjection(sourceProjection);\n        var targetTileGrid = this.getTileGridForProjection(projection);\n        var wrappedTileCoord = this.getTileCoordForTileUrlFunction(tileCoord, projection);\n        var newTile = new ReprojTile(sourceProjection, sourceTileGrid, projection, targetTileGrid, tileCoord, wrappedTileCoord, this.getTilePixelRatio(pixelRatio), this.getGutter(), function (z, x, y, pixelRatio) {\n          return this.getTileInternal(z, x, y, pixelRatio, sourceProjection);\n        }.bind(this), this.reprojectionErrorThreshold_, this.renderReprojectionEdges_);\n        newTile.key = key;\n\n        if (tile) {\n          newTile.interimTile = tile;\n          newTile.refreshInterimChain();\n          cache.replace(tileCoordKey, newTile);\n        } else {\n          cache.set(tileCoordKey, newTile);\n        }\n\n        return newTile;\n      }\n    }\n  };\n  /**\n   * @param {number} z Tile coordinate z.\n   * @param {number} x Tile coordinate x.\n   * @param {number} y Tile coordinate y.\n   * @param {number} pixelRatio Pixel ratio.\n   * @param {!import(\"../proj/Projection.js\").default} projection Projection.\n   * @return {!import(\"../Tile.js\").default} Tile.\n   * @protected\n   */\n\n\n  TileImage.prototype.getTileInternal = function getTileInternal(z, x, y, pixelRatio, projection) {\n    var tile = null;\n    var tileCoordKey = getKeyZXY(z, x, y);\n    var key = this.getKey();\n\n    if (!this.tileCache.containsKey(tileCoordKey)) {\n      tile = this.createTile_(z, x, y, pixelRatio, projection, key);\n      this.tileCache.set(tileCoordKey, tile);\n    } else {\n      tile = this.tileCache.get(tileCoordKey);\n\n      if (tile.key != key) {\n        // The source's params changed. If the tile has an interim tile and if we\n        // can use it then we use it. Otherwise we create a new tile.  In both\n        // cases we attempt to assign an interim tile to the new tile.\n        var interimTile = tile;\n        tile = this.createTile_(z, x, y, pixelRatio, projection, key); //make the new tile the head of the list,\n\n        if (interimTile.getState() == TileState.IDLE) {\n          //the old tile hasn't begun loading yet, and is now outdated, so we can simply discard it\n          tile.interimTile = interimTile.interimTile;\n        } else {\n          tile.interimTile = interimTile;\n        }\n\n        tile.refreshInterimChain();\n        this.tileCache.replace(tileCoordKey, tile);\n      }\n    }\n\n    return tile;\n  };\n  /**\n   * Sets whether to render reprojection edges or not (usually for debugging).\n   * @param {boolean} render Render the edges.\n   * @api\n   */\n\n\n  TileImage.prototype.setRenderReprojectionEdges = function setRenderReprojectionEdges(render) {\n    if (!ENABLE_RASTER_REPROJECTION || this.renderReprojectionEdges_ == render) {\n      return;\n    }\n\n    this.renderReprojectionEdges_ = render;\n\n    for (var id in this.tileCacheForProjection) {\n      this.tileCacheForProjection[id].clear();\n    }\n\n    this.changed();\n  };\n  /**\n   * Sets the tile grid to use when reprojecting the tiles to the given\n   * projection instead of the default tile grid for the projection.\n   *\n   * This can be useful when the default tile grid cannot be created\n   * (e.g. projection has no extent defined) or\n   * for optimization reasons (custom tile size, resolutions, ...).\n   *\n   * @param {import(\"../proj.js\").ProjectionLike} projection Projection.\n   * @param {import(\"../tilegrid/TileGrid.js\").default} tilegrid Tile grid to use for the projection.\n   * @api\n   */\n\n\n  TileImage.prototype.setTileGridForProjection = function setTileGridForProjection(projection, tilegrid) {\n    if (ENABLE_RASTER_REPROJECTION) {\n      var proj = getProjection(projection);\n\n      if (proj) {\n        var projKey = getUid(proj);\n\n        if (!(projKey in this.tileGridForProjection)) {\n          this.tileGridForProjection[projKey] = tilegrid;\n        }\n      }\n    }\n  };\n\n  return TileImage;\n}(UrlTile);\n/**\n * @param {ImageTile} imageTile Image tile.\n * @param {string} src Source.\n */\n\n\nfunction defaultTileLoadFunction(imageTile, src) {\n  /** @type {HTMLImageElement|HTMLVideoElement} */\n  imageTile.getImage().src = src;\n}\n\nexport default TileImage;","map":{"version":3,"sources":["../../../src/ol/source/TileImage.js"],"names":["super","const","let"],"mappings":"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","sourcesContent":["/**\n * @module ol/source/TileImage\n */\nimport {ENABLE_RASTER_REPROJECTION} from '../reproj/common.js';\nimport {getUid} from '../util.js';\nimport ImageTile from '../ImageTile.js';\nimport TileCache from '../TileCache.js';\nimport TileState from '../TileState.js';\nimport {listen} from '../events.js';\nimport EventType from '../events/EventType.js';\nimport {equivalent, get as getProjection} from '../proj.js';\nimport ReprojTile from '../reproj/Tile.js';\nimport UrlTile from './UrlTile.js';\nimport {getKey, getKeyZXY} from '../tilecoord.js';\nimport {getForProjection as getTileGridForProjection} from '../tilegrid.js';\n\n/**\n * @typedef {Object} Options\n * @property {import(\"./Source.js\").AttributionLike} [attributions] Attributions.\n * @property {boolean} [attributionsCollapsible=true] Attributions are collapsible.\n * @property {number} [cacheSize=2048] Cache size.\n * @property {null|string} [crossOrigin] The `crossOrigin` attribute for loaded images.  Note that\n * you must provide a `crossOrigin` value if you are using the WebGL renderer or if you want to\n * access pixel data with the Canvas renderer.  See\n * https://developer.mozilla.org/en-US/docs/Web/HTML/CORS_enabled_image for more detail.\n * @property {boolean} [opaque=true] Whether the layer is opaque.\n * @property {import(\"../proj.js\").ProjectionLike} projection Projection.\n * @property {number} [reprojectionErrorThreshold=0.5] Maximum allowed reprojection error (in pixels).\n * Higher values can increase reprojection performance, but decrease precision.\n * @property {import(\"./State.js\").default} [state] Source state.\n * @property {typeof import(\"../ImageTile.js\").default} [tileClass] Class used to instantiate image tiles.\n * Default is {@link module:ol/ImageTile~ImageTile}.\n * @property {import(\"../tilegrid/TileGrid.js\").default} [tileGrid] Tile grid.\n * @property {import(\"../Tile.js\").LoadFunction} [tileLoadFunction] Optional function to load a tile given a URL. The default is\n * ```js\n * function(imageTile, src) {\n *   imageTile.getImage().src = src;\n * };\n * ```\n * @property {number} [tilePixelRatio=1] The pixel ratio used by the tile service. For example, if the tile\n * service advertizes 256px by 256px tiles but actually sends 512px\n * by 512px images (for retina/hidpi devices) then `tilePixelRatio`\n * should be set to `2`.\n * @property {import(\"../Tile.js\").UrlFunction} [tileUrlFunction] Optional function to get tile URL given a tile coordinate and the projection.\n * @property {string} [url] URL template. Must include `{x}`, `{y}` or `{-y}`, and `{z}` placeholders.\n * A `{?-?}` template pattern, for example `subdomain{a-f}.domain.com`, may be\n * used instead of defining each one separately in the `urls` option.\n * @property {Array<string>} [urls] An array of URL templates.\n * @property {boolean} [wrapX] Whether to wrap the world horizontally. The default, is to\n * request out-of-bounds tiles from the server. When set to `false`, only one\n * world will be rendered. When set to `true`, tiles will be requested for one\n * world only, but they will be wrapped horizontally to render multiple worlds.\n * @property {number} [transition] Duration of the opacity transition for rendering.\n * To disable the opacity transition, pass `transition: 0`.\n * @property {string} [key] Optional tile key for proper cache fetching\n */\n\n\n/**\n * @classdesc\n * Base class for sources providing images divided into a tile grid.\n *\n * @fires import(\"./Tile.js\").TileSourceEvent\n * @api\n */\nclass TileImage extends UrlTile {\n  /**\n   * @param {!Options} options Image tile options.\n   */\n  constructor(options) {\n\n    super({\n      attributions: options.attributions,\n      cacheSize: options.cacheSize,\n      opaque: options.opaque,\n      projection: options.projection,\n      state: options.state,\n      tileGrid: options.tileGrid,\n      tileLoadFunction: options.tileLoadFunction ?\n        options.tileLoadFunction : defaultTileLoadFunction,\n      tilePixelRatio: options.tilePixelRatio,\n      tileUrlFunction: options.tileUrlFunction,\n      url: options.url,\n      urls: options.urls,\n      wrapX: options.wrapX,\n      transition: options.transition,\n      key: options.key,\n      attributionsCollapsible: options.attributionsCollapsible\n    });\n\n    /**\n     * @protected\n     * @type {?string}\n     */\n    this.crossOrigin =\n        options.crossOrigin !== undefined ? options.crossOrigin : null;\n\n    /**\n     * @protected\n     * @type {typeof ImageTile}\n     */\n    this.tileClass = options.tileClass !== undefined ?\n      options.tileClass : ImageTile;\n\n    /**\n     * @protected\n     * @type {!Object<string, TileCache>}\n     */\n    this.tileCacheForProjection = {};\n\n    /**\n     * @protected\n     * @type {!Object<string, import(\"../tilegrid/TileGrid.js\").default>}\n     */\n    this.tileGridForProjection = {};\n\n    /**\n     * @private\n     * @type {number|undefined}\n     */\n    this.reprojectionErrorThreshold_ = options.reprojectionErrorThreshold;\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.renderReprojectionEdges_ = false;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  canExpireCache() {\n    if (!ENABLE_RASTER_REPROJECTION) {\n      return super.canExpireCache();\n    }\n    if (this.tileCache.canExpireCache()) {\n      return true;\n    } else {\n      for (const key in this.tileCacheForProjection) {\n        if (this.tileCacheForProjection[key].canExpireCache()) {\n          return true;\n        }\n      }\n    }\n    return false;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  expireCache(projection, usedTiles) {\n    if (!ENABLE_RASTER_REPROJECTION) {\n      super.expireCache(projection, usedTiles);\n      return;\n    }\n    const usedTileCache = this.getTileCacheForProjection(projection);\n\n    this.tileCache.expireCache(this.tileCache == usedTileCache ? usedTiles : {});\n    for (const id in this.tileCacheForProjection) {\n      const tileCache = this.tileCacheForProjection[id];\n      tileCache.expireCache(tileCache == usedTileCache ? usedTiles : {});\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  getGutterForProjection(projection) {\n    if (ENABLE_RASTER_REPROJECTION &&\n        this.getProjection() && projection && !equivalent(this.getProjection(), projection)) {\n      return 0;\n    } else {\n      return this.getGutter();\n    }\n  }\n\n  /**\n   * @return {number} Gutter.\n   */\n  getGutter() {\n    return 0;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  getOpaque(projection) {\n    if (ENABLE_RASTER_REPROJECTION &&\n        this.getProjection() && projection && !equivalent(this.getProjection(), projection)) {\n      return false;\n    } else {\n      return super.getOpaque(projection);\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  getTileGridForProjection(projection) {\n    if (!ENABLE_RASTER_REPROJECTION) {\n      return super.getTileGridForProjection(projection);\n    }\n    const thisProj = this.getProjection();\n    if (this.tileGrid && (!thisProj || equivalent(thisProj, projection))) {\n      return this.tileGrid;\n    } else {\n      const projKey = getUid(projection);\n      if (!(projKey in this.tileGridForProjection)) {\n        this.tileGridForProjection[projKey] = getTileGridForProjection(projection);\n      }\n      return (\n        /** @type {!import(\"../tilegrid/TileGrid.js\").default} */ (this.tileGridForProjection[projKey])\n      );\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  getTileCacheForProjection(projection) {\n    if (!ENABLE_RASTER_REPROJECTION) {\n      return super.getTileCacheForProjection(projection);\n    }\n    const thisProj = this.getProjection(); if (!thisProj || equivalent(thisProj, projection)) {\n      return this.tileCache;\n    } else {\n      const projKey = getUid(projection);\n      if (!(projKey in this.tileCacheForProjection)) {\n        this.tileCacheForProjection[projKey] = new TileCache(this.tileCache.highWaterMark);\n      }\n      return this.tileCacheForProjection[projKey];\n    }\n  }\n\n  /**\n   * @param {number} z Tile coordinate z.\n   * @param {number} x Tile coordinate x.\n   * @param {number} y Tile coordinate y.\n   * @param {number} pixelRatio Pixel ratio.\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   * @param {string} key The key set on the tile.\n   * @return {!import(\"../Tile.js\").default} Tile.\n   * @private\n   */\n  createTile_(z, x, y, pixelRatio, projection, key) {\n    const tileCoord = [z, x, y];\n    const urlTileCoord = this.getTileCoordForTileUrlFunction(\n      tileCoord, projection);\n    const tileUrl = urlTileCoord ?\n      this.tileUrlFunction(urlTileCoord, pixelRatio, projection) : undefined;\n    const tile = new this.tileClass(\n      tileCoord,\n      tileUrl !== undefined ? TileState.IDLE : TileState.EMPTY,\n      tileUrl !== undefined ? tileUrl : '',\n      this.crossOrigin,\n      this.tileLoadFunction,\n      this.tileOptions);\n    tile.key = key;\n    listen(tile, EventType.CHANGE,\n      this.handleTileChange, this);\n    return tile;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  getTile(z, x, y, pixelRatio, projection) {\n    const sourceProjection = /** @type {!import(\"../proj/Projection.js\").default} */ (this.getProjection());\n    if (!ENABLE_RASTER_REPROJECTION ||\n        !sourceProjection || !projection || equivalent(sourceProjection, projection)) {\n      return this.getTileInternal(z, x, y, pixelRatio, sourceProjection || projection);\n    } else {\n      const cache = this.getTileCacheForProjection(projection);\n      const tileCoord = [z, x, y];\n      let tile;\n      const tileCoordKey = getKey(tileCoord);\n      if (cache.containsKey(tileCoordKey)) {\n        tile = /** @type {!import(\"../Tile.js\").default} */ (cache.get(tileCoordKey));\n      }\n      const key = this.getKey();\n      if (tile && tile.key == key) {\n        return tile;\n      } else {\n        const sourceTileGrid = this.getTileGridForProjection(sourceProjection);\n        const targetTileGrid = this.getTileGridForProjection(projection);\n        const wrappedTileCoord =\n            this.getTileCoordForTileUrlFunction(tileCoord, projection);\n        const newTile = new ReprojTile(\n          sourceProjection, sourceTileGrid,\n          projection, targetTileGrid,\n          tileCoord, wrappedTileCoord, this.getTilePixelRatio(pixelRatio),\n          this.getGutter(),\n          function(z, x, y, pixelRatio) {\n            return this.getTileInternal(z, x, y, pixelRatio, sourceProjection);\n          }.bind(this), this.reprojectionErrorThreshold_,\n          this.renderReprojectionEdges_);\n        newTile.key = key;\n\n        if (tile) {\n          newTile.interimTile = tile;\n          newTile.refreshInterimChain();\n          cache.replace(tileCoordKey, newTile);\n        } else {\n          cache.set(tileCoordKey, newTile);\n        }\n        return newTile;\n      }\n    }\n  }\n\n  /**\n   * @param {number} z Tile coordinate z.\n   * @param {number} x Tile coordinate x.\n   * @param {number} y Tile coordinate y.\n   * @param {number} pixelRatio Pixel ratio.\n   * @param {!import(\"../proj/Projection.js\").default} projection Projection.\n   * @return {!import(\"../Tile.js\").default} Tile.\n   * @protected\n   */\n  getTileInternal(z, x, y, pixelRatio, projection) {\n    let tile = null;\n    const tileCoordKey = getKeyZXY(z, x, y);\n    const key = this.getKey();\n    if (!this.tileCache.containsKey(tileCoordKey)) {\n      tile = this.createTile_(z, x, y, pixelRatio, projection, key);\n      this.tileCache.set(tileCoordKey, tile);\n    } else {\n      tile = this.tileCache.get(tileCoordKey);\n      if (tile.key != key) {\n        // The source's params changed. If the tile has an interim tile and if we\n        // can use it then we use it. Otherwise we create a new tile.  In both\n        // cases we attempt to assign an interim tile to the new tile.\n        const interimTile = tile;\n        tile = this.createTile_(z, x, y, pixelRatio, projection, key);\n\n        //make the new tile the head of the list,\n        if (interimTile.getState() == TileState.IDLE) {\n          //the old tile hasn't begun loading yet, and is now outdated, so we can simply discard it\n          tile.interimTile = interimTile.interimTile;\n        } else {\n          tile.interimTile = interimTile;\n        }\n        tile.refreshInterimChain();\n        this.tileCache.replace(tileCoordKey, tile);\n      }\n    }\n    return tile;\n  }\n\n  /**\n   * Sets whether to render reprojection edges or not (usually for debugging).\n   * @param {boolean} render Render the edges.\n   * @api\n   */\n  setRenderReprojectionEdges(render) {\n    if (!ENABLE_RASTER_REPROJECTION ||\n        this.renderReprojectionEdges_ == render) {\n      return;\n    }\n    this.renderReprojectionEdges_ = render;\n    for (const id in this.tileCacheForProjection) {\n      this.tileCacheForProjection[id].clear();\n    }\n    this.changed();\n  }\n\n  /**\n   * Sets the tile grid to use when reprojecting the tiles to the given\n   * projection instead of the default tile grid for the projection.\n   *\n   * This can be useful when the default tile grid cannot be created\n   * (e.g. projection has no extent defined) or\n   * for optimization reasons (custom tile size, resolutions, ...).\n   *\n   * @param {import(\"../proj.js\").ProjectionLike} projection Projection.\n   * @param {import(\"../tilegrid/TileGrid.js\").default} tilegrid Tile grid to use for the projection.\n   * @api\n   */\n  setTileGridForProjection(projection, tilegrid) {\n    if (ENABLE_RASTER_REPROJECTION) {\n      const proj = getProjection(projection);\n      if (proj) {\n        const projKey = getUid(proj);\n        if (!(projKey in this.tileGridForProjection)) {\n          this.tileGridForProjection[projKey] = tilegrid;\n        }\n      }\n    }\n  }\n}\n\n\n/**\n * @param {ImageTile} imageTile Image tile.\n * @param {string} src Source.\n */\nfunction defaultTileLoadFunction(imageTile, src) {\n  /** @type {HTMLImageElement|HTMLVideoElement} */ (imageTile.getImage()).src = src;\n}\n\nexport default TileImage;\n"]},"metadata":{},"sourceType":"module"}