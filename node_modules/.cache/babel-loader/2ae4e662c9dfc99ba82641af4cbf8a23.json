{"ast":null,"code":"/**\n * @module ol/format/GeoJSON\n */\n// TODO: serialize dataProjection as crs member when writing\n// see https://github.com/openlayers/openlayers/issues/2078\nimport { inherits } from '../util.js';\nimport { assert } from '../asserts.js';\nimport Feature from '../Feature.js';\nimport { transformWithOptions } from '../format/Feature.js';\nimport JSONFeature from '../format/JSONFeature.js';\nimport GeometryCollection from '../geom/GeometryCollection.js';\nimport LineString from '../geom/LineString.js';\nimport MultiLineString from '../geom/MultiLineString.js';\nimport MultiPoint from '../geom/MultiPoint.js';\nimport MultiPolygon from '../geom/MultiPolygon.js';\nimport Point from '../geom/Point.js';\nimport Polygon from '../geom/Polygon.js';\nimport { assign, isEmpty } from '../obj.js';\nimport { get as getProjection } from '../proj.js';\n/**\n * @typedef {Object} Options\n * @property {module:ol/proj~ProjectionLike} [dataProjection='EPSG:4326'] Default data projection.\n * @property {module:ol/proj~ProjectionLike} [featureProjection] Projection for features read or\n * written by the format.  Options passed to read or write methods will take precedence.\n * @property {string} [geometryName] Geometry name to use when creating features.\n * @property {boolean} [extractGeometryName=false] Certain GeoJSON providers include\n * the geometry_name field in the feature GeoJSON. If set to `true` the GeoJSON reader\n * will look for that field to set the geometry name. If both this field is set to `true`\n * and a `geometryName` is provided, the `geometryName` will take precedence.\n */\n\n/**\n * @classdesc\n * Feature format for reading and writing data in the GeoJSON format.\n *\n * @constructor\n * @extends {module:ol/format/JSONFeature}\n * @param {module:ol/format/GeoJSON~Options=} opt_options Options.\n * @api\n */\n\nconst GeoJSON = function (opt_options) {\n  const options = opt_options ? opt_options : {};\n  JSONFeature.call(this);\n  /**\n   * @inheritDoc\n   */\n\n  this.dataProjection = getProjection(options.dataProjection ? options.dataProjection : 'EPSG:4326');\n\n  if (options.featureProjection) {\n    this.defaultFeatureProjection = getProjection(options.featureProjection);\n  }\n  /**\n   * Name of the geometry attribute for features.\n   * @type {string|undefined}\n   * @private\n   */\n\n\n  this.geometryName_ = options.geometryName;\n  /**\n   * Look for the geometry name in the feature GeoJSON\n   * @type {boolean|undefined}\n   * @private\n   */\n\n  this.extractGeometryName_ = options.extractGeometryName;\n};\n\ninherits(GeoJSON, JSONFeature);\n/**\n * @const\n * @type {Object.<string, function(GeoJSONObject): module:ol/geom/Geometry>}\n */\n\nconst GEOMETRY_READERS = {\n  'Point': readPointGeometry,\n  'LineString': readLineStringGeometry,\n  'Polygon': readPolygonGeometry,\n  'MultiPoint': readMultiPointGeometry,\n  'MultiLineString': readMultiLineStringGeometry,\n  'MultiPolygon': readMultiPolygonGeometry,\n  'GeometryCollection': readGeometryCollectionGeometry\n};\n/**\n * @const\n * @type {Object.<string, function(module:ol/geom/Geometry, module:ol/format/Feature~WriteOptions=): (GeoJSONGeometry|GeoJSONGeometryCollection)>}\n */\n\nconst GEOMETRY_WRITERS = {\n  'Point': writePointGeometry,\n  'LineString': writeLineStringGeometry,\n  'Polygon': writePolygonGeometry,\n  'MultiPoint': writeMultiPointGeometry,\n  'MultiLineString': writeMultiLineStringGeometry,\n  'MultiPolygon': writeMultiPolygonGeometry,\n  'GeometryCollection': writeGeometryCollectionGeometry,\n  'Circle': writeEmptyGeometryCollectionGeometry\n};\n/**\n * @param {GeoJSONGeometry|GeoJSONGeometryCollection} object Object.\n * @param {module:ol/format/Feature~ReadOptions=} opt_options Read options.\n * @return {module:ol/geom/Geometry} Geometry.\n */\n\nfunction readGeometry(object, opt_options) {\n  if (!object) {\n    return null;\n  }\n\n  const geometryReader = GEOMETRY_READERS[object.type];\n  return (\n    /** @type {module:ol/geom/Geometry} */\n    transformWithOptions(geometryReader(object), false, opt_options)\n  );\n}\n/**\n * @param {GeoJSONGeometryCollection} object Object.\n * @param {module:ol/format/Feature~ReadOptions=} opt_options Read options.\n * @return {module:ol/geom/GeometryCollection} Geometry collection.\n */\n\n\nfunction readGeometryCollectionGeometry(object, opt_options) {\n  const geometries = object.geometries.map(\n  /**\n   * @param {GeoJSONGeometry} geometry Geometry.\n   * @return {module:ol/geom/Geometry} geometry Geometry.\n   */\n  function (geometry) {\n    return readGeometry(geometry, opt_options);\n  });\n  return new GeometryCollection(geometries);\n}\n/**\n * @param {GeoJSONGeometry} object Object.\n * @return {module:ol/geom/Point} Point.\n */\n\n\nfunction readPointGeometry(object) {\n  return new Point(object.coordinates);\n}\n/**\n * @param {GeoJSONGeometry} object Object.\n * @return {module:ol/geom/LineString} LineString.\n */\n\n\nfunction readLineStringGeometry(object) {\n  return new LineString(object.coordinates);\n}\n/**\n * @param {GeoJSONGeometry} object Object.\n * @return {module:ol/geom/MultiLineString} MultiLineString.\n */\n\n\nfunction readMultiLineStringGeometry(object) {\n  return new MultiLineString(object.coordinates);\n}\n/**\n * @param {GeoJSONGeometry} object Object.\n * @return {module:ol/geom/MultiPoint} MultiPoint.\n */\n\n\nfunction readMultiPointGeometry(object) {\n  return new MultiPoint(object.coordinates);\n}\n/**\n * @param {GeoJSONGeometry} object Object.\n * @return {module:ol/geom/MultiPolygon} MultiPolygon.\n */\n\n\nfunction readMultiPolygonGeometry(object) {\n  return new MultiPolygon(object.coordinates);\n}\n/**\n * @param {GeoJSONGeometry} object Object.\n * @return {module:ol/geom/Polygon} Polygon.\n */\n\n\nfunction readPolygonGeometry(object) {\n  return new Polygon(object.coordinates);\n}\n/**\n * @param {module:ol/geom/Geometry} geometry Geometry.\n * @param {module:ol/format/Feature~WriteOptions=} opt_options Write options.\n * @return {GeoJSONGeometry|GeoJSONGeometryCollection} GeoJSON geometry.\n */\n\n\nfunction writeGeometry(geometry, opt_options) {\n  const geometryWriter = GEOMETRY_WRITERS[geometry.getType()];\n  return geometryWriter(\n  /** @type {module:ol/geom/Geometry} */\n  transformWithOptions(geometry, true, opt_options), opt_options);\n}\n/**\n * @param {module:ol/geom/Geometry} geometry Geometry.\n * @return {GeoJSONGeometryCollection} Empty GeoJSON geometry collection.\n */\n\n\nfunction writeEmptyGeometryCollectionGeometry(geometry) {\n  return (\n    /** @type {GeoJSONGeometryCollection} */\n    {\n      type: 'GeometryCollection',\n      geometries: []\n    }\n  );\n}\n/**\n * @param {module:ol/geom/GeometryCollection} geometry Geometry.\n * @param {module:ol/format/Feature~WriteOptions=} opt_options Write options.\n * @return {GeoJSONGeometryCollection} GeoJSON geometry collection.\n */\n\n\nfunction writeGeometryCollectionGeometry(geometry, opt_options) {\n  const geometries = geometry.getGeometriesArray().map(function (geometry) {\n    const options = assign({}, opt_options);\n    delete options.featureProjection;\n    return writeGeometry(geometry, options);\n  });\n  return (\n    /** @type {GeoJSONGeometryCollection} */\n    {\n      type: 'GeometryCollection',\n      geometries: geometries\n    }\n  );\n}\n/**\n * @param {module:ol/geom/LineString} geometry Geometry.\n * @param {module:ol/format/Feature~WriteOptions=} opt_options Write options.\n * @return {GeoJSONGeometry} GeoJSON geometry.\n */\n\n\nfunction writeLineStringGeometry(geometry, opt_options) {\n  return (\n    /** @type {GeoJSONGeometry} */\n    {\n      type: 'LineString',\n      coordinates: geometry.getCoordinates()\n    }\n  );\n}\n/**\n * @param {module:ol/geom/MultiLineString} geometry Geometry.\n * @param {module:ol/format/Feature~WriteOptions=} opt_options Write options.\n * @return {GeoJSONGeometry} GeoJSON geometry.\n */\n\n\nfunction writeMultiLineStringGeometry(geometry, opt_options) {\n  return (\n    /** @type {GeoJSONGeometry} */\n    {\n      type: 'MultiLineString',\n      coordinates: geometry.getCoordinates()\n    }\n  );\n}\n/**\n * @param {module:ol/geom/MultiPoint} geometry Geometry.\n * @param {module:ol/format/Feature~WriteOptions=} opt_options Write options.\n * @return {GeoJSONGeometry} GeoJSON geometry.\n */\n\n\nfunction writeMultiPointGeometry(geometry, opt_options) {\n  return (\n    /** @type {GeoJSONGeometry} */\n    {\n      type: 'MultiPoint',\n      coordinates: geometry.getCoordinates()\n    }\n  );\n}\n/**\n * @param {module:ol/geom/MultiPolygon} geometry Geometry.\n * @param {module:ol/format/Feature~WriteOptions=} opt_options Write options.\n * @return {GeoJSONGeometry} GeoJSON geometry.\n */\n\n\nfunction writeMultiPolygonGeometry(geometry, opt_options) {\n  let right;\n\n  if (opt_options) {\n    right = opt_options.rightHanded;\n  }\n\n  return (\n    /** @type {GeoJSONGeometry} */\n    {\n      type: 'MultiPolygon',\n      coordinates: geometry.getCoordinates(right)\n    }\n  );\n}\n/**\n * @param {module:ol/geom/Point} geometry Geometry.\n * @param {module:ol/format/Feature~WriteOptions=} opt_options Write options.\n * @return {GeoJSONGeometry} GeoJSON geometry.\n */\n\n\nfunction writePointGeometry(geometry, opt_options) {\n  return (\n    /** @type {GeoJSONGeometry} */\n    {\n      type: 'Point',\n      coordinates: geometry.getCoordinates()\n    }\n  );\n}\n/**\n * @param {module:ol/geom/Polygon} geometry Geometry.\n * @param {module:ol/format/Feature~WriteOptions=} opt_options Write options.\n * @return {GeoJSONGeometry} GeoJSON geometry.\n */\n\n\nfunction writePolygonGeometry(geometry, opt_options) {\n  let right;\n\n  if (opt_options) {\n    right = opt_options.rightHanded;\n  }\n\n  return (\n    /** @type {GeoJSONGeometry} */\n    {\n      type: 'Polygon',\n      coordinates: geometry.getCoordinates(right)\n    }\n  );\n}\n/**\n * Read a feature from a GeoJSON Feature source.  Only works for Feature or\n * geometry types.  Use {@link module:ol/format/GeoJSON#readFeatures} to read\n * FeatureCollection source. If feature at source has an id, it will be used\n * as Feature id by calling {@link module:ol/Feature#setId} internally.\n *\n * @function\n * @param {Document|Node|Object|string} source Source.\n * @param {module:ol/format/Feature~ReadOptions=} opt_options Read options.\n * @return {module:ol/Feature} Feature.\n * @api\n */\n\n\nGeoJSON.prototype.readFeature;\n/**\n * Read all features from a GeoJSON source.  Works for all GeoJSON types.\n * If the source includes only geometries, features will be created with those\n * geometries.\n *\n * @function\n * @param {Document|Node|Object|string} source Source.\n * @param {module:ol/format/Feature~ReadOptions=} opt_options Read options.\n * @return {Array.<module:ol/Feature>} Features.\n * @api\n */\n\nGeoJSON.prototype.readFeatures;\n/**\n * @inheritDoc\n */\n\nGeoJSON.prototype.readFeatureFromObject = function (object, opt_options) {\n  /**\n   * @type {GeoJSONFeature}\n   */\n  let geoJSONFeature = null;\n\n  if (object.type === 'Feature') {\n    geoJSONFeature =\n    /** @type {GeoJSONFeature} */\n    object;\n  } else {\n    geoJSONFeature =\n    /** @type {GeoJSONFeature} */\n    {\n      type: 'Feature',\n      geometry:\n      /** @type {GeoJSONGeometry|GeoJSONGeometryCollection} */\n      object\n    };\n  }\n\n  const geometry = readGeometry(geoJSONFeature.geometry, opt_options);\n  const feature = new Feature();\n\n  if (this.geometryName_) {\n    feature.setGeometryName(this.geometryName_);\n  } else if (this.extractGeometryName_ && geoJSONFeature.geometry_name !== undefined) {\n    feature.setGeometryName(geoJSONFeature.geometry_name);\n  }\n\n  feature.setGeometry(geometry);\n\n  if (geoJSONFeature.id !== undefined) {\n    feature.setId(geoJSONFeature.id);\n  }\n\n  if (geoJSONFeature.properties) {\n    feature.setProperties(geoJSONFeature.properties);\n  }\n\n  return feature;\n};\n/**\n * @inheritDoc\n */\n\n\nGeoJSON.prototype.readFeaturesFromObject = function (object, opt_options) {\n  const geoJSONObject =\n  /** @type {GeoJSONObject} */\n  object;\n  /** @type {Array.<module:ol/Feature>} */\n\n  let features = null;\n\n  if (geoJSONObject.type === 'FeatureCollection') {\n    const geoJSONFeatureCollection =\n    /** @type {GeoJSONFeatureCollection} */\n    object;\n    features = [];\n    const geoJSONFeatures = geoJSONFeatureCollection.features;\n\n    for (let i = 0, ii = geoJSONFeatures.length; i < ii; ++i) {\n      features.push(this.readFeatureFromObject(geoJSONFeatures[i], opt_options));\n    }\n  } else {\n    features = [this.readFeatureFromObject(object, opt_options)];\n  }\n\n  return features;\n};\n/**\n * Read a geometry from a GeoJSON source.\n *\n * @function\n * @param {Document|Node|Object|string} source Source.\n * @param {module:ol/format/Feature~ReadOptions=} opt_options Read options.\n * @return {module:ol/geom/Geometry} Geometry.\n * @api\n */\n\n\nGeoJSON.prototype.readGeometry;\n/**\n * @inheritDoc\n */\n\nGeoJSON.prototype.readGeometryFromObject = function (object, opt_options) {\n  return readGeometry(\n  /** @type {GeoJSONGeometry} */\n  object, opt_options);\n};\n/**\n * Read the projection from a GeoJSON source.\n *\n * @function\n * @param {Document|Node|Object|string} source Source.\n * @return {module:ol/proj/Projection} Projection.\n * @api\n */\n\n\nGeoJSON.prototype.readProjection;\n/**\n * @inheritDoc\n */\n\nGeoJSON.prototype.readProjectionFromObject = function (object) {\n  const geoJSONObject =\n  /** @type {GeoJSONObject} */\n  object;\n  const crs = geoJSONObject.crs;\n  let projection;\n\n  if (crs) {\n    if (crs.type == 'name') {\n      projection = getProjection(crs.properties.name);\n    } else {\n      assert(false, 36); // Unknown SRS type\n    }\n  } else {\n    projection = this.dataProjection;\n  }\n\n  return (\n    /** @type {module:ol/proj/Projection} */\n    projection\n  );\n};\n/**\n * Encode a feature as a GeoJSON Feature string.\n *\n * @function\n * @param {module:ol/Feature} feature Feature.\n * @param {module:ol/format/Feature~WriteOptions=} opt_options Write options.\n * @return {string} GeoJSON.\n * @override\n * @api\n */\n\n\nGeoJSON.prototype.writeFeature;\n/**\n * Encode a feature as a GeoJSON Feature object.\n *\n * @param {module:ol/Feature} feature Feature.\n * @param {module:ol/format/Feature~WriteOptions=} opt_options Write options.\n * @return {GeoJSONFeature} Object.\n * @override\n * @api\n */\n\nGeoJSON.prototype.writeFeatureObject = function (feature, opt_options) {\n  opt_options = this.adaptOptions(opt_options);\n  const object =\n  /** @type {GeoJSONFeature} */\n  {\n    'type': 'Feature'\n  };\n  const id = feature.getId();\n\n  if (id !== undefined) {\n    object.id = id;\n  }\n\n  const geometry = feature.getGeometry();\n\n  if (geometry) {\n    object.geometry = writeGeometry(geometry, opt_options);\n  } else {\n    object.geometry = null;\n  }\n\n  const properties = feature.getProperties();\n  delete properties[feature.getGeometryName()];\n\n  if (!isEmpty(properties)) {\n    object.properties = properties;\n  } else {\n    object.properties = null;\n  }\n\n  return object;\n};\n/**\n * Encode an array of features as GeoJSON.\n *\n * @function\n * @param {Array.<module:ol/Feature>} features Features.\n * @param {module:ol/format/Feature~WriteOptions=} opt_options Write options.\n * @return {string} GeoJSON.\n * @api\n */\n\n\nGeoJSON.prototype.writeFeatures;\n/**\n * Encode an array of features as a GeoJSON object.\n *\n * @param {Array.<module:ol/Feature>} features Features.\n * @param {module:ol/format/Feature~WriteOptions=} opt_options Write options.\n * @return {GeoJSONFeatureCollection} GeoJSON Object.\n * @override\n * @api\n */\n\nGeoJSON.prototype.writeFeaturesObject = function (features, opt_options) {\n  opt_options = this.adaptOptions(opt_options);\n  const objects = [];\n\n  for (let i = 0, ii = features.length; i < ii; ++i) {\n    objects.push(this.writeFeatureObject(features[i], opt_options));\n  }\n\n  return (\n    /** @type {GeoJSONFeatureCollection} */\n    {\n      type: 'FeatureCollection',\n      features: objects\n    }\n  );\n};\n/**\n * Encode a geometry as a GeoJSON string.\n *\n * @function\n * @param {module:ol/geom/Geometry} geometry Geometry.\n * @param {module:ol/format/Feature~WriteOptions=} opt_options Write options.\n * @return {string} GeoJSON.\n * @api\n */\n\n\nGeoJSON.prototype.writeGeometry;\n/**\n * Encode a geometry as a GeoJSON object.\n *\n * @param {module:ol/geom/Geometry} geometry Geometry.\n * @param {module:ol/format/Feature~WriteOptions=} opt_options Write options.\n * @return {GeoJSONGeometry|GeoJSONGeometryCollection} Object.\n * @override\n * @api\n */\n\nGeoJSON.prototype.writeGeometryObject = function (geometry, opt_options) {\n  return writeGeometry(geometry, this.adaptOptions(opt_options));\n};\n\nexport default GeoJSON;","map":null,"metadata":{},"sourceType":"module"}