{"ast":null,"code":"/**\n * @module ol/control/FullScreen\n */\nimport Control from './Control.js';\nimport { CLASS_CONTROL, CLASS_UNSELECTABLE, CLASS_UNSUPPORTED } from '../css.js';\nimport { replaceNode } from '../dom.js';\nimport { listen } from '../events.js';\nimport EventType from '../events/EventType.js';\n/**\n * @return {string} Change type.\n */\n\nvar getChangeType = function () {\n  var changeType;\n  return function () {\n    if (!changeType) {\n      var body = document.body;\n\n      if (body.webkitRequestFullscreen) {\n        changeType = 'webkitfullscreenchange';\n      } else if (body.mozRequestFullScreen) {\n        changeType = 'mozfullscreenchange';\n      } else if (body.msRequestFullscreen) {\n        changeType = 'MSFullscreenChange';\n      } else if (body.requestFullscreen) {\n        changeType = 'fullscreenchange';\n      }\n    }\n\n    return changeType;\n  };\n}();\n/**\n * @typedef {Object} Options\n * @property {string} [className='ol-full-screen'] CSS class name.\n * @property {string|Text} [label='\\u2922'] Text label to use for the button.\n * Instead of text, also an element (e.g. a `span` element) can be used.\n * @property {string|Text} [labelActive='\\u00d7'] Text label to use for the\n * button when full-screen is active.\n * Instead of text, also an element (e.g. a `span` element) can be used.\n * @property {string} [tipLabel='Toggle full-screen'] Text label to use for the button tip.\n * @property {boolean} [keys=false] Full keyboard access.\n * @property {HTMLElement|string} [target] Specify a target if you want the\n * control to be rendered outside of the map's viewport.\n * @property {HTMLElement|string} [source] The element to be displayed\n * fullscreen. When not provided, the element containing the map viewport will\n * be displayed fullscreen.\n */\n\n/**\n * @classdesc\n * Provides a button that when clicked fills up the full screen with the map.\n * The full screen source element is by default the element containing the map viewport unless\n * overridden by providing the `source` option. In which case, the dom\n * element introduced using this parameter will be displayed in full screen.\n *\n * When in full screen mode, a close button is shown to exit full screen mode.\n * The [Fullscreen API](http://www.w3.org/TR/fullscreen/) is used to\n * toggle the map in full screen mode.\n *\n * @api\n */\n\n\nvar FullScreen =\n/*@__PURE__*/\nfunction (Control) {\n  function FullScreen(opt_options) {\n    var options = opt_options ? opt_options : {};\n    Control.call(this, {\n      element: document.createElement('div'),\n      target: options.target\n    });\n    /**\n     * @private\n     * @type {string}\n     */\n\n    this.cssClassName_ = options.className !== undefined ? options.className : 'ol-full-screen';\n    var label = options.label !== undefined ? options.label : '\\u2922';\n    /**\n     * @private\n     * @type {Text}\n     */\n\n    this.labelNode_ = typeof label === 'string' ? document.createTextNode(label) : label;\n    var labelActive = options.labelActive !== undefined ? options.labelActive : '\\u00d7';\n    /**\n     * @private\n     * @type {Text}\n     */\n\n    this.labelActiveNode_ = typeof labelActive === 'string' ? document.createTextNode(labelActive) : labelActive;\n    /**\n     * @private\n     * @type {HTMLElement}\n     */\n\n    this.button_ = document.createElement('button');\n    var tipLabel = options.tipLabel ? options.tipLabel : 'Toggle full-screen';\n    this.setClassName_(this.button_, isFullScreen());\n    this.button_.setAttribute('type', 'button');\n    this.button_.title = tipLabel;\n    this.button_.appendChild(this.labelNode_);\n    listen(this.button_, EventType.CLICK, this.handleClick_, this);\n    var cssClasses = this.cssClassName_ + ' ' + CLASS_UNSELECTABLE + ' ' + CLASS_CONTROL + ' ' + (!isFullScreenSupported() ? CLASS_UNSUPPORTED : '');\n    var element = this.element;\n    element.className = cssClasses;\n    element.appendChild(this.button_);\n    /**\n     * @private\n     * @type {boolean}\n     */\n\n    this.keys_ = options.keys !== undefined ? options.keys : false;\n    /**\n     * @private\n     * @type {HTMLElement|string|undefined}\n     */\n\n    this.source_ = options.source;\n  }\n\n  if (Control) FullScreen.__proto__ = Control;\n  FullScreen.prototype = Object.create(Control && Control.prototype);\n  FullScreen.prototype.constructor = FullScreen;\n  /**\n   * @param {MouseEvent} event The event to handle\n   * @private\n   */\n\n  FullScreen.prototype.handleClick_ = function handleClick_(event) {\n    event.preventDefault();\n    this.handleFullScreen_();\n  };\n  /**\n   * @private\n   */\n\n\n  FullScreen.prototype.handleFullScreen_ = function handleFullScreen_() {\n    if (!isFullScreenSupported()) {\n      return;\n    }\n\n    var map = this.getMap();\n\n    if (!map) {\n      return;\n    }\n\n    if (isFullScreen()) {\n      exitFullScreen();\n    } else {\n      var element;\n\n      if (this.source_) {\n        element = typeof this.source_ === 'string' ? document.getElementById(this.source_) : this.source_;\n      } else {\n        element = map.getTargetElement();\n      }\n\n      if (this.keys_) {\n        requestFullScreenWithKeys(element);\n      } else {\n        requestFullScreen(element);\n      }\n    }\n  };\n  /**\n   * @private\n   */\n\n\n  FullScreen.prototype.handleFullScreenChange_ = function handleFullScreenChange_() {\n    var map = this.getMap();\n\n    if (isFullScreen()) {\n      this.setClassName_(this.button_, true);\n      replaceNode(this.labelActiveNode_, this.labelNode_);\n    } else {\n      this.setClassName_(this.button_, false);\n      replaceNode(this.labelNode_, this.labelActiveNode_);\n    }\n\n    if (map) {\n      map.updateSize();\n    }\n  };\n  /**\n   * @param {HTMLElement} element Target element\n   * @param {boolean} fullscreen True if fullscreen class name should be active\n   * @private\n   */\n\n\n  FullScreen.prototype.setClassName_ = function setClassName_(element, fullscreen) {\n    var activeClassName = this.cssClassName_ + '-true';\n    var inactiveClassName = this.cssClassName_ + '-false';\n    var nextClassName = fullscreen ? activeClassName : inactiveClassName;\n    element.classList.remove(activeClassName);\n    element.classList.remove(inactiveClassName);\n    element.classList.add(nextClassName);\n  };\n  /**\n   * @inheritDoc\n   * @api\n   */\n\n\n  FullScreen.prototype.setMap = function setMap(map) {\n    Control.prototype.setMap.call(this, map);\n\n    if (map) {\n      this.listenerKeys.push(listen(document, getChangeType(), this.handleFullScreenChange_, this));\n    }\n  };\n\n  return FullScreen;\n}(Control);\n/**\n * @return {boolean} Fullscreen is supported by the current platform.\n */\n\n\nfunction isFullScreenSupported() {\n  var body = document.body;\n  return !!(body.webkitRequestFullscreen || body.mozRequestFullScreen && document.mozFullScreenEnabled || body.msRequestFullscreen && document.msFullscreenEnabled || body.requestFullscreen && document.fullscreenEnabled);\n}\n/**\n * @return {boolean} Element is currently in fullscreen.\n */\n\n\nfunction isFullScreen() {\n  return !!(document.webkitIsFullScreen || document.mozFullScreen || document.msFullscreenElement || document.fullscreenElement);\n}\n/**\n * Request to fullscreen an element.\n * @param {HTMLElement} element Element to request fullscreen\n */\n\n\nfunction requestFullScreen(element) {\n  if (element.requestFullscreen) {\n    element.requestFullscreen();\n  } else if (element.msRequestFullscreen) {\n    element.msRequestFullscreen();\n  } else if (element.mozRequestFullScreen) {\n    element.mozRequestFullScreen();\n  } else if (element.webkitRequestFullscreen) {\n    element.webkitRequestFullscreen();\n  }\n}\n/**\n * Request to fullscreen an element with keyboard input.\n * @param {HTMLElement} element Element to request fullscreen\n */\n\n\nfunction requestFullScreenWithKeys(element) {\n  if (element.mozRequestFullScreenWithKeys) {\n    element.mozRequestFullScreenWithKeys();\n  } else if (element.webkitRequestFullscreen) {\n    element.webkitRequestFullscreen();\n  } else {\n    requestFullScreen(element);\n  }\n}\n/**\n * Exit fullscreen.\n */\n\n\nfunction exitFullScreen() {\n  if (document.exitFullscreen) {\n    document.exitFullscreen();\n  } else if (document.msExitFullscreen) {\n    document.msExitFullscreen();\n  } else if (document.mozCancelFullScreen) {\n    document.mozCancelFullScreen();\n  } else if (document.webkitExitFullscreen) {\n    document.webkitExitFullscreen();\n  }\n}\n\nexport default FullScreen;","map":{"version":3,"sources":["../../../src/ol/control/FullScreen.js"],"names":["const","let","super"],"mappings":"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","sourcesContent":["/**\n * @module ol/control/FullScreen\n */\nimport Control from './Control.js';\nimport {CLASS_CONTROL, CLASS_UNSELECTABLE, CLASS_UNSUPPORTED} from '../css.js';\nimport {replaceNode} from '../dom.js';\nimport {listen} from '../events.js';\nimport EventType from '../events/EventType.js';\n\n\n/**\n * @return {string} Change type.\n */\nconst getChangeType = (function() {\n  let changeType;\n  return function() {\n    if (!changeType) {\n      const body = document.body;\n      if (body.webkitRequestFullscreen) {\n        changeType = 'webkitfullscreenchange';\n      } else if (body.mozRequestFullScreen) {\n        changeType = 'mozfullscreenchange';\n      } else if (body.msRequestFullscreen) {\n        changeType = 'MSFullscreenChange';\n      } else if (body.requestFullscreen) {\n        changeType = 'fullscreenchange';\n      }\n    }\n    return changeType;\n  };\n})();\n\n\n/**\n * @typedef {Object} Options\n * @property {string} [className='ol-full-screen'] CSS class name.\n * @property {string|Text} [label='\\u2922'] Text label to use for the button.\n * Instead of text, also an element (e.g. a `span` element) can be used.\n * @property {string|Text} [labelActive='\\u00d7'] Text label to use for the\n * button when full-screen is active.\n * Instead of text, also an element (e.g. a `span` element) can be used.\n * @property {string} [tipLabel='Toggle full-screen'] Text label to use for the button tip.\n * @property {boolean} [keys=false] Full keyboard access.\n * @property {HTMLElement|string} [target] Specify a target if you want the\n * control to be rendered outside of the map's viewport.\n * @property {HTMLElement|string} [source] The element to be displayed\n * fullscreen. When not provided, the element containing the map viewport will\n * be displayed fullscreen.\n */\n\n\n/**\n * @classdesc\n * Provides a button that when clicked fills up the full screen with the map.\n * The full screen source element is by default the element containing the map viewport unless\n * overridden by providing the `source` option. In which case, the dom\n * element introduced using this parameter will be displayed in full screen.\n *\n * When in full screen mode, a close button is shown to exit full screen mode.\n * The [Fullscreen API](http://www.w3.org/TR/fullscreen/) is used to\n * toggle the map in full screen mode.\n *\n * @api\n */\nclass FullScreen extends Control {\n\n  /**\n   * @param {Options=} opt_options Options.\n   */\n  constructor(opt_options) {\n\n    const options = opt_options ? opt_options : {};\n\n    super({\n      element: document.createElement('div'),\n      target: options.target\n    });\n\n    /**\n     * @private\n     * @type {string}\n     */\n    this.cssClassName_ = options.className !== undefined ? options.className :\n      'ol-full-screen';\n\n    const label = options.label !== undefined ? options.label : '\\u2922';\n\n    /**\n     * @private\n     * @type {Text}\n     */\n    this.labelNode_ = typeof label === 'string' ?\n      document.createTextNode(label) : label;\n\n    const labelActive = options.labelActive !== undefined ? options.labelActive : '\\u00d7';\n\n    /**\n     * @private\n     * @type {Text}\n     */\n    this.labelActiveNode_ = typeof labelActive === 'string' ?\n      document.createTextNode(labelActive) : labelActive;\n\n    /**\n     * @private\n     * @type {HTMLElement}\n     */\n    this.button_ = document.createElement('button');\n\n    const tipLabel = options.tipLabel ? options.tipLabel : 'Toggle full-screen';\n    this.setClassName_(this.button_, isFullScreen());\n    this.button_.setAttribute('type', 'button');\n    this.button_.title = tipLabel;\n    this.button_.appendChild(this.labelNode_);\n\n    listen(this.button_, EventType.CLICK,\n      this.handleClick_, this);\n\n    const cssClasses = this.cssClassName_ + ' ' + CLASS_UNSELECTABLE +\n        ' ' + CLASS_CONTROL + ' ' +\n        (!isFullScreenSupported() ? CLASS_UNSUPPORTED : '');\n    const element = this.element;\n    element.className = cssClasses;\n    element.appendChild(this.button_);\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.keys_ = options.keys !== undefined ? options.keys : false;\n\n    /**\n     * @private\n     * @type {HTMLElement|string|undefined}\n     */\n    this.source_ = options.source;\n\n  }\n\n  /**\n   * @param {MouseEvent} event The event to handle\n   * @private\n   */\n  handleClick_(event) {\n    event.preventDefault();\n    this.handleFullScreen_();\n  }\n\n  /**\n   * @private\n   */\n  handleFullScreen_() {\n    if (!isFullScreenSupported()) {\n      return;\n    }\n    const map = this.getMap();\n    if (!map) {\n      return;\n    }\n    if (isFullScreen()) {\n      exitFullScreen();\n    } else {\n      let element;\n      if (this.source_) {\n        element = typeof this.source_ === 'string' ?\n          document.getElementById(this.source_) :\n          this.source_;\n      } else {\n        element = map.getTargetElement();\n      }\n      if (this.keys_) {\n        requestFullScreenWithKeys(element);\n\n      } else {\n        requestFullScreen(element);\n      }\n    }\n  }\n\n  /**\n   * @private\n   */\n  handleFullScreenChange_() {\n    const map = this.getMap();\n    if (isFullScreen()) {\n      this.setClassName_(this.button_, true);\n      replaceNode(this.labelActiveNode_, this.labelNode_);\n    } else {\n      this.setClassName_(this.button_, false);\n      replaceNode(this.labelNode_, this.labelActiveNode_);\n    }\n    if (map) {\n      map.updateSize();\n    }\n  }\n\n  /**\n   * @param {HTMLElement} element Target element\n   * @param {boolean} fullscreen True if fullscreen class name should be active\n   * @private\n   */\n  setClassName_(element, fullscreen) {\n    const activeClassName = this.cssClassName_ + '-true';\n    const inactiveClassName = this.cssClassName_ + '-false';\n    const nextClassName = fullscreen ? activeClassName : inactiveClassName;\n    element.classList.remove(activeClassName);\n    element.classList.remove(inactiveClassName);\n    element.classList.add(nextClassName);\n  }\n\n  /**\n   * @inheritDoc\n   * @api\n   */\n  setMap(map) {\n    super.setMap(map);\n    if (map) {\n      this.listenerKeys.push(listen(document,\n        getChangeType(),\n        this.handleFullScreenChange_, this)\n      );\n    }\n  }\n}\n\n\n/**\n * @return {boolean} Fullscreen is supported by the current platform.\n */\nfunction isFullScreenSupported() {\n  const body = document.body;\n  return !!(\n    body.webkitRequestFullscreen ||\n    (body.mozRequestFullScreen && document.mozFullScreenEnabled) ||\n    (body.msRequestFullscreen && document.msFullscreenEnabled) ||\n    (body.requestFullscreen && document.fullscreenEnabled)\n  );\n}\n\n/**\n * @return {boolean} Element is currently in fullscreen.\n */\nfunction isFullScreen() {\n  return !!(\n    document.webkitIsFullScreen || document.mozFullScreen ||\n    document.msFullscreenElement || document.fullscreenElement\n  );\n}\n\n/**\n * Request to fullscreen an element.\n * @param {HTMLElement} element Element to request fullscreen\n */\nfunction requestFullScreen(element) {\n  if (element.requestFullscreen) {\n    element.requestFullscreen();\n  } else if (element.msRequestFullscreen) {\n    element.msRequestFullscreen();\n  } else if (element.mozRequestFullScreen) {\n    element.mozRequestFullScreen();\n  } else if (element.webkitRequestFullscreen) {\n    element.webkitRequestFullscreen();\n  }\n}\n\n/**\n * Request to fullscreen an element with keyboard input.\n * @param {HTMLElement} element Element to request fullscreen\n */\nfunction requestFullScreenWithKeys(element) {\n  if (element.mozRequestFullScreenWithKeys) {\n    element.mozRequestFullScreenWithKeys();\n  } else if (element.webkitRequestFullscreen) {\n    element.webkitRequestFullscreen();\n  } else {\n    requestFullScreen(element);\n  }\n}\n\n/**\n * Exit fullscreen.\n */\nfunction exitFullScreen() {\n  if (document.exitFullscreen) {\n    document.exitFullscreen();\n  } else if (document.msExitFullscreen) {\n    document.msExitFullscreen();\n  } else if (document.mozCancelFullScreen) {\n    document.mozCancelFullScreen();\n  } else if (document.webkitExitFullscreen) {\n    document.webkitExitFullscreen();\n  }\n}\n\nexport default FullScreen;\n"]},"metadata":{},"sourceType":"module"}