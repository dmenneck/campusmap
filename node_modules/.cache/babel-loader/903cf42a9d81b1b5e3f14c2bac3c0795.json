{"ast":null,"code":"/**\n * @module ol/rotationconstraint\n */\nimport { toRadians } from './math.js';\n/**\n * @typedef {function((number|undefined), number): (number|undefined)} Type\n */\n\n/**\n * @param {number|undefined} rotation Rotation.\n * @param {number} delta Delta.\n * @return {number|undefined} Rotation.\n */\n\nexport function disable(rotation, delta) {\n  if (rotation !== undefined) {\n    return 0;\n  } else {\n    return undefined;\n  }\n}\n/**\n * @param {number|undefined} rotation Rotation.\n * @param {number} delta Delta.\n * @return {number|undefined} Rotation.\n */\n\nexport function none(rotation, delta) {\n  if (rotation !== undefined) {\n    return rotation + delta;\n  } else {\n    return undefined;\n  }\n}\n/**\n * @param {number} n N.\n * @return {Type} Rotation constraint.\n */\n\nexport function createSnapToN(n) {\n  var theta = 2 * Math.PI / n;\n  return (\n    /**\n     * @param {number|undefined} rotation Rotation.\n     * @param {number} delta Delta.\n     * @return {number|undefined} Rotation.\n     */\n    function (rotation, delta) {\n      if (rotation !== undefined) {\n        rotation = Math.floor((rotation + delta) / theta + 0.5) * theta;\n        return rotation;\n      } else {\n        return undefined;\n      }\n    }\n  );\n}\n/**\n * @param {number=} opt_tolerance Tolerance.\n * @return {Type} Rotation constraint.\n */\n\nexport function createSnapToZero(opt_tolerance) {\n  var tolerance = opt_tolerance || toRadians(5);\n  return (\n    /**\n     * @param {number|undefined} rotation Rotation.\n     * @param {number} delta Delta.\n     * @return {number|undefined} Rotation.\n     */\n    function (rotation, delta) {\n      if (rotation !== undefined) {\n        if (Math.abs(rotation + delta) <= tolerance) {\n          return 0;\n        } else {\n          return rotation + delta;\n        }\n      } else {\n        return undefined;\n      }\n    }\n  );\n}","map":{"version":3,"sources":["../../src/ol/rotationconstraint.js"],"names":["const"],"mappings":"AAAA;;;AAGA,SAAQ,SAAR,QAAwB,WAAxB;;;;;;;;;;;AAaA,OAAO,SAAS,OAAT,CAAiB,QAAjB,EAA2B,KAA3B,EAAkC;AACvC,MAAI,QAAQ,KAAK,SAAjB,EAA4B;AAC1B,WAAO,CAAP;AACD,GAFD,MAEO;AACL,WAAO,SAAP;AACD;AACF;;;;;;;AAQD,OAAO,SAAS,IAAT,CAAc,QAAd,EAAwB,KAAxB,EAA+B;AACpC,MAAI,QAAQ,KAAK,SAAjB,EAA4B;AAC1B,WAAO,QAAQ,GAAG,KAAlB;AACD,GAFD,MAEO;AACL,WAAO,SAAP;AACD;AACF;;;;;;AAOD,OAAO,SAAS,aAAT,CAAuB,CAAvB,EAA0B;AAC/BA,MAAM,KAAK,GAAG,IAAI,IAAI,CAAC,EAAT,GAAc,CAA5BA;AACA;;;;;;AAME,cAAS,QAAT,EAAmB,KAAnB,EAA0B;AACxB,UAAI,QAAQ,KAAK,SAAjB,EAA4B;AAC1B,QAAA,QAAQ,GAAG,IAAI,CAAC,KAAL,CAAW,CAAC,QAAQ,GAAG,KAAZ,IAAqB,KAArB,GAA6B,GAAxC,IAA+C,KAA1D;AACA,eAAO,QAAP;AACD,OAHD,MAGO;AACL,eAAO,SAAP;AACD;AACF;AAbH;AAcD;;;;;;AAOD,OAAO,SAAS,gBAAT,CAA0B,aAA1B,EAAyC;AAC9CA,MAAM,SAAS,GAAG,aAAa,IAAI,SAAS,CAAC,CAAD,CAA5CA;AACA;;;;;;AAME,cAAS,QAAT,EAAmB,KAAnB,EAA0B;AACxB,UAAI,QAAQ,KAAK,SAAjB,EAA4B;AAC1B,YAAI,IAAI,CAAC,GAAL,CAAS,QAAQ,GAAG,KAApB,KAA8B,SAAlC,EAA6C;AAC3C,iBAAO,CAAP;AACD,SAFD,MAEO;AACL,iBAAO,QAAQ,GAAG,KAAlB;AACD;AACF,OAND,MAMO;AACL,eAAO,SAAP;AACD;AACF;AAhBH;AAiBD","sourcesContent":["/**\n * @module ol/rotationconstraint\n */\nimport {toRadians} from './math.js';\n\n\n/**\n * @typedef {function((number|undefined), number): (number|undefined)} Type\n */\n\n\n/**\n * @param {number|undefined} rotation Rotation.\n * @param {number} delta Delta.\n * @return {number|undefined} Rotation.\n */\nexport function disable(rotation, delta) {\n  if (rotation !== undefined) {\n    return 0;\n  } else {\n    return undefined;\n  }\n}\n\n\n/**\n * @param {number|undefined} rotation Rotation.\n * @param {number} delta Delta.\n * @return {number|undefined} Rotation.\n */\nexport function none(rotation, delta) {\n  if (rotation !== undefined) {\n    return rotation + delta;\n  } else {\n    return undefined;\n  }\n}\n\n\n/**\n * @param {number} n N.\n * @return {Type} Rotation constraint.\n */\nexport function createSnapToN(n) {\n  const theta = 2 * Math.PI / n;\n  return (\n    /**\n     * @param {number|undefined} rotation Rotation.\n     * @param {number} delta Delta.\n     * @return {number|undefined} Rotation.\n     */\n    function(rotation, delta) {\n      if (rotation !== undefined) {\n        rotation = Math.floor((rotation + delta) / theta + 0.5) * theta;\n        return rotation;\n      } else {\n        return undefined;\n      }\n    });\n}\n\n\n/**\n * @param {number=} opt_tolerance Tolerance.\n * @return {Type} Rotation constraint.\n */\nexport function createSnapToZero(opt_tolerance) {\n  const tolerance = opt_tolerance || toRadians(5);\n  return (\n    /**\n     * @param {number|undefined} rotation Rotation.\n     * @param {number} delta Delta.\n     * @return {number|undefined} Rotation.\n     */\n    function(rotation, delta) {\n      if (rotation !== undefined) {\n        if (Math.abs(rotation + delta) <= tolerance) {\n          return 0;\n        } else {\n          return rotation + delta;\n        }\n      } else {\n        return undefined;\n      }\n    });\n}\n"]},"metadata":{},"sourceType":"module"}