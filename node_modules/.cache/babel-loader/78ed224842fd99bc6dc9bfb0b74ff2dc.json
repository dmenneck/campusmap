{"ast":null,"code":"/**\n * @module ol/control/Rotate\n */\nimport Control from '../control/Control.js';\nimport { CLASS_CONTROL, CLASS_HIDDEN, CLASS_UNSELECTABLE } from '../css.js';\nimport { easeOut } from '../easing.js';\nimport { listen } from '../events.js';\nimport EventType from '../events/EventType.js';\nimport { inherits } from '../util.js';\n/**\n * @typedef {Object} Options\n * @property {string} [className='ol-rotate'] CSS class name.\n * @property {string|Element} [label='â‡§'] Text label to use for the rotate button.\n * Instead of text, also an element (e.g. a `span` element) can be used.\n * @property {string} [tipLabel='Reset rotation'] Text label to use for the rotate tip.\n * @property {number} [duration=250] Animation duration in milliseconds.\n * @property {boolean} [autoHide=true] Hide the control when rotation is 0.\n * @property {function(module:ol/MapEvent)} [render] Function called when the control should\n * be re-rendered. This is called in a `requestAnimationFrame` callback.\n * @property {function()} [resetNorth] Function called when the control is clicked.\n * This will override the default `resetNorth`.\n * @property {Element|string} [target] Specify a target if you want the control to be\n * rendered outside of the map's viewport.\n */\n\n/**\n * @classdesc\n * A button control to reset rotation to 0.\n * To style this control use css selector `.ol-rotate`. A `.ol-hidden` css\n * selector is added to the button when the rotation is 0.\n *\n * @constructor\n * @extends {module:ol/control/Control}\n * @param {module:ol/control/Rotate~Options=} opt_options Rotate options.\n * @api\n */\n\nconst Rotate = function (opt_options) {\n  const options = opt_options ? opt_options : {};\n  const className = options.className !== undefined ? options.className : 'ol-rotate';\n  const label = options.label !== undefined ? options.label : '\\u21E7';\n  /**\n   * @type {Element}\n   * @private\n   */\n\n  this.label_ = null;\n\n  if (typeof label === 'string') {\n    this.label_ = document.createElement('span');\n    this.label_.className = 'ol-compass';\n    this.label_.textContent = label;\n  } else {\n    this.label_ = label;\n    this.label_.classList.add('ol-compass');\n  }\n\n  const tipLabel = options.tipLabel ? options.tipLabel : 'Reset rotation';\n  const button = document.createElement('button');\n  button.className = className + '-reset';\n  button.setAttribute('type', 'button');\n  button.title = tipLabel;\n  button.appendChild(this.label_);\n  listen(button, EventType.CLICK, Rotate.prototype.handleClick_, this);\n  const cssClasses = className + ' ' + CLASS_UNSELECTABLE + ' ' + CLASS_CONTROL;\n  const element = document.createElement('div');\n  element.className = cssClasses;\n  element.appendChild(button);\n  this.callResetNorth_ = options.resetNorth ? options.resetNorth : undefined;\n  Control.call(this, {\n    element: element,\n    render: options.render || render,\n    target: options.target\n  });\n  /**\n   * @type {number}\n   * @private\n   */\n\n  this.duration_ = options.duration !== undefined ? options.duration : 250;\n  /**\n   * @type {boolean}\n   * @private\n   */\n\n  this.autoHide_ = options.autoHide !== undefined ? options.autoHide : true;\n  /**\n   * @private\n   * @type {number|undefined}\n   */\n\n  this.rotation_ = undefined;\n\n  if (this.autoHide_) {\n    this.element.classList.add(CLASS_HIDDEN);\n  }\n};\n\ninherits(Rotate, Control);\n/**\n * @param {Event} event The event to handle\n * @private\n */\n\nRotate.prototype.handleClick_ = function (event) {\n  event.preventDefault();\n\n  if (this.callResetNorth_ !== undefined) {\n    this.callResetNorth_();\n  } else {\n    this.resetNorth_();\n  }\n};\n/**\n * @private\n */\n\n\nRotate.prototype.resetNorth_ = function () {\n  const map = this.getMap();\n  const view = map.getView();\n\n  if (!view) {\n    // the map does not have a view, so we can't act\n    // upon it\n    return;\n  }\n\n  if (view.getRotation() !== undefined) {\n    if (this.duration_ > 0) {\n      view.animate({\n        rotation: 0,\n        duration: this.duration_,\n        easing: easeOut\n      });\n    } else {\n      view.setRotation(0);\n    }\n  }\n};\n/**\n * Update the rotate control element.\n * @param {module:ol/MapEvent} mapEvent Map event.\n * @this {module:ol/control/Rotate}\n * @api\n */\n\n\nexport function render(mapEvent) {\n  const frameState = mapEvent.frameState;\n\n  if (!frameState) {\n    return;\n  }\n\n  const rotation = frameState.viewState.rotation;\n\n  if (rotation != this.rotation_) {\n    const transform = 'rotate(' + rotation + 'rad)';\n\n    if (this.autoHide_) {\n      const contains = this.element.classList.contains(CLASS_HIDDEN);\n\n      if (!contains && rotation === 0) {\n        this.element.classList.add(CLASS_HIDDEN);\n      } else if (contains && rotation !== 0) {\n        this.element.classList.remove(CLASS_HIDDEN);\n      }\n    }\n\n    this.label_.style.msTransform = transform;\n    this.label_.style.webkitTransform = transform;\n    this.label_.style.transform = transform;\n  }\n\n  this.rotation_ = rotation;\n}\nexport default Rotate;","map":null,"metadata":{},"sourceType":"module"}