{"ast":null,"code":"/**\n * @module ol/style/Icon\n */\nimport { getUid } from '../util.js';\nimport ImageState from '../ImageState.js';\nimport { assert } from '../asserts.js';\nimport { asArray } from '../color.js';\nimport { listen, unlisten } from '../events.js';\nimport EventType from '../events/EventType.js';\nimport IconAnchorUnits from './IconAnchorUnits.js';\nimport { get as getIconImage } from './IconImage.js';\nimport IconOrigin from './IconOrigin.js';\nimport ImageStyle from './Image.js';\n/**\n * @typedef {Object} Options\n * @property {Array<number>} [anchor=[0.5, 0.5]] Anchor. Default value is the icon center.\n * @property {import(\"./IconOrigin.js\").default} [anchorOrigin] Origin of the anchor: `bottom-left`, `bottom-right`,\n * `top-left` or `top-right`. Default is `top-left`.\n * @property {import(\"./IconAnchorUnits.js\").default} [anchorXUnits] Units in which the anchor x value is\n * specified. A value of `'fraction'` indicates the x value is a fraction of the icon. A value of `'pixels'` indicates\n * the x value in pixels. Default is `'fraction'`.\n * @property {import(\"./IconAnchorUnits.js\").default} [anchorYUnits] Units in which the anchor y value is\n * specified. A value of `'fraction'` indicates the y value is a fraction of the icon. A value of `'pixels'` indicates\n * the y value in pixels. Default is `'fraction'`.\n * @property {import(\"../color.js\").Color|string} [color] Color to tint the icon. If not specified,\n * the icon will be left as is.\n * @property {null|string} [crossOrigin] The `crossOrigin` attribute for loaded images. Note that you must provide a\n * `crossOrigin` value if you are using the WebGL renderer or if you want to access pixel data with the Canvas renderer.\n * See https://developer.mozilla.org/en-US/docs/Web/HTML/CORS_enabled_image for more detail.\n * @property {HTMLImageElement|HTMLCanvasElement} [img] Image object for the icon. If the `src` option is not provided then the\n * provided image must already be loaded. And in that case, it is required\n * to provide the size of the image, with the `imgSize` option.\n * @property {Array<number>} [offset=[0, 0]] Offset, which, together with the size and the offset origin, define the\n * sub-rectangle to use from the original icon image.\n * @property {import(\"./IconOrigin.js\").default} [offsetOrigin] Origin of the offset: `bottom-left`, `bottom-right`,\n * `top-left` or `top-right`. Default is `top-left`.\n * @property {number} [opacity=1] Opacity of the icon.\n * @property {number} [scale=1] Scale.\n * @property {boolean} [rotateWithView=false] Whether to rotate the icon with the view.\n * @property {number} [rotation=0] Rotation in radians (positive rotation clockwise).\n * @property {import(\"../size.js\").Size} [size] Icon size in pixel. Can be used together with `offset` to define the\n * sub-rectangle to use from the origin (sprite) icon image.\n * @property {import(\"../size.js\").Size} [imgSize] Image size in pixels. Only required if `img` is set and `src` is not, and\n * for SVG images in Internet Explorer 11. The provided `imgSize` needs to match the actual size of the image.\n * @property {string} [src] Image source URI.\n */\n\n/**\n * @classdesc\n * Set icon style for vector features.\n * @api\n */\n\nvar Icon =\n/*@__PURE__*/\nfunction (ImageStyle) {\n  function Icon(opt_options) {\n    var options = opt_options || {};\n    /**\n     * @type {number}\n     */\n\n    var opacity = options.opacity !== undefined ? options.opacity : 1;\n    /**\n     * @type {number}\n     */\n\n    var rotation = options.rotation !== undefined ? options.rotation : 0;\n    /**\n     * @type {number}\n     */\n\n    var scale = options.scale !== undefined ? options.scale : 1;\n    /**\n     * @type {boolean}\n     */\n\n    var rotateWithView = options.rotateWithView !== undefined ? options.rotateWithView : false;\n    ImageStyle.call(this, {\n      opacity: opacity,\n      rotation: rotation,\n      scale: scale,\n      rotateWithView: rotateWithView\n    });\n    /**\n     * @private\n     * @type {Array<number>}\n     */\n\n    this.anchor_ = options.anchor !== undefined ? options.anchor : [0.5, 0.5];\n    /**\n     * @private\n     * @type {Array<number>}\n     */\n\n    this.normalizedAnchor_ = null;\n    /**\n     * @private\n     * @type {import(\"./IconOrigin.js\").default}\n     */\n\n    this.anchorOrigin_ = options.anchorOrigin !== undefined ? options.anchorOrigin : IconOrigin.TOP_LEFT;\n    /**\n     * @private\n     * @type {import(\"./IconAnchorUnits.js\").default}\n     */\n\n    this.anchorXUnits_ = options.anchorXUnits !== undefined ? options.anchorXUnits : IconAnchorUnits.FRACTION;\n    /**\n     * @private\n     * @type {import(\"./IconAnchorUnits.js\").default}\n     */\n\n    this.anchorYUnits_ = options.anchorYUnits !== undefined ? options.anchorYUnits : IconAnchorUnits.FRACTION;\n    /**\n     * @private\n     * @type {?string}\n     */\n\n    this.crossOrigin_ = options.crossOrigin !== undefined ? options.crossOrigin : null;\n    /**\n     * @type {HTMLImageElement|HTMLCanvasElement}\n     */\n\n    var image = options.img !== undefined ? options.img : null;\n    /**\n     * @type {import(\"../size.js\").Size}\n     */\n\n    var imgSize = options.imgSize !== undefined ? options.imgSize : null;\n    /**\n     * @type {string|undefined}\n     */\n\n    var src = options.src;\n    assert(!(src !== undefined && image), 4); // `image` and `src` cannot be provided at the same time\n\n    assert(!image || image && imgSize, 5); // `imgSize` must be set when `image` is provided\n\n    if ((src === undefined || src.length === 0) && image) {\n      src =\n      /** @type {HTMLImageElement} */\n      image.src || getUid(image);\n    }\n\n    assert(src !== undefined && src.length > 0, 6); // A defined and non-empty `src` or `image` must be provided\n\n    /**\n     * @type {import(\"../ImageState.js\").default}\n     */\n\n    var imageState = options.src !== undefined ? ImageState.IDLE : ImageState.LOADED;\n    /**\n     * @private\n     * @type {import(\"../color.js\").Color}\n     */\n\n    this.color_ = options.color !== undefined ? asArray(options.color) : null;\n    /**\n     * @private\n     * @type {import(\"./IconImage.js\").default}\n     */\n\n    this.iconImage_ = getIconImage(image,\n    /** @type {string} */\n    src, imgSize, this.crossOrigin_, imageState, this.color_);\n    /**\n     * @private\n     * @type {Array<number>}\n     */\n\n    this.offset_ = options.offset !== undefined ? options.offset : [0, 0];\n    /**\n     * @private\n     * @type {import(\"./IconOrigin.js\").default}\n     */\n\n    this.offsetOrigin_ = options.offsetOrigin !== undefined ? options.offsetOrigin : IconOrigin.TOP_LEFT;\n    /**\n     * @private\n     * @type {Array<number>}\n     */\n\n    this.origin_ = null;\n    /**\n     * @private\n     * @type {import(\"../size.js\").Size}\n     */\n\n    this.size_ = options.size !== undefined ? options.size : null;\n  }\n\n  if (ImageStyle) Icon.__proto__ = ImageStyle;\n  Icon.prototype = Object.create(ImageStyle && ImageStyle.prototype);\n  Icon.prototype.constructor = Icon;\n  /**\n   * Clones the style. The underlying Image/HTMLCanvasElement is not cloned.\n   * @return {Icon} The cloned style.\n   * @api\n   */\n\n  Icon.prototype.clone = function clone() {\n    return new Icon({\n      anchor: this.anchor_.slice(),\n      anchorOrigin: this.anchorOrigin_,\n      anchorXUnits: this.anchorXUnits_,\n      anchorYUnits: this.anchorYUnits_,\n      crossOrigin: this.crossOrigin_,\n      color: this.color_ && this.color_.slice ? this.color_.slice() : this.color_ || undefined,\n      src: this.getSrc(),\n      offset: this.offset_.slice(),\n      offsetOrigin: this.offsetOrigin_,\n      size: this.size_ !== null ? this.size_.slice() : undefined,\n      opacity: this.getOpacity(),\n      scale: this.getScale(),\n      rotation: this.getRotation(),\n      rotateWithView: this.getRotateWithView()\n    });\n  };\n  /**\n   * @inheritDoc\n   * @api\n   */\n\n\n  Icon.prototype.getAnchor = function getAnchor() {\n    if (this.normalizedAnchor_) {\n      return this.normalizedAnchor_;\n    }\n\n    var anchor = this.anchor_;\n    var size = this.getSize();\n\n    if (this.anchorXUnits_ == IconAnchorUnits.FRACTION || this.anchorYUnits_ == IconAnchorUnits.FRACTION) {\n      if (!size) {\n        return null;\n      }\n\n      anchor = this.anchor_.slice();\n\n      if (this.anchorXUnits_ == IconAnchorUnits.FRACTION) {\n        anchor[0] *= size[0];\n      }\n\n      if (this.anchorYUnits_ == IconAnchorUnits.FRACTION) {\n        anchor[1] *= size[1];\n      }\n    }\n\n    if (this.anchorOrigin_ != IconOrigin.TOP_LEFT) {\n      if (!size) {\n        return null;\n      }\n\n      if (anchor === this.anchor_) {\n        anchor = this.anchor_.slice();\n      }\n\n      if (this.anchorOrigin_ == IconOrigin.TOP_RIGHT || this.anchorOrigin_ == IconOrigin.BOTTOM_RIGHT) {\n        anchor[0] = -anchor[0] + size[0];\n      }\n\n      if (this.anchorOrigin_ == IconOrigin.BOTTOM_LEFT || this.anchorOrigin_ == IconOrigin.BOTTOM_RIGHT) {\n        anchor[1] = -anchor[1] + size[1];\n      }\n    }\n\n    this.normalizedAnchor_ = anchor;\n    return this.normalizedAnchor_;\n  };\n  /**\n   * Set the anchor point. The anchor determines the center point for the\n   * symbolizer.\n   *\n   * @param {Array<number>} anchor Anchor.\n   * @api\n   */\n\n\n  Icon.prototype.setAnchor = function setAnchor(anchor) {\n    this.anchor_ = anchor;\n    this.normalizedAnchor_ = null;\n  };\n  /**\n   * Get the icon color.\n   * @return {import(\"../color.js\").Color} Color.\n   * @api\n   */\n\n\n  Icon.prototype.getColor = function getColor() {\n    return this.color_;\n  };\n  /**\n   * Get the image icon.\n   * @param {number} pixelRatio Pixel ratio.\n   * @return {HTMLImageElement|HTMLCanvasElement} Image or Canvas element.\n   * @override\n   * @api\n   */\n\n\n  Icon.prototype.getImage = function getImage(pixelRatio) {\n    return this.iconImage_.getImage(pixelRatio);\n  };\n  /**\n   * @override\n   */\n\n\n  Icon.prototype.getImageSize = function getImageSize() {\n    return this.iconImage_.getSize();\n  };\n  /**\n   * @override\n   */\n\n\n  Icon.prototype.getHitDetectionImageSize = function getHitDetectionImageSize() {\n    return this.getImageSize();\n  };\n  /**\n   * @override\n   */\n\n\n  Icon.prototype.getImageState = function getImageState() {\n    return this.iconImage_.getImageState();\n  };\n  /**\n   * @override\n   */\n\n\n  Icon.prototype.getHitDetectionImage = function getHitDetectionImage(pixelRatio) {\n    return this.iconImage_.getHitDetectionImage(pixelRatio);\n  };\n  /**\n   * @inheritDoc\n   * @api\n   */\n\n\n  Icon.prototype.getOrigin = function getOrigin() {\n    if (this.origin_) {\n      return this.origin_;\n    }\n\n    var offset = this.offset_;\n\n    if (this.offsetOrigin_ != IconOrigin.TOP_LEFT) {\n      var size = this.getSize();\n      var iconImageSize = this.iconImage_.getSize();\n\n      if (!size || !iconImageSize) {\n        return null;\n      }\n\n      offset = offset.slice();\n\n      if (this.offsetOrigin_ == IconOrigin.TOP_RIGHT || this.offsetOrigin_ == IconOrigin.BOTTOM_RIGHT) {\n        offset[0] = iconImageSize[0] - size[0] - offset[0];\n      }\n\n      if (this.offsetOrigin_ == IconOrigin.BOTTOM_LEFT || this.offsetOrigin_ == IconOrigin.BOTTOM_RIGHT) {\n        offset[1] = iconImageSize[1] - size[1] - offset[1];\n      }\n    }\n\n    this.origin_ = offset;\n    return this.origin_;\n  };\n  /**\n   * Get the image URL.\n   * @return {string|undefined} Image src.\n   * @api\n   */\n\n\n  Icon.prototype.getSrc = function getSrc() {\n    return this.iconImage_.getSrc();\n  };\n  /**\n   * @inheritDoc\n   * @api\n   */\n\n\n  Icon.prototype.getSize = function getSize() {\n    return !this.size_ ? this.iconImage_.getSize() : this.size_;\n  };\n  /**\n   * @override\n   */\n\n\n  Icon.prototype.listenImageChange = function listenImageChange(listener, thisArg) {\n    return listen(this.iconImage_, EventType.CHANGE, listener, thisArg);\n  };\n  /**\n   * Load not yet loaded URI.\n   * When rendering a feature with an icon style, the vector renderer will\n   * automatically call this method. However, you might want to call this\n   * method yourself for preloading or other purposes.\n   * @override\n   * @api\n   */\n\n\n  Icon.prototype.load = function load() {\n    this.iconImage_.load();\n  };\n  /**\n   * @override\n   */\n\n\n  Icon.prototype.unlistenImageChange = function unlistenImageChange(listener, thisArg) {\n    unlisten(this.iconImage_, EventType.CHANGE, listener, thisArg);\n  };\n\n  return Icon;\n}(ImageStyle);\n\nexport default Icon;","map":{"version":3,"sources":["../../../src/ol/style/Icon.js"],"names":["const","super","let"],"mappings":"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","sourcesContent":["/**\n * @module ol/style/Icon\n */\nimport {getUid} from '../util.js';\nimport ImageState from '../ImageState.js';\nimport {assert} from '../asserts.js';\nimport {asArray} from '../color.js';\nimport {listen, unlisten} from '../events.js';\nimport EventType from '../events/EventType.js';\nimport IconAnchorUnits from './IconAnchorUnits.js';\nimport {get as getIconImage} from './IconImage.js';\nimport IconOrigin from './IconOrigin.js';\nimport ImageStyle from './Image.js';\n\n\n/**\n * @typedef {Object} Options\n * @property {Array<number>} [anchor=[0.5, 0.5]] Anchor. Default value is the icon center.\n * @property {import(\"./IconOrigin.js\").default} [anchorOrigin] Origin of the anchor: `bottom-left`, `bottom-right`,\n * `top-left` or `top-right`. Default is `top-left`.\n * @property {import(\"./IconAnchorUnits.js\").default} [anchorXUnits] Units in which the anchor x value is\n * specified. A value of `'fraction'` indicates the x value is a fraction of the icon. A value of `'pixels'` indicates\n * the x value in pixels. Default is `'fraction'`.\n * @property {import(\"./IconAnchorUnits.js\").default} [anchorYUnits] Units in which the anchor y value is\n * specified. A value of `'fraction'` indicates the y value is a fraction of the icon. A value of `'pixels'` indicates\n * the y value in pixels. Default is `'fraction'`.\n * @property {import(\"../color.js\").Color|string} [color] Color to tint the icon. If not specified,\n * the icon will be left as is.\n * @property {null|string} [crossOrigin] The `crossOrigin` attribute for loaded images. Note that you must provide a\n * `crossOrigin` value if you are using the WebGL renderer or if you want to access pixel data with the Canvas renderer.\n * See https://developer.mozilla.org/en-US/docs/Web/HTML/CORS_enabled_image for more detail.\n * @property {HTMLImageElement|HTMLCanvasElement} [img] Image object for the icon. If the `src` option is not provided then the\n * provided image must already be loaded. And in that case, it is required\n * to provide the size of the image, with the `imgSize` option.\n * @property {Array<number>} [offset=[0, 0]] Offset, which, together with the size and the offset origin, define the\n * sub-rectangle to use from the original icon image.\n * @property {import(\"./IconOrigin.js\").default} [offsetOrigin] Origin of the offset: `bottom-left`, `bottom-right`,\n * `top-left` or `top-right`. Default is `top-left`.\n * @property {number} [opacity=1] Opacity of the icon.\n * @property {number} [scale=1] Scale.\n * @property {boolean} [rotateWithView=false] Whether to rotate the icon with the view.\n * @property {number} [rotation=0] Rotation in radians (positive rotation clockwise).\n * @property {import(\"../size.js\").Size} [size] Icon size in pixel. Can be used together with `offset` to define the\n * sub-rectangle to use from the origin (sprite) icon image.\n * @property {import(\"../size.js\").Size} [imgSize] Image size in pixels. Only required if `img` is set and `src` is not, and\n * for SVG images in Internet Explorer 11. The provided `imgSize` needs to match the actual size of the image.\n * @property {string} [src] Image source URI.\n */\n\n\n/**\n * @classdesc\n * Set icon style for vector features.\n * @api\n */\nclass Icon extends ImageStyle {\n  /**\n   * @param {Options=} opt_options Options.\n   */\n  constructor(opt_options) {\n    const options = opt_options || {};\n\n    /**\n     * @type {number}\n     */\n    const opacity = options.opacity !== undefined ? options.opacity : 1;\n\n    /**\n     * @type {number}\n     */\n    const rotation = options.rotation !== undefined ? options.rotation : 0;\n\n    /**\n     * @type {number}\n     */\n    const scale = options.scale !== undefined ? options.scale : 1;\n\n    /**\n     * @type {boolean}\n     */\n    const rotateWithView = options.rotateWithView !== undefined ?\n      options.rotateWithView : false;\n\n    super({\n      opacity: opacity,\n      rotation: rotation,\n      scale: scale,\n      rotateWithView: rotateWithView\n    });\n\n    /**\n     * @private\n     * @type {Array<number>}\n     */\n    this.anchor_ = options.anchor !== undefined ? options.anchor : [0.5, 0.5];\n\n    /**\n     * @private\n     * @type {Array<number>}\n     */\n    this.normalizedAnchor_ = null;\n\n    /**\n     * @private\n     * @type {import(\"./IconOrigin.js\").default}\n     */\n    this.anchorOrigin_ = options.anchorOrigin !== undefined ?\n      options.anchorOrigin : IconOrigin.TOP_LEFT;\n\n    /**\n     * @private\n     * @type {import(\"./IconAnchorUnits.js\").default}\n     */\n    this.anchorXUnits_ = options.anchorXUnits !== undefined ?\n      options.anchorXUnits : IconAnchorUnits.FRACTION;\n\n    /**\n     * @private\n     * @type {import(\"./IconAnchorUnits.js\").default}\n     */\n    this.anchorYUnits_ = options.anchorYUnits !== undefined ?\n      options.anchorYUnits : IconAnchorUnits.FRACTION;\n\n    /**\n     * @private\n     * @type {?string}\n     */\n    this.crossOrigin_ =\n        options.crossOrigin !== undefined ? options.crossOrigin : null;\n\n    /**\n     * @type {HTMLImageElement|HTMLCanvasElement}\n     */\n    const image = options.img !== undefined ? options.img : null;\n\n    /**\n     * @type {import(\"../size.js\").Size}\n     */\n    const imgSize = options.imgSize !== undefined ? options.imgSize : null;\n\n    /**\n     * @type {string|undefined}\n     */\n    let src = options.src;\n\n    assert(!(src !== undefined && image),\n      4); // `image` and `src` cannot be provided at the same time\n    assert(!image || (image && imgSize),\n      5); // `imgSize` must be set when `image` is provided\n\n    if ((src === undefined || src.length === 0) && image) {\n      src = /** @type {HTMLImageElement} */ (image).src || getUid(image);\n    }\n    assert(src !== undefined && src.length > 0,\n      6); // A defined and non-empty `src` or `image` must be provided\n\n    /**\n     * @type {import(\"../ImageState.js\").default}\n     */\n    const imageState = options.src !== undefined ?\n      ImageState.IDLE : ImageState.LOADED;\n\n    /**\n     * @private\n     * @type {import(\"../color.js\").Color}\n     */\n    this.color_ = options.color !== undefined ? asArray(options.color) : null;\n\n    /**\n     * @private\n     * @type {import(\"./IconImage.js\").default}\n     */\n    this.iconImage_ = getIconImage(\n      image, /** @type {string} */ (src), imgSize, this.crossOrigin_, imageState, this.color_);\n\n    /**\n     * @private\n     * @type {Array<number>}\n     */\n    this.offset_ = options.offset !== undefined ? options.offset : [0, 0];\n\n    /**\n     * @private\n     * @type {import(\"./IconOrigin.js\").default}\n     */\n    this.offsetOrigin_ = options.offsetOrigin !== undefined ?\n      options.offsetOrigin : IconOrigin.TOP_LEFT;\n\n    /**\n     * @private\n     * @type {Array<number>}\n     */\n    this.origin_ = null;\n\n    /**\n     * @private\n     * @type {import(\"../size.js\").Size}\n     */\n    this.size_ = options.size !== undefined ? options.size : null;\n\n  }\n\n  /**\n   * Clones the style. The underlying Image/HTMLCanvasElement is not cloned.\n   * @return {Icon} The cloned style.\n   * @api\n   */\n  clone() {\n    return new Icon({\n      anchor: this.anchor_.slice(),\n      anchorOrigin: this.anchorOrigin_,\n      anchorXUnits: this.anchorXUnits_,\n      anchorYUnits: this.anchorYUnits_,\n      crossOrigin: this.crossOrigin_,\n      color: (this.color_ && this.color_.slice) ? this.color_.slice() : this.color_ || undefined,\n      src: this.getSrc(),\n      offset: this.offset_.slice(),\n      offsetOrigin: this.offsetOrigin_,\n      size: this.size_ !== null ? this.size_.slice() : undefined,\n      opacity: this.getOpacity(),\n      scale: this.getScale(),\n      rotation: this.getRotation(),\n      rotateWithView: this.getRotateWithView()\n    });\n  }\n\n  /**\n   * @inheritDoc\n   * @api\n   */\n  getAnchor() {\n    if (this.normalizedAnchor_) {\n      return this.normalizedAnchor_;\n    }\n    let anchor = this.anchor_;\n    const size = this.getSize();\n    if (this.anchorXUnits_ == IconAnchorUnits.FRACTION ||\n        this.anchorYUnits_ == IconAnchorUnits.FRACTION) {\n      if (!size) {\n        return null;\n      }\n      anchor = this.anchor_.slice();\n      if (this.anchorXUnits_ == IconAnchorUnits.FRACTION) {\n        anchor[0] *= size[0];\n      }\n      if (this.anchorYUnits_ == IconAnchorUnits.FRACTION) {\n        anchor[1] *= size[1];\n      }\n    }\n\n    if (this.anchorOrigin_ != IconOrigin.TOP_LEFT) {\n      if (!size) {\n        return null;\n      }\n      if (anchor === this.anchor_) {\n        anchor = this.anchor_.slice();\n      }\n      if (this.anchorOrigin_ == IconOrigin.TOP_RIGHT ||\n          this.anchorOrigin_ == IconOrigin.BOTTOM_RIGHT) {\n        anchor[0] = -anchor[0] + size[0];\n      }\n      if (this.anchorOrigin_ == IconOrigin.BOTTOM_LEFT ||\n          this.anchorOrigin_ == IconOrigin.BOTTOM_RIGHT) {\n        anchor[1] = -anchor[1] + size[1];\n      }\n    }\n    this.normalizedAnchor_ = anchor;\n    return this.normalizedAnchor_;\n  }\n\n  /**\n   * Set the anchor point. The anchor determines the center point for the\n   * symbolizer.\n   *\n   * @param {Array<number>} anchor Anchor.\n   * @api\n   */\n  setAnchor(anchor) {\n    this.anchor_ = anchor;\n    this.normalizedAnchor_ = null;\n  }\n\n  /**\n   * Get the icon color.\n   * @return {import(\"../color.js\").Color} Color.\n   * @api\n   */\n  getColor() {\n    return this.color_;\n  }\n\n  /**\n   * Get the image icon.\n   * @param {number} pixelRatio Pixel ratio.\n   * @return {HTMLImageElement|HTMLCanvasElement} Image or Canvas element.\n   * @override\n   * @api\n   */\n  getImage(pixelRatio) {\n    return this.iconImage_.getImage(pixelRatio);\n  }\n\n  /**\n   * @override\n   */\n  getImageSize() {\n    return this.iconImage_.getSize();\n  }\n\n  /**\n   * @override\n   */\n  getHitDetectionImageSize() {\n    return this.getImageSize();\n  }\n\n  /**\n   * @override\n   */\n  getImageState() {\n    return this.iconImage_.getImageState();\n  }\n\n  /**\n   * @override\n   */\n  getHitDetectionImage(pixelRatio) {\n    return this.iconImage_.getHitDetectionImage(pixelRatio);\n  }\n\n  /**\n   * @inheritDoc\n   * @api\n   */\n  getOrigin() {\n    if (this.origin_) {\n      return this.origin_;\n    }\n    let offset = this.offset_;\n\n    if (this.offsetOrigin_ != IconOrigin.TOP_LEFT) {\n      const size = this.getSize();\n      const iconImageSize = this.iconImage_.getSize();\n      if (!size || !iconImageSize) {\n        return null;\n      }\n      offset = offset.slice();\n      if (this.offsetOrigin_ == IconOrigin.TOP_RIGHT ||\n          this.offsetOrigin_ == IconOrigin.BOTTOM_RIGHT) {\n        offset[0] = iconImageSize[0] - size[0] - offset[0];\n      }\n      if (this.offsetOrigin_ == IconOrigin.BOTTOM_LEFT ||\n          this.offsetOrigin_ == IconOrigin.BOTTOM_RIGHT) {\n        offset[1] = iconImageSize[1] - size[1] - offset[1];\n      }\n    }\n    this.origin_ = offset;\n    return this.origin_;\n  }\n\n  /**\n   * Get the image URL.\n   * @return {string|undefined} Image src.\n   * @api\n   */\n  getSrc() {\n    return this.iconImage_.getSrc();\n  }\n\n  /**\n   * @inheritDoc\n   * @api\n   */\n  getSize() {\n    return !this.size_ ? this.iconImage_.getSize() : this.size_;\n  }\n\n  /**\n   * @override\n   */\n  listenImageChange(listener, thisArg) {\n    return listen(this.iconImage_, EventType.CHANGE,\n      listener, thisArg);\n  }\n\n  /**\n   * Load not yet loaded URI.\n   * When rendering a feature with an icon style, the vector renderer will\n   * automatically call this method. However, you might want to call this\n   * method yourself for preloading or other purposes.\n   * @override\n   * @api\n   */\n  load() {\n    this.iconImage_.load();\n  }\n\n  /**\n   * @override\n   */\n  unlistenImageChange(listener, thisArg) {\n    unlisten(this.iconImage_, EventType.CHANGE,\n      listener, thisArg);\n  }\n}\n\n\nexport default Icon;\n"]},"metadata":{},"sourceType":"module"}